
f767.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00024eb4  08000200  08000200  00001200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000109a8  080250b8  080250b8  000260b8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08035a60  08035a60  000374b8  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08035a60  08035a60  00036a60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08035a68  08035a68  000374b8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08035a68  08035a68  00036a68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08035a6c  08035a6c  00036a6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000378  20000000  08035a70  00037000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  20000378  08035de8  00037378  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  20000418  08035e88  00037418  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          000148f4  200004b8  08035f28  000374b8  2**3
                  ALLOC
 12 ._user_heap_stack 00000604  20014dac  08035f28  00037dac  2**0
                  ALLOC
 13 .ARM.attributes 0000002e  00000000  00000000  000374b8  2**0
                  CONTENTS, READONLY
 14 .debug_info   000338bb  00000000  00000000  000374e6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 0000494c  00000000  00000000  0006ada1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00002a60  00000000  00000000  0006f6f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 000022e4  00000000  00000000  00072150  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00006acf  00000000  00000000  00074434  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0002ff3c  00000000  00000000  0007af03  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    00116df0  00000000  00000000  000aae3f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000043  00000000  00000000  001c1c2f  2**0
                  CONTENTS, READONLY
 22 .debug_frame  0000cb08  00000000  00000000  001c1c74  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 00000065  00000000  00000000  001ce77c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	@ (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	@ (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	@ (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	200004b8 	.word	0x200004b8
 800021c:	00000000 	.word	0x00000000
 8000220:	0802509c 	.word	0x0802509c

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	@ (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	@ (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	@ (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	200004bc 	.word	0x200004bc
 800023c:	0802509c 	.word	0x0802509c

08000240 <strcmp>:
 8000240:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000244:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000248:	2a01      	cmp	r2, #1
 800024a:	bf28      	it	cs
 800024c:	429a      	cmpcs	r2, r3
 800024e:	d0f7      	beq.n	8000240 <strcmp>
 8000250:	1ad0      	subs	r0, r2, r3
 8000252:	4770      	bx	lr
	...

08000260 <memchr>:
 8000260:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000264:	2a10      	cmp	r2, #16
 8000266:	db2b      	blt.n	80002c0 <memchr+0x60>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	d008      	beq.n	8000280 <memchr+0x20>
 800026e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000272:	3a01      	subs	r2, #1
 8000274:	428b      	cmp	r3, r1
 8000276:	d02d      	beq.n	80002d4 <memchr+0x74>
 8000278:	f010 0f07 	tst.w	r0, #7
 800027c:	b342      	cbz	r2, 80002d0 <memchr+0x70>
 800027e:	d1f6      	bne.n	800026e <memchr+0xe>
 8000280:	b4f0      	push	{r4, r5, r6, r7}
 8000282:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000286:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800028a:	f022 0407 	bic.w	r4, r2, #7
 800028e:	f07f 0700 	mvns.w	r7, #0
 8000292:	2300      	movs	r3, #0
 8000294:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000298:	3c08      	subs	r4, #8
 800029a:	ea85 0501 	eor.w	r5, r5, r1
 800029e:	ea86 0601 	eor.w	r6, r6, r1
 80002a2:	fa85 f547 	uadd8	r5, r5, r7
 80002a6:	faa3 f587 	sel	r5, r3, r7
 80002aa:	fa86 f647 	uadd8	r6, r6, r7
 80002ae:	faa5 f687 	sel	r6, r5, r7
 80002b2:	b98e      	cbnz	r6, 80002d8 <memchr+0x78>
 80002b4:	d1ee      	bne.n	8000294 <memchr+0x34>
 80002b6:	bcf0      	pop	{r4, r5, r6, r7}
 80002b8:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002bc:	f002 0207 	and.w	r2, r2, #7
 80002c0:	b132      	cbz	r2, 80002d0 <memchr+0x70>
 80002c2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002c6:	3a01      	subs	r2, #1
 80002c8:	ea83 0301 	eor.w	r3, r3, r1
 80002cc:	b113      	cbz	r3, 80002d4 <memchr+0x74>
 80002ce:	d1f8      	bne.n	80002c2 <memchr+0x62>
 80002d0:	2000      	movs	r0, #0
 80002d2:	4770      	bx	lr
 80002d4:	3801      	subs	r0, #1
 80002d6:	4770      	bx	lr
 80002d8:	2d00      	cmp	r5, #0
 80002da:	bf06      	itte	eq
 80002dc:	4635      	moveq	r5, r6
 80002de:	3803      	subeq	r0, #3
 80002e0:	3807      	subne	r0, #7
 80002e2:	f015 0f01 	tst.w	r5, #1
 80002e6:	d107      	bne.n	80002f8 <memchr+0x98>
 80002e8:	3001      	adds	r0, #1
 80002ea:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ee:	bf02      	ittt	eq
 80002f0:	3001      	addeq	r0, #1
 80002f2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002f6:	3001      	addeq	r0, #1
 80002f8:	bcf0      	pop	{r4, r5, r6, r7}
 80002fa:	3801      	subs	r0, #1
 80002fc:	4770      	bx	lr
 80002fe:	bf00      	nop

08000300 <strlen>:
 8000300:	4603      	mov	r3, r0
 8000302:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000306:	2a00      	cmp	r2, #0
 8000308:	d1fb      	bne.n	8000302 <strlen+0x2>
 800030a:	1a18      	subs	r0, r3, r0
 800030c:	3801      	subs	r0, #1
 800030e:	4770      	bx	lr

08000310 <__aeabi_uldivmod>:
 8000310:	b953      	cbnz	r3, 8000328 <__aeabi_uldivmod+0x18>
 8000312:	b94a      	cbnz	r2, 8000328 <__aeabi_uldivmod+0x18>
 8000314:	2900      	cmp	r1, #0
 8000316:	bf08      	it	eq
 8000318:	2800      	cmpeq	r0, #0
 800031a:	bf1c      	itt	ne
 800031c:	f04f 31ff 	movne.w	r1, #4294967295
 8000320:	f04f 30ff 	movne.w	r0, #4294967295
 8000324:	f000 b988 	b.w	8000638 <__aeabi_idiv0>
 8000328:	f1ad 0c08 	sub.w	ip, sp, #8
 800032c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000330:	f000 f806 	bl	8000340 <__udivmoddi4>
 8000334:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000338:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800033c:	b004      	add	sp, #16
 800033e:	4770      	bx	lr

08000340 <__udivmoddi4>:
 8000340:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000344:	9d08      	ldr	r5, [sp, #32]
 8000346:	468e      	mov	lr, r1
 8000348:	4604      	mov	r4, r0
 800034a:	4688      	mov	r8, r1
 800034c:	2b00      	cmp	r3, #0
 800034e:	d14a      	bne.n	80003e6 <__udivmoddi4+0xa6>
 8000350:	428a      	cmp	r2, r1
 8000352:	4617      	mov	r7, r2
 8000354:	d962      	bls.n	800041c <__udivmoddi4+0xdc>
 8000356:	fab2 f682 	clz	r6, r2
 800035a:	b14e      	cbz	r6, 8000370 <__udivmoddi4+0x30>
 800035c:	f1c6 0320 	rsb	r3, r6, #32
 8000360:	fa01 f806 	lsl.w	r8, r1, r6
 8000364:	fa20 f303 	lsr.w	r3, r0, r3
 8000368:	40b7      	lsls	r7, r6
 800036a:	ea43 0808 	orr.w	r8, r3, r8
 800036e:	40b4      	lsls	r4, r6
 8000370:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000374:	fa1f fc87 	uxth.w	ip, r7
 8000378:	fbb8 f1fe 	udiv	r1, r8, lr
 800037c:	0c23      	lsrs	r3, r4, #16
 800037e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000382:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000386:	fb01 f20c 	mul.w	r2, r1, ip
 800038a:	429a      	cmp	r2, r3
 800038c:	d909      	bls.n	80003a2 <__udivmoddi4+0x62>
 800038e:	18fb      	adds	r3, r7, r3
 8000390:	f101 30ff 	add.w	r0, r1, #4294967295
 8000394:	f080 80ea 	bcs.w	800056c <__udivmoddi4+0x22c>
 8000398:	429a      	cmp	r2, r3
 800039a:	f240 80e7 	bls.w	800056c <__udivmoddi4+0x22c>
 800039e:	3902      	subs	r1, #2
 80003a0:	443b      	add	r3, r7
 80003a2:	1a9a      	subs	r2, r3, r2
 80003a4:	b2a3      	uxth	r3, r4
 80003a6:	fbb2 f0fe 	udiv	r0, r2, lr
 80003aa:	fb0e 2210 	mls	r2, lr, r0, r2
 80003ae:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003b2:	fb00 fc0c 	mul.w	ip, r0, ip
 80003b6:	459c      	cmp	ip, r3
 80003b8:	d909      	bls.n	80003ce <__udivmoddi4+0x8e>
 80003ba:	18fb      	adds	r3, r7, r3
 80003bc:	f100 32ff 	add.w	r2, r0, #4294967295
 80003c0:	f080 80d6 	bcs.w	8000570 <__udivmoddi4+0x230>
 80003c4:	459c      	cmp	ip, r3
 80003c6:	f240 80d3 	bls.w	8000570 <__udivmoddi4+0x230>
 80003ca:	443b      	add	r3, r7
 80003cc:	3802      	subs	r0, #2
 80003ce:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80003d2:	eba3 030c 	sub.w	r3, r3, ip
 80003d6:	2100      	movs	r1, #0
 80003d8:	b11d      	cbz	r5, 80003e2 <__udivmoddi4+0xa2>
 80003da:	40f3      	lsrs	r3, r6
 80003dc:	2200      	movs	r2, #0
 80003de:	e9c5 3200 	strd	r3, r2, [r5]
 80003e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d905      	bls.n	80003f6 <__udivmoddi4+0xb6>
 80003ea:	b10d      	cbz	r5, 80003f0 <__udivmoddi4+0xb0>
 80003ec:	e9c5 0100 	strd	r0, r1, [r5]
 80003f0:	2100      	movs	r1, #0
 80003f2:	4608      	mov	r0, r1
 80003f4:	e7f5      	b.n	80003e2 <__udivmoddi4+0xa2>
 80003f6:	fab3 f183 	clz	r1, r3
 80003fa:	2900      	cmp	r1, #0
 80003fc:	d146      	bne.n	800048c <__udivmoddi4+0x14c>
 80003fe:	4573      	cmp	r3, lr
 8000400:	d302      	bcc.n	8000408 <__udivmoddi4+0xc8>
 8000402:	4282      	cmp	r2, r0
 8000404:	f200 8105 	bhi.w	8000612 <__udivmoddi4+0x2d2>
 8000408:	1a84      	subs	r4, r0, r2
 800040a:	eb6e 0203 	sbc.w	r2, lr, r3
 800040e:	2001      	movs	r0, #1
 8000410:	4690      	mov	r8, r2
 8000412:	2d00      	cmp	r5, #0
 8000414:	d0e5      	beq.n	80003e2 <__udivmoddi4+0xa2>
 8000416:	e9c5 4800 	strd	r4, r8, [r5]
 800041a:	e7e2      	b.n	80003e2 <__udivmoddi4+0xa2>
 800041c:	2a00      	cmp	r2, #0
 800041e:	f000 8090 	beq.w	8000542 <__udivmoddi4+0x202>
 8000422:	fab2 f682 	clz	r6, r2
 8000426:	2e00      	cmp	r6, #0
 8000428:	f040 80a4 	bne.w	8000574 <__udivmoddi4+0x234>
 800042c:	1a8a      	subs	r2, r1, r2
 800042e:	0c03      	lsrs	r3, r0, #16
 8000430:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000434:	b280      	uxth	r0, r0
 8000436:	b2bc      	uxth	r4, r7
 8000438:	2101      	movs	r1, #1
 800043a:	fbb2 fcfe 	udiv	ip, r2, lr
 800043e:	fb0e 221c 	mls	r2, lr, ip, r2
 8000442:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000446:	fb04 f20c 	mul.w	r2, r4, ip
 800044a:	429a      	cmp	r2, r3
 800044c:	d907      	bls.n	800045e <__udivmoddi4+0x11e>
 800044e:	18fb      	adds	r3, r7, r3
 8000450:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000454:	d202      	bcs.n	800045c <__udivmoddi4+0x11c>
 8000456:	429a      	cmp	r2, r3
 8000458:	f200 80e0 	bhi.w	800061c <__udivmoddi4+0x2dc>
 800045c:	46c4      	mov	ip, r8
 800045e:	1a9b      	subs	r3, r3, r2
 8000460:	fbb3 f2fe 	udiv	r2, r3, lr
 8000464:	fb0e 3312 	mls	r3, lr, r2, r3
 8000468:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800046c:	fb02 f404 	mul.w	r4, r2, r4
 8000470:	429c      	cmp	r4, r3
 8000472:	d907      	bls.n	8000484 <__udivmoddi4+0x144>
 8000474:	18fb      	adds	r3, r7, r3
 8000476:	f102 30ff 	add.w	r0, r2, #4294967295
 800047a:	d202      	bcs.n	8000482 <__udivmoddi4+0x142>
 800047c:	429c      	cmp	r4, r3
 800047e:	f200 80ca 	bhi.w	8000616 <__udivmoddi4+0x2d6>
 8000482:	4602      	mov	r2, r0
 8000484:	1b1b      	subs	r3, r3, r4
 8000486:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800048a:	e7a5      	b.n	80003d8 <__udivmoddi4+0x98>
 800048c:	f1c1 0620 	rsb	r6, r1, #32
 8000490:	408b      	lsls	r3, r1
 8000492:	fa22 f706 	lsr.w	r7, r2, r6
 8000496:	431f      	orrs	r7, r3
 8000498:	fa0e f401 	lsl.w	r4, lr, r1
 800049c:	fa20 f306 	lsr.w	r3, r0, r6
 80004a0:	fa2e fe06 	lsr.w	lr, lr, r6
 80004a4:	ea4f 4917 	mov.w	r9, r7, lsr #16
 80004a8:	4323      	orrs	r3, r4
 80004aa:	fa00 f801 	lsl.w	r8, r0, r1
 80004ae:	fa1f fc87 	uxth.w	ip, r7
 80004b2:	fbbe f0f9 	udiv	r0, lr, r9
 80004b6:	0c1c      	lsrs	r4, r3, #16
 80004b8:	fb09 ee10 	mls	lr, r9, r0, lr
 80004bc:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 80004c0:	fb00 fe0c 	mul.w	lr, r0, ip
 80004c4:	45a6      	cmp	lr, r4
 80004c6:	fa02 f201 	lsl.w	r2, r2, r1
 80004ca:	d909      	bls.n	80004e0 <__udivmoddi4+0x1a0>
 80004cc:	193c      	adds	r4, r7, r4
 80004ce:	f100 3aff 	add.w	sl, r0, #4294967295
 80004d2:	f080 809c 	bcs.w	800060e <__udivmoddi4+0x2ce>
 80004d6:	45a6      	cmp	lr, r4
 80004d8:	f240 8099 	bls.w	800060e <__udivmoddi4+0x2ce>
 80004dc:	3802      	subs	r0, #2
 80004de:	443c      	add	r4, r7
 80004e0:	eba4 040e 	sub.w	r4, r4, lr
 80004e4:	fa1f fe83 	uxth.w	lr, r3
 80004e8:	fbb4 f3f9 	udiv	r3, r4, r9
 80004ec:	fb09 4413 	mls	r4, r9, r3, r4
 80004f0:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80004f4:	fb03 fc0c 	mul.w	ip, r3, ip
 80004f8:	45a4      	cmp	ip, r4
 80004fa:	d908      	bls.n	800050e <__udivmoddi4+0x1ce>
 80004fc:	193c      	adds	r4, r7, r4
 80004fe:	f103 3eff 	add.w	lr, r3, #4294967295
 8000502:	f080 8082 	bcs.w	800060a <__udivmoddi4+0x2ca>
 8000506:	45a4      	cmp	ip, r4
 8000508:	d97f      	bls.n	800060a <__udivmoddi4+0x2ca>
 800050a:	3b02      	subs	r3, #2
 800050c:	443c      	add	r4, r7
 800050e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000512:	eba4 040c 	sub.w	r4, r4, ip
 8000516:	fba0 ec02 	umull	lr, ip, r0, r2
 800051a:	4564      	cmp	r4, ip
 800051c:	4673      	mov	r3, lr
 800051e:	46e1      	mov	r9, ip
 8000520:	d362      	bcc.n	80005e8 <__udivmoddi4+0x2a8>
 8000522:	d05f      	beq.n	80005e4 <__udivmoddi4+0x2a4>
 8000524:	b15d      	cbz	r5, 800053e <__udivmoddi4+0x1fe>
 8000526:	ebb8 0203 	subs.w	r2, r8, r3
 800052a:	eb64 0409 	sbc.w	r4, r4, r9
 800052e:	fa04 f606 	lsl.w	r6, r4, r6
 8000532:	fa22 f301 	lsr.w	r3, r2, r1
 8000536:	431e      	orrs	r6, r3
 8000538:	40cc      	lsrs	r4, r1
 800053a:	e9c5 6400 	strd	r6, r4, [r5]
 800053e:	2100      	movs	r1, #0
 8000540:	e74f      	b.n	80003e2 <__udivmoddi4+0xa2>
 8000542:	fbb1 fcf2 	udiv	ip, r1, r2
 8000546:	0c01      	lsrs	r1, r0, #16
 8000548:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 800054c:	b280      	uxth	r0, r0
 800054e:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000552:	463b      	mov	r3, r7
 8000554:	4638      	mov	r0, r7
 8000556:	463c      	mov	r4, r7
 8000558:	46b8      	mov	r8, r7
 800055a:	46be      	mov	lr, r7
 800055c:	2620      	movs	r6, #32
 800055e:	fbb1 f1f7 	udiv	r1, r1, r7
 8000562:	eba2 0208 	sub.w	r2, r2, r8
 8000566:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800056a:	e766      	b.n	800043a <__udivmoddi4+0xfa>
 800056c:	4601      	mov	r1, r0
 800056e:	e718      	b.n	80003a2 <__udivmoddi4+0x62>
 8000570:	4610      	mov	r0, r2
 8000572:	e72c      	b.n	80003ce <__udivmoddi4+0x8e>
 8000574:	f1c6 0220 	rsb	r2, r6, #32
 8000578:	fa2e f302 	lsr.w	r3, lr, r2
 800057c:	40b7      	lsls	r7, r6
 800057e:	40b1      	lsls	r1, r6
 8000580:	fa20 f202 	lsr.w	r2, r0, r2
 8000584:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000588:	430a      	orrs	r2, r1
 800058a:	fbb3 f8fe 	udiv	r8, r3, lr
 800058e:	b2bc      	uxth	r4, r7
 8000590:	fb0e 3318 	mls	r3, lr, r8, r3
 8000594:	0c11      	lsrs	r1, r2, #16
 8000596:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800059a:	fb08 f904 	mul.w	r9, r8, r4
 800059e:	40b0      	lsls	r0, r6
 80005a0:	4589      	cmp	r9, r1
 80005a2:	ea4f 4310 	mov.w	r3, r0, lsr #16
 80005a6:	b280      	uxth	r0, r0
 80005a8:	d93e      	bls.n	8000628 <__udivmoddi4+0x2e8>
 80005aa:	1879      	adds	r1, r7, r1
 80005ac:	f108 3cff 	add.w	ip, r8, #4294967295
 80005b0:	d201      	bcs.n	80005b6 <__udivmoddi4+0x276>
 80005b2:	4589      	cmp	r9, r1
 80005b4:	d81f      	bhi.n	80005f6 <__udivmoddi4+0x2b6>
 80005b6:	eba1 0109 	sub.w	r1, r1, r9
 80005ba:	fbb1 f9fe 	udiv	r9, r1, lr
 80005be:	fb09 f804 	mul.w	r8, r9, r4
 80005c2:	fb0e 1119 	mls	r1, lr, r9, r1
 80005c6:	b292      	uxth	r2, r2
 80005c8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80005cc:	4542      	cmp	r2, r8
 80005ce:	d229      	bcs.n	8000624 <__udivmoddi4+0x2e4>
 80005d0:	18ba      	adds	r2, r7, r2
 80005d2:	f109 31ff 	add.w	r1, r9, #4294967295
 80005d6:	d2c4      	bcs.n	8000562 <__udivmoddi4+0x222>
 80005d8:	4542      	cmp	r2, r8
 80005da:	d2c2      	bcs.n	8000562 <__udivmoddi4+0x222>
 80005dc:	f1a9 0102 	sub.w	r1, r9, #2
 80005e0:	443a      	add	r2, r7
 80005e2:	e7be      	b.n	8000562 <__udivmoddi4+0x222>
 80005e4:	45f0      	cmp	r8, lr
 80005e6:	d29d      	bcs.n	8000524 <__udivmoddi4+0x1e4>
 80005e8:	ebbe 0302 	subs.w	r3, lr, r2
 80005ec:	eb6c 0c07 	sbc.w	ip, ip, r7
 80005f0:	3801      	subs	r0, #1
 80005f2:	46e1      	mov	r9, ip
 80005f4:	e796      	b.n	8000524 <__udivmoddi4+0x1e4>
 80005f6:	eba7 0909 	sub.w	r9, r7, r9
 80005fa:	4449      	add	r1, r9
 80005fc:	f1a8 0c02 	sub.w	ip, r8, #2
 8000600:	fbb1 f9fe 	udiv	r9, r1, lr
 8000604:	fb09 f804 	mul.w	r8, r9, r4
 8000608:	e7db      	b.n	80005c2 <__udivmoddi4+0x282>
 800060a:	4673      	mov	r3, lr
 800060c:	e77f      	b.n	800050e <__udivmoddi4+0x1ce>
 800060e:	4650      	mov	r0, sl
 8000610:	e766      	b.n	80004e0 <__udivmoddi4+0x1a0>
 8000612:	4608      	mov	r0, r1
 8000614:	e6fd      	b.n	8000412 <__udivmoddi4+0xd2>
 8000616:	443b      	add	r3, r7
 8000618:	3a02      	subs	r2, #2
 800061a:	e733      	b.n	8000484 <__udivmoddi4+0x144>
 800061c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000620:	443b      	add	r3, r7
 8000622:	e71c      	b.n	800045e <__udivmoddi4+0x11e>
 8000624:	4649      	mov	r1, r9
 8000626:	e79c      	b.n	8000562 <__udivmoddi4+0x222>
 8000628:	eba1 0109 	sub.w	r1, r1, r9
 800062c:	46c4      	mov	ip, r8
 800062e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000632:	fb09 f804 	mul.w	r8, r9, r4
 8000636:	e7c4      	b.n	80005c2 <__udivmoddi4+0x282>

08000638 <__aeabi_idiv0>:
 8000638:	4770      	bx	lr
 800063a:	bf00      	nop

0800063c <my_get_leds>:

/* USER CODE BEGIN PFP */


// static struct leds s_leds = {false};
void my_get_leds(struct leds *data) {
 800063c:	b580      	push	{r7, lr}
 800063e:	b084      	sub	sp, #16
 8000640:	af00      	add	r7, sp, #0
 8000642:	6078      	str	r0, [r7, #4]
  data->ld1 = HAL_GPIO_ReadPin(LD1_GPIO_Port, LD1_Pin);
 8000644:	2101      	movs	r1, #1
 8000646:	481b      	ldr	r0, [pc, #108]	@ (80006b4 <my_get_leds+0x78>)
 8000648:	f001 fb92 	bl	8001d70 <HAL_GPIO_ReadPin>
 800064c:	4603      	mov	r3, r0
 800064e:	2b00      	cmp	r3, #0
 8000650:	bf14      	ite	ne
 8000652:	2301      	movne	r3, #1
 8000654:	2300      	moveq	r3, #0
 8000656:	b2da      	uxtb	r2, r3
 8000658:	687b      	ldr	r3, [r7, #4]
 800065a:	73da      	strb	r2, [r3, #15]
  GPIO_PinState btn_state = HAL_GPIO_ReadPin(USER_BTN_GPIO_Port, USER_BTN_Pin);
 800065c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000660:	4815      	ldr	r0, [pc, #84]	@ (80006b8 <my_get_leds+0x7c>)
 8000662:	f001 fb85 	bl	8001d70 <HAL_GPIO_ReadPin>
 8000666:	4603      	mov	r3, r0
 8000668:	73fb      	strb	r3, [r7, #15]

  // Use the raw state value for a clearer debug message:
  printf("RAW BUTTON STATE: %d\n", btn_state); // GPIO_PIN_RESET is 0, GPIO_PIN_SET is 1
 800066a:	7bfb      	ldrb	r3, [r7, #15]
 800066c:	4619      	mov	r1, r3
 800066e:	4813      	ldr	r0, [pc, #76]	@ (80006bc <my_get_leds+0x80>)
 8000670:	f023 fd92 	bl	8024198 <iprintf>

  // Keep the current logic that should work with GPIO_PULLUP and standard wiring:
  if (btn_state == GPIO_PIN_RESET){
 8000674:	7bfb      	ldrb	r3, [r7, #15]
 8000676:	2b00      	cmp	r3, #0
 8000678:	d107      	bne.n	800068a <my_get_leds+0x4e>
      strcpy(data->user_btn, "PRESSED");
 800067a:	687b      	ldr	r3, [r7, #4]
 800067c:	4910      	ldr	r1, [pc, #64]	@ (80006c0 <my_get_leds+0x84>)
 800067e:	461a      	mov	r2, r3
 8000680:	460b      	mov	r3, r1
 8000682:	cb03      	ldmia	r3!, {r0, r1}
 8000684:	6010      	str	r0, [r2, #0]
 8000686:	6051      	str	r1, [r2, #4]
 8000688:	e008      	b.n	800069c <my_get_leds+0x60>
  } else {
      strcpy(data->user_btn, "RELEASED");
 800068a:	687b      	ldr	r3, [r7, #4]
 800068c:	490d      	ldr	r1, [pc, #52]	@ (80006c4 <my_get_leds+0x88>)
 800068e:	461a      	mov	r2, r3
 8000690:	460b      	mov	r3, r1
 8000692:	cb03      	ldmia	r3!, {r0, r1}
 8000694:	6010      	str	r0, [r2, #0]
 8000696:	6051      	str	r1, [r2, #4]
 8000698:	781b      	ldrb	r3, [r3, #0]
 800069a:	7213      	strb	r3, [r2, #8]
  }

  printf("GET called. LED: %d, Button: %s\n", data->ld1, data->user_btn);
 800069c:	687b      	ldr	r3, [r7, #4]
 800069e:	7bdb      	ldrb	r3, [r3, #15]
 80006a0:	4619      	mov	r1, r3
 80006a2:	687b      	ldr	r3, [r7, #4]
 80006a4:	461a      	mov	r2, r3
 80006a6:	4808      	ldr	r0, [pc, #32]	@ (80006c8 <my_get_leds+0x8c>)
 80006a8:	f023 fd76 	bl	8024198 <iprintf>
}
 80006ac:	bf00      	nop
 80006ae:	3710      	adds	r7, #16
 80006b0:	46bd      	mov	sp, r7
 80006b2:	bd80      	pop	{r7, pc}
 80006b4:	40020400 	.word	0x40020400
 80006b8:	40020800 	.word	0x40020800
 80006bc:	080250c4 	.word	0x080250c4
 80006c0:	080250dc 	.word	0x080250dc
 80006c4:	080250e4 	.word	0x080250e4
 80006c8:	080250f0 	.word	0x080250f0

080006cc <my_set_leds>:
void my_set_leds(struct leds *data) {
 80006cc:	b580      	push	{r7, lr}
 80006ce:	b082      	sub	sp, #8
 80006d0:	af00      	add	r7, sp, #0
 80006d2:	6078      	str	r0, [r7, #4]
  HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, data->ld1);
 80006d4:	687b      	ldr	r3, [r7, #4]
 80006d6:	7bdb      	ldrb	r3, [r3, #15]
 80006d8:	461a      	mov	r2, r3
 80006da:	2101      	movs	r1, #1
 80006dc:	4804      	ldr	r0, [pc, #16]	@ (80006f0 <my_set_leds+0x24>)
 80006de:	f001 fb5f 	bl	8001da0 <HAL_GPIO_WritePin>
  printf("SET called\n");
 80006e2:	4804      	ldr	r0, [pc, #16]	@ (80006f4 <my_set_leds+0x28>)
 80006e4:	f023 fdc8 	bl	8024278 <puts>
}
 80006e8:	bf00      	nop
 80006ea:	3708      	adds	r7, #8
 80006ec:	46bd      	mov	sp, r7
 80006ee:	bd80      	pop	{r7, pc}
 80006f0:	40020400 	.word	0x40020400
 80006f4:	08025114 	.word	0x08025114

080006f8 <mg_random>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
bool mg_random(void *buf, size_t len) {  // Use on-board RNG
 80006f8:	b580      	push	{r7, lr}
 80006fa:	b084      	sub	sp, #16
 80006fc:	af00      	add	r7, sp, #0
 80006fe:	6078      	str	r0, [r7, #4]
 8000700:	6039      	str	r1, [r7, #0]
  for (size_t n = 0; n < len; n += sizeof(uint32_t)) {
 8000702:	2300      	movs	r3, #0
 8000704:	60fb      	str	r3, [r7, #12]
 8000706:	e01a      	b.n	800073e <mg_random+0x46>
    uint32_t r;
    HAL_RNG_GenerateRandomNumber(&hrng, &r);
 8000708:	f107 0308 	add.w	r3, r7, #8
 800070c:	4619      	mov	r1, r3
 800070e:	4810      	ldr	r0, [pc, #64]	@ (8000750 <mg_random+0x58>)
 8000710:	f002 fcc8 	bl	80030a4 <HAL_RNG_GenerateRandomNumber>
    memcpy((char *) buf + n, &r, n + sizeof(r) > len ? len - n : sizeof(r));
 8000714:	687a      	ldr	r2, [r7, #4]
 8000716:	68fb      	ldr	r3, [r7, #12]
 8000718:	18d0      	adds	r0, r2, r3
 800071a:	68fb      	ldr	r3, [r7, #12]
 800071c:	3304      	adds	r3, #4
 800071e:	683a      	ldr	r2, [r7, #0]
 8000720:	429a      	cmp	r2, r3
 8000722:	d203      	bcs.n	800072c <mg_random+0x34>
 8000724:	683a      	ldr	r2, [r7, #0]
 8000726:	68fb      	ldr	r3, [r7, #12]
 8000728:	1ad3      	subs	r3, r2, r3
 800072a:	e000      	b.n	800072e <mg_random+0x36>
 800072c:	2304      	movs	r3, #4
 800072e:	f107 0108 	add.w	r1, r7, #8
 8000732:	461a      	mov	r2, r3
 8000734:	f024 f827 	bl	8024786 <memcpy>
  for (size_t n = 0; n < len; n += sizeof(uint32_t)) {
 8000738:	68fb      	ldr	r3, [r7, #12]
 800073a:	3304      	adds	r3, #4
 800073c:	60fb      	str	r3, [r7, #12]
 800073e:	68fa      	ldr	r2, [r7, #12]
 8000740:	683b      	ldr	r3, [r7, #0]
 8000742:	429a      	cmp	r2, r3
 8000744:	d3e0      	bcc.n	8000708 <mg_random+0x10>
  }
  return true; // TODO(): ensure successful RNG init, then return on false above
 8000746:	2301      	movs	r3, #1
}
 8000748:	4618      	mov	r0, r3
 800074a:	3710      	adds	r7, #16
 800074c:	46bd      	mov	sp, r7
 800074e:	bd80      	pop	{r7, pc}
 8000750:	200005bc 	.word	0x200005bc

08000754 <_write>:

int _write(int fd, unsigned char *buf, int len) {
 8000754:	b580      	push	{r7, lr}
 8000756:	b084      	sub	sp, #16
 8000758:	af00      	add	r7, sp, #0
 800075a:	60f8      	str	r0, [r7, #12]
 800075c:	60b9      	str	r1, [r7, #8]
 800075e:	607a      	str	r2, [r7, #4]
  if (fd == 1 || fd == 2) {                     // stdout or stderr ?
 8000760:	68fb      	ldr	r3, [r7, #12]
 8000762:	2b01      	cmp	r3, #1
 8000764:	d002      	beq.n	800076c <_write+0x18>
 8000766:	68fb      	ldr	r3, [r7, #12]
 8000768:	2b02      	cmp	r3, #2
 800076a:	d107      	bne.n	800077c <_write+0x28>
    HAL_UART_Transmit(&huart3, buf, len, 999);  // Print to the UART
 800076c:	687b      	ldr	r3, [r7, #4]
 800076e:	b29a      	uxth	r2, r3
 8000770:	f240 33e7 	movw	r3, #999	@ 0x3e7
 8000774:	68b9      	ldr	r1, [r7, #8]
 8000776:	4804      	ldr	r0, [pc, #16]	@ (8000788 <_write+0x34>)
 8000778:	f003 f806 	bl	8003788 <HAL_UART_Transmit>
  }
  return len;
 800077c:	687b      	ldr	r3, [r7, #4]
}
 800077e:	4618      	mov	r0, r3
 8000780:	3710      	adds	r7, #16
 8000782:	46bd      	mov	sp, r7
 8000784:	bd80      	pop	{r7, pc}
 8000786:	bf00      	nop
 8000788:	200005cc 	.word	0x200005cc

0800078c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800078c:	b580      	push	{r7, lr}
 800078e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000790:	f000 fcc1 	bl	8001116 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000794:	f000 f81c 	bl	80007d0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000798:	f000 f91a 	bl	80009d0 <MX_GPIO_Init>
  MX_ETH_Init();
 800079c:	f000 f886 	bl	80008ac <MX_ETH_Init>
  MX_RNG_Init();
 80007a0:	f000 f8d2 	bl	8000948 <MX_RNG_Init>
  MX_USART3_UART_Init();
 80007a4:	f000 f8e4 	bl	8000970 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80007a8:	f003 fcfe 	bl	80041a8 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80007ac:	4a05      	ldr	r2, [pc, #20]	@ (80007c4 <main+0x38>)
 80007ae:	2100      	movs	r1, #0
 80007b0:	4805      	ldr	r0, [pc, #20]	@ (80007c8 <main+0x3c>)
 80007b2:	f003 fd63 	bl	800427c <osThreadNew>
 80007b6:	4603      	mov	r3, r0
 80007b8:	4a04      	ldr	r2, [pc, #16]	@ (80007cc <main+0x40>)
 80007ba:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80007bc:	f003 fd28 	bl	8004210 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80007c0:	bf00      	nop
 80007c2:	e7fd      	b.n	80007c0 <main+0x34>
 80007c4:	08028310 	.word	0x08028310
 80007c8:	08000ab5 	.word	0x08000ab5
 80007cc:	20000654 	.word	0x20000654

080007d0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	b094      	sub	sp, #80	@ 0x50
 80007d4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007d6:	f107 031c 	add.w	r3, r7, #28
 80007da:	2234      	movs	r2, #52	@ 0x34
 80007dc:	2100      	movs	r1, #0
 80007de:	4618      	mov	r0, r3
 80007e0:	f023 fe54 	bl	802448c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007e4:	f107 0308 	add.w	r3, r7, #8
 80007e8:	2200      	movs	r2, #0
 80007ea:	601a      	str	r2, [r3, #0]
 80007ec:	605a      	str	r2, [r3, #4]
 80007ee:	609a      	str	r2, [r3, #8]
 80007f0:	60da      	str	r2, [r3, #12]
 80007f2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80007f4:	4b2b      	ldr	r3, [pc, #172]	@ (80008a4 <SystemClock_Config+0xd4>)
 80007f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007f8:	4a2a      	ldr	r2, [pc, #168]	@ (80008a4 <SystemClock_Config+0xd4>)
 80007fa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80007fe:	6413      	str	r3, [r2, #64]	@ 0x40
 8000800:	4b28      	ldr	r3, [pc, #160]	@ (80008a4 <SystemClock_Config+0xd4>)
 8000802:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000804:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000808:	607b      	str	r3, [r7, #4]
 800080a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800080c:	4b26      	ldr	r3, [pc, #152]	@ (80008a8 <SystemClock_Config+0xd8>)
 800080e:	681b      	ldr	r3, [r3, #0]
 8000810:	4a25      	ldr	r2, [pc, #148]	@ (80008a8 <SystemClock_Config+0xd8>)
 8000812:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000816:	6013      	str	r3, [r2, #0]
 8000818:	4b23      	ldr	r3, [pc, #140]	@ (80008a8 <SystemClock_Config+0xd8>)
 800081a:	681b      	ldr	r3, [r3, #0]
 800081c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000820:	603b      	str	r3, [r7, #0]
 8000822:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000824:	2302      	movs	r3, #2
 8000826:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000828:	2301      	movs	r3, #1
 800082a:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800082c:	2310      	movs	r3, #16
 800082e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000830:	2302      	movs	r3, #2
 8000832:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000834:	2300      	movs	r3, #0
 8000836:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000838:	2308      	movs	r3, #8
 800083a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 216;
 800083c:	23d8      	movs	r3, #216	@ 0xd8
 800083e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000840:	2302      	movs	r3, #2
 8000842:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 9;
 8000844:	2309      	movs	r3, #9
 8000846:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000848:	2302      	movs	r3, #2
 800084a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800084c:	f107 031c 	add.w	r3, r7, #28
 8000850:	4618      	mov	r0, r3
 8000852:	f001 fb0f 	bl	8001e74 <HAL_RCC_OscConfig>
 8000856:	4603      	mov	r3, r0
 8000858:	2b00      	cmp	r3, #0
 800085a:	d001      	beq.n	8000860 <SystemClock_Config+0x90>
  {
    Error_Handler();
 800085c:	f000 f954 	bl	8000b08 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000860:	f001 fab8 	bl	8001dd4 <HAL_PWREx_EnableOverDrive>
 8000864:	4603      	mov	r3, r0
 8000866:	2b00      	cmp	r3, #0
 8000868:	d001      	beq.n	800086e <SystemClock_Config+0x9e>
  {
    Error_Handler();
 800086a:	f000 f94d 	bl	8000b08 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800086e:	230f      	movs	r3, #15
 8000870:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000872:	2302      	movs	r3, #2
 8000874:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000876:	2300      	movs	r3, #0
 8000878:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800087a:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800087e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000880:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000884:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8000886:	f107 0308 	add.w	r3, r7, #8
 800088a:	2107      	movs	r1, #7
 800088c:	4618      	mov	r0, r3
 800088e:	f001 fd9f 	bl	80023d0 <HAL_RCC_ClockConfig>
 8000892:	4603      	mov	r3, r0
 8000894:	2b00      	cmp	r3, #0
 8000896:	d001      	beq.n	800089c <SystemClock_Config+0xcc>
  {
    Error_Handler();
 8000898:	f000 f936 	bl	8000b08 <Error_Handler>
  }
}
 800089c:	bf00      	nop
 800089e:	3750      	adds	r7, #80	@ 0x50
 80008a0:	46bd      	mov	sp, r7
 80008a2:	bd80      	pop	{r7, pc}
 80008a4:	40023800 	.word	0x40023800
 80008a8:	40007000 	.word	0x40007000

080008ac <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 80008ac:	b580      	push	{r7, lr}
 80008ae:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 80008b0:	4b1f      	ldr	r3, [pc, #124]	@ (8000930 <MX_ETH_Init+0x84>)
 80008b2:	4a20      	ldr	r2, [pc, #128]	@ (8000934 <MX_ETH_Init+0x88>)
 80008b4:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 80008b6:	4b20      	ldr	r3, [pc, #128]	@ (8000938 <MX_ETH_Init+0x8c>)
 80008b8:	2200      	movs	r2, #0
 80008ba:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 80008bc:	4b1e      	ldr	r3, [pc, #120]	@ (8000938 <MX_ETH_Init+0x8c>)
 80008be:	2280      	movs	r2, #128	@ 0x80
 80008c0:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 80008c2:	4b1d      	ldr	r3, [pc, #116]	@ (8000938 <MX_ETH_Init+0x8c>)
 80008c4:	22e1      	movs	r2, #225	@ 0xe1
 80008c6:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 80008c8:	4b1b      	ldr	r3, [pc, #108]	@ (8000938 <MX_ETH_Init+0x8c>)
 80008ca:	2200      	movs	r2, #0
 80008cc:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 80008ce:	4b1a      	ldr	r3, [pc, #104]	@ (8000938 <MX_ETH_Init+0x8c>)
 80008d0:	2200      	movs	r2, #0
 80008d2:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 80008d4:	4b18      	ldr	r3, [pc, #96]	@ (8000938 <MX_ETH_Init+0x8c>)
 80008d6:	2200      	movs	r2, #0
 80008d8:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 80008da:	4b15      	ldr	r3, [pc, #84]	@ (8000930 <MX_ETH_Init+0x84>)
 80008dc:	4a16      	ldr	r2, [pc, #88]	@ (8000938 <MX_ETH_Init+0x8c>)
 80008de:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 80008e0:	4b13      	ldr	r3, [pc, #76]	@ (8000930 <MX_ETH_Init+0x84>)
 80008e2:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80008e6:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 80008e8:	4b11      	ldr	r3, [pc, #68]	@ (8000930 <MX_ETH_Init+0x84>)
 80008ea:	4a14      	ldr	r2, [pc, #80]	@ (800093c <MX_ETH_Init+0x90>)
 80008ec:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 80008ee:	4b10      	ldr	r3, [pc, #64]	@ (8000930 <MX_ETH_Init+0x84>)
 80008f0:	4a13      	ldr	r2, [pc, #76]	@ (8000940 <MX_ETH_Init+0x94>)
 80008f2:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 80008f4:	4b0e      	ldr	r3, [pc, #56]	@ (8000930 <MX_ETH_Init+0x84>)
 80008f6:	f240 52f4 	movw	r2, #1524	@ 0x5f4
 80008fa:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 80008fc:	480c      	ldr	r0, [pc, #48]	@ (8000930 <MX_ETH_Init+0x84>)
 80008fe:	f000 fd3d 	bl	800137c <HAL_ETH_Init>
 8000902:	4603      	mov	r3, r0
 8000904:	2b00      	cmp	r3, #0
 8000906:	d001      	beq.n	800090c <MX_ETH_Init+0x60>
  {
    Error_Handler();
 8000908:	f000 f8fe 	bl	8000b08 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 800090c:	2238      	movs	r2, #56	@ 0x38
 800090e:	2100      	movs	r1, #0
 8000910:	480c      	ldr	r0, [pc, #48]	@ (8000944 <MX_ETH_Init+0x98>)
 8000912:	f023 fdbb 	bl	802448c <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8000916:	4b0b      	ldr	r3, [pc, #44]	@ (8000944 <MX_ETH_Init+0x98>)
 8000918:	2221      	movs	r2, #33	@ 0x21
 800091a:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 800091c:	4b09      	ldr	r3, [pc, #36]	@ (8000944 <MX_ETH_Init+0x98>)
 800091e:	f44f 0240 	mov.w	r2, #12582912	@ 0xc00000
 8000922:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8000924:	4b07      	ldr	r3, [pc, #28]	@ (8000944 <MX_ETH_Init+0x98>)
 8000926:	2200      	movs	r2, #0
 8000928:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 800092a:	bf00      	nop
 800092c:	bd80      	pop	{r7, pc}
 800092e:	bf00      	nop
 8000930:	2000050c 	.word	0x2000050c
 8000934:	40028000 	.word	0x40028000
 8000938:	20000658 	.word	0x20000658
 800093c:	20000418 	.word	0x20000418
 8000940:	20000378 	.word	0x20000378
 8000944:	200004d4 	.word	0x200004d4

08000948 <MX_RNG_Init>:
  * @brief RNG Initialization Function
  * @param None
  * @retval None
  */
static void MX_RNG_Init(void)
{
 8000948:	b580      	push	{r7, lr}
 800094a:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 800094c:	4b06      	ldr	r3, [pc, #24]	@ (8000968 <MX_RNG_Init+0x20>)
 800094e:	4a07      	ldr	r2, [pc, #28]	@ (800096c <MX_RNG_Init+0x24>)
 8000950:	601a      	str	r2, [r3, #0]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 8000952:	4805      	ldr	r0, [pc, #20]	@ (8000968 <MX_RNG_Init+0x20>)
 8000954:	f002 fb7c 	bl	8003050 <HAL_RNG_Init>
 8000958:	4603      	mov	r3, r0
 800095a:	2b00      	cmp	r3, #0
 800095c:	d001      	beq.n	8000962 <MX_RNG_Init+0x1a>
  {
    Error_Handler();
 800095e:	f000 f8d3 	bl	8000b08 <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 8000962:	bf00      	nop
 8000964:	bd80      	pop	{r7, pc}
 8000966:	bf00      	nop
 8000968:	200005bc 	.word	0x200005bc
 800096c:	50060800 	.word	0x50060800

08000970 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000974:	4b14      	ldr	r3, [pc, #80]	@ (80009c8 <MX_USART3_UART_Init+0x58>)
 8000976:	4a15      	ldr	r2, [pc, #84]	@ (80009cc <MX_USART3_UART_Init+0x5c>)
 8000978:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800097a:	4b13      	ldr	r3, [pc, #76]	@ (80009c8 <MX_USART3_UART_Init+0x58>)
 800097c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000980:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000982:	4b11      	ldr	r3, [pc, #68]	@ (80009c8 <MX_USART3_UART_Init+0x58>)
 8000984:	2200      	movs	r2, #0
 8000986:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000988:	4b0f      	ldr	r3, [pc, #60]	@ (80009c8 <MX_USART3_UART_Init+0x58>)
 800098a:	2200      	movs	r2, #0
 800098c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800098e:	4b0e      	ldr	r3, [pc, #56]	@ (80009c8 <MX_USART3_UART_Init+0x58>)
 8000990:	2200      	movs	r2, #0
 8000992:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000994:	4b0c      	ldr	r3, [pc, #48]	@ (80009c8 <MX_USART3_UART_Init+0x58>)
 8000996:	220c      	movs	r2, #12
 8000998:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800099a:	4b0b      	ldr	r3, [pc, #44]	@ (80009c8 <MX_USART3_UART_Init+0x58>)
 800099c:	2200      	movs	r2, #0
 800099e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80009a0:	4b09      	ldr	r3, [pc, #36]	@ (80009c8 <MX_USART3_UART_Init+0x58>)
 80009a2:	2200      	movs	r2, #0
 80009a4:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80009a6:	4b08      	ldr	r3, [pc, #32]	@ (80009c8 <MX_USART3_UART_Init+0x58>)
 80009a8:	2200      	movs	r2, #0
 80009aa:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80009ac:	4b06      	ldr	r3, [pc, #24]	@ (80009c8 <MX_USART3_UART_Init+0x58>)
 80009ae:	2200      	movs	r2, #0
 80009b0:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80009b2:	4805      	ldr	r0, [pc, #20]	@ (80009c8 <MX_USART3_UART_Init+0x58>)
 80009b4:	f002 fe9a 	bl	80036ec <HAL_UART_Init>
 80009b8:	4603      	mov	r3, r0
 80009ba:	2b00      	cmp	r3, #0
 80009bc:	d001      	beq.n	80009c2 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 80009be:	f000 f8a3 	bl	8000b08 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80009c2:	bf00      	nop
 80009c4:	bd80      	pop	{r7, pc}
 80009c6:	bf00      	nop
 80009c8:	200005cc 	.word	0x200005cc
 80009cc:	40004800 	.word	0x40004800

080009d0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009d0:	b580      	push	{r7, lr}
 80009d2:	b08a      	sub	sp, #40	@ 0x28
 80009d4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009d6:	f107 0314 	add.w	r3, r7, #20
 80009da:	2200      	movs	r2, #0
 80009dc:	601a      	str	r2, [r3, #0]
 80009de:	605a      	str	r2, [r3, #4]
 80009e0:	609a      	str	r2, [r3, #8]
 80009e2:	60da      	str	r2, [r3, #12]
 80009e4:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */
  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009e6:	4b30      	ldr	r3, [pc, #192]	@ (8000aa8 <MX_GPIO_Init+0xd8>)
 80009e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009ea:	4a2f      	ldr	r2, [pc, #188]	@ (8000aa8 <MX_GPIO_Init+0xd8>)
 80009ec:	f043 0304 	orr.w	r3, r3, #4
 80009f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80009f2:	4b2d      	ldr	r3, [pc, #180]	@ (8000aa8 <MX_GPIO_Init+0xd8>)
 80009f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009f6:	f003 0304 	and.w	r3, r3, #4
 80009fa:	613b      	str	r3, [r7, #16]
 80009fc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009fe:	4b2a      	ldr	r3, [pc, #168]	@ (8000aa8 <MX_GPIO_Init+0xd8>)
 8000a00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a02:	4a29      	ldr	r2, [pc, #164]	@ (8000aa8 <MX_GPIO_Init+0xd8>)
 8000a04:	f043 0301 	orr.w	r3, r3, #1
 8000a08:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a0a:	4b27      	ldr	r3, [pc, #156]	@ (8000aa8 <MX_GPIO_Init+0xd8>)
 8000a0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a0e:	f003 0301 	and.w	r3, r3, #1
 8000a12:	60fb      	str	r3, [r7, #12]
 8000a14:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a16:	4b24      	ldr	r3, [pc, #144]	@ (8000aa8 <MX_GPIO_Init+0xd8>)
 8000a18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a1a:	4a23      	ldr	r2, [pc, #140]	@ (8000aa8 <MX_GPIO_Init+0xd8>)
 8000a1c:	f043 0302 	orr.w	r3, r3, #2
 8000a20:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a22:	4b21      	ldr	r3, [pc, #132]	@ (8000aa8 <MX_GPIO_Init+0xd8>)
 8000a24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a26:	f003 0302 	and.w	r3, r3, #2
 8000a2a:	60bb      	str	r3, [r7, #8]
 8000a2c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a2e:	4b1e      	ldr	r3, [pc, #120]	@ (8000aa8 <MX_GPIO_Init+0xd8>)
 8000a30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a32:	4a1d      	ldr	r2, [pc, #116]	@ (8000aa8 <MX_GPIO_Init+0xd8>)
 8000a34:	f043 0308 	orr.w	r3, r3, #8
 8000a38:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a3a:	4b1b      	ldr	r3, [pc, #108]	@ (8000aa8 <MX_GPIO_Init+0xd8>)
 8000a3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a3e:	f003 0308 	and.w	r3, r3, #8
 8000a42:	607b      	str	r3, [r7, #4]
 8000a44:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000a46:	4b18      	ldr	r3, [pc, #96]	@ (8000aa8 <MX_GPIO_Init+0xd8>)
 8000a48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a4a:	4a17      	ldr	r2, [pc, #92]	@ (8000aa8 <MX_GPIO_Init+0xd8>)
 8000a4c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000a50:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a52:	4b15      	ldr	r3, [pc, #84]	@ (8000aa8 <MX_GPIO_Init+0xd8>)
 8000a54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a56:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000a5a:	603b      	str	r3, [r7, #0]
 8000a5c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|GPIO_PIN_7, GPIO_PIN_RESET);
 8000a5e:	2200      	movs	r2, #0
 8000a60:	2181      	movs	r1, #129	@ 0x81
 8000a62:	4812      	ldr	r0, [pc, #72]	@ (8000aac <MX_GPIO_Init+0xdc>)
 8000a64:	f001 f99c 	bl	8001da0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_BTN_Pin */
  GPIO_InitStruct.Pin = USER_BTN_Pin;
 8000a68:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000a6c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a6e:	2300      	movs	r3, #0
 8000a70:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a72:	2300      	movs	r3, #0
 8000a74:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(USER_BTN_GPIO_Port, &GPIO_InitStruct);
 8000a76:	f107 0314 	add.w	r3, r7, #20
 8000a7a:	4619      	mov	r1, r3
 8000a7c:	480c      	ldr	r0, [pc, #48]	@ (8000ab0 <MX_GPIO_Init+0xe0>)
 8000a7e:	f000 ffcb 	bl	8001a18 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin PB7 */
  GPIO_InitStruct.Pin = LD1_Pin|GPIO_PIN_7;
 8000a82:	2381      	movs	r3, #129	@ 0x81
 8000a84:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a86:	2301      	movs	r3, #1
 8000a88:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a8e:	2300      	movs	r3, #0
 8000a90:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a92:	f107 0314 	add.w	r3, r7, #20
 8000a96:	4619      	mov	r1, r3
 8000a98:	4804      	ldr	r0, [pc, #16]	@ (8000aac <MX_GPIO_Init+0xdc>)
 8000a9a:	f000 ffbd 	bl	8001a18 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  /* USER CODE END MX_GPIO_Init_2 */
}
 8000a9e:	bf00      	nop
 8000aa0:	3728      	adds	r7, #40	@ 0x28
 8000aa2:	46bd      	mov	sp, r7
 8000aa4:	bd80      	pop	{r7, pc}
 8000aa6:	bf00      	nop
 8000aa8:	40023800 	.word	0x40023800
 8000aac:	40020400 	.word	0x40020400
 8000ab0:	40020800 	.word	0x40020800

08000ab4 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	b082      	sub	sp, #8
 8000ab8:	af00      	add	r7, sp, #0
 8000aba:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	mongoose_init();
 8000abc:	f023 f89c 	bl	8023bf8 <mongoose_init>
	mongoose_set_http_handlers("leds", my_get_leds, my_set_leds);
 8000ac0:	4a05      	ldr	r2, [pc, #20]	@ (8000ad8 <StartDefaultTask+0x24>)
 8000ac2:	4906      	ldr	r1, [pc, #24]	@ (8000adc <StartDefaultTask+0x28>)
 8000ac4:	4806      	ldr	r0, [pc, #24]	@ (8000ae0 <StartDefaultTask+0x2c>)
 8000ac6:	f021 ffc1 	bl	8022a4c <mongoose_set_http_handlers>

	/* Infinite loop */
	for(;;)
	{

		mongoose_poll();
 8000aca:	f023 f8d1 	bl	8023c70 <mongoose_poll>
	    osDelay(1);
 8000ace:	2001      	movs	r0, #1
 8000ad0:	f003 fc7a 	bl	80043c8 <osDelay>
		mongoose_poll();
 8000ad4:	bf00      	nop
 8000ad6:	e7f8      	b.n	8000aca <StartDefaultTask+0x16>
 8000ad8:	080006cd 	.word	0x080006cd
 8000adc:	0800063d 	.word	0x0800063d
 8000ae0:	08025120 	.word	0x08025120

08000ae4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	b082      	sub	sp, #8
 8000ae8:	af00      	add	r7, sp, #0
 8000aea:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6)
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	681b      	ldr	r3, [r3, #0]
 8000af0:	4a04      	ldr	r2, [pc, #16]	@ (8000b04 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000af2:	4293      	cmp	r3, r2
 8000af4:	d101      	bne.n	8000afa <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 8000af6:	f000 fb1b 	bl	8001130 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000afa:	bf00      	nop
 8000afc:	3708      	adds	r7, #8
 8000afe:	46bd      	mov	sp, r7
 8000b00:	bd80      	pop	{r7, pc}
 8000b02:	bf00      	nop
 8000b04:	40001000 	.word	0x40001000

08000b08 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b08:	b480      	push	{r7}
 8000b0a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b0c:	b672      	cpsid	i
}
 8000b0e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b10:	bf00      	nop
 8000b12:	e7fd      	b.n	8000b10 <Error_Handler+0x8>

08000b14 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	b082      	sub	sp, #8
 8000b18:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000b1a:	4b11      	ldr	r3, [pc, #68]	@ (8000b60 <HAL_MspInit+0x4c>)
 8000b1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b1e:	4a10      	ldr	r2, [pc, #64]	@ (8000b60 <HAL_MspInit+0x4c>)
 8000b20:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000b24:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b26:	4b0e      	ldr	r3, [pc, #56]	@ (8000b60 <HAL_MspInit+0x4c>)
 8000b28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b2a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000b2e:	607b      	str	r3, [r7, #4]
 8000b30:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b32:	4b0b      	ldr	r3, [pc, #44]	@ (8000b60 <HAL_MspInit+0x4c>)
 8000b34:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b36:	4a0a      	ldr	r2, [pc, #40]	@ (8000b60 <HAL_MspInit+0x4c>)
 8000b38:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000b3c:	6453      	str	r3, [r2, #68]	@ 0x44
 8000b3e:	4b08      	ldr	r3, [pc, #32]	@ (8000b60 <HAL_MspInit+0x4c>)
 8000b40:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b42:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000b46:	603b      	str	r3, [r7, #0]
 8000b48:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	210f      	movs	r1, #15
 8000b4e:	f06f 0001 	mvn.w	r0, #1
 8000b52:	f000 fbe9 	bl	8001328 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b56:	bf00      	nop
 8000b58:	3708      	adds	r7, #8
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	bd80      	pop	{r7, pc}
 8000b5e:	bf00      	nop
 8000b60:	40023800 	.word	0x40023800

08000b64 <HAL_ETH_MspInit>:
  * This function configures the hardware resources used in this example
  * @param heth: ETH handle pointer
  * @retval None
  */
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	b08e      	sub	sp, #56	@ 0x38
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b6c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b70:	2200      	movs	r2, #0
 8000b72:	601a      	str	r2, [r3, #0]
 8000b74:	605a      	str	r2, [r3, #4]
 8000b76:	609a      	str	r2, [r3, #8]
 8000b78:	60da      	str	r2, [r3, #12]
 8000b7a:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	681b      	ldr	r3, [r3, #0]
 8000b80:	4a52      	ldr	r2, [pc, #328]	@ (8000ccc <HAL_ETH_MspInit+0x168>)
 8000b82:	4293      	cmp	r3, r2
 8000b84:	f040 809e 	bne.w	8000cc4 <HAL_ETH_MspInit+0x160>
  {
    /* USER CODE BEGIN ETH_MspInit 0 */

    /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8000b88:	4b51      	ldr	r3, [pc, #324]	@ (8000cd0 <HAL_ETH_MspInit+0x16c>)
 8000b8a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b8c:	4a50      	ldr	r2, [pc, #320]	@ (8000cd0 <HAL_ETH_MspInit+0x16c>)
 8000b8e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000b92:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b94:	4b4e      	ldr	r3, [pc, #312]	@ (8000cd0 <HAL_ETH_MspInit+0x16c>)
 8000b96:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b98:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000b9c:	623b      	str	r3, [r7, #32]
 8000b9e:	6a3b      	ldr	r3, [r7, #32]
 8000ba0:	4b4b      	ldr	r3, [pc, #300]	@ (8000cd0 <HAL_ETH_MspInit+0x16c>)
 8000ba2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ba4:	4a4a      	ldr	r2, [pc, #296]	@ (8000cd0 <HAL_ETH_MspInit+0x16c>)
 8000ba6:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8000baa:	6313      	str	r3, [r2, #48]	@ 0x30
 8000bac:	4b48      	ldr	r3, [pc, #288]	@ (8000cd0 <HAL_ETH_MspInit+0x16c>)
 8000bae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bb0:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8000bb4:	61fb      	str	r3, [r7, #28]
 8000bb6:	69fb      	ldr	r3, [r7, #28]
 8000bb8:	4b45      	ldr	r3, [pc, #276]	@ (8000cd0 <HAL_ETH_MspInit+0x16c>)
 8000bba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bbc:	4a44      	ldr	r2, [pc, #272]	@ (8000cd0 <HAL_ETH_MspInit+0x16c>)
 8000bbe:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8000bc2:	6313      	str	r3, [r2, #48]	@ 0x30
 8000bc4:	4b42      	ldr	r3, [pc, #264]	@ (8000cd0 <HAL_ETH_MspInit+0x16c>)
 8000bc6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bc8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8000bcc:	61bb      	str	r3, [r7, #24]
 8000bce:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bd0:	4b3f      	ldr	r3, [pc, #252]	@ (8000cd0 <HAL_ETH_MspInit+0x16c>)
 8000bd2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bd4:	4a3e      	ldr	r2, [pc, #248]	@ (8000cd0 <HAL_ETH_MspInit+0x16c>)
 8000bd6:	f043 0304 	orr.w	r3, r3, #4
 8000bda:	6313      	str	r3, [r2, #48]	@ 0x30
 8000bdc:	4b3c      	ldr	r3, [pc, #240]	@ (8000cd0 <HAL_ETH_MspInit+0x16c>)
 8000bde:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000be0:	f003 0304 	and.w	r3, r3, #4
 8000be4:	617b      	str	r3, [r7, #20]
 8000be6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000be8:	4b39      	ldr	r3, [pc, #228]	@ (8000cd0 <HAL_ETH_MspInit+0x16c>)
 8000bea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bec:	4a38      	ldr	r2, [pc, #224]	@ (8000cd0 <HAL_ETH_MspInit+0x16c>)
 8000bee:	f043 0301 	orr.w	r3, r3, #1
 8000bf2:	6313      	str	r3, [r2, #48]	@ 0x30
 8000bf4:	4b36      	ldr	r3, [pc, #216]	@ (8000cd0 <HAL_ETH_MspInit+0x16c>)
 8000bf6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bf8:	f003 0301 	and.w	r3, r3, #1
 8000bfc:	613b      	str	r3, [r7, #16]
 8000bfe:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c00:	4b33      	ldr	r3, [pc, #204]	@ (8000cd0 <HAL_ETH_MspInit+0x16c>)
 8000c02:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c04:	4a32      	ldr	r2, [pc, #200]	@ (8000cd0 <HAL_ETH_MspInit+0x16c>)
 8000c06:	f043 0302 	orr.w	r3, r3, #2
 8000c0a:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c0c:	4b30      	ldr	r3, [pc, #192]	@ (8000cd0 <HAL_ETH_MspInit+0x16c>)
 8000c0e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c10:	f003 0302 	and.w	r3, r3, #2
 8000c14:	60fb      	str	r3, [r7, #12]
 8000c16:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000c18:	4b2d      	ldr	r3, [pc, #180]	@ (8000cd0 <HAL_ETH_MspInit+0x16c>)
 8000c1a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c1c:	4a2c      	ldr	r2, [pc, #176]	@ (8000cd0 <HAL_ETH_MspInit+0x16c>)
 8000c1e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000c22:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c24:	4b2a      	ldr	r3, [pc, #168]	@ (8000cd0 <HAL_ETH_MspInit+0x16c>)
 8000c26:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c28:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000c2c:	60bb      	str	r3, [r7, #8]
 8000c2e:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8000c30:	2332      	movs	r3, #50	@ 0x32
 8000c32:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c34:	2302      	movs	r3, #2
 8000c36:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c38:	2300      	movs	r3, #0
 8000c3a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c3c:	2303      	movs	r3, #3
 8000c3e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000c40:	230b      	movs	r3, #11
 8000c42:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c44:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c48:	4619      	mov	r1, r3
 8000c4a:	4822      	ldr	r0, [pc, #136]	@ (8000cd4 <HAL_ETH_MspInit+0x170>)
 8000c4c:	f000 fee4 	bl	8001a18 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8000c50:	2386      	movs	r3, #134	@ 0x86
 8000c52:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c54:	2302      	movs	r3, #2
 8000c56:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c58:	2300      	movs	r3, #0
 8000c5a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c5c:	2303      	movs	r3, #3
 8000c5e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000c60:	230b      	movs	r3, #11
 8000c62:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c64:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c68:	4619      	mov	r1, r3
 8000c6a:	481b      	ldr	r0, [pc, #108]	@ (8000cd8 <HAL_ETH_MspInit+0x174>)
 8000c6c:	f000 fed4 	bl	8001a18 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000c70:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000c74:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c76:	2302      	movs	r3, #2
 8000c78:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c7e:	2303      	movs	r3, #3
 8000c80:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000c82:	230b      	movs	r3, #11
 8000c84:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c86:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c8a:	4619      	mov	r1, r3
 8000c8c:	4813      	ldr	r0, [pc, #76]	@ (8000cdc <HAL_ETH_MspInit+0x178>)
 8000c8e:	f000 fec3 	bl	8001a18 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 8000c92:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 8000c96:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c98:	2302      	movs	r3, #2
 8000c9a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ca0:	2303      	movs	r3, #3
 8000ca2:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000ca4:	230b      	movs	r3, #11
 8000ca6:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000ca8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000cac:	4619      	mov	r1, r3
 8000cae:	480c      	ldr	r0, [pc, #48]	@ (8000ce0 <HAL_ETH_MspInit+0x17c>)
 8000cb0:	f000 feb2 	bl	8001a18 <HAL_GPIO_Init>

    /* ETH interrupt Init */
    HAL_NVIC_SetPriority(ETH_IRQn, 5, 0);
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	2105      	movs	r1, #5
 8000cb8:	203d      	movs	r0, #61	@ 0x3d
 8000cba:	f000 fb35 	bl	8001328 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 8000cbe:	203d      	movs	r0, #61	@ 0x3d
 8000cc0:	f000 fb4e 	bl	8001360 <HAL_NVIC_EnableIRQ>

    /* USER CODE END ETH_MspInit 1 */

  }

}
 8000cc4:	bf00      	nop
 8000cc6:	3738      	adds	r7, #56	@ 0x38
 8000cc8:	46bd      	mov	sp, r7
 8000cca:	bd80      	pop	{r7, pc}
 8000ccc:	40028000 	.word	0x40028000
 8000cd0:	40023800 	.word	0x40023800
 8000cd4:	40020800 	.word	0x40020800
 8000cd8:	40020000 	.word	0x40020000
 8000cdc:	40020400 	.word	0x40020400
 8000ce0:	40021800 	.word	0x40021800

08000ce4 <HAL_RNG_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hrng: RNG handle pointer
  * @retval None
  */
void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	b0a8      	sub	sp, #160	@ 0xa0
 8000ce8:	af00      	add	r7, sp, #0
 8000cea:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000cec:	f107 0310 	add.w	r3, r7, #16
 8000cf0:	2290      	movs	r2, #144	@ 0x90
 8000cf2:	2100      	movs	r1, #0
 8000cf4:	4618      	mov	r0, r3
 8000cf6:	f023 fbc9 	bl	802448c <memset>
  if(hrng->Instance==RNG)
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	681b      	ldr	r3, [r3, #0]
 8000cfe:	4a11      	ldr	r2, [pc, #68]	@ (8000d44 <HAL_RNG_MspInit+0x60>)
 8000d00:	4293      	cmp	r3, r2
 8000d02:	d11b      	bne.n	8000d3c <HAL_RNG_MspInit+0x58>

    /* USER CODE END RNG_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8000d04:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8000d08:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000d10:	f107 0310 	add.w	r3, r7, #16
 8000d14:	4618      	mov	r0, r3
 8000d16:	f001 fd73 	bl	8002800 <HAL_RCCEx_PeriphCLKConfig>
 8000d1a:	4603      	mov	r3, r0
 8000d1c:	2b00      	cmp	r3, #0
 8000d1e:	d001      	beq.n	8000d24 <HAL_RNG_MspInit+0x40>
    {
      Error_Handler();
 8000d20:	f7ff fef2 	bl	8000b08 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 8000d24:	4b08      	ldr	r3, [pc, #32]	@ (8000d48 <HAL_RNG_MspInit+0x64>)
 8000d26:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000d28:	4a07      	ldr	r2, [pc, #28]	@ (8000d48 <HAL_RNG_MspInit+0x64>)
 8000d2a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000d2e:	6353      	str	r3, [r2, #52]	@ 0x34
 8000d30:	4b05      	ldr	r3, [pc, #20]	@ (8000d48 <HAL_RNG_MspInit+0x64>)
 8000d32:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000d34:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000d38:	60fb      	str	r3, [r7, #12]
 8000d3a:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END RNG_MspInit 1 */

  }

}
 8000d3c:	bf00      	nop
 8000d3e:	37a0      	adds	r7, #160	@ 0xa0
 8000d40:	46bd      	mov	sp, r7
 8000d42:	bd80      	pop	{r7, pc}
 8000d44:	50060800 	.word	0x50060800
 8000d48:	40023800 	.word	0x40023800

08000d4c <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	b0ae      	sub	sp, #184	@ 0xb8
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d54:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000d58:	2200      	movs	r2, #0
 8000d5a:	601a      	str	r2, [r3, #0]
 8000d5c:	605a      	str	r2, [r3, #4]
 8000d5e:	609a      	str	r2, [r3, #8]
 8000d60:	60da      	str	r2, [r3, #12]
 8000d62:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000d64:	f107 0314 	add.w	r3, r7, #20
 8000d68:	2290      	movs	r2, #144	@ 0x90
 8000d6a:	2100      	movs	r1, #0
 8000d6c:	4618      	mov	r0, r3
 8000d6e:	f023 fb8d 	bl	802448c <memset>
  if(huart->Instance==USART3)
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	681b      	ldr	r3, [r3, #0]
 8000d76:	4a22      	ldr	r2, [pc, #136]	@ (8000e00 <HAL_UART_MspInit+0xb4>)
 8000d78:	4293      	cmp	r3, r2
 8000d7a:	d13c      	bne.n	8000df6 <HAL_UART_MspInit+0xaa>

    /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000d7c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000d80:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000d82:	2300      	movs	r3, #0
 8000d84:	663b      	str	r3, [r7, #96]	@ 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000d86:	f107 0314 	add.w	r3, r7, #20
 8000d8a:	4618      	mov	r0, r3
 8000d8c:	f001 fd38 	bl	8002800 <HAL_RCCEx_PeriphCLKConfig>
 8000d90:	4603      	mov	r3, r0
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	d001      	beq.n	8000d9a <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000d96:	f7ff feb7 	bl	8000b08 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000d9a:	4b1a      	ldr	r3, [pc, #104]	@ (8000e04 <HAL_UART_MspInit+0xb8>)
 8000d9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d9e:	4a19      	ldr	r2, [pc, #100]	@ (8000e04 <HAL_UART_MspInit+0xb8>)
 8000da0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000da4:	6413      	str	r3, [r2, #64]	@ 0x40
 8000da6:	4b17      	ldr	r3, [pc, #92]	@ (8000e04 <HAL_UART_MspInit+0xb8>)
 8000da8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000daa:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000dae:	613b      	str	r3, [r7, #16]
 8000db0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000db2:	4b14      	ldr	r3, [pc, #80]	@ (8000e04 <HAL_UART_MspInit+0xb8>)
 8000db4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000db6:	4a13      	ldr	r2, [pc, #76]	@ (8000e04 <HAL_UART_MspInit+0xb8>)
 8000db8:	f043 0308 	orr.w	r3, r3, #8
 8000dbc:	6313      	str	r3, [r2, #48]	@ 0x30
 8000dbe:	4b11      	ldr	r3, [pc, #68]	@ (8000e04 <HAL_UART_MspInit+0xb8>)
 8000dc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dc2:	f003 0308 	and.w	r3, r3, #8
 8000dc6:	60fb      	str	r3, [r7, #12]
 8000dc8:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000dca:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000dce:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dd2:	2302      	movs	r3, #2
 8000dd4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dd8:	2300      	movs	r3, #0
 8000dda:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dde:	2303      	movs	r3, #3
 8000de0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000de4:	2307      	movs	r3, #7
 8000de6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000dea:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000dee:	4619      	mov	r1, r3
 8000df0:	4805      	ldr	r0, [pc, #20]	@ (8000e08 <HAL_UART_MspInit+0xbc>)
 8000df2:	f000 fe11 	bl	8001a18 <HAL_GPIO_Init>

    /* USER CODE END USART3_MspInit 1 */

  }

}
 8000df6:	bf00      	nop
 8000df8:	37b8      	adds	r7, #184	@ 0xb8
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	bd80      	pop	{r7, pc}
 8000dfe:	bf00      	nop
 8000e00:	40004800 	.word	0x40004800
 8000e04:	40023800 	.word	0x40023800
 8000e08:	40020c00 	.word	0x40020c00

08000e0c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	b08e      	sub	sp, #56	@ 0x38
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000e14:	2300      	movs	r3, #0
 8000e16:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000e18:	2300      	movs	r3, #0
 8000e1a:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000e1c:	4b33      	ldr	r3, [pc, #204]	@ (8000eec <HAL_InitTick+0xe0>)
 8000e1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e20:	4a32      	ldr	r2, [pc, #200]	@ (8000eec <HAL_InitTick+0xe0>)
 8000e22:	f043 0310 	orr.w	r3, r3, #16
 8000e26:	6413      	str	r3, [r2, #64]	@ 0x40
 8000e28:	4b30      	ldr	r3, [pc, #192]	@ (8000eec <HAL_InitTick+0xe0>)
 8000e2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e2c:	f003 0310 	and.w	r3, r3, #16
 8000e30:	60fb      	str	r3, [r7, #12]
 8000e32:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000e34:	f107 0210 	add.w	r2, r7, #16
 8000e38:	f107 0314 	add.w	r3, r7, #20
 8000e3c:	4611      	mov	r1, r2
 8000e3e:	4618      	mov	r0, r3
 8000e40:	f001 fcac 	bl	800279c <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000e44:	6a3b      	ldr	r3, [r7, #32]
 8000e46:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000e48:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	d103      	bne.n	8000e56 <HAL_InitTick+0x4a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000e4e:	f001 fc7d 	bl	800274c <HAL_RCC_GetPCLK1Freq>
 8000e52:	6378      	str	r0, [r7, #52]	@ 0x34
 8000e54:	e004      	b.n	8000e60 <HAL_InitTick+0x54>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000e56:	f001 fc79 	bl	800274c <HAL_RCC_GetPCLK1Freq>
 8000e5a:	4603      	mov	r3, r0
 8000e5c:	005b      	lsls	r3, r3, #1
 8000e5e:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000e60:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000e62:	4a23      	ldr	r2, [pc, #140]	@ (8000ef0 <HAL_InitTick+0xe4>)
 8000e64:	fba2 2303 	umull	r2, r3, r2, r3
 8000e68:	0c9b      	lsrs	r3, r3, #18
 8000e6a:	3b01      	subs	r3, #1
 8000e6c:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000e6e:	4b21      	ldr	r3, [pc, #132]	@ (8000ef4 <HAL_InitTick+0xe8>)
 8000e70:	4a21      	ldr	r2, [pc, #132]	@ (8000ef8 <HAL_InitTick+0xec>)
 8000e72:	601a      	str	r2, [r3, #0]
   * Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000e74:	4b1f      	ldr	r3, [pc, #124]	@ (8000ef4 <HAL_InitTick+0xe8>)
 8000e76:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000e7a:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000e7c:	4a1d      	ldr	r2, [pc, #116]	@ (8000ef4 <HAL_InitTick+0xe8>)
 8000e7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000e80:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000e82:	4b1c      	ldr	r3, [pc, #112]	@ (8000ef4 <HAL_InitTick+0xe8>)
 8000e84:	2200      	movs	r2, #0
 8000e86:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e88:	4b1a      	ldr	r3, [pc, #104]	@ (8000ef4 <HAL_InitTick+0xe8>)
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e8e:	4b19      	ldr	r3, [pc, #100]	@ (8000ef4 <HAL_InitTick+0xe8>)
 8000e90:	2200      	movs	r2, #0
 8000e92:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8000e94:	4817      	ldr	r0, [pc, #92]	@ (8000ef4 <HAL_InitTick+0xe8>)
 8000e96:	f002 f95b 	bl	8003150 <HAL_TIM_Base_Init>
 8000e9a:	4603      	mov	r3, r0
 8000e9c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8000ea0:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	d11b      	bne.n	8000ee0 <HAL_InitTick+0xd4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000ea8:	4812      	ldr	r0, [pc, #72]	@ (8000ef4 <HAL_InitTick+0xe8>)
 8000eaa:	f002 f9b3 	bl	8003214 <HAL_TIM_Base_Start_IT>
 8000eae:	4603      	mov	r3, r0
 8000eb0:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8000eb4:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000eb8:	2b00      	cmp	r3, #0
 8000eba:	d111      	bne.n	8000ee0 <HAL_InitTick+0xd4>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000ebc:	2036      	movs	r0, #54	@ 0x36
 8000ebe:	f000 fa4f 	bl	8001360 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	2b0f      	cmp	r3, #15
 8000ec6:	d808      	bhi.n	8000eda <HAL_InitTick+0xce>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8000ec8:	2200      	movs	r2, #0
 8000eca:	6879      	ldr	r1, [r7, #4]
 8000ecc:	2036      	movs	r0, #54	@ 0x36
 8000ece:	f000 fa2b 	bl	8001328 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000ed2:	4a0a      	ldr	r2, [pc, #40]	@ (8000efc <HAL_InitTick+0xf0>)
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	6013      	str	r3, [r2, #0]
 8000ed8:	e002      	b.n	8000ee0 <HAL_InitTick+0xd4>
      }
      else
      {
        status = HAL_ERROR;
 8000eda:	2301      	movs	r3, #1
 8000edc:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000ee0:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8000ee4:	4618      	mov	r0, r3
 8000ee6:	3738      	adds	r7, #56	@ 0x38
 8000ee8:	46bd      	mov	sp, r7
 8000eea:	bd80      	pop	{r7, pc}
 8000eec:	40023800 	.word	0x40023800
 8000ef0:	431bde83 	.word	0x431bde83
 8000ef4:	20000660 	.word	0x20000660
 8000ef8:	40001000 	.word	0x40001000
 8000efc:	20000004 	.word	0x20000004

08000f00 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f00:	b480      	push	{r7}
 8000f02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000f04:	bf00      	nop
 8000f06:	e7fd      	b.n	8000f04 <NMI_Handler+0x4>

08000f08 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f08:	b480      	push	{r7}
 8000f0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f0c:	bf00      	nop
 8000f0e:	e7fd      	b.n	8000f0c <HardFault_Handler+0x4>

08000f10 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f10:	b480      	push	{r7}
 8000f12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f14:	bf00      	nop
 8000f16:	e7fd      	b.n	8000f14 <MemManage_Handler+0x4>

08000f18 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f18:	b480      	push	{r7}
 8000f1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f1c:	bf00      	nop
 8000f1e:	e7fd      	b.n	8000f1c <BusFault_Handler+0x4>

08000f20 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f20:	b480      	push	{r7}
 8000f22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f24:	bf00      	nop
 8000f26:	e7fd      	b.n	8000f24 <UsageFault_Handler+0x4>

08000f28 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f28:	b480      	push	{r7}
 8000f2a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f2c:	bf00      	nop
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f34:	4770      	bx	lr
	...

08000f38 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000f3c:	4802      	ldr	r0, [pc, #8]	@ (8000f48 <TIM6_DAC_IRQHandler+0x10>)
 8000f3e:	f002 f9e1 	bl	8003304 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000f42:	bf00      	nop
 8000f44:	bd80      	pop	{r7, pc}
 8000f46:	bf00      	nop
 8000f48:	20000660 	.word	0x20000660

08000f4c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000f4c:	b480      	push	{r7}
 8000f4e:	af00      	add	r7, sp, #0
  return 1;
 8000f50:	2301      	movs	r3, #1
}
 8000f52:	4618      	mov	r0, r3
 8000f54:	46bd      	mov	sp, r7
 8000f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f5a:	4770      	bx	lr

08000f5c <_kill>:

int _kill(int pid, int sig)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b082      	sub	sp, #8
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	6078      	str	r0, [r7, #4]
 8000f64:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8000f66:	f023 fbd9 	bl	802471c <__errno>
 8000f6a:	4603      	mov	r3, r0
 8000f6c:	2216      	movs	r2, #22
 8000f6e:	601a      	str	r2, [r3, #0]
  return -1;
 8000f70:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000f74:	4618      	mov	r0, r3
 8000f76:	3708      	adds	r7, #8
 8000f78:	46bd      	mov	sp, r7
 8000f7a:	bd80      	pop	{r7, pc}

08000f7c <_exit>:

void _exit (int status)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b082      	sub	sp, #8
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8000f84:	f04f 31ff 	mov.w	r1, #4294967295
 8000f88:	6878      	ldr	r0, [r7, #4]
 8000f8a:	f7ff ffe7 	bl	8000f5c <_kill>
  while (1) {}    /* Make sure we hang here */
 8000f8e:	bf00      	nop
 8000f90:	e7fd      	b.n	8000f8e <_exit+0x12>

08000f92 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000f92:	b580      	push	{r7, lr}
 8000f94:	b086      	sub	sp, #24
 8000f96:	af00      	add	r7, sp, #0
 8000f98:	60f8      	str	r0, [r7, #12]
 8000f9a:	60b9      	str	r1, [r7, #8]
 8000f9c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	617b      	str	r3, [r7, #20]
 8000fa2:	e00a      	b.n	8000fba <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000fa4:	f3af 8000 	nop.w
 8000fa8:	4601      	mov	r1, r0
 8000faa:	68bb      	ldr	r3, [r7, #8]
 8000fac:	1c5a      	adds	r2, r3, #1
 8000fae:	60ba      	str	r2, [r7, #8]
 8000fb0:	b2ca      	uxtb	r2, r1
 8000fb2:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000fb4:	697b      	ldr	r3, [r7, #20]
 8000fb6:	3301      	adds	r3, #1
 8000fb8:	617b      	str	r3, [r7, #20]
 8000fba:	697a      	ldr	r2, [r7, #20]
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	429a      	cmp	r2, r3
 8000fc0:	dbf0      	blt.n	8000fa4 <_read+0x12>
  }

  return len;
 8000fc2:	687b      	ldr	r3, [r7, #4]
}
 8000fc4:	4618      	mov	r0, r3
 8000fc6:	3718      	adds	r7, #24
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	bd80      	pop	{r7, pc}

08000fcc <_close>:
  }
  return len;
}

int _close(int file)
{
 8000fcc:	b480      	push	{r7}
 8000fce:	b083      	sub	sp, #12
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000fd4:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000fd8:	4618      	mov	r0, r3
 8000fda:	370c      	adds	r7, #12
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe2:	4770      	bx	lr

08000fe4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000fe4:	b480      	push	{r7}
 8000fe6:	b083      	sub	sp, #12
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	6078      	str	r0, [r7, #4]
 8000fec:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000fee:	683b      	ldr	r3, [r7, #0]
 8000ff0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000ff4:	605a      	str	r2, [r3, #4]
  return 0;
 8000ff6:	2300      	movs	r3, #0
}
 8000ff8:	4618      	mov	r0, r3
 8000ffa:	370c      	adds	r7, #12
 8000ffc:	46bd      	mov	sp, r7
 8000ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001002:	4770      	bx	lr

08001004 <_isatty>:

int _isatty(int file)
{
 8001004:	b480      	push	{r7}
 8001006:	b083      	sub	sp, #12
 8001008:	af00      	add	r7, sp, #0
 800100a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800100c:	2301      	movs	r3, #1
}
 800100e:	4618      	mov	r0, r3
 8001010:	370c      	adds	r7, #12
 8001012:	46bd      	mov	sp, r7
 8001014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001018:	4770      	bx	lr

0800101a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800101a:	b480      	push	{r7}
 800101c:	b085      	sub	sp, #20
 800101e:	af00      	add	r7, sp, #0
 8001020:	60f8      	str	r0, [r7, #12]
 8001022:	60b9      	str	r1, [r7, #8]
 8001024:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001026:	2300      	movs	r3, #0
}
 8001028:	4618      	mov	r0, r3
 800102a:	3714      	adds	r7, #20
 800102c:	46bd      	mov	sp, r7
 800102e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001032:	4770      	bx	lr

08001034 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	b086      	sub	sp, #24
 8001038:	af00      	add	r7, sp, #0
 800103a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800103c:	4a14      	ldr	r2, [pc, #80]	@ (8001090 <_sbrk+0x5c>)
 800103e:	4b15      	ldr	r3, [pc, #84]	@ (8001094 <_sbrk+0x60>)
 8001040:	1ad3      	subs	r3, r2, r3
 8001042:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001044:	697b      	ldr	r3, [r7, #20]
 8001046:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001048:	4b13      	ldr	r3, [pc, #76]	@ (8001098 <_sbrk+0x64>)
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	2b00      	cmp	r3, #0
 800104e:	d102      	bne.n	8001056 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001050:	4b11      	ldr	r3, [pc, #68]	@ (8001098 <_sbrk+0x64>)
 8001052:	4a12      	ldr	r2, [pc, #72]	@ (800109c <_sbrk+0x68>)
 8001054:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001056:	4b10      	ldr	r3, [pc, #64]	@ (8001098 <_sbrk+0x64>)
 8001058:	681a      	ldr	r2, [r3, #0]
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	4413      	add	r3, r2
 800105e:	693a      	ldr	r2, [r7, #16]
 8001060:	429a      	cmp	r2, r3
 8001062:	d207      	bcs.n	8001074 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001064:	f023 fb5a 	bl	802471c <__errno>
 8001068:	4603      	mov	r3, r0
 800106a:	220c      	movs	r2, #12
 800106c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800106e:	f04f 33ff 	mov.w	r3, #4294967295
 8001072:	e009      	b.n	8001088 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001074:	4b08      	ldr	r3, [pc, #32]	@ (8001098 <_sbrk+0x64>)
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800107a:	4b07      	ldr	r3, [pc, #28]	@ (8001098 <_sbrk+0x64>)
 800107c:	681a      	ldr	r2, [r3, #0]
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	4413      	add	r3, r2
 8001082:	4a05      	ldr	r2, [pc, #20]	@ (8001098 <_sbrk+0x64>)
 8001084:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001086:	68fb      	ldr	r3, [r7, #12]
}
 8001088:	4618      	mov	r0, r3
 800108a:	3718      	adds	r7, #24
 800108c:	46bd      	mov	sp, r7
 800108e:	bd80      	pop	{r7, pc}
 8001090:	20080000 	.word	0x20080000
 8001094:	00000400 	.word	0x00000400
 8001098:	200006ac 	.word	0x200006ac
 800109c:	20014db0 	.word	0x20014db0

080010a0 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80010a0:	b480      	push	{r7}
 80010a2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80010a4:	4b06      	ldr	r3, [pc, #24]	@ (80010c0 <SystemInit+0x20>)
 80010a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80010aa:	4a05      	ldr	r2, [pc, #20]	@ (80010c0 <SystemInit+0x20>)
 80010ac:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80010b0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80010b4:	bf00      	nop
 80010b6:	46bd      	mov	sp, r7
 80010b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010bc:	4770      	bx	lr
 80010be:	bf00      	nop
 80010c0:	e000ed00 	.word	0xe000ed00

080010c4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80010c4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80010fc <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80010c8:	f7ff ffea 	bl	80010a0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80010cc:	480c      	ldr	r0, [pc, #48]	@ (8001100 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80010ce:	490d      	ldr	r1, [pc, #52]	@ (8001104 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80010d0:	4a0d      	ldr	r2, [pc, #52]	@ (8001108 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80010d2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80010d4:	e002      	b.n	80010dc <LoopCopyDataInit>

080010d6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80010d6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80010d8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80010da:	3304      	adds	r3, #4

080010dc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80010dc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80010de:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80010e0:	d3f9      	bcc.n	80010d6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80010e2:	4a0a      	ldr	r2, [pc, #40]	@ (800110c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80010e4:	4c0a      	ldr	r4, [pc, #40]	@ (8001110 <LoopFillZerobss+0x22>)
  movs r3, #0
 80010e6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80010e8:	e001      	b.n	80010ee <LoopFillZerobss>

080010ea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80010ea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80010ec:	3204      	adds	r2, #4

080010ee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80010ee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80010f0:	d3fb      	bcc.n	80010ea <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80010f2:	f023 fb19 	bl	8024728 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80010f6:	f7ff fb49 	bl	800078c <main>
  bx  lr    
 80010fa:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80010fc:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8001100:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001104:	20000378 	.word	0x20000378
  ldr r2, =_sidata
 8001108:	08035a70 	.word	0x08035a70
  ldr r2, =_sbss
 800110c:	200004b8 	.word	0x200004b8
  ldr r4, =_ebss
 8001110:	20014dac 	.word	0x20014dac

08001114 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001114:	e7fe      	b.n	8001114 <ADC_IRQHandler>

08001116 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001116:	b580      	push	{r7, lr}
 8001118:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800111a:	2003      	movs	r0, #3
 800111c:	f000 f8f9 	bl	8001312 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001120:	200f      	movs	r0, #15
 8001122:	f7ff fe73 	bl	8000e0c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001126:	f7ff fcf5 	bl	8000b14 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800112a:	2300      	movs	r3, #0
}
 800112c:	4618      	mov	r0, r3
 800112e:	bd80      	pop	{r7, pc}

08001130 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001130:	b480      	push	{r7}
 8001132:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001134:	4b06      	ldr	r3, [pc, #24]	@ (8001150 <HAL_IncTick+0x20>)
 8001136:	781b      	ldrb	r3, [r3, #0]
 8001138:	461a      	mov	r2, r3
 800113a:	4b06      	ldr	r3, [pc, #24]	@ (8001154 <HAL_IncTick+0x24>)
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	4413      	add	r3, r2
 8001140:	4a04      	ldr	r2, [pc, #16]	@ (8001154 <HAL_IncTick+0x24>)
 8001142:	6013      	str	r3, [r2, #0]
}
 8001144:	bf00      	nop
 8001146:	46bd      	mov	sp, r7
 8001148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114c:	4770      	bx	lr
 800114e:	bf00      	nop
 8001150:	20000008 	.word	0x20000008
 8001154:	200006b0 	.word	0x200006b0

08001158 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001158:	b480      	push	{r7}
 800115a:	af00      	add	r7, sp, #0
  return uwTick;
 800115c:	4b03      	ldr	r3, [pc, #12]	@ (800116c <HAL_GetTick+0x14>)
 800115e:	681b      	ldr	r3, [r3, #0]
}
 8001160:	4618      	mov	r0, r3
 8001162:	46bd      	mov	sp, r7
 8001164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001168:	4770      	bx	lr
 800116a:	bf00      	nop
 800116c:	200006b0 	.word	0x200006b0

08001170 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	b084      	sub	sp, #16
 8001174:	af00      	add	r7, sp, #0
 8001176:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001178:	f7ff ffee 	bl	8001158 <HAL_GetTick>
 800117c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001182:	68fb      	ldr	r3, [r7, #12]
 8001184:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001188:	d005      	beq.n	8001196 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800118a:	4b0a      	ldr	r3, [pc, #40]	@ (80011b4 <HAL_Delay+0x44>)
 800118c:	781b      	ldrb	r3, [r3, #0]
 800118e:	461a      	mov	r2, r3
 8001190:	68fb      	ldr	r3, [r7, #12]
 8001192:	4413      	add	r3, r2
 8001194:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001196:	bf00      	nop
 8001198:	f7ff ffde 	bl	8001158 <HAL_GetTick>
 800119c:	4602      	mov	r2, r0
 800119e:	68bb      	ldr	r3, [r7, #8]
 80011a0:	1ad3      	subs	r3, r2, r3
 80011a2:	68fa      	ldr	r2, [r7, #12]
 80011a4:	429a      	cmp	r2, r3
 80011a6:	d8f7      	bhi.n	8001198 <HAL_Delay+0x28>
  {
  }
}
 80011a8:	bf00      	nop
 80011aa:	bf00      	nop
 80011ac:	3710      	adds	r7, #16
 80011ae:	46bd      	mov	sp, r7
 80011b0:	bd80      	pop	{r7, pc}
 80011b2:	bf00      	nop
 80011b4:	20000008 	.word	0x20000008

080011b8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011b8:	b480      	push	{r7}
 80011ba:	b085      	sub	sp, #20
 80011bc:	af00      	add	r7, sp, #0
 80011be:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	f003 0307 	and.w	r3, r3, #7
 80011c6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80011c8:	4b0b      	ldr	r3, [pc, #44]	@ (80011f8 <__NVIC_SetPriorityGrouping+0x40>)
 80011ca:	68db      	ldr	r3, [r3, #12]
 80011cc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80011ce:	68ba      	ldr	r2, [r7, #8]
 80011d0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80011d4:	4013      	ands	r3, r2
 80011d6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80011d8:	68fb      	ldr	r3, [r7, #12]
 80011da:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80011dc:	68bb      	ldr	r3, [r7, #8]
 80011de:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80011e0:	4b06      	ldr	r3, [pc, #24]	@ (80011fc <__NVIC_SetPriorityGrouping+0x44>)
 80011e2:	4313      	orrs	r3, r2
 80011e4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80011e6:	4a04      	ldr	r2, [pc, #16]	@ (80011f8 <__NVIC_SetPriorityGrouping+0x40>)
 80011e8:	68bb      	ldr	r3, [r7, #8]
 80011ea:	60d3      	str	r3, [r2, #12]
}
 80011ec:	bf00      	nop
 80011ee:	3714      	adds	r7, #20
 80011f0:	46bd      	mov	sp, r7
 80011f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f6:	4770      	bx	lr
 80011f8:	e000ed00 	.word	0xe000ed00
 80011fc:	05fa0000 	.word	0x05fa0000

08001200 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001200:	b480      	push	{r7}
 8001202:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001204:	4b04      	ldr	r3, [pc, #16]	@ (8001218 <__NVIC_GetPriorityGrouping+0x18>)
 8001206:	68db      	ldr	r3, [r3, #12]
 8001208:	0a1b      	lsrs	r3, r3, #8
 800120a:	f003 0307 	and.w	r3, r3, #7
}
 800120e:	4618      	mov	r0, r3
 8001210:	46bd      	mov	sp, r7
 8001212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001216:	4770      	bx	lr
 8001218:	e000ed00 	.word	0xe000ed00

0800121c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800121c:	b480      	push	{r7}
 800121e:	b083      	sub	sp, #12
 8001220:	af00      	add	r7, sp, #0
 8001222:	4603      	mov	r3, r0
 8001224:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001226:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800122a:	2b00      	cmp	r3, #0
 800122c:	db0b      	blt.n	8001246 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800122e:	79fb      	ldrb	r3, [r7, #7]
 8001230:	f003 021f 	and.w	r2, r3, #31
 8001234:	4907      	ldr	r1, [pc, #28]	@ (8001254 <__NVIC_EnableIRQ+0x38>)
 8001236:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800123a:	095b      	lsrs	r3, r3, #5
 800123c:	2001      	movs	r0, #1
 800123e:	fa00 f202 	lsl.w	r2, r0, r2
 8001242:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001246:	bf00      	nop
 8001248:	370c      	adds	r7, #12
 800124a:	46bd      	mov	sp, r7
 800124c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001250:	4770      	bx	lr
 8001252:	bf00      	nop
 8001254:	e000e100 	.word	0xe000e100

08001258 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001258:	b480      	push	{r7}
 800125a:	b083      	sub	sp, #12
 800125c:	af00      	add	r7, sp, #0
 800125e:	4603      	mov	r3, r0
 8001260:	6039      	str	r1, [r7, #0]
 8001262:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001264:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001268:	2b00      	cmp	r3, #0
 800126a:	db0a      	blt.n	8001282 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800126c:	683b      	ldr	r3, [r7, #0]
 800126e:	b2da      	uxtb	r2, r3
 8001270:	490c      	ldr	r1, [pc, #48]	@ (80012a4 <__NVIC_SetPriority+0x4c>)
 8001272:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001276:	0112      	lsls	r2, r2, #4
 8001278:	b2d2      	uxtb	r2, r2
 800127a:	440b      	add	r3, r1
 800127c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001280:	e00a      	b.n	8001298 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001282:	683b      	ldr	r3, [r7, #0]
 8001284:	b2da      	uxtb	r2, r3
 8001286:	4908      	ldr	r1, [pc, #32]	@ (80012a8 <__NVIC_SetPriority+0x50>)
 8001288:	79fb      	ldrb	r3, [r7, #7]
 800128a:	f003 030f 	and.w	r3, r3, #15
 800128e:	3b04      	subs	r3, #4
 8001290:	0112      	lsls	r2, r2, #4
 8001292:	b2d2      	uxtb	r2, r2
 8001294:	440b      	add	r3, r1
 8001296:	761a      	strb	r2, [r3, #24]
}
 8001298:	bf00      	nop
 800129a:	370c      	adds	r7, #12
 800129c:	46bd      	mov	sp, r7
 800129e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a2:	4770      	bx	lr
 80012a4:	e000e100 	.word	0xe000e100
 80012a8:	e000ed00 	.word	0xe000ed00

080012ac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012ac:	b480      	push	{r7}
 80012ae:	b089      	sub	sp, #36	@ 0x24
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	60f8      	str	r0, [r7, #12]
 80012b4:	60b9      	str	r1, [r7, #8]
 80012b6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80012b8:	68fb      	ldr	r3, [r7, #12]
 80012ba:	f003 0307 	and.w	r3, r3, #7
 80012be:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80012c0:	69fb      	ldr	r3, [r7, #28]
 80012c2:	f1c3 0307 	rsb	r3, r3, #7
 80012c6:	2b04      	cmp	r3, #4
 80012c8:	bf28      	it	cs
 80012ca:	2304      	movcs	r3, #4
 80012cc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80012ce:	69fb      	ldr	r3, [r7, #28]
 80012d0:	3304      	adds	r3, #4
 80012d2:	2b06      	cmp	r3, #6
 80012d4:	d902      	bls.n	80012dc <NVIC_EncodePriority+0x30>
 80012d6:	69fb      	ldr	r3, [r7, #28]
 80012d8:	3b03      	subs	r3, #3
 80012da:	e000      	b.n	80012de <NVIC_EncodePriority+0x32>
 80012dc:	2300      	movs	r3, #0
 80012de:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012e0:	f04f 32ff 	mov.w	r2, #4294967295
 80012e4:	69bb      	ldr	r3, [r7, #24]
 80012e6:	fa02 f303 	lsl.w	r3, r2, r3
 80012ea:	43da      	mvns	r2, r3
 80012ec:	68bb      	ldr	r3, [r7, #8]
 80012ee:	401a      	ands	r2, r3
 80012f0:	697b      	ldr	r3, [r7, #20]
 80012f2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80012f4:	f04f 31ff 	mov.w	r1, #4294967295
 80012f8:	697b      	ldr	r3, [r7, #20]
 80012fa:	fa01 f303 	lsl.w	r3, r1, r3
 80012fe:	43d9      	mvns	r1, r3
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001304:	4313      	orrs	r3, r2
         );
}
 8001306:	4618      	mov	r0, r3
 8001308:	3724      	adds	r7, #36	@ 0x24
 800130a:	46bd      	mov	sp, r7
 800130c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001310:	4770      	bx	lr

08001312 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001312:	b580      	push	{r7, lr}
 8001314:	b082      	sub	sp, #8
 8001316:	af00      	add	r7, sp, #0
 8001318:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800131a:	6878      	ldr	r0, [r7, #4]
 800131c:	f7ff ff4c 	bl	80011b8 <__NVIC_SetPriorityGrouping>
}
 8001320:	bf00      	nop
 8001322:	3708      	adds	r7, #8
 8001324:	46bd      	mov	sp, r7
 8001326:	bd80      	pop	{r7, pc}

08001328 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001328:	b580      	push	{r7, lr}
 800132a:	b086      	sub	sp, #24
 800132c:	af00      	add	r7, sp, #0
 800132e:	4603      	mov	r3, r0
 8001330:	60b9      	str	r1, [r7, #8]
 8001332:	607a      	str	r2, [r7, #4]
 8001334:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001336:	2300      	movs	r3, #0
 8001338:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800133a:	f7ff ff61 	bl	8001200 <__NVIC_GetPriorityGrouping>
 800133e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001340:	687a      	ldr	r2, [r7, #4]
 8001342:	68b9      	ldr	r1, [r7, #8]
 8001344:	6978      	ldr	r0, [r7, #20]
 8001346:	f7ff ffb1 	bl	80012ac <NVIC_EncodePriority>
 800134a:	4602      	mov	r2, r0
 800134c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001350:	4611      	mov	r1, r2
 8001352:	4618      	mov	r0, r3
 8001354:	f7ff ff80 	bl	8001258 <__NVIC_SetPriority>
}
 8001358:	bf00      	nop
 800135a:	3718      	adds	r7, #24
 800135c:	46bd      	mov	sp, r7
 800135e:	bd80      	pop	{r7, pc}

08001360 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001360:	b580      	push	{r7, lr}
 8001362:	b082      	sub	sp, #8
 8001364:	af00      	add	r7, sp, #0
 8001366:	4603      	mov	r3, r0
 8001368:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800136a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800136e:	4618      	mov	r0, r3
 8001370:	f7ff ff54 	bl	800121c <__NVIC_EnableIRQ>
}
 8001374:	bf00      	nop
 8001376:	3708      	adds	r7, #8
 8001378:	46bd      	mov	sp, r7
 800137a:	bd80      	pop	{r7, pc}

0800137c <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	b084      	sub	sp, #16
 8001380:	af00      	add	r7, sp, #0
 8001382:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	2b00      	cmp	r3, #0
 8001388:	d101      	bne.n	800138e <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 800138a:	2301      	movs	r3, #1
 800138c:	e086      	b.n	800149c <HAL_ETH_Init+0x120>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001394:	2b00      	cmp	r3, #0
 8001396:	d106      	bne.n	80013a6 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	2220      	movs	r2, #32
 800139c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80013a0:	6878      	ldr	r0, [r7, #4]
 80013a2:	f7ff fbdf 	bl	8000b64 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013a6:	4b3f      	ldr	r3, [pc, #252]	@ (80014a4 <HAL_ETH_Init+0x128>)
 80013a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80013aa:	4a3e      	ldr	r2, [pc, #248]	@ (80014a4 <HAL_ETH_Init+0x128>)
 80013ac:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80013b0:	6453      	str	r3, [r2, #68]	@ 0x44
 80013b2:	4b3c      	ldr	r3, [pc, #240]	@ (80014a4 <HAL_ETH_Init+0x128>)
 80013b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80013b6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80013ba:	60bb      	str	r3, [r7, #8]
 80013bc:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 80013be:	4b3a      	ldr	r3, [pc, #232]	@ (80014a8 <HAL_ETH_Init+0x12c>)
 80013c0:	685b      	ldr	r3, [r3, #4]
 80013c2:	4a39      	ldr	r2, [pc, #228]	@ (80014a8 <HAL_ETH_Init+0x12c>)
 80013c4:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 80013c8:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 80013ca:	4b37      	ldr	r3, [pc, #220]	@ (80014a8 <HAL_ETH_Init+0x12c>)
 80013cc:	685a      	ldr	r2, [r3, #4]
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	689b      	ldr	r3, [r3, #8]
 80013d2:	4935      	ldr	r1, [pc, #212]	@ (80014a8 <HAL_ETH_Init+0x12c>)
 80013d4:	4313      	orrs	r3, r2
 80013d6:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 80013d8:	4b33      	ldr	r3, [pc, #204]	@ (80014a8 <HAL_ETH_Init+0x12c>)
 80013da:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	687a      	ldr	r2, [r7, #4]
 80013e8:	6812      	ldr	r2, [r2, #0]
 80013ea:	f043 0301 	orr.w	r3, r3, #1
 80013ee:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80013f2:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80013f4:	f7ff feb0 	bl	8001158 <HAL_GetTick>
 80013f8:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80013fa:	e011      	b.n	8001420 <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 80013fc:	f7ff feac 	bl	8001158 <HAL_GetTick>
 8001400:	4602      	mov	r2, r0
 8001402:	68fb      	ldr	r3, [r7, #12]
 8001404:	1ad3      	subs	r3, r2, r3
 8001406:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 800140a:	d909      	bls.n	8001420 <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	2204      	movs	r2, #4
 8001410:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	22e0      	movs	r2, #224	@ 0xe0
 8001418:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 800141c:	2301      	movs	r3, #1
 800141e:	e03d      	b.n	800149c <HAL_ETH_Init+0x120>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	f003 0301 	and.w	r3, r3, #1
 800142e:	2b00      	cmp	r3, #0
 8001430:	d1e4      	bne.n	80013fc <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8001432:	6878      	ldr	r0, [r7, #4]
 8001434:	f000 f97a 	bl	800172c <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8001438:	6878      	ldr	r0, [r7, #4]
 800143a:	f000 fa25 	bl	8001888 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 800143e:	6878      	ldr	r0, [r7, #4]
 8001440:	f000 fa7b 	bl	800193a <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	685b      	ldr	r3, [r3, #4]
 8001448:	461a      	mov	r2, r3
 800144a:	2100      	movs	r1, #0
 800144c:	6878      	ldr	r0, [r7, #4]
 800144e:	f000 f9e3 	bl	8001818 <ETH_MACAddressConfig>

  /* Disable MMC Interrupts */
  SET_BIT(heth->Instance->MACIMR, ETH_MACIMR_TSTIM | ETH_MACIMR_PMTIM);
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	f442 7202 	orr.w	r2, r2, #520	@ 0x208
 8001460:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Disable Rx MMC Interrupts */
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RGUFM | ETH_MMCRIMR_RFAEM | \
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	f8d3 110c 	ldr.w	r1, [r3, #268]	@ 0x10c
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	681a      	ldr	r2, [r3, #0]
 800146e:	4b0f      	ldr	r3, [pc, #60]	@ (80014ac <HAL_ETH_Init+0x130>)
 8001470:	430b      	orrs	r3, r1
 8001472:	f8c2 310c 	str.w	r3, [r2, #268]	@ 0x10c
          ETH_MMCRIMR_RFCEM);

  /* Disable Tx MMC Interrupts */
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TGFM | ETH_MMCTIMR_TGFMSCM | \
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	f8d3 2110 	ldr.w	r2, [r3, #272]	@ 0x110
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	f442 1203 	orr.w	r2, r2, #2146304	@ 0x20c000
 8001486:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110
          ETH_MMCTIMR_TGFSCM);

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	2200      	movs	r2, #0
 800148e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	2210      	movs	r2, #16
 8001496:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800149a:	2300      	movs	r3, #0
}
 800149c:	4618      	mov	r0, r3
 800149e:	3710      	adds	r7, #16
 80014a0:	46bd      	mov	sp, r7
 80014a2:	bd80      	pop	{r7, pc}
 80014a4:	40023800 	.word	0x40023800
 80014a8:	40013800 	.word	0x40013800
 80014ac:	00020060 	.word	0x00020060

080014b0 <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth, const ETH_MACConfigTypeDef *macconf)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	b084      	sub	sp, #16
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	6078      	str	r0, [r7, #4]
 80014b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	60fb      	str	r3, [r7, #12]
  /* Clear CSTF, WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 80014c2:	68fa      	ldr	r2, [r7, #12]
 80014c4:	4b53      	ldr	r3, [pc, #332]	@ (8001614 <ETH_SetMACConfig+0x164>)
 80014c6:	4013      	ands	r3, r2
 80014c8:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 80014ca:	683b      	ldr	r3, [r7, #0]
 80014cc:	7b9b      	ldrb	r3, [r3, #14]
 80014ce:	065b      	lsls	r3, r3, #25
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80014d0:	683a      	ldr	r2, [r7, #0]
 80014d2:	7c12      	ldrb	r2, [r2, #16]
 80014d4:	2a00      	cmp	r2, #0
 80014d6:	d102      	bne.n	80014de <ETH_SetMACConfig+0x2e>
 80014d8:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80014dc:	e000      	b.n	80014e0 <ETH_SetMACConfig+0x30>
 80014de:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 80014e0:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 80014e2:	683a      	ldr	r2, [r7, #0]
 80014e4:	7c52      	ldrb	r2, [r2, #17]
 80014e6:	2a00      	cmp	r2, #0
 80014e8:	d102      	bne.n	80014f0 <ETH_SetMACConfig+0x40>
 80014ea:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 80014ee:	e000      	b.n	80014f2 <ETH_SetMACConfig+0x42>
 80014f0:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80014f2:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 80014f4:	683b      	ldr	r3, [r7, #0]
 80014f6:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 80014f8:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 80014fa:	683b      	ldr	r3, [r7, #0]
 80014fc:	7fdb      	ldrb	r3, [r3, #31]
 80014fe:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8001500:	431a      	orrs	r2, r3
                        macconf->Speed |
 8001502:	683b      	ldr	r3, [r7, #0]
 8001504:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8001506:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8001508:	683a      	ldr	r2, [r7, #0]
 800150a:	7f92      	ldrb	r2, [r2, #30]
 800150c:	2a00      	cmp	r2, #0
 800150e:	d102      	bne.n	8001516 <ETH_SetMACConfig+0x66>
 8001510:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001514:	e000      	b.n	8001518 <ETH_SetMACConfig+0x68>
 8001516:	2200      	movs	r2, #0
                        macconf->Speed |
 8001518:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 800151a:	683b      	ldr	r3, [r7, #0]
 800151c:	7f1b      	ldrb	r3, [r3, #28]
 800151e:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8001520:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 8001522:	683b      	ldr	r3, [r7, #0]
 8001524:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8001526:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8001528:	683b      	ldr	r3, [r7, #0]
 800152a:	791b      	ldrb	r3, [r3, #4]
 800152c:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 800152e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8001530:	683a      	ldr	r2, [r7, #0]
 8001532:	f892 2020 	ldrb.w	r2, [r2, #32]
 8001536:	2a00      	cmp	r2, #0
 8001538:	d102      	bne.n	8001540 <ETH_SetMACConfig+0x90>
 800153a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800153e:	e000      	b.n	8001542 <ETH_SetMACConfig+0x92>
 8001540:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8001542:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8001544:	683b      	ldr	r3, [r7, #0]
 8001546:	7bdb      	ldrb	r3, [r3, #15]
 8001548:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 800154a:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 800154c:	683b      	ldr	r3, [r7, #0]
 800154e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8001550:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8001552:	683b      	ldr	r3, [r7, #0]
 8001554:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8001558:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 800155a:	4313      	orrs	r3, r2
 800155c:	68fa      	ldr	r2, [r7, #12]
 800155e:	4313      	orrs	r3, r2
 8001560:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	68fa      	ldr	r2, [r7, #12]
 8001568:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001572:	2001      	movs	r0, #1
 8001574:	f7ff fdfc 	bl	8001170 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	68fa      	ldr	r2, [r7, #12]
 800157e:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	699b      	ldr	r3, [r3, #24]
 8001586:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8001588:	68fa      	ldr	r2, [r7, #12]
 800158a:	f64f 7341 	movw	r3, #65345	@ 0xff41
 800158e:	4013      	ands	r3, r2
 8001590:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001592:	683b      	ldr	r3, [r7, #0]
 8001594:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001596:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8001598:	683a      	ldr	r2, [r7, #0]
 800159a:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 800159e:	2a00      	cmp	r2, #0
 80015a0:	d101      	bne.n	80015a6 <ETH_SetMACConfig+0xf6>
 80015a2:	2280      	movs	r2, #128	@ 0x80
 80015a4:	e000      	b.n	80015a8 <ETH_SetMACConfig+0xf8>
 80015a6:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80015a8:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 80015aa:	683b      	ldr	r3, [r7, #0]
 80015ac:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 80015ae:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 80015b0:	683a      	ldr	r2, [r7, #0]
 80015b2:	f892 2055 	ldrb.w	r2, [r2, #85]	@ 0x55
 80015b6:	2a01      	cmp	r2, #1
 80015b8:	d101      	bne.n	80015be <ETH_SetMACConfig+0x10e>
 80015ba:	2208      	movs	r2, #8
 80015bc:	e000      	b.n	80015c0 <ETH_SetMACConfig+0x110>
 80015be:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 80015c0:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 80015c2:	683a      	ldr	r2, [r7, #0]
 80015c4:	f892 2056 	ldrb.w	r2, [r2, #86]	@ 0x56
 80015c8:	2a01      	cmp	r2, #1
 80015ca:	d101      	bne.n	80015d0 <ETH_SetMACConfig+0x120>
 80015cc:	2204      	movs	r2, #4
 80015ce:	e000      	b.n	80015d2 <ETH_SetMACConfig+0x122>
 80015d0:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 80015d2:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 80015d4:	683a      	ldr	r2, [r7, #0]
 80015d6:	f892 2054 	ldrb.w	r2, [r2, #84]	@ 0x54
 80015da:	2a01      	cmp	r2, #1
 80015dc:	d101      	bne.n	80015e2 <ETH_SetMACConfig+0x132>
 80015de:	2202      	movs	r2, #2
 80015e0:	e000      	b.n	80015e4 <ETH_SetMACConfig+0x134>
 80015e2:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80015e4:	4313      	orrs	r3, r2
 80015e6:	68fa      	ldr	r2, [r7, #12]
 80015e8:	4313      	orrs	r3, r2
 80015ea:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	68fa      	ldr	r2, [r7, #12]
 80015f2:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	699b      	ldr	r3, [r3, #24]
 80015fa:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80015fc:	2001      	movs	r0, #1
 80015fe:	f7ff fdb7 	bl	8001170 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	68fa      	ldr	r2, [r7, #12]
 8001608:	619a      	str	r2, [r3, #24]
}
 800160a:	bf00      	nop
 800160c:	3710      	adds	r7, #16
 800160e:	46bd      	mov	sp, r7
 8001610:	bd80      	pop	{r7, pc}
 8001612:	bf00      	nop
 8001614:	fd20810f 	.word	0xfd20810f

08001618 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth, const ETH_DMAConfigTypeDef *dmaconf)
{
 8001618:	b580      	push	{r7, lr}
 800161a:	b084      	sub	sp, #16
 800161c:	af00      	add	r7, sp, #0
 800161e:	6078      	str	r0, [r7, #4]
 8001620:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800162a:	699b      	ldr	r3, [r3, #24]
 800162c:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 800162e:	68fa      	ldr	r2, [r7, #12]
 8001630:	4b3d      	ldr	r3, [pc, #244]	@ (8001728 <ETH_SetDMAConfig+0x110>)
 8001632:	4013      	ands	r3, r2
 8001634:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001636:	683b      	ldr	r3, [r7, #0]
 8001638:	7b1b      	ldrb	r3, [r3, #12]
 800163a:	2b00      	cmp	r3, #0
 800163c:	d102      	bne.n	8001644 <ETH_SetDMAConfig+0x2c>
 800163e:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8001642:	e000      	b.n	8001646 <ETH_SetDMAConfig+0x2e>
 8001644:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8001646:	683b      	ldr	r3, [r7, #0]
 8001648:	7b5b      	ldrb	r3, [r3, #13]
 800164a:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 800164c:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 800164e:	683a      	ldr	r2, [r7, #0]
 8001650:	7f52      	ldrb	r2, [r2, #29]
 8001652:	2a00      	cmp	r2, #0
 8001654:	d102      	bne.n	800165c <ETH_SetDMAConfig+0x44>
 8001656:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800165a:	e000      	b.n	800165e <ETH_SetDMAConfig+0x46>
 800165c:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 800165e:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8001660:	683b      	ldr	r3, [r7, #0]
 8001662:	7b9b      	ldrb	r3, [r3, #14]
 8001664:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8001666:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8001668:	683b      	ldr	r3, [r7, #0]
 800166a:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 800166c:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 800166e:	683b      	ldr	r3, [r7, #0]
 8001670:	7f1b      	ldrb	r3, [r3, #28]
 8001672:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8001674:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8001676:	683b      	ldr	r3, [r7, #0]
 8001678:	7f9b      	ldrb	r3, [r3, #30]
 800167a:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 800167c:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 800167e:	683b      	ldr	r3, [r7, #0]
 8001680:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8001682:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8001684:	683b      	ldr	r3, [r7, #0]
 8001686:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800168a:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 800168c:	4313      	orrs	r3, r2
 800168e:	68fa      	ldr	r2, [r7, #12]
 8001690:	4313      	orrs	r3, r2
 8001692:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800169c:	461a      	mov	r2, r3
 800169e:	68fb      	ldr	r3, [r7, #12]
 80016a0:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80016aa:	699b      	ldr	r3, [r3, #24]
 80016ac:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80016ae:	2001      	movs	r0, #1
 80016b0:	f7ff fd5e 	bl	8001170 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80016bc:	461a      	mov	r2, r3
 80016be:	68fb      	ldr	r3, [r7, #12]
 80016c0:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80016c2:	683b      	ldr	r3, [r7, #0]
 80016c4:	791b      	ldrb	r3, [r3, #4]
 80016c6:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 80016c8:	683b      	ldr	r3, [r7, #0]
 80016ca:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80016cc:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 80016ce:	683b      	ldr	r3, [r7, #0]
 80016d0:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 80016d2:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 80016d4:	683b      	ldr	r3, [r7, #0]
 80016d6:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 80016d8:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80016da:	683b      	ldr	r3, [r7, #0]
 80016dc:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80016e0:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 80016e2:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80016e4:	683b      	ldr	r3, [r7, #0]
 80016e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80016e8:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80016ea:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 80016ec:	683b      	ldr	r3, [r7, #0]
 80016ee:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80016f0:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80016f2:	687a      	ldr	r2, [r7, #4]
 80016f4:	6812      	ldr	r2, [r2, #0]
 80016f6:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80016fa:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80016fe:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800170c:	2001      	movs	r0, #1
 800170e:	f7ff fd2f 	bl	8001170 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800171a:	461a      	mov	r2, r3
 800171c:	68fb      	ldr	r3, [r7, #12]
 800171e:	6013      	str	r3, [r2, #0]
}
 8001720:	bf00      	nop
 8001722:	3710      	adds	r7, #16
 8001724:	46bd      	mov	sp, r7
 8001726:	bd80      	pop	{r7, pc}
 8001728:	f8de3f23 	.word	0xf8de3f23

0800172c <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 800172c:	b580      	push	{r7, lr}
 800172e:	b0a6      	sub	sp, #152	@ 0x98
 8001730:	af00      	add	r7, sp, #0
 8001732:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8001734:	2301      	movs	r3, #1
 8001736:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
  macDefaultConf.Jabber = ENABLE;
 800173a:	2301      	movs	r3, #1
 800173c:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8001740:	2300      	movs	r3, #0
 8001742:	63fb      	str	r3, [r7, #60]	@ 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8001744:	2300      	movs	r3, #0
 8001746:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 800174a:	2301      	movs	r3, #1
 800174c:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8001750:	2300      	movs	r3, #0
 8001752:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8001756:	2301      	movs	r3, #1
 8001758:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  macDefaultConf.ChecksumOffload = ENABLE;
 800175c:	2301      	movs	r3, #1
 800175e:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8001762:	2300      	movs	r3, #0
 8001764:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8001768:	2300      	movs	r3, #0
 800176a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 800176e:	2300      	movs	r3, #0
 8001770:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8001772:	2300      	movs	r3, #0
 8001774:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8001778:	2300      	movs	r3, #0
 800177a:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 800177c:	2300      	movs	r3, #0
 800177e:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8001782:	2300      	movs	r3, #0
 8001784:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8001788:	2300      	movs	r3, #0
 800178a:	f887 308a 	strb.w	r3, [r7, #138]	@ 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 800178e:	2300      	movs	r3, #0
 8001790:	f887 3088 	strb.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8001794:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001798:	64bb      	str	r3, [r7, #72]	@ 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 800179a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800179e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 80017a0:	2300      	movs	r3, #0
 80017a2:	f887 3089 	strb.w	r3, [r7, #137]	@ 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 80017a6:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80017aa:	4619      	mov	r1, r3
 80017ac:	6878      	ldr	r0, [r7, #4]
 80017ae:	f7ff fe7f 	bl	80014b0 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 80017b2:	2301      	movs	r3, #1
 80017b4:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 80017b6:	2301      	movs	r3, #1
 80017b8:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 80017ba:	2301      	movs	r3, #1
 80017bc:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 80017c0:	2301      	movs	r3, #1
 80017c2:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 80017c4:	2300      	movs	r3, #0
 80017c6:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 80017c8:	2300      	movs	r3, #0
 80017ca:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 80017ce:	2300      	movs	r3, #0
 80017d0:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 80017d4:	2300      	movs	r3, #0
 80017d6:	62bb      	str	r3, [r7, #40]	@ 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 80017d8:	2301      	movs	r3, #1
 80017da:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 80017de:	2301      	movs	r3, #1
 80017e0:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 80017e2:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80017e6:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 80017e8:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80017ec:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 80017ee:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80017f2:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 80017f4:	2301      	movs	r3, #1
 80017f6:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 80017fa:	2300      	movs	r3, #0
 80017fc:	633b      	str	r3, [r7, #48]	@ 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 80017fe:	2300      	movs	r3, #0
 8001800:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8001802:	f107 0308 	add.w	r3, r7, #8
 8001806:	4619      	mov	r1, r3
 8001808:	6878      	ldr	r0, [r7, #4]
 800180a:	f7ff ff05 	bl	8001618 <ETH_SetDMAConfig>
}
 800180e:	bf00      	nop
 8001810:	3798      	adds	r7, #152	@ 0x98
 8001812:	46bd      	mov	sp, r7
 8001814:	bd80      	pop	{r7, pc}
	...

08001818 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8001818:	b480      	push	{r7}
 800181a:	b087      	sub	sp, #28
 800181c:	af00      	add	r7, sp, #0
 800181e:	60f8      	str	r0, [r7, #12]
 8001820:	60b9      	str	r1, [r7, #8]
 8001822:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	3305      	adds	r3, #5
 8001828:	781b      	ldrb	r3, [r3, #0]
 800182a:	021b      	lsls	r3, r3, #8
 800182c:	687a      	ldr	r2, [r7, #4]
 800182e:	3204      	adds	r2, #4
 8001830:	7812      	ldrb	r2, [r2, #0]
 8001832:	4313      	orrs	r3, r2
 8001834:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8001836:	68ba      	ldr	r2, [r7, #8]
 8001838:	4b11      	ldr	r3, [pc, #68]	@ (8001880 <ETH_MACAddressConfig+0x68>)
 800183a:	4413      	add	r3, r2
 800183c:	461a      	mov	r2, r3
 800183e:	697b      	ldr	r3, [r7, #20]
 8001840:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	3303      	adds	r3, #3
 8001846:	781b      	ldrb	r3, [r3, #0]
 8001848:	061a      	lsls	r2, r3, #24
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	3302      	adds	r3, #2
 800184e:	781b      	ldrb	r3, [r3, #0]
 8001850:	041b      	lsls	r3, r3, #16
 8001852:	431a      	orrs	r2, r3
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	3301      	adds	r3, #1
 8001858:	781b      	ldrb	r3, [r3, #0]
 800185a:	021b      	lsls	r3, r3, #8
 800185c:	4313      	orrs	r3, r2
 800185e:	687a      	ldr	r2, [r7, #4]
 8001860:	7812      	ldrb	r2, [r2, #0]
 8001862:	4313      	orrs	r3, r2
 8001864:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8001866:	68ba      	ldr	r2, [r7, #8]
 8001868:	4b06      	ldr	r3, [pc, #24]	@ (8001884 <ETH_MACAddressConfig+0x6c>)
 800186a:	4413      	add	r3, r2
 800186c:	461a      	mov	r2, r3
 800186e:	697b      	ldr	r3, [r7, #20]
 8001870:	6013      	str	r3, [r2, #0]
}
 8001872:	bf00      	nop
 8001874:	371c      	adds	r7, #28
 8001876:	46bd      	mov	sp, r7
 8001878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187c:	4770      	bx	lr
 800187e:	bf00      	nop
 8001880:	40028040 	.word	0x40028040
 8001884:	40028044 	.word	0x40028044

08001888 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8001888:	b480      	push	{r7}
 800188a:	b085      	sub	sp, #20
 800188c:	af00      	add	r7, sp, #0
 800188e:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001890:	2300      	movs	r3, #0
 8001892:	60fb      	str	r3, [r7, #12]
 8001894:	e03e      	b.n	8001914 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	68d9      	ldr	r1, [r3, #12]
 800189a:	68fa      	ldr	r2, [r7, #12]
 800189c:	4613      	mov	r3, r2
 800189e:	009b      	lsls	r3, r3, #2
 80018a0:	4413      	add	r3, r2
 80018a2:	00db      	lsls	r3, r3, #3
 80018a4:	440b      	add	r3, r1
 80018a6:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 80018a8:	68bb      	ldr	r3, [r7, #8]
 80018aa:	2200      	movs	r2, #0
 80018ac:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 80018ae:	68bb      	ldr	r3, [r7, #8]
 80018b0:	2200      	movs	r2, #0
 80018b2:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 80018b4:	68bb      	ldr	r3, [r7, #8]
 80018b6:	2200      	movs	r2, #0
 80018b8:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 80018ba:	68bb      	ldr	r3, [r7, #8]
 80018bc:	2200      	movs	r2, #0
 80018be:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 80018c0:	68b9      	ldr	r1, [r7, #8]
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	68fa      	ldr	r2, [r7, #12]
 80018c6:	3206      	adds	r2, #6
 80018c8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 80018cc:	68bb      	ldr	r3, [r7, #8]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80018d4:	68bb      	ldr	r3, [r7, #8]
 80018d6:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	2b02      	cmp	r3, #2
 80018dc:	d80c      	bhi.n	80018f8 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	68d9      	ldr	r1, [r3, #12]
 80018e2:	68fb      	ldr	r3, [r7, #12]
 80018e4:	1c5a      	adds	r2, r3, #1
 80018e6:	4613      	mov	r3, r2
 80018e8:	009b      	lsls	r3, r3, #2
 80018ea:	4413      	add	r3, r2
 80018ec:	00db      	lsls	r3, r3, #3
 80018ee:	440b      	add	r3, r1
 80018f0:	461a      	mov	r2, r3
 80018f2:	68bb      	ldr	r3, [r7, #8]
 80018f4:	60da      	str	r2, [r3, #12]
 80018f6:	e004      	b.n	8001902 <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	68db      	ldr	r3, [r3, #12]
 80018fc:	461a      	mov	r2, r3
 80018fe:	68bb      	ldr	r3, [r7, #8]
 8001900:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8001902:	68bb      	ldr	r3, [r7, #8]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	f443 0240 	orr.w	r2, r3, #12582912	@ 0xc00000
 800190a:	68bb      	ldr	r3, [r7, #8]
 800190c:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800190e:	68fb      	ldr	r3, [r7, #12]
 8001910:	3301      	adds	r3, #1
 8001912:	60fb      	str	r3, [r7, #12]
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	2b03      	cmp	r3, #3
 8001918:	d9bd      	bls.n	8001896 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	2200      	movs	r2, #0
 800191e:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	68da      	ldr	r2, [r3, #12]
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800192c:	611a      	str	r2, [r3, #16]
}
 800192e:	bf00      	nop
 8001930:	3714      	adds	r7, #20
 8001932:	46bd      	mov	sp, r7
 8001934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001938:	4770      	bx	lr

0800193a <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 800193a:	b480      	push	{r7}
 800193c:	b085      	sub	sp, #20
 800193e:	af00      	add	r7, sp, #0
 8001940:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001942:	2300      	movs	r3, #0
 8001944:	60fb      	str	r3, [r7, #12]
 8001946:	e048      	b.n	80019da <ETH_DMARxDescListInit+0xa0>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	6919      	ldr	r1, [r3, #16]
 800194c:	68fa      	ldr	r2, [r7, #12]
 800194e:	4613      	mov	r3, r2
 8001950:	009b      	lsls	r3, r3, #2
 8001952:	4413      	add	r3, r2
 8001954:	00db      	lsls	r3, r3, #3
 8001956:	440b      	add	r3, r1
 8001958:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 800195a:	68bb      	ldr	r3, [r7, #8]
 800195c:	2200      	movs	r2, #0
 800195e:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 8001960:	68bb      	ldr	r3, [r7, #8]
 8001962:	2200      	movs	r2, #0
 8001964:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 8001966:	68bb      	ldr	r3, [r7, #8]
 8001968:	2200      	movs	r2, #0
 800196a:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 800196c:	68bb      	ldr	r3, [r7, #8]
 800196e:	2200      	movs	r2, #0
 8001970:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 8001972:	68bb      	ldr	r3, [r7, #8]
 8001974:	2200      	movs	r2, #0
 8001976:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 8001978:	68bb      	ldr	r3, [r7, #8]
 800197a:	2200      	movs	r2, #0
 800197c:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 800197e:	68bb      	ldr	r3, [r7, #8]
 8001980:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8001984:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = heth->Init.RxBuffLen | ETH_DMARXDESC_RCH;
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	695b      	ldr	r3, [r3, #20]
 800198a:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 800198e:	68bb      	ldr	r3, [r7, #8]
 8001990:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8001992:	68bb      	ldr	r3, [r7, #8]
 8001994:	685b      	ldr	r3, [r3, #4]
 8001996:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800199a:	68bb      	ldr	r3, [r7, #8]
 800199c:	605a      	str	r2, [r3, #4]
    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 800199e:	68b9      	ldr	r1, [r7, #8]
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	68fa      	ldr	r2, [r7, #12]
 80019a4:	3212      	adds	r2, #18
 80019a6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	2b02      	cmp	r3, #2
 80019ae:	d80c      	bhi.n	80019ca <ETH_DMARxDescListInit+0x90>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	6919      	ldr	r1, [r3, #16]
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	1c5a      	adds	r2, r3, #1
 80019b8:	4613      	mov	r3, r2
 80019ba:	009b      	lsls	r3, r3, #2
 80019bc:	4413      	add	r3, r2
 80019be:	00db      	lsls	r3, r3, #3
 80019c0:	440b      	add	r3, r1
 80019c2:	461a      	mov	r2, r3
 80019c4:	68bb      	ldr	r3, [r7, #8]
 80019c6:	60da      	str	r2, [r3, #12]
 80019c8:	e004      	b.n	80019d4 <ETH_DMARxDescListInit+0x9a>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	691b      	ldr	r3, [r3, #16]
 80019ce:	461a      	mov	r2, r3
 80019d0:	68bb      	ldr	r3, [r7, #8]
 80019d2:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	3301      	adds	r3, #1
 80019d8:	60fb      	str	r3, [r7, #12]
 80019da:	68fb      	ldr	r3, [r7, #12]
 80019dc:	2b03      	cmp	r3, #3
 80019de:	d9b3      	bls.n	8001948 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	2200      	movs	r2, #0
 80019e4:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	2200      	movs	r2, #0
 80019ea:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	2200      	movs	r2, #0
 80019f0:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	2200      	movs	r2, #0
 80019f6:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	2200      	movs	r2, #0
 80019fc:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	691a      	ldr	r2, [r3, #16]
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001a0a:	60da      	str	r2, [r3, #12]
}
 8001a0c:	bf00      	nop
 8001a0e:	3714      	adds	r7, #20
 8001a10:	46bd      	mov	sp, r7
 8001a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a16:	4770      	bx	lr

08001a18 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a18:	b480      	push	{r7}
 8001a1a:	b089      	sub	sp, #36	@ 0x24
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	6078      	str	r0, [r7, #4]
 8001a20:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001a22:	2300      	movs	r3, #0
 8001a24:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8001a26:	2300      	movs	r3, #0
 8001a28:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8001a2e:	2300      	movs	r3, #0
 8001a30:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 8001a32:	2300      	movs	r3, #0
 8001a34:	61fb      	str	r3, [r7, #28]
 8001a36:	e175      	b.n	8001d24 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001a38:	2201      	movs	r2, #1
 8001a3a:	69fb      	ldr	r3, [r7, #28]
 8001a3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a40:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001a42:	683b      	ldr	r3, [r7, #0]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	697a      	ldr	r2, [r7, #20]
 8001a48:	4013      	ands	r3, r2
 8001a4a:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 8001a4c:	693a      	ldr	r2, [r7, #16]
 8001a4e:	697b      	ldr	r3, [r7, #20]
 8001a50:	429a      	cmp	r2, r3
 8001a52:	f040 8164 	bne.w	8001d1e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001a56:	683b      	ldr	r3, [r7, #0]
 8001a58:	685b      	ldr	r3, [r3, #4]
 8001a5a:	f003 0303 	and.w	r3, r3, #3
 8001a5e:	2b01      	cmp	r3, #1
 8001a60:	d005      	beq.n	8001a6e <HAL_GPIO_Init+0x56>
 8001a62:	683b      	ldr	r3, [r7, #0]
 8001a64:	685b      	ldr	r3, [r3, #4]
 8001a66:	f003 0303 	and.w	r3, r3, #3
 8001a6a:	2b02      	cmp	r3, #2
 8001a6c:	d130      	bne.n	8001ad0 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	689b      	ldr	r3, [r3, #8]
 8001a72:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001a74:	69fb      	ldr	r3, [r7, #28]
 8001a76:	005b      	lsls	r3, r3, #1
 8001a78:	2203      	movs	r2, #3
 8001a7a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a7e:	43db      	mvns	r3, r3
 8001a80:	69ba      	ldr	r2, [r7, #24]
 8001a82:	4013      	ands	r3, r2
 8001a84:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8001a86:	683b      	ldr	r3, [r7, #0]
 8001a88:	68da      	ldr	r2, [r3, #12]
 8001a8a:	69fb      	ldr	r3, [r7, #28]
 8001a8c:	005b      	lsls	r3, r3, #1
 8001a8e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a92:	69ba      	ldr	r2, [r7, #24]
 8001a94:	4313      	orrs	r3, r2
 8001a96:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	69ba      	ldr	r2, [r7, #24]
 8001a9c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	685b      	ldr	r3, [r3, #4]
 8001aa2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001aa4:	2201      	movs	r2, #1
 8001aa6:	69fb      	ldr	r3, [r7, #28]
 8001aa8:	fa02 f303 	lsl.w	r3, r2, r3
 8001aac:	43db      	mvns	r3, r3
 8001aae:	69ba      	ldr	r2, [r7, #24]
 8001ab0:	4013      	ands	r3, r2
 8001ab2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001ab4:	683b      	ldr	r3, [r7, #0]
 8001ab6:	685b      	ldr	r3, [r3, #4]
 8001ab8:	091b      	lsrs	r3, r3, #4
 8001aba:	f003 0201 	and.w	r2, r3, #1
 8001abe:	69fb      	ldr	r3, [r7, #28]
 8001ac0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ac4:	69ba      	ldr	r2, [r7, #24]
 8001ac6:	4313      	orrs	r3, r2
 8001ac8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	69ba      	ldr	r2, [r7, #24]
 8001ace:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001ad0:	683b      	ldr	r3, [r7, #0]
 8001ad2:	685b      	ldr	r3, [r3, #4]
 8001ad4:	f003 0303 	and.w	r3, r3, #3
 8001ad8:	2b03      	cmp	r3, #3
 8001ada:	d017      	beq.n	8001b0c <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	68db      	ldr	r3, [r3, #12]
 8001ae0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8001ae2:	69fb      	ldr	r3, [r7, #28]
 8001ae4:	005b      	lsls	r3, r3, #1
 8001ae6:	2203      	movs	r2, #3
 8001ae8:	fa02 f303 	lsl.w	r3, r2, r3
 8001aec:	43db      	mvns	r3, r3
 8001aee:	69ba      	ldr	r2, [r7, #24]
 8001af0:	4013      	ands	r3, r2
 8001af2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8001af4:	683b      	ldr	r3, [r7, #0]
 8001af6:	689a      	ldr	r2, [r3, #8]
 8001af8:	69fb      	ldr	r3, [r7, #28]
 8001afa:	005b      	lsls	r3, r3, #1
 8001afc:	fa02 f303 	lsl.w	r3, r2, r3
 8001b00:	69ba      	ldr	r2, [r7, #24]
 8001b02:	4313      	orrs	r3, r2
 8001b04:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	69ba      	ldr	r2, [r7, #24]
 8001b0a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b0c:	683b      	ldr	r3, [r7, #0]
 8001b0e:	685b      	ldr	r3, [r3, #4]
 8001b10:	f003 0303 	and.w	r3, r3, #3
 8001b14:	2b02      	cmp	r3, #2
 8001b16:	d123      	bne.n	8001b60 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001b18:	69fb      	ldr	r3, [r7, #28]
 8001b1a:	08da      	lsrs	r2, r3, #3
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	3208      	adds	r2, #8
 8001b20:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b24:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001b26:	69fb      	ldr	r3, [r7, #28]
 8001b28:	f003 0307 	and.w	r3, r3, #7
 8001b2c:	009b      	lsls	r3, r3, #2
 8001b2e:	220f      	movs	r2, #15
 8001b30:	fa02 f303 	lsl.w	r3, r2, r3
 8001b34:	43db      	mvns	r3, r3
 8001b36:	69ba      	ldr	r2, [r7, #24]
 8001b38:	4013      	ands	r3, r2
 8001b3a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001b3c:	683b      	ldr	r3, [r7, #0]
 8001b3e:	691a      	ldr	r2, [r3, #16]
 8001b40:	69fb      	ldr	r3, [r7, #28]
 8001b42:	f003 0307 	and.w	r3, r3, #7
 8001b46:	009b      	lsls	r3, r3, #2
 8001b48:	fa02 f303 	lsl.w	r3, r2, r3
 8001b4c:	69ba      	ldr	r2, [r7, #24]
 8001b4e:	4313      	orrs	r3, r2
 8001b50:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8001b52:	69fb      	ldr	r3, [r7, #28]
 8001b54:	08da      	lsrs	r2, r3, #3
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	3208      	adds	r2, #8
 8001b5a:	69b9      	ldr	r1, [r7, #24]
 8001b5c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001b66:	69fb      	ldr	r3, [r7, #28]
 8001b68:	005b      	lsls	r3, r3, #1
 8001b6a:	2203      	movs	r2, #3
 8001b6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b70:	43db      	mvns	r3, r3
 8001b72:	69ba      	ldr	r2, [r7, #24]
 8001b74:	4013      	ands	r3, r2
 8001b76:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001b78:	683b      	ldr	r3, [r7, #0]
 8001b7a:	685b      	ldr	r3, [r3, #4]
 8001b7c:	f003 0203 	and.w	r2, r3, #3
 8001b80:	69fb      	ldr	r3, [r7, #28]
 8001b82:	005b      	lsls	r3, r3, #1
 8001b84:	fa02 f303 	lsl.w	r3, r2, r3
 8001b88:	69ba      	ldr	r2, [r7, #24]
 8001b8a:	4313      	orrs	r3, r2
 8001b8c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	69ba      	ldr	r2, [r7, #24]
 8001b92:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001b94:	683b      	ldr	r3, [r7, #0]
 8001b96:	685b      	ldr	r3, [r3, #4]
 8001b98:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	f000 80be 	beq.w	8001d1e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ba2:	4b66      	ldr	r3, [pc, #408]	@ (8001d3c <HAL_GPIO_Init+0x324>)
 8001ba4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ba6:	4a65      	ldr	r2, [pc, #404]	@ (8001d3c <HAL_GPIO_Init+0x324>)
 8001ba8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001bac:	6453      	str	r3, [r2, #68]	@ 0x44
 8001bae:	4b63      	ldr	r3, [pc, #396]	@ (8001d3c <HAL_GPIO_Init+0x324>)
 8001bb0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001bb2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001bb6:	60fb      	str	r3, [r7, #12]
 8001bb8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8001bba:	4a61      	ldr	r2, [pc, #388]	@ (8001d40 <HAL_GPIO_Init+0x328>)
 8001bbc:	69fb      	ldr	r3, [r7, #28]
 8001bbe:	089b      	lsrs	r3, r3, #2
 8001bc0:	3302      	adds	r3, #2
 8001bc2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001bc6:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001bc8:	69fb      	ldr	r3, [r7, #28]
 8001bca:	f003 0303 	and.w	r3, r3, #3
 8001bce:	009b      	lsls	r3, r3, #2
 8001bd0:	220f      	movs	r2, #15
 8001bd2:	fa02 f303 	lsl.w	r3, r2, r3
 8001bd6:	43db      	mvns	r3, r3
 8001bd8:	69ba      	ldr	r2, [r7, #24]
 8001bda:	4013      	ands	r3, r2
 8001bdc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	4a58      	ldr	r2, [pc, #352]	@ (8001d44 <HAL_GPIO_Init+0x32c>)
 8001be2:	4293      	cmp	r3, r2
 8001be4:	d037      	beq.n	8001c56 <HAL_GPIO_Init+0x23e>
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	4a57      	ldr	r2, [pc, #348]	@ (8001d48 <HAL_GPIO_Init+0x330>)
 8001bea:	4293      	cmp	r3, r2
 8001bec:	d031      	beq.n	8001c52 <HAL_GPIO_Init+0x23a>
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	4a56      	ldr	r2, [pc, #344]	@ (8001d4c <HAL_GPIO_Init+0x334>)
 8001bf2:	4293      	cmp	r3, r2
 8001bf4:	d02b      	beq.n	8001c4e <HAL_GPIO_Init+0x236>
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	4a55      	ldr	r2, [pc, #340]	@ (8001d50 <HAL_GPIO_Init+0x338>)
 8001bfa:	4293      	cmp	r3, r2
 8001bfc:	d025      	beq.n	8001c4a <HAL_GPIO_Init+0x232>
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	4a54      	ldr	r2, [pc, #336]	@ (8001d54 <HAL_GPIO_Init+0x33c>)
 8001c02:	4293      	cmp	r3, r2
 8001c04:	d01f      	beq.n	8001c46 <HAL_GPIO_Init+0x22e>
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	4a53      	ldr	r2, [pc, #332]	@ (8001d58 <HAL_GPIO_Init+0x340>)
 8001c0a:	4293      	cmp	r3, r2
 8001c0c:	d019      	beq.n	8001c42 <HAL_GPIO_Init+0x22a>
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	4a52      	ldr	r2, [pc, #328]	@ (8001d5c <HAL_GPIO_Init+0x344>)
 8001c12:	4293      	cmp	r3, r2
 8001c14:	d013      	beq.n	8001c3e <HAL_GPIO_Init+0x226>
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	4a51      	ldr	r2, [pc, #324]	@ (8001d60 <HAL_GPIO_Init+0x348>)
 8001c1a:	4293      	cmp	r3, r2
 8001c1c:	d00d      	beq.n	8001c3a <HAL_GPIO_Init+0x222>
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	4a50      	ldr	r2, [pc, #320]	@ (8001d64 <HAL_GPIO_Init+0x34c>)
 8001c22:	4293      	cmp	r3, r2
 8001c24:	d007      	beq.n	8001c36 <HAL_GPIO_Init+0x21e>
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	4a4f      	ldr	r2, [pc, #316]	@ (8001d68 <HAL_GPIO_Init+0x350>)
 8001c2a:	4293      	cmp	r3, r2
 8001c2c:	d101      	bne.n	8001c32 <HAL_GPIO_Init+0x21a>
 8001c2e:	2309      	movs	r3, #9
 8001c30:	e012      	b.n	8001c58 <HAL_GPIO_Init+0x240>
 8001c32:	230a      	movs	r3, #10
 8001c34:	e010      	b.n	8001c58 <HAL_GPIO_Init+0x240>
 8001c36:	2308      	movs	r3, #8
 8001c38:	e00e      	b.n	8001c58 <HAL_GPIO_Init+0x240>
 8001c3a:	2307      	movs	r3, #7
 8001c3c:	e00c      	b.n	8001c58 <HAL_GPIO_Init+0x240>
 8001c3e:	2306      	movs	r3, #6
 8001c40:	e00a      	b.n	8001c58 <HAL_GPIO_Init+0x240>
 8001c42:	2305      	movs	r3, #5
 8001c44:	e008      	b.n	8001c58 <HAL_GPIO_Init+0x240>
 8001c46:	2304      	movs	r3, #4
 8001c48:	e006      	b.n	8001c58 <HAL_GPIO_Init+0x240>
 8001c4a:	2303      	movs	r3, #3
 8001c4c:	e004      	b.n	8001c58 <HAL_GPIO_Init+0x240>
 8001c4e:	2302      	movs	r3, #2
 8001c50:	e002      	b.n	8001c58 <HAL_GPIO_Init+0x240>
 8001c52:	2301      	movs	r3, #1
 8001c54:	e000      	b.n	8001c58 <HAL_GPIO_Init+0x240>
 8001c56:	2300      	movs	r3, #0
 8001c58:	69fa      	ldr	r2, [r7, #28]
 8001c5a:	f002 0203 	and.w	r2, r2, #3
 8001c5e:	0092      	lsls	r2, r2, #2
 8001c60:	4093      	lsls	r3, r2
 8001c62:	69ba      	ldr	r2, [r7, #24]
 8001c64:	4313      	orrs	r3, r2
 8001c66:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001c68:	4935      	ldr	r1, [pc, #212]	@ (8001d40 <HAL_GPIO_Init+0x328>)
 8001c6a:	69fb      	ldr	r3, [r7, #28]
 8001c6c:	089b      	lsrs	r3, r3, #2
 8001c6e:	3302      	adds	r3, #2
 8001c70:	69ba      	ldr	r2, [r7, #24]
 8001c72:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001c76:	4b3d      	ldr	r3, [pc, #244]	@ (8001d6c <HAL_GPIO_Init+0x354>)
 8001c78:	689b      	ldr	r3, [r3, #8]
 8001c7a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c7c:	693b      	ldr	r3, [r7, #16]
 8001c7e:	43db      	mvns	r3, r3
 8001c80:	69ba      	ldr	r2, [r7, #24]
 8001c82:	4013      	ands	r3, r2
 8001c84:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001c86:	683b      	ldr	r3, [r7, #0]
 8001c88:	685b      	ldr	r3, [r3, #4]
 8001c8a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d003      	beq.n	8001c9a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001c92:	69ba      	ldr	r2, [r7, #24]
 8001c94:	693b      	ldr	r3, [r7, #16]
 8001c96:	4313      	orrs	r3, r2
 8001c98:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001c9a:	4a34      	ldr	r2, [pc, #208]	@ (8001d6c <HAL_GPIO_Init+0x354>)
 8001c9c:	69bb      	ldr	r3, [r7, #24]
 8001c9e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001ca0:	4b32      	ldr	r3, [pc, #200]	@ (8001d6c <HAL_GPIO_Init+0x354>)
 8001ca2:	68db      	ldr	r3, [r3, #12]
 8001ca4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ca6:	693b      	ldr	r3, [r7, #16]
 8001ca8:	43db      	mvns	r3, r3
 8001caa:	69ba      	ldr	r2, [r7, #24]
 8001cac:	4013      	ands	r3, r2
 8001cae:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001cb0:	683b      	ldr	r3, [r7, #0]
 8001cb2:	685b      	ldr	r3, [r3, #4]
 8001cb4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d003      	beq.n	8001cc4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001cbc:	69ba      	ldr	r2, [r7, #24]
 8001cbe:	693b      	ldr	r3, [r7, #16]
 8001cc0:	4313      	orrs	r3, r2
 8001cc2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001cc4:	4a29      	ldr	r2, [pc, #164]	@ (8001d6c <HAL_GPIO_Init+0x354>)
 8001cc6:	69bb      	ldr	r3, [r7, #24]
 8001cc8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001cca:	4b28      	ldr	r3, [pc, #160]	@ (8001d6c <HAL_GPIO_Init+0x354>)
 8001ccc:	685b      	ldr	r3, [r3, #4]
 8001cce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001cd0:	693b      	ldr	r3, [r7, #16]
 8001cd2:	43db      	mvns	r3, r3
 8001cd4:	69ba      	ldr	r2, [r7, #24]
 8001cd6:	4013      	ands	r3, r2
 8001cd8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001cda:	683b      	ldr	r3, [r7, #0]
 8001cdc:	685b      	ldr	r3, [r3, #4]
 8001cde:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d003      	beq.n	8001cee <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001ce6:	69ba      	ldr	r2, [r7, #24]
 8001ce8:	693b      	ldr	r3, [r7, #16]
 8001cea:	4313      	orrs	r3, r2
 8001cec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001cee:	4a1f      	ldr	r2, [pc, #124]	@ (8001d6c <HAL_GPIO_Init+0x354>)
 8001cf0:	69bb      	ldr	r3, [r7, #24]
 8001cf2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001cf4:	4b1d      	ldr	r3, [pc, #116]	@ (8001d6c <HAL_GPIO_Init+0x354>)
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001cfa:	693b      	ldr	r3, [r7, #16]
 8001cfc:	43db      	mvns	r3, r3
 8001cfe:	69ba      	ldr	r2, [r7, #24]
 8001d00:	4013      	ands	r3, r2
 8001d02:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001d04:	683b      	ldr	r3, [r7, #0]
 8001d06:	685b      	ldr	r3, [r3, #4]
 8001d08:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d003      	beq.n	8001d18 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001d10:	69ba      	ldr	r2, [r7, #24]
 8001d12:	693b      	ldr	r3, [r7, #16]
 8001d14:	4313      	orrs	r3, r2
 8001d16:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001d18:	4a14      	ldr	r2, [pc, #80]	@ (8001d6c <HAL_GPIO_Init+0x354>)
 8001d1a:	69bb      	ldr	r3, [r7, #24]
 8001d1c:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 8001d1e:	69fb      	ldr	r3, [r7, #28]
 8001d20:	3301      	adds	r3, #1
 8001d22:	61fb      	str	r3, [r7, #28]
 8001d24:	69fb      	ldr	r3, [r7, #28]
 8001d26:	2b0f      	cmp	r3, #15
 8001d28:	f67f ae86 	bls.w	8001a38 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001d2c:	bf00      	nop
 8001d2e:	bf00      	nop
 8001d30:	3724      	adds	r7, #36	@ 0x24
 8001d32:	46bd      	mov	sp, r7
 8001d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d38:	4770      	bx	lr
 8001d3a:	bf00      	nop
 8001d3c:	40023800 	.word	0x40023800
 8001d40:	40013800 	.word	0x40013800
 8001d44:	40020000 	.word	0x40020000
 8001d48:	40020400 	.word	0x40020400
 8001d4c:	40020800 	.word	0x40020800
 8001d50:	40020c00 	.word	0x40020c00
 8001d54:	40021000 	.word	0x40021000
 8001d58:	40021400 	.word	0x40021400
 8001d5c:	40021800 	.word	0x40021800
 8001d60:	40021c00 	.word	0x40021c00
 8001d64:	40022000 	.word	0x40022000
 8001d68:	40022400 	.word	0x40022400
 8001d6c:	40013c00 	.word	0x40013c00

08001d70 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001d70:	b480      	push	{r7}
 8001d72:	b085      	sub	sp, #20
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	6078      	str	r0, [r7, #4]
 8001d78:	460b      	mov	r3, r1
 8001d7a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	691a      	ldr	r2, [r3, #16]
 8001d80:	887b      	ldrh	r3, [r7, #2]
 8001d82:	4013      	ands	r3, r2
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d002      	beq.n	8001d8e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001d88:	2301      	movs	r3, #1
 8001d8a:	73fb      	strb	r3, [r7, #15]
 8001d8c:	e001      	b.n	8001d92 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001d8e:	2300      	movs	r3, #0
 8001d90:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001d92:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d94:	4618      	mov	r0, r3
 8001d96:	3714      	adds	r7, #20
 8001d98:	46bd      	mov	sp, r7
 8001d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9e:	4770      	bx	lr

08001da0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001da0:	b480      	push	{r7}
 8001da2:	b083      	sub	sp, #12
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	6078      	str	r0, [r7, #4]
 8001da8:	460b      	mov	r3, r1
 8001daa:	807b      	strh	r3, [r7, #2]
 8001dac:	4613      	mov	r3, r2
 8001dae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001db0:	787b      	ldrb	r3, [r7, #1]
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d003      	beq.n	8001dbe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001db6:	887a      	ldrh	r2, [r7, #2]
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8001dbc:	e003      	b.n	8001dc6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8001dbe:	887b      	ldrh	r3, [r7, #2]
 8001dc0:	041a      	lsls	r2, r3, #16
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	619a      	str	r2, [r3, #24]
}
 8001dc6:	bf00      	nop
 8001dc8:	370c      	adds	r7, #12
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd0:	4770      	bx	lr
	...

08001dd4 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	b082      	sub	sp, #8
 8001dd8:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8001dda:	2300      	movs	r3, #0
 8001ddc:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8001dde:	4b23      	ldr	r3, [pc, #140]	@ (8001e6c <HAL_PWREx_EnableOverDrive+0x98>)
 8001de0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001de2:	4a22      	ldr	r2, [pc, #136]	@ (8001e6c <HAL_PWREx_EnableOverDrive+0x98>)
 8001de4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001de8:	6413      	str	r3, [r2, #64]	@ 0x40
 8001dea:	4b20      	ldr	r3, [pc, #128]	@ (8001e6c <HAL_PWREx_EnableOverDrive+0x98>)
 8001dec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001df2:	603b      	str	r3, [r7, #0]
 8001df4:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8001df6:	4b1e      	ldr	r3, [pc, #120]	@ (8001e70 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	4a1d      	ldr	r2, [pc, #116]	@ (8001e70 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001dfc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001e00:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001e02:	f7ff f9a9 	bl	8001158 <HAL_GetTick>
 8001e06:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001e08:	e009      	b.n	8001e1e <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001e0a:	f7ff f9a5 	bl	8001158 <HAL_GetTick>
 8001e0e:	4602      	mov	r2, r0
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	1ad3      	subs	r3, r2, r3
 8001e14:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001e18:	d901      	bls.n	8001e1e <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8001e1a:	2303      	movs	r3, #3
 8001e1c:	e022      	b.n	8001e64 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001e1e:	4b14      	ldr	r3, [pc, #80]	@ (8001e70 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001e20:	685b      	ldr	r3, [r3, #4]
 8001e22:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001e26:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001e2a:	d1ee      	bne.n	8001e0a <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8001e2c:	4b10      	ldr	r3, [pc, #64]	@ (8001e70 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	4a0f      	ldr	r2, [pc, #60]	@ (8001e70 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001e32:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001e36:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001e38:	f7ff f98e 	bl	8001158 <HAL_GetTick>
 8001e3c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001e3e:	e009      	b.n	8001e54 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001e40:	f7ff f98a 	bl	8001158 <HAL_GetTick>
 8001e44:	4602      	mov	r2, r0
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	1ad3      	subs	r3, r2, r3
 8001e4a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001e4e:	d901      	bls.n	8001e54 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8001e50:	2303      	movs	r3, #3
 8001e52:	e007      	b.n	8001e64 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001e54:	4b06      	ldr	r3, [pc, #24]	@ (8001e70 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001e56:	685b      	ldr	r3, [r3, #4]
 8001e58:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e5c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8001e60:	d1ee      	bne.n	8001e40 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8001e62:	2300      	movs	r3, #0
}
 8001e64:	4618      	mov	r0, r3
 8001e66:	3708      	adds	r7, #8
 8001e68:	46bd      	mov	sp, r7
 8001e6a:	bd80      	pop	{r7, pc}
 8001e6c:	40023800 	.word	0x40023800
 8001e70:	40007000 	.word	0x40007000

08001e74 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001e74:	b580      	push	{r7, lr}
 8001e76:	b086      	sub	sp, #24
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8001e7c:	2300      	movs	r3, #0
 8001e7e:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d101      	bne.n	8001e8a <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8001e86:	2301      	movs	r3, #1
 8001e88:	e29b      	b.n	80023c2 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	f003 0301 	and.w	r3, r3, #1
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	f000 8087 	beq.w	8001fa6 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001e98:	4b96      	ldr	r3, [pc, #600]	@ (80020f4 <HAL_RCC_OscConfig+0x280>)
 8001e9a:	689b      	ldr	r3, [r3, #8]
 8001e9c:	f003 030c 	and.w	r3, r3, #12
 8001ea0:	2b04      	cmp	r3, #4
 8001ea2:	d00c      	beq.n	8001ebe <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001ea4:	4b93      	ldr	r3, [pc, #588]	@ (80020f4 <HAL_RCC_OscConfig+0x280>)
 8001ea6:	689b      	ldr	r3, [r3, #8]
 8001ea8:	f003 030c 	and.w	r3, r3, #12
 8001eac:	2b08      	cmp	r3, #8
 8001eae:	d112      	bne.n	8001ed6 <HAL_RCC_OscConfig+0x62>
 8001eb0:	4b90      	ldr	r3, [pc, #576]	@ (80020f4 <HAL_RCC_OscConfig+0x280>)
 8001eb2:	685b      	ldr	r3, [r3, #4]
 8001eb4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001eb8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001ebc:	d10b      	bne.n	8001ed6 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ebe:	4b8d      	ldr	r3, [pc, #564]	@ (80020f4 <HAL_RCC_OscConfig+0x280>)
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d06c      	beq.n	8001fa4 <HAL_RCC_OscConfig+0x130>
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	685b      	ldr	r3, [r3, #4]
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d168      	bne.n	8001fa4 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8001ed2:	2301      	movs	r3, #1
 8001ed4:	e275      	b.n	80023c2 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	685b      	ldr	r3, [r3, #4]
 8001eda:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001ede:	d106      	bne.n	8001eee <HAL_RCC_OscConfig+0x7a>
 8001ee0:	4b84      	ldr	r3, [pc, #528]	@ (80020f4 <HAL_RCC_OscConfig+0x280>)
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	4a83      	ldr	r2, [pc, #524]	@ (80020f4 <HAL_RCC_OscConfig+0x280>)
 8001ee6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001eea:	6013      	str	r3, [r2, #0]
 8001eec:	e02e      	b.n	8001f4c <HAL_RCC_OscConfig+0xd8>
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	685b      	ldr	r3, [r3, #4]
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d10c      	bne.n	8001f10 <HAL_RCC_OscConfig+0x9c>
 8001ef6:	4b7f      	ldr	r3, [pc, #508]	@ (80020f4 <HAL_RCC_OscConfig+0x280>)
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	4a7e      	ldr	r2, [pc, #504]	@ (80020f4 <HAL_RCC_OscConfig+0x280>)
 8001efc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001f00:	6013      	str	r3, [r2, #0]
 8001f02:	4b7c      	ldr	r3, [pc, #496]	@ (80020f4 <HAL_RCC_OscConfig+0x280>)
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	4a7b      	ldr	r2, [pc, #492]	@ (80020f4 <HAL_RCC_OscConfig+0x280>)
 8001f08:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001f0c:	6013      	str	r3, [r2, #0]
 8001f0e:	e01d      	b.n	8001f4c <HAL_RCC_OscConfig+0xd8>
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	685b      	ldr	r3, [r3, #4]
 8001f14:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001f18:	d10c      	bne.n	8001f34 <HAL_RCC_OscConfig+0xc0>
 8001f1a:	4b76      	ldr	r3, [pc, #472]	@ (80020f4 <HAL_RCC_OscConfig+0x280>)
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	4a75      	ldr	r2, [pc, #468]	@ (80020f4 <HAL_RCC_OscConfig+0x280>)
 8001f20:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001f24:	6013      	str	r3, [r2, #0]
 8001f26:	4b73      	ldr	r3, [pc, #460]	@ (80020f4 <HAL_RCC_OscConfig+0x280>)
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	4a72      	ldr	r2, [pc, #456]	@ (80020f4 <HAL_RCC_OscConfig+0x280>)
 8001f2c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001f30:	6013      	str	r3, [r2, #0]
 8001f32:	e00b      	b.n	8001f4c <HAL_RCC_OscConfig+0xd8>
 8001f34:	4b6f      	ldr	r3, [pc, #444]	@ (80020f4 <HAL_RCC_OscConfig+0x280>)
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	4a6e      	ldr	r2, [pc, #440]	@ (80020f4 <HAL_RCC_OscConfig+0x280>)
 8001f3a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001f3e:	6013      	str	r3, [r2, #0]
 8001f40:	4b6c      	ldr	r3, [pc, #432]	@ (80020f4 <HAL_RCC_OscConfig+0x280>)
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	4a6b      	ldr	r2, [pc, #428]	@ (80020f4 <HAL_RCC_OscConfig+0x280>)
 8001f46:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001f4a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	685b      	ldr	r3, [r3, #4]
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d013      	beq.n	8001f7c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f54:	f7ff f900 	bl	8001158 <HAL_GetTick>
 8001f58:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f5a:	e008      	b.n	8001f6e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001f5c:	f7ff f8fc 	bl	8001158 <HAL_GetTick>
 8001f60:	4602      	mov	r2, r0
 8001f62:	693b      	ldr	r3, [r7, #16]
 8001f64:	1ad3      	subs	r3, r2, r3
 8001f66:	2b64      	cmp	r3, #100	@ 0x64
 8001f68:	d901      	bls.n	8001f6e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001f6a:	2303      	movs	r3, #3
 8001f6c:	e229      	b.n	80023c2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f6e:	4b61      	ldr	r3, [pc, #388]	@ (80020f4 <HAL_RCC_OscConfig+0x280>)
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d0f0      	beq.n	8001f5c <HAL_RCC_OscConfig+0xe8>
 8001f7a:	e014      	b.n	8001fa6 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f7c:	f7ff f8ec 	bl	8001158 <HAL_GetTick>
 8001f80:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f82:	e008      	b.n	8001f96 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001f84:	f7ff f8e8 	bl	8001158 <HAL_GetTick>
 8001f88:	4602      	mov	r2, r0
 8001f8a:	693b      	ldr	r3, [r7, #16]
 8001f8c:	1ad3      	subs	r3, r2, r3
 8001f8e:	2b64      	cmp	r3, #100	@ 0x64
 8001f90:	d901      	bls.n	8001f96 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8001f92:	2303      	movs	r3, #3
 8001f94:	e215      	b.n	80023c2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f96:	4b57      	ldr	r3, [pc, #348]	@ (80020f4 <HAL_RCC_OscConfig+0x280>)
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d1f0      	bne.n	8001f84 <HAL_RCC_OscConfig+0x110>
 8001fa2:	e000      	b.n	8001fa6 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001fa4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	f003 0302 	and.w	r3, r3, #2
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d069      	beq.n	8002086 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001fb2:	4b50      	ldr	r3, [pc, #320]	@ (80020f4 <HAL_RCC_OscConfig+0x280>)
 8001fb4:	689b      	ldr	r3, [r3, #8]
 8001fb6:	f003 030c 	and.w	r3, r3, #12
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d00b      	beq.n	8001fd6 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001fbe:	4b4d      	ldr	r3, [pc, #308]	@ (80020f4 <HAL_RCC_OscConfig+0x280>)
 8001fc0:	689b      	ldr	r3, [r3, #8]
 8001fc2:	f003 030c 	and.w	r3, r3, #12
 8001fc6:	2b08      	cmp	r3, #8
 8001fc8:	d11c      	bne.n	8002004 <HAL_RCC_OscConfig+0x190>
 8001fca:	4b4a      	ldr	r3, [pc, #296]	@ (80020f4 <HAL_RCC_OscConfig+0x280>)
 8001fcc:	685b      	ldr	r3, [r3, #4]
 8001fce:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d116      	bne.n	8002004 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001fd6:	4b47      	ldr	r3, [pc, #284]	@ (80020f4 <HAL_RCC_OscConfig+0x280>)
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	f003 0302 	and.w	r3, r3, #2
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d005      	beq.n	8001fee <HAL_RCC_OscConfig+0x17a>
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	68db      	ldr	r3, [r3, #12]
 8001fe6:	2b01      	cmp	r3, #1
 8001fe8:	d001      	beq.n	8001fee <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8001fea:	2301      	movs	r3, #1
 8001fec:	e1e9      	b.n	80023c2 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001fee:	4b41      	ldr	r3, [pc, #260]	@ (80020f4 <HAL_RCC_OscConfig+0x280>)
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	691b      	ldr	r3, [r3, #16]
 8001ffa:	00db      	lsls	r3, r3, #3
 8001ffc:	493d      	ldr	r1, [pc, #244]	@ (80020f4 <HAL_RCC_OscConfig+0x280>)
 8001ffe:	4313      	orrs	r3, r2
 8002000:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002002:	e040      	b.n	8002086 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	68db      	ldr	r3, [r3, #12]
 8002008:	2b00      	cmp	r3, #0
 800200a:	d023      	beq.n	8002054 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800200c:	4b39      	ldr	r3, [pc, #228]	@ (80020f4 <HAL_RCC_OscConfig+0x280>)
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	4a38      	ldr	r2, [pc, #224]	@ (80020f4 <HAL_RCC_OscConfig+0x280>)
 8002012:	f043 0301 	orr.w	r3, r3, #1
 8002016:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002018:	f7ff f89e 	bl	8001158 <HAL_GetTick>
 800201c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800201e:	e008      	b.n	8002032 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002020:	f7ff f89a 	bl	8001158 <HAL_GetTick>
 8002024:	4602      	mov	r2, r0
 8002026:	693b      	ldr	r3, [r7, #16]
 8002028:	1ad3      	subs	r3, r2, r3
 800202a:	2b02      	cmp	r3, #2
 800202c:	d901      	bls.n	8002032 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800202e:	2303      	movs	r3, #3
 8002030:	e1c7      	b.n	80023c2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002032:	4b30      	ldr	r3, [pc, #192]	@ (80020f4 <HAL_RCC_OscConfig+0x280>)
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	f003 0302 	and.w	r3, r3, #2
 800203a:	2b00      	cmp	r3, #0
 800203c:	d0f0      	beq.n	8002020 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800203e:	4b2d      	ldr	r3, [pc, #180]	@ (80020f4 <HAL_RCC_OscConfig+0x280>)
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	691b      	ldr	r3, [r3, #16]
 800204a:	00db      	lsls	r3, r3, #3
 800204c:	4929      	ldr	r1, [pc, #164]	@ (80020f4 <HAL_RCC_OscConfig+0x280>)
 800204e:	4313      	orrs	r3, r2
 8002050:	600b      	str	r3, [r1, #0]
 8002052:	e018      	b.n	8002086 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002054:	4b27      	ldr	r3, [pc, #156]	@ (80020f4 <HAL_RCC_OscConfig+0x280>)
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	4a26      	ldr	r2, [pc, #152]	@ (80020f4 <HAL_RCC_OscConfig+0x280>)
 800205a:	f023 0301 	bic.w	r3, r3, #1
 800205e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002060:	f7ff f87a 	bl	8001158 <HAL_GetTick>
 8002064:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002066:	e008      	b.n	800207a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002068:	f7ff f876 	bl	8001158 <HAL_GetTick>
 800206c:	4602      	mov	r2, r0
 800206e:	693b      	ldr	r3, [r7, #16]
 8002070:	1ad3      	subs	r3, r2, r3
 8002072:	2b02      	cmp	r3, #2
 8002074:	d901      	bls.n	800207a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002076:	2303      	movs	r3, #3
 8002078:	e1a3      	b.n	80023c2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800207a:	4b1e      	ldr	r3, [pc, #120]	@ (80020f4 <HAL_RCC_OscConfig+0x280>)
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	f003 0302 	and.w	r3, r3, #2
 8002082:	2b00      	cmp	r3, #0
 8002084:	d1f0      	bne.n	8002068 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	f003 0308 	and.w	r3, r3, #8
 800208e:	2b00      	cmp	r3, #0
 8002090:	d038      	beq.n	8002104 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	695b      	ldr	r3, [r3, #20]
 8002096:	2b00      	cmp	r3, #0
 8002098:	d019      	beq.n	80020ce <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800209a:	4b16      	ldr	r3, [pc, #88]	@ (80020f4 <HAL_RCC_OscConfig+0x280>)
 800209c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800209e:	4a15      	ldr	r2, [pc, #84]	@ (80020f4 <HAL_RCC_OscConfig+0x280>)
 80020a0:	f043 0301 	orr.w	r3, r3, #1
 80020a4:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020a6:	f7ff f857 	bl	8001158 <HAL_GetTick>
 80020aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80020ac:	e008      	b.n	80020c0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80020ae:	f7ff f853 	bl	8001158 <HAL_GetTick>
 80020b2:	4602      	mov	r2, r0
 80020b4:	693b      	ldr	r3, [r7, #16]
 80020b6:	1ad3      	subs	r3, r2, r3
 80020b8:	2b02      	cmp	r3, #2
 80020ba:	d901      	bls.n	80020c0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80020bc:	2303      	movs	r3, #3
 80020be:	e180      	b.n	80023c2 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80020c0:	4b0c      	ldr	r3, [pc, #48]	@ (80020f4 <HAL_RCC_OscConfig+0x280>)
 80020c2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80020c4:	f003 0302 	and.w	r3, r3, #2
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d0f0      	beq.n	80020ae <HAL_RCC_OscConfig+0x23a>
 80020cc:	e01a      	b.n	8002104 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80020ce:	4b09      	ldr	r3, [pc, #36]	@ (80020f4 <HAL_RCC_OscConfig+0x280>)
 80020d0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80020d2:	4a08      	ldr	r2, [pc, #32]	@ (80020f4 <HAL_RCC_OscConfig+0x280>)
 80020d4:	f023 0301 	bic.w	r3, r3, #1
 80020d8:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020da:	f7ff f83d 	bl	8001158 <HAL_GetTick>
 80020de:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80020e0:	e00a      	b.n	80020f8 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80020e2:	f7ff f839 	bl	8001158 <HAL_GetTick>
 80020e6:	4602      	mov	r2, r0
 80020e8:	693b      	ldr	r3, [r7, #16]
 80020ea:	1ad3      	subs	r3, r2, r3
 80020ec:	2b02      	cmp	r3, #2
 80020ee:	d903      	bls.n	80020f8 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80020f0:	2303      	movs	r3, #3
 80020f2:	e166      	b.n	80023c2 <HAL_RCC_OscConfig+0x54e>
 80020f4:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80020f8:	4b92      	ldr	r3, [pc, #584]	@ (8002344 <HAL_RCC_OscConfig+0x4d0>)
 80020fa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80020fc:	f003 0302 	and.w	r3, r3, #2
 8002100:	2b00      	cmp	r3, #0
 8002102:	d1ee      	bne.n	80020e2 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	f003 0304 	and.w	r3, r3, #4
 800210c:	2b00      	cmp	r3, #0
 800210e:	f000 80a4 	beq.w	800225a <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002112:	4b8c      	ldr	r3, [pc, #560]	@ (8002344 <HAL_RCC_OscConfig+0x4d0>)
 8002114:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002116:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800211a:	2b00      	cmp	r3, #0
 800211c:	d10d      	bne.n	800213a <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800211e:	4b89      	ldr	r3, [pc, #548]	@ (8002344 <HAL_RCC_OscConfig+0x4d0>)
 8002120:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002122:	4a88      	ldr	r2, [pc, #544]	@ (8002344 <HAL_RCC_OscConfig+0x4d0>)
 8002124:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002128:	6413      	str	r3, [r2, #64]	@ 0x40
 800212a:	4b86      	ldr	r3, [pc, #536]	@ (8002344 <HAL_RCC_OscConfig+0x4d0>)
 800212c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800212e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002132:	60bb      	str	r3, [r7, #8]
 8002134:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002136:	2301      	movs	r3, #1
 8002138:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800213a:	4b83      	ldr	r3, [pc, #524]	@ (8002348 <HAL_RCC_OscConfig+0x4d4>)
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002142:	2b00      	cmp	r3, #0
 8002144:	d118      	bne.n	8002178 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8002146:	4b80      	ldr	r3, [pc, #512]	@ (8002348 <HAL_RCC_OscConfig+0x4d4>)
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	4a7f      	ldr	r2, [pc, #508]	@ (8002348 <HAL_RCC_OscConfig+0x4d4>)
 800214c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002150:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002152:	f7ff f801 	bl	8001158 <HAL_GetTick>
 8002156:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002158:	e008      	b.n	800216c <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800215a:	f7fe fffd 	bl	8001158 <HAL_GetTick>
 800215e:	4602      	mov	r2, r0
 8002160:	693b      	ldr	r3, [r7, #16]
 8002162:	1ad3      	subs	r3, r2, r3
 8002164:	2b64      	cmp	r3, #100	@ 0x64
 8002166:	d901      	bls.n	800216c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8002168:	2303      	movs	r3, #3
 800216a:	e12a      	b.n	80023c2 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800216c:	4b76      	ldr	r3, [pc, #472]	@ (8002348 <HAL_RCC_OscConfig+0x4d4>)
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002174:	2b00      	cmp	r3, #0
 8002176:	d0f0      	beq.n	800215a <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	689b      	ldr	r3, [r3, #8]
 800217c:	2b01      	cmp	r3, #1
 800217e:	d106      	bne.n	800218e <HAL_RCC_OscConfig+0x31a>
 8002180:	4b70      	ldr	r3, [pc, #448]	@ (8002344 <HAL_RCC_OscConfig+0x4d0>)
 8002182:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002184:	4a6f      	ldr	r2, [pc, #444]	@ (8002344 <HAL_RCC_OscConfig+0x4d0>)
 8002186:	f043 0301 	orr.w	r3, r3, #1
 800218a:	6713      	str	r3, [r2, #112]	@ 0x70
 800218c:	e02d      	b.n	80021ea <HAL_RCC_OscConfig+0x376>
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	689b      	ldr	r3, [r3, #8]
 8002192:	2b00      	cmp	r3, #0
 8002194:	d10c      	bne.n	80021b0 <HAL_RCC_OscConfig+0x33c>
 8002196:	4b6b      	ldr	r3, [pc, #428]	@ (8002344 <HAL_RCC_OscConfig+0x4d0>)
 8002198:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800219a:	4a6a      	ldr	r2, [pc, #424]	@ (8002344 <HAL_RCC_OscConfig+0x4d0>)
 800219c:	f023 0301 	bic.w	r3, r3, #1
 80021a0:	6713      	str	r3, [r2, #112]	@ 0x70
 80021a2:	4b68      	ldr	r3, [pc, #416]	@ (8002344 <HAL_RCC_OscConfig+0x4d0>)
 80021a4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80021a6:	4a67      	ldr	r2, [pc, #412]	@ (8002344 <HAL_RCC_OscConfig+0x4d0>)
 80021a8:	f023 0304 	bic.w	r3, r3, #4
 80021ac:	6713      	str	r3, [r2, #112]	@ 0x70
 80021ae:	e01c      	b.n	80021ea <HAL_RCC_OscConfig+0x376>
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	689b      	ldr	r3, [r3, #8]
 80021b4:	2b05      	cmp	r3, #5
 80021b6:	d10c      	bne.n	80021d2 <HAL_RCC_OscConfig+0x35e>
 80021b8:	4b62      	ldr	r3, [pc, #392]	@ (8002344 <HAL_RCC_OscConfig+0x4d0>)
 80021ba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80021bc:	4a61      	ldr	r2, [pc, #388]	@ (8002344 <HAL_RCC_OscConfig+0x4d0>)
 80021be:	f043 0304 	orr.w	r3, r3, #4
 80021c2:	6713      	str	r3, [r2, #112]	@ 0x70
 80021c4:	4b5f      	ldr	r3, [pc, #380]	@ (8002344 <HAL_RCC_OscConfig+0x4d0>)
 80021c6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80021c8:	4a5e      	ldr	r2, [pc, #376]	@ (8002344 <HAL_RCC_OscConfig+0x4d0>)
 80021ca:	f043 0301 	orr.w	r3, r3, #1
 80021ce:	6713      	str	r3, [r2, #112]	@ 0x70
 80021d0:	e00b      	b.n	80021ea <HAL_RCC_OscConfig+0x376>
 80021d2:	4b5c      	ldr	r3, [pc, #368]	@ (8002344 <HAL_RCC_OscConfig+0x4d0>)
 80021d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80021d6:	4a5b      	ldr	r2, [pc, #364]	@ (8002344 <HAL_RCC_OscConfig+0x4d0>)
 80021d8:	f023 0301 	bic.w	r3, r3, #1
 80021dc:	6713      	str	r3, [r2, #112]	@ 0x70
 80021de:	4b59      	ldr	r3, [pc, #356]	@ (8002344 <HAL_RCC_OscConfig+0x4d0>)
 80021e0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80021e2:	4a58      	ldr	r2, [pc, #352]	@ (8002344 <HAL_RCC_OscConfig+0x4d0>)
 80021e4:	f023 0304 	bic.w	r3, r3, #4
 80021e8:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	689b      	ldr	r3, [r3, #8]
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d015      	beq.n	800221e <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021f2:	f7fe ffb1 	bl	8001158 <HAL_GetTick>
 80021f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80021f8:	e00a      	b.n	8002210 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80021fa:	f7fe ffad 	bl	8001158 <HAL_GetTick>
 80021fe:	4602      	mov	r2, r0
 8002200:	693b      	ldr	r3, [r7, #16]
 8002202:	1ad3      	subs	r3, r2, r3
 8002204:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002208:	4293      	cmp	r3, r2
 800220a:	d901      	bls.n	8002210 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 800220c:	2303      	movs	r3, #3
 800220e:	e0d8      	b.n	80023c2 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002210:	4b4c      	ldr	r3, [pc, #304]	@ (8002344 <HAL_RCC_OscConfig+0x4d0>)
 8002212:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002214:	f003 0302 	and.w	r3, r3, #2
 8002218:	2b00      	cmp	r3, #0
 800221a:	d0ee      	beq.n	80021fa <HAL_RCC_OscConfig+0x386>
 800221c:	e014      	b.n	8002248 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800221e:	f7fe ff9b 	bl	8001158 <HAL_GetTick>
 8002222:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002224:	e00a      	b.n	800223c <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002226:	f7fe ff97 	bl	8001158 <HAL_GetTick>
 800222a:	4602      	mov	r2, r0
 800222c:	693b      	ldr	r3, [r7, #16]
 800222e:	1ad3      	subs	r3, r2, r3
 8002230:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002234:	4293      	cmp	r3, r2
 8002236:	d901      	bls.n	800223c <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8002238:	2303      	movs	r3, #3
 800223a:	e0c2      	b.n	80023c2 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800223c:	4b41      	ldr	r3, [pc, #260]	@ (8002344 <HAL_RCC_OscConfig+0x4d0>)
 800223e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002240:	f003 0302 	and.w	r3, r3, #2
 8002244:	2b00      	cmp	r3, #0
 8002246:	d1ee      	bne.n	8002226 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002248:	7dfb      	ldrb	r3, [r7, #23]
 800224a:	2b01      	cmp	r3, #1
 800224c:	d105      	bne.n	800225a <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800224e:	4b3d      	ldr	r3, [pc, #244]	@ (8002344 <HAL_RCC_OscConfig+0x4d0>)
 8002250:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002252:	4a3c      	ldr	r2, [pc, #240]	@ (8002344 <HAL_RCC_OscConfig+0x4d0>)
 8002254:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002258:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	699b      	ldr	r3, [r3, #24]
 800225e:	2b00      	cmp	r3, #0
 8002260:	f000 80ae 	beq.w	80023c0 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002264:	4b37      	ldr	r3, [pc, #220]	@ (8002344 <HAL_RCC_OscConfig+0x4d0>)
 8002266:	689b      	ldr	r3, [r3, #8]
 8002268:	f003 030c 	and.w	r3, r3, #12
 800226c:	2b08      	cmp	r3, #8
 800226e:	d06d      	beq.n	800234c <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	699b      	ldr	r3, [r3, #24]
 8002274:	2b02      	cmp	r3, #2
 8002276:	d14b      	bne.n	8002310 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002278:	4b32      	ldr	r3, [pc, #200]	@ (8002344 <HAL_RCC_OscConfig+0x4d0>)
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	4a31      	ldr	r2, [pc, #196]	@ (8002344 <HAL_RCC_OscConfig+0x4d0>)
 800227e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002282:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002284:	f7fe ff68 	bl	8001158 <HAL_GetTick>
 8002288:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800228a:	e008      	b.n	800229e <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800228c:	f7fe ff64 	bl	8001158 <HAL_GetTick>
 8002290:	4602      	mov	r2, r0
 8002292:	693b      	ldr	r3, [r7, #16]
 8002294:	1ad3      	subs	r3, r2, r3
 8002296:	2b02      	cmp	r3, #2
 8002298:	d901      	bls.n	800229e <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800229a:	2303      	movs	r3, #3
 800229c:	e091      	b.n	80023c2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800229e:	4b29      	ldr	r3, [pc, #164]	@ (8002344 <HAL_RCC_OscConfig+0x4d0>)
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d1f0      	bne.n	800228c <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	69da      	ldr	r2, [r3, #28]
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	6a1b      	ldr	r3, [r3, #32]
 80022b2:	431a      	orrs	r2, r3
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022b8:	019b      	lsls	r3, r3, #6
 80022ba:	431a      	orrs	r2, r3
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80022c0:	085b      	lsrs	r3, r3, #1
 80022c2:	3b01      	subs	r3, #1
 80022c4:	041b      	lsls	r3, r3, #16
 80022c6:	431a      	orrs	r2, r3
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80022cc:	061b      	lsls	r3, r3, #24
 80022ce:	431a      	orrs	r2, r3
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022d4:	071b      	lsls	r3, r3, #28
 80022d6:	491b      	ldr	r1, [pc, #108]	@ (8002344 <HAL_RCC_OscConfig+0x4d0>)
 80022d8:	4313      	orrs	r3, r2
 80022da:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80022dc:	4b19      	ldr	r3, [pc, #100]	@ (8002344 <HAL_RCC_OscConfig+0x4d0>)
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	4a18      	ldr	r2, [pc, #96]	@ (8002344 <HAL_RCC_OscConfig+0x4d0>)
 80022e2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80022e6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022e8:	f7fe ff36 	bl	8001158 <HAL_GetTick>
 80022ec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80022ee:	e008      	b.n	8002302 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022f0:	f7fe ff32 	bl	8001158 <HAL_GetTick>
 80022f4:	4602      	mov	r2, r0
 80022f6:	693b      	ldr	r3, [r7, #16]
 80022f8:	1ad3      	subs	r3, r2, r3
 80022fa:	2b02      	cmp	r3, #2
 80022fc:	d901      	bls.n	8002302 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 80022fe:	2303      	movs	r3, #3
 8002300:	e05f      	b.n	80023c2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002302:	4b10      	ldr	r3, [pc, #64]	@ (8002344 <HAL_RCC_OscConfig+0x4d0>)
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800230a:	2b00      	cmp	r3, #0
 800230c:	d0f0      	beq.n	80022f0 <HAL_RCC_OscConfig+0x47c>
 800230e:	e057      	b.n	80023c0 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002310:	4b0c      	ldr	r3, [pc, #48]	@ (8002344 <HAL_RCC_OscConfig+0x4d0>)
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	4a0b      	ldr	r2, [pc, #44]	@ (8002344 <HAL_RCC_OscConfig+0x4d0>)
 8002316:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800231a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800231c:	f7fe ff1c 	bl	8001158 <HAL_GetTick>
 8002320:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002322:	e008      	b.n	8002336 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002324:	f7fe ff18 	bl	8001158 <HAL_GetTick>
 8002328:	4602      	mov	r2, r0
 800232a:	693b      	ldr	r3, [r7, #16]
 800232c:	1ad3      	subs	r3, r2, r3
 800232e:	2b02      	cmp	r3, #2
 8002330:	d901      	bls.n	8002336 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8002332:	2303      	movs	r3, #3
 8002334:	e045      	b.n	80023c2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002336:	4b03      	ldr	r3, [pc, #12]	@ (8002344 <HAL_RCC_OscConfig+0x4d0>)
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800233e:	2b00      	cmp	r3, #0
 8002340:	d1f0      	bne.n	8002324 <HAL_RCC_OscConfig+0x4b0>
 8002342:	e03d      	b.n	80023c0 <HAL_RCC_OscConfig+0x54c>
 8002344:	40023800 	.word	0x40023800
 8002348:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 800234c:	4b1f      	ldr	r3, [pc, #124]	@ (80023cc <HAL_RCC_OscConfig+0x558>)
 800234e:	685b      	ldr	r3, [r3, #4]
 8002350:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	699b      	ldr	r3, [r3, #24]
 8002356:	2b01      	cmp	r3, #1
 8002358:	d030      	beq.n	80023bc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002364:	429a      	cmp	r2, r3
 8002366:	d129      	bne.n	80023bc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002372:	429a      	cmp	r2, r3
 8002374:	d122      	bne.n	80023bc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002376:	68fa      	ldr	r2, [r7, #12]
 8002378:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800237c:	4013      	ands	r3, r2
 800237e:	687a      	ldr	r2, [r7, #4]
 8002380:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002382:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002384:	4293      	cmp	r3, r2
 8002386:	d119      	bne.n	80023bc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002392:	085b      	lsrs	r3, r3, #1
 8002394:	3b01      	subs	r3, #1
 8002396:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002398:	429a      	cmp	r2, r3
 800239a:	d10f      	bne.n	80023bc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80023a6:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80023a8:	429a      	cmp	r2, r3
 80023aa:	d107      	bne.n	80023bc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023b6:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80023b8:	429a      	cmp	r2, r3
 80023ba:	d001      	beq.n	80023c0 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 80023bc:	2301      	movs	r3, #1
 80023be:	e000      	b.n	80023c2 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 80023c0:	2300      	movs	r3, #0
}
 80023c2:	4618      	mov	r0, r3
 80023c4:	3718      	adds	r7, #24
 80023c6:	46bd      	mov	sp, r7
 80023c8:	bd80      	pop	{r7, pc}
 80023ca:	bf00      	nop
 80023cc:	40023800 	.word	0x40023800

080023d0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80023d0:	b580      	push	{r7, lr}
 80023d2:	b084      	sub	sp, #16
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	6078      	str	r0, [r7, #4]
 80023d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80023da:	2300      	movs	r3, #0
 80023dc:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d101      	bne.n	80023e8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80023e4:	2301      	movs	r3, #1
 80023e6:	e0d0      	b.n	800258a <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80023e8:	4b6a      	ldr	r3, [pc, #424]	@ (8002594 <HAL_RCC_ClockConfig+0x1c4>)
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	f003 030f 	and.w	r3, r3, #15
 80023f0:	683a      	ldr	r2, [r7, #0]
 80023f2:	429a      	cmp	r2, r3
 80023f4:	d910      	bls.n	8002418 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023f6:	4b67      	ldr	r3, [pc, #412]	@ (8002594 <HAL_RCC_ClockConfig+0x1c4>)
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	f023 020f 	bic.w	r2, r3, #15
 80023fe:	4965      	ldr	r1, [pc, #404]	@ (8002594 <HAL_RCC_ClockConfig+0x1c4>)
 8002400:	683b      	ldr	r3, [r7, #0]
 8002402:	4313      	orrs	r3, r2
 8002404:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002406:	4b63      	ldr	r3, [pc, #396]	@ (8002594 <HAL_RCC_ClockConfig+0x1c4>)
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	f003 030f 	and.w	r3, r3, #15
 800240e:	683a      	ldr	r2, [r7, #0]
 8002410:	429a      	cmp	r2, r3
 8002412:	d001      	beq.n	8002418 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002414:	2301      	movs	r3, #1
 8002416:	e0b8      	b.n	800258a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	f003 0302 	and.w	r3, r3, #2
 8002420:	2b00      	cmp	r3, #0
 8002422:	d020      	beq.n	8002466 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	f003 0304 	and.w	r3, r3, #4
 800242c:	2b00      	cmp	r3, #0
 800242e:	d005      	beq.n	800243c <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002430:	4b59      	ldr	r3, [pc, #356]	@ (8002598 <HAL_RCC_ClockConfig+0x1c8>)
 8002432:	689b      	ldr	r3, [r3, #8]
 8002434:	4a58      	ldr	r2, [pc, #352]	@ (8002598 <HAL_RCC_ClockConfig+0x1c8>)
 8002436:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800243a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	f003 0308 	and.w	r3, r3, #8
 8002444:	2b00      	cmp	r3, #0
 8002446:	d005      	beq.n	8002454 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002448:	4b53      	ldr	r3, [pc, #332]	@ (8002598 <HAL_RCC_ClockConfig+0x1c8>)
 800244a:	689b      	ldr	r3, [r3, #8]
 800244c:	4a52      	ldr	r2, [pc, #328]	@ (8002598 <HAL_RCC_ClockConfig+0x1c8>)
 800244e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002452:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002454:	4b50      	ldr	r3, [pc, #320]	@ (8002598 <HAL_RCC_ClockConfig+0x1c8>)
 8002456:	689b      	ldr	r3, [r3, #8]
 8002458:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	689b      	ldr	r3, [r3, #8]
 8002460:	494d      	ldr	r1, [pc, #308]	@ (8002598 <HAL_RCC_ClockConfig+0x1c8>)
 8002462:	4313      	orrs	r3, r2
 8002464:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	f003 0301 	and.w	r3, r3, #1
 800246e:	2b00      	cmp	r3, #0
 8002470:	d040      	beq.n	80024f4 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	685b      	ldr	r3, [r3, #4]
 8002476:	2b01      	cmp	r3, #1
 8002478:	d107      	bne.n	800248a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800247a:	4b47      	ldr	r3, [pc, #284]	@ (8002598 <HAL_RCC_ClockConfig+0x1c8>)
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002482:	2b00      	cmp	r3, #0
 8002484:	d115      	bne.n	80024b2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002486:	2301      	movs	r3, #1
 8002488:	e07f      	b.n	800258a <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	685b      	ldr	r3, [r3, #4]
 800248e:	2b02      	cmp	r3, #2
 8002490:	d107      	bne.n	80024a2 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002492:	4b41      	ldr	r3, [pc, #260]	@ (8002598 <HAL_RCC_ClockConfig+0x1c8>)
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800249a:	2b00      	cmp	r3, #0
 800249c:	d109      	bne.n	80024b2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800249e:	2301      	movs	r3, #1
 80024a0:	e073      	b.n	800258a <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024a2:	4b3d      	ldr	r3, [pc, #244]	@ (8002598 <HAL_RCC_ClockConfig+0x1c8>)
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	f003 0302 	and.w	r3, r3, #2
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d101      	bne.n	80024b2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80024ae:	2301      	movs	r3, #1
 80024b0:	e06b      	b.n	800258a <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80024b2:	4b39      	ldr	r3, [pc, #228]	@ (8002598 <HAL_RCC_ClockConfig+0x1c8>)
 80024b4:	689b      	ldr	r3, [r3, #8]
 80024b6:	f023 0203 	bic.w	r2, r3, #3
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	685b      	ldr	r3, [r3, #4]
 80024be:	4936      	ldr	r1, [pc, #216]	@ (8002598 <HAL_RCC_ClockConfig+0x1c8>)
 80024c0:	4313      	orrs	r3, r2
 80024c2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80024c4:	f7fe fe48 	bl	8001158 <HAL_GetTick>
 80024c8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80024ca:	e00a      	b.n	80024e2 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80024cc:	f7fe fe44 	bl	8001158 <HAL_GetTick>
 80024d0:	4602      	mov	r2, r0
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	1ad3      	subs	r3, r2, r3
 80024d6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80024da:	4293      	cmp	r3, r2
 80024dc:	d901      	bls.n	80024e2 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80024de:	2303      	movs	r3, #3
 80024e0:	e053      	b.n	800258a <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80024e2:	4b2d      	ldr	r3, [pc, #180]	@ (8002598 <HAL_RCC_ClockConfig+0x1c8>)
 80024e4:	689b      	ldr	r3, [r3, #8]
 80024e6:	f003 020c 	and.w	r2, r3, #12
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	685b      	ldr	r3, [r3, #4]
 80024ee:	009b      	lsls	r3, r3, #2
 80024f0:	429a      	cmp	r2, r3
 80024f2:	d1eb      	bne.n	80024cc <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80024f4:	4b27      	ldr	r3, [pc, #156]	@ (8002594 <HAL_RCC_ClockConfig+0x1c4>)
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	f003 030f 	and.w	r3, r3, #15
 80024fc:	683a      	ldr	r2, [r7, #0]
 80024fe:	429a      	cmp	r2, r3
 8002500:	d210      	bcs.n	8002524 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002502:	4b24      	ldr	r3, [pc, #144]	@ (8002594 <HAL_RCC_ClockConfig+0x1c4>)
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	f023 020f 	bic.w	r2, r3, #15
 800250a:	4922      	ldr	r1, [pc, #136]	@ (8002594 <HAL_RCC_ClockConfig+0x1c4>)
 800250c:	683b      	ldr	r3, [r7, #0]
 800250e:	4313      	orrs	r3, r2
 8002510:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002512:	4b20      	ldr	r3, [pc, #128]	@ (8002594 <HAL_RCC_ClockConfig+0x1c4>)
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	f003 030f 	and.w	r3, r3, #15
 800251a:	683a      	ldr	r2, [r7, #0]
 800251c:	429a      	cmp	r2, r3
 800251e:	d001      	beq.n	8002524 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8002520:	2301      	movs	r3, #1
 8002522:	e032      	b.n	800258a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	f003 0304 	and.w	r3, r3, #4
 800252c:	2b00      	cmp	r3, #0
 800252e:	d008      	beq.n	8002542 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002530:	4b19      	ldr	r3, [pc, #100]	@ (8002598 <HAL_RCC_ClockConfig+0x1c8>)
 8002532:	689b      	ldr	r3, [r3, #8]
 8002534:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	68db      	ldr	r3, [r3, #12]
 800253c:	4916      	ldr	r1, [pc, #88]	@ (8002598 <HAL_RCC_ClockConfig+0x1c8>)
 800253e:	4313      	orrs	r3, r2
 8002540:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	f003 0308 	and.w	r3, r3, #8
 800254a:	2b00      	cmp	r3, #0
 800254c:	d009      	beq.n	8002562 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800254e:	4b12      	ldr	r3, [pc, #72]	@ (8002598 <HAL_RCC_ClockConfig+0x1c8>)
 8002550:	689b      	ldr	r3, [r3, #8]
 8002552:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	691b      	ldr	r3, [r3, #16]
 800255a:	00db      	lsls	r3, r3, #3
 800255c:	490e      	ldr	r1, [pc, #56]	@ (8002598 <HAL_RCC_ClockConfig+0x1c8>)
 800255e:	4313      	orrs	r3, r2
 8002560:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002562:	f000 f821 	bl	80025a8 <HAL_RCC_GetSysClockFreq>
 8002566:	4602      	mov	r2, r0
 8002568:	4b0b      	ldr	r3, [pc, #44]	@ (8002598 <HAL_RCC_ClockConfig+0x1c8>)
 800256a:	689b      	ldr	r3, [r3, #8]
 800256c:	091b      	lsrs	r3, r3, #4
 800256e:	f003 030f 	and.w	r3, r3, #15
 8002572:	490a      	ldr	r1, [pc, #40]	@ (800259c <HAL_RCC_ClockConfig+0x1cc>)
 8002574:	5ccb      	ldrb	r3, [r1, r3]
 8002576:	fa22 f303 	lsr.w	r3, r2, r3
 800257a:	4a09      	ldr	r2, [pc, #36]	@ (80025a0 <HAL_RCC_ClockConfig+0x1d0>)
 800257c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800257e:	4b09      	ldr	r3, [pc, #36]	@ (80025a4 <HAL_RCC_ClockConfig+0x1d4>)
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	4618      	mov	r0, r3
 8002584:	f7fe fc42 	bl	8000e0c <HAL_InitTick>

  return HAL_OK;
 8002588:	2300      	movs	r3, #0
}
 800258a:	4618      	mov	r0, r3
 800258c:	3710      	adds	r7, #16
 800258e:	46bd      	mov	sp, r7
 8002590:	bd80      	pop	{r7, pc}
 8002592:	bf00      	nop
 8002594:	40023c00 	.word	0x40023c00
 8002598:	40023800 	.word	0x40023800
 800259c:	08028334 	.word	0x08028334
 80025a0:	20000000 	.word	0x20000000
 80025a4:	20000004 	.word	0x20000004

080025a8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80025a8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80025ac:	b090      	sub	sp, #64	@ 0x40
 80025ae:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80025b0:	2300      	movs	r3, #0
 80025b2:	637b      	str	r3, [r7, #52]	@ 0x34
 80025b4:	2300      	movs	r3, #0
 80025b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80025b8:	2300      	movs	r3, #0
 80025ba:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0;
 80025bc:	2300      	movs	r3, #0
 80025be:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80025c0:	4b59      	ldr	r3, [pc, #356]	@ (8002728 <HAL_RCC_GetSysClockFreq+0x180>)
 80025c2:	689b      	ldr	r3, [r3, #8]
 80025c4:	f003 030c 	and.w	r3, r3, #12
 80025c8:	2b08      	cmp	r3, #8
 80025ca:	d00d      	beq.n	80025e8 <HAL_RCC_GetSysClockFreq+0x40>
 80025cc:	2b08      	cmp	r3, #8
 80025ce:	f200 80a1 	bhi.w	8002714 <HAL_RCC_GetSysClockFreq+0x16c>
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d002      	beq.n	80025dc <HAL_RCC_GetSysClockFreq+0x34>
 80025d6:	2b04      	cmp	r3, #4
 80025d8:	d003      	beq.n	80025e2 <HAL_RCC_GetSysClockFreq+0x3a>
 80025da:	e09b      	b.n	8002714 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80025dc:	4b53      	ldr	r3, [pc, #332]	@ (800272c <HAL_RCC_GetSysClockFreq+0x184>)
 80025de:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80025e0:	e09b      	b.n	800271a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80025e2:	4b53      	ldr	r3, [pc, #332]	@ (8002730 <HAL_RCC_GetSysClockFreq+0x188>)
 80025e4:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80025e6:	e098      	b.n	800271a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80025e8:	4b4f      	ldr	r3, [pc, #316]	@ (8002728 <HAL_RCC_GetSysClockFreq+0x180>)
 80025ea:	685b      	ldr	r3, [r3, #4]
 80025ec:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80025f0:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80025f2:	4b4d      	ldr	r3, [pc, #308]	@ (8002728 <HAL_RCC_GetSysClockFreq+0x180>)
 80025f4:	685b      	ldr	r3, [r3, #4]
 80025f6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d028      	beq.n	8002650 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80025fe:	4b4a      	ldr	r3, [pc, #296]	@ (8002728 <HAL_RCC_GetSysClockFreq+0x180>)
 8002600:	685b      	ldr	r3, [r3, #4]
 8002602:	099b      	lsrs	r3, r3, #6
 8002604:	2200      	movs	r2, #0
 8002606:	623b      	str	r3, [r7, #32]
 8002608:	627a      	str	r2, [r7, #36]	@ 0x24
 800260a:	6a3b      	ldr	r3, [r7, #32]
 800260c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002610:	2100      	movs	r1, #0
 8002612:	4b47      	ldr	r3, [pc, #284]	@ (8002730 <HAL_RCC_GetSysClockFreq+0x188>)
 8002614:	fb03 f201 	mul.w	r2, r3, r1
 8002618:	2300      	movs	r3, #0
 800261a:	fb00 f303 	mul.w	r3, r0, r3
 800261e:	4413      	add	r3, r2
 8002620:	4a43      	ldr	r2, [pc, #268]	@ (8002730 <HAL_RCC_GetSysClockFreq+0x188>)
 8002622:	fba0 1202 	umull	r1, r2, r0, r2
 8002626:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002628:	460a      	mov	r2, r1
 800262a:	62ba      	str	r2, [r7, #40]	@ 0x28
 800262c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800262e:	4413      	add	r3, r2
 8002630:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002632:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002634:	2200      	movs	r2, #0
 8002636:	61bb      	str	r3, [r7, #24]
 8002638:	61fa      	str	r2, [r7, #28]
 800263a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800263e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8002642:	f7fd fe65 	bl	8000310 <__aeabi_uldivmod>
 8002646:	4602      	mov	r2, r0
 8002648:	460b      	mov	r3, r1
 800264a:	4613      	mov	r3, r2
 800264c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800264e:	e053      	b.n	80026f8 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002650:	4b35      	ldr	r3, [pc, #212]	@ (8002728 <HAL_RCC_GetSysClockFreq+0x180>)
 8002652:	685b      	ldr	r3, [r3, #4]
 8002654:	099b      	lsrs	r3, r3, #6
 8002656:	2200      	movs	r2, #0
 8002658:	613b      	str	r3, [r7, #16]
 800265a:	617a      	str	r2, [r7, #20]
 800265c:	693b      	ldr	r3, [r7, #16]
 800265e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8002662:	f04f 0b00 	mov.w	fp, #0
 8002666:	4652      	mov	r2, sl
 8002668:	465b      	mov	r3, fp
 800266a:	f04f 0000 	mov.w	r0, #0
 800266e:	f04f 0100 	mov.w	r1, #0
 8002672:	0159      	lsls	r1, r3, #5
 8002674:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002678:	0150      	lsls	r0, r2, #5
 800267a:	4602      	mov	r2, r0
 800267c:	460b      	mov	r3, r1
 800267e:	ebb2 080a 	subs.w	r8, r2, sl
 8002682:	eb63 090b 	sbc.w	r9, r3, fp
 8002686:	f04f 0200 	mov.w	r2, #0
 800268a:	f04f 0300 	mov.w	r3, #0
 800268e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8002692:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002696:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800269a:	ebb2 0408 	subs.w	r4, r2, r8
 800269e:	eb63 0509 	sbc.w	r5, r3, r9
 80026a2:	f04f 0200 	mov.w	r2, #0
 80026a6:	f04f 0300 	mov.w	r3, #0
 80026aa:	00eb      	lsls	r3, r5, #3
 80026ac:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80026b0:	00e2      	lsls	r2, r4, #3
 80026b2:	4614      	mov	r4, r2
 80026b4:	461d      	mov	r5, r3
 80026b6:	eb14 030a 	adds.w	r3, r4, sl
 80026ba:	603b      	str	r3, [r7, #0]
 80026bc:	eb45 030b 	adc.w	r3, r5, fp
 80026c0:	607b      	str	r3, [r7, #4]
 80026c2:	f04f 0200 	mov.w	r2, #0
 80026c6:	f04f 0300 	mov.w	r3, #0
 80026ca:	e9d7 4500 	ldrd	r4, r5, [r7]
 80026ce:	4629      	mov	r1, r5
 80026d0:	028b      	lsls	r3, r1, #10
 80026d2:	4621      	mov	r1, r4
 80026d4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80026d8:	4621      	mov	r1, r4
 80026da:	028a      	lsls	r2, r1, #10
 80026dc:	4610      	mov	r0, r2
 80026de:	4619      	mov	r1, r3
 80026e0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80026e2:	2200      	movs	r2, #0
 80026e4:	60bb      	str	r3, [r7, #8]
 80026e6:	60fa      	str	r2, [r7, #12]
 80026e8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80026ec:	f7fd fe10 	bl	8000310 <__aeabi_uldivmod>
 80026f0:	4602      	mov	r2, r0
 80026f2:	460b      	mov	r3, r1
 80026f4:	4613      	mov	r3, r2
 80026f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80026f8:	4b0b      	ldr	r3, [pc, #44]	@ (8002728 <HAL_RCC_GetSysClockFreq+0x180>)
 80026fa:	685b      	ldr	r3, [r3, #4]
 80026fc:	0c1b      	lsrs	r3, r3, #16
 80026fe:	f003 0303 	and.w	r3, r3, #3
 8002702:	3301      	adds	r3, #1
 8002704:	005b      	lsls	r3, r3, #1
 8002706:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8002708:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800270a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800270c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002710:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002712:	e002      	b.n	800271a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002714:	4b05      	ldr	r3, [pc, #20]	@ (800272c <HAL_RCC_GetSysClockFreq+0x184>)
 8002716:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002718:	bf00      	nop
    }
  }
  return sysclockfreq;
 800271a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 800271c:	4618      	mov	r0, r3
 800271e:	3740      	adds	r7, #64	@ 0x40
 8002720:	46bd      	mov	sp, r7
 8002722:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002726:	bf00      	nop
 8002728:	40023800 	.word	0x40023800
 800272c:	00f42400 	.word	0x00f42400
 8002730:	017d7840 	.word	0x017d7840

08002734 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002734:	b480      	push	{r7}
 8002736:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002738:	4b03      	ldr	r3, [pc, #12]	@ (8002748 <HAL_RCC_GetHCLKFreq+0x14>)
 800273a:	681b      	ldr	r3, [r3, #0]
}
 800273c:	4618      	mov	r0, r3
 800273e:	46bd      	mov	sp, r7
 8002740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002744:	4770      	bx	lr
 8002746:	bf00      	nop
 8002748:	20000000 	.word	0x20000000

0800274c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800274c:	b580      	push	{r7, lr}
 800274e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002750:	f7ff fff0 	bl	8002734 <HAL_RCC_GetHCLKFreq>
 8002754:	4602      	mov	r2, r0
 8002756:	4b05      	ldr	r3, [pc, #20]	@ (800276c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002758:	689b      	ldr	r3, [r3, #8]
 800275a:	0a9b      	lsrs	r3, r3, #10
 800275c:	f003 0307 	and.w	r3, r3, #7
 8002760:	4903      	ldr	r1, [pc, #12]	@ (8002770 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002762:	5ccb      	ldrb	r3, [r1, r3]
 8002764:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002768:	4618      	mov	r0, r3
 800276a:	bd80      	pop	{r7, pc}
 800276c:	40023800 	.word	0x40023800
 8002770:	08028344 	.word	0x08028344

08002774 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002774:	b580      	push	{r7, lr}
 8002776:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002778:	f7ff ffdc 	bl	8002734 <HAL_RCC_GetHCLKFreq>
 800277c:	4602      	mov	r2, r0
 800277e:	4b05      	ldr	r3, [pc, #20]	@ (8002794 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002780:	689b      	ldr	r3, [r3, #8]
 8002782:	0b5b      	lsrs	r3, r3, #13
 8002784:	f003 0307 	and.w	r3, r3, #7
 8002788:	4903      	ldr	r1, [pc, #12]	@ (8002798 <HAL_RCC_GetPCLK2Freq+0x24>)
 800278a:	5ccb      	ldrb	r3, [r1, r3]
 800278c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002790:	4618      	mov	r0, r3
 8002792:	bd80      	pop	{r7, pc}
 8002794:	40023800 	.word	0x40023800
 8002798:	08028344 	.word	0x08028344

0800279c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800279c:	b480      	push	{r7}
 800279e:	b083      	sub	sp, #12
 80027a0:	af00      	add	r7, sp, #0
 80027a2:	6078      	str	r0, [r7, #4]
 80027a4:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	220f      	movs	r2, #15
 80027aa:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80027ac:	4b12      	ldr	r3, [pc, #72]	@ (80027f8 <HAL_RCC_GetClockConfig+0x5c>)
 80027ae:	689b      	ldr	r3, [r3, #8]
 80027b0:	f003 0203 	and.w	r2, r3, #3
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80027b8:	4b0f      	ldr	r3, [pc, #60]	@ (80027f8 <HAL_RCC_GetClockConfig+0x5c>)
 80027ba:	689b      	ldr	r3, [r3, #8]
 80027bc:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80027c4:	4b0c      	ldr	r3, [pc, #48]	@ (80027f8 <HAL_RCC_GetClockConfig+0x5c>)
 80027c6:	689b      	ldr	r3, [r3, #8]
 80027c8:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 80027d0:	4b09      	ldr	r3, [pc, #36]	@ (80027f8 <HAL_RCC_GetClockConfig+0x5c>)
 80027d2:	689b      	ldr	r3, [r3, #8]
 80027d4:	08db      	lsrs	r3, r3, #3
 80027d6:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80027de:	4b07      	ldr	r3, [pc, #28]	@ (80027fc <HAL_RCC_GetClockConfig+0x60>)
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	f003 020f 	and.w	r2, r3, #15
 80027e6:	683b      	ldr	r3, [r7, #0]
 80027e8:	601a      	str	r2, [r3, #0]
}
 80027ea:	bf00      	nop
 80027ec:	370c      	adds	r7, #12
 80027ee:	46bd      	mov	sp, r7
 80027f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f4:	4770      	bx	lr
 80027f6:	bf00      	nop
 80027f8:	40023800 	.word	0x40023800
 80027fc:	40023c00 	.word	0x40023c00

08002800 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002800:	b580      	push	{r7, lr}
 8002802:	b088      	sub	sp, #32
 8002804:	af00      	add	r7, sp, #0
 8002806:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8002808:	2300      	movs	r3, #0
 800280a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 800280c:	2300      	movs	r3, #0
 800280e:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8002810:	2300      	movs	r3, #0
 8002812:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8002814:	2300      	movs	r3, #0
 8002816:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8002818:	2300      	movs	r3, #0
 800281a:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	f003 0301 	and.w	r3, r3, #1
 8002824:	2b00      	cmp	r3, #0
 8002826:	d012      	beq.n	800284e <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002828:	4b69      	ldr	r3, [pc, #420]	@ (80029d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800282a:	689b      	ldr	r3, [r3, #8]
 800282c:	4a68      	ldr	r2, [pc, #416]	@ (80029d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800282e:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8002832:	6093      	str	r3, [r2, #8]
 8002834:	4b66      	ldr	r3, [pc, #408]	@ (80029d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002836:	689a      	ldr	r2, [r3, #8]
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800283c:	4964      	ldr	r1, [pc, #400]	@ (80029d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800283e:	4313      	orrs	r3, r2
 8002840:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002846:	2b00      	cmp	r3, #0
 8002848:	d101      	bne.n	800284e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800284a:	2301      	movs	r3, #1
 800284c:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002856:	2b00      	cmp	r3, #0
 8002858:	d017      	beq.n	800288a <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800285a:	4b5d      	ldr	r3, [pc, #372]	@ (80029d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800285c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002860:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002868:	4959      	ldr	r1, [pc, #356]	@ (80029d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800286a:	4313      	orrs	r3, r2
 800286c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002874:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002878:	d101      	bne.n	800287e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800287a:	2301      	movs	r3, #1
 800287c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002882:	2b00      	cmp	r3, #0
 8002884:	d101      	bne.n	800288a <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8002886:	2301      	movs	r3, #1
 8002888:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002892:	2b00      	cmp	r3, #0
 8002894:	d017      	beq.n	80028c6 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002896:	4b4e      	ldr	r3, [pc, #312]	@ (80029d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002898:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800289c:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028a4:	494a      	ldr	r1, [pc, #296]	@ (80029d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80028a6:	4313      	orrs	r3, r2
 80028a8:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028b0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80028b4:	d101      	bne.n	80028ba <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80028b6:	2301      	movs	r3, #1
 80028b8:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d101      	bne.n	80028c6 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80028c2:	2301      	movs	r3, #1
 80028c4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d001      	beq.n	80028d6 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80028d2:	2301      	movs	r3, #1
 80028d4:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	f003 0320 	and.w	r3, r3, #32
 80028de:	2b00      	cmp	r3, #0
 80028e0:	f000 808b 	beq.w	80029fa <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80028e4:	4b3a      	ldr	r3, [pc, #232]	@ (80029d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80028e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028e8:	4a39      	ldr	r2, [pc, #228]	@ (80029d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80028ea:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80028ee:	6413      	str	r3, [r2, #64]	@ 0x40
 80028f0:	4b37      	ldr	r3, [pc, #220]	@ (80029d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80028f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028f4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80028f8:	60bb      	str	r3, [r7, #8]
 80028fa:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80028fc:	4b35      	ldr	r3, [pc, #212]	@ (80029d4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	4a34      	ldr	r2, [pc, #208]	@ (80029d4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002902:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002906:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002908:	f7fe fc26 	bl	8001158 <HAL_GetTick>
 800290c:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800290e:	e008      	b.n	8002922 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002910:	f7fe fc22 	bl	8001158 <HAL_GetTick>
 8002914:	4602      	mov	r2, r0
 8002916:	697b      	ldr	r3, [r7, #20]
 8002918:	1ad3      	subs	r3, r2, r3
 800291a:	2b64      	cmp	r3, #100	@ 0x64
 800291c:	d901      	bls.n	8002922 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800291e:	2303      	movs	r3, #3
 8002920:	e38f      	b.n	8003042 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002922:	4b2c      	ldr	r3, [pc, #176]	@ (80029d4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800292a:	2b00      	cmp	r3, #0
 800292c:	d0f0      	beq.n	8002910 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800292e:	4b28      	ldr	r3, [pc, #160]	@ (80029d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002930:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002932:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002936:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002938:	693b      	ldr	r3, [r7, #16]
 800293a:	2b00      	cmp	r3, #0
 800293c:	d035      	beq.n	80029aa <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002942:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002946:	693a      	ldr	r2, [r7, #16]
 8002948:	429a      	cmp	r2, r3
 800294a:	d02e      	beq.n	80029aa <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800294c:	4b20      	ldr	r3, [pc, #128]	@ (80029d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800294e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002950:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002954:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002956:	4b1e      	ldr	r3, [pc, #120]	@ (80029d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002958:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800295a:	4a1d      	ldr	r2, [pc, #116]	@ (80029d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800295c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002960:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002962:	4b1b      	ldr	r3, [pc, #108]	@ (80029d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002964:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002966:	4a1a      	ldr	r2, [pc, #104]	@ (80029d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002968:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800296c:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800296e:	4a18      	ldr	r2, [pc, #96]	@ (80029d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002970:	693b      	ldr	r3, [r7, #16]
 8002972:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002974:	4b16      	ldr	r3, [pc, #88]	@ (80029d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002976:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002978:	f003 0301 	and.w	r3, r3, #1
 800297c:	2b01      	cmp	r3, #1
 800297e:	d114      	bne.n	80029aa <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002980:	f7fe fbea 	bl	8001158 <HAL_GetTick>
 8002984:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002986:	e00a      	b.n	800299e <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002988:	f7fe fbe6 	bl	8001158 <HAL_GetTick>
 800298c:	4602      	mov	r2, r0
 800298e:	697b      	ldr	r3, [r7, #20]
 8002990:	1ad3      	subs	r3, r2, r3
 8002992:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002996:	4293      	cmp	r3, r2
 8002998:	d901      	bls.n	800299e <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800299a:	2303      	movs	r3, #3
 800299c:	e351      	b.n	8003042 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800299e:	4b0c      	ldr	r3, [pc, #48]	@ (80029d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80029a0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80029a2:	f003 0302 	and.w	r3, r3, #2
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d0ee      	beq.n	8002988 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029ae:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80029b2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80029b6:	d111      	bne.n	80029dc <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80029b8:	4b05      	ldr	r3, [pc, #20]	@ (80029d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80029ba:	689b      	ldr	r3, [r3, #8]
 80029bc:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80029c4:	4b04      	ldr	r3, [pc, #16]	@ (80029d8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80029c6:	400b      	ands	r3, r1
 80029c8:	4901      	ldr	r1, [pc, #4]	@ (80029d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80029ca:	4313      	orrs	r3, r2
 80029cc:	608b      	str	r3, [r1, #8]
 80029ce:	e00b      	b.n	80029e8 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80029d0:	40023800 	.word	0x40023800
 80029d4:	40007000 	.word	0x40007000
 80029d8:	0ffffcff 	.word	0x0ffffcff
 80029dc:	4bac      	ldr	r3, [pc, #688]	@ (8002c90 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80029de:	689b      	ldr	r3, [r3, #8]
 80029e0:	4aab      	ldr	r2, [pc, #684]	@ (8002c90 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80029e2:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 80029e6:	6093      	str	r3, [r2, #8]
 80029e8:	4ba9      	ldr	r3, [pc, #676]	@ (8002c90 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80029ea:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029f0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80029f4:	49a6      	ldr	r1, [pc, #664]	@ (8002c90 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80029f6:	4313      	orrs	r3, r2
 80029f8:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f003 0310 	and.w	r3, r3, #16
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d010      	beq.n	8002a28 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002a06:	4ba2      	ldr	r3, [pc, #648]	@ (8002c90 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002a08:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002a0c:	4aa0      	ldr	r2, [pc, #640]	@ (8002c90 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002a0e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002a12:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8002a16:	4b9e      	ldr	r3, [pc, #632]	@ (8002c90 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002a18:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002a20:	499b      	ldr	r1, [pc, #620]	@ (8002c90 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002a22:	4313      	orrs	r3, r2
 8002a24:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d00a      	beq.n	8002a4a <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002a34:	4b96      	ldr	r3, [pc, #600]	@ (8002c90 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002a36:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002a3a:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002a42:	4993      	ldr	r1, [pc, #588]	@ (8002c90 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002a44:	4313      	orrs	r3, r2
 8002a46:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d00a      	beq.n	8002a6c <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002a56:	4b8e      	ldr	r3, [pc, #568]	@ (8002c90 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002a58:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002a5c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002a64:	498a      	ldr	r1, [pc, #552]	@ (8002c90 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002a66:	4313      	orrs	r3, r2
 8002a68:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d00a      	beq.n	8002a8e <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002a78:	4b85      	ldr	r3, [pc, #532]	@ (8002c90 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002a7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002a7e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002a86:	4982      	ldr	r1, [pc, #520]	@ (8002c90 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002a88:	4313      	orrs	r3, r2
 8002a8a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d00a      	beq.n	8002ab0 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002a9a:	4b7d      	ldr	r3, [pc, #500]	@ (8002c90 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002a9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002aa0:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002aa8:	4979      	ldr	r1, [pc, #484]	@ (8002c90 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002aaa:	4313      	orrs	r3, r2
 8002aac:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d00a      	beq.n	8002ad2 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002abc:	4b74      	ldr	r3, [pc, #464]	@ (8002c90 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002abe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002ac2:	f023 0203 	bic.w	r2, r3, #3
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002aca:	4971      	ldr	r1, [pc, #452]	@ (8002c90 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002acc:	4313      	orrs	r3, r2
 8002ace:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d00a      	beq.n	8002af4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002ade:	4b6c      	ldr	r3, [pc, #432]	@ (8002c90 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002ae0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002ae4:	f023 020c 	bic.w	r2, r3, #12
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002aec:	4968      	ldr	r1, [pc, #416]	@ (8002c90 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002aee:	4313      	orrs	r3, r2
 8002af0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d00a      	beq.n	8002b16 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002b00:	4b63      	ldr	r3, [pc, #396]	@ (8002c90 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002b02:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002b06:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002b0e:	4960      	ldr	r1, [pc, #384]	@ (8002c90 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002b10:	4313      	orrs	r3, r2
 8002b12:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d00a      	beq.n	8002b38 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002b22:	4b5b      	ldr	r3, [pc, #364]	@ (8002c90 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002b24:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002b28:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002b30:	4957      	ldr	r1, [pc, #348]	@ (8002c90 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002b32:	4313      	orrs	r3, r2
 8002b34:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d00a      	beq.n	8002b5a <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002b44:	4b52      	ldr	r3, [pc, #328]	@ (8002c90 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002b46:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002b4a:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b52:	494f      	ldr	r1, [pc, #316]	@ (8002c90 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002b54:	4313      	orrs	r3, r2
 8002b56:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d00a      	beq.n	8002b7c <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8002b66:	4b4a      	ldr	r3, [pc, #296]	@ (8002c90 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002b68:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002b6c:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b74:	4946      	ldr	r1, [pc, #280]	@ (8002c90 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002b76:	4313      	orrs	r3, r2
 8002b78:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d00a      	beq.n	8002b9e <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8002b88:	4b41      	ldr	r3, [pc, #260]	@ (8002c90 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002b8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002b8e:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b96:	493e      	ldr	r1, [pc, #248]	@ (8002c90 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002b98:	4313      	orrs	r3, r2
 8002b9a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d00a      	beq.n	8002bc0 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8002baa:	4b39      	ldr	r3, [pc, #228]	@ (8002c90 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002bac:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002bb0:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002bb8:	4935      	ldr	r1, [pc, #212]	@ (8002c90 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002bba:	4313      	orrs	r3, r2
 8002bbc:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d00a      	beq.n	8002be2 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002bcc:	4b30      	ldr	r3, [pc, #192]	@ (8002c90 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002bce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002bd2:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002bda:	492d      	ldr	r1, [pc, #180]	@ (8002c90 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002bdc:	4313      	orrs	r3, r2
 8002bde:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d011      	beq.n	8002c12 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8002bee:	4b28      	ldr	r3, [pc, #160]	@ (8002c90 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002bf0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002bf4:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002bfc:	4924      	ldr	r1, [pc, #144]	@ (8002c90 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002bfe:	4313      	orrs	r3, r2
 8002c00:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002c08:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002c0c:	d101      	bne.n	8002c12 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8002c0e:	2301      	movs	r3, #1
 8002c10:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	f003 0308 	and.w	r3, r3, #8
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d001      	beq.n	8002c22 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8002c1e:	2301      	movs	r3, #1
 8002c20:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d00a      	beq.n	8002c44 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002c2e:	4b18      	ldr	r3, [pc, #96]	@ (8002c90 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c30:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002c34:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002c3c:	4914      	ldr	r1, [pc, #80]	@ (8002c90 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c3e:	4313      	orrs	r3, r2
 8002c40:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d00b      	beq.n	8002c68 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002c50:	4b0f      	ldr	r3, [pc, #60]	@ (8002c90 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c52:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002c56:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002c60:	490b      	ldr	r1, [pc, #44]	@ (8002c90 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c62:	4313      	orrs	r3, r2
 8002c64:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d00f      	beq.n	8002c94 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8002c74:	4b06      	ldr	r3, [pc, #24]	@ (8002c90 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c76:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002c7a:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002c84:	4902      	ldr	r1, [pc, #8]	@ (8002c90 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c86:	4313      	orrs	r3, r2
 8002c88:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8002c8c:	e002      	b.n	8002c94 <HAL_RCCEx_PeriphCLKConfig+0x494>
 8002c8e:	bf00      	nop
 8002c90:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d00b      	beq.n	8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002ca0:	4b8a      	ldr	r3, [pc, #552]	@ (8002ecc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002ca2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002ca6:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002cb0:	4986      	ldr	r1, [pc, #536]	@ (8002ecc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002cb2:	4313      	orrs	r3, r2
 8002cb4:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d00b      	beq.n	8002cdc <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8002cc4:	4b81      	ldr	r3, [pc, #516]	@ (8002ecc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002cc6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002cca:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002cd4:	497d      	ldr	r1, [pc, #500]	@ (8002ecc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002cd6:	4313      	orrs	r3, r2
 8002cd8:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8002cdc:	69fb      	ldr	r3, [r7, #28]
 8002cde:	2b01      	cmp	r3, #1
 8002ce0:	d006      	beq.n	8002cf0 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	f000 80d6 	beq.w	8002e9c <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002cf0:	4b76      	ldr	r3, [pc, #472]	@ (8002ecc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	4a75      	ldr	r2, [pc, #468]	@ (8002ecc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002cf6:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8002cfa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002cfc:	f7fe fa2c 	bl	8001158 <HAL_GetTick>
 8002d00:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002d02:	e008      	b.n	8002d16 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002d04:	f7fe fa28 	bl	8001158 <HAL_GetTick>
 8002d08:	4602      	mov	r2, r0
 8002d0a:	697b      	ldr	r3, [r7, #20]
 8002d0c:	1ad3      	subs	r3, r2, r3
 8002d0e:	2b64      	cmp	r3, #100	@ 0x64
 8002d10:	d901      	bls.n	8002d16 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002d12:	2303      	movs	r3, #3
 8002d14:	e195      	b.n	8003042 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002d16:	4b6d      	ldr	r3, [pc, #436]	@ (8002ecc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d1f0      	bne.n	8002d04 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	f003 0301 	and.w	r3, r3, #1
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d021      	beq.n	8002d72 <HAL_RCCEx_PeriphCLKConfig+0x572>
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d11d      	bne.n	8002d72 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002d36:	4b65      	ldr	r3, [pc, #404]	@ (8002ecc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002d38:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002d3c:	0c1b      	lsrs	r3, r3, #16
 8002d3e:	f003 0303 	and.w	r3, r3, #3
 8002d42:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002d44:	4b61      	ldr	r3, [pc, #388]	@ (8002ecc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002d46:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002d4a:	0e1b      	lsrs	r3, r3, #24
 8002d4c:	f003 030f 	and.w	r3, r3, #15
 8002d50:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	685b      	ldr	r3, [r3, #4]
 8002d56:	019a      	lsls	r2, r3, #6
 8002d58:	693b      	ldr	r3, [r7, #16]
 8002d5a:	041b      	lsls	r3, r3, #16
 8002d5c:	431a      	orrs	r2, r3
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	061b      	lsls	r3, r3, #24
 8002d62:	431a      	orrs	r2, r3
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	689b      	ldr	r3, [r3, #8]
 8002d68:	071b      	lsls	r3, r3, #28
 8002d6a:	4958      	ldr	r1, [pc, #352]	@ (8002ecc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002d6c:	4313      	orrs	r3, r2
 8002d6e:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d004      	beq.n	8002d88 <HAL_RCCEx_PeriphCLKConfig+0x588>
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002d82:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002d86:	d00a      	beq.n	8002d9e <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d02e      	beq.n	8002df2 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d98:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002d9c:	d129      	bne.n	8002df2 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002d9e:	4b4b      	ldr	r3, [pc, #300]	@ (8002ecc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002da0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002da4:	0c1b      	lsrs	r3, r3, #16
 8002da6:	f003 0303 	and.w	r3, r3, #3
 8002daa:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002dac:	4b47      	ldr	r3, [pc, #284]	@ (8002ecc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002dae:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002db2:	0f1b      	lsrs	r3, r3, #28
 8002db4:	f003 0307 	and.w	r3, r3, #7
 8002db8:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	685b      	ldr	r3, [r3, #4]
 8002dbe:	019a      	lsls	r2, r3, #6
 8002dc0:	693b      	ldr	r3, [r7, #16]
 8002dc2:	041b      	lsls	r3, r3, #16
 8002dc4:	431a      	orrs	r2, r3
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	68db      	ldr	r3, [r3, #12]
 8002dca:	061b      	lsls	r3, r3, #24
 8002dcc:	431a      	orrs	r2, r3
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	071b      	lsls	r3, r3, #28
 8002dd2:	493e      	ldr	r1, [pc, #248]	@ (8002ecc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002dd4:	4313      	orrs	r3, r2
 8002dd6:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8002dda:	4b3c      	ldr	r3, [pc, #240]	@ (8002ecc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002ddc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002de0:	f023 021f 	bic.w	r2, r3, #31
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002de8:	3b01      	subs	r3, #1
 8002dea:	4938      	ldr	r1, [pc, #224]	@ (8002ecc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002dec:	4313      	orrs	r3, r2
 8002dee:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d01d      	beq.n	8002e3a <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002dfe:	4b33      	ldr	r3, [pc, #204]	@ (8002ecc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002e00:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002e04:	0e1b      	lsrs	r3, r3, #24
 8002e06:	f003 030f 	and.w	r3, r3, #15
 8002e0a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002e0c:	4b2f      	ldr	r3, [pc, #188]	@ (8002ecc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002e0e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002e12:	0f1b      	lsrs	r3, r3, #28
 8002e14:	f003 0307 	and.w	r3, r3, #7
 8002e18:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	685b      	ldr	r3, [r3, #4]
 8002e1e:	019a      	lsls	r2, r3, #6
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	691b      	ldr	r3, [r3, #16]
 8002e24:	041b      	lsls	r3, r3, #16
 8002e26:	431a      	orrs	r2, r3
 8002e28:	693b      	ldr	r3, [r7, #16]
 8002e2a:	061b      	lsls	r3, r3, #24
 8002e2c:	431a      	orrs	r2, r3
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	071b      	lsls	r3, r3, #28
 8002e32:	4926      	ldr	r1, [pc, #152]	@ (8002ecc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002e34:	4313      	orrs	r3, r2
 8002e36:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d011      	beq.n	8002e6a <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	685b      	ldr	r3, [r3, #4]
 8002e4a:	019a      	lsls	r2, r3, #6
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	691b      	ldr	r3, [r3, #16]
 8002e50:	041b      	lsls	r3, r3, #16
 8002e52:	431a      	orrs	r2, r3
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	68db      	ldr	r3, [r3, #12]
 8002e58:	061b      	lsls	r3, r3, #24
 8002e5a:	431a      	orrs	r2, r3
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	689b      	ldr	r3, [r3, #8]
 8002e60:	071b      	lsls	r3, r3, #28
 8002e62:	491a      	ldr	r1, [pc, #104]	@ (8002ecc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002e64:	4313      	orrs	r3, r2
 8002e66:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002e6a:	4b18      	ldr	r3, [pc, #96]	@ (8002ecc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	4a17      	ldr	r2, [pc, #92]	@ (8002ecc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002e70:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8002e74:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002e76:	f7fe f96f 	bl	8001158 <HAL_GetTick>
 8002e7a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002e7c:	e008      	b.n	8002e90 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002e7e:	f7fe f96b 	bl	8001158 <HAL_GetTick>
 8002e82:	4602      	mov	r2, r0
 8002e84:	697b      	ldr	r3, [r7, #20]
 8002e86:	1ad3      	subs	r3, r2, r3
 8002e88:	2b64      	cmp	r3, #100	@ 0x64
 8002e8a:	d901      	bls.n	8002e90 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002e8c:	2303      	movs	r3, #3
 8002e8e:	e0d8      	b.n	8003042 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002e90:	4b0e      	ldr	r3, [pc, #56]	@ (8002ecc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d0f0      	beq.n	8002e7e <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8002e9c:	69bb      	ldr	r3, [r7, #24]
 8002e9e:	2b01      	cmp	r3, #1
 8002ea0:	f040 80ce 	bne.w	8003040 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8002ea4:	4b09      	ldr	r3, [pc, #36]	@ (8002ecc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	4a08      	ldr	r2, [pc, #32]	@ (8002ecc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002eaa:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002eae:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002eb0:	f7fe f952 	bl	8001158 <HAL_GetTick>
 8002eb4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002eb6:	e00b      	b.n	8002ed0 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002eb8:	f7fe f94e 	bl	8001158 <HAL_GetTick>
 8002ebc:	4602      	mov	r2, r0
 8002ebe:	697b      	ldr	r3, [r7, #20]
 8002ec0:	1ad3      	subs	r3, r2, r3
 8002ec2:	2b64      	cmp	r3, #100	@ 0x64
 8002ec4:	d904      	bls.n	8002ed0 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002ec6:	2303      	movs	r3, #3
 8002ec8:	e0bb      	b.n	8003042 <HAL_RCCEx_PeriphCLKConfig+0x842>
 8002eca:	bf00      	nop
 8002ecc:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002ed0:	4b5e      	ldr	r3, [pc, #376]	@ (800304c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002ed8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002edc:	d0ec      	beq.n	8002eb8 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d003      	beq.n	8002ef2 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d009      	beq.n	8002f06 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d02e      	beq.n	8002f5c <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d12a      	bne.n	8002f5c <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002f06:	4b51      	ldr	r3, [pc, #324]	@ (800304c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002f08:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f0c:	0c1b      	lsrs	r3, r3, #16
 8002f0e:	f003 0303 	and.w	r3, r3, #3
 8002f12:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002f14:	4b4d      	ldr	r3, [pc, #308]	@ (800304c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002f16:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f1a:	0f1b      	lsrs	r3, r3, #28
 8002f1c:	f003 0307 	and.w	r3, r3, #7
 8002f20:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	695b      	ldr	r3, [r3, #20]
 8002f26:	019a      	lsls	r2, r3, #6
 8002f28:	693b      	ldr	r3, [r7, #16]
 8002f2a:	041b      	lsls	r3, r3, #16
 8002f2c:	431a      	orrs	r2, r3
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	699b      	ldr	r3, [r3, #24]
 8002f32:	061b      	lsls	r3, r3, #24
 8002f34:	431a      	orrs	r2, r3
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	071b      	lsls	r3, r3, #28
 8002f3a:	4944      	ldr	r1, [pc, #272]	@ (800304c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002f3c:	4313      	orrs	r3, r2
 8002f3e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8002f42:	4b42      	ldr	r3, [pc, #264]	@ (800304c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002f44:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002f48:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f50:	3b01      	subs	r3, #1
 8002f52:	021b      	lsls	r3, r3, #8
 8002f54:	493d      	ldr	r1, [pc, #244]	@ (800304c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002f56:	4313      	orrs	r3, r2
 8002f58:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d022      	beq.n	8002fae <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002f6c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002f70:	d11d      	bne.n	8002fae <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002f72:	4b36      	ldr	r3, [pc, #216]	@ (800304c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002f74:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f78:	0e1b      	lsrs	r3, r3, #24
 8002f7a:	f003 030f 	and.w	r3, r3, #15
 8002f7e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002f80:	4b32      	ldr	r3, [pc, #200]	@ (800304c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002f82:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f86:	0f1b      	lsrs	r3, r3, #28
 8002f88:	f003 0307 	and.w	r3, r3, #7
 8002f8c:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	695b      	ldr	r3, [r3, #20]
 8002f92:	019a      	lsls	r2, r3, #6
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	6a1b      	ldr	r3, [r3, #32]
 8002f98:	041b      	lsls	r3, r3, #16
 8002f9a:	431a      	orrs	r2, r3
 8002f9c:	693b      	ldr	r3, [r7, #16]
 8002f9e:	061b      	lsls	r3, r3, #24
 8002fa0:	431a      	orrs	r2, r3
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	071b      	lsls	r3, r3, #28
 8002fa6:	4929      	ldr	r1, [pc, #164]	@ (800304c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002fa8:	4313      	orrs	r3, r2
 8002faa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	f003 0308 	and.w	r3, r3, #8
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d028      	beq.n	800300c <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002fba:	4b24      	ldr	r3, [pc, #144]	@ (800304c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002fbc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002fc0:	0e1b      	lsrs	r3, r3, #24
 8002fc2:	f003 030f 	and.w	r3, r3, #15
 8002fc6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002fc8:	4b20      	ldr	r3, [pc, #128]	@ (800304c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002fca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002fce:	0c1b      	lsrs	r3, r3, #16
 8002fd0:	f003 0303 	and.w	r3, r3, #3
 8002fd4:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	695b      	ldr	r3, [r3, #20]
 8002fda:	019a      	lsls	r2, r3, #6
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	041b      	lsls	r3, r3, #16
 8002fe0:	431a      	orrs	r2, r3
 8002fe2:	693b      	ldr	r3, [r7, #16]
 8002fe4:	061b      	lsls	r3, r3, #24
 8002fe6:	431a      	orrs	r2, r3
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	69db      	ldr	r3, [r3, #28]
 8002fec:	071b      	lsls	r3, r3, #28
 8002fee:	4917      	ldr	r1, [pc, #92]	@ (800304c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002ff0:	4313      	orrs	r3, r2
 8002ff2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8002ff6:	4b15      	ldr	r3, [pc, #84]	@ (800304c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002ff8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002ffc:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003004:	4911      	ldr	r1, [pc, #68]	@ (800304c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003006:	4313      	orrs	r3, r2
 8003008:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800300c:	4b0f      	ldr	r3, [pc, #60]	@ (800304c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	4a0e      	ldr	r2, [pc, #56]	@ (800304c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003012:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003016:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003018:	f7fe f89e 	bl	8001158 <HAL_GetTick>
 800301c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800301e:	e008      	b.n	8003032 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003020:	f7fe f89a 	bl	8001158 <HAL_GetTick>
 8003024:	4602      	mov	r2, r0
 8003026:	697b      	ldr	r3, [r7, #20]
 8003028:	1ad3      	subs	r3, r2, r3
 800302a:	2b64      	cmp	r3, #100	@ 0x64
 800302c:	d901      	bls.n	8003032 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800302e:	2303      	movs	r3, #3
 8003030:	e007      	b.n	8003042 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003032:	4b06      	ldr	r3, [pc, #24]	@ (800304c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800303a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800303e:	d1ef      	bne.n	8003020 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8003040:	2300      	movs	r3, #0
}
 8003042:	4618      	mov	r0, r3
 8003044:	3720      	adds	r7, #32
 8003046:	46bd      	mov	sp, r7
 8003048:	bd80      	pop	{r7, pc}
 800304a:	bf00      	nop
 800304c:	40023800 	.word	0x40023800

08003050 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 8003050:	b580      	push	{r7, lr}
 8003052:	b082      	sub	sp, #8
 8003054:	af00      	add	r7, sp, #0
 8003056:	6078      	str	r0, [r7, #4]
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	2b00      	cmp	r3, #0
 800305c:	d101      	bne.n	8003062 <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 800305e:	2301      	movs	r3, #1
 8003060:	e01c      	b.n	800309c <HAL_RNG_Init+0x4c>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	795b      	ldrb	r3, [r3, #5]
 8003066:	b2db      	uxtb	r3, r3
 8003068:	2b00      	cmp	r3, #0
 800306a:	d105      	bne.n	8003078 <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	2200      	movs	r2, #0
 8003070:	711a      	strb	r2, [r3, #4]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 8003072:	6878      	ldr	r0, [r7, #4]
 8003074:	f7fd fe36 	bl	8000ce4 <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	2202      	movs	r2, #2
 800307c:	715a      	strb	r2, [r3, #5]


  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	681a      	ldr	r2, [r3, #0]
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	f042 0204 	orr.w	r2, r2, #4
 800308c:	601a      	str	r2, [r3, #0]

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	2201      	movs	r2, #1
 8003092:	715a      	strb	r2, [r3, #5]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	2200      	movs	r2, #0
 8003098:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return HAL_OK;
 800309a:	2300      	movs	r3, #0
}
 800309c:	4618      	mov	r0, r3
 800309e:	3708      	adds	r7, #8
 80030a0:	46bd      	mov	sp, r7
 80030a2:	bd80      	pop	{r7, pc}

080030a4 <HAL_RNG_GenerateRandomNumber>:
  * @param  random32bit pointer to generated random number variable if successful.
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_RNG_GenerateRandomNumber(RNG_HandleTypeDef *hrng, uint32_t *random32bit)
{
 80030a4:	b580      	push	{r7, lr}
 80030a6:	b084      	sub	sp, #16
 80030a8:	af00      	add	r7, sp, #0
 80030aa:	6078      	str	r0, [r7, #4]
 80030ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80030ae:	2300      	movs	r3, #0
 80030b0:	73fb      	strb	r3, [r7, #15]

  /* Process Locked */
  __HAL_LOCK(hrng);
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	791b      	ldrb	r3, [r3, #4]
 80030b6:	2b01      	cmp	r3, #1
 80030b8:	d101      	bne.n	80030be <HAL_RNG_GenerateRandomNumber+0x1a>
 80030ba:	2302      	movs	r3, #2
 80030bc:	e044      	b.n	8003148 <HAL_RNG_GenerateRandomNumber+0xa4>
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	2201      	movs	r2, #1
 80030c2:	711a      	strb	r2, [r3, #4]

  /* Check RNG peripheral state */
  if (hrng->State == HAL_RNG_STATE_READY)
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	795b      	ldrb	r3, [r3, #5]
 80030c8:	b2db      	uxtb	r3, r3
 80030ca:	2b01      	cmp	r3, #1
 80030cc:	d133      	bne.n	8003136 <HAL_RNG_GenerateRandomNumber+0x92>
  {
    /* Change RNG peripheral state */
    hrng->State = HAL_RNG_STATE_BUSY;
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	2202      	movs	r2, #2
 80030d2:	715a      	strb	r2, [r3, #5]

    /* Get tick */
    tickstart = HAL_GetTick();
 80030d4:	f7fe f840 	bl	8001158 <HAL_GetTick>
 80030d8:	60b8      	str	r0, [r7, #8]

    /* Check if data register contains valid random data */
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 80030da:	e018      	b.n	800310e <HAL_RNG_GenerateRandomNumber+0x6a>
    {
      if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 80030dc:	f7fe f83c 	bl	8001158 <HAL_GetTick>
 80030e0:	4602      	mov	r2, r0
 80030e2:	68bb      	ldr	r3, [r7, #8]
 80030e4:	1ad3      	subs	r3, r2, r3
 80030e6:	2b02      	cmp	r3, #2
 80030e8:	d911      	bls.n	800310e <HAL_RNG_GenerateRandomNumber+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	685b      	ldr	r3, [r3, #4]
 80030f0:	f003 0301 	and.w	r3, r3, #1
 80030f4:	2b01      	cmp	r3, #1
 80030f6:	d00a      	beq.n	800310e <HAL_RNG_GenerateRandomNumber+0x6a>
        {
          hrng->State = HAL_RNG_STATE_READY;
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	2201      	movs	r2, #1
 80030fc:	715a      	strb	r2, [r3, #5]
          hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	2202      	movs	r2, #2
 8003102:	609a      	str	r2, [r3, #8]
          /* Process Unlocked */
          __HAL_UNLOCK(hrng);
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	2200      	movs	r2, #0
 8003108:	711a      	strb	r2, [r3, #4]
          return HAL_ERROR;
 800310a:	2301      	movs	r3, #1
 800310c:	e01c      	b.n	8003148 <HAL_RNG_GenerateRandomNumber+0xa4>
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	685b      	ldr	r3, [r3, #4]
 8003114:	f003 0301 	and.w	r3, r3, #1
 8003118:	2b01      	cmp	r3, #1
 800311a:	d1df      	bne.n	80030dc <HAL_RNG_GenerateRandomNumber+0x38>
        }
      }
    }

    /* Get a 32bit Random number */
    hrng->RandomNumber = hrng->Instance->DR;
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	689a      	ldr	r2, [r3, #8]
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	60da      	str	r2, [r3, #12]
    *random32bit = hrng->RandomNumber;
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	68da      	ldr	r2, [r3, #12]
 800312a:	683b      	ldr	r3, [r7, #0]
 800312c:	601a      	str	r2, [r3, #0]

    hrng->State = HAL_RNG_STATE_READY;
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	2201      	movs	r2, #1
 8003132:	715a      	strb	r2, [r3, #5]
 8003134:	e004      	b.n	8003140 <HAL_RNG_GenerateRandomNumber+0x9c>
  }
  else
  {
    hrng->ErrorCode = HAL_RNG_ERROR_BUSY;
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	2204      	movs	r2, #4
 800313a:	609a      	str	r2, [r3, #8]
    status = HAL_ERROR;
 800313c:	2301      	movs	r3, #1
 800313e:	73fb      	strb	r3, [r7, #15]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrng);
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	2200      	movs	r2, #0
 8003144:	711a      	strb	r2, [r3, #4]

  return status;
 8003146:	7bfb      	ldrb	r3, [r7, #15]
}
 8003148:	4618      	mov	r0, r3
 800314a:	3710      	adds	r7, #16
 800314c:	46bd      	mov	sp, r7
 800314e:	bd80      	pop	{r7, pc}

08003150 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003150:	b580      	push	{r7, lr}
 8003152:	b082      	sub	sp, #8
 8003154:	af00      	add	r7, sp, #0
 8003156:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	2b00      	cmp	r3, #0
 800315c:	d101      	bne.n	8003162 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800315e:	2301      	movs	r3, #1
 8003160:	e049      	b.n	80031f6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003168:	b2db      	uxtb	r3, r3
 800316a:	2b00      	cmp	r3, #0
 800316c:	d106      	bne.n	800317c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	2200      	movs	r2, #0
 8003172:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003176:	6878      	ldr	r0, [r7, #4]
 8003178:	f000 f841 	bl	80031fe <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	2202      	movs	r2, #2
 8003180:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681a      	ldr	r2, [r3, #0]
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	3304      	adds	r3, #4
 800318c:	4619      	mov	r1, r3
 800318e:	4610      	mov	r0, r2
 8003190:	f000 f9e8 	bl	8003564 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	2201      	movs	r2, #1
 8003198:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	2201      	movs	r2, #1
 80031a0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	2201      	movs	r2, #1
 80031a8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	2201      	movs	r2, #1
 80031b0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	2201      	movs	r2, #1
 80031b8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	2201      	movs	r2, #1
 80031c0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	2201      	movs	r2, #1
 80031c8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	2201      	movs	r2, #1
 80031d0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	2201      	movs	r2, #1
 80031d8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	2201      	movs	r2, #1
 80031e0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	2201      	movs	r2, #1
 80031e8:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	2201      	movs	r2, #1
 80031f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80031f4:	2300      	movs	r3, #0
}
 80031f6:	4618      	mov	r0, r3
 80031f8:	3708      	adds	r7, #8
 80031fa:	46bd      	mov	sp, r7
 80031fc:	bd80      	pop	{r7, pc}

080031fe <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80031fe:	b480      	push	{r7}
 8003200:	b083      	sub	sp, #12
 8003202:	af00      	add	r7, sp, #0
 8003204:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8003206:	bf00      	nop
 8003208:	370c      	adds	r7, #12
 800320a:	46bd      	mov	sp, r7
 800320c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003210:	4770      	bx	lr
	...

08003214 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003214:	b480      	push	{r7}
 8003216:	b085      	sub	sp, #20
 8003218:	af00      	add	r7, sp, #0
 800321a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003222:	b2db      	uxtb	r3, r3
 8003224:	2b01      	cmp	r3, #1
 8003226:	d001      	beq.n	800322c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003228:	2301      	movs	r3, #1
 800322a:	e054      	b.n	80032d6 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	2202      	movs	r2, #2
 8003230:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	68da      	ldr	r2, [r3, #12]
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	f042 0201 	orr.w	r2, r2, #1
 8003242:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	4a26      	ldr	r2, [pc, #152]	@ (80032e4 <HAL_TIM_Base_Start_IT+0xd0>)
 800324a:	4293      	cmp	r3, r2
 800324c:	d022      	beq.n	8003294 <HAL_TIM_Base_Start_IT+0x80>
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003256:	d01d      	beq.n	8003294 <HAL_TIM_Base_Start_IT+0x80>
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	4a22      	ldr	r2, [pc, #136]	@ (80032e8 <HAL_TIM_Base_Start_IT+0xd4>)
 800325e:	4293      	cmp	r3, r2
 8003260:	d018      	beq.n	8003294 <HAL_TIM_Base_Start_IT+0x80>
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	4a21      	ldr	r2, [pc, #132]	@ (80032ec <HAL_TIM_Base_Start_IT+0xd8>)
 8003268:	4293      	cmp	r3, r2
 800326a:	d013      	beq.n	8003294 <HAL_TIM_Base_Start_IT+0x80>
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	4a1f      	ldr	r2, [pc, #124]	@ (80032f0 <HAL_TIM_Base_Start_IT+0xdc>)
 8003272:	4293      	cmp	r3, r2
 8003274:	d00e      	beq.n	8003294 <HAL_TIM_Base_Start_IT+0x80>
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	4a1e      	ldr	r2, [pc, #120]	@ (80032f4 <HAL_TIM_Base_Start_IT+0xe0>)
 800327c:	4293      	cmp	r3, r2
 800327e:	d009      	beq.n	8003294 <HAL_TIM_Base_Start_IT+0x80>
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	4a1c      	ldr	r2, [pc, #112]	@ (80032f8 <HAL_TIM_Base_Start_IT+0xe4>)
 8003286:	4293      	cmp	r3, r2
 8003288:	d004      	beq.n	8003294 <HAL_TIM_Base_Start_IT+0x80>
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	4a1b      	ldr	r2, [pc, #108]	@ (80032fc <HAL_TIM_Base_Start_IT+0xe8>)
 8003290:	4293      	cmp	r3, r2
 8003292:	d115      	bne.n	80032c0 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	689a      	ldr	r2, [r3, #8]
 800329a:	4b19      	ldr	r3, [pc, #100]	@ (8003300 <HAL_TIM_Base_Start_IT+0xec>)
 800329c:	4013      	ands	r3, r2
 800329e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	2b06      	cmp	r3, #6
 80032a4:	d015      	beq.n	80032d2 <HAL_TIM_Base_Start_IT+0xbe>
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80032ac:	d011      	beq.n	80032d2 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	681a      	ldr	r2, [r3, #0]
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	f042 0201 	orr.w	r2, r2, #1
 80032bc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80032be:	e008      	b.n	80032d2 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	681a      	ldr	r2, [r3, #0]
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	f042 0201 	orr.w	r2, r2, #1
 80032ce:	601a      	str	r2, [r3, #0]
 80032d0:	e000      	b.n	80032d4 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80032d2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80032d4:	2300      	movs	r3, #0
}
 80032d6:	4618      	mov	r0, r3
 80032d8:	3714      	adds	r7, #20
 80032da:	46bd      	mov	sp, r7
 80032dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e0:	4770      	bx	lr
 80032e2:	bf00      	nop
 80032e4:	40010000 	.word	0x40010000
 80032e8:	40000400 	.word	0x40000400
 80032ec:	40000800 	.word	0x40000800
 80032f0:	40000c00 	.word	0x40000c00
 80032f4:	40010400 	.word	0x40010400
 80032f8:	40014000 	.word	0x40014000
 80032fc:	40001800 	.word	0x40001800
 8003300:	00010007 	.word	0x00010007

08003304 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003304:	b580      	push	{r7, lr}
 8003306:	b084      	sub	sp, #16
 8003308:	af00      	add	r7, sp, #0
 800330a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	68db      	ldr	r3, [r3, #12]
 8003312:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	691b      	ldr	r3, [r3, #16]
 800331a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800331c:	68bb      	ldr	r3, [r7, #8]
 800331e:	f003 0302 	and.w	r3, r3, #2
 8003322:	2b00      	cmp	r3, #0
 8003324:	d020      	beq.n	8003368 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	f003 0302 	and.w	r3, r3, #2
 800332c:	2b00      	cmp	r3, #0
 800332e:	d01b      	beq.n	8003368 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	f06f 0202 	mvn.w	r2, #2
 8003338:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	2201      	movs	r2, #1
 800333e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	699b      	ldr	r3, [r3, #24]
 8003346:	f003 0303 	and.w	r3, r3, #3
 800334a:	2b00      	cmp	r3, #0
 800334c:	d003      	beq.n	8003356 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800334e:	6878      	ldr	r0, [r7, #4]
 8003350:	f000 f8e9 	bl	8003526 <HAL_TIM_IC_CaptureCallback>
 8003354:	e005      	b.n	8003362 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003356:	6878      	ldr	r0, [r7, #4]
 8003358:	f000 f8db 	bl	8003512 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800335c:	6878      	ldr	r0, [r7, #4]
 800335e:	f000 f8ec 	bl	800353a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	2200      	movs	r2, #0
 8003366:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003368:	68bb      	ldr	r3, [r7, #8]
 800336a:	f003 0304 	and.w	r3, r3, #4
 800336e:	2b00      	cmp	r3, #0
 8003370:	d020      	beq.n	80033b4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	f003 0304 	and.w	r3, r3, #4
 8003378:	2b00      	cmp	r3, #0
 800337a:	d01b      	beq.n	80033b4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	f06f 0204 	mvn.w	r2, #4
 8003384:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	2202      	movs	r2, #2
 800338a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	699b      	ldr	r3, [r3, #24]
 8003392:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003396:	2b00      	cmp	r3, #0
 8003398:	d003      	beq.n	80033a2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800339a:	6878      	ldr	r0, [r7, #4]
 800339c:	f000 f8c3 	bl	8003526 <HAL_TIM_IC_CaptureCallback>
 80033a0:	e005      	b.n	80033ae <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80033a2:	6878      	ldr	r0, [r7, #4]
 80033a4:	f000 f8b5 	bl	8003512 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80033a8:	6878      	ldr	r0, [r7, #4]
 80033aa:	f000 f8c6 	bl	800353a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	2200      	movs	r2, #0
 80033b2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80033b4:	68bb      	ldr	r3, [r7, #8]
 80033b6:	f003 0308 	and.w	r3, r3, #8
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d020      	beq.n	8003400 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	f003 0308 	and.w	r3, r3, #8
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d01b      	beq.n	8003400 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	f06f 0208 	mvn.w	r2, #8
 80033d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	2204      	movs	r2, #4
 80033d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	69db      	ldr	r3, [r3, #28]
 80033de:	f003 0303 	and.w	r3, r3, #3
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d003      	beq.n	80033ee <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80033e6:	6878      	ldr	r0, [r7, #4]
 80033e8:	f000 f89d 	bl	8003526 <HAL_TIM_IC_CaptureCallback>
 80033ec:	e005      	b.n	80033fa <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80033ee:	6878      	ldr	r0, [r7, #4]
 80033f0:	f000 f88f 	bl	8003512 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80033f4:	6878      	ldr	r0, [r7, #4]
 80033f6:	f000 f8a0 	bl	800353a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	2200      	movs	r2, #0
 80033fe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003400:	68bb      	ldr	r3, [r7, #8]
 8003402:	f003 0310 	and.w	r3, r3, #16
 8003406:	2b00      	cmp	r3, #0
 8003408:	d020      	beq.n	800344c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	f003 0310 	and.w	r3, r3, #16
 8003410:	2b00      	cmp	r3, #0
 8003412:	d01b      	beq.n	800344c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	f06f 0210 	mvn.w	r2, #16
 800341c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	2208      	movs	r2, #8
 8003422:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	69db      	ldr	r3, [r3, #28]
 800342a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800342e:	2b00      	cmp	r3, #0
 8003430:	d003      	beq.n	800343a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003432:	6878      	ldr	r0, [r7, #4]
 8003434:	f000 f877 	bl	8003526 <HAL_TIM_IC_CaptureCallback>
 8003438:	e005      	b.n	8003446 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800343a:	6878      	ldr	r0, [r7, #4]
 800343c:	f000 f869 	bl	8003512 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003440:	6878      	ldr	r0, [r7, #4]
 8003442:	f000 f87a 	bl	800353a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	2200      	movs	r2, #0
 800344a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800344c:	68bb      	ldr	r3, [r7, #8]
 800344e:	f003 0301 	and.w	r3, r3, #1
 8003452:	2b00      	cmp	r3, #0
 8003454:	d00c      	beq.n	8003470 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	f003 0301 	and.w	r3, r3, #1
 800345c:	2b00      	cmp	r3, #0
 800345e:	d007      	beq.n	8003470 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	f06f 0201 	mvn.w	r2, #1
 8003468:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800346a:	6878      	ldr	r0, [r7, #4]
 800346c:	f7fd fb3a 	bl	8000ae4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8003470:	68bb      	ldr	r3, [r7, #8]
 8003472:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003476:	2b00      	cmp	r3, #0
 8003478:	d104      	bne.n	8003484 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800347a:	68bb      	ldr	r3, [r7, #8]
 800347c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8003480:	2b00      	cmp	r3, #0
 8003482:	d00c      	beq.n	800349e <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800348a:	2b00      	cmp	r3, #0
 800348c:	d007      	beq.n	800349e <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8003496:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003498:	6878      	ldr	r0, [r7, #4]
 800349a:	f000 f913 	bl	80036c4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800349e:	68bb      	ldr	r3, [r7, #8]
 80034a0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d00c      	beq.n	80034c2 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d007      	beq.n	80034c2 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80034ba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80034bc:	6878      	ldr	r0, [r7, #4]
 80034be:	f000 f90b 	bl	80036d8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80034c2:	68bb      	ldr	r3, [r7, #8]
 80034c4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d00c      	beq.n	80034e6 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d007      	beq.n	80034e6 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80034de:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80034e0:	6878      	ldr	r0, [r7, #4]
 80034e2:	f000 f834 	bl	800354e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80034e6:	68bb      	ldr	r3, [r7, #8]
 80034e8:	f003 0320 	and.w	r3, r3, #32
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d00c      	beq.n	800350a <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	f003 0320 	and.w	r3, r3, #32
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d007      	beq.n	800350a <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	f06f 0220 	mvn.w	r2, #32
 8003502:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003504:	6878      	ldr	r0, [r7, #4]
 8003506:	f000 f8d3 	bl	80036b0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800350a:	bf00      	nop
 800350c:	3710      	adds	r7, #16
 800350e:	46bd      	mov	sp, r7
 8003510:	bd80      	pop	{r7, pc}

08003512 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003512:	b480      	push	{r7}
 8003514:	b083      	sub	sp, #12
 8003516:	af00      	add	r7, sp, #0
 8003518:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800351a:	bf00      	nop
 800351c:	370c      	adds	r7, #12
 800351e:	46bd      	mov	sp, r7
 8003520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003524:	4770      	bx	lr

08003526 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003526:	b480      	push	{r7}
 8003528:	b083      	sub	sp, #12
 800352a:	af00      	add	r7, sp, #0
 800352c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800352e:	bf00      	nop
 8003530:	370c      	adds	r7, #12
 8003532:	46bd      	mov	sp, r7
 8003534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003538:	4770      	bx	lr

0800353a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800353a:	b480      	push	{r7}
 800353c:	b083      	sub	sp, #12
 800353e:	af00      	add	r7, sp, #0
 8003540:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003542:	bf00      	nop
 8003544:	370c      	adds	r7, #12
 8003546:	46bd      	mov	sp, r7
 8003548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800354c:	4770      	bx	lr

0800354e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800354e:	b480      	push	{r7}
 8003550:	b083      	sub	sp, #12
 8003552:	af00      	add	r7, sp, #0
 8003554:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003556:	bf00      	nop
 8003558:	370c      	adds	r7, #12
 800355a:	46bd      	mov	sp, r7
 800355c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003560:	4770      	bx	lr
	...

08003564 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003564:	b480      	push	{r7}
 8003566:	b085      	sub	sp, #20
 8003568:	af00      	add	r7, sp, #0
 800356a:	6078      	str	r0, [r7, #4]
 800356c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	4a43      	ldr	r2, [pc, #268]	@ (8003684 <TIM_Base_SetConfig+0x120>)
 8003578:	4293      	cmp	r3, r2
 800357a:	d013      	beq.n	80035a4 <TIM_Base_SetConfig+0x40>
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003582:	d00f      	beq.n	80035a4 <TIM_Base_SetConfig+0x40>
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	4a40      	ldr	r2, [pc, #256]	@ (8003688 <TIM_Base_SetConfig+0x124>)
 8003588:	4293      	cmp	r3, r2
 800358a:	d00b      	beq.n	80035a4 <TIM_Base_SetConfig+0x40>
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	4a3f      	ldr	r2, [pc, #252]	@ (800368c <TIM_Base_SetConfig+0x128>)
 8003590:	4293      	cmp	r3, r2
 8003592:	d007      	beq.n	80035a4 <TIM_Base_SetConfig+0x40>
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	4a3e      	ldr	r2, [pc, #248]	@ (8003690 <TIM_Base_SetConfig+0x12c>)
 8003598:	4293      	cmp	r3, r2
 800359a:	d003      	beq.n	80035a4 <TIM_Base_SetConfig+0x40>
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	4a3d      	ldr	r2, [pc, #244]	@ (8003694 <TIM_Base_SetConfig+0x130>)
 80035a0:	4293      	cmp	r3, r2
 80035a2:	d108      	bne.n	80035b6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80035aa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80035ac:	683b      	ldr	r3, [r7, #0]
 80035ae:	685b      	ldr	r3, [r3, #4]
 80035b0:	68fa      	ldr	r2, [r7, #12]
 80035b2:	4313      	orrs	r3, r2
 80035b4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	4a32      	ldr	r2, [pc, #200]	@ (8003684 <TIM_Base_SetConfig+0x120>)
 80035ba:	4293      	cmp	r3, r2
 80035bc:	d02b      	beq.n	8003616 <TIM_Base_SetConfig+0xb2>
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80035c4:	d027      	beq.n	8003616 <TIM_Base_SetConfig+0xb2>
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	4a2f      	ldr	r2, [pc, #188]	@ (8003688 <TIM_Base_SetConfig+0x124>)
 80035ca:	4293      	cmp	r3, r2
 80035cc:	d023      	beq.n	8003616 <TIM_Base_SetConfig+0xb2>
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	4a2e      	ldr	r2, [pc, #184]	@ (800368c <TIM_Base_SetConfig+0x128>)
 80035d2:	4293      	cmp	r3, r2
 80035d4:	d01f      	beq.n	8003616 <TIM_Base_SetConfig+0xb2>
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	4a2d      	ldr	r2, [pc, #180]	@ (8003690 <TIM_Base_SetConfig+0x12c>)
 80035da:	4293      	cmp	r3, r2
 80035dc:	d01b      	beq.n	8003616 <TIM_Base_SetConfig+0xb2>
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	4a2c      	ldr	r2, [pc, #176]	@ (8003694 <TIM_Base_SetConfig+0x130>)
 80035e2:	4293      	cmp	r3, r2
 80035e4:	d017      	beq.n	8003616 <TIM_Base_SetConfig+0xb2>
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	4a2b      	ldr	r2, [pc, #172]	@ (8003698 <TIM_Base_SetConfig+0x134>)
 80035ea:	4293      	cmp	r3, r2
 80035ec:	d013      	beq.n	8003616 <TIM_Base_SetConfig+0xb2>
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	4a2a      	ldr	r2, [pc, #168]	@ (800369c <TIM_Base_SetConfig+0x138>)
 80035f2:	4293      	cmp	r3, r2
 80035f4:	d00f      	beq.n	8003616 <TIM_Base_SetConfig+0xb2>
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	4a29      	ldr	r2, [pc, #164]	@ (80036a0 <TIM_Base_SetConfig+0x13c>)
 80035fa:	4293      	cmp	r3, r2
 80035fc:	d00b      	beq.n	8003616 <TIM_Base_SetConfig+0xb2>
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	4a28      	ldr	r2, [pc, #160]	@ (80036a4 <TIM_Base_SetConfig+0x140>)
 8003602:	4293      	cmp	r3, r2
 8003604:	d007      	beq.n	8003616 <TIM_Base_SetConfig+0xb2>
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	4a27      	ldr	r2, [pc, #156]	@ (80036a8 <TIM_Base_SetConfig+0x144>)
 800360a:	4293      	cmp	r3, r2
 800360c:	d003      	beq.n	8003616 <TIM_Base_SetConfig+0xb2>
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	4a26      	ldr	r2, [pc, #152]	@ (80036ac <TIM_Base_SetConfig+0x148>)
 8003612:	4293      	cmp	r3, r2
 8003614:	d108      	bne.n	8003628 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800361c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800361e:	683b      	ldr	r3, [r7, #0]
 8003620:	68db      	ldr	r3, [r3, #12]
 8003622:	68fa      	ldr	r2, [r7, #12]
 8003624:	4313      	orrs	r3, r2
 8003626:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800362e:	683b      	ldr	r3, [r7, #0]
 8003630:	695b      	ldr	r3, [r3, #20]
 8003632:	4313      	orrs	r3, r2
 8003634:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003636:	683b      	ldr	r3, [r7, #0]
 8003638:	689a      	ldr	r2, [r3, #8]
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800363e:	683b      	ldr	r3, [r7, #0]
 8003640:	681a      	ldr	r2, [r3, #0]
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	4a0e      	ldr	r2, [pc, #56]	@ (8003684 <TIM_Base_SetConfig+0x120>)
 800364a:	4293      	cmp	r3, r2
 800364c:	d003      	beq.n	8003656 <TIM_Base_SetConfig+0xf2>
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	4a10      	ldr	r2, [pc, #64]	@ (8003694 <TIM_Base_SetConfig+0x130>)
 8003652:	4293      	cmp	r3, r2
 8003654:	d103      	bne.n	800365e <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003656:	683b      	ldr	r3, [r7, #0]
 8003658:	691a      	ldr	r2, [r3, #16]
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	f043 0204 	orr.w	r2, r3, #4
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	2201      	movs	r2, #1
 800366e:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	68fa      	ldr	r2, [r7, #12]
 8003674:	601a      	str	r2, [r3, #0]
}
 8003676:	bf00      	nop
 8003678:	3714      	adds	r7, #20
 800367a:	46bd      	mov	sp, r7
 800367c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003680:	4770      	bx	lr
 8003682:	bf00      	nop
 8003684:	40010000 	.word	0x40010000
 8003688:	40000400 	.word	0x40000400
 800368c:	40000800 	.word	0x40000800
 8003690:	40000c00 	.word	0x40000c00
 8003694:	40010400 	.word	0x40010400
 8003698:	40014000 	.word	0x40014000
 800369c:	40014400 	.word	0x40014400
 80036a0:	40014800 	.word	0x40014800
 80036a4:	40001800 	.word	0x40001800
 80036a8:	40001c00 	.word	0x40001c00
 80036ac:	40002000 	.word	0x40002000

080036b0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80036b0:	b480      	push	{r7}
 80036b2:	b083      	sub	sp, #12
 80036b4:	af00      	add	r7, sp, #0
 80036b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80036b8:	bf00      	nop
 80036ba:	370c      	adds	r7, #12
 80036bc:	46bd      	mov	sp, r7
 80036be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c2:	4770      	bx	lr

080036c4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80036c4:	b480      	push	{r7}
 80036c6:	b083      	sub	sp, #12
 80036c8:	af00      	add	r7, sp, #0
 80036ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80036cc:	bf00      	nop
 80036ce:	370c      	adds	r7, #12
 80036d0:	46bd      	mov	sp, r7
 80036d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d6:	4770      	bx	lr

080036d8 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80036d8:	b480      	push	{r7}
 80036da:	b083      	sub	sp, #12
 80036dc:	af00      	add	r7, sp, #0
 80036de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80036e0:	bf00      	nop
 80036e2:	370c      	adds	r7, #12
 80036e4:	46bd      	mov	sp, r7
 80036e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ea:	4770      	bx	lr

080036ec <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80036ec:	b580      	push	{r7, lr}
 80036ee:	b082      	sub	sp, #8
 80036f0:	af00      	add	r7, sp, #0
 80036f2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d101      	bne.n	80036fe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80036fa:	2301      	movs	r3, #1
 80036fc:	e040      	b.n	8003780 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003702:	2b00      	cmp	r3, #0
 8003704:	d106      	bne.n	8003714 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	2200      	movs	r2, #0
 800370a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800370e:	6878      	ldr	r0, [r7, #4]
 8003710:	f7fd fb1c 	bl	8000d4c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	2224      	movs	r2, #36	@ 0x24
 8003718:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	681a      	ldr	r2, [r3, #0]
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	f022 0201 	bic.w	r2, r2, #1
 8003728:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800372e:	2b00      	cmp	r3, #0
 8003730:	d002      	beq.n	8003738 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8003732:	6878      	ldr	r0, [r7, #4]
 8003734:	f000 fb16 	bl	8003d64 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003738:	6878      	ldr	r0, [r7, #4]
 800373a:	f000 f8af 	bl	800389c <UART_SetConfig>
 800373e:	4603      	mov	r3, r0
 8003740:	2b01      	cmp	r3, #1
 8003742:	d101      	bne.n	8003748 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8003744:	2301      	movs	r3, #1
 8003746:	e01b      	b.n	8003780 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	685a      	ldr	r2, [r3, #4]
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003756:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	689a      	ldr	r2, [r3, #8]
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003766:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	681a      	ldr	r2, [r3, #0]
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	f042 0201 	orr.w	r2, r2, #1
 8003776:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003778:	6878      	ldr	r0, [r7, #4]
 800377a:	f000 fb95 	bl	8003ea8 <UART_CheckIdleState>
 800377e:	4603      	mov	r3, r0
}
 8003780:	4618      	mov	r0, r3
 8003782:	3708      	adds	r7, #8
 8003784:	46bd      	mov	sp, r7
 8003786:	bd80      	pop	{r7, pc}

08003788 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003788:	b580      	push	{r7, lr}
 800378a:	b08a      	sub	sp, #40	@ 0x28
 800378c:	af02      	add	r7, sp, #8
 800378e:	60f8      	str	r0, [r7, #12]
 8003790:	60b9      	str	r1, [r7, #8]
 8003792:	603b      	str	r3, [r7, #0]
 8003794:	4613      	mov	r3, r2
 8003796:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800379c:	2b20      	cmp	r3, #32
 800379e:	d177      	bne.n	8003890 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 80037a0:	68bb      	ldr	r3, [r7, #8]
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d002      	beq.n	80037ac <HAL_UART_Transmit+0x24>
 80037a6:	88fb      	ldrh	r3, [r7, #6]
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d101      	bne.n	80037b0 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80037ac:	2301      	movs	r3, #1
 80037ae:	e070      	b.n	8003892 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	2200      	movs	r2, #0
 80037b4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	2221      	movs	r2, #33	@ 0x21
 80037bc:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80037be:	f7fd fccb 	bl	8001158 <HAL_GetTick>
 80037c2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	88fa      	ldrh	r2, [r7, #6]
 80037c8:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	88fa      	ldrh	r2, [r7, #6]
 80037d0:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	689b      	ldr	r3, [r3, #8]
 80037d8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80037dc:	d108      	bne.n	80037f0 <HAL_UART_Transmit+0x68>
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	691b      	ldr	r3, [r3, #16]
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d104      	bne.n	80037f0 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80037e6:	2300      	movs	r3, #0
 80037e8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80037ea:	68bb      	ldr	r3, [r7, #8]
 80037ec:	61bb      	str	r3, [r7, #24]
 80037ee:	e003      	b.n	80037f8 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80037f0:	68bb      	ldr	r3, [r7, #8]
 80037f2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80037f4:	2300      	movs	r3, #0
 80037f6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80037f8:	e02f      	b.n	800385a <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80037fa:	683b      	ldr	r3, [r7, #0]
 80037fc:	9300      	str	r3, [sp, #0]
 80037fe:	697b      	ldr	r3, [r7, #20]
 8003800:	2200      	movs	r2, #0
 8003802:	2180      	movs	r1, #128	@ 0x80
 8003804:	68f8      	ldr	r0, [r7, #12]
 8003806:	f000 fbf7 	bl	8003ff8 <UART_WaitOnFlagUntilTimeout>
 800380a:	4603      	mov	r3, r0
 800380c:	2b00      	cmp	r3, #0
 800380e:	d004      	beq.n	800381a <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	2220      	movs	r2, #32
 8003814:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8003816:	2303      	movs	r3, #3
 8003818:	e03b      	b.n	8003892 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 800381a:	69fb      	ldr	r3, [r7, #28]
 800381c:	2b00      	cmp	r3, #0
 800381e:	d10b      	bne.n	8003838 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003820:	69bb      	ldr	r3, [r7, #24]
 8003822:	881b      	ldrh	r3, [r3, #0]
 8003824:	461a      	mov	r2, r3
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800382e:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8003830:	69bb      	ldr	r3, [r7, #24]
 8003832:	3302      	adds	r3, #2
 8003834:	61bb      	str	r3, [r7, #24]
 8003836:	e007      	b.n	8003848 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003838:	69fb      	ldr	r3, [r7, #28]
 800383a:	781a      	ldrb	r2, [r3, #0]
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8003842:	69fb      	ldr	r3, [r7, #28]
 8003844:	3301      	adds	r3, #1
 8003846:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800384e:	b29b      	uxth	r3, r3
 8003850:	3b01      	subs	r3, #1
 8003852:	b29a      	uxth	r2, r3
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8003860:	b29b      	uxth	r3, r3
 8003862:	2b00      	cmp	r3, #0
 8003864:	d1c9      	bne.n	80037fa <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003866:	683b      	ldr	r3, [r7, #0]
 8003868:	9300      	str	r3, [sp, #0]
 800386a:	697b      	ldr	r3, [r7, #20]
 800386c:	2200      	movs	r2, #0
 800386e:	2140      	movs	r1, #64	@ 0x40
 8003870:	68f8      	ldr	r0, [r7, #12]
 8003872:	f000 fbc1 	bl	8003ff8 <UART_WaitOnFlagUntilTimeout>
 8003876:	4603      	mov	r3, r0
 8003878:	2b00      	cmp	r3, #0
 800387a:	d004      	beq.n	8003886 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	2220      	movs	r2, #32
 8003880:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8003882:	2303      	movs	r3, #3
 8003884:	e005      	b.n	8003892 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	2220      	movs	r2, #32
 800388a:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 800388c:	2300      	movs	r3, #0
 800388e:	e000      	b.n	8003892 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8003890:	2302      	movs	r3, #2
  }
}
 8003892:	4618      	mov	r0, r3
 8003894:	3720      	adds	r7, #32
 8003896:	46bd      	mov	sp, r7
 8003898:	bd80      	pop	{r7, pc}
	...

0800389c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800389c:	b580      	push	{r7, lr}
 800389e:	b088      	sub	sp, #32
 80038a0:	af00      	add	r7, sp, #0
 80038a2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80038a4:	2300      	movs	r3, #0
 80038a6:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	689a      	ldr	r2, [r3, #8]
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	691b      	ldr	r3, [r3, #16]
 80038b0:	431a      	orrs	r2, r3
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	695b      	ldr	r3, [r3, #20]
 80038b6:	431a      	orrs	r2, r3
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	69db      	ldr	r3, [r3, #28]
 80038bc:	4313      	orrs	r3, r2
 80038be:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	681a      	ldr	r2, [r3, #0]
 80038c6:	4ba6      	ldr	r3, [pc, #664]	@ (8003b60 <UART_SetConfig+0x2c4>)
 80038c8:	4013      	ands	r3, r2
 80038ca:	687a      	ldr	r2, [r7, #4]
 80038cc:	6812      	ldr	r2, [r2, #0]
 80038ce:	6979      	ldr	r1, [r7, #20]
 80038d0:	430b      	orrs	r3, r1
 80038d2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	685b      	ldr	r3, [r3, #4]
 80038da:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	68da      	ldr	r2, [r3, #12]
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	430a      	orrs	r2, r1
 80038e8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	699b      	ldr	r3, [r3, #24]
 80038ee:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	6a1b      	ldr	r3, [r3, #32]
 80038f4:	697a      	ldr	r2, [r7, #20]
 80038f6:	4313      	orrs	r3, r2
 80038f8:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	689b      	ldr	r3, [r3, #8]
 8003900:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	697a      	ldr	r2, [r7, #20]
 800390a:	430a      	orrs	r2, r1
 800390c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	4a94      	ldr	r2, [pc, #592]	@ (8003b64 <UART_SetConfig+0x2c8>)
 8003914:	4293      	cmp	r3, r2
 8003916:	d120      	bne.n	800395a <UART_SetConfig+0xbe>
 8003918:	4b93      	ldr	r3, [pc, #588]	@ (8003b68 <UART_SetConfig+0x2cc>)
 800391a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800391e:	f003 0303 	and.w	r3, r3, #3
 8003922:	2b03      	cmp	r3, #3
 8003924:	d816      	bhi.n	8003954 <UART_SetConfig+0xb8>
 8003926:	a201      	add	r2, pc, #4	@ (adr r2, 800392c <UART_SetConfig+0x90>)
 8003928:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800392c:	0800393d 	.word	0x0800393d
 8003930:	08003949 	.word	0x08003949
 8003934:	08003943 	.word	0x08003943
 8003938:	0800394f 	.word	0x0800394f
 800393c:	2301      	movs	r3, #1
 800393e:	77fb      	strb	r3, [r7, #31]
 8003940:	e150      	b.n	8003be4 <UART_SetConfig+0x348>
 8003942:	2302      	movs	r3, #2
 8003944:	77fb      	strb	r3, [r7, #31]
 8003946:	e14d      	b.n	8003be4 <UART_SetConfig+0x348>
 8003948:	2304      	movs	r3, #4
 800394a:	77fb      	strb	r3, [r7, #31]
 800394c:	e14a      	b.n	8003be4 <UART_SetConfig+0x348>
 800394e:	2308      	movs	r3, #8
 8003950:	77fb      	strb	r3, [r7, #31]
 8003952:	e147      	b.n	8003be4 <UART_SetConfig+0x348>
 8003954:	2310      	movs	r3, #16
 8003956:	77fb      	strb	r3, [r7, #31]
 8003958:	e144      	b.n	8003be4 <UART_SetConfig+0x348>
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	4a83      	ldr	r2, [pc, #524]	@ (8003b6c <UART_SetConfig+0x2d0>)
 8003960:	4293      	cmp	r3, r2
 8003962:	d132      	bne.n	80039ca <UART_SetConfig+0x12e>
 8003964:	4b80      	ldr	r3, [pc, #512]	@ (8003b68 <UART_SetConfig+0x2cc>)
 8003966:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800396a:	f003 030c 	and.w	r3, r3, #12
 800396e:	2b0c      	cmp	r3, #12
 8003970:	d828      	bhi.n	80039c4 <UART_SetConfig+0x128>
 8003972:	a201      	add	r2, pc, #4	@ (adr r2, 8003978 <UART_SetConfig+0xdc>)
 8003974:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003978:	080039ad 	.word	0x080039ad
 800397c:	080039c5 	.word	0x080039c5
 8003980:	080039c5 	.word	0x080039c5
 8003984:	080039c5 	.word	0x080039c5
 8003988:	080039b9 	.word	0x080039b9
 800398c:	080039c5 	.word	0x080039c5
 8003990:	080039c5 	.word	0x080039c5
 8003994:	080039c5 	.word	0x080039c5
 8003998:	080039b3 	.word	0x080039b3
 800399c:	080039c5 	.word	0x080039c5
 80039a0:	080039c5 	.word	0x080039c5
 80039a4:	080039c5 	.word	0x080039c5
 80039a8:	080039bf 	.word	0x080039bf
 80039ac:	2300      	movs	r3, #0
 80039ae:	77fb      	strb	r3, [r7, #31]
 80039b0:	e118      	b.n	8003be4 <UART_SetConfig+0x348>
 80039b2:	2302      	movs	r3, #2
 80039b4:	77fb      	strb	r3, [r7, #31]
 80039b6:	e115      	b.n	8003be4 <UART_SetConfig+0x348>
 80039b8:	2304      	movs	r3, #4
 80039ba:	77fb      	strb	r3, [r7, #31]
 80039bc:	e112      	b.n	8003be4 <UART_SetConfig+0x348>
 80039be:	2308      	movs	r3, #8
 80039c0:	77fb      	strb	r3, [r7, #31]
 80039c2:	e10f      	b.n	8003be4 <UART_SetConfig+0x348>
 80039c4:	2310      	movs	r3, #16
 80039c6:	77fb      	strb	r3, [r7, #31]
 80039c8:	e10c      	b.n	8003be4 <UART_SetConfig+0x348>
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	4a68      	ldr	r2, [pc, #416]	@ (8003b70 <UART_SetConfig+0x2d4>)
 80039d0:	4293      	cmp	r3, r2
 80039d2:	d120      	bne.n	8003a16 <UART_SetConfig+0x17a>
 80039d4:	4b64      	ldr	r3, [pc, #400]	@ (8003b68 <UART_SetConfig+0x2cc>)
 80039d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80039da:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80039de:	2b30      	cmp	r3, #48	@ 0x30
 80039e0:	d013      	beq.n	8003a0a <UART_SetConfig+0x16e>
 80039e2:	2b30      	cmp	r3, #48	@ 0x30
 80039e4:	d814      	bhi.n	8003a10 <UART_SetConfig+0x174>
 80039e6:	2b20      	cmp	r3, #32
 80039e8:	d009      	beq.n	80039fe <UART_SetConfig+0x162>
 80039ea:	2b20      	cmp	r3, #32
 80039ec:	d810      	bhi.n	8003a10 <UART_SetConfig+0x174>
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d002      	beq.n	80039f8 <UART_SetConfig+0x15c>
 80039f2:	2b10      	cmp	r3, #16
 80039f4:	d006      	beq.n	8003a04 <UART_SetConfig+0x168>
 80039f6:	e00b      	b.n	8003a10 <UART_SetConfig+0x174>
 80039f8:	2300      	movs	r3, #0
 80039fa:	77fb      	strb	r3, [r7, #31]
 80039fc:	e0f2      	b.n	8003be4 <UART_SetConfig+0x348>
 80039fe:	2302      	movs	r3, #2
 8003a00:	77fb      	strb	r3, [r7, #31]
 8003a02:	e0ef      	b.n	8003be4 <UART_SetConfig+0x348>
 8003a04:	2304      	movs	r3, #4
 8003a06:	77fb      	strb	r3, [r7, #31]
 8003a08:	e0ec      	b.n	8003be4 <UART_SetConfig+0x348>
 8003a0a:	2308      	movs	r3, #8
 8003a0c:	77fb      	strb	r3, [r7, #31]
 8003a0e:	e0e9      	b.n	8003be4 <UART_SetConfig+0x348>
 8003a10:	2310      	movs	r3, #16
 8003a12:	77fb      	strb	r3, [r7, #31]
 8003a14:	e0e6      	b.n	8003be4 <UART_SetConfig+0x348>
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	4a56      	ldr	r2, [pc, #344]	@ (8003b74 <UART_SetConfig+0x2d8>)
 8003a1c:	4293      	cmp	r3, r2
 8003a1e:	d120      	bne.n	8003a62 <UART_SetConfig+0x1c6>
 8003a20:	4b51      	ldr	r3, [pc, #324]	@ (8003b68 <UART_SetConfig+0x2cc>)
 8003a22:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003a26:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8003a2a:	2bc0      	cmp	r3, #192	@ 0xc0
 8003a2c:	d013      	beq.n	8003a56 <UART_SetConfig+0x1ba>
 8003a2e:	2bc0      	cmp	r3, #192	@ 0xc0
 8003a30:	d814      	bhi.n	8003a5c <UART_SetConfig+0x1c0>
 8003a32:	2b80      	cmp	r3, #128	@ 0x80
 8003a34:	d009      	beq.n	8003a4a <UART_SetConfig+0x1ae>
 8003a36:	2b80      	cmp	r3, #128	@ 0x80
 8003a38:	d810      	bhi.n	8003a5c <UART_SetConfig+0x1c0>
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d002      	beq.n	8003a44 <UART_SetConfig+0x1a8>
 8003a3e:	2b40      	cmp	r3, #64	@ 0x40
 8003a40:	d006      	beq.n	8003a50 <UART_SetConfig+0x1b4>
 8003a42:	e00b      	b.n	8003a5c <UART_SetConfig+0x1c0>
 8003a44:	2300      	movs	r3, #0
 8003a46:	77fb      	strb	r3, [r7, #31]
 8003a48:	e0cc      	b.n	8003be4 <UART_SetConfig+0x348>
 8003a4a:	2302      	movs	r3, #2
 8003a4c:	77fb      	strb	r3, [r7, #31]
 8003a4e:	e0c9      	b.n	8003be4 <UART_SetConfig+0x348>
 8003a50:	2304      	movs	r3, #4
 8003a52:	77fb      	strb	r3, [r7, #31]
 8003a54:	e0c6      	b.n	8003be4 <UART_SetConfig+0x348>
 8003a56:	2308      	movs	r3, #8
 8003a58:	77fb      	strb	r3, [r7, #31]
 8003a5a:	e0c3      	b.n	8003be4 <UART_SetConfig+0x348>
 8003a5c:	2310      	movs	r3, #16
 8003a5e:	77fb      	strb	r3, [r7, #31]
 8003a60:	e0c0      	b.n	8003be4 <UART_SetConfig+0x348>
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	4a44      	ldr	r2, [pc, #272]	@ (8003b78 <UART_SetConfig+0x2dc>)
 8003a68:	4293      	cmp	r3, r2
 8003a6a:	d125      	bne.n	8003ab8 <UART_SetConfig+0x21c>
 8003a6c:	4b3e      	ldr	r3, [pc, #248]	@ (8003b68 <UART_SetConfig+0x2cc>)
 8003a6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003a72:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003a76:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003a7a:	d017      	beq.n	8003aac <UART_SetConfig+0x210>
 8003a7c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003a80:	d817      	bhi.n	8003ab2 <UART_SetConfig+0x216>
 8003a82:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003a86:	d00b      	beq.n	8003aa0 <UART_SetConfig+0x204>
 8003a88:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003a8c:	d811      	bhi.n	8003ab2 <UART_SetConfig+0x216>
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d003      	beq.n	8003a9a <UART_SetConfig+0x1fe>
 8003a92:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003a96:	d006      	beq.n	8003aa6 <UART_SetConfig+0x20a>
 8003a98:	e00b      	b.n	8003ab2 <UART_SetConfig+0x216>
 8003a9a:	2300      	movs	r3, #0
 8003a9c:	77fb      	strb	r3, [r7, #31]
 8003a9e:	e0a1      	b.n	8003be4 <UART_SetConfig+0x348>
 8003aa0:	2302      	movs	r3, #2
 8003aa2:	77fb      	strb	r3, [r7, #31]
 8003aa4:	e09e      	b.n	8003be4 <UART_SetConfig+0x348>
 8003aa6:	2304      	movs	r3, #4
 8003aa8:	77fb      	strb	r3, [r7, #31]
 8003aaa:	e09b      	b.n	8003be4 <UART_SetConfig+0x348>
 8003aac:	2308      	movs	r3, #8
 8003aae:	77fb      	strb	r3, [r7, #31]
 8003ab0:	e098      	b.n	8003be4 <UART_SetConfig+0x348>
 8003ab2:	2310      	movs	r3, #16
 8003ab4:	77fb      	strb	r3, [r7, #31]
 8003ab6:	e095      	b.n	8003be4 <UART_SetConfig+0x348>
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	4a2f      	ldr	r2, [pc, #188]	@ (8003b7c <UART_SetConfig+0x2e0>)
 8003abe:	4293      	cmp	r3, r2
 8003ac0:	d125      	bne.n	8003b0e <UART_SetConfig+0x272>
 8003ac2:	4b29      	ldr	r3, [pc, #164]	@ (8003b68 <UART_SetConfig+0x2cc>)
 8003ac4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003ac8:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8003acc:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003ad0:	d017      	beq.n	8003b02 <UART_SetConfig+0x266>
 8003ad2:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003ad6:	d817      	bhi.n	8003b08 <UART_SetConfig+0x26c>
 8003ad8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003adc:	d00b      	beq.n	8003af6 <UART_SetConfig+0x25a>
 8003ade:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003ae2:	d811      	bhi.n	8003b08 <UART_SetConfig+0x26c>
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d003      	beq.n	8003af0 <UART_SetConfig+0x254>
 8003ae8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003aec:	d006      	beq.n	8003afc <UART_SetConfig+0x260>
 8003aee:	e00b      	b.n	8003b08 <UART_SetConfig+0x26c>
 8003af0:	2301      	movs	r3, #1
 8003af2:	77fb      	strb	r3, [r7, #31]
 8003af4:	e076      	b.n	8003be4 <UART_SetConfig+0x348>
 8003af6:	2302      	movs	r3, #2
 8003af8:	77fb      	strb	r3, [r7, #31]
 8003afa:	e073      	b.n	8003be4 <UART_SetConfig+0x348>
 8003afc:	2304      	movs	r3, #4
 8003afe:	77fb      	strb	r3, [r7, #31]
 8003b00:	e070      	b.n	8003be4 <UART_SetConfig+0x348>
 8003b02:	2308      	movs	r3, #8
 8003b04:	77fb      	strb	r3, [r7, #31]
 8003b06:	e06d      	b.n	8003be4 <UART_SetConfig+0x348>
 8003b08:	2310      	movs	r3, #16
 8003b0a:	77fb      	strb	r3, [r7, #31]
 8003b0c:	e06a      	b.n	8003be4 <UART_SetConfig+0x348>
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	4a1b      	ldr	r2, [pc, #108]	@ (8003b80 <UART_SetConfig+0x2e4>)
 8003b14:	4293      	cmp	r3, r2
 8003b16:	d138      	bne.n	8003b8a <UART_SetConfig+0x2ee>
 8003b18:	4b13      	ldr	r3, [pc, #76]	@ (8003b68 <UART_SetConfig+0x2cc>)
 8003b1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003b1e:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8003b22:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003b26:	d017      	beq.n	8003b58 <UART_SetConfig+0x2bc>
 8003b28:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003b2c:	d82a      	bhi.n	8003b84 <UART_SetConfig+0x2e8>
 8003b2e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003b32:	d00b      	beq.n	8003b4c <UART_SetConfig+0x2b0>
 8003b34:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003b38:	d824      	bhi.n	8003b84 <UART_SetConfig+0x2e8>
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d003      	beq.n	8003b46 <UART_SetConfig+0x2aa>
 8003b3e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003b42:	d006      	beq.n	8003b52 <UART_SetConfig+0x2b6>
 8003b44:	e01e      	b.n	8003b84 <UART_SetConfig+0x2e8>
 8003b46:	2300      	movs	r3, #0
 8003b48:	77fb      	strb	r3, [r7, #31]
 8003b4a:	e04b      	b.n	8003be4 <UART_SetConfig+0x348>
 8003b4c:	2302      	movs	r3, #2
 8003b4e:	77fb      	strb	r3, [r7, #31]
 8003b50:	e048      	b.n	8003be4 <UART_SetConfig+0x348>
 8003b52:	2304      	movs	r3, #4
 8003b54:	77fb      	strb	r3, [r7, #31]
 8003b56:	e045      	b.n	8003be4 <UART_SetConfig+0x348>
 8003b58:	2308      	movs	r3, #8
 8003b5a:	77fb      	strb	r3, [r7, #31]
 8003b5c:	e042      	b.n	8003be4 <UART_SetConfig+0x348>
 8003b5e:	bf00      	nop
 8003b60:	efff69f3 	.word	0xefff69f3
 8003b64:	40011000 	.word	0x40011000
 8003b68:	40023800 	.word	0x40023800
 8003b6c:	40004400 	.word	0x40004400
 8003b70:	40004800 	.word	0x40004800
 8003b74:	40004c00 	.word	0x40004c00
 8003b78:	40005000 	.word	0x40005000
 8003b7c:	40011400 	.word	0x40011400
 8003b80:	40007800 	.word	0x40007800
 8003b84:	2310      	movs	r3, #16
 8003b86:	77fb      	strb	r3, [r7, #31]
 8003b88:	e02c      	b.n	8003be4 <UART_SetConfig+0x348>
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	4a72      	ldr	r2, [pc, #456]	@ (8003d58 <UART_SetConfig+0x4bc>)
 8003b90:	4293      	cmp	r3, r2
 8003b92:	d125      	bne.n	8003be0 <UART_SetConfig+0x344>
 8003b94:	4b71      	ldr	r3, [pc, #452]	@ (8003d5c <UART_SetConfig+0x4c0>)
 8003b96:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003b9a:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8003b9e:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8003ba2:	d017      	beq.n	8003bd4 <UART_SetConfig+0x338>
 8003ba4:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8003ba8:	d817      	bhi.n	8003bda <UART_SetConfig+0x33e>
 8003baa:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003bae:	d00b      	beq.n	8003bc8 <UART_SetConfig+0x32c>
 8003bb0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003bb4:	d811      	bhi.n	8003bda <UART_SetConfig+0x33e>
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d003      	beq.n	8003bc2 <UART_SetConfig+0x326>
 8003bba:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003bbe:	d006      	beq.n	8003bce <UART_SetConfig+0x332>
 8003bc0:	e00b      	b.n	8003bda <UART_SetConfig+0x33e>
 8003bc2:	2300      	movs	r3, #0
 8003bc4:	77fb      	strb	r3, [r7, #31]
 8003bc6:	e00d      	b.n	8003be4 <UART_SetConfig+0x348>
 8003bc8:	2302      	movs	r3, #2
 8003bca:	77fb      	strb	r3, [r7, #31]
 8003bcc:	e00a      	b.n	8003be4 <UART_SetConfig+0x348>
 8003bce:	2304      	movs	r3, #4
 8003bd0:	77fb      	strb	r3, [r7, #31]
 8003bd2:	e007      	b.n	8003be4 <UART_SetConfig+0x348>
 8003bd4:	2308      	movs	r3, #8
 8003bd6:	77fb      	strb	r3, [r7, #31]
 8003bd8:	e004      	b.n	8003be4 <UART_SetConfig+0x348>
 8003bda:	2310      	movs	r3, #16
 8003bdc:	77fb      	strb	r3, [r7, #31]
 8003bde:	e001      	b.n	8003be4 <UART_SetConfig+0x348>
 8003be0:	2310      	movs	r3, #16
 8003be2:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	69db      	ldr	r3, [r3, #28]
 8003be8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003bec:	d15b      	bne.n	8003ca6 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8003bee:	7ffb      	ldrb	r3, [r7, #31]
 8003bf0:	2b08      	cmp	r3, #8
 8003bf2:	d828      	bhi.n	8003c46 <UART_SetConfig+0x3aa>
 8003bf4:	a201      	add	r2, pc, #4	@ (adr r2, 8003bfc <UART_SetConfig+0x360>)
 8003bf6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003bfa:	bf00      	nop
 8003bfc:	08003c21 	.word	0x08003c21
 8003c00:	08003c29 	.word	0x08003c29
 8003c04:	08003c31 	.word	0x08003c31
 8003c08:	08003c47 	.word	0x08003c47
 8003c0c:	08003c37 	.word	0x08003c37
 8003c10:	08003c47 	.word	0x08003c47
 8003c14:	08003c47 	.word	0x08003c47
 8003c18:	08003c47 	.word	0x08003c47
 8003c1c:	08003c3f 	.word	0x08003c3f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003c20:	f7fe fd94 	bl	800274c <HAL_RCC_GetPCLK1Freq>
 8003c24:	61b8      	str	r0, [r7, #24]
        break;
 8003c26:	e013      	b.n	8003c50 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003c28:	f7fe fda4 	bl	8002774 <HAL_RCC_GetPCLK2Freq>
 8003c2c:	61b8      	str	r0, [r7, #24]
        break;
 8003c2e:	e00f      	b.n	8003c50 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003c30:	4b4b      	ldr	r3, [pc, #300]	@ (8003d60 <UART_SetConfig+0x4c4>)
 8003c32:	61bb      	str	r3, [r7, #24]
        break;
 8003c34:	e00c      	b.n	8003c50 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003c36:	f7fe fcb7 	bl	80025a8 <HAL_RCC_GetSysClockFreq>
 8003c3a:	61b8      	str	r0, [r7, #24]
        break;
 8003c3c:	e008      	b.n	8003c50 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003c3e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003c42:	61bb      	str	r3, [r7, #24]
        break;
 8003c44:	e004      	b.n	8003c50 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8003c46:	2300      	movs	r3, #0
 8003c48:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003c4a:	2301      	movs	r3, #1
 8003c4c:	77bb      	strb	r3, [r7, #30]
        break;
 8003c4e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003c50:	69bb      	ldr	r3, [r7, #24]
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d074      	beq.n	8003d40 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003c56:	69bb      	ldr	r3, [r7, #24]
 8003c58:	005a      	lsls	r2, r3, #1
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	685b      	ldr	r3, [r3, #4]
 8003c5e:	085b      	lsrs	r3, r3, #1
 8003c60:	441a      	add	r2, r3
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	685b      	ldr	r3, [r3, #4]
 8003c66:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c6a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003c6c:	693b      	ldr	r3, [r7, #16]
 8003c6e:	2b0f      	cmp	r3, #15
 8003c70:	d916      	bls.n	8003ca0 <UART_SetConfig+0x404>
 8003c72:	693b      	ldr	r3, [r7, #16]
 8003c74:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003c78:	d212      	bcs.n	8003ca0 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003c7a:	693b      	ldr	r3, [r7, #16]
 8003c7c:	b29b      	uxth	r3, r3
 8003c7e:	f023 030f 	bic.w	r3, r3, #15
 8003c82:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003c84:	693b      	ldr	r3, [r7, #16]
 8003c86:	085b      	lsrs	r3, r3, #1
 8003c88:	b29b      	uxth	r3, r3
 8003c8a:	f003 0307 	and.w	r3, r3, #7
 8003c8e:	b29a      	uxth	r2, r3
 8003c90:	89fb      	ldrh	r3, [r7, #14]
 8003c92:	4313      	orrs	r3, r2
 8003c94:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	89fa      	ldrh	r2, [r7, #14]
 8003c9c:	60da      	str	r2, [r3, #12]
 8003c9e:	e04f      	b.n	8003d40 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8003ca0:	2301      	movs	r3, #1
 8003ca2:	77bb      	strb	r3, [r7, #30]
 8003ca4:	e04c      	b.n	8003d40 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003ca6:	7ffb      	ldrb	r3, [r7, #31]
 8003ca8:	2b08      	cmp	r3, #8
 8003caa:	d828      	bhi.n	8003cfe <UART_SetConfig+0x462>
 8003cac:	a201      	add	r2, pc, #4	@ (adr r2, 8003cb4 <UART_SetConfig+0x418>)
 8003cae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cb2:	bf00      	nop
 8003cb4:	08003cd9 	.word	0x08003cd9
 8003cb8:	08003ce1 	.word	0x08003ce1
 8003cbc:	08003ce9 	.word	0x08003ce9
 8003cc0:	08003cff 	.word	0x08003cff
 8003cc4:	08003cef 	.word	0x08003cef
 8003cc8:	08003cff 	.word	0x08003cff
 8003ccc:	08003cff 	.word	0x08003cff
 8003cd0:	08003cff 	.word	0x08003cff
 8003cd4:	08003cf7 	.word	0x08003cf7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003cd8:	f7fe fd38 	bl	800274c <HAL_RCC_GetPCLK1Freq>
 8003cdc:	61b8      	str	r0, [r7, #24]
        break;
 8003cde:	e013      	b.n	8003d08 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003ce0:	f7fe fd48 	bl	8002774 <HAL_RCC_GetPCLK2Freq>
 8003ce4:	61b8      	str	r0, [r7, #24]
        break;
 8003ce6:	e00f      	b.n	8003d08 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003ce8:	4b1d      	ldr	r3, [pc, #116]	@ (8003d60 <UART_SetConfig+0x4c4>)
 8003cea:	61bb      	str	r3, [r7, #24]
        break;
 8003cec:	e00c      	b.n	8003d08 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003cee:	f7fe fc5b 	bl	80025a8 <HAL_RCC_GetSysClockFreq>
 8003cf2:	61b8      	str	r0, [r7, #24]
        break;
 8003cf4:	e008      	b.n	8003d08 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003cf6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003cfa:	61bb      	str	r3, [r7, #24]
        break;
 8003cfc:	e004      	b.n	8003d08 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8003cfe:	2300      	movs	r3, #0
 8003d00:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003d02:	2301      	movs	r3, #1
 8003d04:	77bb      	strb	r3, [r7, #30]
        break;
 8003d06:	bf00      	nop
    }

    if (pclk != 0U)
 8003d08:	69bb      	ldr	r3, [r7, #24]
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d018      	beq.n	8003d40 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	685b      	ldr	r3, [r3, #4]
 8003d12:	085a      	lsrs	r2, r3, #1
 8003d14:	69bb      	ldr	r3, [r7, #24]
 8003d16:	441a      	add	r2, r3
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	685b      	ldr	r3, [r3, #4]
 8003d1c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d20:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003d22:	693b      	ldr	r3, [r7, #16]
 8003d24:	2b0f      	cmp	r3, #15
 8003d26:	d909      	bls.n	8003d3c <UART_SetConfig+0x4a0>
 8003d28:	693b      	ldr	r3, [r7, #16]
 8003d2a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003d2e:	d205      	bcs.n	8003d3c <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003d30:	693b      	ldr	r3, [r7, #16]
 8003d32:	b29a      	uxth	r2, r3
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	60da      	str	r2, [r3, #12]
 8003d3a:	e001      	b.n	8003d40 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8003d3c:	2301      	movs	r3, #1
 8003d3e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	2200      	movs	r2, #0
 8003d44:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	2200      	movs	r2, #0
 8003d4a:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8003d4c:	7fbb      	ldrb	r3, [r7, #30]
}
 8003d4e:	4618      	mov	r0, r3
 8003d50:	3720      	adds	r7, #32
 8003d52:	46bd      	mov	sp, r7
 8003d54:	bd80      	pop	{r7, pc}
 8003d56:	bf00      	nop
 8003d58:	40007c00 	.word	0x40007c00
 8003d5c:	40023800 	.word	0x40023800
 8003d60:	00f42400 	.word	0x00f42400

08003d64 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003d64:	b480      	push	{r7}
 8003d66:	b083      	sub	sp, #12
 8003d68:	af00      	add	r7, sp, #0
 8003d6a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d70:	f003 0308 	and.w	r3, r3, #8
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d00a      	beq.n	8003d8e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	685b      	ldr	r3, [r3, #4]
 8003d7e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	430a      	orrs	r2, r1
 8003d8c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d92:	f003 0301 	and.w	r3, r3, #1
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d00a      	beq.n	8003db0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	685b      	ldr	r3, [r3, #4]
 8003da0:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	430a      	orrs	r2, r1
 8003dae:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003db4:	f003 0302 	and.w	r3, r3, #2
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d00a      	beq.n	8003dd2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	685b      	ldr	r3, [r3, #4]
 8003dc2:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	430a      	orrs	r2, r1
 8003dd0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003dd6:	f003 0304 	and.w	r3, r3, #4
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d00a      	beq.n	8003df4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	685b      	ldr	r3, [r3, #4]
 8003de4:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	430a      	orrs	r2, r1
 8003df2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003df8:	f003 0310 	and.w	r3, r3, #16
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d00a      	beq.n	8003e16 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	689b      	ldr	r3, [r3, #8]
 8003e06:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	430a      	orrs	r2, r1
 8003e14:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e1a:	f003 0320 	and.w	r3, r3, #32
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d00a      	beq.n	8003e38 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	689b      	ldr	r3, [r3, #8]
 8003e28:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	430a      	orrs	r2, r1
 8003e36:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e3c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d01a      	beq.n	8003e7a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	685b      	ldr	r3, [r3, #4]
 8003e4a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	430a      	orrs	r2, r1
 8003e58:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e5e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003e62:	d10a      	bne.n	8003e7a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	685b      	ldr	r3, [r3, #4]
 8003e6a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	430a      	orrs	r2, r1
 8003e78:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e7e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d00a      	beq.n	8003e9c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	685b      	ldr	r3, [r3, #4]
 8003e8c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	430a      	orrs	r2, r1
 8003e9a:	605a      	str	r2, [r3, #4]
  }
}
 8003e9c:	bf00      	nop
 8003e9e:	370c      	adds	r7, #12
 8003ea0:	46bd      	mov	sp, r7
 8003ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea6:	4770      	bx	lr

08003ea8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003ea8:	b580      	push	{r7, lr}
 8003eaa:	b098      	sub	sp, #96	@ 0x60
 8003eac:	af02      	add	r7, sp, #8
 8003eae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	2200      	movs	r2, #0
 8003eb4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003eb8:	f7fd f94e 	bl	8001158 <HAL_GetTick>
 8003ebc:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	f003 0308 	and.w	r3, r3, #8
 8003ec8:	2b08      	cmp	r3, #8
 8003eca:	d12e      	bne.n	8003f2a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003ecc:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003ed0:	9300      	str	r3, [sp, #0]
 8003ed2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003ed4:	2200      	movs	r2, #0
 8003ed6:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8003eda:	6878      	ldr	r0, [r7, #4]
 8003edc:	f000 f88c 	bl	8003ff8 <UART_WaitOnFlagUntilTimeout>
 8003ee0:	4603      	mov	r3, r0
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d021      	beq.n	8003f2a <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003eec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003eee:	e853 3f00 	ldrex	r3, [r3]
 8003ef2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003ef4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003ef6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003efa:	653b      	str	r3, [r7, #80]	@ 0x50
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	461a      	mov	r2, r3
 8003f02:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003f04:	647b      	str	r3, [r7, #68]	@ 0x44
 8003f06:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f08:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003f0a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003f0c:	e841 2300 	strex	r3, r2, [r1]
 8003f10:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003f12:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d1e6      	bne.n	8003ee6 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	2220      	movs	r2, #32
 8003f1c:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	2200      	movs	r2, #0
 8003f22:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003f26:	2303      	movs	r3, #3
 8003f28:	e062      	b.n	8003ff0 <UART_CheckIdleState+0x148>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	f003 0304 	and.w	r3, r3, #4
 8003f34:	2b04      	cmp	r3, #4
 8003f36:	d149      	bne.n	8003fcc <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003f38:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003f3c:	9300      	str	r3, [sp, #0]
 8003f3e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003f40:	2200      	movs	r2, #0
 8003f42:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8003f46:	6878      	ldr	r0, [r7, #4]
 8003f48:	f000 f856 	bl	8003ff8 <UART_WaitOnFlagUntilTimeout>
 8003f4c:	4603      	mov	r3, r0
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d03c      	beq.n	8003fcc <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f5a:	e853 3f00 	ldrex	r3, [r3]
 8003f5e:	623b      	str	r3, [r7, #32]
   return(result);
 8003f60:	6a3b      	ldr	r3, [r7, #32]
 8003f62:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003f66:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	461a      	mov	r2, r3
 8003f6e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003f70:	633b      	str	r3, [r7, #48]	@ 0x30
 8003f72:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f74:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003f76:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003f78:	e841 2300 	strex	r3, r2, [r1]
 8003f7c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003f7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d1e6      	bne.n	8003f52 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	3308      	adds	r3, #8
 8003f8a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f8c:	693b      	ldr	r3, [r7, #16]
 8003f8e:	e853 3f00 	ldrex	r3, [r3]
 8003f92:	60fb      	str	r3, [r7, #12]
   return(result);
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	f023 0301 	bic.w	r3, r3, #1
 8003f9a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	3308      	adds	r3, #8
 8003fa2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003fa4:	61fa      	str	r2, [r7, #28]
 8003fa6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fa8:	69b9      	ldr	r1, [r7, #24]
 8003faa:	69fa      	ldr	r2, [r7, #28]
 8003fac:	e841 2300 	strex	r3, r2, [r1]
 8003fb0:	617b      	str	r3, [r7, #20]
   return(result);
 8003fb2:	697b      	ldr	r3, [r7, #20]
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d1e5      	bne.n	8003f84 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	2220      	movs	r2, #32
 8003fbc:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	2200      	movs	r2, #0
 8003fc4:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003fc8:	2303      	movs	r3, #3
 8003fca:	e011      	b.n	8003ff0 <UART_CheckIdleState+0x148>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	2220      	movs	r2, #32
 8003fd0:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	2220      	movs	r2, #32
 8003fd6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	2200      	movs	r2, #0
 8003fde:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	2200      	movs	r2, #0
 8003fe4:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	2200      	movs	r2, #0
 8003fea:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8003fee:	2300      	movs	r3, #0
}
 8003ff0:	4618      	mov	r0, r3
 8003ff2:	3758      	adds	r7, #88	@ 0x58
 8003ff4:	46bd      	mov	sp, r7
 8003ff6:	bd80      	pop	{r7, pc}

08003ff8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003ff8:	b580      	push	{r7, lr}
 8003ffa:	b084      	sub	sp, #16
 8003ffc:	af00      	add	r7, sp, #0
 8003ffe:	60f8      	str	r0, [r7, #12]
 8004000:	60b9      	str	r1, [r7, #8]
 8004002:	603b      	str	r3, [r7, #0]
 8004004:	4613      	mov	r3, r2
 8004006:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004008:	e04f      	b.n	80040aa <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800400a:	69bb      	ldr	r3, [r7, #24]
 800400c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004010:	d04b      	beq.n	80040aa <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004012:	f7fd f8a1 	bl	8001158 <HAL_GetTick>
 8004016:	4602      	mov	r2, r0
 8004018:	683b      	ldr	r3, [r7, #0]
 800401a:	1ad3      	subs	r3, r2, r3
 800401c:	69ba      	ldr	r2, [r7, #24]
 800401e:	429a      	cmp	r2, r3
 8004020:	d302      	bcc.n	8004028 <UART_WaitOnFlagUntilTimeout+0x30>
 8004022:	69bb      	ldr	r3, [r7, #24]
 8004024:	2b00      	cmp	r3, #0
 8004026:	d101      	bne.n	800402c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004028:	2303      	movs	r3, #3
 800402a:	e04e      	b.n	80040ca <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	f003 0304 	and.w	r3, r3, #4
 8004036:	2b00      	cmp	r3, #0
 8004038:	d037      	beq.n	80040aa <UART_WaitOnFlagUntilTimeout+0xb2>
 800403a:	68bb      	ldr	r3, [r7, #8]
 800403c:	2b80      	cmp	r3, #128	@ 0x80
 800403e:	d034      	beq.n	80040aa <UART_WaitOnFlagUntilTimeout+0xb2>
 8004040:	68bb      	ldr	r3, [r7, #8]
 8004042:	2b40      	cmp	r3, #64	@ 0x40
 8004044:	d031      	beq.n	80040aa <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	69db      	ldr	r3, [r3, #28]
 800404c:	f003 0308 	and.w	r3, r3, #8
 8004050:	2b08      	cmp	r3, #8
 8004052:	d110      	bne.n	8004076 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	2208      	movs	r2, #8
 800405a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800405c:	68f8      	ldr	r0, [r7, #12]
 800405e:	f000 f838 	bl	80040d2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	2208      	movs	r2, #8
 8004066:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	2200      	movs	r2, #0
 800406e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8004072:	2301      	movs	r3, #1
 8004074:	e029      	b.n	80040ca <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	69db      	ldr	r3, [r3, #28]
 800407c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004080:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004084:	d111      	bne.n	80040aa <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800408e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004090:	68f8      	ldr	r0, [r7, #12]
 8004092:	f000 f81e 	bl	80040d2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	2220      	movs	r2, #32
 800409a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	2200      	movs	r2, #0
 80040a2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 80040a6:	2303      	movs	r3, #3
 80040a8:	e00f      	b.n	80040ca <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	69da      	ldr	r2, [r3, #28]
 80040b0:	68bb      	ldr	r3, [r7, #8]
 80040b2:	4013      	ands	r3, r2
 80040b4:	68ba      	ldr	r2, [r7, #8]
 80040b6:	429a      	cmp	r2, r3
 80040b8:	bf0c      	ite	eq
 80040ba:	2301      	moveq	r3, #1
 80040bc:	2300      	movne	r3, #0
 80040be:	b2db      	uxtb	r3, r3
 80040c0:	461a      	mov	r2, r3
 80040c2:	79fb      	ldrb	r3, [r7, #7]
 80040c4:	429a      	cmp	r2, r3
 80040c6:	d0a0      	beq.n	800400a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80040c8:	2300      	movs	r3, #0
}
 80040ca:	4618      	mov	r0, r3
 80040cc:	3710      	adds	r7, #16
 80040ce:	46bd      	mov	sp, r7
 80040d0:	bd80      	pop	{r7, pc}

080040d2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80040d2:	b480      	push	{r7}
 80040d4:	b095      	sub	sp, #84	@ 0x54
 80040d6:	af00      	add	r7, sp, #0
 80040d8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040e0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80040e2:	e853 3f00 	ldrex	r3, [r3]
 80040e6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80040e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80040ea:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80040ee:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	461a      	mov	r2, r3
 80040f6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80040f8:	643b      	str	r3, [r7, #64]	@ 0x40
 80040fa:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040fc:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80040fe:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004100:	e841 2300 	strex	r3, r2, [r1]
 8004104:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004106:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004108:	2b00      	cmp	r3, #0
 800410a:	d1e6      	bne.n	80040da <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	3308      	adds	r3, #8
 8004112:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004114:	6a3b      	ldr	r3, [r7, #32]
 8004116:	e853 3f00 	ldrex	r3, [r3]
 800411a:	61fb      	str	r3, [r7, #28]
   return(result);
 800411c:	69fb      	ldr	r3, [r7, #28]
 800411e:	f023 0301 	bic.w	r3, r3, #1
 8004122:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	3308      	adds	r3, #8
 800412a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800412c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800412e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004130:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004132:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004134:	e841 2300 	strex	r3, r2, [r1]
 8004138:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800413a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800413c:	2b00      	cmp	r3, #0
 800413e:	d1e5      	bne.n	800410c <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004144:	2b01      	cmp	r3, #1
 8004146:	d118      	bne.n	800417a <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	e853 3f00 	ldrex	r3, [r3]
 8004154:	60bb      	str	r3, [r7, #8]
   return(result);
 8004156:	68bb      	ldr	r3, [r7, #8]
 8004158:	f023 0310 	bic.w	r3, r3, #16
 800415c:	647b      	str	r3, [r7, #68]	@ 0x44
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	461a      	mov	r2, r3
 8004164:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004166:	61bb      	str	r3, [r7, #24]
 8004168:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800416a:	6979      	ldr	r1, [r7, #20]
 800416c:	69ba      	ldr	r2, [r7, #24]
 800416e:	e841 2300 	strex	r3, r2, [r1]
 8004172:	613b      	str	r3, [r7, #16]
   return(result);
 8004174:	693b      	ldr	r3, [r7, #16]
 8004176:	2b00      	cmp	r3, #0
 8004178:	d1e6      	bne.n	8004148 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	2220      	movs	r2, #32
 800417e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	2200      	movs	r2, #0
 8004186:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	2200      	movs	r2, #0
 800418c:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800418e:	bf00      	nop
 8004190:	3754      	adds	r7, #84	@ 0x54
 8004192:	46bd      	mov	sp, r7
 8004194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004198:	4770      	bx	lr

0800419a <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800419a:	b480      	push	{r7}
 800419c:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 800419e:	bf00      	nop
 80041a0:	46bd      	mov	sp, r7
 80041a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a6:	4770      	bx	lr

080041a8 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80041a8:	b480      	push	{r7}
 80041aa:	b085      	sub	sp, #20
 80041ac:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80041ae:	f3ef 8305 	mrs	r3, IPSR
 80041b2:	60bb      	str	r3, [r7, #8]
  return(result);
 80041b4:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d10f      	bne.n	80041da <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80041ba:	f3ef 8310 	mrs	r3, PRIMASK
 80041be:	607b      	str	r3, [r7, #4]
  return(result);
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d105      	bne.n	80041d2 <osKernelInitialize+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80041c6:	f3ef 8311 	mrs	r3, BASEPRI
 80041ca:	603b      	str	r3, [r7, #0]
  return(result);
 80041cc:	683b      	ldr	r3, [r7, #0]
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d007      	beq.n	80041e2 <osKernelInitialize+0x3a>
 80041d2:	4b0e      	ldr	r3, [pc, #56]	@ (800420c <osKernelInitialize+0x64>)
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	2b02      	cmp	r3, #2
 80041d8:	d103      	bne.n	80041e2 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 80041da:	f06f 0305 	mvn.w	r3, #5
 80041de:	60fb      	str	r3, [r7, #12]
 80041e0:	e00c      	b.n	80041fc <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 80041e2:	4b0a      	ldr	r3, [pc, #40]	@ (800420c <osKernelInitialize+0x64>)
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d105      	bne.n	80041f6 <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80041ea:	4b08      	ldr	r3, [pc, #32]	@ (800420c <osKernelInitialize+0x64>)
 80041ec:	2201      	movs	r2, #1
 80041ee:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80041f0:	2300      	movs	r3, #0
 80041f2:	60fb      	str	r3, [r7, #12]
 80041f4:	e002      	b.n	80041fc <osKernelInitialize+0x54>
    } else {
      stat = osError;
 80041f6:	f04f 33ff 	mov.w	r3, #4294967295
 80041fa:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80041fc:	68fb      	ldr	r3, [r7, #12]
}
 80041fe:	4618      	mov	r0, r3
 8004200:	3714      	adds	r7, #20
 8004202:	46bd      	mov	sp, r7
 8004204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004208:	4770      	bx	lr
 800420a:	bf00      	nop
 800420c:	200006b4 	.word	0x200006b4

08004210 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8004210:	b580      	push	{r7, lr}
 8004212:	b084      	sub	sp, #16
 8004214:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004216:	f3ef 8305 	mrs	r3, IPSR
 800421a:	60bb      	str	r3, [r7, #8]
  return(result);
 800421c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800421e:	2b00      	cmp	r3, #0
 8004220:	d10f      	bne.n	8004242 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004222:	f3ef 8310 	mrs	r3, PRIMASK
 8004226:	607b      	str	r3, [r7, #4]
  return(result);
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	2b00      	cmp	r3, #0
 800422c:	d105      	bne.n	800423a <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800422e:	f3ef 8311 	mrs	r3, BASEPRI
 8004232:	603b      	str	r3, [r7, #0]
  return(result);
 8004234:	683b      	ldr	r3, [r7, #0]
 8004236:	2b00      	cmp	r3, #0
 8004238:	d007      	beq.n	800424a <osKernelStart+0x3a>
 800423a:	4b0f      	ldr	r3, [pc, #60]	@ (8004278 <osKernelStart+0x68>)
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	2b02      	cmp	r3, #2
 8004240:	d103      	bne.n	800424a <osKernelStart+0x3a>
    stat = osErrorISR;
 8004242:	f06f 0305 	mvn.w	r3, #5
 8004246:	60fb      	str	r3, [r7, #12]
 8004248:	e010      	b.n	800426c <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 800424a:	4b0b      	ldr	r3, [pc, #44]	@ (8004278 <osKernelStart+0x68>)
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	2b01      	cmp	r3, #1
 8004250:	d109      	bne.n	8004266 <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8004252:	f7ff ffa2 	bl	800419a <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8004256:	4b08      	ldr	r3, [pc, #32]	@ (8004278 <osKernelStart+0x68>)
 8004258:	2202      	movs	r2, #2
 800425a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800425c:	f001 f8e2 	bl	8005424 <vTaskStartScheduler>
      stat = osOK;
 8004260:	2300      	movs	r3, #0
 8004262:	60fb      	str	r3, [r7, #12]
 8004264:	e002      	b.n	800426c <osKernelStart+0x5c>
    } else {
      stat = osError;
 8004266:	f04f 33ff 	mov.w	r3, #4294967295
 800426a:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800426c:	68fb      	ldr	r3, [r7, #12]
}
 800426e:	4618      	mov	r0, r3
 8004270:	3710      	adds	r7, #16
 8004272:	46bd      	mov	sp, r7
 8004274:	bd80      	pop	{r7, pc}
 8004276:	bf00      	nop
 8004278:	200006b4 	.word	0x200006b4

0800427c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800427c:	b580      	push	{r7, lr}
 800427e:	b090      	sub	sp, #64	@ 0x40
 8004280:	af04      	add	r7, sp, #16
 8004282:	60f8      	str	r0, [r7, #12]
 8004284:	60b9      	str	r1, [r7, #8]
 8004286:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8004288:	2300      	movs	r3, #0
 800428a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800428c:	f3ef 8305 	mrs	r3, IPSR
 8004290:	61fb      	str	r3, [r7, #28]
  return(result);
 8004292:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 8004294:	2b00      	cmp	r3, #0
 8004296:	f040 8090 	bne.w	80043ba <osThreadNew+0x13e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800429a:	f3ef 8310 	mrs	r3, PRIMASK
 800429e:	61bb      	str	r3, [r7, #24]
  return(result);
 80042a0:	69bb      	ldr	r3, [r7, #24]
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d105      	bne.n	80042b2 <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80042a6:	f3ef 8311 	mrs	r3, BASEPRI
 80042aa:	617b      	str	r3, [r7, #20]
  return(result);
 80042ac:	697b      	ldr	r3, [r7, #20]
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d003      	beq.n	80042ba <osThreadNew+0x3e>
 80042b2:	4b44      	ldr	r3, [pc, #272]	@ (80043c4 <osThreadNew+0x148>)
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	2b02      	cmp	r3, #2
 80042b8:	d07f      	beq.n	80043ba <osThreadNew+0x13e>
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d07c      	beq.n	80043ba <osThreadNew+0x13e>
    stack = configMINIMAL_STACK_SIZE;
 80042c0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80042c4:	62bb      	str	r3, [r7, #40]	@ 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 80042c6:	2318      	movs	r3, #24
 80042c8:	627b      	str	r3, [r7, #36]	@ 0x24

    name = NULL;
 80042ca:	2300      	movs	r3, #0
 80042cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    mem  = -1;
 80042ce:	f04f 33ff 	mov.w	r3, #4294967295
 80042d2:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d045      	beq.n	8004366 <osThreadNew+0xea>
      if (attr->name != NULL) {
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d002      	beq.n	80042e8 <osThreadNew+0x6c>
        name = attr->name;
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if (attr->priority != osPriorityNone) {
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	699b      	ldr	r3, [r3, #24]
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d002      	beq.n	80042f6 <osThreadNew+0x7a>
        prio = (UBaseType_t)attr->priority;
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	699b      	ldr	r3, [r3, #24]
 80042f4:	627b      	str	r3, [r7, #36]	@ 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80042f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d008      	beq.n	800430e <osThreadNew+0x92>
 80042fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042fe:	2b38      	cmp	r3, #56	@ 0x38
 8004300:	d805      	bhi.n	800430e <osThreadNew+0x92>
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	685b      	ldr	r3, [r3, #4]
 8004306:	f003 0301 	and.w	r3, r3, #1
 800430a:	2b00      	cmp	r3, #0
 800430c:	d001      	beq.n	8004312 <osThreadNew+0x96>
        return (NULL);
 800430e:	2300      	movs	r3, #0
 8004310:	e054      	b.n	80043bc <osThreadNew+0x140>
      }

      if (attr->stack_size > 0U) {
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	695b      	ldr	r3, [r3, #20]
 8004316:	2b00      	cmp	r3, #0
 8004318:	d003      	beq.n	8004322 <osThreadNew+0xa6>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	695b      	ldr	r3, [r3, #20]
 800431e:	089b      	lsrs	r3, r3, #2
 8004320:	62bb      	str	r3, [r7, #40]	@ 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	689b      	ldr	r3, [r3, #8]
 8004326:	2b00      	cmp	r3, #0
 8004328:	d00e      	beq.n	8004348 <osThreadNew+0xcc>
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	68db      	ldr	r3, [r3, #12]
 800432e:	2ba7      	cmp	r3, #167	@ 0xa7
 8004330:	d90a      	bls.n	8004348 <osThreadNew+0xcc>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004336:	2b00      	cmp	r3, #0
 8004338:	d006      	beq.n	8004348 <osThreadNew+0xcc>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	695b      	ldr	r3, [r3, #20]
 800433e:	2b00      	cmp	r3, #0
 8004340:	d002      	beq.n	8004348 <osThreadNew+0xcc>
        mem = 1;
 8004342:	2301      	movs	r3, #1
 8004344:	623b      	str	r3, [r7, #32]
 8004346:	e010      	b.n	800436a <osThreadNew+0xee>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	689b      	ldr	r3, [r3, #8]
 800434c:	2b00      	cmp	r3, #0
 800434e:	d10c      	bne.n	800436a <osThreadNew+0xee>
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	68db      	ldr	r3, [r3, #12]
 8004354:	2b00      	cmp	r3, #0
 8004356:	d108      	bne.n	800436a <osThreadNew+0xee>
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	691b      	ldr	r3, [r3, #16]
 800435c:	2b00      	cmp	r3, #0
 800435e:	d104      	bne.n	800436a <osThreadNew+0xee>
          mem = 0;
 8004360:	2300      	movs	r3, #0
 8004362:	623b      	str	r3, [r7, #32]
 8004364:	e001      	b.n	800436a <osThreadNew+0xee>
        }
      }
    }
    else {
      mem = 0;
 8004366:	2300      	movs	r3, #0
 8004368:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 800436a:	6a3b      	ldr	r3, [r7, #32]
 800436c:	2b01      	cmp	r3, #1
 800436e:	d110      	bne.n	8004392 <osThreadNew+0x116>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8004374:	687a      	ldr	r2, [r7, #4]
 8004376:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004378:	9202      	str	r2, [sp, #8]
 800437a:	9301      	str	r3, [sp, #4]
 800437c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800437e:	9300      	str	r3, [sp, #0]
 8004380:	68bb      	ldr	r3, [r7, #8]
 8004382:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004384:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004386:	68f8      	ldr	r0, [r7, #12]
 8004388:	f000 fe4e 	bl	8005028 <xTaskCreateStatic>
 800438c:	4603      	mov	r3, r0
 800438e:	613b      	str	r3, [r7, #16]
 8004390:	e013      	b.n	80043ba <osThreadNew+0x13e>
    }
    else {
      if (mem == 0) {
 8004392:	6a3b      	ldr	r3, [r7, #32]
 8004394:	2b00      	cmp	r3, #0
 8004396:	d110      	bne.n	80043ba <osThreadNew+0x13e>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8004398:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800439a:	b29a      	uxth	r2, r3
 800439c:	f107 0310 	add.w	r3, r7, #16
 80043a0:	9301      	str	r3, [sp, #4]
 80043a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043a4:	9300      	str	r3, [sp, #0]
 80043a6:	68bb      	ldr	r3, [r7, #8]
 80043a8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80043aa:	68f8      	ldr	r0, [r7, #12]
 80043ac:	f000 fea2 	bl	80050f4 <xTaskCreate>
 80043b0:	4603      	mov	r3, r0
 80043b2:	2b01      	cmp	r3, #1
 80043b4:	d001      	beq.n	80043ba <osThreadNew+0x13e>
          hTask = NULL;
 80043b6:	2300      	movs	r3, #0
 80043b8:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 80043ba:	693b      	ldr	r3, [r7, #16]
}
 80043bc:	4618      	mov	r0, r3
 80043be:	3730      	adds	r7, #48	@ 0x30
 80043c0:	46bd      	mov	sp, r7
 80043c2:	bd80      	pop	{r7, pc}
 80043c4:	200006b4 	.word	0x200006b4

080043c8 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 80043c8:	b580      	push	{r7, lr}
 80043ca:	b086      	sub	sp, #24
 80043cc:	af00      	add	r7, sp, #0
 80043ce:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80043d0:	f3ef 8305 	mrs	r3, IPSR
 80043d4:	613b      	str	r3, [r7, #16]
  return(result);
 80043d6:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d10f      	bne.n	80043fc <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80043dc:	f3ef 8310 	mrs	r3, PRIMASK
 80043e0:	60fb      	str	r3, [r7, #12]
  return(result);
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d105      	bne.n	80043f4 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80043e8:	f3ef 8311 	mrs	r3, BASEPRI
 80043ec:	60bb      	str	r3, [r7, #8]
  return(result);
 80043ee:	68bb      	ldr	r3, [r7, #8]
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d007      	beq.n	8004404 <osDelay+0x3c>
 80043f4:	4b0a      	ldr	r3, [pc, #40]	@ (8004420 <osDelay+0x58>)
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	2b02      	cmp	r3, #2
 80043fa:	d103      	bne.n	8004404 <osDelay+0x3c>
    stat = osErrorISR;
 80043fc:	f06f 0305 	mvn.w	r3, #5
 8004400:	617b      	str	r3, [r7, #20]
 8004402:	e007      	b.n	8004414 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8004404:	2300      	movs	r3, #0
 8004406:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	2b00      	cmp	r3, #0
 800440c:	d002      	beq.n	8004414 <osDelay+0x4c>
      vTaskDelay(ticks);
 800440e:	6878      	ldr	r0, [r7, #4]
 8004410:	f000 ffd0 	bl	80053b4 <vTaskDelay>
    }
  }

  return (stat);
 8004414:	697b      	ldr	r3, [r7, #20]
}
 8004416:	4618      	mov	r0, r3
 8004418:	3718      	adds	r7, #24
 800441a:	46bd      	mov	sp, r7
 800441c:	bd80      	pop	{r7, pc}
 800441e:	bf00      	nop
 8004420:	200006b4 	.word	0x200006b4

08004424 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8004424:	b480      	push	{r7}
 8004426:	b085      	sub	sp, #20
 8004428:	af00      	add	r7, sp, #0
 800442a:	60f8      	str	r0, [r7, #12]
 800442c:	60b9      	str	r1, [r7, #8]
 800442e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	4a07      	ldr	r2, [pc, #28]	@ (8004450 <vApplicationGetIdleTaskMemory+0x2c>)
 8004434:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8004436:	68bb      	ldr	r3, [r7, #8]
 8004438:	4a06      	ldr	r2, [pc, #24]	@ (8004454 <vApplicationGetIdleTaskMemory+0x30>)
 800443a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004442:	601a      	str	r2, [r3, #0]
}
 8004444:	bf00      	nop
 8004446:	3714      	adds	r7, #20
 8004448:	46bd      	mov	sp, r7
 800444a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800444e:	4770      	bx	lr
 8004450:	200006b8 	.word	0x200006b8
 8004454:	20000760 	.word	0x20000760

08004458 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8004458:	b480      	push	{r7}
 800445a:	b085      	sub	sp, #20
 800445c:	af00      	add	r7, sp, #0
 800445e:	60f8      	str	r0, [r7, #12]
 8004460:	60b9      	str	r1, [r7, #8]
 8004462:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	4a07      	ldr	r2, [pc, #28]	@ (8004484 <vApplicationGetTimerTaskMemory+0x2c>)
 8004468:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800446a:	68bb      	ldr	r3, [r7, #8]
 800446c:	4a06      	ldr	r2, [pc, #24]	@ (8004488 <vApplicationGetTimerTaskMemory+0x30>)
 800446e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004476:	601a      	str	r2, [r3, #0]
}
 8004478:	bf00      	nop
 800447a:	3714      	adds	r7, #20
 800447c:	46bd      	mov	sp, r7
 800447e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004482:	4770      	bx	lr
 8004484:	20000b60 	.word	0x20000b60
 8004488:	20000c08 	.word	0x20000c08

0800448c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800448c:	b480      	push	{r7}
 800448e:	b083      	sub	sp, #12
 8004490:	af00      	add	r7, sp, #0
 8004492:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	f103 0208 	add.w	r2, r3, #8
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	f04f 32ff 	mov.w	r2, #4294967295
 80044a4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	f103 0208 	add.w	r2, r3, #8
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	f103 0208 	add.w	r2, r3, #8
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	2200      	movs	r2, #0
 80044be:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80044c0:	bf00      	nop
 80044c2:	370c      	adds	r7, #12
 80044c4:	46bd      	mov	sp, r7
 80044c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ca:	4770      	bx	lr

080044cc <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80044cc:	b480      	push	{r7}
 80044ce:	b083      	sub	sp, #12
 80044d0:	af00      	add	r7, sp, #0
 80044d2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	2200      	movs	r2, #0
 80044d8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80044da:	bf00      	nop
 80044dc:	370c      	adds	r7, #12
 80044de:	46bd      	mov	sp, r7
 80044e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e4:	4770      	bx	lr

080044e6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80044e6:	b480      	push	{r7}
 80044e8:	b085      	sub	sp, #20
 80044ea:	af00      	add	r7, sp, #0
 80044ec:	6078      	str	r0, [r7, #4]
 80044ee:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	685b      	ldr	r3, [r3, #4]
 80044f4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80044f6:	683b      	ldr	r3, [r7, #0]
 80044f8:	68fa      	ldr	r2, [r7, #12]
 80044fa:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	689a      	ldr	r2, [r3, #8]
 8004500:	683b      	ldr	r3, [r7, #0]
 8004502:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	689b      	ldr	r3, [r3, #8]
 8004508:	683a      	ldr	r2, [r7, #0]
 800450a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	683a      	ldr	r2, [r7, #0]
 8004510:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8004512:	683b      	ldr	r3, [r7, #0]
 8004514:	687a      	ldr	r2, [r7, #4]
 8004516:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	1c5a      	adds	r2, r3, #1
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	601a      	str	r2, [r3, #0]
}
 8004522:	bf00      	nop
 8004524:	3714      	adds	r7, #20
 8004526:	46bd      	mov	sp, r7
 8004528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800452c:	4770      	bx	lr

0800452e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800452e:	b480      	push	{r7}
 8004530:	b085      	sub	sp, #20
 8004532:	af00      	add	r7, sp, #0
 8004534:	6078      	str	r0, [r7, #4]
 8004536:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004538:	683b      	ldr	r3, [r7, #0]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800453e:	68bb      	ldr	r3, [r7, #8]
 8004540:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004544:	d103      	bne.n	800454e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	691b      	ldr	r3, [r3, #16]
 800454a:	60fb      	str	r3, [r7, #12]
 800454c:	e00c      	b.n	8004568 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	3308      	adds	r3, #8
 8004552:	60fb      	str	r3, [r7, #12]
 8004554:	e002      	b.n	800455c <vListInsert+0x2e>
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	685b      	ldr	r3, [r3, #4]
 800455a:	60fb      	str	r3, [r7, #12]
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	685b      	ldr	r3, [r3, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	68ba      	ldr	r2, [r7, #8]
 8004564:	429a      	cmp	r2, r3
 8004566:	d2f6      	bcs.n	8004556 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	685a      	ldr	r2, [r3, #4]
 800456c:	683b      	ldr	r3, [r7, #0]
 800456e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004570:	683b      	ldr	r3, [r7, #0]
 8004572:	685b      	ldr	r3, [r3, #4]
 8004574:	683a      	ldr	r2, [r7, #0]
 8004576:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004578:	683b      	ldr	r3, [r7, #0]
 800457a:	68fa      	ldr	r2, [r7, #12]
 800457c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	683a      	ldr	r2, [r7, #0]
 8004582:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8004584:	683b      	ldr	r3, [r7, #0]
 8004586:	687a      	ldr	r2, [r7, #4]
 8004588:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	1c5a      	adds	r2, r3, #1
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	601a      	str	r2, [r3, #0]
}
 8004594:	bf00      	nop
 8004596:	3714      	adds	r7, #20
 8004598:	46bd      	mov	sp, r7
 800459a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800459e:	4770      	bx	lr

080045a0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80045a0:	b480      	push	{r7}
 80045a2:	b085      	sub	sp, #20
 80045a4:	af00      	add	r7, sp, #0
 80045a6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	691b      	ldr	r3, [r3, #16]
 80045ac:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	685b      	ldr	r3, [r3, #4]
 80045b2:	687a      	ldr	r2, [r7, #4]
 80045b4:	6892      	ldr	r2, [r2, #8]
 80045b6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	689b      	ldr	r3, [r3, #8]
 80045bc:	687a      	ldr	r2, [r7, #4]
 80045be:	6852      	ldr	r2, [r2, #4]
 80045c0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	685b      	ldr	r3, [r3, #4]
 80045c6:	687a      	ldr	r2, [r7, #4]
 80045c8:	429a      	cmp	r2, r3
 80045ca:	d103      	bne.n	80045d4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	689a      	ldr	r2, [r3, #8]
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	2200      	movs	r2, #0
 80045d8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	1e5a      	subs	r2, r3, #1
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	681b      	ldr	r3, [r3, #0]
}
 80045e8:	4618      	mov	r0, r3
 80045ea:	3714      	adds	r7, #20
 80045ec:	46bd      	mov	sp, r7
 80045ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f2:	4770      	bx	lr

080045f4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80045f4:	b580      	push	{r7, lr}
 80045f6:	b084      	sub	sp, #16
 80045f8:	af00      	add	r7, sp, #0
 80045fa:	6078      	str	r0, [r7, #4]
 80045fc:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	2b00      	cmp	r3, #0
 8004606:	d10d      	bne.n	8004624 <xQueueGenericReset+0x30>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004608:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800460c:	b672      	cpsid	i
 800460e:	f383 8811 	msr	BASEPRI, r3
 8004612:	f3bf 8f6f 	isb	sy
 8004616:	f3bf 8f4f 	dsb	sy
 800461a:	b662      	cpsie	i
 800461c:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800461e:	bf00      	nop
 8004620:	bf00      	nop
 8004622:	e7fd      	b.n	8004620 <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 8004624:	f002 f8d2 	bl	80067cc <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	681a      	ldr	r2, [r3, #0]
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004630:	68f9      	ldr	r1, [r7, #12]
 8004632:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8004634:	fb01 f303 	mul.w	r3, r1, r3
 8004638:	441a      	add	r2, r3
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	2200      	movs	r2, #0
 8004642:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	681a      	ldr	r2, [r3, #0]
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	681a      	ldr	r2, [r3, #0]
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004654:	3b01      	subs	r3, #1
 8004656:	68f9      	ldr	r1, [r7, #12]
 8004658:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800465a:	fb01 f303 	mul.w	r3, r1, r3
 800465e:	441a      	add	r2, r3
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	22ff      	movs	r2, #255	@ 0xff
 8004668:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	22ff      	movs	r2, #255	@ 0xff
 8004670:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8004674:	683b      	ldr	r3, [r7, #0]
 8004676:	2b00      	cmp	r3, #0
 8004678:	d114      	bne.n	80046a4 <xQueueGenericReset+0xb0>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	691b      	ldr	r3, [r3, #16]
 800467e:	2b00      	cmp	r3, #0
 8004680:	d01a      	beq.n	80046b8 <xQueueGenericReset+0xc4>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	3310      	adds	r3, #16
 8004686:	4618      	mov	r0, r3
 8004688:	f001 f978 	bl	800597c <xTaskRemoveFromEventList>
 800468c:	4603      	mov	r3, r0
 800468e:	2b00      	cmp	r3, #0
 8004690:	d012      	beq.n	80046b8 <xQueueGenericReset+0xc4>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8004692:	4b0d      	ldr	r3, [pc, #52]	@ (80046c8 <xQueueGenericReset+0xd4>)
 8004694:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004698:	601a      	str	r2, [r3, #0]
 800469a:	f3bf 8f4f 	dsb	sy
 800469e:	f3bf 8f6f 	isb	sy
 80046a2:	e009      	b.n	80046b8 <xQueueGenericReset+0xc4>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	3310      	adds	r3, #16
 80046a8:	4618      	mov	r0, r3
 80046aa:	f7ff feef 	bl	800448c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	3324      	adds	r3, #36	@ 0x24
 80046b2:	4618      	mov	r0, r3
 80046b4:	f7ff feea 	bl	800448c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80046b8:	f002 f8be 	bl	8006838 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80046bc:	2301      	movs	r3, #1
}
 80046be:	4618      	mov	r0, r3
 80046c0:	3710      	adds	r7, #16
 80046c2:	46bd      	mov	sp, r7
 80046c4:	bd80      	pop	{r7, pc}
 80046c6:	bf00      	nop
 80046c8:	e000ed04 	.word	0xe000ed04

080046cc <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80046cc:	b580      	push	{r7, lr}
 80046ce:	b08e      	sub	sp, #56	@ 0x38
 80046d0:	af02      	add	r7, sp, #8
 80046d2:	60f8      	str	r0, [r7, #12]
 80046d4:	60b9      	str	r1, [r7, #8]
 80046d6:	607a      	str	r2, [r7, #4]
 80046d8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d10d      	bne.n	80046fc <xQueueGenericCreateStatic+0x30>
	__asm volatile
 80046e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80046e4:	b672      	cpsid	i
 80046e6:	f383 8811 	msr	BASEPRI, r3
 80046ea:	f3bf 8f6f 	isb	sy
 80046ee:	f3bf 8f4f 	dsb	sy
 80046f2:	b662      	cpsie	i
 80046f4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80046f6:	bf00      	nop
 80046f8:	bf00      	nop
 80046fa:	e7fd      	b.n	80046f8 <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80046fc:	683b      	ldr	r3, [r7, #0]
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d10d      	bne.n	800471e <xQueueGenericCreateStatic+0x52>
	__asm volatile
 8004702:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004706:	b672      	cpsid	i
 8004708:	f383 8811 	msr	BASEPRI, r3
 800470c:	f3bf 8f6f 	isb	sy
 8004710:	f3bf 8f4f 	dsb	sy
 8004714:	b662      	cpsie	i
 8004716:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8004718:	bf00      	nop
 800471a:	bf00      	nop
 800471c:	e7fd      	b.n	800471a <xQueueGenericCreateStatic+0x4e>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	2b00      	cmp	r3, #0
 8004722:	d002      	beq.n	800472a <xQueueGenericCreateStatic+0x5e>
 8004724:	68bb      	ldr	r3, [r7, #8]
 8004726:	2b00      	cmp	r3, #0
 8004728:	d001      	beq.n	800472e <xQueueGenericCreateStatic+0x62>
 800472a:	2301      	movs	r3, #1
 800472c:	e000      	b.n	8004730 <xQueueGenericCreateStatic+0x64>
 800472e:	2300      	movs	r3, #0
 8004730:	2b00      	cmp	r3, #0
 8004732:	d10d      	bne.n	8004750 <xQueueGenericCreateStatic+0x84>
	__asm volatile
 8004734:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004738:	b672      	cpsid	i
 800473a:	f383 8811 	msr	BASEPRI, r3
 800473e:	f3bf 8f6f 	isb	sy
 8004742:	f3bf 8f4f 	dsb	sy
 8004746:	b662      	cpsie	i
 8004748:	623b      	str	r3, [r7, #32]
}
 800474a:	bf00      	nop
 800474c:	bf00      	nop
 800474e:	e7fd      	b.n	800474c <xQueueGenericCreateStatic+0x80>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	2b00      	cmp	r3, #0
 8004754:	d102      	bne.n	800475c <xQueueGenericCreateStatic+0x90>
 8004756:	68bb      	ldr	r3, [r7, #8]
 8004758:	2b00      	cmp	r3, #0
 800475a:	d101      	bne.n	8004760 <xQueueGenericCreateStatic+0x94>
 800475c:	2301      	movs	r3, #1
 800475e:	e000      	b.n	8004762 <xQueueGenericCreateStatic+0x96>
 8004760:	2300      	movs	r3, #0
 8004762:	2b00      	cmp	r3, #0
 8004764:	d10d      	bne.n	8004782 <xQueueGenericCreateStatic+0xb6>
	__asm volatile
 8004766:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800476a:	b672      	cpsid	i
 800476c:	f383 8811 	msr	BASEPRI, r3
 8004770:	f3bf 8f6f 	isb	sy
 8004774:	f3bf 8f4f 	dsb	sy
 8004778:	b662      	cpsie	i
 800477a:	61fb      	str	r3, [r7, #28]
}
 800477c:	bf00      	nop
 800477e:	bf00      	nop
 8004780:	e7fd      	b.n	800477e <xQueueGenericCreateStatic+0xb2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8004782:	2350      	movs	r3, #80	@ 0x50
 8004784:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8004786:	697b      	ldr	r3, [r7, #20]
 8004788:	2b50      	cmp	r3, #80	@ 0x50
 800478a:	d00d      	beq.n	80047a8 <xQueueGenericCreateStatic+0xdc>
	__asm volatile
 800478c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004790:	b672      	cpsid	i
 8004792:	f383 8811 	msr	BASEPRI, r3
 8004796:	f3bf 8f6f 	isb	sy
 800479a:	f3bf 8f4f 	dsb	sy
 800479e:	b662      	cpsie	i
 80047a0:	61bb      	str	r3, [r7, #24]
}
 80047a2:	bf00      	nop
 80047a4:	bf00      	nop
 80047a6:	e7fd      	b.n	80047a4 <xQueueGenericCreateStatic+0xd8>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80047a8:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80047aa:	683b      	ldr	r3, [r7, #0]
 80047ac:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 80047ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d00d      	beq.n	80047d0 <xQueueGenericCreateStatic+0x104>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80047b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80047b6:	2201      	movs	r2, #1
 80047b8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80047bc:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 80047c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80047c2:	9300      	str	r3, [sp, #0]
 80047c4:	4613      	mov	r3, r2
 80047c6:	687a      	ldr	r2, [r7, #4]
 80047c8:	68b9      	ldr	r1, [r7, #8]
 80047ca:	68f8      	ldr	r0, [r7, #12]
 80047cc:	f000 f805 	bl	80047da <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80047d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 80047d2:	4618      	mov	r0, r3
 80047d4:	3730      	adds	r7, #48	@ 0x30
 80047d6:	46bd      	mov	sp, r7
 80047d8:	bd80      	pop	{r7, pc}

080047da <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80047da:	b580      	push	{r7, lr}
 80047dc:	b084      	sub	sp, #16
 80047de:	af00      	add	r7, sp, #0
 80047e0:	60f8      	str	r0, [r7, #12]
 80047e2:	60b9      	str	r1, [r7, #8]
 80047e4:	607a      	str	r2, [r7, #4]
 80047e6:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80047e8:	68bb      	ldr	r3, [r7, #8]
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d103      	bne.n	80047f6 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80047ee:	69bb      	ldr	r3, [r7, #24]
 80047f0:	69ba      	ldr	r2, [r7, #24]
 80047f2:	601a      	str	r2, [r3, #0]
 80047f4:	e002      	b.n	80047fc <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80047f6:	69bb      	ldr	r3, [r7, #24]
 80047f8:	687a      	ldr	r2, [r7, #4]
 80047fa:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80047fc:	69bb      	ldr	r3, [r7, #24]
 80047fe:	68fa      	ldr	r2, [r7, #12]
 8004800:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8004802:	69bb      	ldr	r3, [r7, #24]
 8004804:	68ba      	ldr	r2, [r7, #8]
 8004806:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004808:	2101      	movs	r1, #1
 800480a:	69b8      	ldr	r0, [r7, #24]
 800480c:	f7ff fef2 	bl	80045f4 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8004810:	69bb      	ldr	r3, [r7, #24]
 8004812:	78fa      	ldrb	r2, [r7, #3]
 8004814:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8004818:	bf00      	nop
 800481a:	3710      	adds	r7, #16
 800481c:	46bd      	mov	sp, r7
 800481e:	bd80      	pop	{r7, pc}

08004820 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8004820:	b580      	push	{r7, lr}
 8004822:	b08e      	sub	sp, #56	@ 0x38
 8004824:	af00      	add	r7, sp, #0
 8004826:	60f8      	str	r0, [r7, #12]
 8004828:	60b9      	str	r1, [r7, #8]
 800482a:	607a      	str	r2, [r7, #4]
 800482c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800482e:	2300      	movs	r3, #0
 8004830:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8004836:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004838:	2b00      	cmp	r3, #0
 800483a:	d10d      	bne.n	8004858 <xQueueGenericSend+0x38>
	__asm volatile
 800483c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004840:	b672      	cpsid	i
 8004842:	f383 8811 	msr	BASEPRI, r3
 8004846:	f3bf 8f6f 	isb	sy
 800484a:	f3bf 8f4f 	dsb	sy
 800484e:	b662      	cpsie	i
 8004850:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8004852:	bf00      	nop
 8004854:	bf00      	nop
 8004856:	e7fd      	b.n	8004854 <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004858:	68bb      	ldr	r3, [r7, #8]
 800485a:	2b00      	cmp	r3, #0
 800485c:	d103      	bne.n	8004866 <xQueueGenericSend+0x46>
 800485e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004860:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004862:	2b00      	cmp	r3, #0
 8004864:	d101      	bne.n	800486a <xQueueGenericSend+0x4a>
 8004866:	2301      	movs	r3, #1
 8004868:	e000      	b.n	800486c <xQueueGenericSend+0x4c>
 800486a:	2300      	movs	r3, #0
 800486c:	2b00      	cmp	r3, #0
 800486e:	d10d      	bne.n	800488c <xQueueGenericSend+0x6c>
	__asm volatile
 8004870:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004874:	b672      	cpsid	i
 8004876:	f383 8811 	msr	BASEPRI, r3
 800487a:	f3bf 8f6f 	isb	sy
 800487e:	f3bf 8f4f 	dsb	sy
 8004882:	b662      	cpsie	i
 8004884:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8004886:	bf00      	nop
 8004888:	bf00      	nop
 800488a:	e7fd      	b.n	8004888 <xQueueGenericSend+0x68>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800488c:	683b      	ldr	r3, [r7, #0]
 800488e:	2b02      	cmp	r3, #2
 8004890:	d103      	bne.n	800489a <xQueueGenericSend+0x7a>
 8004892:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004894:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004896:	2b01      	cmp	r3, #1
 8004898:	d101      	bne.n	800489e <xQueueGenericSend+0x7e>
 800489a:	2301      	movs	r3, #1
 800489c:	e000      	b.n	80048a0 <xQueueGenericSend+0x80>
 800489e:	2300      	movs	r3, #0
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d10d      	bne.n	80048c0 <xQueueGenericSend+0xa0>
	__asm volatile
 80048a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80048a8:	b672      	cpsid	i
 80048aa:	f383 8811 	msr	BASEPRI, r3
 80048ae:	f3bf 8f6f 	isb	sy
 80048b2:	f3bf 8f4f 	dsb	sy
 80048b6:	b662      	cpsie	i
 80048b8:	623b      	str	r3, [r7, #32]
}
 80048ba:	bf00      	nop
 80048bc:	bf00      	nop
 80048be:	e7fd      	b.n	80048bc <xQueueGenericSend+0x9c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80048c0:	f001 fa2a 	bl	8005d18 <xTaskGetSchedulerState>
 80048c4:	4603      	mov	r3, r0
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d102      	bne.n	80048d0 <xQueueGenericSend+0xb0>
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d101      	bne.n	80048d4 <xQueueGenericSend+0xb4>
 80048d0:	2301      	movs	r3, #1
 80048d2:	e000      	b.n	80048d6 <xQueueGenericSend+0xb6>
 80048d4:	2300      	movs	r3, #0
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d10d      	bne.n	80048f6 <xQueueGenericSend+0xd6>
	__asm volatile
 80048da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80048de:	b672      	cpsid	i
 80048e0:	f383 8811 	msr	BASEPRI, r3
 80048e4:	f3bf 8f6f 	isb	sy
 80048e8:	f3bf 8f4f 	dsb	sy
 80048ec:	b662      	cpsie	i
 80048ee:	61fb      	str	r3, [r7, #28]
}
 80048f0:	bf00      	nop
 80048f2:	bf00      	nop
 80048f4:	e7fd      	b.n	80048f2 <xQueueGenericSend+0xd2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80048f6:	f001 ff69 	bl	80067cc <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80048fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80048fc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80048fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004900:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004902:	429a      	cmp	r2, r3
 8004904:	d302      	bcc.n	800490c <xQueueGenericSend+0xec>
 8004906:	683b      	ldr	r3, [r7, #0]
 8004908:	2b02      	cmp	r3, #2
 800490a:	d129      	bne.n	8004960 <xQueueGenericSend+0x140>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800490c:	683a      	ldr	r2, [r7, #0]
 800490e:	68b9      	ldr	r1, [r7, #8]
 8004910:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004912:	f000 fa1b 	bl	8004d4c <prvCopyDataToQueue>
 8004916:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004918:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800491a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800491c:	2b00      	cmp	r3, #0
 800491e:	d010      	beq.n	8004942 <xQueueGenericSend+0x122>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004920:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004922:	3324      	adds	r3, #36	@ 0x24
 8004924:	4618      	mov	r0, r3
 8004926:	f001 f829 	bl	800597c <xTaskRemoveFromEventList>
 800492a:	4603      	mov	r3, r0
 800492c:	2b00      	cmp	r3, #0
 800492e:	d013      	beq.n	8004958 <xQueueGenericSend+0x138>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8004930:	4b3f      	ldr	r3, [pc, #252]	@ (8004a30 <xQueueGenericSend+0x210>)
 8004932:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004936:	601a      	str	r2, [r3, #0]
 8004938:	f3bf 8f4f 	dsb	sy
 800493c:	f3bf 8f6f 	isb	sy
 8004940:	e00a      	b.n	8004958 <xQueueGenericSend+0x138>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8004942:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004944:	2b00      	cmp	r3, #0
 8004946:	d007      	beq.n	8004958 <xQueueGenericSend+0x138>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8004948:	4b39      	ldr	r3, [pc, #228]	@ (8004a30 <xQueueGenericSend+0x210>)
 800494a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800494e:	601a      	str	r2, [r3, #0]
 8004950:	f3bf 8f4f 	dsb	sy
 8004954:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8004958:	f001 ff6e 	bl	8006838 <vPortExitCritical>
				return pdPASS;
 800495c:	2301      	movs	r3, #1
 800495e:	e063      	b.n	8004a28 <xQueueGenericSend+0x208>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	2b00      	cmp	r3, #0
 8004964:	d103      	bne.n	800496e <xQueueGenericSend+0x14e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004966:	f001 ff67 	bl	8006838 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800496a:	2300      	movs	r3, #0
 800496c:	e05c      	b.n	8004a28 <xQueueGenericSend+0x208>
				}
				else if( xEntryTimeSet == pdFALSE )
 800496e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004970:	2b00      	cmp	r3, #0
 8004972:	d106      	bne.n	8004982 <xQueueGenericSend+0x162>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004974:	f107 0314 	add.w	r3, r7, #20
 8004978:	4618      	mov	r0, r3
 800497a:	f001 f865 	bl	8005a48 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800497e:	2301      	movs	r3, #1
 8004980:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004982:	f001 ff59 	bl	8006838 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004986:	f000 fdc1 	bl	800550c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800498a:	f001 ff1f 	bl	80067cc <vPortEnterCritical>
 800498e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004990:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004994:	b25b      	sxtb	r3, r3
 8004996:	f1b3 3fff 	cmp.w	r3, #4294967295
 800499a:	d103      	bne.n	80049a4 <xQueueGenericSend+0x184>
 800499c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800499e:	2200      	movs	r2, #0
 80049a0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80049a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80049a6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80049aa:	b25b      	sxtb	r3, r3
 80049ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049b0:	d103      	bne.n	80049ba <xQueueGenericSend+0x19a>
 80049b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80049b4:	2200      	movs	r2, #0
 80049b6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80049ba:	f001 ff3d 	bl	8006838 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80049be:	1d3a      	adds	r2, r7, #4
 80049c0:	f107 0314 	add.w	r3, r7, #20
 80049c4:	4611      	mov	r1, r2
 80049c6:	4618      	mov	r0, r3
 80049c8:	f001 f854 	bl	8005a74 <xTaskCheckForTimeOut>
 80049cc:	4603      	mov	r3, r0
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d124      	bne.n	8004a1c <xQueueGenericSend+0x1fc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80049d2:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80049d4:	f000 fab2 	bl	8004f3c <prvIsQueueFull>
 80049d8:	4603      	mov	r3, r0
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d018      	beq.n	8004a10 <xQueueGenericSend+0x1f0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80049de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80049e0:	3310      	adds	r3, #16
 80049e2:	687a      	ldr	r2, [r7, #4]
 80049e4:	4611      	mov	r1, r2
 80049e6:	4618      	mov	r0, r3
 80049e8:	f000 ff72 	bl	80058d0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80049ec:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80049ee:	f000 fa3d 	bl	8004e6c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80049f2:	f000 fd99 	bl	8005528 <xTaskResumeAll>
 80049f6:	4603      	mov	r3, r0
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	f47f af7c 	bne.w	80048f6 <xQueueGenericSend+0xd6>
				{
					portYIELD_WITHIN_API();
 80049fe:	4b0c      	ldr	r3, [pc, #48]	@ (8004a30 <xQueueGenericSend+0x210>)
 8004a00:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004a04:	601a      	str	r2, [r3, #0]
 8004a06:	f3bf 8f4f 	dsb	sy
 8004a0a:	f3bf 8f6f 	isb	sy
 8004a0e:	e772      	b.n	80048f6 <xQueueGenericSend+0xd6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8004a10:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004a12:	f000 fa2b 	bl	8004e6c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004a16:	f000 fd87 	bl	8005528 <xTaskResumeAll>
 8004a1a:	e76c      	b.n	80048f6 <xQueueGenericSend+0xd6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8004a1c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004a1e:	f000 fa25 	bl	8004e6c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004a22:	f000 fd81 	bl	8005528 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8004a26:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8004a28:	4618      	mov	r0, r3
 8004a2a:	3738      	adds	r7, #56	@ 0x38
 8004a2c:	46bd      	mov	sp, r7
 8004a2e:	bd80      	pop	{r7, pc}
 8004a30:	e000ed04 	.word	0xe000ed04

08004a34 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8004a34:	b580      	push	{r7, lr}
 8004a36:	b08e      	sub	sp, #56	@ 0x38
 8004a38:	af00      	add	r7, sp, #0
 8004a3a:	60f8      	str	r0, [r7, #12]
 8004a3c:	60b9      	str	r1, [r7, #8]
 8004a3e:	607a      	str	r2, [r7, #4]
 8004a40:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8004a46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d10d      	bne.n	8004a68 <xQueueGenericSendFromISR+0x34>
	__asm volatile
 8004a4c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a50:	b672      	cpsid	i
 8004a52:	f383 8811 	msr	BASEPRI, r3
 8004a56:	f3bf 8f6f 	isb	sy
 8004a5a:	f3bf 8f4f 	dsb	sy
 8004a5e:	b662      	cpsie	i
 8004a60:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8004a62:	bf00      	nop
 8004a64:	bf00      	nop
 8004a66:	e7fd      	b.n	8004a64 <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004a68:	68bb      	ldr	r3, [r7, #8]
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d103      	bne.n	8004a76 <xQueueGenericSendFromISR+0x42>
 8004a6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d101      	bne.n	8004a7a <xQueueGenericSendFromISR+0x46>
 8004a76:	2301      	movs	r3, #1
 8004a78:	e000      	b.n	8004a7c <xQueueGenericSendFromISR+0x48>
 8004a7a:	2300      	movs	r3, #0
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d10d      	bne.n	8004a9c <xQueueGenericSendFromISR+0x68>
	__asm volatile
 8004a80:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a84:	b672      	cpsid	i
 8004a86:	f383 8811 	msr	BASEPRI, r3
 8004a8a:	f3bf 8f6f 	isb	sy
 8004a8e:	f3bf 8f4f 	dsb	sy
 8004a92:	b662      	cpsie	i
 8004a94:	623b      	str	r3, [r7, #32]
}
 8004a96:	bf00      	nop
 8004a98:	bf00      	nop
 8004a9a:	e7fd      	b.n	8004a98 <xQueueGenericSendFromISR+0x64>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004a9c:	683b      	ldr	r3, [r7, #0]
 8004a9e:	2b02      	cmp	r3, #2
 8004aa0:	d103      	bne.n	8004aaa <xQueueGenericSendFromISR+0x76>
 8004aa2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004aa4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004aa6:	2b01      	cmp	r3, #1
 8004aa8:	d101      	bne.n	8004aae <xQueueGenericSendFromISR+0x7a>
 8004aaa:	2301      	movs	r3, #1
 8004aac:	e000      	b.n	8004ab0 <xQueueGenericSendFromISR+0x7c>
 8004aae:	2300      	movs	r3, #0
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d10d      	bne.n	8004ad0 <xQueueGenericSendFromISR+0x9c>
	__asm volatile
 8004ab4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ab8:	b672      	cpsid	i
 8004aba:	f383 8811 	msr	BASEPRI, r3
 8004abe:	f3bf 8f6f 	isb	sy
 8004ac2:	f3bf 8f4f 	dsb	sy
 8004ac6:	b662      	cpsie	i
 8004ac8:	61fb      	str	r3, [r7, #28]
}
 8004aca:	bf00      	nop
 8004acc:	bf00      	nop
 8004ace:	e7fd      	b.n	8004acc <xQueueGenericSendFromISR+0x98>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004ad0:	f001 ff64 	bl	800699c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8004ad4:	f3ef 8211 	mrs	r2, BASEPRI
 8004ad8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004adc:	b672      	cpsid	i
 8004ade:	f383 8811 	msr	BASEPRI, r3
 8004ae2:	f3bf 8f6f 	isb	sy
 8004ae6:	f3bf 8f4f 	dsb	sy
 8004aea:	b662      	cpsie	i
 8004aec:	61ba      	str	r2, [r7, #24]
 8004aee:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8004af0:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004af2:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004af4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004af6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004af8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004afa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004afc:	429a      	cmp	r2, r3
 8004afe:	d302      	bcc.n	8004b06 <xQueueGenericSendFromISR+0xd2>
 8004b00:	683b      	ldr	r3, [r7, #0]
 8004b02:	2b02      	cmp	r3, #2
 8004b04:	d12c      	bne.n	8004b60 <xQueueGenericSendFromISR+0x12c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8004b06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b08:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004b0c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004b10:	683a      	ldr	r2, [r7, #0]
 8004b12:	68b9      	ldr	r1, [r7, #8]
 8004b14:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004b16:	f000 f919 	bl	8004d4c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8004b1a:	f997 302b 	ldrsb.w	r3, [r7, #43]	@ 0x2b
 8004b1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b22:	d112      	bne.n	8004b4a <xQueueGenericSendFromISR+0x116>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004b24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d016      	beq.n	8004b5a <xQueueGenericSendFromISR+0x126>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004b2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b2e:	3324      	adds	r3, #36	@ 0x24
 8004b30:	4618      	mov	r0, r3
 8004b32:	f000 ff23 	bl	800597c <xTaskRemoveFromEventList>
 8004b36:	4603      	mov	r3, r0
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d00e      	beq.n	8004b5a <xQueueGenericSendFromISR+0x126>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d00b      	beq.n	8004b5a <xQueueGenericSendFromISR+0x126>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	2201      	movs	r2, #1
 8004b46:	601a      	str	r2, [r3, #0]
 8004b48:	e007      	b.n	8004b5a <xQueueGenericSendFromISR+0x126>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004b4a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8004b4e:	3301      	adds	r3, #1
 8004b50:	b2db      	uxtb	r3, r3
 8004b52:	b25a      	sxtb	r2, r3
 8004b54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b56:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8004b5a:	2301      	movs	r3, #1
 8004b5c:	637b      	str	r3, [r7, #52]	@ 0x34
		{
 8004b5e:	e001      	b.n	8004b64 <xQueueGenericSendFromISR+0x130>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8004b60:	2300      	movs	r3, #0
 8004b62:	637b      	str	r3, [r7, #52]	@ 0x34
 8004b64:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004b66:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004b68:	693b      	ldr	r3, [r7, #16]
 8004b6a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8004b6e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004b70:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8004b72:	4618      	mov	r0, r3
 8004b74:	3738      	adds	r7, #56	@ 0x38
 8004b76:	46bd      	mov	sp, r7
 8004b78:	bd80      	pop	{r7, pc}
	...

08004b7c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8004b7c:	b580      	push	{r7, lr}
 8004b7e:	b08c      	sub	sp, #48	@ 0x30
 8004b80:	af00      	add	r7, sp, #0
 8004b82:	60f8      	str	r0, [r7, #12]
 8004b84:	60b9      	str	r1, [r7, #8]
 8004b86:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8004b88:	2300      	movs	r3, #0
 8004b8a:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004b90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d10d      	bne.n	8004bb2 <xQueueReceive+0x36>
	__asm volatile
 8004b96:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b9a:	b672      	cpsid	i
 8004b9c:	f383 8811 	msr	BASEPRI, r3
 8004ba0:	f3bf 8f6f 	isb	sy
 8004ba4:	f3bf 8f4f 	dsb	sy
 8004ba8:	b662      	cpsie	i
 8004baa:	623b      	str	r3, [r7, #32]
}
 8004bac:	bf00      	nop
 8004bae:	bf00      	nop
 8004bb0:	e7fd      	b.n	8004bae <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004bb2:	68bb      	ldr	r3, [r7, #8]
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d103      	bne.n	8004bc0 <xQueueReceive+0x44>
 8004bb8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004bba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d101      	bne.n	8004bc4 <xQueueReceive+0x48>
 8004bc0:	2301      	movs	r3, #1
 8004bc2:	e000      	b.n	8004bc6 <xQueueReceive+0x4a>
 8004bc4:	2300      	movs	r3, #0
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d10d      	bne.n	8004be6 <xQueueReceive+0x6a>
	__asm volatile
 8004bca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004bce:	b672      	cpsid	i
 8004bd0:	f383 8811 	msr	BASEPRI, r3
 8004bd4:	f3bf 8f6f 	isb	sy
 8004bd8:	f3bf 8f4f 	dsb	sy
 8004bdc:	b662      	cpsie	i
 8004bde:	61fb      	str	r3, [r7, #28]
}
 8004be0:	bf00      	nop
 8004be2:	bf00      	nop
 8004be4:	e7fd      	b.n	8004be2 <xQueueReceive+0x66>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004be6:	f001 f897 	bl	8005d18 <xTaskGetSchedulerState>
 8004bea:	4603      	mov	r3, r0
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d102      	bne.n	8004bf6 <xQueueReceive+0x7a>
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d101      	bne.n	8004bfa <xQueueReceive+0x7e>
 8004bf6:	2301      	movs	r3, #1
 8004bf8:	e000      	b.n	8004bfc <xQueueReceive+0x80>
 8004bfa:	2300      	movs	r3, #0
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d10d      	bne.n	8004c1c <xQueueReceive+0xa0>
	__asm volatile
 8004c00:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c04:	b672      	cpsid	i
 8004c06:	f383 8811 	msr	BASEPRI, r3
 8004c0a:	f3bf 8f6f 	isb	sy
 8004c0e:	f3bf 8f4f 	dsb	sy
 8004c12:	b662      	cpsie	i
 8004c14:	61bb      	str	r3, [r7, #24]
}
 8004c16:	bf00      	nop
 8004c18:	bf00      	nop
 8004c1a:	e7fd      	b.n	8004c18 <xQueueReceive+0x9c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004c1c:	f001 fdd6 	bl	80067cc <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004c20:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c22:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c24:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004c26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d01f      	beq.n	8004c6c <xQueueReceive+0xf0>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004c2c:	68b9      	ldr	r1, [r7, #8]
 8004c2e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004c30:	f000 f8f6 	bl	8004e20 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004c34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c36:	1e5a      	subs	r2, r3, #1
 8004c38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c3a:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004c3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c3e:	691b      	ldr	r3, [r3, #16]
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d00f      	beq.n	8004c64 <xQueueReceive+0xe8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004c44:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c46:	3310      	adds	r3, #16
 8004c48:	4618      	mov	r0, r3
 8004c4a:	f000 fe97 	bl	800597c <xTaskRemoveFromEventList>
 8004c4e:	4603      	mov	r3, r0
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d007      	beq.n	8004c64 <xQueueReceive+0xe8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004c54:	4b3c      	ldr	r3, [pc, #240]	@ (8004d48 <xQueueReceive+0x1cc>)
 8004c56:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004c5a:	601a      	str	r2, [r3, #0]
 8004c5c:	f3bf 8f4f 	dsb	sy
 8004c60:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004c64:	f001 fde8 	bl	8006838 <vPortExitCritical>
				return pdPASS;
 8004c68:	2301      	movs	r3, #1
 8004c6a:	e069      	b.n	8004d40 <xQueueReceive+0x1c4>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d103      	bne.n	8004c7a <xQueueReceive+0xfe>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004c72:	f001 fde1 	bl	8006838 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004c76:	2300      	movs	r3, #0
 8004c78:	e062      	b.n	8004d40 <xQueueReceive+0x1c4>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004c7a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d106      	bne.n	8004c8e <xQueueReceive+0x112>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004c80:	f107 0310 	add.w	r3, r7, #16
 8004c84:	4618      	mov	r0, r3
 8004c86:	f000 fedf 	bl	8005a48 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004c8a:	2301      	movs	r3, #1
 8004c8c:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004c8e:	f001 fdd3 	bl	8006838 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004c92:	f000 fc3b 	bl	800550c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004c96:	f001 fd99 	bl	80067cc <vPortEnterCritical>
 8004c9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c9c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004ca0:	b25b      	sxtb	r3, r3
 8004ca2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ca6:	d103      	bne.n	8004cb0 <xQueueReceive+0x134>
 8004ca8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004caa:	2200      	movs	r2, #0
 8004cac:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004cb0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004cb2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004cb6:	b25b      	sxtb	r3, r3
 8004cb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004cbc:	d103      	bne.n	8004cc6 <xQueueReceive+0x14a>
 8004cbe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004cc0:	2200      	movs	r2, #0
 8004cc2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004cc6:	f001 fdb7 	bl	8006838 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004cca:	1d3a      	adds	r2, r7, #4
 8004ccc:	f107 0310 	add.w	r3, r7, #16
 8004cd0:	4611      	mov	r1, r2
 8004cd2:	4618      	mov	r0, r3
 8004cd4:	f000 fece 	bl	8005a74 <xTaskCheckForTimeOut>
 8004cd8:	4603      	mov	r3, r0
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d123      	bne.n	8004d26 <xQueueReceive+0x1aa>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004cde:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004ce0:	f000 f916 	bl	8004f10 <prvIsQueueEmpty>
 8004ce4:	4603      	mov	r3, r0
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d017      	beq.n	8004d1a <xQueueReceive+0x19e>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004cea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004cec:	3324      	adds	r3, #36	@ 0x24
 8004cee:	687a      	ldr	r2, [r7, #4]
 8004cf0:	4611      	mov	r1, r2
 8004cf2:	4618      	mov	r0, r3
 8004cf4:	f000 fdec 	bl	80058d0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004cf8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004cfa:	f000 f8b7 	bl	8004e6c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004cfe:	f000 fc13 	bl	8005528 <xTaskResumeAll>
 8004d02:	4603      	mov	r3, r0
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d189      	bne.n	8004c1c <xQueueReceive+0xa0>
				{
					portYIELD_WITHIN_API();
 8004d08:	4b0f      	ldr	r3, [pc, #60]	@ (8004d48 <xQueueReceive+0x1cc>)
 8004d0a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004d0e:	601a      	str	r2, [r3, #0]
 8004d10:	f3bf 8f4f 	dsb	sy
 8004d14:	f3bf 8f6f 	isb	sy
 8004d18:	e780      	b.n	8004c1c <xQueueReceive+0xa0>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8004d1a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004d1c:	f000 f8a6 	bl	8004e6c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004d20:	f000 fc02 	bl	8005528 <xTaskResumeAll>
 8004d24:	e77a      	b.n	8004c1c <xQueueReceive+0xa0>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8004d26:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004d28:	f000 f8a0 	bl	8004e6c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004d2c:	f000 fbfc 	bl	8005528 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004d30:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004d32:	f000 f8ed 	bl	8004f10 <prvIsQueueEmpty>
 8004d36:	4603      	mov	r3, r0
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	f43f af6f 	beq.w	8004c1c <xQueueReceive+0xa0>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004d3e:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8004d40:	4618      	mov	r0, r3
 8004d42:	3730      	adds	r7, #48	@ 0x30
 8004d44:	46bd      	mov	sp, r7
 8004d46:	bd80      	pop	{r7, pc}
 8004d48:	e000ed04 	.word	0xe000ed04

08004d4c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8004d4c:	b580      	push	{r7, lr}
 8004d4e:	b086      	sub	sp, #24
 8004d50:	af00      	add	r7, sp, #0
 8004d52:	60f8      	str	r0, [r7, #12]
 8004d54:	60b9      	str	r1, [r7, #8]
 8004d56:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8004d58:	2300      	movs	r3, #0
 8004d5a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d60:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d10d      	bne.n	8004d86 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d14d      	bne.n	8004e0e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	689b      	ldr	r3, [r3, #8]
 8004d76:	4618      	mov	r0, r3
 8004d78:	f000 ffec 	bl	8005d54 <xTaskPriorityDisinherit>
 8004d7c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	2200      	movs	r2, #0
 8004d82:	609a      	str	r2, [r3, #8]
 8004d84:	e043      	b.n	8004e0e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d119      	bne.n	8004dc0 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	6858      	ldr	r0, [r3, #4]
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d94:	461a      	mov	r2, r3
 8004d96:	68b9      	ldr	r1, [r7, #8]
 8004d98:	f01f fcf5 	bl	8024786 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	685a      	ldr	r2, [r3, #4]
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004da4:	441a      	add	r2, r3
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	685a      	ldr	r2, [r3, #4]
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	689b      	ldr	r3, [r3, #8]
 8004db2:	429a      	cmp	r2, r3
 8004db4:	d32b      	bcc.n	8004e0e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	681a      	ldr	r2, [r3, #0]
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	605a      	str	r2, [r3, #4]
 8004dbe:	e026      	b.n	8004e0e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	68d8      	ldr	r0, [r3, #12]
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004dc8:	461a      	mov	r2, r3
 8004dca:	68b9      	ldr	r1, [r7, #8]
 8004dcc:	f01f fcdb 	bl	8024786 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	68da      	ldr	r2, [r3, #12]
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004dd8:	425b      	negs	r3, r3
 8004dda:	441a      	add	r2, r3
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	68da      	ldr	r2, [r3, #12]
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	429a      	cmp	r2, r3
 8004dea:	d207      	bcs.n	8004dfc <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	689a      	ldr	r2, [r3, #8]
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004df4:	425b      	negs	r3, r3
 8004df6:	441a      	add	r2, r3
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	2b02      	cmp	r3, #2
 8004e00:	d105      	bne.n	8004e0e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004e02:	693b      	ldr	r3, [r7, #16]
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d002      	beq.n	8004e0e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8004e08:	693b      	ldr	r3, [r7, #16]
 8004e0a:	3b01      	subs	r3, #1
 8004e0c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004e0e:	693b      	ldr	r3, [r7, #16]
 8004e10:	1c5a      	adds	r2, r3, #1
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8004e16:	697b      	ldr	r3, [r7, #20]
}
 8004e18:	4618      	mov	r0, r3
 8004e1a:	3718      	adds	r7, #24
 8004e1c:	46bd      	mov	sp, r7
 8004e1e:	bd80      	pop	{r7, pc}

08004e20 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8004e20:	b580      	push	{r7, lr}
 8004e22:	b082      	sub	sp, #8
 8004e24:	af00      	add	r7, sp, #0
 8004e26:	6078      	str	r0, [r7, #4]
 8004e28:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d018      	beq.n	8004e64 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	68da      	ldr	r2, [r3, #12]
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e3a:	441a      	add	r2, r3
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	68da      	ldr	r2, [r3, #12]
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	689b      	ldr	r3, [r3, #8]
 8004e48:	429a      	cmp	r2, r3
 8004e4a:	d303      	bcc.n	8004e54 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681a      	ldr	r2, [r3, #0]
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	68d9      	ldr	r1, [r3, #12]
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e5c:	461a      	mov	r2, r3
 8004e5e:	6838      	ldr	r0, [r7, #0]
 8004e60:	f01f fc91 	bl	8024786 <memcpy>
	}
}
 8004e64:	bf00      	nop
 8004e66:	3708      	adds	r7, #8
 8004e68:	46bd      	mov	sp, r7
 8004e6a:	bd80      	pop	{r7, pc}

08004e6c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8004e6c:	b580      	push	{r7, lr}
 8004e6e:	b084      	sub	sp, #16
 8004e70:	af00      	add	r7, sp, #0
 8004e72:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8004e74:	f001 fcaa 	bl	80067cc <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004e7e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004e80:	e011      	b.n	8004ea6 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d012      	beq.n	8004eb0 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	3324      	adds	r3, #36	@ 0x24
 8004e8e:	4618      	mov	r0, r3
 8004e90:	f000 fd74 	bl	800597c <xTaskRemoveFromEventList>
 8004e94:	4603      	mov	r3, r0
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d001      	beq.n	8004e9e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8004e9a:	f000 fe53 	bl	8005b44 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8004e9e:	7bfb      	ldrb	r3, [r7, #15]
 8004ea0:	3b01      	subs	r3, #1
 8004ea2:	b2db      	uxtb	r3, r3
 8004ea4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004ea6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	dce9      	bgt.n	8004e82 <prvUnlockQueue+0x16>
 8004eae:	e000      	b.n	8004eb2 <prvUnlockQueue+0x46>
					break;
 8004eb0:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	22ff      	movs	r2, #255	@ 0xff
 8004eb6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8004eba:	f001 fcbd 	bl	8006838 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8004ebe:	f001 fc85 	bl	80067cc <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004ec8:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004eca:	e011      	b.n	8004ef0 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	691b      	ldr	r3, [r3, #16]
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d012      	beq.n	8004efa <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	3310      	adds	r3, #16
 8004ed8:	4618      	mov	r0, r3
 8004eda:	f000 fd4f 	bl	800597c <xTaskRemoveFromEventList>
 8004ede:	4603      	mov	r3, r0
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d001      	beq.n	8004ee8 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8004ee4:	f000 fe2e 	bl	8005b44 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8004ee8:	7bbb      	ldrb	r3, [r7, #14]
 8004eea:	3b01      	subs	r3, #1
 8004eec:	b2db      	uxtb	r3, r3
 8004eee:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004ef0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	dce9      	bgt.n	8004ecc <prvUnlockQueue+0x60>
 8004ef8:	e000      	b.n	8004efc <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8004efa:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	22ff      	movs	r2, #255	@ 0xff
 8004f00:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8004f04:	f001 fc98 	bl	8006838 <vPortExitCritical>
}
 8004f08:	bf00      	nop
 8004f0a:	3710      	adds	r7, #16
 8004f0c:	46bd      	mov	sp, r7
 8004f0e:	bd80      	pop	{r7, pc}

08004f10 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8004f10:	b580      	push	{r7, lr}
 8004f12:	b084      	sub	sp, #16
 8004f14:	af00      	add	r7, sp, #0
 8004f16:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004f18:	f001 fc58 	bl	80067cc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d102      	bne.n	8004f2a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8004f24:	2301      	movs	r3, #1
 8004f26:	60fb      	str	r3, [r7, #12]
 8004f28:	e001      	b.n	8004f2e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8004f2a:	2300      	movs	r3, #0
 8004f2c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004f2e:	f001 fc83 	bl	8006838 <vPortExitCritical>

	return xReturn;
 8004f32:	68fb      	ldr	r3, [r7, #12]
}
 8004f34:	4618      	mov	r0, r3
 8004f36:	3710      	adds	r7, #16
 8004f38:	46bd      	mov	sp, r7
 8004f3a:	bd80      	pop	{r7, pc}

08004f3c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8004f3c:	b580      	push	{r7, lr}
 8004f3e:	b084      	sub	sp, #16
 8004f40:	af00      	add	r7, sp, #0
 8004f42:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004f44:	f001 fc42 	bl	80067cc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004f50:	429a      	cmp	r2, r3
 8004f52:	d102      	bne.n	8004f5a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8004f54:	2301      	movs	r3, #1
 8004f56:	60fb      	str	r3, [r7, #12]
 8004f58:	e001      	b.n	8004f5e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8004f5a:	2300      	movs	r3, #0
 8004f5c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004f5e:	f001 fc6b 	bl	8006838 <vPortExitCritical>

	return xReturn;
 8004f62:	68fb      	ldr	r3, [r7, #12]
}
 8004f64:	4618      	mov	r0, r3
 8004f66:	3710      	adds	r7, #16
 8004f68:	46bd      	mov	sp, r7
 8004f6a:	bd80      	pop	{r7, pc}

08004f6c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8004f6c:	b480      	push	{r7}
 8004f6e:	b085      	sub	sp, #20
 8004f70:	af00      	add	r7, sp, #0
 8004f72:	6078      	str	r0, [r7, #4]
 8004f74:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004f76:	2300      	movs	r3, #0
 8004f78:	60fb      	str	r3, [r7, #12]
 8004f7a:	e014      	b.n	8004fa6 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8004f7c:	4a0f      	ldr	r2, [pc, #60]	@ (8004fbc <vQueueAddToRegistry+0x50>)
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d10b      	bne.n	8004fa0 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8004f88:	490c      	ldr	r1, [pc, #48]	@ (8004fbc <vQueueAddToRegistry+0x50>)
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	683a      	ldr	r2, [r7, #0]
 8004f8e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8004f92:	4a0a      	ldr	r2, [pc, #40]	@ (8004fbc <vQueueAddToRegistry+0x50>)
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	00db      	lsls	r3, r3, #3
 8004f98:	4413      	add	r3, r2
 8004f9a:	687a      	ldr	r2, [r7, #4]
 8004f9c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8004f9e:	e006      	b.n	8004fae <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	3301      	adds	r3, #1
 8004fa4:	60fb      	str	r3, [r7, #12]
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	2b07      	cmp	r3, #7
 8004faa:	d9e7      	bls.n	8004f7c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8004fac:	bf00      	nop
 8004fae:	bf00      	nop
 8004fb0:	3714      	adds	r7, #20
 8004fb2:	46bd      	mov	sp, r7
 8004fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb8:	4770      	bx	lr
 8004fba:	bf00      	nop
 8004fbc:	20001408 	.word	0x20001408

08004fc0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004fc0:	b580      	push	{r7, lr}
 8004fc2:	b086      	sub	sp, #24
 8004fc4:	af00      	add	r7, sp, #0
 8004fc6:	60f8      	str	r0, [r7, #12]
 8004fc8:	60b9      	str	r1, [r7, #8]
 8004fca:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8004fd0:	f001 fbfc 	bl	80067cc <vPortEnterCritical>
 8004fd4:	697b      	ldr	r3, [r7, #20]
 8004fd6:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004fda:	b25b      	sxtb	r3, r3
 8004fdc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004fe0:	d103      	bne.n	8004fea <vQueueWaitForMessageRestricted+0x2a>
 8004fe2:	697b      	ldr	r3, [r7, #20]
 8004fe4:	2200      	movs	r2, #0
 8004fe6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004fea:	697b      	ldr	r3, [r7, #20]
 8004fec:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004ff0:	b25b      	sxtb	r3, r3
 8004ff2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ff6:	d103      	bne.n	8005000 <vQueueWaitForMessageRestricted+0x40>
 8004ff8:	697b      	ldr	r3, [r7, #20]
 8004ffa:	2200      	movs	r2, #0
 8004ffc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005000:	f001 fc1a 	bl	8006838 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8005004:	697b      	ldr	r3, [r7, #20]
 8005006:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005008:	2b00      	cmp	r3, #0
 800500a:	d106      	bne.n	800501a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800500c:	697b      	ldr	r3, [r7, #20]
 800500e:	3324      	adds	r3, #36	@ 0x24
 8005010:	687a      	ldr	r2, [r7, #4]
 8005012:	68b9      	ldr	r1, [r7, #8]
 8005014:	4618      	mov	r0, r3
 8005016:	f000 fc83 	bl	8005920 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800501a:	6978      	ldr	r0, [r7, #20]
 800501c:	f7ff ff26 	bl	8004e6c <prvUnlockQueue>
	}
 8005020:	bf00      	nop
 8005022:	3718      	adds	r7, #24
 8005024:	46bd      	mov	sp, r7
 8005026:	bd80      	pop	{r7, pc}

08005028 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005028:	b580      	push	{r7, lr}
 800502a:	b08e      	sub	sp, #56	@ 0x38
 800502c:	af04      	add	r7, sp, #16
 800502e:	60f8      	str	r0, [r7, #12]
 8005030:	60b9      	str	r1, [r7, #8]
 8005032:	607a      	str	r2, [r7, #4]
 8005034:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8005036:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005038:	2b00      	cmp	r3, #0
 800503a:	d10d      	bne.n	8005058 <xTaskCreateStatic+0x30>
	__asm volatile
 800503c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005040:	b672      	cpsid	i
 8005042:	f383 8811 	msr	BASEPRI, r3
 8005046:	f3bf 8f6f 	isb	sy
 800504a:	f3bf 8f4f 	dsb	sy
 800504e:	b662      	cpsie	i
 8005050:	623b      	str	r3, [r7, #32]
}
 8005052:	bf00      	nop
 8005054:	bf00      	nop
 8005056:	e7fd      	b.n	8005054 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 8005058:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800505a:	2b00      	cmp	r3, #0
 800505c:	d10d      	bne.n	800507a <xTaskCreateStatic+0x52>
	__asm volatile
 800505e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005062:	b672      	cpsid	i
 8005064:	f383 8811 	msr	BASEPRI, r3
 8005068:	f3bf 8f6f 	isb	sy
 800506c:	f3bf 8f4f 	dsb	sy
 8005070:	b662      	cpsie	i
 8005072:	61fb      	str	r3, [r7, #28]
}
 8005074:	bf00      	nop
 8005076:	bf00      	nop
 8005078:	e7fd      	b.n	8005076 <xTaskCreateStatic+0x4e>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800507a:	23a8      	movs	r3, #168	@ 0xa8
 800507c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800507e:	693b      	ldr	r3, [r7, #16]
 8005080:	2ba8      	cmp	r3, #168	@ 0xa8
 8005082:	d00d      	beq.n	80050a0 <xTaskCreateStatic+0x78>
	__asm volatile
 8005084:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005088:	b672      	cpsid	i
 800508a:	f383 8811 	msr	BASEPRI, r3
 800508e:	f3bf 8f6f 	isb	sy
 8005092:	f3bf 8f4f 	dsb	sy
 8005096:	b662      	cpsie	i
 8005098:	61bb      	str	r3, [r7, #24]
}
 800509a:	bf00      	nop
 800509c:	bf00      	nop
 800509e:	e7fd      	b.n	800509c <xTaskCreateStatic+0x74>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80050a0:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80050a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d01e      	beq.n	80050e6 <xTaskCreateStatic+0xbe>
 80050a8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d01b      	beq.n	80050e6 <xTaskCreateStatic+0xbe>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80050ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80050b0:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80050b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050b4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80050b6:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80050b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050ba:	2202      	movs	r2, #2
 80050bc:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80050c0:	2300      	movs	r3, #0
 80050c2:	9303      	str	r3, [sp, #12]
 80050c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050c6:	9302      	str	r3, [sp, #8]
 80050c8:	f107 0314 	add.w	r3, r7, #20
 80050cc:	9301      	str	r3, [sp, #4]
 80050ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80050d0:	9300      	str	r3, [sp, #0]
 80050d2:	683b      	ldr	r3, [r7, #0]
 80050d4:	687a      	ldr	r2, [r7, #4]
 80050d6:	68b9      	ldr	r1, [r7, #8]
 80050d8:	68f8      	ldr	r0, [r7, #12]
 80050da:	f000 f851 	bl	8005180 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80050de:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80050e0:	f000 f8f8 	bl	80052d4 <prvAddNewTaskToReadyList>
 80050e4:	e001      	b.n	80050ea <xTaskCreateStatic+0xc2>
		}
		else
		{
			xReturn = NULL;
 80050e6:	2300      	movs	r3, #0
 80050e8:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80050ea:	697b      	ldr	r3, [r7, #20]
	}
 80050ec:	4618      	mov	r0, r3
 80050ee:	3728      	adds	r7, #40	@ 0x28
 80050f0:	46bd      	mov	sp, r7
 80050f2:	bd80      	pop	{r7, pc}

080050f4 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80050f4:	b580      	push	{r7, lr}
 80050f6:	b08c      	sub	sp, #48	@ 0x30
 80050f8:	af04      	add	r7, sp, #16
 80050fa:	60f8      	str	r0, [r7, #12]
 80050fc:	60b9      	str	r1, [r7, #8]
 80050fe:	603b      	str	r3, [r7, #0]
 8005100:	4613      	mov	r3, r2
 8005102:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8005104:	88fb      	ldrh	r3, [r7, #6]
 8005106:	009b      	lsls	r3, r3, #2
 8005108:	4618      	mov	r0, r3
 800510a:	f001 fc8d 	bl	8006a28 <pvPortMalloc>
 800510e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005110:	697b      	ldr	r3, [r7, #20]
 8005112:	2b00      	cmp	r3, #0
 8005114:	d00e      	beq.n	8005134 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8005116:	20a8      	movs	r0, #168	@ 0xa8
 8005118:	f001 fc86 	bl	8006a28 <pvPortMalloc>
 800511c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800511e:	69fb      	ldr	r3, [r7, #28]
 8005120:	2b00      	cmp	r3, #0
 8005122:	d003      	beq.n	800512c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005124:	69fb      	ldr	r3, [r7, #28]
 8005126:	697a      	ldr	r2, [r7, #20]
 8005128:	631a      	str	r2, [r3, #48]	@ 0x30
 800512a:	e005      	b.n	8005138 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800512c:	6978      	ldr	r0, [r7, #20]
 800512e:	f001 fd49 	bl	8006bc4 <vPortFree>
 8005132:	e001      	b.n	8005138 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005134:	2300      	movs	r3, #0
 8005136:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005138:	69fb      	ldr	r3, [r7, #28]
 800513a:	2b00      	cmp	r3, #0
 800513c:	d017      	beq.n	800516e <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800513e:	69fb      	ldr	r3, [r7, #28]
 8005140:	2200      	movs	r2, #0
 8005142:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005146:	88fa      	ldrh	r2, [r7, #6]
 8005148:	2300      	movs	r3, #0
 800514a:	9303      	str	r3, [sp, #12]
 800514c:	69fb      	ldr	r3, [r7, #28]
 800514e:	9302      	str	r3, [sp, #8]
 8005150:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005152:	9301      	str	r3, [sp, #4]
 8005154:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005156:	9300      	str	r3, [sp, #0]
 8005158:	683b      	ldr	r3, [r7, #0]
 800515a:	68b9      	ldr	r1, [r7, #8]
 800515c:	68f8      	ldr	r0, [r7, #12]
 800515e:	f000 f80f 	bl	8005180 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005162:	69f8      	ldr	r0, [r7, #28]
 8005164:	f000 f8b6 	bl	80052d4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005168:	2301      	movs	r3, #1
 800516a:	61bb      	str	r3, [r7, #24]
 800516c:	e002      	b.n	8005174 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800516e:	f04f 33ff 	mov.w	r3, #4294967295
 8005172:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005174:	69bb      	ldr	r3, [r7, #24]
	}
 8005176:	4618      	mov	r0, r3
 8005178:	3720      	adds	r7, #32
 800517a:	46bd      	mov	sp, r7
 800517c:	bd80      	pop	{r7, pc}
	...

08005180 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005180:	b580      	push	{r7, lr}
 8005182:	b088      	sub	sp, #32
 8005184:	af00      	add	r7, sp, #0
 8005186:	60f8      	str	r0, [r7, #12]
 8005188:	60b9      	str	r1, [r7, #8]
 800518a:	607a      	str	r2, [r7, #4]
 800518c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800518e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005190:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	009b      	lsls	r3, r3, #2
 8005196:	461a      	mov	r2, r3
 8005198:	21a5      	movs	r1, #165	@ 0xa5
 800519a:	f01f f977 	bl	802448c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800519e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80051a0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80051a2:	6879      	ldr	r1, [r7, #4]
 80051a4:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 80051a8:	440b      	add	r3, r1
 80051aa:	009b      	lsls	r3, r3, #2
 80051ac:	4413      	add	r3, r2
 80051ae:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80051b0:	69bb      	ldr	r3, [r7, #24]
 80051b2:	f023 0307 	bic.w	r3, r3, #7
 80051b6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80051b8:	69bb      	ldr	r3, [r7, #24]
 80051ba:	f003 0307 	and.w	r3, r3, #7
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d00d      	beq.n	80051de <prvInitialiseNewTask+0x5e>
	__asm volatile
 80051c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80051c6:	b672      	cpsid	i
 80051c8:	f383 8811 	msr	BASEPRI, r3
 80051cc:	f3bf 8f6f 	isb	sy
 80051d0:	f3bf 8f4f 	dsb	sy
 80051d4:	b662      	cpsie	i
 80051d6:	617b      	str	r3, [r7, #20]
}
 80051d8:	bf00      	nop
 80051da:	bf00      	nop
 80051dc:	e7fd      	b.n	80051da <prvInitialiseNewTask+0x5a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80051de:	68bb      	ldr	r3, [r7, #8]
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d01f      	beq.n	8005224 <prvInitialiseNewTask+0xa4>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80051e4:	2300      	movs	r3, #0
 80051e6:	61fb      	str	r3, [r7, #28]
 80051e8:	e012      	b.n	8005210 <prvInitialiseNewTask+0x90>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80051ea:	68ba      	ldr	r2, [r7, #8]
 80051ec:	69fb      	ldr	r3, [r7, #28]
 80051ee:	4413      	add	r3, r2
 80051f0:	7819      	ldrb	r1, [r3, #0]
 80051f2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80051f4:	69fb      	ldr	r3, [r7, #28]
 80051f6:	4413      	add	r3, r2
 80051f8:	3334      	adds	r3, #52	@ 0x34
 80051fa:	460a      	mov	r2, r1
 80051fc:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80051fe:	68ba      	ldr	r2, [r7, #8]
 8005200:	69fb      	ldr	r3, [r7, #28]
 8005202:	4413      	add	r3, r2
 8005204:	781b      	ldrb	r3, [r3, #0]
 8005206:	2b00      	cmp	r3, #0
 8005208:	d006      	beq.n	8005218 <prvInitialiseNewTask+0x98>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800520a:	69fb      	ldr	r3, [r7, #28]
 800520c:	3301      	adds	r3, #1
 800520e:	61fb      	str	r3, [r7, #28]
 8005210:	69fb      	ldr	r3, [r7, #28]
 8005212:	2b0f      	cmp	r3, #15
 8005214:	d9e9      	bls.n	80051ea <prvInitialiseNewTask+0x6a>
 8005216:	e000      	b.n	800521a <prvInitialiseNewTask+0x9a>
			{
				break;
 8005218:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800521a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800521c:	2200      	movs	r2, #0
 800521e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005222:	e003      	b.n	800522c <prvInitialiseNewTask+0xac>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8005224:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005226:	2200      	movs	r2, #0
 8005228:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800522c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800522e:	2b37      	cmp	r3, #55	@ 0x37
 8005230:	d901      	bls.n	8005236 <prvInitialiseNewTask+0xb6>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005232:	2337      	movs	r3, #55	@ 0x37
 8005234:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005236:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005238:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800523a:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800523c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800523e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005240:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8005242:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005244:	2200      	movs	r2, #0
 8005246:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005248:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800524a:	3304      	adds	r3, #4
 800524c:	4618      	mov	r0, r3
 800524e:	f7ff f93d 	bl	80044cc <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005252:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005254:	3318      	adds	r3, #24
 8005256:	4618      	mov	r0, r3
 8005258:	f7ff f938 	bl	80044cc <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800525c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800525e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005260:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005262:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005264:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8005268:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800526a:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800526c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800526e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005270:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005272:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005274:	2200      	movs	r2, #0
 8005276:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800527a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800527c:	2200      	movs	r2, #0
 800527e:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8005282:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005284:	3354      	adds	r3, #84	@ 0x54
 8005286:	224c      	movs	r2, #76	@ 0x4c
 8005288:	2100      	movs	r1, #0
 800528a:	4618      	mov	r0, r3
 800528c:	f01f f8fe 	bl	802448c <memset>
 8005290:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005292:	4a0d      	ldr	r2, [pc, #52]	@ (80052c8 <prvInitialiseNewTask+0x148>)
 8005294:	659a      	str	r2, [r3, #88]	@ 0x58
 8005296:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005298:	4a0c      	ldr	r2, [pc, #48]	@ (80052cc <prvInitialiseNewTask+0x14c>)
 800529a:	65da      	str	r2, [r3, #92]	@ 0x5c
 800529c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800529e:	4a0c      	ldr	r2, [pc, #48]	@ (80052d0 <prvInitialiseNewTask+0x150>)
 80052a0:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80052a2:	683a      	ldr	r2, [r7, #0]
 80052a4:	68f9      	ldr	r1, [r7, #12]
 80052a6:	69b8      	ldr	r0, [r7, #24]
 80052a8:	f001 f984 	bl	80065b4 <pxPortInitialiseStack>
 80052ac:	4602      	mov	r2, r0
 80052ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052b0:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80052b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d002      	beq.n	80052be <prvInitialiseNewTask+0x13e>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80052b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80052ba:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80052bc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80052be:	bf00      	nop
 80052c0:	3720      	adds	r7, #32
 80052c2:	46bd      	mov	sp, r7
 80052c4:	bd80      	pop	{r7, pc}
 80052c6:	bf00      	nop
 80052c8:	20014c68 	.word	0x20014c68
 80052cc:	20014cd0 	.word	0x20014cd0
 80052d0:	20014d38 	.word	0x20014d38

080052d4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80052d4:	b580      	push	{r7, lr}
 80052d6:	b082      	sub	sp, #8
 80052d8:	af00      	add	r7, sp, #0
 80052da:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80052dc:	f001 fa76 	bl	80067cc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80052e0:	4b2d      	ldr	r3, [pc, #180]	@ (8005398 <prvAddNewTaskToReadyList+0xc4>)
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	3301      	adds	r3, #1
 80052e6:	4a2c      	ldr	r2, [pc, #176]	@ (8005398 <prvAddNewTaskToReadyList+0xc4>)
 80052e8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80052ea:	4b2c      	ldr	r3, [pc, #176]	@ (800539c <prvAddNewTaskToReadyList+0xc8>)
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d109      	bne.n	8005306 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80052f2:	4a2a      	ldr	r2, [pc, #168]	@ (800539c <prvAddNewTaskToReadyList+0xc8>)
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80052f8:	4b27      	ldr	r3, [pc, #156]	@ (8005398 <prvAddNewTaskToReadyList+0xc4>)
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	2b01      	cmp	r3, #1
 80052fe:	d110      	bne.n	8005322 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005300:	f000 fc44 	bl	8005b8c <prvInitialiseTaskLists>
 8005304:	e00d      	b.n	8005322 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8005306:	4b26      	ldr	r3, [pc, #152]	@ (80053a0 <prvAddNewTaskToReadyList+0xcc>)
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	2b00      	cmp	r3, #0
 800530c:	d109      	bne.n	8005322 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800530e:	4b23      	ldr	r3, [pc, #140]	@ (800539c <prvAddNewTaskToReadyList+0xc8>)
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005318:	429a      	cmp	r2, r3
 800531a:	d802      	bhi.n	8005322 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800531c:	4a1f      	ldr	r2, [pc, #124]	@ (800539c <prvAddNewTaskToReadyList+0xc8>)
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8005322:	4b20      	ldr	r3, [pc, #128]	@ (80053a4 <prvAddNewTaskToReadyList+0xd0>)
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	3301      	adds	r3, #1
 8005328:	4a1e      	ldr	r2, [pc, #120]	@ (80053a4 <prvAddNewTaskToReadyList+0xd0>)
 800532a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800532c:	4b1d      	ldr	r3, [pc, #116]	@ (80053a4 <prvAddNewTaskToReadyList+0xd0>)
 800532e:	681a      	ldr	r2, [r3, #0]
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005338:	4b1b      	ldr	r3, [pc, #108]	@ (80053a8 <prvAddNewTaskToReadyList+0xd4>)
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	429a      	cmp	r2, r3
 800533e:	d903      	bls.n	8005348 <prvAddNewTaskToReadyList+0x74>
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005344:	4a18      	ldr	r2, [pc, #96]	@ (80053a8 <prvAddNewTaskToReadyList+0xd4>)
 8005346:	6013      	str	r3, [r2, #0]
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800534c:	4613      	mov	r3, r2
 800534e:	009b      	lsls	r3, r3, #2
 8005350:	4413      	add	r3, r2
 8005352:	009b      	lsls	r3, r3, #2
 8005354:	4a15      	ldr	r2, [pc, #84]	@ (80053ac <prvAddNewTaskToReadyList+0xd8>)
 8005356:	441a      	add	r2, r3
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	3304      	adds	r3, #4
 800535c:	4619      	mov	r1, r3
 800535e:	4610      	mov	r0, r2
 8005360:	f7ff f8c1 	bl	80044e6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005364:	f001 fa68 	bl	8006838 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005368:	4b0d      	ldr	r3, [pc, #52]	@ (80053a0 <prvAddNewTaskToReadyList+0xcc>)
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	2b00      	cmp	r3, #0
 800536e:	d00e      	beq.n	800538e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005370:	4b0a      	ldr	r3, [pc, #40]	@ (800539c <prvAddNewTaskToReadyList+0xc8>)
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800537a:	429a      	cmp	r2, r3
 800537c:	d207      	bcs.n	800538e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800537e:	4b0c      	ldr	r3, [pc, #48]	@ (80053b0 <prvAddNewTaskToReadyList+0xdc>)
 8005380:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005384:	601a      	str	r2, [r3, #0]
 8005386:	f3bf 8f4f 	dsb	sy
 800538a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800538e:	bf00      	nop
 8005390:	3708      	adds	r7, #8
 8005392:	46bd      	mov	sp, r7
 8005394:	bd80      	pop	{r7, pc}
 8005396:	bf00      	nop
 8005398:	2000191c 	.word	0x2000191c
 800539c:	20001448 	.word	0x20001448
 80053a0:	20001928 	.word	0x20001928
 80053a4:	20001938 	.word	0x20001938
 80053a8:	20001924 	.word	0x20001924
 80053ac:	2000144c 	.word	0x2000144c
 80053b0:	e000ed04 	.word	0xe000ed04

080053b4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80053b4:	b580      	push	{r7, lr}
 80053b6:	b084      	sub	sp, #16
 80053b8:	af00      	add	r7, sp, #0
 80053ba:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80053bc:	2300      	movs	r3, #0
 80053be:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d01a      	beq.n	80053fc <vTaskDelay+0x48>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80053c6:	4b15      	ldr	r3, [pc, #84]	@ (800541c <vTaskDelay+0x68>)
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d00d      	beq.n	80053ea <vTaskDelay+0x36>
	__asm volatile
 80053ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80053d2:	b672      	cpsid	i
 80053d4:	f383 8811 	msr	BASEPRI, r3
 80053d8:	f3bf 8f6f 	isb	sy
 80053dc:	f3bf 8f4f 	dsb	sy
 80053e0:	b662      	cpsie	i
 80053e2:	60bb      	str	r3, [r7, #8]
}
 80053e4:	bf00      	nop
 80053e6:	bf00      	nop
 80053e8:	e7fd      	b.n	80053e6 <vTaskDelay+0x32>
			vTaskSuspendAll();
 80053ea:	f000 f88f 	bl	800550c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80053ee:	2100      	movs	r1, #0
 80053f0:	6878      	ldr	r0, [r7, #4]
 80053f2:	f000 fd23 	bl	8005e3c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80053f6:	f000 f897 	bl	8005528 <xTaskResumeAll>
 80053fa:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d107      	bne.n	8005412 <vTaskDelay+0x5e>
		{
			portYIELD_WITHIN_API();
 8005402:	4b07      	ldr	r3, [pc, #28]	@ (8005420 <vTaskDelay+0x6c>)
 8005404:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005408:	601a      	str	r2, [r3, #0]
 800540a:	f3bf 8f4f 	dsb	sy
 800540e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005412:	bf00      	nop
 8005414:	3710      	adds	r7, #16
 8005416:	46bd      	mov	sp, r7
 8005418:	bd80      	pop	{r7, pc}
 800541a:	bf00      	nop
 800541c:	20001944 	.word	0x20001944
 8005420:	e000ed04 	.word	0xe000ed04

08005424 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005424:	b580      	push	{r7, lr}
 8005426:	b08a      	sub	sp, #40	@ 0x28
 8005428:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800542a:	2300      	movs	r3, #0
 800542c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800542e:	2300      	movs	r3, #0
 8005430:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005432:	463a      	mov	r2, r7
 8005434:	1d39      	adds	r1, r7, #4
 8005436:	f107 0308 	add.w	r3, r7, #8
 800543a:	4618      	mov	r0, r3
 800543c:	f7fe fff2 	bl	8004424 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005440:	6839      	ldr	r1, [r7, #0]
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	68ba      	ldr	r2, [r7, #8]
 8005446:	9202      	str	r2, [sp, #8]
 8005448:	9301      	str	r3, [sp, #4]
 800544a:	2300      	movs	r3, #0
 800544c:	9300      	str	r3, [sp, #0]
 800544e:	2300      	movs	r3, #0
 8005450:	460a      	mov	r2, r1
 8005452:	4926      	ldr	r1, [pc, #152]	@ (80054ec <vTaskStartScheduler+0xc8>)
 8005454:	4826      	ldr	r0, [pc, #152]	@ (80054f0 <vTaskStartScheduler+0xcc>)
 8005456:	f7ff fde7 	bl	8005028 <xTaskCreateStatic>
 800545a:	4603      	mov	r3, r0
 800545c:	4a25      	ldr	r2, [pc, #148]	@ (80054f4 <vTaskStartScheduler+0xd0>)
 800545e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005460:	4b24      	ldr	r3, [pc, #144]	@ (80054f4 <vTaskStartScheduler+0xd0>)
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	2b00      	cmp	r3, #0
 8005466:	d002      	beq.n	800546e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005468:	2301      	movs	r3, #1
 800546a:	617b      	str	r3, [r7, #20]
 800546c:	e001      	b.n	8005472 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800546e:	2300      	movs	r3, #0
 8005470:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8005472:	697b      	ldr	r3, [r7, #20]
 8005474:	2b01      	cmp	r3, #1
 8005476:	d102      	bne.n	800547e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8005478:	f000 fd34 	bl	8005ee4 <xTimerCreateTimerTask>
 800547c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800547e:	697b      	ldr	r3, [r7, #20]
 8005480:	2b01      	cmp	r3, #1
 8005482:	d11d      	bne.n	80054c0 <vTaskStartScheduler+0x9c>
	__asm volatile
 8005484:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005488:	b672      	cpsid	i
 800548a:	f383 8811 	msr	BASEPRI, r3
 800548e:	f3bf 8f6f 	isb	sy
 8005492:	f3bf 8f4f 	dsb	sy
 8005496:	b662      	cpsie	i
 8005498:	613b      	str	r3, [r7, #16]
}
 800549a:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800549c:	4b16      	ldr	r3, [pc, #88]	@ (80054f8 <vTaskStartScheduler+0xd4>)
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	3354      	adds	r3, #84	@ 0x54
 80054a2:	4a16      	ldr	r2, [pc, #88]	@ (80054fc <vTaskStartScheduler+0xd8>)
 80054a4:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80054a6:	4b16      	ldr	r3, [pc, #88]	@ (8005500 <vTaskStartScheduler+0xdc>)
 80054a8:	f04f 32ff 	mov.w	r2, #4294967295
 80054ac:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80054ae:	4b15      	ldr	r3, [pc, #84]	@ (8005504 <vTaskStartScheduler+0xe0>)
 80054b0:	2201      	movs	r2, #1
 80054b2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80054b4:	4b14      	ldr	r3, [pc, #80]	@ (8005508 <vTaskStartScheduler+0xe4>)
 80054b6:	2200      	movs	r2, #0
 80054b8:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80054ba:	f001 f909 	bl	80066d0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80054be:	e011      	b.n	80054e4 <vTaskStartScheduler+0xc0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80054c0:	697b      	ldr	r3, [r7, #20]
 80054c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054c6:	d10d      	bne.n	80054e4 <vTaskStartScheduler+0xc0>
	__asm volatile
 80054c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80054cc:	b672      	cpsid	i
 80054ce:	f383 8811 	msr	BASEPRI, r3
 80054d2:	f3bf 8f6f 	isb	sy
 80054d6:	f3bf 8f4f 	dsb	sy
 80054da:	b662      	cpsie	i
 80054dc:	60fb      	str	r3, [r7, #12]
}
 80054de:	bf00      	nop
 80054e0:	bf00      	nop
 80054e2:	e7fd      	b.n	80054e0 <vTaskStartScheduler+0xbc>
}
 80054e4:	bf00      	nop
 80054e6:	3718      	adds	r7, #24
 80054e8:	46bd      	mov	sp, r7
 80054ea:	bd80      	pop	{r7, pc}
 80054ec:	08025128 	.word	0x08025128
 80054f0:	08005b5d 	.word	0x08005b5d
 80054f4:	20001940 	.word	0x20001940
 80054f8:	20001448 	.word	0x20001448
 80054fc:	20000328 	.word	0x20000328
 8005500:	2000193c 	.word	0x2000193c
 8005504:	20001928 	.word	0x20001928
 8005508:	20001920 	.word	0x20001920

0800550c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800550c:	b480      	push	{r7}
 800550e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8005510:	4b04      	ldr	r3, [pc, #16]	@ (8005524 <vTaskSuspendAll+0x18>)
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	3301      	adds	r3, #1
 8005516:	4a03      	ldr	r2, [pc, #12]	@ (8005524 <vTaskSuspendAll+0x18>)
 8005518:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800551a:	bf00      	nop
 800551c:	46bd      	mov	sp, r7
 800551e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005522:	4770      	bx	lr
 8005524:	20001944 	.word	0x20001944

08005528 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005528:	b580      	push	{r7, lr}
 800552a:	b084      	sub	sp, #16
 800552c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800552e:	2300      	movs	r3, #0
 8005530:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8005532:	2300      	movs	r3, #0
 8005534:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8005536:	4b43      	ldr	r3, [pc, #268]	@ (8005644 <xTaskResumeAll+0x11c>)
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	2b00      	cmp	r3, #0
 800553c:	d10d      	bne.n	800555a <xTaskResumeAll+0x32>
	__asm volatile
 800553e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005542:	b672      	cpsid	i
 8005544:	f383 8811 	msr	BASEPRI, r3
 8005548:	f3bf 8f6f 	isb	sy
 800554c:	f3bf 8f4f 	dsb	sy
 8005550:	b662      	cpsie	i
 8005552:	603b      	str	r3, [r7, #0]
}
 8005554:	bf00      	nop
 8005556:	bf00      	nop
 8005558:	e7fd      	b.n	8005556 <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800555a:	f001 f937 	bl	80067cc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800555e:	4b39      	ldr	r3, [pc, #228]	@ (8005644 <xTaskResumeAll+0x11c>)
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	3b01      	subs	r3, #1
 8005564:	4a37      	ldr	r2, [pc, #220]	@ (8005644 <xTaskResumeAll+0x11c>)
 8005566:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005568:	4b36      	ldr	r3, [pc, #216]	@ (8005644 <xTaskResumeAll+0x11c>)
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	2b00      	cmp	r3, #0
 800556e:	d162      	bne.n	8005636 <xTaskResumeAll+0x10e>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005570:	4b35      	ldr	r3, [pc, #212]	@ (8005648 <xTaskResumeAll+0x120>)
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	2b00      	cmp	r3, #0
 8005576:	d05e      	beq.n	8005636 <xTaskResumeAll+0x10e>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005578:	e02f      	b.n	80055da <xTaskResumeAll+0xb2>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800557a:	4b34      	ldr	r3, [pc, #208]	@ (800564c <xTaskResumeAll+0x124>)
 800557c:	68db      	ldr	r3, [r3, #12]
 800557e:	68db      	ldr	r3, [r3, #12]
 8005580:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	3318      	adds	r3, #24
 8005586:	4618      	mov	r0, r3
 8005588:	f7ff f80a 	bl	80045a0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	3304      	adds	r3, #4
 8005590:	4618      	mov	r0, r3
 8005592:	f7ff f805 	bl	80045a0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800559a:	4b2d      	ldr	r3, [pc, #180]	@ (8005650 <xTaskResumeAll+0x128>)
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	429a      	cmp	r2, r3
 80055a0:	d903      	bls.n	80055aa <xTaskResumeAll+0x82>
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80055a6:	4a2a      	ldr	r2, [pc, #168]	@ (8005650 <xTaskResumeAll+0x128>)
 80055a8:	6013      	str	r3, [r2, #0]
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80055ae:	4613      	mov	r3, r2
 80055b0:	009b      	lsls	r3, r3, #2
 80055b2:	4413      	add	r3, r2
 80055b4:	009b      	lsls	r3, r3, #2
 80055b6:	4a27      	ldr	r2, [pc, #156]	@ (8005654 <xTaskResumeAll+0x12c>)
 80055b8:	441a      	add	r2, r3
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	3304      	adds	r3, #4
 80055be:	4619      	mov	r1, r3
 80055c0:	4610      	mov	r0, r2
 80055c2:	f7fe ff90 	bl	80044e6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80055ca:	4b23      	ldr	r3, [pc, #140]	@ (8005658 <xTaskResumeAll+0x130>)
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80055d0:	429a      	cmp	r2, r3
 80055d2:	d302      	bcc.n	80055da <xTaskResumeAll+0xb2>
					{
						xYieldPending = pdTRUE;
 80055d4:	4b21      	ldr	r3, [pc, #132]	@ (800565c <xTaskResumeAll+0x134>)
 80055d6:	2201      	movs	r2, #1
 80055d8:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80055da:	4b1c      	ldr	r3, [pc, #112]	@ (800564c <xTaskResumeAll+0x124>)
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d1cb      	bne.n	800557a <xTaskResumeAll+0x52>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d001      	beq.n	80055ec <xTaskResumeAll+0xc4>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80055e8:	f000 fb76 	bl	8005cd8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80055ec:	4b1c      	ldr	r3, [pc, #112]	@ (8005660 <xTaskResumeAll+0x138>)
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d010      	beq.n	800561a <xTaskResumeAll+0xf2>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80055f8:	f000 f846 	bl	8005688 <xTaskIncrementTick>
 80055fc:	4603      	mov	r3, r0
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d002      	beq.n	8005608 <xTaskResumeAll+0xe0>
							{
								xYieldPending = pdTRUE;
 8005602:	4b16      	ldr	r3, [pc, #88]	@ (800565c <xTaskResumeAll+0x134>)
 8005604:	2201      	movs	r2, #1
 8005606:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	3b01      	subs	r3, #1
 800560c:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	2b00      	cmp	r3, #0
 8005612:	d1f1      	bne.n	80055f8 <xTaskResumeAll+0xd0>

						uxPendedTicks = 0;
 8005614:	4b12      	ldr	r3, [pc, #72]	@ (8005660 <xTaskResumeAll+0x138>)
 8005616:	2200      	movs	r2, #0
 8005618:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800561a:	4b10      	ldr	r3, [pc, #64]	@ (800565c <xTaskResumeAll+0x134>)
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	2b00      	cmp	r3, #0
 8005620:	d009      	beq.n	8005636 <xTaskResumeAll+0x10e>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005622:	2301      	movs	r3, #1
 8005624:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005626:	4b0f      	ldr	r3, [pc, #60]	@ (8005664 <xTaskResumeAll+0x13c>)
 8005628:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800562c:	601a      	str	r2, [r3, #0]
 800562e:	f3bf 8f4f 	dsb	sy
 8005632:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005636:	f001 f8ff 	bl	8006838 <vPortExitCritical>

	return xAlreadyYielded;
 800563a:	68bb      	ldr	r3, [r7, #8]
}
 800563c:	4618      	mov	r0, r3
 800563e:	3710      	adds	r7, #16
 8005640:	46bd      	mov	sp, r7
 8005642:	bd80      	pop	{r7, pc}
 8005644:	20001944 	.word	0x20001944
 8005648:	2000191c 	.word	0x2000191c
 800564c:	200018dc 	.word	0x200018dc
 8005650:	20001924 	.word	0x20001924
 8005654:	2000144c 	.word	0x2000144c
 8005658:	20001448 	.word	0x20001448
 800565c:	20001930 	.word	0x20001930
 8005660:	2000192c 	.word	0x2000192c
 8005664:	e000ed04 	.word	0xe000ed04

08005668 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8005668:	b480      	push	{r7}
 800566a:	b083      	sub	sp, #12
 800566c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800566e:	4b05      	ldr	r3, [pc, #20]	@ (8005684 <xTaskGetTickCount+0x1c>)
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8005674:	687b      	ldr	r3, [r7, #4]
}
 8005676:	4618      	mov	r0, r3
 8005678:	370c      	adds	r7, #12
 800567a:	46bd      	mov	sp, r7
 800567c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005680:	4770      	bx	lr
 8005682:	bf00      	nop
 8005684:	20001920 	.word	0x20001920

08005688 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005688:	b580      	push	{r7, lr}
 800568a:	b086      	sub	sp, #24
 800568c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800568e:	2300      	movs	r3, #0
 8005690:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005692:	4b50      	ldr	r3, [pc, #320]	@ (80057d4 <xTaskIncrementTick+0x14c>)
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	2b00      	cmp	r3, #0
 8005698:	f040 808c 	bne.w	80057b4 <xTaskIncrementTick+0x12c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800569c:	4b4e      	ldr	r3, [pc, #312]	@ (80057d8 <xTaskIncrementTick+0x150>)
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	3301      	adds	r3, #1
 80056a2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80056a4:	4a4c      	ldr	r2, [pc, #304]	@ (80057d8 <xTaskIncrementTick+0x150>)
 80056a6:	693b      	ldr	r3, [r7, #16]
 80056a8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80056aa:	693b      	ldr	r3, [r7, #16]
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d123      	bne.n	80056f8 <xTaskIncrementTick+0x70>
		{
			taskSWITCH_DELAYED_LISTS();
 80056b0:	4b4a      	ldr	r3, [pc, #296]	@ (80057dc <xTaskIncrementTick+0x154>)
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d00d      	beq.n	80056d6 <xTaskIncrementTick+0x4e>
	__asm volatile
 80056ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80056be:	b672      	cpsid	i
 80056c0:	f383 8811 	msr	BASEPRI, r3
 80056c4:	f3bf 8f6f 	isb	sy
 80056c8:	f3bf 8f4f 	dsb	sy
 80056cc:	b662      	cpsie	i
 80056ce:	603b      	str	r3, [r7, #0]
}
 80056d0:	bf00      	nop
 80056d2:	bf00      	nop
 80056d4:	e7fd      	b.n	80056d2 <xTaskIncrementTick+0x4a>
 80056d6:	4b41      	ldr	r3, [pc, #260]	@ (80057dc <xTaskIncrementTick+0x154>)
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	60fb      	str	r3, [r7, #12]
 80056dc:	4b40      	ldr	r3, [pc, #256]	@ (80057e0 <xTaskIncrementTick+0x158>)
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	4a3e      	ldr	r2, [pc, #248]	@ (80057dc <xTaskIncrementTick+0x154>)
 80056e2:	6013      	str	r3, [r2, #0]
 80056e4:	4a3e      	ldr	r2, [pc, #248]	@ (80057e0 <xTaskIncrementTick+0x158>)
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	6013      	str	r3, [r2, #0]
 80056ea:	4b3e      	ldr	r3, [pc, #248]	@ (80057e4 <xTaskIncrementTick+0x15c>)
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	3301      	adds	r3, #1
 80056f0:	4a3c      	ldr	r2, [pc, #240]	@ (80057e4 <xTaskIncrementTick+0x15c>)
 80056f2:	6013      	str	r3, [r2, #0]
 80056f4:	f000 faf0 	bl	8005cd8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80056f8:	4b3b      	ldr	r3, [pc, #236]	@ (80057e8 <xTaskIncrementTick+0x160>)
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	693a      	ldr	r2, [r7, #16]
 80056fe:	429a      	cmp	r2, r3
 8005700:	d349      	bcc.n	8005796 <xTaskIncrementTick+0x10e>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005702:	4b36      	ldr	r3, [pc, #216]	@ (80057dc <xTaskIncrementTick+0x154>)
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	2b00      	cmp	r3, #0
 800570a:	d104      	bne.n	8005716 <xTaskIncrementTick+0x8e>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800570c:	4b36      	ldr	r3, [pc, #216]	@ (80057e8 <xTaskIncrementTick+0x160>)
 800570e:	f04f 32ff 	mov.w	r2, #4294967295
 8005712:	601a      	str	r2, [r3, #0]
					break;
 8005714:	e03f      	b.n	8005796 <xTaskIncrementTick+0x10e>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005716:	4b31      	ldr	r3, [pc, #196]	@ (80057dc <xTaskIncrementTick+0x154>)
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	68db      	ldr	r3, [r3, #12]
 800571c:	68db      	ldr	r3, [r3, #12]
 800571e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005720:	68bb      	ldr	r3, [r7, #8]
 8005722:	685b      	ldr	r3, [r3, #4]
 8005724:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005726:	693a      	ldr	r2, [r7, #16]
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	429a      	cmp	r2, r3
 800572c:	d203      	bcs.n	8005736 <xTaskIncrementTick+0xae>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800572e:	4a2e      	ldr	r2, [pc, #184]	@ (80057e8 <xTaskIncrementTick+0x160>)
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8005734:	e02f      	b.n	8005796 <xTaskIncrementTick+0x10e>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005736:	68bb      	ldr	r3, [r7, #8]
 8005738:	3304      	adds	r3, #4
 800573a:	4618      	mov	r0, r3
 800573c:	f7fe ff30 	bl	80045a0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005740:	68bb      	ldr	r3, [r7, #8]
 8005742:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005744:	2b00      	cmp	r3, #0
 8005746:	d004      	beq.n	8005752 <xTaskIncrementTick+0xca>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005748:	68bb      	ldr	r3, [r7, #8]
 800574a:	3318      	adds	r3, #24
 800574c:	4618      	mov	r0, r3
 800574e:	f7fe ff27 	bl	80045a0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005752:	68bb      	ldr	r3, [r7, #8]
 8005754:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005756:	4b25      	ldr	r3, [pc, #148]	@ (80057ec <xTaskIncrementTick+0x164>)
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	429a      	cmp	r2, r3
 800575c:	d903      	bls.n	8005766 <xTaskIncrementTick+0xde>
 800575e:	68bb      	ldr	r3, [r7, #8]
 8005760:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005762:	4a22      	ldr	r2, [pc, #136]	@ (80057ec <xTaskIncrementTick+0x164>)
 8005764:	6013      	str	r3, [r2, #0]
 8005766:	68bb      	ldr	r3, [r7, #8]
 8005768:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800576a:	4613      	mov	r3, r2
 800576c:	009b      	lsls	r3, r3, #2
 800576e:	4413      	add	r3, r2
 8005770:	009b      	lsls	r3, r3, #2
 8005772:	4a1f      	ldr	r2, [pc, #124]	@ (80057f0 <xTaskIncrementTick+0x168>)
 8005774:	441a      	add	r2, r3
 8005776:	68bb      	ldr	r3, [r7, #8]
 8005778:	3304      	adds	r3, #4
 800577a:	4619      	mov	r1, r3
 800577c:	4610      	mov	r0, r2
 800577e:	f7fe feb2 	bl	80044e6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005782:	68bb      	ldr	r3, [r7, #8]
 8005784:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005786:	4b1b      	ldr	r3, [pc, #108]	@ (80057f4 <xTaskIncrementTick+0x16c>)
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800578c:	429a      	cmp	r2, r3
 800578e:	d3b8      	bcc.n	8005702 <xTaskIncrementTick+0x7a>
						{
							xSwitchRequired = pdTRUE;
 8005790:	2301      	movs	r3, #1
 8005792:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005794:	e7b5      	b.n	8005702 <xTaskIncrementTick+0x7a>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005796:	4b17      	ldr	r3, [pc, #92]	@ (80057f4 <xTaskIncrementTick+0x16c>)
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800579c:	4914      	ldr	r1, [pc, #80]	@ (80057f0 <xTaskIncrementTick+0x168>)
 800579e:	4613      	mov	r3, r2
 80057a0:	009b      	lsls	r3, r3, #2
 80057a2:	4413      	add	r3, r2
 80057a4:	009b      	lsls	r3, r3, #2
 80057a6:	440b      	add	r3, r1
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	2b01      	cmp	r3, #1
 80057ac:	d907      	bls.n	80057be <xTaskIncrementTick+0x136>
			{
				xSwitchRequired = pdTRUE;
 80057ae:	2301      	movs	r3, #1
 80057b0:	617b      	str	r3, [r7, #20]
 80057b2:	e004      	b.n	80057be <xTaskIncrementTick+0x136>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80057b4:	4b10      	ldr	r3, [pc, #64]	@ (80057f8 <xTaskIncrementTick+0x170>)
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	3301      	adds	r3, #1
 80057ba:	4a0f      	ldr	r2, [pc, #60]	@ (80057f8 <xTaskIncrementTick+0x170>)
 80057bc:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80057be:	4b0f      	ldr	r3, [pc, #60]	@ (80057fc <xTaskIncrementTick+0x174>)
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d001      	beq.n	80057ca <xTaskIncrementTick+0x142>
		{
			xSwitchRequired = pdTRUE;
 80057c6:	2301      	movs	r3, #1
 80057c8:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80057ca:	697b      	ldr	r3, [r7, #20]
}
 80057cc:	4618      	mov	r0, r3
 80057ce:	3718      	adds	r7, #24
 80057d0:	46bd      	mov	sp, r7
 80057d2:	bd80      	pop	{r7, pc}
 80057d4:	20001944 	.word	0x20001944
 80057d8:	20001920 	.word	0x20001920
 80057dc:	200018d4 	.word	0x200018d4
 80057e0:	200018d8 	.word	0x200018d8
 80057e4:	20001934 	.word	0x20001934
 80057e8:	2000193c 	.word	0x2000193c
 80057ec:	20001924 	.word	0x20001924
 80057f0:	2000144c 	.word	0x2000144c
 80057f4:	20001448 	.word	0x20001448
 80057f8:	2000192c 	.word	0x2000192c
 80057fc:	20001930 	.word	0x20001930

08005800 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005800:	b480      	push	{r7}
 8005802:	b085      	sub	sp, #20
 8005804:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005806:	4b2c      	ldr	r3, [pc, #176]	@ (80058b8 <vTaskSwitchContext+0xb8>)
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	2b00      	cmp	r3, #0
 800580c:	d003      	beq.n	8005816 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800580e:	4b2b      	ldr	r3, [pc, #172]	@ (80058bc <vTaskSwitchContext+0xbc>)
 8005810:	2201      	movs	r2, #1
 8005812:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005814:	e049      	b.n	80058aa <vTaskSwitchContext+0xaa>
		xYieldPending = pdFALSE;
 8005816:	4b29      	ldr	r3, [pc, #164]	@ (80058bc <vTaskSwitchContext+0xbc>)
 8005818:	2200      	movs	r2, #0
 800581a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800581c:	4b28      	ldr	r3, [pc, #160]	@ (80058c0 <vTaskSwitchContext+0xc0>)
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	60fb      	str	r3, [r7, #12]
 8005822:	e013      	b.n	800584c <vTaskSwitchContext+0x4c>
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	2b00      	cmp	r3, #0
 8005828:	d10d      	bne.n	8005846 <vTaskSwitchContext+0x46>
	__asm volatile
 800582a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800582e:	b672      	cpsid	i
 8005830:	f383 8811 	msr	BASEPRI, r3
 8005834:	f3bf 8f6f 	isb	sy
 8005838:	f3bf 8f4f 	dsb	sy
 800583c:	b662      	cpsie	i
 800583e:	607b      	str	r3, [r7, #4]
}
 8005840:	bf00      	nop
 8005842:	bf00      	nop
 8005844:	e7fd      	b.n	8005842 <vTaskSwitchContext+0x42>
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	3b01      	subs	r3, #1
 800584a:	60fb      	str	r3, [r7, #12]
 800584c:	491d      	ldr	r1, [pc, #116]	@ (80058c4 <vTaskSwitchContext+0xc4>)
 800584e:	68fa      	ldr	r2, [r7, #12]
 8005850:	4613      	mov	r3, r2
 8005852:	009b      	lsls	r3, r3, #2
 8005854:	4413      	add	r3, r2
 8005856:	009b      	lsls	r3, r3, #2
 8005858:	440b      	add	r3, r1
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	2b00      	cmp	r3, #0
 800585e:	d0e1      	beq.n	8005824 <vTaskSwitchContext+0x24>
 8005860:	68fa      	ldr	r2, [r7, #12]
 8005862:	4613      	mov	r3, r2
 8005864:	009b      	lsls	r3, r3, #2
 8005866:	4413      	add	r3, r2
 8005868:	009b      	lsls	r3, r3, #2
 800586a:	4a16      	ldr	r2, [pc, #88]	@ (80058c4 <vTaskSwitchContext+0xc4>)
 800586c:	4413      	add	r3, r2
 800586e:	60bb      	str	r3, [r7, #8]
 8005870:	68bb      	ldr	r3, [r7, #8]
 8005872:	685b      	ldr	r3, [r3, #4]
 8005874:	685a      	ldr	r2, [r3, #4]
 8005876:	68bb      	ldr	r3, [r7, #8]
 8005878:	605a      	str	r2, [r3, #4]
 800587a:	68bb      	ldr	r3, [r7, #8]
 800587c:	685a      	ldr	r2, [r3, #4]
 800587e:	68bb      	ldr	r3, [r7, #8]
 8005880:	3308      	adds	r3, #8
 8005882:	429a      	cmp	r2, r3
 8005884:	d104      	bne.n	8005890 <vTaskSwitchContext+0x90>
 8005886:	68bb      	ldr	r3, [r7, #8]
 8005888:	685b      	ldr	r3, [r3, #4]
 800588a:	685a      	ldr	r2, [r3, #4]
 800588c:	68bb      	ldr	r3, [r7, #8]
 800588e:	605a      	str	r2, [r3, #4]
 8005890:	68bb      	ldr	r3, [r7, #8]
 8005892:	685b      	ldr	r3, [r3, #4]
 8005894:	68db      	ldr	r3, [r3, #12]
 8005896:	4a0c      	ldr	r2, [pc, #48]	@ (80058c8 <vTaskSwitchContext+0xc8>)
 8005898:	6013      	str	r3, [r2, #0]
 800589a:	4a09      	ldr	r2, [pc, #36]	@ (80058c0 <vTaskSwitchContext+0xc0>)
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80058a0:	4b09      	ldr	r3, [pc, #36]	@ (80058c8 <vTaskSwitchContext+0xc8>)
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	3354      	adds	r3, #84	@ 0x54
 80058a6:	4a09      	ldr	r2, [pc, #36]	@ (80058cc <vTaskSwitchContext+0xcc>)
 80058a8:	6013      	str	r3, [r2, #0]
}
 80058aa:	bf00      	nop
 80058ac:	3714      	adds	r7, #20
 80058ae:	46bd      	mov	sp, r7
 80058b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058b4:	4770      	bx	lr
 80058b6:	bf00      	nop
 80058b8:	20001944 	.word	0x20001944
 80058bc:	20001930 	.word	0x20001930
 80058c0:	20001924 	.word	0x20001924
 80058c4:	2000144c 	.word	0x2000144c
 80058c8:	20001448 	.word	0x20001448
 80058cc:	20000328 	.word	0x20000328

080058d0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80058d0:	b580      	push	{r7, lr}
 80058d2:	b084      	sub	sp, #16
 80058d4:	af00      	add	r7, sp, #0
 80058d6:	6078      	str	r0, [r7, #4]
 80058d8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d10d      	bne.n	80058fc <vTaskPlaceOnEventList+0x2c>
	__asm volatile
 80058e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80058e4:	b672      	cpsid	i
 80058e6:	f383 8811 	msr	BASEPRI, r3
 80058ea:	f3bf 8f6f 	isb	sy
 80058ee:	f3bf 8f4f 	dsb	sy
 80058f2:	b662      	cpsie	i
 80058f4:	60fb      	str	r3, [r7, #12]
}
 80058f6:	bf00      	nop
 80058f8:	bf00      	nop
 80058fa:	e7fd      	b.n	80058f8 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80058fc:	4b07      	ldr	r3, [pc, #28]	@ (800591c <vTaskPlaceOnEventList+0x4c>)
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	3318      	adds	r3, #24
 8005902:	4619      	mov	r1, r3
 8005904:	6878      	ldr	r0, [r7, #4]
 8005906:	f7fe fe12 	bl	800452e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800590a:	2101      	movs	r1, #1
 800590c:	6838      	ldr	r0, [r7, #0]
 800590e:	f000 fa95 	bl	8005e3c <prvAddCurrentTaskToDelayedList>
}
 8005912:	bf00      	nop
 8005914:	3710      	adds	r7, #16
 8005916:	46bd      	mov	sp, r7
 8005918:	bd80      	pop	{r7, pc}
 800591a:	bf00      	nop
 800591c:	20001448 	.word	0x20001448

08005920 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005920:	b580      	push	{r7, lr}
 8005922:	b086      	sub	sp, #24
 8005924:	af00      	add	r7, sp, #0
 8005926:	60f8      	str	r0, [r7, #12]
 8005928:	60b9      	str	r1, [r7, #8]
 800592a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	2b00      	cmp	r3, #0
 8005930:	d10d      	bne.n	800594e <vTaskPlaceOnEventListRestricted+0x2e>
	__asm volatile
 8005932:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005936:	b672      	cpsid	i
 8005938:	f383 8811 	msr	BASEPRI, r3
 800593c:	f3bf 8f6f 	isb	sy
 8005940:	f3bf 8f4f 	dsb	sy
 8005944:	b662      	cpsie	i
 8005946:	617b      	str	r3, [r7, #20]
}
 8005948:	bf00      	nop
 800594a:	bf00      	nop
 800594c:	e7fd      	b.n	800594a <vTaskPlaceOnEventListRestricted+0x2a>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800594e:	4b0a      	ldr	r3, [pc, #40]	@ (8005978 <vTaskPlaceOnEventListRestricted+0x58>)
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	3318      	adds	r3, #24
 8005954:	4619      	mov	r1, r3
 8005956:	68f8      	ldr	r0, [r7, #12]
 8005958:	f7fe fdc5 	bl	80044e6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	2b00      	cmp	r3, #0
 8005960:	d002      	beq.n	8005968 <vTaskPlaceOnEventListRestricted+0x48>
		{
			xTicksToWait = portMAX_DELAY;
 8005962:	f04f 33ff 	mov.w	r3, #4294967295
 8005966:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8005968:	6879      	ldr	r1, [r7, #4]
 800596a:	68b8      	ldr	r0, [r7, #8]
 800596c:	f000 fa66 	bl	8005e3c <prvAddCurrentTaskToDelayedList>
	}
 8005970:	bf00      	nop
 8005972:	3718      	adds	r7, #24
 8005974:	46bd      	mov	sp, r7
 8005976:	bd80      	pop	{r7, pc}
 8005978:	20001448 	.word	0x20001448

0800597c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800597c:	b580      	push	{r7, lr}
 800597e:	b086      	sub	sp, #24
 8005980:	af00      	add	r7, sp, #0
 8005982:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	68db      	ldr	r3, [r3, #12]
 8005988:	68db      	ldr	r3, [r3, #12]
 800598a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800598c:	693b      	ldr	r3, [r7, #16]
 800598e:	2b00      	cmp	r3, #0
 8005990:	d10d      	bne.n	80059ae <xTaskRemoveFromEventList+0x32>
	__asm volatile
 8005992:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005996:	b672      	cpsid	i
 8005998:	f383 8811 	msr	BASEPRI, r3
 800599c:	f3bf 8f6f 	isb	sy
 80059a0:	f3bf 8f4f 	dsb	sy
 80059a4:	b662      	cpsie	i
 80059a6:	60fb      	str	r3, [r7, #12]
}
 80059a8:	bf00      	nop
 80059aa:	bf00      	nop
 80059ac:	e7fd      	b.n	80059aa <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80059ae:	693b      	ldr	r3, [r7, #16]
 80059b0:	3318      	adds	r3, #24
 80059b2:	4618      	mov	r0, r3
 80059b4:	f7fe fdf4 	bl	80045a0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80059b8:	4b1d      	ldr	r3, [pc, #116]	@ (8005a30 <xTaskRemoveFromEventList+0xb4>)
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d11d      	bne.n	80059fc <xTaskRemoveFromEventList+0x80>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80059c0:	693b      	ldr	r3, [r7, #16]
 80059c2:	3304      	adds	r3, #4
 80059c4:	4618      	mov	r0, r3
 80059c6:	f7fe fdeb 	bl	80045a0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80059ca:	693b      	ldr	r3, [r7, #16]
 80059cc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80059ce:	4b19      	ldr	r3, [pc, #100]	@ (8005a34 <xTaskRemoveFromEventList+0xb8>)
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	429a      	cmp	r2, r3
 80059d4:	d903      	bls.n	80059de <xTaskRemoveFromEventList+0x62>
 80059d6:	693b      	ldr	r3, [r7, #16]
 80059d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80059da:	4a16      	ldr	r2, [pc, #88]	@ (8005a34 <xTaskRemoveFromEventList+0xb8>)
 80059dc:	6013      	str	r3, [r2, #0]
 80059de:	693b      	ldr	r3, [r7, #16]
 80059e0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80059e2:	4613      	mov	r3, r2
 80059e4:	009b      	lsls	r3, r3, #2
 80059e6:	4413      	add	r3, r2
 80059e8:	009b      	lsls	r3, r3, #2
 80059ea:	4a13      	ldr	r2, [pc, #76]	@ (8005a38 <xTaskRemoveFromEventList+0xbc>)
 80059ec:	441a      	add	r2, r3
 80059ee:	693b      	ldr	r3, [r7, #16]
 80059f0:	3304      	adds	r3, #4
 80059f2:	4619      	mov	r1, r3
 80059f4:	4610      	mov	r0, r2
 80059f6:	f7fe fd76 	bl	80044e6 <vListInsertEnd>
 80059fa:	e005      	b.n	8005a08 <xTaskRemoveFromEventList+0x8c>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80059fc:	693b      	ldr	r3, [r7, #16]
 80059fe:	3318      	adds	r3, #24
 8005a00:	4619      	mov	r1, r3
 8005a02:	480e      	ldr	r0, [pc, #56]	@ (8005a3c <xTaskRemoveFromEventList+0xc0>)
 8005a04:	f7fe fd6f 	bl	80044e6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005a08:	693b      	ldr	r3, [r7, #16]
 8005a0a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005a0c:	4b0c      	ldr	r3, [pc, #48]	@ (8005a40 <xTaskRemoveFromEventList+0xc4>)
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a12:	429a      	cmp	r2, r3
 8005a14:	d905      	bls.n	8005a22 <xTaskRemoveFromEventList+0xa6>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8005a16:	2301      	movs	r3, #1
 8005a18:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8005a1a:	4b0a      	ldr	r3, [pc, #40]	@ (8005a44 <xTaskRemoveFromEventList+0xc8>)
 8005a1c:	2201      	movs	r2, #1
 8005a1e:	601a      	str	r2, [r3, #0]
 8005a20:	e001      	b.n	8005a26 <xTaskRemoveFromEventList+0xaa>
	}
	else
	{
		xReturn = pdFALSE;
 8005a22:	2300      	movs	r3, #0
 8005a24:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8005a26:	697b      	ldr	r3, [r7, #20]
}
 8005a28:	4618      	mov	r0, r3
 8005a2a:	3718      	adds	r7, #24
 8005a2c:	46bd      	mov	sp, r7
 8005a2e:	bd80      	pop	{r7, pc}
 8005a30:	20001944 	.word	0x20001944
 8005a34:	20001924 	.word	0x20001924
 8005a38:	2000144c 	.word	0x2000144c
 8005a3c:	200018dc 	.word	0x200018dc
 8005a40:	20001448 	.word	0x20001448
 8005a44:	20001930 	.word	0x20001930

08005a48 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8005a48:	b480      	push	{r7}
 8005a4a:	b083      	sub	sp, #12
 8005a4c:	af00      	add	r7, sp, #0
 8005a4e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005a50:	4b06      	ldr	r3, [pc, #24]	@ (8005a6c <vTaskInternalSetTimeOutState+0x24>)
 8005a52:	681a      	ldr	r2, [r3, #0]
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8005a58:	4b05      	ldr	r3, [pc, #20]	@ (8005a70 <vTaskInternalSetTimeOutState+0x28>)
 8005a5a:	681a      	ldr	r2, [r3, #0]
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	605a      	str	r2, [r3, #4]
}
 8005a60:	bf00      	nop
 8005a62:	370c      	adds	r7, #12
 8005a64:	46bd      	mov	sp, r7
 8005a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a6a:	4770      	bx	lr
 8005a6c:	20001934 	.word	0x20001934
 8005a70:	20001920 	.word	0x20001920

08005a74 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8005a74:	b580      	push	{r7, lr}
 8005a76:	b088      	sub	sp, #32
 8005a78:	af00      	add	r7, sp, #0
 8005a7a:	6078      	str	r0, [r7, #4]
 8005a7c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d10d      	bne.n	8005aa0 <xTaskCheckForTimeOut+0x2c>
	__asm volatile
 8005a84:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a88:	b672      	cpsid	i
 8005a8a:	f383 8811 	msr	BASEPRI, r3
 8005a8e:	f3bf 8f6f 	isb	sy
 8005a92:	f3bf 8f4f 	dsb	sy
 8005a96:	b662      	cpsie	i
 8005a98:	613b      	str	r3, [r7, #16]
}
 8005a9a:	bf00      	nop
 8005a9c:	bf00      	nop
 8005a9e:	e7fd      	b.n	8005a9c <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 8005aa0:	683b      	ldr	r3, [r7, #0]
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d10d      	bne.n	8005ac2 <xTaskCheckForTimeOut+0x4e>
	__asm volatile
 8005aa6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005aaa:	b672      	cpsid	i
 8005aac:	f383 8811 	msr	BASEPRI, r3
 8005ab0:	f3bf 8f6f 	isb	sy
 8005ab4:	f3bf 8f4f 	dsb	sy
 8005ab8:	b662      	cpsie	i
 8005aba:	60fb      	str	r3, [r7, #12]
}
 8005abc:	bf00      	nop
 8005abe:	bf00      	nop
 8005ac0:	e7fd      	b.n	8005abe <xTaskCheckForTimeOut+0x4a>

	taskENTER_CRITICAL();
 8005ac2:	f000 fe83 	bl	80067cc <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8005ac6:	4b1d      	ldr	r3, [pc, #116]	@ (8005b3c <xTaskCheckForTimeOut+0xc8>)
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	685b      	ldr	r3, [r3, #4]
 8005ad0:	69ba      	ldr	r2, [r7, #24]
 8005ad2:	1ad3      	subs	r3, r2, r3
 8005ad4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8005ad6:	683b      	ldr	r3, [r7, #0]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ade:	d102      	bne.n	8005ae6 <xTaskCheckForTimeOut+0x72>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8005ae0:	2300      	movs	r3, #0
 8005ae2:	61fb      	str	r3, [r7, #28]
 8005ae4:	e023      	b.n	8005b2e <xTaskCheckForTimeOut+0xba>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	681a      	ldr	r2, [r3, #0]
 8005aea:	4b15      	ldr	r3, [pc, #84]	@ (8005b40 <xTaskCheckForTimeOut+0xcc>)
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	429a      	cmp	r2, r3
 8005af0:	d007      	beq.n	8005b02 <xTaskCheckForTimeOut+0x8e>
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	685b      	ldr	r3, [r3, #4]
 8005af6:	69ba      	ldr	r2, [r7, #24]
 8005af8:	429a      	cmp	r2, r3
 8005afa:	d302      	bcc.n	8005b02 <xTaskCheckForTimeOut+0x8e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8005afc:	2301      	movs	r3, #1
 8005afe:	61fb      	str	r3, [r7, #28]
 8005b00:	e015      	b.n	8005b2e <xTaskCheckForTimeOut+0xba>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8005b02:	683b      	ldr	r3, [r7, #0]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	697a      	ldr	r2, [r7, #20]
 8005b08:	429a      	cmp	r2, r3
 8005b0a:	d20b      	bcs.n	8005b24 <xTaskCheckForTimeOut+0xb0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8005b0c:	683b      	ldr	r3, [r7, #0]
 8005b0e:	681a      	ldr	r2, [r3, #0]
 8005b10:	697b      	ldr	r3, [r7, #20]
 8005b12:	1ad2      	subs	r2, r2, r3
 8005b14:	683b      	ldr	r3, [r7, #0]
 8005b16:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8005b18:	6878      	ldr	r0, [r7, #4]
 8005b1a:	f7ff ff95 	bl	8005a48 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8005b1e:	2300      	movs	r3, #0
 8005b20:	61fb      	str	r3, [r7, #28]
 8005b22:	e004      	b.n	8005b2e <xTaskCheckForTimeOut+0xba>
		}
		else
		{
			*pxTicksToWait = 0;
 8005b24:	683b      	ldr	r3, [r7, #0]
 8005b26:	2200      	movs	r2, #0
 8005b28:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8005b2a:	2301      	movs	r3, #1
 8005b2c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8005b2e:	f000 fe83 	bl	8006838 <vPortExitCritical>

	return xReturn;
 8005b32:	69fb      	ldr	r3, [r7, #28]
}
 8005b34:	4618      	mov	r0, r3
 8005b36:	3720      	adds	r7, #32
 8005b38:	46bd      	mov	sp, r7
 8005b3a:	bd80      	pop	{r7, pc}
 8005b3c:	20001920 	.word	0x20001920
 8005b40:	20001934 	.word	0x20001934

08005b44 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8005b44:	b480      	push	{r7}
 8005b46:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8005b48:	4b03      	ldr	r3, [pc, #12]	@ (8005b58 <vTaskMissedYield+0x14>)
 8005b4a:	2201      	movs	r2, #1
 8005b4c:	601a      	str	r2, [r3, #0]
}
 8005b4e:	bf00      	nop
 8005b50:	46bd      	mov	sp, r7
 8005b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b56:	4770      	bx	lr
 8005b58:	20001930 	.word	0x20001930

08005b5c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005b5c:	b580      	push	{r7, lr}
 8005b5e:	b082      	sub	sp, #8
 8005b60:	af00      	add	r7, sp, #0
 8005b62:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005b64:	f000 f852 	bl	8005c0c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005b68:	4b06      	ldr	r3, [pc, #24]	@ (8005b84 <prvIdleTask+0x28>)
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	2b01      	cmp	r3, #1
 8005b6e:	d9f9      	bls.n	8005b64 <prvIdleTask+0x8>
			{
				taskYIELD();
 8005b70:	4b05      	ldr	r3, [pc, #20]	@ (8005b88 <prvIdleTask+0x2c>)
 8005b72:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005b76:	601a      	str	r2, [r3, #0]
 8005b78:	f3bf 8f4f 	dsb	sy
 8005b7c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005b80:	e7f0      	b.n	8005b64 <prvIdleTask+0x8>
 8005b82:	bf00      	nop
 8005b84:	2000144c 	.word	0x2000144c
 8005b88:	e000ed04 	.word	0xe000ed04

08005b8c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005b8c:	b580      	push	{r7, lr}
 8005b8e:	b082      	sub	sp, #8
 8005b90:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005b92:	2300      	movs	r3, #0
 8005b94:	607b      	str	r3, [r7, #4]
 8005b96:	e00c      	b.n	8005bb2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005b98:	687a      	ldr	r2, [r7, #4]
 8005b9a:	4613      	mov	r3, r2
 8005b9c:	009b      	lsls	r3, r3, #2
 8005b9e:	4413      	add	r3, r2
 8005ba0:	009b      	lsls	r3, r3, #2
 8005ba2:	4a12      	ldr	r2, [pc, #72]	@ (8005bec <prvInitialiseTaskLists+0x60>)
 8005ba4:	4413      	add	r3, r2
 8005ba6:	4618      	mov	r0, r3
 8005ba8:	f7fe fc70 	bl	800448c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	3301      	adds	r3, #1
 8005bb0:	607b      	str	r3, [r7, #4]
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	2b37      	cmp	r3, #55	@ 0x37
 8005bb6:	d9ef      	bls.n	8005b98 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005bb8:	480d      	ldr	r0, [pc, #52]	@ (8005bf0 <prvInitialiseTaskLists+0x64>)
 8005bba:	f7fe fc67 	bl	800448c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005bbe:	480d      	ldr	r0, [pc, #52]	@ (8005bf4 <prvInitialiseTaskLists+0x68>)
 8005bc0:	f7fe fc64 	bl	800448c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005bc4:	480c      	ldr	r0, [pc, #48]	@ (8005bf8 <prvInitialiseTaskLists+0x6c>)
 8005bc6:	f7fe fc61 	bl	800448c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005bca:	480c      	ldr	r0, [pc, #48]	@ (8005bfc <prvInitialiseTaskLists+0x70>)
 8005bcc:	f7fe fc5e 	bl	800448c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005bd0:	480b      	ldr	r0, [pc, #44]	@ (8005c00 <prvInitialiseTaskLists+0x74>)
 8005bd2:	f7fe fc5b 	bl	800448c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005bd6:	4b0b      	ldr	r3, [pc, #44]	@ (8005c04 <prvInitialiseTaskLists+0x78>)
 8005bd8:	4a05      	ldr	r2, [pc, #20]	@ (8005bf0 <prvInitialiseTaskLists+0x64>)
 8005bda:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005bdc:	4b0a      	ldr	r3, [pc, #40]	@ (8005c08 <prvInitialiseTaskLists+0x7c>)
 8005bde:	4a05      	ldr	r2, [pc, #20]	@ (8005bf4 <prvInitialiseTaskLists+0x68>)
 8005be0:	601a      	str	r2, [r3, #0]
}
 8005be2:	bf00      	nop
 8005be4:	3708      	adds	r7, #8
 8005be6:	46bd      	mov	sp, r7
 8005be8:	bd80      	pop	{r7, pc}
 8005bea:	bf00      	nop
 8005bec:	2000144c 	.word	0x2000144c
 8005bf0:	200018ac 	.word	0x200018ac
 8005bf4:	200018c0 	.word	0x200018c0
 8005bf8:	200018dc 	.word	0x200018dc
 8005bfc:	200018f0 	.word	0x200018f0
 8005c00:	20001908 	.word	0x20001908
 8005c04:	200018d4 	.word	0x200018d4
 8005c08:	200018d8 	.word	0x200018d8

08005c0c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005c0c:	b580      	push	{r7, lr}
 8005c0e:	b082      	sub	sp, #8
 8005c10:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005c12:	e019      	b.n	8005c48 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005c14:	f000 fdda 	bl	80067cc <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005c18:	4b10      	ldr	r3, [pc, #64]	@ (8005c5c <prvCheckTasksWaitingTermination+0x50>)
 8005c1a:	68db      	ldr	r3, [r3, #12]
 8005c1c:	68db      	ldr	r3, [r3, #12]
 8005c1e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	3304      	adds	r3, #4
 8005c24:	4618      	mov	r0, r3
 8005c26:	f7fe fcbb 	bl	80045a0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005c2a:	4b0d      	ldr	r3, [pc, #52]	@ (8005c60 <prvCheckTasksWaitingTermination+0x54>)
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	3b01      	subs	r3, #1
 8005c30:	4a0b      	ldr	r2, [pc, #44]	@ (8005c60 <prvCheckTasksWaitingTermination+0x54>)
 8005c32:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005c34:	4b0b      	ldr	r3, [pc, #44]	@ (8005c64 <prvCheckTasksWaitingTermination+0x58>)
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	3b01      	subs	r3, #1
 8005c3a:	4a0a      	ldr	r2, [pc, #40]	@ (8005c64 <prvCheckTasksWaitingTermination+0x58>)
 8005c3c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8005c3e:	f000 fdfb 	bl	8006838 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8005c42:	6878      	ldr	r0, [r7, #4]
 8005c44:	f000 f810 	bl	8005c68 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005c48:	4b06      	ldr	r3, [pc, #24]	@ (8005c64 <prvCheckTasksWaitingTermination+0x58>)
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d1e1      	bne.n	8005c14 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005c50:	bf00      	nop
 8005c52:	bf00      	nop
 8005c54:	3708      	adds	r7, #8
 8005c56:	46bd      	mov	sp, r7
 8005c58:	bd80      	pop	{r7, pc}
 8005c5a:	bf00      	nop
 8005c5c:	200018f0 	.word	0x200018f0
 8005c60:	2000191c 	.word	0x2000191c
 8005c64:	20001904 	.word	0x20001904

08005c68 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005c68:	b580      	push	{r7, lr}
 8005c6a:	b084      	sub	sp, #16
 8005c6c:	af00      	add	r7, sp, #0
 8005c6e:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	3354      	adds	r3, #84	@ 0x54
 8005c74:	4618      	mov	r0, r3
 8005c76:	f01e fc99 	bl	80245ac <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d108      	bne.n	8005c96 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005c88:	4618      	mov	r0, r3
 8005c8a:	f000 ff9b 	bl	8006bc4 <vPortFree>
				vPortFree( pxTCB );
 8005c8e:	6878      	ldr	r0, [r7, #4]
 8005c90:	f000 ff98 	bl	8006bc4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005c94:	e01b      	b.n	8005cce <prvDeleteTCB+0x66>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8005c9c:	2b01      	cmp	r3, #1
 8005c9e:	d103      	bne.n	8005ca8 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8005ca0:	6878      	ldr	r0, [r7, #4]
 8005ca2:	f000 ff8f 	bl	8006bc4 <vPortFree>
	}
 8005ca6:	e012      	b.n	8005cce <prvDeleteTCB+0x66>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8005cae:	2b02      	cmp	r3, #2
 8005cb0:	d00d      	beq.n	8005cce <prvDeleteTCB+0x66>
	__asm volatile
 8005cb2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005cb6:	b672      	cpsid	i
 8005cb8:	f383 8811 	msr	BASEPRI, r3
 8005cbc:	f3bf 8f6f 	isb	sy
 8005cc0:	f3bf 8f4f 	dsb	sy
 8005cc4:	b662      	cpsie	i
 8005cc6:	60fb      	str	r3, [r7, #12]
}
 8005cc8:	bf00      	nop
 8005cca:	bf00      	nop
 8005ccc:	e7fd      	b.n	8005cca <prvDeleteTCB+0x62>
	}
 8005cce:	bf00      	nop
 8005cd0:	3710      	adds	r7, #16
 8005cd2:	46bd      	mov	sp, r7
 8005cd4:	bd80      	pop	{r7, pc}
	...

08005cd8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005cd8:	b480      	push	{r7}
 8005cda:	b083      	sub	sp, #12
 8005cdc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005cde:	4b0c      	ldr	r3, [pc, #48]	@ (8005d10 <prvResetNextTaskUnblockTime+0x38>)
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d104      	bne.n	8005cf2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005ce8:	4b0a      	ldr	r3, [pc, #40]	@ (8005d14 <prvResetNextTaskUnblockTime+0x3c>)
 8005cea:	f04f 32ff 	mov.w	r2, #4294967295
 8005cee:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005cf0:	e008      	b.n	8005d04 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005cf2:	4b07      	ldr	r3, [pc, #28]	@ (8005d10 <prvResetNextTaskUnblockTime+0x38>)
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	68db      	ldr	r3, [r3, #12]
 8005cf8:	68db      	ldr	r3, [r3, #12]
 8005cfa:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	685b      	ldr	r3, [r3, #4]
 8005d00:	4a04      	ldr	r2, [pc, #16]	@ (8005d14 <prvResetNextTaskUnblockTime+0x3c>)
 8005d02:	6013      	str	r3, [r2, #0]
}
 8005d04:	bf00      	nop
 8005d06:	370c      	adds	r7, #12
 8005d08:	46bd      	mov	sp, r7
 8005d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d0e:	4770      	bx	lr
 8005d10:	200018d4 	.word	0x200018d4
 8005d14:	2000193c 	.word	0x2000193c

08005d18 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005d18:	b480      	push	{r7}
 8005d1a:	b083      	sub	sp, #12
 8005d1c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8005d1e:	4b0b      	ldr	r3, [pc, #44]	@ (8005d4c <xTaskGetSchedulerState+0x34>)
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d102      	bne.n	8005d2c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8005d26:	2301      	movs	r3, #1
 8005d28:	607b      	str	r3, [r7, #4]
 8005d2a:	e008      	b.n	8005d3e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005d2c:	4b08      	ldr	r3, [pc, #32]	@ (8005d50 <xTaskGetSchedulerState+0x38>)
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	d102      	bne.n	8005d3a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8005d34:	2302      	movs	r3, #2
 8005d36:	607b      	str	r3, [r7, #4]
 8005d38:	e001      	b.n	8005d3e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8005d3a:	2300      	movs	r3, #0
 8005d3c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8005d3e:	687b      	ldr	r3, [r7, #4]
	}
 8005d40:	4618      	mov	r0, r3
 8005d42:	370c      	adds	r7, #12
 8005d44:	46bd      	mov	sp, r7
 8005d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d4a:	4770      	bx	lr
 8005d4c:	20001928 	.word	0x20001928
 8005d50:	20001944 	.word	0x20001944

08005d54 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8005d54:	b580      	push	{r7, lr}
 8005d56:	b086      	sub	sp, #24
 8005d58:	af00      	add	r7, sp, #0
 8005d5a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8005d60:	2300      	movs	r3, #0
 8005d62:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d05c      	beq.n	8005e24 <xTaskPriorityDisinherit+0xd0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8005d6a:	4b31      	ldr	r3, [pc, #196]	@ (8005e30 <xTaskPriorityDisinherit+0xdc>)
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	693a      	ldr	r2, [r7, #16]
 8005d70:	429a      	cmp	r2, r3
 8005d72:	d00d      	beq.n	8005d90 <xTaskPriorityDisinherit+0x3c>
	__asm volatile
 8005d74:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d78:	b672      	cpsid	i
 8005d7a:	f383 8811 	msr	BASEPRI, r3
 8005d7e:	f3bf 8f6f 	isb	sy
 8005d82:	f3bf 8f4f 	dsb	sy
 8005d86:	b662      	cpsie	i
 8005d88:	60fb      	str	r3, [r7, #12]
}
 8005d8a:	bf00      	nop
 8005d8c:	bf00      	nop
 8005d8e:	e7fd      	b.n	8005d8c <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 8005d90:	693b      	ldr	r3, [r7, #16]
 8005d92:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d10d      	bne.n	8005db4 <xTaskPriorityDisinherit+0x60>
	__asm volatile
 8005d98:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d9c:	b672      	cpsid	i
 8005d9e:	f383 8811 	msr	BASEPRI, r3
 8005da2:	f3bf 8f6f 	isb	sy
 8005da6:	f3bf 8f4f 	dsb	sy
 8005daa:	b662      	cpsie	i
 8005dac:	60bb      	str	r3, [r7, #8]
}
 8005dae:	bf00      	nop
 8005db0:	bf00      	nop
 8005db2:	e7fd      	b.n	8005db0 <xTaskPriorityDisinherit+0x5c>
			( pxTCB->uxMutexesHeld )--;
 8005db4:	693b      	ldr	r3, [r7, #16]
 8005db6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005db8:	1e5a      	subs	r2, r3, #1
 8005dba:	693b      	ldr	r3, [r7, #16]
 8005dbc:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8005dbe:	693b      	ldr	r3, [r7, #16]
 8005dc0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005dc2:	693b      	ldr	r3, [r7, #16]
 8005dc4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005dc6:	429a      	cmp	r2, r3
 8005dc8:	d02c      	beq.n	8005e24 <xTaskPriorityDisinherit+0xd0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8005dca:	693b      	ldr	r3, [r7, #16]
 8005dcc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d128      	bne.n	8005e24 <xTaskPriorityDisinherit+0xd0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005dd2:	693b      	ldr	r3, [r7, #16]
 8005dd4:	3304      	adds	r3, #4
 8005dd6:	4618      	mov	r0, r3
 8005dd8:	f7fe fbe2 	bl	80045a0 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005ddc:	693b      	ldr	r3, [r7, #16]
 8005dde:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005de0:	693b      	ldr	r3, [r7, #16]
 8005de2:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005de4:	693b      	ldr	r3, [r7, #16]
 8005de6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005de8:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8005dec:	693b      	ldr	r3, [r7, #16]
 8005dee:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8005df0:	693b      	ldr	r3, [r7, #16]
 8005df2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005df4:	4b0f      	ldr	r3, [pc, #60]	@ (8005e34 <xTaskPriorityDisinherit+0xe0>)
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	429a      	cmp	r2, r3
 8005dfa:	d903      	bls.n	8005e04 <xTaskPriorityDisinherit+0xb0>
 8005dfc:	693b      	ldr	r3, [r7, #16]
 8005dfe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e00:	4a0c      	ldr	r2, [pc, #48]	@ (8005e34 <xTaskPriorityDisinherit+0xe0>)
 8005e02:	6013      	str	r3, [r2, #0]
 8005e04:	693b      	ldr	r3, [r7, #16]
 8005e06:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005e08:	4613      	mov	r3, r2
 8005e0a:	009b      	lsls	r3, r3, #2
 8005e0c:	4413      	add	r3, r2
 8005e0e:	009b      	lsls	r3, r3, #2
 8005e10:	4a09      	ldr	r2, [pc, #36]	@ (8005e38 <xTaskPriorityDisinherit+0xe4>)
 8005e12:	441a      	add	r2, r3
 8005e14:	693b      	ldr	r3, [r7, #16]
 8005e16:	3304      	adds	r3, #4
 8005e18:	4619      	mov	r1, r3
 8005e1a:	4610      	mov	r0, r2
 8005e1c:	f7fe fb63 	bl	80044e6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8005e20:	2301      	movs	r3, #1
 8005e22:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005e24:	697b      	ldr	r3, [r7, #20]
	}
 8005e26:	4618      	mov	r0, r3
 8005e28:	3718      	adds	r7, #24
 8005e2a:	46bd      	mov	sp, r7
 8005e2c:	bd80      	pop	{r7, pc}
 8005e2e:	bf00      	nop
 8005e30:	20001448 	.word	0x20001448
 8005e34:	20001924 	.word	0x20001924
 8005e38:	2000144c 	.word	0x2000144c

08005e3c <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005e3c:	b580      	push	{r7, lr}
 8005e3e:	b084      	sub	sp, #16
 8005e40:	af00      	add	r7, sp, #0
 8005e42:	6078      	str	r0, [r7, #4]
 8005e44:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005e46:	4b21      	ldr	r3, [pc, #132]	@ (8005ecc <prvAddCurrentTaskToDelayedList+0x90>)
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005e4c:	4b20      	ldr	r3, [pc, #128]	@ (8005ed0 <prvAddCurrentTaskToDelayedList+0x94>)
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	3304      	adds	r3, #4
 8005e52:	4618      	mov	r0, r3
 8005e54:	f7fe fba4 	bl	80045a0 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e5e:	d10a      	bne.n	8005e76 <prvAddCurrentTaskToDelayedList+0x3a>
 8005e60:	683b      	ldr	r3, [r7, #0]
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d007      	beq.n	8005e76 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005e66:	4b1a      	ldr	r3, [pc, #104]	@ (8005ed0 <prvAddCurrentTaskToDelayedList+0x94>)
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	3304      	adds	r3, #4
 8005e6c:	4619      	mov	r1, r3
 8005e6e:	4819      	ldr	r0, [pc, #100]	@ (8005ed4 <prvAddCurrentTaskToDelayedList+0x98>)
 8005e70:	f7fe fb39 	bl	80044e6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005e74:	e026      	b.n	8005ec4 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005e76:	68fa      	ldr	r2, [r7, #12]
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	4413      	add	r3, r2
 8005e7c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005e7e:	4b14      	ldr	r3, [pc, #80]	@ (8005ed0 <prvAddCurrentTaskToDelayedList+0x94>)
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	68ba      	ldr	r2, [r7, #8]
 8005e84:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005e86:	68ba      	ldr	r2, [r7, #8]
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	429a      	cmp	r2, r3
 8005e8c:	d209      	bcs.n	8005ea2 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005e8e:	4b12      	ldr	r3, [pc, #72]	@ (8005ed8 <prvAddCurrentTaskToDelayedList+0x9c>)
 8005e90:	681a      	ldr	r2, [r3, #0]
 8005e92:	4b0f      	ldr	r3, [pc, #60]	@ (8005ed0 <prvAddCurrentTaskToDelayedList+0x94>)
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	3304      	adds	r3, #4
 8005e98:	4619      	mov	r1, r3
 8005e9a:	4610      	mov	r0, r2
 8005e9c:	f7fe fb47 	bl	800452e <vListInsert>
}
 8005ea0:	e010      	b.n	8005ec4 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005ea2:	4b0e      	ldr	r3, [pc, #56]	@ (8005edc <prvAddCurrentTaskToDelayedList+0xa0>)
 8005ea4:	681a      	ldr	r2, [r3, #0]
 8005ea6:	4b0a      	ldr	r3, [pc, #40]	@ (8005ed0 <prvAddCurrentTaskToDelayedList+0x94>)
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	3304      	adds	r3, #4
 8005eac:	4619      	mov	r1, r3
 8005eae:	4610      	mov	r0, r2
 8005eb0:	f7fe fb3d 	bl	800452e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005eb4:	4b0a      	ldr	r3, [pc, #40]	@ (8005ee0 <prvAddCurrentTaskToDelayedList+0xa4>)
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	68ba      	ldr	r2, [r7, #8]
 8005eba:	429a      	cmp	r2, r3
 8005ebc:	d202      	bcs.n	8005ec4 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8005ebe:	4a08      	ldr	r2, [pc, #32]	@ (8005ee0 <prvAddCurrentTaskToDelayedList+0xa4>)
 8005ec0:	68bb      	ldr	r3, [r7, #8]
 8005ec2:	6013      	str	r3, [r2, #0]
}
 8005ec4:	bf00      	nop
 8005ec6:	3710      	adds	r7, #16
 8005ec8:	46bd      	mov	sp, r7
 8005eca:	bd80      	pop	{r7, pc}
 8005ecc:	20001920 	.word	0x20001920
 8005ed0:	20001448 	.word	0x20001448
 8005ed4:	20001908 	.word	0x20001908
 8005ed8:	200018d8 	.word	0x200018d8
 8005edc:	200018d4 	.word	0x200018d4
 8005ee0:	2000193c 	.word	0x2000193c

08005ee4 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8005ee4:	b580      	push	{r7, lr}
 8005ee6:	b08a      	sub	sp, #40	@ 0x28
 8005ee8:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8005eea:	2300      	movs	r3, #0
 8005eec:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8005eee:	f000 fb21 	bl	8006534 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8005ef2:	4b1e      	ldr	r3, [pc, #120]	@ (8005f6c <xTimerCreateTimerTask+0x88>)
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d021      	beq.n	8005f3e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8005efa:	2300      	movs	r3, #0
 8005efc:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8005efe:	2300      	movs	r3, #0
 8005f00:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8005f02:	1d3a      	adds	r2, r7, #4
 8005f04:	f107 0108 	add.w	r1, r7, #8
 8005f08:	f107 030c 	add.w	r3, r7, #12
 8005f0c:	4618      	mov	r0, r3
 8005f0e:	f7fe faa3 	bl	8004458 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8005f12:	6879      	ldr	r1, [r7, #4]
 8005f14:	68bb      	ldr	r3, [r7, #8]
 8005f16:	68fa      	ldr	r2, [r7, #12]
 8005f18:	9202      	str	r2, [sp, #8]
 8005f1a:	9301      	str	r3, [sp, #4]
 8005f1c:	2302      	movs	r3, #2
 8005f1e:	9300      	str	r3, [sp, #0]
 8005f20:	2300      	movs	r3, #0
 8005f22:	460a      	mov	r2, r1
 8005f24:	4912      	ldr	r1, [pc, #72]	@ (8005f70 <xTimerCreateTimerTask+0x8c>)
 8005f26:	4813      	ldr	r0, [pc, #76]	@ (8005f74 <xTimerCreateTimerTask+0x90>)
 8005f28:	f7ff f87e 	bl	8005028 <xTaskCreateStatic>
 8005f2c:	4603      	mov	r3, r0
 8005f2e:	4a12      	ldr	r2, [pc, #72]	@ (8005f78 <xTimerCreateTimerTask+0x94>)
 8005f30:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8005f32:	4b11      	ldr	r3, [pc, #68]	@ (8005f78 <xTimerCreateTimerTask+0x94>)
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d001      	beq.n	8005f3e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8005f3a:	2301      	movs	r3, #1
 8005f3c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8005f3e:	697b      	ldr	r3, [r7, #20]
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	d10d      	bne.n	8005f60 <xTimerCreateTimerTask+0x7c>
	__asm volatile
 8005f44:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f48:	b672      	cpsid	i
 8005f4a:	f383 8811 	msr	BASEPRI, r3
 8005f4e:	f3bf 8f6f 	isb	sy
 8005f52:	f3bf 8f4f 	dsb	sy
 8005f56:	b662      	cpsie	i
 8005f58:	613b      	str	r3, [r7, #16]
}
 8005f5a:	bf00      	nop
 8005f5c:	bf00      	nop
 8005f5e:	e7fd      	b.n	8005f5c <xTimerCreateTimerTask+0x78>
	return xReturn;
 8005f60:	697b      	ldr	r3, [r7, #20]
}
 8005f62:	4618      	mov	r0, r3
 8005f64:	3718      	adds	r7, #24
 8005f66:	46bd      	mov	sp, r7
 8005f68:	bd80      	pop	{r7, pc}
 8005f6a:	bf00      	nop
 8005f6c:	20001978 	.word	0x20001978
 8005f70:	08025130 	.word	0x08025130
 8005f74:	080060bd 	.word	0x080060bd
 8005f78:	2000197c 	.word	0x2000197c

08005f7c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8005f7c:	b580      	push	{r7, lr}
 8005f7e:	b08a      	sub	sp, #40	@ 0x28
 8005f80:	af00      	add	r7, sp, #0
 8005f82:	60f8      	str	r0, [r7, #12]
 8005f84:	60b9      	str	r1, [r7, #8]
 8005f86:	607a      	str	r2, [r7, #4]
 8005f88:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8005f8a:	2300      	movs	r3, #0
 8005f8c:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d10d      	bne.n	8005fb0 <xTimerGenericCommand+0x34>
	__asm volatile
 8005f94:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f98:	b672      	cpsid	i
 8005f9a:	f383 8811 	msr	BASEPRI, r3
 8005f9e:	f3bf 8f6f 	isb	sy
 8005fa2:	f3bf 8f4f 	dsb	sy
 8005fa6:	b662      	cpsie	i
 8005fa8:	623b      	str	r3, [r7, #32]
}
 8005faa:	bf00      	nop
 8005fac:	bf00      	nop
 8005fae:	e7fd      	b.n	8005fac <xTimerGenericCommand+0x30>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8005fb0:	4b19      	ldr	r3, [pc, #100]	@ (8006018 <xTimerGenericCommand+0x9c>)
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	d02a      	beq.n	800600e <xTimerGenericCommand+0x92>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8005fb8:	68bb      	ldr	r3, [r7, #8]
 8005fba:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8005fc4:	68bb      	ldr	r3, [r7, #8]
 8005fc6:	2b05      	cmp	r3, #5
 8005fc8:	dc18      	bgt.n	8005ffc <xTimerGenericCommand+0x80>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8005fca:	f7ff fea5 	bl	8005d18 <xTaskGetSchedulerState>
 8005fce:	4603      	mov	r3, r0
 8005fd0:	2b02      	cmp	r3, #2
 8005fd2:	d109      	bne.n	8005fe8 <xTimerGenericCommand+0x6c>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8005fd4:	4b10      	ldr	r3, [pc, #64]	@ (8006018 <xTimerGenericCommand+0x9c>)
 8005fd6:	6818      	ldr	r0, [r3, #0]
 8005fd8:	f107 0110 	add.w	r1, r7, #16
 8005fdc:	2300      	movs	r3, #0
 8005fde:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005fe0:	f7fe fc1e 	bl	8004820 <xQueueGenericSend>
 8005fe4:	6278      	str	r0, [r7, #36]	@ 0x24
 8005fe6:	e012      	b.n	800600e <xTimerGenericCommand+0x92>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8005fe8:	4b0b      	ldr	r3, [pc, #44]	@ (8006018 <xTimerGenericCommand+0x9c>)
 8005fea:	6818      	ldr	r0, [r3, #0]
 8005fec:	f107 0110 	add.w	r1, r7, #16
 8005ff0:	2300      	movs	r3, #0
 8005ff2:	2200      	movs	r2, #0
 8005ff4:	f7fe fc14 	bl	8004820 <xQueueGenericSend>
 8005ff8:	6278      	str	r0, [r7, #36]	@ 0x24
 8005ffa:	e008      	b.n	800600e <xTimerGenericCommand+0x92>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8005ffc:	4b06      	ldr	r3, [pc, #24]	@ (8006018 <xTimerGenericCommand+0x9c>)
 8005ffe:	6818      	ldr	r0, [r3, #0]
 8006000:	f107 0110 	add.w	r1, r7, #16
 8006004:	2300      	movs	r3, #0
 8006006:	683a      	ldr	r2, [r7, #0]
 8006008:	f7fe fd14 	bl	8004a34 <xQueueGenericSendFromISR>
 800600c:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800600e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8006010:	4618      	mov	r0, r3
 8006012:	3728      	adds	r7, #40	@ 0x28
 8006014:	46bd      	mov	sp, r7
 8006016:	bd80      	pop	{r7, pc}
 8006018:	20001978 	.word	0x20001978

0800601c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800601c:	b580      	push	{r7, lr}
 800601e:	b088      	sub	sp, #32
 8006020:	af02      	add	r7, sp, #8
 8006022:	6078      	str	r0, [r7, #4]
 8006024:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006026:	4b24      	ldr	r3, [pc, #144]	@ (80060b8 <prvProcessExpiredTimer+0x9c>)
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	68db      	ldr	r3, [r3, #12]
 800602c:	68db      	ldr	r3, [r3, #12]
 800602e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006030:	697b      	ldr	r3, [r7, #20]
 8006032:	3304      	adds	r3, #4
 8006034:	4618      	mov	r0, r3
 8006036:	f7fe fab3 	bl	80045a0 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800603a:	697b      	ldr	r3, [r7, #20]
 800603c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006040:	f003 0304 	and.w	r3, r3, #4
 8006044:	2b00      	cmp	r3, #0
 8006046:	d025      	beq.n	8006094 <prvProcessExpiredTimer+0x78>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8006048:	697b      	ldr	r3, [r7, #20]
 800604a:	699a      	ldr	r2, [r3, #24]
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	18d1      	adds	r1, r2, r3
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	683a      	ldr	r2, [r7, #0]
 8006054:	6978      	ldr	r0, [r7, #20]
 8006056:	f000 f8d7 	bl	8006208 <prvInsertTimerInActiveList>
 800605a:	4603      	mov	r3, r0
 800605c:	2b00      	cmp	r3, #0
 800605e:	d022      	beq.n	80060a6 <prvProcessExpiredTimer+0x8a>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006060:	2300      	movs	r3, #0
 8006062:	9300      	str	r3, [sp, #0]
 8006064:	2300      	movs	r3, #0
 8006066:	687a      	ldr	r2, [r7, #4]
 8006068:	2100      	movs	r1, #0
 800606a:	6978      	ldr	r0, [r7, #20]
 800606c:	f7ff ff86 	bl	8005f7c <xTimerGenericCommand>
 8006070:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8006072:	693b      	ldr	r3, [r7, #16]
 8006074:	2b00      	cmp	r3, #0
 8006076:	d116      	bne.n	80060a6 <prvProcessExpiredTimer+0x8a>
	__asm volatile
 8006078:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800607c:	b672      	cpsid	i
 800607e:	f383 8811 	msr	BASEPRI, r3
 8006082:	f3bf 8f6f 	isb	sy
 8006086:	f3bf 8f4f 	dsb	sy
 800608a:	b662      	cpsie	i
 800608c:	60fb      	str	r3, [r7, #12]
}
 800608e:	bf00      	nop
 8006090:	bf00      	nop
 8006092:	e7fd      	b.n	8006090 <prvProcessExpiredTimer+0x74>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006094:	697b      	ldr	r3, [r7, #20]
 8006096:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800609a:	f023 0301 	bic.w	r3, r3, #1
 800609e:	b2da      	uxtb	r2, r3
 80060a0:	697b      	ldr	r3, [r7, #20]
 80060a2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80060a6:	697b      	ldr	r3, [r7, #20]
 80060a8:	6a1b      	ldr	r3, [r3, #32]
 80060aa:	6978      	ldr	r0, [r7, #20]
 80060ac:	4798      	blx	r3
}
 80060ae:	bf00      	nop
 80060b0:	3718      	adds	r7, #24
 80060b2:	46bd      	mov	sp, r7
 80060b4:	bd80      	pop	{r7, pc}
 80060b6:	bf00      	nop
 80060b8:	20001970 	.word	0x20001970

080060bc <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80060bc:	b580      	push	{r7, lr}
 80060be:	b084      	sub	sp, #16
 80060c0:	af00      	add	r7, sp, #0
 80060c2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80060c4:	f107 0308 	add.w	r3, r7, #8
 80060c8:	4618      	mov	r0, r3
 80060ca:	f000 f859 	bl	8006180 <prvGetNextExpireTime>
 80060ce:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80060d0:	68bb      	ldr	r3, [r7, #8]
 80060d2:	4619      	mov	r1, r3
 80060d4:	68f8      	ldr	r0, [r7, #12]
 80060d6:	f000 f805 	bl	80060e4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80060da:	f000 f8d7 	bl	800628c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80060de:	bf00      	nop
 80060e0:	e7f0      	b.n	80060c4 <prvTimerTask+0x8>
	...

080060e4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80060e4:	b580      	push	{r7, lr}
 80060e6:	b084      	sub	sp, #16
 80060e8:	af00      	add	r7, sp, #0
 80060ea:	6078      	str	r0, [r7, #4]
 80060ec:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80060ee:	f7ff fa0d 	bl	800550c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80060f2:	f107 0308 	add.w	r3, r7, #8
 80060f6:	4618      	mov	r0, r3
 80060f8:	f000 f866 	bl	80061c8 <prvSampleTimeNow>
 80060fc:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80060fe:	68bb      	ldr	r3, [r7, #8]
 8006100:	2b00      	cmp	r3, #0
 8006102:	d130      	bne.n	8006166 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8006104:	683b      	ldr	r3, [r7, #0]
 8006106:	2b00      	cmp	r3, #0
 8006108:	d10a      	bne.n	8006120 <prvProcessTimerOrBlockTask+0x3c>
 800610a:	687a      	ldr	r2, [r7, #4]
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	429a      	cmp	r2, r3
 8006110:	d806      	bhi.n	8006120 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8006112:	f7ff fa09 	bl	8005528 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8006116:	68f9      	ldr	r1, [r7, #12]
 8006118:	6878      	ldr	r0, [r7, #4]
 800611a:	f7ff ff7f 	bl	800601c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800611e:	e024      	b.n	800616a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8006120:	683b      	ldr	r3, [r7, #0]
 8006122:	2b00      	cmp	r3, #0
 8006124:	d008      	beq.n	8006138 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8006126:	4b13      	ldr	r3, [pc, #76]	@ (8006174 <prvProcessTimerOrBlockTask+0x90>)
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	2b00      	cmp	r3, #0
 800612e:	d101      	bne.n	8006134 <prvProcessTimerOrBlockTask+0x50>
 8006130:	2301      	movs	r3, #1
 8006132:	e000      	b.n	8006136 <prvProcessTimerOrBlockTask+0x52>
 8006134:	2300      	movs	r3, #0
 8006136:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8006138:	4b0f      	ldr	r3, [pc, #60]	@ (8006178 <prvProcessTimerOrBlockTask+0x94>)
 800613a:	6818      	ldr	r0, [r3, #0]
 800613c:	687a      	ldr	r2, [r7, #4]
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	1ad3      	subs	r3, r2, r3
 8006142:	683a      	ldr	r2, [r7, #0]
 8006144:	4619      	mov	r1, r3
 8006146:	f7fe ff3b 	bl	8004fc0 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800614a:	f7ff f9ed 	bl	8005528 <xTaskResumeAll>
 800614e:	4603      	mov	r3, r0
 8006150:	2b00      	cmp	r3, #0
 8006152:	d10a      	bne.n	800616a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8006154:	4b09      	ldr	r3, [pc, #36]	@ (800617c <prvProcessTimerOrBlockTask+0x98>)
 8006156:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800615a:	601a      	str	r2, [r3, #0]
 800615c:	f3bf 8f4f 	dsb	sy
 8006160:	f3bf 8f6f 	isb	sy
}
 8006164:	e001      	b.n	800616a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8006166:	f7ff f9df 	bl	8005528 <xTaskResumeAll>
}
 800616a:	bf00      	nop
 800616c:	3710      	adds	r7, #16
 800616e:	46bd      	mov	sp, r7
 8006170:	bd80      	pop	{r7, pc}
 8006172:	bf00      	nop
 8006174:	20001974 	.word	0x20001974
 8006178:	20001978 	.word	0x20001978
 800617c:	e000ed04 	.word	0xe000ed04

08006180 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8006180:	b480      	push	{r7}
 8006182:	b085      	sub	sp, #20
 8006184:	af00      	add	r7, sp, #0
 8006186:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8006188:	4b0e      	ldr	r3, [pc, #56]	@ (80061c4 <prvGetNextExpireTime+0x44>)
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	2b00      	cmp	r3, #0
 8006190:	d101      	bne.n	8006196 <prvGetNextExpireTime+0x16>
 8006192:	2201      	movs	r2, #1
 8006194:	e000      	b.n	8006198 <prvGetNextExpireTime+0x18>
 8006196:	2200      	movs	r2, #0
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d105      	bne.n	80061b0 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80061a4:	4b07      	ldr	r3, [pc, #28]	@ (80061c4 <prvGetNextExpireTime+0x44>)
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	68db      	ldr	r3, [r3, #12]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	60fb      	str	r3, [r7, #12]
 80061ae:	e001      	b.n	80061b4 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80061b0:	2300      	movs	r3, #0
 80061b2:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80061b4:	68fb      	ldr	r3, [r7, #12]
}
 80061b6:	4618      	mov	r0, r3
 80061b8:	3714      	adds	r7, #20
 80061ba:	46bd      	mov	sp, r7
 80061bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061c0:	4770      	bx	lr
 80061c2:	bf00      	nop
 80061c4:	20001970 	.word	0x20001970

080061c8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80061c8:	b580      	push	{r7, lr}
 80061ca:	b084      	sub	sp, #16
 80061cc:	af00      	add	r7, sp, #0
 80061ce:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80061d0:	f7ff fa4a 	bl	8005668 <xTaskGetTickCount>
 80061d4:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80061d6:	4b0b      	ldr	r3, [pc, #44]	@ (8006204 <prvSampleTimeNow+0x3c>)
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	68fa      	ldr	r2, [r7, #12]
 80061dc:	429a      	cmp	r2, r3
 80061de:	d205      	bcs.n	80061ec <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80061e0:	f000 f940 	bl	8006464 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	2201      	movs	r2, #1
 80061e8:	601a      	str	r2, [r3, #0]
 80061ea:	e002      	b.n	80061f2 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	2200      	movs	r2, #0
 80061f0:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80061f2:	4a04      	ldr	r2, [pc, #16]	@ (8006204 <prvSampleTimeNow+0x3c>)
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80061f8:	68fb      	ldr	r3, [r7, #12]
}
 80061fa:	4618      	mov	r0, r3
 80061fc:	3710      	adds	r7, #16
 80061fe:	46bd      	mov	sp, r7
 8006200:	bd80      	pop	{r7, pc}
 8006202:	bf00      	nop
 8006204:	20001980 	.word	0x20001980

08006208 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8006208:	b580      	push	{r7, lr}
 800620a:	b086      	sub	sp, #24
 800620c:	af00      	add	r7, sp, #0
 800620e:	60f8      	str	r0, [r7, #12]
 8006210:	60b9      	str	r1, [r7, #8]
 8006212:	607a      	str	r2, [r7, #4]
 8006214:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8006216:	2300      	movs	r3, #0
 8006218:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	68ba      	ldr	r2, [r7, #8]
 800621e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	68fa      	ldr	r2, [r7, #12]
 8006224:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8006226:	68ba      	ldr	r2, [r7, #8]
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	429a      	cmp	r2, r3
 800622c:	d812      	bhi.n	8006254 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800622e:	687a      	ldr	r2, [r7, #4]
 8006230:	683b      	ldr	r3, [r7, #0]
 8006232:	1ad2      	subs	r2, r2, r3
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	699b      	ldr	r3, [r3, #24]
 8006238:	429a      	cmp	r2, r3
 800623a:	d302      	bcc.n	8006242 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800623c:	2301      	movs	r3, #1
 800623e:	617b      	str	r3, [r7, #20]
 8006240:	e01b      	b.n	800627a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8006242:	4b10      	ldr	r3, [pc, #64]	@ (8006284 <prvInsertTimerInActiveList+0x7c>)
 8006244:	681a      	ldr	r2, [r3, #0]
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	3304      	adds	r3, #4
 800624a:	4619      	mov	r1, r3
 800624c:	4610      	mov	r0, r2
 800624e:	f7fe f96e 	bl	800452e <vListInsert>
 8006252:	e012      	b.n	800627a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8006254:	687a      	ldr	r2, [r7, #4]
 8006256:	683b      	ldr	r3, [r7, #0]
 8006258:	429a      	cmp	r2, r3
 800625a:	d206      	bcs.n	800626a <prvInsertTimerInActiveList+0x62>
 800625c:	68ba      	ldr	r2, [r7, #8]
 800625e:	683b      	ldr	r3, [r7, #0]
 8006260:	429a      	cmp	r2, r3
 8006262:	d302      	bcc.n	800626a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8006264:	2301      	movs	r3, #1
 8006266:	617b      	str	r3, [r7, #20]
 8006268:	e007      	b.n	800627a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800626a:	4b07      	ldr	r3, [pc, #28]	@ (8006288 <prvInsertTimerInActiveList+0x80>)
 800626c:	681a      	ldr	r2, [r3, #0]
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	3304      	adds	r3, #4
 8006272:	4619      	mov	r1, r3
 8006274:	4610      	mov	r0, r2
 8006276:	f7fe f95a 	bl	800452e <vListInsert>
		}
	}

	return xProcessTimerNow;
 800627a:	697b      	ldr	r3, [r7, #20]
}
 800627c:	4618      	mov	r0, r3
 800627e:	3718      	adds	r7, #24
 8006280:	46bd      	mov	sp, r7
 8006282:	bd80      	pop	{r7, pc}
 8006284:	20001974 	.word	0x20001974
 8006288:	20001970 	.word	0x20001970

0800628c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800628c:	b580      	push	{r7, lr}
 800628e:	b08e      	sub	sp, #56	@ 0x38
 8006290:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006292:	e0d4      	b.n	800643e <prvProcessReceivedCommands+0x1b2>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	2b00      	cmp	r3, #0
 8006298:	da1b      	bge.n	80062d2 <prvProcessReceivedCommands+0x46>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800629a:	1d3b      	adds	r3, r7, #4
 800629c:	3304      	adds	r3, #4
 800629e:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80062a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d10d      	bne.n	80062c2 <prvProcessReceivedCommands+0x36>
	__asm volatile
 80062a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80062aa:	b672      	cpsid	i
 80062ac:	f383 8811 	msr	BASEPRI, r3
 80062b0:	f3bf 8f6f 	isb	sy
 80062b4:	f3bf 8f4f 	dsb	sy
 80062b8:	b662      	cpsie	i
 80062ba:	61fb      	str	r3, [r7, #28]
}
 80062bc:	bf00      	nop
 80062be:	bf00      	nop
 80062c0:	e7fd      	b.n	80062be <prvProcessReceivedCommands+0x32>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80062c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80062c8:	6850      	ldr	r0, [r2, #4]
 80062ca:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80062cc:	6892      	ldr	r2, [r2, #8]
 80062ce:	4611      	mov	r1, r2
 80062d0:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	f2c0 80b2 	blt.w	800643e <prvProcessReceivedCommands+0x1b2>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80062de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80062e0:	695b      	ldr	r3, [r3, #20]
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d004      	beq.n	80062f0 <prvProcessReceivedCommands+0x64>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80062e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80062e8:	3304      	adds	r3, #4
 80062ea:	4618      	mov	r0, r3
 80062ec:	f7fe f958 	bl	80045a0 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80062f0:	463b      	mov	r3, r7
 80062f2:	4618      	mov	r0, r3
 80062f4:	f7ff ff68 	bl	80061c8 <prvSampleTimeNow>
 80062f8:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	2b09      	cmp	r3, #9
 80062fe:	f200 809b 	bhi.w	8006438 <prvProcessReceivedCommands+0x1ac>
 8006302:	a201      	add	r2, pc, #4	@ (adr r2, 8006308 <prvProcessReceivedCommands+0x7c>)
 8006304:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006308:	08006331 	.word	0x08006331
 800630c:	08006331 	.word	0x08006331
 8006310:	08006331 	.word	0x08006331
 8006314:	080063ab 	.word	0x080063ab
 8006318:	080063bf 	.word	0x080063bf
 800631c:	0800640f 	.word	0x0800640f
 8006320:	08006331 	.word	0x08006331
 8006324:	08006331 	.word	0x08006331
 8006328:	080063ab 	.word	0x080063ab
 800632c:	080063bf 	.word	0x080063bf
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006330:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006332:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006336:	f043 0301 	orr.w	r3, r3, #1
 800633a:	b2da      	uxtb	r2, r3
 800633c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800633e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8006342:	68ba      	ldr	r2, [r7, #8]
 8006344:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006346:	699b      	ldr	r3, [r3, #24]
 8006348:	18d1      	adds	r1, r2, r3
 800634a:	68bb      	ldr	r3, [r7, #8]
 800634c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800634e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006350:	f7ff ff5a 	bl	8006208 <prvInsertTimerInActiveList>
 8006354:	4603      	mov	r3, r0
 8006356:	2b00      	cmp	r3, #0
 8006358:	d070      	beq.n	800643c <prvProcessReceivedCommands+0x1b0>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800635a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800635c:	6a1b      	ldr	r3, [r3, #32]
 800635e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006360:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006362:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006364:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006368:	f003 0304 	and.w	r3, r3, #4
 800636c:	2b00      	cmp	r3, #0
 800636e:	d065      	beq.n	800643c <prvProcessReceivedCommands+0x1b0>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8006370:	68ba      	ldr	r2, [r7, #8]
 8006372:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006374:	699b      	ldr	r3, [r3, #24]
 8006376:	441a      	add	r2, r3
 8006378:	2300      	movs	r3, #0
 800637a:	9300      	str	r3, [sp, #0]
 800637c:	2300      	movs	r3, #0
 800637e:	2100      	movs	r1, #0
 8006380:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006382:	f7ff fdfb 	bl	8005f7c <xTimerGenericCommand>
 8006386:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8006388:	6a3b      	ldr	r3, [r7, #32]
 800638a:	2b00      	cmp	r3, #0
 800638c:	d156      	bne.n	800643c <prvProcessReceivedCommands+0x1b0>
	__asm volatile
 800638e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006392:	b672      	cpsid	i
 8006394:	f383 8811 	msr	BASEPRI, r3
 8006398:	f3bf 8f6f 	isb	sy
 800639c:	f3bf 8f4f 	dsb	sy
 80063a0:	b662      	cpsie	i
 80063a2:	61bb      	str	r3, [r7, #24]
}
 80063a4:	bf00      	nop
 80063a6:	bf00      	nop
 80063a8:	e7fd      	b.n	80063a6 <prvProcessReceivedCommands+0x11a>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80063aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80063ac:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80063b0:	f023 0301 	bic.w	r3, r3, #1
 80063b4:	b2da      	uxtb	r2, r3
 80063b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80063b8:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 80063bc:	e03f      	b.n	800643e <prvProcessReceivedCommands+0x1b2>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80063be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80063c0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80063c4:	f043 0301 	orr.w	r3, r3, #1
 80063c8:	b2da      	uxtb	r2, r3
 80063ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80063cc:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80063d0:	68ba      	ldr	r2, [r7, #8]
 80063d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80063d4:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80063d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80063d8:	699b      	ldr	r3, [r3, #24]
 80063da:	2b00      	cmp	r3, #0
 80063dc:	d10d      	bne.n	80063fa <prvProcessReceivedCommands+0x16e>
	__asm volatile
 80063de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80063e2:	b672      	cpsid	i
 80063e4:	f383 8811 	msr	BASEPRI, r3
 80063e8:	f3bf 8f6f 	isb	sy
 80063ec:	f3bf 8f4f 	dsb	sy
 80063f0:	b662      	cpsie	i
 80063f2:	617b      	str	r3, [r7, #20]
}
 80063f4:	bf00      	nop
 80063f6:	bf00      	nop
 80063f8:	e7fd      	b.n	80063f6 <prvProcessReceivedCommands+0x16a>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80063fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80063fc:	699a      	ldr	r2, [r3, #24]
 80063fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006400:	18d1      	adds	r1, r2, r3
 8006402:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006404:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006406:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006408:	f7ff fefe 	bl	8006208 <prvInsertTimerInActiveList>
					break;
 800640c:	e017      	b.n	800643e <prvProcessReceivedCommands+0x1b2>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800640e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006410:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006414:	f003 0302 	and.w	r3, r3, #2
 8006418:	2b00      	cmp	r3, #0
 800641a:	d103      	bne.n	8006424 <prvProcessReceivedCommands+0x198>
						{
							vPortFree( pxTimer );
 800641c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800641e:	f000 fbd1 	bl	8006bc4 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8006422:	e00c      	b.n	800643e <prvProcessReceivedCommands+0x1b2>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006424:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006426:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800642a:	f023 0301 	bic.w	r3, r3, #1
 800642e:	b2da      	uxtb	r2, r3
 8006430:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006432:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8006436:	e002      	b.n	800643e <prvProcessReceivedCommands+0x1b2>

				default	:
					/* Don't expect to get here. */
					break;
 8006438:	bf00      	nop
 800643a:	e000      	b.n	800643e <prvProcessReceivedCommands+0x1b2>
					break;
 800643c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800643e:	4b08      	ldr	r3, [pc, #32]	@ (8006460 <prvProcessReceivedCommands+0x1d4>)
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	1d39      	adds	r1, r7, #4
 8006444:	2200      	movs	r2, #0
 8006446:	4618      	mov	r0, r3
 8006448:	f7fe fb98 	bl	8004b7c <xQueueReceive>
 800644c:	4603      	mov	r3, r0
 800644e:	2b00      	cmp	r3, #0
 8006450:	f47f af20 	bne.w	8006294 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8006454:	bf00      	nop
 8006456:	bf00      	nop
 8006458:	3730      	adds	r7, #48	@ 0x30
 800645a:	46bd      	mov	sp, r7
 800645c:	bd80      	pop	{r7, pc}
 800645e:	bf00      	nop
 8006460:	20001978 	.word	0x20001978

08006464 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8006464:	b580      	push	{r7, lr}
 8006466:	b088      	sub	sp, #32
 8006468:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800646a:	e04b      	b.n	8006504 <prvSwitchTimerLists+0xa0>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800646c:	4b2f      	ldr	r3, [pc, #188]	@ (800652c <prvSwitchTimerLists+0xc8>)
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	68db      	ldr	r3, [r3, #12]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006476:	4b2d      	ldr	r3, [pc, #180]	@ (800652c <prvSwitchTimerLists+0xc8>)
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	68db      	ldr	r3, [r3, #12]
 800647c:	68db      	ldr	r3, [r3, #12]
 800647e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	3304      	adds	r3, #4
 8006484:	4618      	mov	r0, r3
 8006486:	f7fe f88b 	bl	80045a0 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	6a1b      	ldr	r3, [r3, #32]
 800648e:	68f8      	ldr	r0, [r7, #12]
 8006490:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006498:	f003 0304 	and.w	r3, r3, #4
 800649c:	2b00      	cmp	r3, #0
 800649e:	d031      	beq.n	8006504 <prvSwitchTimerLists+0xa0>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	699b      	ldr	r3, [r3, #24]
 80064a4:	693a      	ldr	r2, [r7, #16]
 80064a6:	4413      	add	r3, r2
 80064a8:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80064aa:	68ba      	ldr	r2, [r7, #8]
 80064ac:	693b      	ldr	r3, [r7, #16]
 80064ae:	429a      	cmp	r2, r3
 80064b0:	d90e      	bls.n	80064d0 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	68ba      	ldr	r2, [r7, #8]
 80064b6:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	68fa      	ldr	r2, [r7, #12]
 80064bc:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80064be:	4b1b      	ldr	r3, [pc, #108]	@ (800652c <prvSwitchTimerLists+0xc8>)
 80064c0:	681a      	ldr	r2, [r3, #0]
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	3304      	adds	r3, #4
 80064c6:	4619      	mov	r1, r3
 80064c8:	4610      	mov	r0, r2
 80064ca:	f7fe f830 	bl	800452e <vListInsert>
 80064ce:	e019      	b.n	8006504 <prvSwitchTimerLists+0xa0>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80064d0:	2300      	movs	r3, #0
 80064d2:	9300      	str	r3, [sp, #0]
 80064d4:	2300      	movs	r3, #0
 80064d6:	693a      	ldr	r2, [r7, #16]
 80064d8:	2100      	movs	r1, #0
 80064da:	68f8      	ldr	r0, [r7, #12]
 80064dc:	f7ff fd4e 	bl	8005f7c <xTimerGenericCommand>
 80064e0:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	d10d      	bne.n	8006504 <prvSwitchTimerLists+0xa0>
	__asm volatile
 80064e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80064ec:	b672      	cpsid	i
 80064ee:	f383 8811 	msr	BASEPRI, r3
 80064f2:	f3bf 8f6f 	isb	sy
 80064f6:	f3bf 8f4f 	dsb	sy
 80064fa:	b662      	cpsie	i
 80064fc:	603b      	str	r3, [r7, #0]
}
 80064fe:	bf00      	nop
 8006500:	bf00      	nop
 8006502:	e7fd      	b.n	8006500 <prvSwitchTimerLists+0x9c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006504:	4b09      	ldr	r3, [pc, #36]	@ (800652c <prvSwitchTimerLists+0xc8>)
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	2b00      	cmp	r3, #0
 800650c:	d1ae      	bne.n	800646c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800650e:	4b07      	ldr	r3, [pc, #28]	@ (800652c <prvSwitchTimerLists+0xc8>)
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8006514:	4b06      	ldr	r3, [pc, #24]	@ (8006530 <prvSwitchTimerLists+0xcc>)
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	4a04      	ldr	r2, [pc, #16]	@ (800652c <prvSwitchTimerLists+0xc8>)
 800651a:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800651c:	4a04      	ldr	r2, [pc, #16]	@ (8006530 <prvSwitchTimerLists+0xcc>)
 800651e:	697b      	ldr	r3, [r7, #20]
 8006520:	6013      	str	r3, [r2, #0]
}
 8006522:	bf00      	nop
 8006524:	3718      	adds	r7, #24
 8006526:	46bd      	mov	sp, r7
 8006528:	bd80      	pop	{r7, pc}
 800652a:	bf00      	nop
 800652c:	20001970 	.word	0x20001970
 8006530:	20001974 	.word	0x20001974

08006534 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8006534:	b580      	push	{r7, lr}
 8006536:	b082      	sub	sp, #8
 8006538:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800653a:	f000 f947 	bl	80067cc <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800653e:	4b15      	ldr	r3, [pc, #84]	@ (8006594 <prvCheckForValidListAndQueue+0x60>)
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	2b00      	cmp	r3, #0
 8006544:	d120      	bne.n	8006588 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8006546:	4814      	ldr	r0, [pc, #80]	@ (8006598 <prvCheckForValidListAndQueue+0x64>)
 8006548:	f7fd ffa0 	bl	800448c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800654c:	4813      	ldr	r0, [pc, #76]	@ (800659c <prvCheckForValidListAndQueue+0x68>)
 800654e:	f7fd ff9d 	bl	800448c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8006552:	4b13      	ldr	r3, [pc, #76]	@ (80065a0 <prvCheckForValidListAndQueue+0x6c>)
 8006554:	4a10      	ldr	r2, [pc, #64]	@ (8006598 <prvCheckForValidListAndQueue+0x64>)
 8006556:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8006558:	4b12      	ldr	r3, [pc, #72]	@ (80065a4 <prvCheckForValidListAndQueue+0x70>)
 800655a:	4a10      	ldr	r2, [pc, #64]	@ (800659c <prvCheckForValidListAndQueue+0x68>)
 800655c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800655e:	2300      	movs	r3, #0
 8006560:	9300      	str	r3, [sp, #0]
 8006562:	4b11      	ldr	r3, [pc, #68]	@ (80065a8 <prvCheckForValidListAndQueue+0x74>)
 8006564:	4a11      	ldr	r2, [pc, #68]	@ (80065ac <prvCheckForValidListAndQueue+0x78>)
 8006566:	2110      	movs	r1, #16
 8006568:	200a      	movs	r0, #10
 800656a:	f7fe f8af 	bl	80046cc <xQueueGenericCreateStatic>
 800656e:	4603      	mov	r3, r0
 8006570:	4a08      	ldr	r2, [pc, #32]	@ (8006594 <prvCheckForValidListAndQueue+0x60>)
 8006572:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8006574:	4b07      	ldr	r3, [pc, #28]	@ (8006594 <prvCheckForValidListAndQueue+0x60>)
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	2b00      	cmp	r3, #0
 800657a:	d005      	beq.n	8006588 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800657c:	4b05      	ldr	r3, [pc, #20]	@ (8006594 <prvCheckForValidListAndQueue+0x60>)
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	490b      	ldr	r1, [pc, #44]	@ (80065b0 <prvCheckForValidListAndQueue+0x7c>)
 8006582:	4618      	mov	r0, r3
 8006584:	f7fe fcf2 	bl	8004f6c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006588:	f000 f956 	bl	8006838 <vPortExitCritical>
}
 800658c:	bf00      	nop
 800658e:	46bd      	mov	sp, r7
 8006590:	bd80      	pop	{r7, pc}
 8006592:	bf00      	nop
 8006594:	20001978 	.word	0x20001978
 8006598:	20001948 	.word	0x20001948
 800659c:	2000195c 	.word	0x2000195c
 80065a0:	20001970 	.word	0x20001970
 80065a4:	20001974 	.word	0x20001974
 80065a8:	20001a24 	.word	0x20001a24
 80065ac:	20001984 	.word	0x20001984
 80065b0:	08025138 	.word	0x08025138

080065b4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80065b4:	b480      	push	{r7}
 80065b6:	b085      	sub	sp, #20
 80065b8:	af00      	add	r7, sp, #0
 80065ba:	60f8      	str	r0, [r7, #12]
 80065bc:	60b9      	str	r1, [r7, #8]
 80065be:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	3b04      	subs	r3, #4
 80065c4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80065cc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	3b04      	subs	r3, #4
 80065d2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80065d4:	68bb      	ldr	r3, [r7, #8]
 80065d6:	f023 0201 	bic.w	r2, r3, #1
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	3b04      	subs	r3, #4
 80065e2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80065e4:	4a0c      	ldr	r2, [pc, #48]	@ (8006618 <pxPortInitialiseStack+0x64>)
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	3b14      	subs	r3, #20
 80065ee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80065f0:	687a      	ldr	r2, [r7, #4]
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	3b04      	subs	r3, #4
 80065fa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	f06f 0202 	mvn.w	r2, #2
 8006602:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	3b20      	subs	r3, #32
 8006608:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800660a:	68fb      	ldr	r3, [r7, #12]
}
 800660c:	4618      	mov	r0, r3
 800660e:	3714      	adds	r7, #20
 8006610:	46bd      	mov	sp, r7
 8006612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006616:	4770      	bx	lr
 8006618:	0800661d 	.word	0x0800661d

0800661c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800661c:	b480      	push	{r7}
 800661e:	b085      	sub	sp, #20
 8006620:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8006622:	2300      	movs	r3, #0
 8006624:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8006626:	4b15      	ldr	r3, [pc, #84]	@ (800667c <prvTaskExitError+0x60>)
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800662e:	d00d      	beq.n	800664c <prvTaskExitError+0x30>
	__asm volatile
 8006630:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006634:	b672      	cpsid	i
 8006636:	f383 8811 	msr	BASEPRI, r3
 800663a:	f3bf 8f6f 	isb	sy
 800663e:	f3bf 8f4f 	dsb	sy
 8006642:	b662      	cpsie	i
 8006644:	60fb      	str	r3, [r7, #12]
}
 8006646:	bf00      	nop
 8006648:	bf00      	nop
 800664a:	e7fd      	b.n	8006648 <prvTaskExitError+0x2c>
	__asm volatile
 800664c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006650:	b672      	cpsid	i
 8006652:	f383 8811 	msr	BASEPRI, r3
 8006656:	f3bf 8f6f 	isb	sy
 800665a:	f3bf 8f4f 	dsb	sy
 800665e:	b662      	cpsie	i
 8006660:	60bb      	str	r3, [r7, #8]
}
 8006662:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8006664:	bf00      	nop
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	2b00      	cmp	r3, #0
 800666a:	d0fc      	beq.n	8006666 <prvTaskExitError+0x4a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800666c:	bf00      	nop
 800666e:	bf00      	nop
 8006670:	3714      	adds	r7, #20
 8006672:	46bd      	mov	sp, r7
 8006674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006678:	4770      	bx	lr
 800667a:	bf00      	nop
 800667c:	2000000c 	.word	0x2000000c

08006680 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006680:	4b07      	ldr	r3, [pc, #28]	@ (80066a0 <pxCurrentTCBConst2>)
 8006682:	6819      	ldr	r1, [r3, #0]
 8006684:	6808      	ldr	r0, [r1, #0]
 8006686:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800668a:	f380 8809 	msr	PSP, r0
 800668e:	f3bf 8f6f 	isb	sy
 8006692:	f04f 0000 	mov.w	r0, #0
 8006696:	f380 8811 	msr	BASEPRI, r0
 800669a:	4770      	bx	lr
 800669c:	f3af 8000 	nop.w

080066a0 <pxCurrentTCBConst2>:
 80066a0:	20001448 	.word	0x20001448
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80066a4:	bf00      	nop
 80066a6:	bf00      	nop

080066a8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80066a8:	4808      	ldr	r0, [pc, #32]	@ (80066cc <prvPortStartFirstTask+0x24>)
 80066aa:	6800      	ldr	r0, [r0, #0]
 80066ac:	6800      	ldr	r0, [r0, #0]
 80066ae:	f380 8808 	msr	MSP, r0
 80066b2:	f04f 0000 	mov.w	r0, #0
 80066b6:	f380 8814 	msr	CONTROL, r0
 80066ba:	b662      	cpsie	i
 80066bc:	b661      	cpsie	f
 80066be:	f3bf 8f4f 	dsb	sy
 80066c2:	f3bf 8f6f 	isb	sy
 80066c6:	df00      	svc	0
 80066c8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80066ca:	bf00      	nop
 80066cc:	e000ed08 	.word	0xe000ed08

080066d0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80066d0:	b580      	push	{r7, lr}
 80066d2:	b084      	sub	sp, #16
 80066d4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80066d6:	4b37      	ldr	r3, [pc, #220]	@ (80067b4 <xPortStartScheduler+0xe4>)
 80066d8:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	781b      	ldrb	r3, [r3, #0]
 80066de:	b2db      	uxtb	r3, r3
 80066e0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	22ff      	movs	r2, #255	@ 0xff
 80066e6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	781b      	ldrb	r3, [r3, #0]
 80066ec:	b2db      	uxtb	r3, r3
 80066ee:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80066f0:	78fb      	ldrb	r3, [r7, #3]
 80066f2:	b2db      	uxtb	r3, r3
 80066f4:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80066f8:	b2da      	uxtb	r2, r3
 80066fa:	4b2f      	ldr	r3, [pc, #188]	@ (80067b8 <xPortStartScheduler+0xe8>)
 80066fc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80066fe:	4b2f      	ldr	r3, [pc, #188]	@ (80067bc <xPortStartScheduler+0xec>)
 8006700:	2207      	movs	r2, #7
 8006702:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006704:	e009      	b.n	800671a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8006706:	4b2d      	ldr	r3, [pc, #180]	@ (80067bc <xPortStartScheduler+0xec>)
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	3b01      	subs	r3, #1
 800670c:	4a2b      	ldr	r2, [pc, #172]	@ (80067bc <xPortStartScheduler+0xec>)
 800670e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006710:	78fb      	ldrb	r3, [r7, #3]
 8006712:	b2db      	uxtb	r3, r3
 8006714:	005b      	lsls	r3, r3, #1
 8006716:	b2db      	uxtb	r3, r3
 8006718:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800671a:	78fb      	ldrb	r3, [r7, #3]
 800671c:	b2db      	uxtb	r3, r3
 800671e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006722:	2b80      	cmp	r3, #128	@ 0x80
 8006724:	d0ef      	beq.n	8006706 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006726:	4b25      	ldr	r3, [pc, #148]	@ (80067bc <xPortStartScheduler+0xec>)
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	f1c3 0307 	rsb	r3, r3, #7
 800672e:	2b04      	cmp	r3, #4
 8006730:	d00d      	beq.n	800674e <xPortStartScheduler+0x7e>
	__asm volatile
 8006732:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006736:	b672      	cpsid	i
 8006738:	f383 8811 	msr	BASEPRI, r3
 800673c:	f3bf 8f6f 	isb	sy
 8006740:	f3bf 8f4f 	dsb	sy
 8006744:	b662      	cpsie	i
 8006746:	60bb      	str	r3, [r7, #8]
}
 8006748:	bf00      	nop
 800674a:	bf00      	nop
 800674c:	e7fd      	b.n	800674a <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800674e:	4b1b      	ldr	r3, [pc, #108]	@ (80067bc <xPortStartScheduler+0xec>)
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	021b      	lsls	r3, r3, #8
 8006754:	4a19      	ldr	r2, [pc, #100]	@ (80067bc <xPortStartScheduler+0xec>)
 8006756:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006758:	4b18      	ldr	r3, [pc, #96]	@ (80067bc <xPortStartScheduler+0xec>)
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8006760:	4a16      	ldr	r2, [pc, #88]	@ (80067bc <xPortStartScheduler+0xec>)
 8006762:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	b2da      	uxtb	r2, r3
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800676c:	4b14      	ldr	r3, [pc, #80]	@ (80067c0 <xPortStartScheduler+0xf0>)
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	4a13      	ldr	r2, [pc, #76]	@ (80067c0 <xPortStartScheduler+0xf0>)
 8006772:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8006776:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006778:	4b11      	ldr	r3, [pc, #68]	@ (80067c0 <xPortStartScheduler+0xf0>)
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	4a10      	ldr	r2, [pc, #64]	@ (80067c0 <xPortStartScheduler+0xf0>)
 800677e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8006782:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8006784:	f000 f8dc 	bl	8006940 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006788:	4b0e      	ldr	r3, [pc, #56]	@ (80067c4 <xPortStartScheduler+0xf4>)
 800678a:	2200      	movs	r2, #0
 800678c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800678e:	f000 f8fb 	bl	8006988 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8006792:	4b0d      	ldr	r3, [pc, #52]	@ (80067c8 <xPortStartScheduler+0xf8>)
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	4a0c      	ldr	r2, [pc, #48]	@ (80067c8 <xPortStartScheduler+0xf8>)
 8006798:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800679c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800679e:	f7ff ff83 	bl	80066a8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80067a2:	f7ff f82d 	bl	8005800 <vTaskSwitchContext>
	prvTaskExitError();
 80067a6:	f7ff ff39 	bl	800661c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80067aa:	2300      	movs	r3, #0
}
 80067ac:	4618      	mov	r0, r3
 80067ae:	3710      	adds	r7, #16
 80067b0:	46bd      	mov	sp, r7
 80067b2:	bd80      	pop	{r7, pc}
 80067b4:	e000e400 	.word	0xe000e400
 80067b8:	20001a74 	.word	0x20001a74
 80067bc:	20001a78 	.word	0x20001a78
 80067c0:	e000ed20 	.word	0xe000ed20
 80067c4:	2000000c 	.word	0x2000000c
 80067c8:	e000ef34 	.word	0xe000ef34

080067cc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80067cc:	b480      	push	{r7}
 80067ce:	b083      	sub	sp, #12
 80067d0:	af00      	add	r7, sp, #0
	__asm volatile
 80067d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80067d6:	b672      	cpsid	i
 80067d8:	f383 8811 	msr	BASEPRI, r3
 80067dc:	f3bf 8f6f 	isb	sy
 80067e0:	f3bf 8f4f 	dsb	sy
 80067e4:	b662      	cpsie	i
 80067e6:	607b      	str	r3, [r7, #4]
}
 80067e8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80067ea:	4b11      	ldr	r3, [pc, #68]	@ (8006830 <vPortEnterCritical+0x64>)
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	3301      	adds	r3, #1
 80067f0:	4a0f      	ldr	r2, [pc, #60]	@ (8006830 <vPortEnterCritical+0x64>)
 80067f2:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80067f4:	4b0e      	ldr	r3, [pc, #56]	@ (8006830 <vPortEnterCritical+0x64>)
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	2b01      	cmp	r3, #1
 80067fa:	d112      	bne.n	8006822 <vPortEnterCritical+0x56>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80067fc:	4b0d      	ldr	r3, [pc, #52]	@ (8006834 <vPortEnterCritical+0x68>)
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	b2db      	uxtb	r3, r3
 8006802:	2b00      	cmp	r3, #0
 8006804:	d00d      	beq.n	8006822 <vPortEnterCritical+0x56>
	__asm volatile
 8006806:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800680a:	b672      	cpsid	i
 800680c:	f383 8811 	msr	BASEPRI, r3
 8006810:	f3bf 8f6f 	isb	sy
 8006814:	f3bf 8f4f 	dsb	sy
 8006818:	b662      	cpsie	i
 800681a:	603b      	str	r3, [r7, #0]
}
 800681c:	bf00      	nop
 800681e:	bf00      	nop
 8006820:	e7fd      	b.n	800681e <vPortEnterCritical+0x52>
	}
}
 8006822:	bf00      	nop
 8006824:	370c      	adds	r7, #12
 8006826:	46bd      	mov	sp, r7
 8006828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800682c:	4770      	bx	lr
 800682e:	bf00      	nop
 8006830:	2000000c 	.word	0x2000000c
 8006834:	e000ed04 	.word	0xe000ed04

08006838 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006838:	b480      	push	{r7}
 800683a:	b083      	sub	sp, #12
 800683c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800683e:	4b13      	ldr	r3, [pc, #76]	@ (800688c <vPortExitCritical+0x54>)
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	2b00      	cmp	r3, #0
 8006844:	d10d      	bne.n	8006862 <vPortExitCritical+0x2a>
	__asm volatile
 8006846:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800684a:	b672      	cpsid	i
 800684c:	f383 8811 	msr	BASEPRI, r3
 8006850:	f3bf 8f6f 	isb	sy
 8006854:	f3bf 8f4f 	dsb	sy
 8006858:	b662      	cpsie	i
 800685a:	607b      	str	r3, [r7, #4]
}
 800685c:	bf00      	nop
 800685e:	bf00      	nop
 8006860:	e7fd      	b.n	800685e <vPortExitCritical+0x26>
	uxCriticalNesting--;
 8006862:	4b0a      	ldr	r3, [pc, #40]	@ (800688c <vPortExitCritical+0x54>)
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	3b01      	subs	r3, #1
 8006868:	4a08      	ldr	r2, [pc, #32]	@ (800688c <vPortExitCritical+0x54>)
 800686a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800686c:	4b07      	ldr	r3, [pc, #28]	@ (800688c <vPortExitCritical+0x54>)
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	2b00      	cmp	r3, #0
 8006872:	d105      	bne.n	8006880 <vPortExitCritical+0x48>
 8006874:	2300      	movs	r3, #0
 8006876:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006878:	683b      	ldr	r3, [r7, #0]
 800687a:	f383 8811 	msr	BASEPRI, r3
}
 800687e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8006880:	bf00      	nop
 8006882:	370c      	adds	r7, #12
 8006884:	46bd      	mov	sp, r7
 8006886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800688a:	4770      	bx	lr
 800688c:	2000000c 	.word	0x2000000c

08006890 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006890:	f3ef 8009 	mrs	r0, PSP
 8006894:	f3bf 8f6f 	isb	sy
 8006898:	4b15      	ldr	r3, [pc, #84]	@ (80068f0 <pxCurrentTCBConst>)
 800689a:	681a      	ldr	r2, [r3, #0]
 800689c:	f01e 0f10 	tst.w	lr, #16
 80068a0:	bf08      	it	eq
 80068a2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80068a6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80068aa:	6010      	str	r0, [r2, #0]
 80068ac:	e92d 0009 	stmdb	sp!, {r0, r3}
 80068b0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 80068b4:	b672      	cpsid	i
 80068b6:	f380 8811 	msr	BASEPRI, r0
 80068ba:	f3bf 8f4f 	dsb	sy
 80068be:	f3bf 8f6f 	isb	sy
 80068c2:	b662      	cpsie	i
 80068c4:	f7fe ff9c 	bl	8005800 <vTaskSwitchContext>
 80068c8:	f04f 0000 	mov.w	r0, #0
 80068cc:	f380 8811 	msr	BASEPRI, r0
 80068d0:	bc09      	pop	{r0, r3}
 80068d2:	6819      	ldr	r1, [r3, #0]
 80068d4:	6808      	ldr	r0, [r1, #0]
 80068d6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80068da:	f01e 0f10 	tst.w	lr, #16
 80068de:	bf08      	it	eq
 80068e0:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80068e4:	f380 8809 	msr	PSP, r0
 80068e8:	f3bf 8f6f 	isb	sy
 80068ec:	4770      	bx	lr
 80068ee:	bf00      	nop

080068f0 <pxCurrentTCBConst>:
 80068f0:	20001448 	.word	0x20001448
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80068f4:	bf00      	nop
 80068f6:	bf00      	nop

080068f8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80068f8:	b580      	push	{r7, lr}
 80068fa:	b082      	sub	sp, #8
 80068fc:	af00      	add	r7, sp, #0
	__asm volatile
 80068fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006902:	b672      	cpsid	i
 8006904:	f383 8811 	msr	BASEPRI, r3
 8006908:	f3bf 8f6f 	isb	sy
 800690c:	f3bf 8f4f 	dsb	sy
 8006910:	b662      	cpsie	i
 8006912:	607b      	str	r3, [r7, #4]
}
 8006914:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006916:	f7fe feb7 	bl	8005688 <xTaskIncrementTick>
 800691a:	4603      	mov	r3, r0
 800691c:	2b00      	cmp	r3, #0
 800691e:	d003      	beq.n	8006928 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8006920:	4b06      	ldr	r3, [pc, #24]	@ (800693c <SysTick_Handler+0x44>)
 8006922:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006926:	601a      	str	r2, [r3, #0]
 8006928:	2300      	movs	r3, #0
 800692a:	603b      	str	r3, [r7, #0]
	__asm volatile
 800692c:	683b      	ldr	r3, [r7, #0]
 800692e:	f383 8811 	msr	BASEPRI, r3
}
 8006932:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006934:	bf00      	nop
 8006936:	3708      	adds	r7, #8
 8006938:	46bd      	mov	sp, r7
 800693a:	bd80      	pop	{r7, pc}
 800693c:	e000ed04 	.word	0xe000ed04

08006940 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8006940:	b480      	push	{r7}
 8006942:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006944:	4b0b      	ldr	r3, [pc, #44]	@ (8006974 <vPortSetupTimerInterrupt+0x34>)
 8006946:	2200      	movs	r2, #0
 8006948:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800694a:	4b0b      	ldr	r3, [pc, #44]	@ (8006978 <vPortSetupTimerInterrupt+0x38>)
 800694c:	2200      	movs	r2, #0
 800694e:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8006950:	4b0a      	ldr	r3, [pc, #40]	@ (800697c <vPortSetupTimerInterrupt+0x3c>)
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	4a0a      	ldr	r2, [pc, #40]	@ (8006980 <vPortSetupTimerInterrupt+0x40>)
 8006956:	fba2 2303 	umull	r2, r3, r2, r3
 800695a:	099b      	lsrs	r3, r3, #6
 800695c:	4a09      	ldr	r2, [pc, #36]	@ (8006984 <vPortSetupTimerInterrupt+0x44>)
 800695e:	3b01      	subs	r3, #1
 8006960:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8006962:	4b04      	ldr	r3, [pc, #16]	@ (8006974 <vPortSetupTimerInterrupt+0x34>)
 8006964:	2207      	movs	r2, #7
 8006966:	601a      	str	r2, [r3, #0]
}
 8006968:	bf00      	nop
 800696a:	46bd      	mov	sp, r7
 800696c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006970:	4770      	bx	lr
 8006972:	bf00      	nop
 8006974:	e000e010 	.word	0xe000e010
 8006978:	e000e018 	.word	0xe000e018
 800697c:	20000000 	.word	0x20000000
 8006980:	10624dd3 	.word	0x10624dd3
 8006984:	e000e014 	.word	0xe000e014

08006988 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006988:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8006998 <vPortEnableVFP+0x10>
 800698c:	6801      	ldr	r1, [r0, #0]
 800698e:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8006992:	6001      	str	r1, [r0, #0]
 8006994:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8006996:	bf00      	nop
 8006998:	e000ed88 	.word	0xe000ed88

0800699c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800699c:	b480      	push	{r7}
 800699e:	b085      	sub	sp, #20
 80069a0:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80069a2:	f3ef 8305 	mrs	r3, IPSR
 80069a6:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	2b0f      	cmp	r3, #15
 80069ac:	d917      	bls.n	80069de <vPortValidateInterruptPriority+0x42>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80069ae:	4a1a      	ldr	r2, [pc, #104]	@ (8006a18 <vPortValidateInterruptPriority+0x7c>)
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	4413      	add	r3, r2
 80069b4:	781b      	ldrb	r3, [r3, #0]
 80069b6:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80069b8:	4b18      	ldr	r3, [pc, #96]	@ (8006a1c <vPortValidateInterruptPriority+0x80>)
 80069ba:	781b      	ldrb	r3, [r3, #0]
 80069bc:	7afa      	ldrb	r2, [r7, #11]
 80069be:	429a      	cmp	r2, r3
 80069c0:	d20d      	bcs.n	80069de <vPortValidateInterruptPriority+0x42>
	__asm volatile
 80069c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80069c6:	b672      	cpsid	i
 80069c8:	f383 8811 	msr	BASEPRI, r3
 80069cc:	f3bf 8f6f 	isb	sy
 80069d0:	f3bf 8f4f 	dsb	sy
 80069d4:	b662      	cpsie	i
 80069d6:	607b      	str	r3, [r7, #4]
}
 80069d8:	bf00      	nop
 80069da:	bf00      	nop
 80069dc:	e7fd      	b.n	80069da <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80069de:	4b10      	ldr	r3, [pc, #64]	@ (8006a20 <vPortValidateInterruptPriority+0x84>)
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80069e6:	4b0f      	ldr	r3, [pc, #60]	@ (8006a24 <vPortValidateInterruptPriority+0x88>)
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	429a      	cmp	r2, r3
 80069ec:	d90d      	bls.n	8006a0a <vPortValidateInterruptPriority+0x6e>
	__asm volatile
 80069ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80069f2:	b672      	cpsid	i
 80069f4:	f383 8811 	msr	BASEPRI, r3
 80069f8:	f3bf 8f6f 	isb	sy
 80069fc:	f3bf 8f4f 	dsb	sy
 8006a00:	b662      	cpsie	i
 8006a02:	603b      	str	r3, [r7, #0]
}
 8006a04:	bf00      	nop
 8006a06:	bf00      	nop
 8006a08:	e7fd      	b.n	8006a06 <vPortValidateInterruptPriority+0x6a>
	}
 8006a0a:	bf00      	nop
 8006a0c:	3714      	adds	r7, #20
 8006a0e:	46bd      	mov	sp, r7
 8006a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a14:	4770      	bx	lr
 8006a16:	bf00      	nop
 8006a18:	e000e3f0 	.word	0xe000e3f0
 8006a1c:	20001a74 	.word	0x20001a74
 8006a20:	e000ed0c 	.word	0xe000ed0c
 8006a24:	20001a78 	.word	0x20001a78

08006a28 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006a28:	b580      	push	{r7, lr}
 8006a2a:	b08a      	sub	sp, #40	@ 0x28
 8006a2c:	af00      	add	r7, sp, #0
 8006a2e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006a30:	2300      	movs	r3, #0
 8006a32:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006a34:	f7fe fd6a 	bl	800550c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006a38:	4b5d      	ldr	r3, [pc, #372]	@ (8006bb0 <pvPortMalloc+0x188>)
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	d101      	bne.n	8006a44 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006a40:	f000 f920 	bl	8006c84 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006a44:	4b5b      	ldr	r3, [pc, #364]	@ (8006bb4 <pvPortMalloc+0x18c>)
 8006a46:	681a      	ldr	r2, [r3, #0]
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	4013      	ands	r3, r2
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	f040 8094 	bne.w	8006b7a <pvPortMalloc+0x152>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	d020      	beq.n	8006a9a <pvPortMalloc+0x72>
			{
				xWantedSize += xHeapStructSize;
 8006a58:	2208      	movs	r2, #8
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	4413      	add	r3, r2
 8006a5e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	f003 0307 	and.w	r3, r3, #7
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	d017      	beq.n	8006a9a <pvPortMalloc+0x72>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	f023 0307 	bic.w	r3, r3, #7
 8006a70:	3308      	adds	r3, #8
 8006a72:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	f003 0307 	and.w	r3, r3, #7
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	d00d      	beq.n	8006a9a <pvPortMalloc+0x72>
	__asm volatile
 8006a7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a82:	b672      	cpsid	i
 8006a84:	f383 8811 	msr	BASEPRI, r3
 8006a88:	f3bf 8f6f 	isb	sy
 8006a8c:	f3bf 8f4f 	dsb	sy
 8006a90:	b662      	cpsie	i
 8006a92:	617b      	str	r3, [r7, #20]
}
 8006a94:	bf00      	nop
 8006a96:	bf00      	nop
 8006a98:	e7fd      	b.n	8006a96 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	d06c      	beq.n	8006b7a <pvPortMalloc+0x152>
 8006aa0:	4b45      	ldr	r3, [pc, #276]	@ (8006bb8 <pvPortMalloc+0x190>)
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	687a      	ldr	r2, [r7, #4]
 8006aa6:	429a      	cmp	r2, r3
 8006aa8:	d867      	bhi.n	8006b7a <pvPortMalloc+0x152>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8006aaa:	4b44      	ldr	r3, [pc, #272]	@ (8006bbc <pvPortMalloc+0x194>)
 8006aac:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8006aae:	4b43      	ldr	r3, [pc, #268]	@ (8006bbc <pvPortMalloc+0x194>)
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006ab4:	e004      	b.n	8006ac0 <pvPortMalloc+0x98>
				{
					pxPreviousBlock = pxBlock;
 8006ab6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ab8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8006aba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006ac0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ac2:	685b      	ldr	r3, [r3, #4]
 8006ac4:	687a      	ldr	r2, [r7, #4]
 8006ac6:	429a      	cmp	r2, r3
 8006ac8:	d903      	bls.n	8006ad2 <pvPortMalloc+0xaa>
 8006aca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	d1f1      	bne.n	8006ab6 <pvPortMalloc+0x8e>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8006ad2:	4b37      	ldr	r3, [pc, #220]	@ (8006bb0 <pvPortMalloc+0x188>)
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006ad8:	429a      	cmp	r2, r3
 8006ada:	d04e      	beq.n	8006b7a <pvPortMalloc+0x152>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006adc:	6a3b      	ldr	r3, [r7, #32]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	2208      	movs	r2, #8
 8006ae2:	4413      	add	r3, r2
 8006ae4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006ae6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ae8:	681a      	ldr	r2, [r3, #0]
 8006aea:	6a3b      	ldr	r3, [r7, #32]
 8006aec:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006aee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006af0:	685a      	ldr	r2, [r3, #4]
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	1ad2      	subs	r2, r2, r3
 8006af6:	2308      	movs	r3, #8
 8006af8:	005b      	lsls	r3, r3, #1
 8006afa:	429a      	cmp	r2, r3
 8006afc:	d922      	bls.n	8006b44 <pvPortMalloc+0x11c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006afe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	4413      	add	r3, r2
 8006b04:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006b06:	69bb      	ldr	r3, [r7, #24]
 8006b08:	f003 0307 	and.w	r3, r3, #7
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	d00d      	beq.n	8006b2c <pvPortMalloc+0x104>
	__asm volatile
 8006b10:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b14:	b672      	cpsid	i
 8006b16:	f383 8811 	msr	BASEPRI, r3
 8006b1a:	f3bf 8f6f 	isb	sy
 8006b1e:	f3bf 8f4f 	dsb	sy
 8006b22:	b662      	cpsie	i
 8006b24:	613b      	str	r3, [r7, #16]
}
 8006b26:	bf00      	nop
 8006b28:	bf00      	nop
 8006b2a:	e7fd      	b.n	8006b28 <pvPortMalloc+0x100>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006b2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b2e:	685a      	ldr	r2, [r3, #4]
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	1ad2      	subs	r2, r2, r3
 8006b34:	69bb      	ldr	r3, [r7, #24]
 8006b36:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006b38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b3a:	687a      	ldr	r2, [r7, #4]
 8006b3c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006b3e:	69b8      	ldr	r0, [r7, #24]
 8006b40:	f000 f902 	bl	8006d48 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006b44:	4b1c      	ldr	r3, [pc, #112]	@ (8006bb8 <pvPortMalloc+0x190>)
 8006b46:	681a      	ldr	r2, [r3, #0]
 8006b48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b4a:	685b      	ldr	r3, [r3, #4]
 8006b4c:	1ad3      	subs	r3, r2, r3
 8006b4e:	4a1a      	ldr	r2, [pc, #104]	@ (8006bb8 <pvPortMalloc+0x190>)
 8006b50:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006b52:	4b19      	ldr	r3, [pc, #100]	@ (8006bb8 <pvPortMalloc+0x190>)
 8006b54:	681a      	ldr	r2, [r3, #0]
 8006b56:	4b1a      	ldr	r3, [pc, #104]	@ (8006bc0 <pvPortMalloc+0x198>)
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	429a      	cmp	r2, r3
 8006b5c:	d203      	bcs.n	8006b66 <pvPortMalloc+0x13e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006b5e:	4b16      	ldr	r3, [pc, #88]	@ (8006bb8 <pvPortMalloc+0x190>)
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	4a17      	ldr	r2, [pc, #92]	@ (8006bc0 <pvPortMalloc+0x198>)
 8006b64:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006b66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b68:	685a      	ldr	r2, [r3, #4]
 8006b6a:	4b12      	ldr	r3, [pc, #72]	@ (8006bb4 <pvPortMalloc+0x18c>)
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	431a      	orrs	r2, r3
 8006b70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b72:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006b74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b76:	2200      	movs	r2, #0
 8006b78:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006b7a:	f7fe fcd5 	bl	8005528 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006b7e:	69fb      	ldr	r3, [r7, #28]
 8006b80:	f003 0307 	and.w	r3, r3, #7
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	d00d      	beq.n	8006ba4 <pvPortMalloc+0x17c>
	__asm volatile
 8006b88:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b8c:	b672      	cpsid	i
 8006b8e:	f383 8811 	msr	BASEPRI, r3
 8006b92:	f3bf 8f6f 	isb	sy
 8006b96:	f3bf 8f4f 	dsb	sy
 8006b9a:	b662      	cpsie	i
 8006b9c:	60fb      	str	r3, [r7, #12]
}
 8006b9e:	bf00      	nop
 8006ba0:	bf00      	nop
 8006ba2:	e7fd      	b.n	8006ba0 <pvPortMalloc+0x178>
	return pvReturn;
 8006ba4:	69fb      	ldr	r3, [r7, #28]
}
 8006ba6:	4618      	mov	r0, r3
 8006ba8:	3728      	adds	r7, #40	@ 0x28
 8006baa:	46bd      	mov	sp, r7
 8006bac:	bd80      	pop	{r7, pc}
 8006bae:	bf00      	nop
 8006bb0:	20011a84 	.word	0x20011a84
 8006bb4:	20011a90 	.word	0x20011a90
 8006bb8:	20011a88 	.word	0x20011a88
 8006bbc:	20011a7c 	.word	0x20011a7c
 8006bc0:	20011a8c 	.word	0x20011a8c

08006bc4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006bc4:	b580      	push	{r7, lr}
 8006bc6:	b086      	sub	sp, #24
 8006bc8:	af00      	add	r7, sp, #0
 8006bca:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d04e      	beq.n	8006c74 <vPortFree+0xb0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006bd6:	2308      	movs	r3, #8
 8006bd8:	425b      	negs	r3, r3
 8006bda:	697a      	ldr	r2, [r7, #20]
 8006bdc:	4413      	add	r3, r2
 8006bde:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8006be0:	697b      	ldr	r3, [r7, #20]
 8006be2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006be4:	693b      	ldr	r3, [r7, #16]
 8006be6:	685a      	ldr	r2, [r3, #4]
 8006be8:	4b24      	ldr	r3, [pc, #144]	@ (8006c7c <vPortFree+0xb8>)
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	4013      	ands	r3, r2
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	d10d      	bne.n	8006c0e <vPortFree+0x4a>
	__asm volatile
 8006bf2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006bf6:	b672      	cpsid	i
 8006bf8:	f383 8811 	msr	BASEPRI, r3
 8006bfc:	f3bf 8f6f 	isb	sy
 8006c00:	f3bf 8f4f 	dsb	sy
 8006c04:	b662      	cpsie	i
 8006c06:	60fb      	str	r3, [r7, #12]
}
 8006c08:	bf00      	nop
 8006c0a:	bf00      	nop
 8006c0c:	e7fd      	b.n	8006c0a <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006c0e:	693b      	ldr	r3, [r7, #16]
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	d00d      	beq.n	8006c32 <vPortFree+0x6e>
	__asm volatile
 8006c16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c1a:	b672      	cpsid	i
 8006c1c:	f383 8811 	msr	BASEPRI, r3
 8006c20:	f3bf 8f6f 	isb	sy
 8006c24:	f3bf 8f4f 	dsb	sy
 8006c28:	b662      	cpsie	i
 8006c2a:	60bb      	str	r3, [r7, #8]
}
 8006c2c:	bf00      	nop
 8006c2e:	bf00      	nop
 8006c30:	e7fd      	b.n	8006c2e <vPortFree+0x6a>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006c32:	693b      	ldr	r3, [r7, #16]
 8006c34:	685a      	ldr	r2, [r3, #4]
 8006c36:	4b11      	ldr	r3, [pc, #68]	@ (8006c7c <vPortFree+0xb8>)
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	4013      	ands	r3, r2
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	d019      	beq.n	8006c74 <vPortFree+0xb0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006c40:	693b      	ldr	r3, [r7, #16]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	d115      	bne.n	8006c74 <vPortFree+0xb0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006c48:	693b      	ldr	r3, [r7, #16]
 8006c4a:	685a      	ldr	r2, [r3, #4]
 8006c4c:	4b0b      	ldr	r3, [pc, #44]	@ (8006c7c <vPortFree+0xb8>)
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	43db      	mvns	r3, r3
 8006c52:	401a      	ands	r2, r3
 8006c54:	693b      	ldr	r3, [r7, #16]
 8006c56:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006c58:	f7fe fc58 	bl	800550c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006c5c:	693b      	ldr	r3, [r7, #16]
 8006c5e:	685a      	ldr	r2, [r3, #4]
 8006c60:	4b07      	ldr	r3, [pc, #28]	@ (8006c80 <vPortFree+0xbc>)
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	4413      	add	r3, r2
 8006c66:	4a06      	ldr	r2, [pc, #24]	@ (8006c80 <vPortFree+0xbc>)
 8006c68:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8006c6a:	6938      	ldr	r0, [r7, #16]
 8006c6c:	f000 f86c 	bl	8006d48 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8006c70:	f7fe fc5a 	bl	8005528 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8006c74:	bf00      	nop
 8006c76:	3718      	adds	r7, #24
 8006c78:	46bd      	mov	sp, r7
 8006c7a:	bd80      	pop	{r7, pc}
 8006c7c:	20011a90 	.word	0x20011a90
 8006c80:	20011a88 	.word	0x20011a88

08006c84 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006c84:	b480      	push	{r7}
 8006c86:	b085      	sub	sp, #20
 8006c88:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8006c8a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8006c8e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006c90:	4b27      	ldr	r3, [pc, #156]	@ (8006d30 <prvHeapInit+0xac>)
 8006c92:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	f003 0307 	and.w	r3, r3, #7
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	d00c      	beq.n	8006cb8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	3307      	adds	r3, #7
 8006ca2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	f023 0307 	bic.w	r3, r3, #7
 8006caa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006cac:	68ba      	ldr	r2, [r7, #8]
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	1ad3      	subs	r3, r2, r3
 8006cb2:	4a1f      	ldr	r2, [pc, #124]	@ (8006d30 <prvHeapInit+0xac>)
 8006cb4:	4413      	add	r3, r2
 8006cb6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006cbc:	4a1d      	ldr	r2, [pc, #116]	@ (8006d34 <prvHeapInit+0xb0>)
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006cc2:	4b1c      	ldr	r3, [pc, #112]	@ (8006d34 <prvHeapInit+0xb0>)
 8006cc4:	2200      	movs	r2, #0
 8006cc6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	68ba      	ldr	r2, [r7, #8]
 8006ccc:	4413      	add	r3, r2
 8006cce:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006cd0:	2208      	movs	r2, #8
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	1a9b      	subs	r3, r3, r2
 8006cd6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	f023 0307 	bic.w	r3, r3, #7
 8006cde:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	4a15      	ldr	r2, [pc, #84]	@ (8006d38 <prvHeapInit+0xb4>)
 8006ce4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006ce6:	4b14      	ldr	r3, [pc, #80]	@ (8006d38 <prvHeapInit+0xb4>)
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	2200      	movs	r2, #0
 8006cec:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8006cee:	4b12      	ldr	r3, [pc, #72]	@ (8006d38 <prvHeapInit+0xb4>)
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	2200      	movs	r2, #0
 8006cf4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8006cfa:	683b      	ldr	r3, [r7, #0]
 8006cfc:	68fa      	ldr	r2, [r7, #12]
 8006cfe:	1ad2      	subs	r2, r2, r3
 8006d00:	683b      	ldr	r3, [r7, #0]
 8006d02:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006d04:	4b0c      	ldr	r3, [pc, #48]	@ (8006d38 <prvHeapInit+0xb4>)
 8006d06:	681a      	ldr	r2, [r3, #0]
 8006d08:	683b      	ldr	r3, [r7, #0]
 8006d0a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006d0c:	683b      	ldr	r3, [r7, #0]
 8006d0e:	685b      	ldr	r3, [r3, #4]
 8006d10:	4a0a      	ldr	r2, [pc, #40]	@ (8006d3c <prvHeapInit+0xb8>)
 8006d12:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006d14:	683b      	ldr	r3, [r7, #0]
 8006d16:	685b      	ldr	r3, [r3, #4]
 8006d18:	4a09      	ldr	r2, [pc, #36]	@ (8006d40 <prvHeapInit+0xbc>)
 8006d1a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006d1c:	4b09      	ldr	r3, [pc, #36]	@ (8006d44 <prvHeapInit+0xc0>)
 8006d1e:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8006d22:	601a      	str	r2, [r3, #0]
}
 8006d24:	bf00      	nop
 8006d26:	3714      	adds	r7, #20
 8006d28:	46bd      	mov	sp, r7
 8006d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d2e:	4770      	bx	lr
 8006d30:	20001a7c 	.word	0x20001a7c
 8006d34:	20011a7c 	.word	0x20011a7c
 8006d38:	20011a84 	.word	0x20011a84
 8006d3c:	20011a8c 	.word	0x20011a8c
 8006d40:	20011a88 	.word	0x20011a88
 8006d44:	20011a90 	.word	0x20011a90

08006d48 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006d48:	b480      	push	{r7}
 8006d4a:	b085      	sub	sp, #20
 8006d4c:	af00      	add	r7, sp, #0
 8006d4e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006d50:	4b28      	ldr	r3, [pc, #160]	@ (8006df4 <prvInsertBlockIntoFreeList+0xac>)
 8006d52:	60fb      	str	r3, [r7, #12]
 8006d54:	e002      	b.n	8006d5c <prvInsertBlockIntoFreeList+0x14>
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	60fb      	str	r3, [r7, #12]
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	687a      	ldr	r2, [r7, #4]
 8006d62:	429a      	cmp	r2, r3
 8006d64:	d8f7      	bhi.n	8006d56 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	685b      	ldr	r3, [r3, #4]
 8006d6e:	68ba      	ldr	r2, [r7, #8]
 8006d70:	4413      	add	r3, r2
 8006d72:	687a      	ldr	r2, [r7, #4]
 8006d74:	429a      	cmp	r2, r3
 8006d76:	d108      	bne.n	8006d8a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	685a      	ldr	r2, [r3, #4]
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	685b      	ldr	r3, [r3, #4]
 8006d80:	441a      	add	r2, r3
 8006d82:	68fb      	ldr	r3, [r7, #12]
 8006d84:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	685b      	ldr	r3, [r3, #4]
 8006d92:	68ba      	ldr	r2, [r7, #8]
 8006d94:	441a      	add	r2, r3
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	429a      	cmp	r2, r3
 8006d9c:	d118      	bne.n	8006dd0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	681a      	ldr	r2, [r3, #0]
 8006da2:	4b15      	ldr	r3, [pc, #84]	@ (8006df8 <prvInsertBlockIntoFreeList+0xb0>)
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	429a      	cmp	r2, r3
 8006da8:	d00d      	beq.n	8006dc6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	685a      	ldr	r2, [r3, #4]
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	685b      	ldr	r3, [r3, #4]
 8006db4:	441a      	add	r2, r3
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	681a      	ldr	r2, [r3, #0]
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	601a      	str	r2, [r3, #0]
 8006dc4:	e008      	b.n	8006dd8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006dc6:	4b0c      	ldr	r3, [pc, #48]	@ (8006df8 <prvInsertBlockIntoFreeList+0xb0>)
 8006dc8:	681a      	ldr	r2, [r3, #0]
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	601a      	str	r2, [r3, #0]
 8006dce:	e003      	b.n	8006dd8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	681a      	ldr	r2, [r3, #0]
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006dd8:	68fa      	ldr	r2, [r7, #12]
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	429a      	cmp	r2, r3
 8006dde:	d002      	beq.n	8006de6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	687a      	ldr	r2, [r7, #4]
 8006de4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006de6:	bf00      	nop
 8006de8:	3714      	adds	r7, #20
 8006dea:	46bd      	mov	sp, r7
 8006dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006df0:	4770      	bx	lr
 8006df2:	bf00      	nop
 8006df4:	20011a7c 	.word	0x20011a7c
 8006df8:	20011a84 	.word	0x20011a84

08006dfc <mg_free>:
#include <FreeRTOS.h>
#include <task.h>

#define MG_ENABLE_CUSTOM_CALLOC 1

static inline void mg_free(void *ptr) {
 8006dfc:	b580      	push	{r7, lr}
 8006dfe:	b082      	sub	sp, #8
 8006e00:	af00      	add	r7, sp, #0
 8006e02:	6078      	str	r0, [r7, #4]
  vPortFree(ptr);
 8006e04:	6878      	ldr	r0, [r7, #4]
 8006e06:	f7ff fedd 	bl	8006bc4 <vPortFree>
}
 8006e0a:	bf00      	nop
 8006e0c:	3708      	adds	r7, #8
 8006e0e:	46bd      	mov	sp, r7
 8006e10:	bd80      	pop	{r7, pc}

08006e12 <mg_calloc>:

// Re-route calloc/free to the FreeRTOS's functions, don't use stdlib
static inline void *mg_calloc(size_t cnt, size_t size) {
 8006e12:	b580      	push	{r7, lr}
 8006e14:	b084      	sub	sp, #16
 8006e16:	af00      	add	r7, sp, #0
 8006e18:	6078      	str	r0, [r7, #4]
 8006e1a:	6039      	str	r1, [r7, #0]
  void *p = pvPortMalloc(cnt * size);
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	683a      	ldr	r2, [r7, #0]
 8006e20:	fb02 f303 	mul.w	r3, r2, r3
 8006e24:	4618      	mov	r0, r3
 8006e26:	f7ff fdff 	bl	8006a28 <pvPortMalloc>
 8006e2a:	60f8      	str	r0, [r7, #12]
  if (p != NULL) memset(p, 0, size * cnt);
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	d008      	beq.n	8006e44 <mg_calloc+0x32>
 8006e32:	683b      	ldr	r3, [r7, #0]
 8006e34:	687a      	ldr	r2, [r7, #4]
 8006e36:	fb02 f303 	mul.w	r3, r2, r3
 8006e3a:	461a      	mov	r2, r3
 8006e3c:	2100      	movs	r1, #0
 8006e3e:	68f8      	ldr	r0, [r7, #12]
 8006e40:	f01d fb24 	bl	802448c <memset>
  return p;
 8006e44:	68fb      	ldr	r3, [r7, #12]
}
 8006e46:	4618      	mov	r0, r3
 8006e48:	3710      	adds	r7, #16
 8006e4a:	46bd      	mov	sp, r7
 8006e4c:	bd80      	pop	{r7, pc}

08006e4e <mg_base64_encode_single>:
#ifdef MG_ENABLE_LINES
#line 1 "src/base64.c"
#endif


static int mg_base64_encode_single(int c) {
 8006e4e:	b480      	push	{r7}
 8006e50:	b083      	sub	sp, #12
 8006e52:	af00      	add	r7, sp, #0
 8006e54:	6078      	str	r0, [r7, #4]
  if (c < 26) {
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	2b19      	cmp	r3, #25
 8006e5a:	dc02      	bgt.n	8006e62 <mg_base64_encode_single+0x14>
    return c + 'A';
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	3341      	adds	r3, #65	@ 0x41
 8006e60:	e011      	b.n	8006e86 <mg_base64_encode_single+0x38>
  } else if (c < 52) {
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	2b33      	cmp	r3, #51	@ 0x33
 8006e66:	dc02      	bgt.n	8006e6e <mg_base64_encode_single+0x20>
    return c - 26 + 'a';
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	3347      	adds	r3, #71	@ 0x47
 8006e6c:	e00b      	b.n	8006e86 <mg_base64_encode_single+0x38>
  } else if (c < 62) {
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	2b3d      	cmp	r3, #61	@ 0x3d
 8006e72:	dc02      	bgt.n	8006e7a <mg_base64_encode_single+0x2c>
    return c - 52 + '0';
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	3b04      	subs	r3, #4
 8006e78:	e005      	b.n	8006e86 <mg_base64_encode_single+0x38>
  } else {
    return c == 62 ? '+' : '/';
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	2b3e      	cmp	r3, #62	@ 0x3e
 8006e7e:	d101      	bne.n	8006e84 <mg_base64_encode_single+0x36>
 8006e80:	232b      	movs	r3, #43	@ 0x2b
 8006e82:	e000      	b.n	8006e86 <mg_base64_encode_single+0x38>
 8006e84:	232f      	movs	r3, #47	@ 0x2f
  }
}
 8006e86:	4618      	mov	r0, r3
 8006e88:	370c      	adds	r7, #12
 8006e8a:	46bd      	mov	sp, r7
 8006e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e90:	4770      	bx	lr

08006e92 <mg_base64_decode_single>:

static int mg_base64_decode_single(int c) {
 8006e92:	b480      	push	{r7}
 8006e94:	b083      	sub	sp, #12
 8006e96:	af00      	add	r7, sp, #0
 8006e98:	6078      	str	r0, [r7, #4]
  if (c >= 'A' && c <= 'Z') {
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	2b40      	cmp	r3, #64	@ 0x40
 8006e9e:	dd05      	ble.n	8006eac <mg_base64_decode_single+0x1a>
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	2b5a      	cmp	r3, #90	@ 0x5a
 8006ea4:	dc02      	bgt.n	8006eac <mg_base64_decode_single+0x1a>
    return c - 'A';
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	3b41      	subs	r3, #65	@ 0x41
 8006eaa:	e022      	b.n	8006ef2 <mg_base64_decode_single+0x60>
  } else if (c >= 'a' && c <= 'z') {
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	2b60      	cmp	r3, #96	@ 0x60
 8006eb0:	dd05      	ble.n	8006ebe <mg_base64_decode_single+0x2c>
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	2b7a      	cmp	r3, #122	@ 0x7a
 8006eb6:	dc02      	bgt.n	8006ebe <mg_base64_decode_single+0x2c>
    return c + 26 - 'a';
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	3b47      	subs	r3, #71	@ 0x47
 8006ebc:	e019      	b.n	8006ef2 <mg_base64_decode_single+0x60>
  } else if (c >= '0' && c <= '9') {
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	2b2f      	cmp	r3, #47	@ 0x2f
 8006ec2:	dd05      	ble.n	8006ed0 <mg_base64_decode_single+0x3e>
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	2b39      	cmp	r3, #57	@ 0x39
 8006ec8:	dc02      	bgt.n	8006ed0 <mg_base64_decode_single+0x3e>
    return c + 52 - '0';
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	3304      	adds	r3, #4
 8006ece:	e010      	b.n	8006ef2 <mg_base64_decode_single+0x60>
  } else if (c == '+') {
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	2b2b      	cmp	r3, #43	@ 0x2b
 8006ed4:	d101      	bne.n	8006eda <mg_base64_decode_single+0x48>
    return 62;
 8006ed6:	233e      	movs	r3, #62	@ 0x3e
 8006ed8:	e00b      	b.n	8006ef2 <mg_base64_decode_single+0x60>
  } else if (c == '/') {
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	2b2f      	cmp	r3, #47	@ 0x2f
 8006ede:	d101      	bne.n	8006ee4 <mg_base64_decode_single+0x52>
    return 63;
 8006ee0:	233f      	movs	r3, #63	@ 0x3f
 8006ee2:	e006      	b.n	8006ef2 <mg_base64_decode_single+0x60>
  } else if (c == '=') {
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	2b3d      	cmp	r3, #61	@ 0x3d
 8006ee8:	d101      	bne.n	8006eee <mg_base64_decode_single+0x5c>
    return 64;
 8006eea:	2340      	movs	r3, #64	@ 0x40
 8006eec:	e001      	b.n	8006ef2 <mg_base64_decode_single+0x60>
  } else {
    return -1;
 8006eee:	f04f 33ff 	mov.w	r3, #4294967295
  }
}
 8006ef2:	4618      	mov	r0, r3
 8006ef4:	370c      	adds	r7, #12
 8006ef6:	46bd      	mov	sp, r7
 8006ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006efc:	4770      	bx	lr
	...

08006f00 <mg_base64_update>:

size_t mg_base64_update(unsigned char ch, char *to, size_t n) {
 8006f00:	b580      	push	{r7, lr}
 8006f02:	b086      	sub	sp, #24
 8006f04:	af00      	add	r7, sp, #0
 8006f06:	4603      	mov	r3, r0
 8006f08:	60b9      	str	r1, [r7, #8]
 8006f0a:	607a      	str	r2, [r7, #4]
 8006f0c:	73fb      	strb	r3, [r7, #15]
  unsigned long rem = (n & 3) % 3;
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	f003 0203 	and.w	r2, r3, #3
 8006f14:	4b38      	ldr	r3, [pc, #224]	@ (8006ff8 <mg_base64_update+0xf8>)
 8006f16:	fba3 1302 	umull	r1, r3, r3, r2
 8006f1a:	0859      	lsrs	r1, r3, #1
 8006f1c:	460b      	mov	r3, r1
 8006f1e:	005b      	lsls	r3, r3, #1
 8006f20:	440b      	add	r3, r1
 8006f22:	1ad3      	subs	r3, r2, r3
 8006f24:	617b      	str	r3, [r7, #20]
  if (rem == 0) {
 8006f26:	697b      	ldr	r3, [r7, #20]
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	d119      	bne.n	8006f60 <mg_base64_update+0x60>
    to[n] = (char) mg_base64_encode_single(ch >> 2);
 8006f2c:	7bfb      	ldrb	r3, [r7, #15]
 8006f2e:	089b      	lsrs	r3, r3, #2
 8006f30:	b2db      	uxtb	r3, r3
 8006f32:	4618      	mov	r0, r3
 8006f34:	f7ff ff8b 	bl	8006e4e <mg_base64_encode_single>
 8006f38:	4601      	mov	r1, r0
 8006f3a:	68ba      	ldr	r2, [r7, #8]
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	4413      	add	r3, r2
 8006f40:	b2ca      	uxtb	r2, r1
 8006f42:	701a      	strb	r2, [r3, #0]
    to[++n] = (char) ((ch & 3) << 4);
 8006f44:	7bfb      	ldrb	r3, [r7, #15]
 8006f46:	011b      	lsls	r3, r3, #4
 8006f48:	b2da      	uxtb	r2, r3
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	3301      	adds	r3, #1
 8006f4e:	607b      	str	r3, [r7, #4]
 8006f50:	68b9      	ldr	r1, [r7, #8]
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	440b      	add	r3, r1
 8006f56:	f002 0230 	and.w	r2, r2, #48	@ 0x30
 8006f5a:	b2d2      	uxtb	r2, r2
 8006f5c:	701a      	strb	r2, [r3, #0]
 8006f5e:	e046      	b.n	8006fee <mg_base64_update+0xee>
  } else if (rem == 1) {
 8006f60:	697b      	ldr	r3, [r7, #20]
 8006f62:	2b01      	cmp	r3, #1
 8006f64:	d11f      	bne.n	8006fa6 <mg_base64_update+0xa6>
    to[n] = (char) mg_base64_encode_single(to[n] | (ch >> 4));
 8006f66:	68ba      	ldr	r2, [r7, #8]
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	4413      	add	r3, r2
 8006f6c:	781a      	ldrb	r2, [r3, #0]
 8006f6e:	7bfb      	ldrb	r3, [r7, #15]
 8006f70:	091b      	lsrs	r3, r3, #4
 8006f72:	b2db      	uxtb	r3, r3
 8006f74:	4313      	orrs	r3, r2
 8006f76:	b2db      	uxtb	r3, r3
 8006f78:	4618      	mov	r0, r3
 8006f7a:	f7ff ff68 	bl	8006e4e <mg_base64_encode_single>
 8006f7e:	4601      	mov	r1, r0
 8006f80:	68ba      	ldr	r2, [r7, #8]
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	4413      	add	r3, r2
 8006f86:	b2ca      	uxtb	r2, r1
 8006f88:	701a      	strb	r2, [r3, #0]
    to[++n] = (char) ((ch & 15) << 2);
 8006f8a:	7bfb      	ldrb	r3, [r7, #15]
 8006f8c:	009b      	lsls	r3, r3, #2
 8006f8e:	b2da      	uxtb	r2, r3
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	3301      	adds	r3, #1
 8006f94:	607b      	str	r3, [r7, #4]
 8006f96:	68b9      	ldr	r1, [r7, #8]
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	440b      	add	r3, r1
 8006f9c:	f002 023c 	and.w	r2, r2, #60	@ 0x3c
 8006fa0:	b2d2      	uxtb	r2, r2
 8006fa2:	701a      	strb	r2, [r3, #0]
 8006fa4:	e023      	b.n	8006fee <mg_base64_update+0xee>
  } else {
    to[n] = (char) mg_base64_encode_single(to[n] | (ch >> 6));
 8006fa6:	68ba      	ldr	r2, [r7, #8]
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	4413      	add	r3, r2
 8006fac:	781a      	ldrb	r2, [r3, #0]
 8006fae:	7bfb      	ldrb	r3, [r7, #15]
 8006fb0:	099b      	lsrs	r3, r3, #6
 8006fb2:	b2db      	uxtb	r3, r3
 8006fb4:	4313      	orrs	r3, r2
 8006fb6:	b2db      	uxtb	r3, r3
 8006fb8:	4618      	mov	r0, r3
 8006fba:	f7ff ff48 	bl	8006e4e <mg_base64_encode_single>
 8006fbe:	4601      	mov	r1, r0
 8006fc0:	68ba      	ldr	r2, [r7, #8]
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	4413      	add	r3, r2
 8006fc6:	b2ca      	uxtb	r2, r1
 8006fc8:	701a      	strb	r2, [r3, #0]
    to[++n] = (char) mg_base64_encode_single(ch & 63);
 8006fca:	7bfb      	ldrb	r3, [r7, #15]
 8006fcc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006fd0:	4618      	mov	r0, r3
 8006fd2:	f7ff ff3c 	bl	8006e4e <mg_base64_encode_single>
 8006fd6:	4601      	mov	r1, r0
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	3301      	adds	r3, #1
 8006fdc:	607b      	str	r3, [r7, #4]
 8006fde:	68ba      	ldr	r2, [r7, #8]
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	4413      	add	r3, r2
 8006fe4:	b2ca      	uxtb	r2, r1
 8006fe6:	701a      	strb	r2, [r3, #0]
    n++;
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	3301      	adds	r3, #1
 8006fec:	607b      	str	r3, [r7, #4]
  }
  return n;
 8006fee:	687b      	ldr	r3, [r7, #4]
}
 8006ff0:	4618      	mov	r0, r3
 8006ff2:	3718      	adds	r7, #24
 8006ff4:	46bd      	mov	sp, r7
 8006ff6:	bd80      	pop	{r7, pc}
 8006ff8:	aaaaaaab 	.word	0xaaaaaaab

08006ffc <mg_base64_final>:

size_t mg_base64_final(char *to, size_t n) {
 8006ffc:	b580      	push	{r7, lr}
 8006ffe:	b084      	sub	sp, #16
 8007000:	af00      	add	r7, sp, #0
 8007002:	6078      	str	r0, [r7, #4]
 8007004:	6039      	str	r1, [r7, #0]
  size_t saved = n;
 8007006:	683b      	ldr	r3, [r7, #0]
 8007008:	60fb      	str	r3, [r7, #12]
  // printf("---[%.*s]\n", n, to);
  if (n & 3) n = mg_base64_update(0, to, n);
 800700a:	683b      	ldr	r3, [r7, #0]
 800700c:	f003 0303 	and.w	r3, r3, #3
 8007010:	2b00      	cmp	r3, #0
 8007012:	d005      	beq.n	8007020 <mg_base64_final+0x24>
 8007014:	683a      	ldr	r2, [r7, #0]
 8007016:	6879      	ldr	r1, [r7, #4]
 8007018:	2000      	movs	r0, #0
 800701a:	f7ff ff71 	bl	8006f00 <mg_base64_update>
 800701e:	6038      	str	r0, [r7, #0]
  if ((saved & 3) == 2) n--;
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	f003 0303 	and.w	r3, r3, #3
 8007026:	2b02      	cmp	r3, #2
 8007028:	d10a      	bne.n	8007040 <mg_base64_final+0x44>
 800702a:	683b      	ldr	r3, [r7, #0]
 800702c:	3b01      	subs	r3, #1
 800702e:	603b      	str	r3, [r7, #0]
  // printf("    %d[%.*s]\n", n, n, to);
  while (n & 3) to[n++] = '=';
 8007030:	e006      	b.n	8007040 <mg_base64_final+0x44>
 8007032:	683b      	ldr	r3, [r7, #0]
 8007034:	1c5a      	adds	r2, r3, #1
 8007036:	603a      	str	r2, [r7, #0]
 8007038:	687a      	ldr	r2, [r7, #4]
 800703a:	4413      	add	r3, r2
 800703c:	223d      	movs	r2, #61	@ 0x3d
 800703e:	701a      	strb	r2, [r3, #0]
 8007040:	683b      	ldr	r3, [r7, #0]
 8007042:	f003 0303 	and.w	r3, r3, #3
 8007046:	2b00      	cmp	r3, #0
 8007048:	d1f3      	bne.n	8007032 <mg_base64_final+0x36>
  to[n] = '\0';
 800704a:	687a      	ldr	r2, [r7, #4]
 800704c:	683b      	ldr	r3, [r7, #0]
 800704e:	4413      	add	r3, r2
 8007050:	2200      	movs	r2, #0
 8007052:	701a      	strb	r2, [r3, #0]
  return n;
 8007054:	683b      	ldr	r3, [r7, #0]
}
 8007056:	4618      	mov	r0, r3
 8007058:	3710      	adds	r7, #16
 800705a:	46bd      	mov	sp, r7
 800705c:	bd80      	pop	{r7, pc}
	...

08007060 <mg_base64_encode>:

size_t mg_base64_encode(const unsigned char *p, size_t n, char *to, size_t dl) {
 8007060:	b580      	push	{r7, lr}
 8007062:	b086      	sub	sp, #24
 8007064:	af00      	add	r7, sp, #0
 8007066:	60f8      	str	r0, [r7, #12]
 8007068:	60b9      	str	r1, [r7, #8]
 800706a:	607a      	str	r2, [r7, #4]
 800706c:	603b      	str	r3, [r7, #0]
  size_t i, len = 0;
 800706e:	2300      	movs	r3, #0
 8007070:	613b      	str	r3, [r7, #16]
  if (dl > 0) to[0] = '\0';
 8007072:	683b      	ldr	r3, [r7, #0]
 8007074:	2b00      	cmp	r3, #0
 8007076:	d002      	beq.n	800707e <mg_base64_encode+0x1e>
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	2200      	movs	r2, #0
 800707c:	701a      	strb	r2, [r3, #0]
  if (dl < ((n / 3) + (n % 3 ? 1 : 0)) * 4 + 1) return 0;
 800707e:	68bb      	ldr	r3, [r7, #8]
 8007080:	4a1b      	ldr	r2, [pc, #108]	@ (80070f0 <mg_base64_encode+0x90>)
 8007082:	fba2 2303 	umull	r2, r3, r2, r3
 8007086:	0858      	lsrs	r0, r3, #1
 8007088:	68b9      	ldr	r1, [r7, #8]
 800708a:	4b19      	ldr	r3, [pc, #100]	@ (80070f0 <mg_base64_encode+0x90>)
 800708c:	fba3 2301 	umull	r2, r3, r3, r1
 8007090:	085a      	lsrs	r2, r3, #1
 8007092:	4613      	mov	r3, r2
 8007094:	005b      	lsls	r3, r3, #1
 8007096:	4413      	add	r3, r2
 8007098:	1aca      	subs	r2, r1, r3
 800709a:	2a00      	cmp	r2, #0
 800709c:	d001      	beq.n	80070a2 <mg_base64_encode+0x42>
 800709e:	2301      	movs	r3, #1
 80070a0:	e000      	b.n	80070a4 <mg_base64_encode+0x44>
 80070a2:	2300      	movs	r3, #0
 80070a4:	4403      	add	r3, r0
 80070a6:	009b      	lsls	r3, r3, #2
 80070a8:	3301      	adds	r3, #1
 80070aa:	683a      	ldr	r2, [r7, #0]
 80070ac:	429a      	cmp	r2, r3
 80070ae:	d201      	bcs.n	80070b4 <mg_base64_encode+0x54>
 80070b0:	2300      	movs	r3, #0
 80070b2:	e019      	b.n	80070e8 <mg_base64_encode+0x88>
  for (i = 0; i < n; i++) len = mg_base64_update(p[i], to, len);
 80070b4:	2300      	movs	r3, #0
 80070b6:	617b      	str	r3, [r7, #20]
 80070b8:	e00c      	b.n	80070d4 <mg_base64_encode+0x74>
 80070ba:	68fa      	ldr	r2, [r7, #12]
 80070bc:	697b      	ldr	r3, [r7, #20]
 80070be:	4413      	add	r3, r2
 80070c0:	781b      	ldrb	r3, [r3, #0]
 80070c2:	693a      	ldr	r2, [r7, #16]
 80070c4:	6879      	ldr	r1, [r7, #4]
 80070c6:	4618      	mov	r0, r3
 80070c8:	f7ff ff1a 	bl	8006f00 <mg_base64_update>
 80070cc:	6138      	str	r0, [r7, #16]
 80070ce:	697b      	ldr	r3, [r7, #20]
 80070d0:	3301      	adds	r3, #1
 80070d2:	617b      	str	r3, [r7, #20]
 80070d4:	697a      	ldr	r2, [r7, #20]
 80070d6:	68bb      	ldr	r3, [r7, #8]
 80070d8:	429a      	cmp	r2, r3
 80070da:	d3ee      	bcc.n	80070ba <mg_base64_encode+0x5a>
  len = mg_base64_final(to, len);
 80070dc:	6939      	ldr	r1, [r7, #16]
 80070de:	6878      	ldr	r0, [r7, #4]
 80070e0:	f7ff ff8c 	bl	8006ffc <mg_base64_final>
 80070e4:	6138      	str	r0, [r7, #16]
  return len;
 80070e6:	693b      	ldr	r3, [r7, #16]
}
 80070e8:	4618      	mov	r0, r3
 80070ea:	3718      	adds	r7, #24
 80070ec:	46bd      	mov	sp, r7
 80070ee:	bd80      	pop	{r7, pc}
 80070f0:	aaaaaaab 	.word	0xaaaaaaab

080070f4 <mg_base64_decode>:

size_t mg_base64_decode(const char *src, size_t n, char *dst, size_t dl) {
 80070f4:	b580      	push	{r7, lr}
 80070f6:	b08a      	sub	sp, #40	@ 0x28
 80070f8:	af00      	add	r7, sp, #0
 80070fa:	60f8      	str	r0, [r7, #12]
 80070fc:	60b9      	str	r1, [r7, #8]
 80070fe:	607a      	str	r2, [r7, #4]
 8007100:	603b      	str	r3, [r7, #0]
  const char *end = src == NULL ? NULL : src + n;  // Cannot add to NULL
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	2b00      	cmp	r3, #0
 8007106:	d003      	beq.n	8007110 <mg_base64_decode+0x1c>
 8007108:	68fa      	ldr	r2, [r7, #12]
 800710a:	68bb      	ldr	r3, [r7, #8]
 800710c:	4413      	add	r3, r2
 800710e:	e000      	b.n	8007112 <mg_base64_decode+0x1e>
 8007110:	2300      	movs	r3, #0
 8007112:	623b      	str	r3, [r7, #32]
  size_t len = 0;
 8007114:	2300      	movs	r3, #0
 8007116:	627b      	str	r3, [r7, #36]	@ 0x24
  if (dl < n / 4 * 3 + 1) goto fail;
 8007118:	68bb      	ldr	r3, [r7, #8]
 800711a:	089a      	lsrs	r2, r3, #2
 800711c:	4613      	mov	r3, r2
 800711e:	005b      	lsls	r3, r3, #1
 8007120:	4413      	add	r3, r2
 8007122:	3301      	adds	r3, #1
 8007124:	683a      	ldr	r2, [r7, #0]
 8007126:	429a      	cmp	r2, r3
 8007128:	d378      	bcc.n	800721c <mg_base64_decode+0x128>
  while (src != NULL && src + 3 < end) {
 800712a:	e068      	b.n	80071fe <mg_base64_decode+0x10a>
    int a = mg_base64_decode_single(src[0]),
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	781b      	ldrb	r3, [r3, #0]
 8007130:	4618      	mov	r0, r3
 8007132:	f7ff feae 	bl	8006e92 <mg_base64_decode_single>
 8007136:	61f8      	str	r0, [r7, #28]
        b = mg_base64_decode_single(src[1]),
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	3301      	adds	r3, #1
 800713c:	781b      	ldrb	r3, [r3, #0]
 800713e:	4618      	mov	r0, r3
 8007140:	f7ff fea7 	bl	8006e92 <mg_base64_decode_single>
 8007144:	61b8      	str	r0, [r7, #24]
        c = mg_base64_decode_single(src[2]),
 8007146:	68fb      	ldr	r3, [r7, #12]
 8007148:	3302      	adds	r3, #2
 800714a:	781b      	ldrb	r3, [r3, #0]
 800714c:	4618      	mov	r0, r3
 800714e:	f7ff fea0 	bl	8006e92 <mg_base64_decode_single>
 8007152:	6178      	str	r0, [r7, #20]
        d = mg_base64_decode_single(src[3]);
 8007154:	68fb      	ldr	r3, [r7, #12]
 8007156:	3303      	adds	r3, #3
 8007158:	781b      	ldrb	r3, [r3, #0]
 800715a:	4618      	mov	r0, r3
 800715c:	f7ff fe99 	bl	8006e92 <mg_base64_decode_single>
 8007160:	6138      	str	r0, [r7, #16]
    if (a == 64 || a < 0 || b == 64 || b < 0 || c < 0 || d < 0) {
 8007162:	69fb      	ldr	r3, [r7, #28]
 8007164:	2b40      	cmp	r3, #64	@ 0x40
 8007166:	d05b      	beq.n	8007220 <mg_base64_decode+0x12c>
 8007168:	69fb      	ldr	r3, [r7, #28]
 800716a:	2b00      	cmp	r3, #0
 800716c:	db58      	blt.n	8007220 <mg_base64_decode+0x12c>
 800716e:	69bb      	ldr	r3, [r7, #24]
 8007170:	2b40      	cmp	r3, #64	@ 0x40
 8007172:	d055      	beq.n	8007220 <mg_base64_decode+0x12c>
 8007174:	69bb      	ldr	r3, [r7, #24]
 8007176:	2b00      	cmp	r3, #0
 8007178:	db52      	blt.n	8007220 <mg_base64_decode+0x12c>
 800717a:	697b      	ldr	r3, [r7, #20]
 800717c:	2b00      	cmp	r3, #0
 800717e:	db4f      	blt.n	8007220 <mg_base64_decode+0x12c>
 8007180:	693b      	ldr	r3, [r7, #16]
 8007182:	2b00      	cmp	r3, #0
 8007184:	db4c      	blt.n	8007220 <mg_base64_decode+0x12c>
      goto fail;
    }
    dst[len++] = (char) ((a << 2) | (b >> 4));
 8007186:	69fb      	ldr	r3, [r7, #28]
 8007188:	b25b      	sxtb	r3, r3
 800718a:	009b      	lsls	r3, r3, #2
 800718c:	b25a      	sxtb	r2, r3
 800718e:	69bb      	ldr	r3, [r7, #24]
 8007190:	111b      	asrs	r3, r3, #4
 8007192:	b25b      	sxtb	r3, r3
 8007194:	4313      	orrs	r3, r2
 8007196:	b259      	sxtb	r1, r3
 8007198:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800719a:	1c5a      	adds	r2, r3, #1
 800719c:	627a      	str	r2, [r7, #36]	@ 0x24
 800719e:	687a      	ldr	r2, [r7, #4]
 80071a0:	4413      	add	r3, r2
 80071a2:	b2ca      	uxtb	r2, r1
 80071a4:	701a      	strb	r2, [r3, #0]
    if (src[2] != '=') {
 80071a6:	68fb      	ldr	r3, [r7, #12]
 80071a8:	3302      	adds	r3, #2
 80071aa:	781b      	ldrb	r3, [r3, #0]
 80071ac:	2b3d      	cmp	r3, #61	@ 0x3d
 80071ae:	d023      	beq.n	80071f8 <mg_base64_decode+0x104>
      dst[len++] = (char) ((b << 4) | (c >> 2));
 80071b0:	69bb      	ldr	r3, [r7, #24]
 80071b2:	b25b      	sxtb	r3, r3
 80071b4:	011b      	lsls	r3, r3, #4
 80071b6:	b25a      	sxtb	r2, r3
 80071b8:	697b      	ldr	r3, [r7, #20]
 80071ba:	109b      	asrs	r3, r3, #2
 80071bc:	b25b      	sxtb	r3, r3
 80071be:	4313      	orrs	r3, r2
 80071c0:	b259      	sxtb	r1, r3
 80071c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071c4:	1c5a      	adds	r2, r3, #1
 80071c6:	627a      	str	r2, [r7, #36]	@ 0x24
 80071c8:	687a      	ldr	r2, [r7, #4]
 80071ca:	4413      	add	r3, r2
 80071cc:	b2ca      	uxtb	r2, r1
 80071ce:	701a      	strb	r2, [r3, #0]
      if (src[3] != '=') dst[len++] = (char) ((c << 6) | d);
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	3303      	adds	r3, #3
 80071d4:	781b      	ldrb	r3, [r3, #0]
 80071d6:	2b3d      	cmp	r3, #61	@ 0x3d
 80071d8:	d00e      	beq.n	80071f8 <mg_base64_decode+0x104>
 80071da:	697b      	ldr	r3, [r7, #20]
 80071dc:	b25b      	sxtb	r3, r3
 80071de:	019b      	lsls	r3, r3, #6
 80071e0:	b25a      	sxtb	r2, r3
 80071e2:	693b      	ldr	r3, [r7, #16]
 80071e4:	b25b      	sxtb	r3, r3
 80071e6:	4313      	orrs	r3, r2
 80071e8:	b259      	sxtb	r1, r3
 80071ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071ec:	1c5a      	adds	r2, r3, #1
 80071ee:	627a      	str	r2, [r7, #36]	@ 0x24
 80071f0:	687a      	ldr	r2, [r7, #4]
 80071f2:	4413      	add	r3, r2
 80071f4:	b2ca      	uxtb	r2, r1
 80071f6:	701a      	strb	r2, [r3, #0]
    }
    src += 4;
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	3304      	adds	r3, #4
 80071fc:	60fb      	str	r3, [r7, #12]
  while (src != NULL && src + 3 < end) {
 80071fe:	68fb      	ldr	r3, [r7, #12]
 8007200:	2b00      	cmp	r3, #0
 8007202:	d004      	beq.n	800720e <mg_base64_decode+0x11a>
 8007204:	68fb      	ldr	r3, [r7, #12]
 8007206:	3303      	adds	r3, #3
 8007208:	6a3a      	ldr	r2, [r7, #32]
 800720a:	429a      	cmp	r2, r3
 800720c:	d88e      	bhi.n	800712c <mg_base64_decode+0x38>
  }
  dst[len] = '\0';
 800720e:	687a      	ldr	r2, [r7, #4]
 8007210:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007212:	4413      	add	r3, r2
 8007214:	2200      	movs	r2, #0
 8007216:	701a      	strb	r2, [r3, #0]
  return len;
 8007218:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800721a:	e009      	b.n	8007230 <mg_base64_decode+0x13c>
  if (dl < n / 4 * 3 + 1) goto fail;
 800721c:	bf00      	nop
 800721e:	e000      	b.n	8007222 <mg_base64_decode+0x12e>
      goto fail;
 8007220:	bf00      	nop
fail:
  if (dl > 0) dst[0] = '\0';
 8007222:	683b      	ldr	r3, [r7, #0]
 8007224:	2b00      	cmp	r3, #0
 8007226:	d002      	beq.n	800722e <mg_base64_decode+0x13a>
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	2200      	movs	r2, #0
 800722c:	701a      	strb	r2, [r3, #0]
  return 0;
 800722e:	2300      	movs	r3, #0
}
 8007230:	4618      	mov	r0, r3
 8007232:	3728      	adds	r7, #40	@ 0x28
 8007234:	46bd      	mov	sp, r7
 8007236:	bd80      	pop	{r7, pc}

08007238 <mg_dns_free>:
};

static void mg_sendnsreq(struct mg_connection *, struct mg_str *, int,
                         struct mg_dns *, bool);

static void mg_dns_free(struct dns_data **head, struct dns_data *d) {
 8007238:	b580      	push	{r7, lr}
 800723a:	b084      	sub	sp, #16
 800723c:	af00      	add	r7, sp, #0
 800723e:	6078      	str	r0, [r7, #4]
 8007240:	6039      	str	r1, [r7, #0]
  LIST_DELETE(struct dns_data, head, d);
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	60fb      	str	r3, [r7, #12]
 8007246:	e002      	b.n	800724e <mg_dns_free+0x16>
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	60fb      	str	r3, [r7, #12]
 800724e:	68fb      	ldr	r3, [r7, #12]
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	683a      	ldr	r2, [r7, #0]
 8007254:	429a      	cmp	r2, r3
 8007256:	d1f7      	bne.n	8007248 <mg_dns_free+0x10>
 8007258:	683b      	ldr	r3, [r7, #0]
 800725a:	681a      	ldr	r2, [r3, #0]
 800725c:	68fb      	ldr	r3, [r7, #12]
 800725e:	601a      	str	r2, [r3, #0]
  mg_free(d);
 8007260:	6838      	ldr	r0, [r7, #0]
 8007262:	f7ff fdcb 	bl	8006dfc <mg_free>
}
 8007266:	bf00      	nop
 8007268:	3710      	adds	r7, #16
 800726a:	46bd      	mov	sp, r7
 800726c:	bd80      	pop	{r7, pc}

0800726e <mg_resolve_cancel>:

void mg_resolve_cancel(struct mg_connection *c) {
 800726e:	b580      	push	{r7, lr}
 8007270:	b086      	sub	sp, #24
 8007272:	af00      	add	r7, sp, #0
 8007274:	6078      	str	r0, [r7, #4]
  struct dns_data *tmp, *d;
  struct dns_data **head = (struct dns_data **) &c->mgr->active_dns_requests;
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	685b      	ldr	r3, [r3, #4]
 800727a:	332c      	adds	r3, #44	@ 0x2c
 800727c:	613b      	str	r3, [r7, #16]
  for (d = *head; d != NULL; d = tmp) {
 800727e:	693b      	ldr	r3, [r7, #16]
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	617b      	str	r3, [r7, #20]
 8007284:	e00d      	b.n	80072a2 <mg_resolve_cancel+0x34>
    tmp = d->next;
 8007286:	697b      	ldr	r3, [r7, #20]
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	60fb      	str	r3, [r7, #12]
    if (d->c == c) mg_dns_free(head, d);
 800728c:	697b      	ldr	r3, [r7, #20]
 800728e:	685b      	ldr	r3, [r3, #4]
 8007290:	687a      	ldr	r2, [r7, #4]
 8007292:	429a      	cmp	r2, r3
 8007294:	d103      	bne.n	800729e <mg_resolve_cancel+0x30>
 8007296:	6979      	ldr	r1, [r7, #20]
 8007298:	6938      	ldr	r0, [r7, #16]
 800729a:	f7ff ffcd 	bl	8007238 <mg_dns_free>
  for (d = *head; d != NULL; d = tmp) {
 800729e:	68fb      	ldr	r3, [r7, #12]
 80072a0:	617b      	str	r3, [r7, #20]
 80072a2:	697b      	ldr	r3, [r7, #20]
 80072a4:	2b00      	cmp	r3, #0
 80072a6:	d1ee      	bne.n	8007286 <mg_resolve_cancel+0x18>
  }
}
 80072a8:	bf00      	nop
 80072aa:	bf00      	nop
 80072ac:	3718      	adds	r7, #24
 80072ae:	46bd      	mov	sp, r7
 80072b0:	bd80      	pop	{r7, pc}

080072b2 <mg_dns_parse_name_depth>:

static size_t mg_dns_parse_name_depth(const uint8_t *s, size_t len, size_t ofs,
                                      char *to, size_t tolen, size_t j,
                                      int depth) {
 80072b2:	b580      	push	{r7, lr}
 80072b4:	b08c      	sub	sp, #48	@ 0x30
 80072b6:	af04      	add	r7, sp, #16
 80072b8:	60f8      	str	r0, [r7, #12]
 80072ba:	60b9      	str	r1, [r7, #8]
 80072bc:	607a      	str	r2, [r7, #4]
 80072be:	603b      	str	r3, [r7, #0]
  size_t i = 0;
 80072c0:	2300      	movs	r3, #0
 80072c2:	61fb      	str	r3, [r7, #28]
  if (tolen > 0 && depth == 0) to[0] = '\0';
 80072c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	d005      	beq.n	80072d6 <mg_dns_parse_name_depth+0x24>
 80072ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80072cc:	2b00      	cmp	r3, #0
 80072ce:	d102      	bne.n	80072d6 <mg_dns_parse_name_depth+0x24>
 80072d0:	683b      	ldr	r3, [r7, #0]
 80072d2:	2200      	movs	r2, #0
 80072d4:	701a      	strb	r2, [r3, #0]
  if (depth > 5) return 0;
 80072d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80072d8:	2b05      	cmp	r3, #5
 80072da:	f340 8084 	ble.w	80073e6 <mg_dns_parse_name_depth+0x134>
 80072de:	2300      	movs	r3, #0
 80072e0:	e093      	b.n	800740a <mg_dns_parse_name_depth+0x158>
  // MG_INFO(("ofs %lx %x %x", (unsigned long) ofs, s[ofs], s[ofs + 1]));
  while (ofs + i + 1 < len) {
    size_t n = s[ofs + i];
 80072e2:	687a      	ldr	r2, [r7, #4]
 80072e4:	69fb      	ldr	r3, [r7, #28]
 80072e6:	4413      	add	r3, r2
 80072e8:	68fa      	ldr	r2, [r7, #12]
 80072ea:	4413      	add	r3, r2
 80072ec:	781b      	ldrb	r3, [r3, #0]
 80072ee:	61bb      	str	r3, [r7, #24]
    if (n == 0) {
 80072f0:	69bb      	ldr	r3, [r7, #24]
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	d103      	bne.n	80072fe <mg_dns_parse_name_depth+0x4c>
      i++;
 80072f6:	69fb      	ldr	r3, [r7, #28]
 80072f8:	3301      	adds	r3, #1
 80072fa:	61fb      	str	r3, [r7, #28]
      break;
 80072fc:	e07b      	b.n	80073f6 <mg_dns_parse_name_depth+0x144>
    }
    if (n & 0xc0) {
 80072fe:	69bb      	ldr	r3, [r7, #24]
 8007300:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8007304:	2b00      	cmp	r3, #0
 8007306:	d02f      	beq.n	8007368 <mg_dns_parse_name_depth+0xb6>
      size_t ptr = (((n & 0x3f) << 8) | s[ofs + i + 1]);  // 12 is hdr len
 8007308:	69bb      	ldr	r3, [r7, #24]
 800730a:	021b      	lsls	r3, r3, #8
 800730c:	f403 537c 	and.w	r3, r3, #16128	@ 0x3f00
 8007310:	6879      	ldr	r1, [r7, #4]
 8007312:	69fa      	ldr	r2, [r7, #28]
 8007314:	440a      	add	r2, r1
 8007316:	3201      	adds	r2, #1
 8007318:	68f9      	ldr	r1, [r7, #12]
 800731a:	440a      	add	r2, r1
 800731c:	7812      	ldrb	r2, [r2, #0]
 800731e:	4313      	orrs	r3, r2
 8007320:	617b      	str	r3, [r7, #20]
      // MG_INFO(("PTR %lx", (unsigned long) ptr));
      if (ptr + 1 < len && (s[ptr] & 0xc0) == 0 &&
 8007322:	697b      	ldr	r3, [r7, #20]
 8007324:	3301      	adds	r3, #1
 8007326:	68ba      	ldr	r2, [r7, #8]
 8007328:	429a      	cmp	r2, r3
 800732a:	d919      	bls.n	8007360 <mg_dns_parse_name_depth+0xae>
 800732c:	68fa      	ldr	r2, [r7, #12]
 800732e:	697b      	ldr	r3, [r7, #20]
 8007330:	4413      	add	r3, r2
 8007332:	781b      	ldrb	r3, [r3, #0]
 8007334:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8007338:	2b00      	cmp	r3, #0
 800733a:	d111      	bne.n	8007360 <mg_dns_parse_name_depth+0xae>
          mg_dns_parse_name_depth(s, len, ptr, to, tolen, j, depth + 1) == 0)
 800733c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800733e:	3301      	adds	r3, #1
 8007340:	9302      	str	r3, [sp, #8]
 8007342:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007344:	9301      	str	r3, [sp, #4]
 8007346:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007348:	9300      	str	r3, [sp, #0]
 800734a:	683b      	ldr	r3, [r7, #0]
 800734c:	697a      	ldr	r2, [r7, #20]
 800734e:	68b9      	ldr	r1, [r7, #8]
 8007350:	68f8      	ldr	r0, [r7, #12]
 8007352:	f7ff ffae 	bl	80072b2 <mg_dns_parse_name_depth>
 8007356:	4603      	mov	r3, r0
      if (ptr + 1 < len && (s[ptr] & 0xc0) == 0 &&
 8007358:	2b00      	cmp	r3, #0
 800735a:	d101      	bne.n	8007360 <mg_dns_parse_name_depth+0xae>
        return 0;
 800735c:	2300      	movs	r3, #0
 800735e:	e054      	b.n	800740a <mg_dns_parse_name_depth+0x158>
      i += 2;
 8007360:	69fb      	ldr	r3, [r7, #28]
 8007362:	3302      	adds	r3, #2
 8007364:	61fb      	str	r3, [r7, #28]
      break;
 8007366:	e046      	b.n	80073f6 <mg_dns_parse_name_depth+0x144>
    }
    if (ofs + i + n + 1 >= len) return 0;
 8007368:	687a      	ldr	r2, [r7, #4]
 800736a:	69fb      	ldr	r3, [r7, #28]
 800736c:	441a      	add	r2, r3
 800736e:	69bb      	ldr	r3, [r7, #24]
 8007370:	4413      	add	r3, r2
 8007372:	3301      	adds	r3, #1
 8007374:	68ba      	ldr	r2, [r7, #8]
 8007376:	429a      	cmp	r2, r3
 8007378:	d801      	bhi.n	800737e <mg_dns_parse_name_depth+0xcc>
 800737a:	2300      	movs	r3, #0
 800737c:	e045      	b.n	800740a <mg_dns_parse_name_depth+0x158>
    if (j > 0) {
 800737e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007380:	2b00      	cmp	r3, #0
 8007382:	d00b      	beq.n	800739c <mg_dns_parse_name_depth+0xea>
      if (j < tolen) to[j] = '.';
 8007384:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007386:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007388:	429a      	cmp	r2, r3
 800738a:	d204      	bcs.n	8007396 <mg_dns_parse_name_depth+0xe4>
 800738c:	683a      	ldr	r2, [r7, #0]
 800738e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007390:	4413      	add	r3, r2
 8007392:	222e      	movs	r2, #46	@ 0x2e
 8007394:	701a      	strb	r2, [r3, #0]
      j++;
 8007396:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007398:	3301      	adds	r3, #1
 800739a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
    if (j + n < tolen) memcpy(&to[j], &s[ofs + i + 1], n);
 800739c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800739e:	69bb      	ldr	r3, [r7, #24]
 80073a0:	4413      	add	r3, r2
 80073a2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80073a4:	429a      	cmp	r2, r3
 80073a6:	d90c      	bls.n	80073c2 <mg_dns_parse_name_depth+0x110>
 80073a8:	683a      	ldr	r2, [r7, #0]
 80073aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80073ac:	18d0      	adds	r0, r2, r3
 80073ae:	687a      	ldr	r2, [r7, #4]
 80073b0:	69fb      	ldr	r3, [r7, #28]
 80073b2:	4413      	add	r3, r2
 80073b4:	3301      	adds	r3, #1
 80073b6:	68fa      	ldr	r2, [r7, #12]
 80073b8:	4413      	add	r3, r2
 80073ba:	69ba      	ldr	r2, [r7, #24]
 80073bc:	4619      	mov	r1, r3
 80073be:	f01d f9e2 	bl	8024786 <memcpy>
    j += n;
 80073c2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80073c4:	69bb      	ldr	r3, [r7, #24]
 80073c6:	4413      	add	r3, r2
 80073c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    i += n + 1;
 80073ca:	69ba      	ldr	r2, [r7, #24]
 80073cc:	69fb      	ldr	r3, [r7, #28]
 80073ce:	4413      	add	r3, r2
 80073d0:	3301      	adds	r3, #1
 80073d2:	61fb      	str	r3, [r7, #28]
    if (j < tolen) to[j] = '\0';  // Zero-terminate this chunk
 80073d4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80073d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80073d8:	429a      	cmp	r2, r3
 80073da:	d204      	bcs.n	80073e6 <mg_dns_parse_name_depth+0x134>
 80073dc:	683a      	ldr	r2, [r7, #0]
 80073de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80073e0:	4413      	add	r3, r2
 80073e2:	2200      	movs	r2, #0
 80073e4:	701a      	strb	r2, [r3, #0]
  while (ofs + i + 1 < len) {
 80073e6:	687a      	ldr	r2, [r7, #4]
 80073e8:	69fb      	ldr	r3, [r7, #28]
 80073ea:	4413      	add	r3, r2
 80073ec:	3301      	adds	r3, #1
 80073ee:	68ba      	ldr	r2, [r7, #8]
 80073f0:	429a      	cmp	r2, r3
 80073f2:	f63f af76 	bhi.w	80072e2 <mg_dns_parse_name_depth+0x30>
    // MG_INFO(("--> [%s]", to));
  }
  if (tolen > 0) to[tolen - 1] = '\0';  // Make sure make sure it is nul-term
 80073f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80073f8:	2b00      	cmp	r3, #0
 80073fa:	d005      	beq.n	8007408 <mg_dns_parse_name_depth+0x156>
 80073fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80073fe:	3b01      	subs	r3, #1
 8007400:	683a      	ldr	r2, [r7, #0]
 8007402:	4413      	add	r3, r2
 8007404:	2200      	movs	r2, #0
 8007406:	701a      	strb	r2, [r3, #0]
  return i;
 8007408:	69fb      	ldr	r3, [r7, #28]
}
 800740a:	4618      	mov	r0, r3
 800740c:	3720      	adds	r7, #32
 800740e:	46bd      	mov	sp, r7
 8007410:	bd80      	pop	{r7, pc}

08007412 <mg_dns_parse_name>:

static size_t mg_dns_parse_name(const uint8_t *s, size_t n, size_t ofs,
                                char *dst, size_t dstlen) {
 8007412:	b580      	push	{r7, lr}
 8007414:	b088      	sub	sp, #32
 8007416:	af04      	add	r7, sp, #16
 8007418:	60f8      	str	r0, [r7, #12]
 800741a:	60b9      	str	r1, [r7, #8]
 800741c:	607a      	str	r2, [r7, #4]
 800741e:	603b      	str	r3, [r7, #0]
  return mg_dns_parse_name_depth(s, n, ofs, dst, dstlen, 0, 0);
 8007420:	2300      	movs	r3, #0
 8007422:	9302      	str	r3, [sp, #8]
 8007424:	2300      	movs	r3, #0
 8007426:	9301      	str	r3, [sp, #4]
 8007428:	69bb      	ldr	r3, [r7, #24]
 800742a:	9300      	str	r3, [sp, #0]
 800742c:	683b      	ldr	r3, [r7, #0]
 800742e:	687a      	ldr	r2, [r7, #4]
 8007430:	68b9      	ldr	r1, [r7, #8]
 8007432:	68f8      	ldr	r0, [r7, #12]
 8007434:	f7ff ff3d 	bl	80072b2 <mg_dns_parse_name_depth>
 8007438:	4603      	mov	r3, r0
}
 800743a:	4618      	mov	r0, r3
 800743c:	3710      	adds	r7, #16
 800743e:	46bd      	mov	sp, r7
 8007440:	bd80      	pop	{r7, pc}

08007442 <mg_dns_parse_rr>:

size_t mg_dns_parse_rr(const uint8_t *buf, size_t len, size_t ofs,
                       bool is_question, struct mg_dns_rr *rr) {
 8007442:	b580      	push	{r7, lr}
 8007444:	b088      	sub	sp, #32
 8007446:	af02      	add	r7, sp, #8
 8007448:	60f8      	str	r0, [r7, #12]
 800744a:	60b9      	str	r1, [r7, #8]
 800744c:	607a      	str	r2, [r7, #4]
 800744e:	70fb      	strb	r3, [r7, #3]
  const uint8_t *s = buf + ofs, *e = &buf[len];
 8007450:	68fa      	ldr	r2, [r7, #12]
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	4413      	add	r3, r2
 8007456:	617b      	str	r3, [r7, #20]
 8007458:	68fa      	ldr	r2, [r7, #12]
 800745a:	68bb      	ldr	r3, [r7, #8]
 800745c:	4413      	add	r3, r2
 800745e:	613b      	str	r3, [r7, #16]

  memset(rr, 0, sizeof(*rr));
 8007460:	2208      	movs	r2, #8
 8007462:	2100      	movs	r1, #0
 8007464:	6a38      	ldr	r0, [r7, #32]
 8007466:	f01d f811 	bl	802448c <memset>
  if (len < sizeof(struct mg_dns_header)) return 0;  // Too small
 800746a:	68bb      	ldr	r3, [r7, #8]
 800746c:	2b0b      	cmp	r3, #11
 800746e:	d801      	bhi.n	8007474 <mg_dns_parse_rr+0x32>
 8007470:	2300      	movs	r3, #0
 8007472:	e077      	b.n	8007564 <mg_dns_parse_rr+0x122>
  if (len > 512) return 0;  //  Too large, we don't expect that
 8007474:	68bb      	ldr	r3, [r7, #8]
 8007476:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800747a:	d901      	bls.n	8007480 <mg_dns_parse_rr+0x3e>
 800747c:	2300      	movs	r3, #0
 800747e:	e071      	b.n	8007564 <mg_dns_parse_rr+0x122>
  if (s >= e) return 0;     //  Overflow
 8007480:	697a      	ldr	r2, [r7, #20]
 8007482:	693b      	ldr	r3, [r7, #16]
 8007484:	429a      	cmp	r2, r3
 8007486:	d301      	bcc.n	800748c <mg_dns_parse_rr+0x4a>
 8007488:	2300      	movs	r3, #0
 800748a:	e06b      	b.n	8007564 <mg_dns_parse_rr+0x122>

  if ((rr->nlen = (uint16_t) mg_dns_parse_name(buf, len, ofs, NULL, 0)) == 0)
 800748c:	2300      	movs	r3, #0
 800748e:	9300      	str	r3, [sp, #0]
 8007490:	2300      	movs	r3, #0
 8007492:	687a      	ldr	r2, [r7, #4]
 8007494:	68b9      	ldr	r1, [r7, #8]
 8007496:	68f8      	ldr	r0, [r7, #12]
 8007498:	f7ff ffbb 	bl	8007412 <mg_dns_parse_name>
 800749c:	4603      	mov	r3, r0
 800749e:	b29a      	uxth	r2, r3
 80074a0:	6a3b      	ldr	r3, [r7, #32]
 80074a2:	801a      	strh	r2, [r3, #0]
 80074a4:	6a3b      	ldr	r3, [r7, #32]
 80074a6:	881b      	ldrh	r3, [r3, #0]
 80074a8:	2b00      	cmp	r3, #0
 80074aa:	d101      	bne.n	80074b0 <mg_dns_parse_rr+0x6e>
    return 0;
 80074ac:	2300      	movs	r3, #0
 80074ae:	e059      	b.n	8007564 <mg_dns_parse_rr+0x122>
  s += rr->nlen + 4;
 80074b0:	6a3b      	ldr	r3, [r7, #32]
 80074b2:	881b      	ldrh	r3, [r3, #0]
 80074b4:	3304      	adds	r3, #4
 80074b6:	697a      	ldr	r2, [r7, #20]
 80074b8:	4413      	add	r3, r2
 80074ba:	617b      	str	r3, [r7, #20]
  if (s > e) return 0;
 80074bc:	697a      	ldr	r2, [r7, #20]
 80074be:	693b      	ldr	r3, [r7, #16]
 80074c0:	429a      	cmp	r2, r3
 80074c2:	d901      	bls.n	80074c8 <mg_dns_parse_rr+0x86>
 80074c4:	2300      	movs	r3, #0
 80074c6:	e04d      	b.n	8007564 <mg_dns_parse_rr+0x122>
  rr->atype = (uint16_t) (((uint16_t) s[-4] << 8) | s[-3]);
 80074c8:	697b      	ldr	r3, [r7, #20]
 80074ca:	3b04      	subs	r3, #4
 80074cc:	781b      	ldrb	r3, [r3, #0]
 80074ce:	b21b      	sxth	r3, r3
 80074d0:	021b      	lsls	r3, r3, #8
 80074d2:	b21a      	sxth	r2, r3
 80074d4:	697b      	ldr	r3, [r7, #20]
 80074d6:	3b03      	subs	r3, #3
 80074d8:	781b      	ldrb	r3, [r3, #0]
 80074da:	b21b      	sxth	r3, r3
 80074dc:	4313      	orrs	r3, r2
 80074de:	b21b      	sxth	r3, r3
 80074e0:	b29a      	uxth	r2, r3
 80074e2:	6a3b      	ldr	r3, [r7, #32]
 80074e4:	805a      	strh	r2, [r3, #2]
  rr->aclass = (uint16_t) (((uint16_t) s[-2] << 8) | s[-1]);
 80074e6:	697b      	ldr	r3, [r7, #20]
 80074e8:	3b02      	subs	r3, #2
 80074ea:	781b      	ldrb	r3, [r3, #0]
 80074ec:	b21b      	sxth	r3, r3
 80074ee:	021b      	lsls	r3, r3, #8
 80074f0:	b21a      	sxth	r2, r3
 80074f2:	697b      	ldr	r3, [r7, #20]
 80074f4:	3b01      	subs	r3, #1
 80074f6:	781b      	ldrb	r3, [r3, #0]
 80074f8:	b21b      	sxth	r3, r3
 80074fa:	4313      	orrs	r3, r2
 80074fc:	b21b      	sxth	r3, r3
 80074fe:	b29a      	uxth	r2, r3
 8007500:	6a3b      	ldr	r3, [r7, #32]
 8007502:	809a      	strh	r2, [r3, #4]
  if (is_question) return (size_t) (rr->nlen + 4);
 8007504:	78fb      	ldrb	r3, [r7, #3]
 8007506:	2b00      	cmp	r3, #0
 8007508:	d003      	beq.n	8007512 <mg_dns_parse_rr+0xd0>
 800750a:	6a3b      	ldr	r3, [r7, #32]
 800750c:	881b      	ldrh	r3, [r3, #0]
 800750e:	3304      	adds	r3, #4
 8007510:	e028      	b.n	8007564 <mg_dns_parse_rr+0x122>

  s += 6;
 8007512:	697b      	ldr	r3, [r7, #20]
 8007514:	3306      	adds	r3, #6
 8007516:	617b      	str	r3, [r7, #20]
  if (s > e) return 0;
 8007518:	697a      	ldr	r2, [r7, #20]
 800751a:	693b      	ldr	r3, [r7, #16]
 800751c:	429a      	cmp	r2, r3
 800751e:	d901      	bls.n	8007524 <mg_dns_parse_rr+0xe2>
 8007520:	2300      	movs	r3, #0
 8007522:	e01f      	b.n	8007564 <mg_dns_parse_rr+0x122>
  rr->alen = (uint16_t) (((uint16_t) s[-2] << 8) | s[-1]);
 8007524:	697b      	ldr	r3, [r7, #20]
 8007526:	3b02      	subs	r3, #2
 8007528:	781b      	ldrb	r3, [r3, #0]
 800752a:	b21b      	sxth	r3, r3
 800752c:	021b      	lsls	r3, r3, #8
 800752e:	b21a      	sxth	r2, r3
 8007530:	697b      	ldr	r3, [r7, #20]
 8007532:	3b01      	subs	r3, #1
 8007534:	781b      	ldrb	r3, [r3, #0]
 8007536:	b21b      	sxth	r3, r3
 8007538:	4313      	orrs	r3, r2
 800753a:	b21b      	sxth	r3, r3
 800753c:	b29a      	uxth	r2, r3
 800753e:	6a3b      	ldr	r3, [r7, #32]
 8007540:	80da      	strh	r2, [r3, #6]
  if (s + rr->alen > e) return 0;
 8007542:	6a3b      	ldr	r3, [r7, #32]
 8007544:	88db      	ldrh	r3, [r3, #6]
 8007546:	461a      	mov	r2, r3
 8007548:	697b      	ldr	r3, [r7, #20]
 800754a:	4413      	add	r3, r2
 800754c:	693a      	ldr	r2, [r7, #16]
 800754e:	429a      	cmp	r2, r3
 8007550:	d201      	bcs.n	8007556 <mg_dns_parse_rr+0x114>
 8007552:	2300      	movs	r3, #0
 8007554:	e006      	b.n	8007564 <mg_dns_parse_rr+0x122>
  return (size_t) (rr->nlen + rr->alen + 10);
 8007556:	6a3b      	ldr	r3, [r7, #32]
 8007558:	881b      	ldrh	r3, [r3, #0]
 800755a:	461a      	mov	r2, r3
 800755c:	6a3b      	ldr	r3, [r7, #32]
 800755e:	88db      	ldrh	r3, [r3, #6]
 8007560:	4413      	add	r3, r2
 8007562:	330a      	adds	r3, #10
}
 8007564:	4618      	mov	r0, r3
 8007566:	3718      	adds	r7, #24
 8007568:	46bd      	mov	sp, r7
 800756a:	bd80      	pop	{r7, pc}

0800756c <mg_dns_parse>:

bool mg_dns_parse(const uint8_t *buf, size_t len, struct mg_dns_message *dm) {
 800756c:	b580      	push	{r7, lr}
 800756e:	b08e      	sub	sp, #56	@ 0x38
 8007570:	af02      	add	r7, sp, #8
 8007572:	60f8      	str	r0, [r7, #12]
 8007574:	60b9      	str	r1, [r7, #8]
 8007576:	607a      	str	r2, [r7, #4]
  const struct mg_dns_header *h = (struct mg_dns_header *) buf;
 8007578:	68fb      	ldr	r3, [r7, #12]
 800757a:	623b      	str	r3, [r7, #32]
  struct mg_dns_rr rr;
  size_t i, n, num_answers, ofs = sizeof(*h);
 800757c:	230c      	movs	r3, #12
 800757e:	627b      	str	r3, [r7, #36]	@ 0x24
  bool is_response;
  memset(dm, 0, sizeof(*dm));
 8007580:	f44f 7290 	mov.w	r2, #288	@ 0x120
 8007584:	2100      	movs	r1, #0
 8007586:	6878      	ldr	r0, [r7, #4]
 8007588:	f01c ff80 	bl	802448c <memset>

  if (len < sizeof(*h)) return 0;                // Too small, headers dont fit
 800758c:	68bb      	ldr	r3, [r7, #8]
 800758e:	2b0b      	cmp	r3, #11
 8007590:	d801      	bhi.n	8007596 <mg_dns_parse+0x2a>
 8007592:	2300      	movs	r3, #0
 8007594:	e0c9      	b.n	800772a <mg_dns_parse+0x1be>
  if (mg_ntohs(h->num_questions) > 1) return 0;  // Sanity
 8007596:	6a3b      	ldr	r3, [r7, #32]
 8007598:	889b      	ldrh	r3, [r3, #4]
 800759a:	4618      	mov	r0, r3
 800759c:	f019 fdc1 	bl	8021122 <mg_ntohs>
 80075a0:	4603      	mov	r3, r0
 80075a2:	2b01      	cmp	r3, #1
 80075a4:	d901      	bls.n	80075aa <mg_dns_parse+0x3e>
 80075a6:	2300      	movs	r3, #0
 80075a8:	e0bf      	b.n	800772a <mg_dns_parse+0x1be>
  num_answers = mg_ntohs(h->num_answers);
 80075aa:	6a3b      	ldr	r3, [r7, #32]
 80075ac:	88db      	ldrh	r3, [r3, #6]
 80075ae:	4618      	mov	r0, r3
 80075b0:	f019 fdb7 	bl	8021122 <mg_ntohs>
 80075b4:	4603      	mov	r3, r0
 80075b6:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (num_answers > 10) {
 80075b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80075ba:	2b0a      	cmp	r3, #10
 80075bc:	d90f      	bls.n	80075de <mg_dns_parse+0x72>
    MG_DEBUG(("Got %u answers, ignoring beyond 10th one", num_answers));
 80075be:	4b5d      	ldr	r3, [pc, #372]	@ (8007734 <mg_dns_parse+0x1c8>)
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	2b02      	cmp	r3, #2
 80075c4:	dd09      	ble.n	80075da <mg_dns_parse+0x6e>
 80075c6:	4b5c      	ldr	r3, [pc, #368]	@ (8007738 <mg_dns_parse+0x1cc>)
 80075c8:	22e7      	movs	r2, #231	@ 0xe7
 80075ca:	495c      	ldr	r1, [pc, #368]	@ (800773c <mg_dns_parse+0x1d0>)
 80075cc:	2003      	movs	r0, #3
 80075ce:	f005 fded 	bl	800d1ac <mg_log_prefix>
 80075d2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80075d4:	485a      	ldr	r0, [pc, #360]	@ (8007740 <mg_dns_parse+0x1d4>)
 80075d6:	f005 fe39 	bl	800d24c <mg_log>
    num_answers = 10;  // Sanity cap
 80075da:	230a      	movs	r3, #10
 80075dc:	62bb      	str	r3, [r7, #40]	@ 0x28
  }
  dm->txnid = mg_ntohs(h->txnid);
 80075de:	6a3b      	ldr	r3, [r7, #32]
 80075e0:	881b      	ldrh	r3, [r3, #0]
 80075e2:	4618      	mov	r0, r3
 80075e4:	f019 fd9d 	bl	8021122 <mg_ntohs>
 80075e8:	4603      	mov	r3, r0
 80075ea:	461a      	mov	r2, r3
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	801a      	strh	r2, [r3, #0]
  is_response = mg_ntohs(h->flags) & 0x8000;
 80075f0:	6a3b      	ldr	r3, [r7, #32]
 80075f2:	885b      	ldrh	r3, [r3, #2]
 80075f4:	4618      	mov	r0, r3
 80075f6:	f019 fd94 	bl	8021122 <mg_ntohs>
 80075fa:	4603      	mov	r3, r0
 80075fc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007600:	2b00      	cmp	r3, #0
 8007602:	bf14      	ite	ne
 8007604:	2301      	movne	r3, #1
 8007606:	2300      	moveq	r3, #0
 8007608:	77fb      	strb	r3, [r7, #31]

  for (i = 0; i < mg_ntohs(h->num_questions); i++) {
 800760a:	2300      	movs	r3, #0
 800760c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800760e:	e01f      	b.n	8007650 <mg_dns_parse+0xe4>
    if ((n = mg_dns_parse_rr(buf, len, ofs, true, &rr)) == 0) return false;
 8007610:	f107 0310 	add.w	r3, r7, #16
 8007614:	9300      	str	r3, [sp, #0]
 8007616:	2301      	movs	r3, #1
 8007618:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800761a:	68b9      	ldr	r1, [r7, #8]
 800761c:	68f8      	ldr	r0, [r7, #12]
 800761e:	f7ff ff10 	bl	8007442 <mg_dns_parse_rr>
 8007622:	61b8      	str	r0, [r7, #24]
 8007624:	69bb      	ldr	r3, [r7, #24]
 8007626:	2b00      	cmp	r3, #0
 8007628:	d101      	bne.n	800762e <mg_dns_parse+0xc2>
 800762a:	2300      	movs	r3, #0
 800762c:	e07d      	b.n	800772a <mg_dns_parse+0x1be>
    // MG_INFO(("Q %lu %lu %hu/%hu", ofs, n, rr.atype, rr.aclass));
    mg_dns_parse_name(buf, len, ofs, dm->name, sizeof(dm->name));
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	3320      	adds	r3, #32
 8007632:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8007636:	9200      	str	r2, [sp, #0]
 8007638:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800763a:	68b9      	ldr	r1, [r7, #8]
 800763c:	68f8      	ldr	r0, [r7, #12]
 800763e:	f7ff fee8 	bl	8007412 <mg_dns_parse_name>
    ofs += n;
 8007642:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007644:	69bb      	ldr	r3, [r7, #24]
 8007646:	4413      	add	r3, r2
 8007648:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0; i < mg_ntohs(h->num_questions); i++) {
 800764a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800764c:	3301      	adds	r3, #1
 800764e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007650:	6a3b      	ldr	r3, [r7, #32]
 8007652:	889b      	ldrh	r3, [r3, #4]
 8007654:	4618      	mov	r0, r3
 8007656:	f019 fd64 	bl	8021122 <mg_ntohs>
 800765a:	4603      	mov	r3, r0
 800765c:	461a      	mov	r2, r3
 800765e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007660:	4293      	cmp	r3, r2
 8007662:	d3d5      	bcc.n	8007610 <mg_dns_parse+0xa4>
  }

  if (!is_response) {
 8007664:	7ffb      	ldrb	r3, [r7, #31]
 8007666:	f083 0301 	eor.w	r3, r3, #1
 800766a:	b2db      	uxtb	r3, r3
 800766c:	2b00      	cmp	r3, #0
 800766e:	d001      	beq.n	8007674 <mg_dns_parse+0x108>
    // For queries, there is no need to parse the answers. In this way,
    // we also ensure the domain name (dm->name) is parsed from
    // the question field.
    return true;
 8007670:	2301      	movs	r3, #1
 8007672:	e05a      	b.n	800772a <mg_dns_parse+0x1be>
  }

  for (i = 0; i < num_answers; i++) {
 8007674:	2300      	movs	r3, #0
 8007676:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007678:	e052      	b.n	8007720 <mg_dns_parse+0x1b4>
    if ((n = mg_dns_parse_rr(buf, len, ofs, false, &rr)) == 0) return false;
 800767a:	f107 0310 	add.w	r3, r7, #16
 800767e:	9300      	str	r3, [sp, #0]
 8007680:	2300      	movs	r3, #0
 8007682:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007684:	68b9      	ldr	r1, [r7, #8]
 8007686:	68f8      	ldr	r0, [r7, #12]
 8007688:	f7ff fedb 	bl	8007442 <mg_dns_parse_rr>
 800768c:	61b8      	str	r0, [r7, #24]
 800768e:	69bb      	ldr	r3, [r7, #24]
 8007690:	2b00      	cmp	r3, #0
 8007692:	d101      	bne.n	8007698 <mg_dns_parse+0x12c>
 8007694:	2300      	movs	r3, #0
 8007696:	e048      	b.n	800772a <mg_dns_parse+0x1be>
    // MG_INFO(("A -- %lu %lu %hu/%hu %s", ofs, n, rr.atype, rr.aclass,
    // dm->name));
    mg_dns_parse_name(buf, len, ofs, dm->name, sizeof(dm->name));
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	3320      	adds	r3, #32
 800769c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80076a0:	9200      	str	r2, [sp, #0]
 80076a2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80076a4:	68b9      	ldr	r1, [r7, #8]
 80076a6:	68f8      	ldr	r0, [r7, #12]
 80076a8:	f7ff feb3 	bl	8007412 <mg_dns_parse_name>
    ofs += n;
 80076ac:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80076ae:	69bb      	ldr	r3, [r7, #24]
 80076b0:	4413      	add	r3, r2
 80076b2:	627b      	str	r3, [r7, #36]	@ 0x24

    if (rr.alen == 4 && rr.atype == 1 && rr.aclass == 1) {
 80076b4:	8afb      	ldrh	r3, [r7, #22]
 80076b6:	2b04      	cmp	r3, #4
 80076b8:	d114      	bne.n	80076e4 <mg_dns_parse+0x178>
 80076ba:	8a7b      	ldrh	r3, [r7, #18]
 80076bc:	2b01      	cmp	r3, #1
 80076be:	d111      	bne.n	80076e4 <mg_dns_parse+0x178>
 80076c0:	8abb      	ldrh	r3, [r7, #20]
 80076c2:	2b01      	cmp	r3, #1
 80076c4:	d10e      	bne.n	80076e4 <mg_dns_parse+0x178>
      dm->addr.is_ip6 = false;
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	2200      	movs	r2, #0
 80076ca:	76da      	strb	r2, [r3, #27]
      memcpy(&dm->addr.ip, &buf[ofs - 4], 4);
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	3308      	adds	r3, #8
 80076d0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80076d2:	3a04      	subs	r2, #4
 80076d4:	68f9      	ldr	r1, [r7, #12]
 80076d6:	440a      	add	r2, r1
 80076d8:	6812      	ldr	r2, [r2, #0]
 80076da:	601a      	str	r2, [r3, #0]
      dm->resolved = true;
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	2201      	movs	r2, #1
 80076e0:	709a      	strb	r2, [r3, #2]
      break;  // Return success
 80076e2:	e021      	b.n	8007728 <mg_dns_parse+0x1bc>
    } else if (rr.alen == 16 && rr.atype == 28 && rr.aclass == 1) {
 80076e4:	8afb      	ldrh	r3, [r7, #22]
 80076e6:	2b10      	cmp	r3, #16
 80076e8:	d117      	bne.n	800771a <mg_dns_parse+0x1ae>
 80076ea:	8a7b      	ldrh	r3, [r7, #18]
 80076ec:	2b1c      	cmp	r3, #28
 80076ee:	d114      	bne.n	800771a <mg_dns_parse+0x1ae>
 80076f0:	8abb      	ldrh	r3, [r7, #20]
 80076f2:	2b01      	cmp	r3, #1
 80076f4:	d111      	bne.n	800771a <mg_dns_parse+0x1ae>
      dm->addr.is_ip6 = true;
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	2201      	movs	r2, #1
 80076fa:	76da      	strb	r2, [r3, #27]
      memcpy(&dm->addr.ip, &buf[ofs - 16], 16);
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	f103 0008 	add.w	r0, r3, #8
 8007702:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007704:	3b10      	subs	r3, #16
 8007706:	68fa      	ldr	r2, [r7, #12]
 8007708:	4413      	add	r3, r2
 800770a:	2210      	movs	r2, #16
 800770c:	4619      	mov	r1, r3
 800770e:	f01d f83a 	bl	8024786 <memcpy>
      dm->resolved = true;
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	2201      	movs	r2, #1
 8007716:	709a      	strb	r2, [r3, #2]
      break;  // Return success
 8007718:	e006      	b.n	8007728 <mg_dns_parse+0x1bc>
  for (i = 0; i < num_answers; i++) {
 800771a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800771c:	3301      	adds	r3, #1
 800771e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007720:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007722:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007724:	429a      	cmp	r2, r3
 8007726:	d3a8      	bcc.n	800767a <mg_dns_parse+0x10e>
    }
  }
  return true;
 8007728:	2301      	movs	r3, #1
}
 800772a:	4618      	mov	r0, r3
 800772c:	3730      	adds	r7, #48	@ 0x30
 800772e:	46bd      	mov	sp, r7
 8007730:	bd80      	pop	{r7, pc}
 8007732:	bf00      	nop
 8007734:	20000258 	.word	0x20000258
 8007738:	080287bc 	.word	0x080287bc
 800773c:	08025140 	.word	0x08025140
 8007740:	08025158 	.word	0x08025158

08007744 <dns_cb>:

static void dns_cb(struct mg_connection *c, int ev, void *ev_data) {
 8007744:	b5b0      	push	{r4, r5, r7, lr}
 8007746:	b0d4      	sub	sp, #336	@ 0x150
 8007748:	af02      	add	r7, sp, #8
 800774a:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800774e:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8007752:	6018      	str	r0, [r3, #0]
 8007754:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8007758:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 800775c:	6019      	str	r1, [r3, #0]
 800775e:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8007762:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8007766:	601a      	str	r2, [r3, #0]
  struct dns_data *d, *tmp;
  struct dns_data **head = (struct dns_data **) &c->mgr->active_dns_requests;
 8007768:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800776c:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	685b      	ldr	r3, [r3, #4]
 8007774:	332c      	adds	r3, #44	@ 0x2c
 8007776:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
  if (ev == MG_EV_POLL) {
 800777a:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800777e:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	2b02      	cmp	r3, #2
 8007786:	d12d      	bne.n	80077e4 <dns_cb+0xa0>
    uint64_t now = *(uint64_t *) ev_data;
 8007788:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800778c:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007796:	e9c7 234c 	strd	r2, r3, [r7, #304]	@ 0x130
    for (d = *head; d != NULL; d = tmp) {
 800779a:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144
 80077a4:	e019      	b.n	80077da <dns_cb+0x96>
      tmp = d->next;
 80077a6:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
      // MG_DEBUG ("%lu %lu dns poll", d->expire, now));
      if (now > d->expire) mg_error(d->c, "DNS timeout");
 80077b0:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 80077b4:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 80077b8:	e9d7 234c 	ldrd	r2, r3, [r7, #304]	@ 0x130
 80077bc:	4290      	cmp	r0, r2
 80077be:	eb71 0303 	sbcs.w	r3, r1, r3
 80077c2:	d206      	bcs.n	80077d2 <dns_cb+0x8e>
 80077c4:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 80077c8:	685b      	ldr	r3, [r3, #4]
 80077ca:	4994      	ldr	r1, [pc, #592]	@ (8007a1c <dns_cb+0x2d8>)
 80077cc:	4618      	mov	r0, r3
 80077ce:	f000 fb51 	bl	8007e74 <mg_error>
    for (d = *head; d != NULL; d = tmp) {
 80077d2:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 80077d6:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144
 80077da:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 80077de:	2b00      	cmp	r3, #0
 80077e0:	d1e1      	bne.n	80077a6 <dns_cb+0x62>
      tmp = d->next;
      mg_error(d->c, "DNS error");
      mg_dns_free(head, d);
    }
  }
}
 80077e2:	e115      	b.n	8007a10 <dns_cb+0x2cc>
  } else if (ev == MG_EV_READ) {
 80077e4:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 80077e8:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	2b07      	cmp	r3, #7
 80077f0:	f040 80e7 	bne.w	80079c2 <dns_cb+0x27e>
    int resolved = 0;
 80077f4:	2300      	movs	r3, #0
 80077f6:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
    if (mg_dns_parse(c->recv.buf, c->recv.len, &dm) == false) {
 80077fa:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 80077fe:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	6c18      	ldr	r0, [r3, #64]	@ 0x40
 8007806:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800780a:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007812:	f107 0210 	add.w	r2, r7, #16
 8007816:	4619      	mov	r1, r3
 8007818:	f7ff fea8 	bl	800756c <mg_dns_parse>
 800781c:	4603      	mov	r3, r0
 800781e:	f083 0301 	eor.w	r3, r3, #1
 8007822:	b2db      	uxtb	r3, r3
 8007824:	2b00      	cmp	r3, #0
 8007826:	d01e      	beq.n	8007866 <dns_cb+0x122>
      MG_ERROR(("Unexpected DNS response:"));
 8007828:	4b7d      	ldr	r3, [pc, #500]	@ (8007a20 <dns_cb+0x2dc>)
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	2b00      	cmp	r3, #0
 800782e:	dd09      	ble.n	8007844 <dns_cb+0x100>
 8007830:	4b7c      	ldr	r3, [pc, #496]	@ (8007a24 <dns_cb+0x2e0>)
 8007832:	f240 121f 	movw	r2, #287	@ 0x11f
 8007836:	497c      	ldr	r1, [pc, #496]	@ (8007a28 <dns_cb+0x2e4>)
 8007838:	2001      	movs	r0, #1
 800783a:	f005 fcb7 	bl	800d1ac <mg_log_prefix>
 800783e:	487b      	ldr	r0, [pc, #492]	@ (8007a2c <dns_cb+0x2e8>)
 8007840:	f005 fd04 	bl	800d24c <mg_log>
      mg_hexdump(c->recv.buf, c->recv.len);
 8007844:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8007848:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007850:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8007854:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800785c:	4619      	mov	r1, r3
 800785e:	4610      	mov	r0, r2
 8007860:	f005 fd2a 	bl	800d2b8 <mg_hexdump>
 8007864:	e093      	b.n	800798e <dns_cb+0x24a>
      for (d = *head; d != NULL; d = tmp) {
 8007866:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144
 8007870:	e088      	b.n	8007984 <dns_cb+0x240>
        tmp = d->next;
 8007872:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
        if (dm.txnid != d->txnid) continue;
 800787c:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8007880:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8007884:	881a      	ldrh	r2, [r3, #0]
 8007886:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 800788a:	8a1b      	ldrh	r3, [r3, #16]
 800788c:	429a      	cmp	r2, r3
 800788e:	d174      	bne.n	800797a <dns_cb+0x236>
        if (d->c->is_resolving) {
 8007890:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8007894:	685b      	ldr	r3, [r3, #4]
 8007896:	f893 30b4 	ldrb.w	r3, [r3, #180]	@ 0xb4
 800789a:	f003 0308 	and.w	r3, r3, #8
 800789e:	b2db      	uxtb	r3, r3
 80078a0:	2b00      	cmp	r3, #0
 80078a2:	d04d      	beq.n	8007940 <dns_cb+0x1fc>
          if (dm.resolved) {
 80078a4:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 80078a8:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 80078ac:	789b      	ldrb	r3, [r3, #2]
 80078ae:	2b00      	cmp	r3, #0
 80078b0:	d03b      	beq.n	800792a <dns_cb+0x1e6>
            dm.addr.port = d->c->rem.port;  // Save port
 80078b2:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 80078b6:	685b      	ldr	r3, [r3, #4]
 80078b8:	8e1a      	ldrh	r2, [r3, #48]	@ 0x30
 80078ba:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 80078be:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 80078c2:	831a      	strh	r2, [r3, #24]
            d->c->rem = dm.addr;            // Copy resolved address
 80078c4:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 80078c8:	685a      	ldr	r2, [r3, #4]
 80078ca:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 80078ce:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 80078d2:	f102 0420 	add.w	r4, r2, #32
 80078d6:	f103 0508 	add.w	r5, r3, #8
 80078da:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80078dc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80078de:	e895 0003 	ldmia.w	r5, {r0, r1}
 80078e2:	e884 0003 	stmia.w	r4, {r0, r1}
            MG_DEBUG(
 80078e6:	4b4e      	ldr	r3, [pc, #312]	@ (8007a20 <dns_cb+0x2dc>)
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	2b02      	cmp	r3, #2
 80078ec:	dd16      	ble.n	800791c <dns_cb+0x1d8>
 80078ee:	4b4d      	ldr	r3, [pc, #308]	@ (8007a24 <dns_cb+0x2e0>)
 80078f0:	f240 122b 	movw	r2, #299	@ 0x12b
 80078f4:	494c      	ldr	r1, [pc, #304]	@ (8007a28 <dns_cb+0x2e4>)
 80078f6:	2003      	movs	r0, #3
 80078f8:	f005 fc58 	bl	800d1ac <mg_log_prefix>
 80078fc:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8007900:	685b      	ldr	r3, [r3, #4]
 8007902:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 8007904:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8007908:	685b      	ldr	r3, [r3, #4]
 800790a:	3320      	adds	r3, #32
 800790c:	f107 0210 	add.w	r2, r7, #16
 8007910:	3220      	adds	r2, #32
 8007912:	9300      	str	r3, [sp, #0]
 8007914:	4b46      	ldr	r3, [pc, #280]	@ (8007a30 <dns_cb+0x2ec>)
 8007916:	4847      	ldr	r0, [pc, #284]	@ (8007a34 <dns_cb+0x2f0>)
 8007918:	f005 fc98 	bl	800d24c <mg_log>
            mg_connect_resolved(d->c);
 800791c:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8007920:	685b      	ldr	r3, [r3, #4]
 8007922:	4618      	mov	r0, r3
 8007924:	f009 ffb6 	bl	8011894 <mg_connect_resolved>
 8007928:	e01d      	b.n	8007966 <dns_cb+0x222>
            mg_error(d->c, "%s DNS lookup failed", dm.name);
 800792a:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 800792e:	6858      	ldr	r0, [r3, #4]
 8007930:	f107 0310 	add.w	r3, r7, #16
 8007934:	3320      	adds	r3, #32
 8007936:	461a      	mov	r2, r3
 8007938:	493f      	ldr	r1, [pc, #252]	@ (8007a38 <dns_cb+0x2f4>)
 800793a:	f000 fa9b 	bl	8007e74 <mg_error>
 800793e:	e012      	b.n	8007966 <dns_cb+0x222>
          MG_ERROR(("%lu already resolved", d->c->id));
 8007940:	4b37      	ldr	r3, [pc, #220]	@ (8007a20 <dns_cb+0x2dc>)
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	2b00      	cmp	r3, #0
 8007946:	dd0e      	ble.n	8007966 <dns_cb+0x222>
 8007948:	4b36      	ldr	r3, [pc, #216]	@ (8007a24 <dns_cb+0x2e0>)
 800794a:	f44f 729c 	mov.w	r2, #312	@ 0x138
 800794e:	4936      	ldr	r1, [pc, #216]	@ (8007a28 <dns_cb+0x2e4>)
 8007950:	2001      	movs	r0, #1
 8007952:	f005 fc2b 	bl	800d1ac <mg_log_prefix>
 8007956:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 800795a:	685b      	ldr	r3, [r3, #4]
 800795c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800795e:	4619      	mov	r1, r3
 8007960:	4836      	ldr	r0, [pc, #216]	@ (8007a3c <dns_cb+0x2f8>)
 8007962:	f005 fc73 	bl	800d24c <mg_log>
        mg_dns_free(head, d);
 8007966:	f8d7 1144 	ldr.w	r1, [r7, #324]	@ 0x144
 800796a:	f8d7 013c 	ldr.w	r0, [r7, #316]	@ 0x13c
 800796e:	f7ff fc63 	bl	8007238 <mg_dns_free>
        resolved = 1;
 8007972:	2301      	movs	r3, #1
 8007974:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
 8007978:	e000      	b.n	800797c <dns_cb+0x238>
        if (dm.txnid != d->txnid) continue;
 800797a:	bf00      	nop
      for (d = *head; d != NULL; d = tmp) {
 800797c:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8007980:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144
 8007984:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8007988:	2b00      	cmp	r3, #0
 800798a:	f47f af72 	bne.w	8007872 <dns_cb+0x12e>
    if (!resolved) MG_ERROR(("stray DNS reply"));
 800798e:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 8007992:	2b00      	cmp	r3, #0
 8007994:	d10d      	bne.n	80079b2 <dns_cb+0x26e>
 8007996:	4b22      	ldr	r3, [pc, #136]	@ (8007a20 <dns_cb+0x2dc>)
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	2b00      	cmp	r3, #0
 800799c:	dd09      	ble.n	80079b2 <dns_cb+0x26e>
 800799e:	4b21      	ldr	r3, [pc, #132]	@ (8007a24 <dns_cb+0x2e0>)
 80079a0:	f44f 729f 	mov.w	r2, #318	@ 0x13e
 80079a4:	4920      	ldr	r1, [pc, #128]	@ (8007a28 <dns_cb+0x2e4>)
 80079a6:	2001      	movs	r0, #1
 80079a8:	f005 fc00 	bl	800d1ac <mg_log_prefix>
 80079ac:	4824      	ldr	r0, [pc, #144]	@ (8007a40 <dns_cb+0x2fc>)
 80079ae:	f005 fc4d 	bl	800d24c <mg_log>
    c->recv.len = 0;
 80079b2:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 80079b6:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	2200      	movs	r2, #0
 80079be:	649a      	str	r2, [r3, #72]	@ 0x48
}
 80079c0:	e026      	b.n	8007a10 <dns_cb+0x2cc>
  } else if (ev == MG_EV_CLOSE) {
 80079c2:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 80079c6:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	2b09      	cmp	r3, #9
 80079ce:	d11f      	bne.n	8007a10 <dns_cb+0x2cc>
    for (d = *head; d != NULL; d = tmp) {
 80079d0:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144
 80079da:	e015      	b.n	8007a08 <dns_cb+0x2c4>
      tmp = d->next;
 80079dc:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
      mg_error(d->c, "DNS error");
 80079e6:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 80079ea:	685b      	ldr	r3, [r3, #4]
 80079ec:	4915      	ldr	r1, [pc, #84]	@ (8007a44 <dns_cb+0x300>)
 80079ee:	4618      	mov	r0, r3
 80079f0:	f000 fa40 	bl	8007e74 <mg_error>
      mg_dns_free(head, d);
 80079f4:	f8d7 1144 	ldr.w	r1, [r7, #324]	@ 0x144
 80079f8:	f8d7 013c 	ldr.w	r0, [r7, #316]	@ 0x13c
 80079fc:	f7ff fc1c 	bl	8007238 <mg_dns_free>
    for (d = *head; d != NULL; d = tmp) {
 8007a00:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8007a04:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144
 8007a08:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8007a0c:	2b00      	cmp	r3, #0
 8007a0e:	d1e5      	bne.n	80079dc <dns_cb+0x298>
}
 8007a10:	bf00      	nop
 8007a12:	f507 77a4 	add.w	r7, r7, #328	@ 0x148
 8007a16:	46bd      	mov	sp, r7
 8007a18:	bdb0      	pop	{r4, r5, r7, pc}
 8007a1a:	bf00      	nop
 8007a1c:	08025184 	.word	0x08025184
 8007a20:	20000258 	.word	0x20000258
 8007a24:	080287cc 	.word	0x080287cc
 8007a28:	08025140 	.word	0x08025140
 8007a2c:	08025190 	.word	0x08025190
 8007a30:	08012415 	.word	0x08012415
 8007a34:	080251ac 	.word	0x080251ac
 8007a38:	080251bc 	.word	0x080251bc
 8007a3c:	080251d4 	.word	0x080251d4
 8007a40:	080251ec 	.word	0x080251ec
 8007a44:	080251fc 	.word	0x080251fc

08007a48 <mg_dns_send>:

static bool mg_dns_send(struct mg_connection *c, const struct mg_str *name,
                        uint16_t txnid, bool ipv6) {
 8007a48:	b590      	push	{r4, r7, lr}
 8007a4a:	b0cb      	sub	sp, #300	@ 0x12c
 8007a4c:	af00      	add	r7, sp, #0
 8007a4e:	f507 7494 	add.w	r4, r7, #296	@ 0x128
 8007a52:	f5a4 748e 	sub.w	r4, r4, #284	@ 0x11c
 8007a56:	6020      	str	r0, [r4, #0]
 8007a58:	f507 7094 	add.w	r0, r7, #296	@ 0x128
 8007a5c:	f5a0 7090 	sub.w	r0, r0, #288	@ 0x120
 8007a60:	6001      	str	r1, [r0, #0]
 8007a62:	4619      	mov	r1, r3
 8007a64:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8007a68:	f5a3 7391 	sub.w	r3, r3, #290	@ 0x122
 8007a6c:	801a      	strh	r2, [r3, #0]
 8007a6e:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8007a72:	f2a3 1323 	subw	r3, r3, #291	@ 0x123
 8007a76:	460a      	mov	r2, r1
 8007a78:	701a      	strb	r2, [r3, #0]
  struct {
    struct mg_dns_header header;
    uint8_t data[256];
  } pkt;
  size_t i, n;
  memset(&pkt, 0, sizeof(pkt));
 8007a7a:	f107 0314 	add.w	r3, r7, #20
 8007a7e:	f44f 7286 	mov.w	r2, #268	@ 0x10c
 8007a82:	2100      	movs	r1, #0
 8007a84:	4618      	mov	r0, r3
 8007a86:	f01c fd01 	bl	802448c <memset>
  pkt.header.txnid = mg_htons(txnid);
 8007a8a:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8007a8e:	f5a3 7391 	sub.w	r3, r3, #290	@ 0x122
 8007a92:	881b      	ldrh	r3, [r3, #0]
 8007a94:	4618      	mov	r0, r3
 8007a96:	f019 fb44 	bl	8021122 <mg_ntohs>
 8007a9a:	4603      	mov	r3, r0
 8007a9c:	461a      	mov	r2, r3
 8007a9e:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8007aa2:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8007aa6:	801a      	strh	r2, [r3, #0]
  pkt.header.flags = mg_htons(0x100);
 8007aa8:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8007aac:	f019 fb39 	bl	8021122 <mg_ntohs>
 8007ab0:	4603      	mov	r3, r0
 8007ab2:	461a      	mov	r2, r3
 8007ab4:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8007ab8:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8007abc:	805a      	strh	r2, [r3, #2]
  pkt.header.num_questions = mg_htons(1);
 8007abe:	2001      	movs	r0, #1
 8007ac0:	f019 fb2f 	bl	8021122 <mg_ntohs>
 8007ac4:	4603      	mov	r3, r0
 8007ac6:	461a      	mov	r2, r3
 8007ac8:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8007acc:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8007ad0:	809a      	strh	r2, [r3, #4]
  for (i = n = 0; i < sizeof(pkt.data) - 5; i++) {
 8007ad2:	2300      	movs	r3, #0
 8007ad4:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 8007ad8:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8007adc:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 8007ae0:	e054      	b.n	8007b8c <mg_dns_send+0x144>
    if (name->buf[i] == '.' || i >= name->len) {
 8007ae2:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8007ae6:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	681a      	ldr	r2, [r3, #0]
 8007aee:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8007af2:	4413      	add	r3, r2
 8007af4:	781b      	ldrb	r3, [r3, #0]
 8007af6:	2b2e      	cmp	r3, #46	@ 0x2e
 8007af8:	d009      	beq.n	8007b0e <mg_dns_send+0xc6>
 8007afa:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8007afe:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	685b      	ldr	r3, [r3, #4]
 8007b06:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 8007b0a:	429a      	cmp	r2, r3
 8007b0c:	d32f      	bcc.n	8007b6e <mg_dns_send+0x126>
      pkt.data[n] = (uint8_t) (i - n);
 8007b0e:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8007b12:	b2da      	uxtb	r2, r3
 8007b14:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8007b18:	b2db      	uxtb	r3, r3
 8007b1a:	1ad3      	subs	r3, r2, r3
 8007b1c:	b2d9      	uxtb	r1, r3
 8007b1e:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8007b22:	f5a3 728a 	sub.w	r2, r3, #276	@ 0x114
 8007b26:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8007b2a:	4413      	add	r3, r2
 8007b2c:	330c      	adds	r3, #12
 8007b2e:	460a      	mov	r2, r1
 8007b30:	701a      	strb	r2, [r3, #0]
      memcpy(&pkt.data[n + 1], name->buf + n, i - n);
 8007b32:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8007b36:	3301      	adds	r3, #1
 8007b38:	f107 0214 	add.w	r2, r7, #20
 8007b3c:	3308      	adds	r3, #8
 8007b3e:	4413      	add	r3, r2
 8007b40:	1d18      	adds	r0, r3, #4
 8007b42:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8007b46:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	681a      	ldr	r2, [r3, #0]
 8007b4e:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8007b52:	18d1      	adds	r1, r2, r3
 8007b54:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 8007b58:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8007b5c:	1ad3      	subs	r3, r2, r3
 8007b5e:	461a      	mov	r2, r3
 8007b60:	f01c fe11 	bl	8024786 <memcpy>
      n = i + 1;
 8007b64:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8007b68:	3301      	adds	r3, #1
 8007b6a:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
    }
    if (i >= name->len) break;
 8007b6e:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8007b72:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	685b      	ldr	r3, [r3, #4]
 8007b7a:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 8007b7e:	429a      	cmp	r2, r3
 8007b80:	d209      	bcs.n	8007b96 <mg_dns_send+0x14e>
  for (i = n = 0; i < sizeof(pkt.data) - 5; i++) {
 8007b82:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8007b86:	3301      	adds	r3, #1
 8007b88:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 8007b8c:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8007b90:	2bfa      	cmp	r3, #250	@ 0xfa
 8007b92:	d9a6      	bls.n	8007ae2 <mg_dns_send+0x9a>
 8007b94:	e000      	b.n	8007b98 <mg_dns_send+0x150>
    if (i >= name->len) break;
 8007b96:	bf00      	nop
  }
  memcpy(&pkt.data[n], "\x00\x00\x01\x00\x01", 5);  // A query
 8007b98:	f107 0214 	add.w	r2, r7, #20
 8007b9c:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8007ba0:	3308      	adds	r3, #8
 8007ba2:	4413      	add	r3, r2
 8007ba4:	3304      	adds	r3, #4
 8007ba6:	2205      	movs	r2, #5
 8007ba8:	4916      	ldr	r1, [pc, #88]	@ (8007c04 <mg_dns_send+0x1bc>)
 8007baa:	4618      	mov	r0, r3
 8007bac:	f01c fdeb 	bl	8024786 <memcpy>
  n += 5;
 8007bb0:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8007bb4:	3305      	adds	r3, #5
 8007bb6:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  if (ipv6) pkt.data[n - 3] = 0x1c;  // AAAA query
 8007bba:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8007bbe:	f2a3 1323 	subw	r3, r3, #291	@ 0x123
 8007bc2:	781b      	ldrb	r3, [r3, #0]
 8007bc4:	2b00      	cmp	r3, #0
 8007bc6:	d009      	beq.n	8007bdc <mg_dns_send+0x194>
 8007bc8:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8007bcc:	3b03      	subs	r3, #3
 8007bce:	f507 7294 	add.w	r2, r7, #296	@ 0x128
 8007bd2:	f5a2 728a 	sub.w	r2, r2, #276	@ 0x114
 8007bd6:	4413      	add	r3, r2
 8007bd8:	221c      	movs	r2, #28
 8007bda:	731a      	strb	r2, [r3, #12]
  // memcpy(&pkt.data[n], "\xc0\x0c\x00\x1c\x00\x01", 6);  // AAAA query
  // n += 6;
  return mg_send(c, &pkt, sizeof(pkt.header) + n);
 8007bdc:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8007be0:	f103 020c 	add.w	r2, r3, #12
 8007be4:	f107 0114 	add.w	r1, r7, #20
 8007be8:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8007bec:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8007bf0:	6818      	ldr	r0, [r3, #0]
 8007bf2:	f00a f985 	bl	8011f00 <mg_send>
 8007bf6:	4603      	mov	r3, r0
}
 8007bf8:	4618      	mov	r0, r3
 8007bfa:	f507 7796 	add.w	r7, r7, #300	@ 0x12c
 8007bfe:	46bd      	mov	sp, r7
 8007c00:	bd90      	pop	{r4, r7, pc}
 8007c02:	bf00      	nop
 8007c04:	08025208 	.word	0x08025208

08007c08 <mg_dnsc_init>:

bool mg_dnsc_init(struct mg_mgr *mgr, struct mg_dns *dnsc);
bool mg_dnsc_init(struct mg_mgr *mgr, struct mg_dns *dnsc) {
 8007c08:	b580      	push	{r7, lr}
 8007c0a:	b082      	sub	sp, #8
 8007c0c:	af00      	add	r7, sp, #0
 8007c0e:	6078      	str	r0, [r7, #4]
 8007c10:	6039      	str	r1, [r7, #0]
  if (dnsc->url == NULL) {
 8007c12:	683b      	ldr	r3, [r7, #0]
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	2b00      	cmp	r3, #0
 8007c18:	d105      	bne.n	8007c26 <mg_dnsc_init+0x1e>
    mg_error(0, "DNS server URL is NULL. Call mg_mgr_init()");
 8007c1a:	4912      	ldr	r1, [pc, #72]	@ (8007c64 <mg_dnsc_init+0x5c>)
 8007c1c:	2000      	movs	r0, #0
 8007c1e:	f000 f929 	bl	8007e74 <mg_error>
    return false;
 8007c22:	2300      	movs	r3, #0
 8007c24:	e019      	b.n	8007c5a <mg_dnsc_init+0x52>
  }
  if (dnsc->c == NULL) {
 8007c26:	683b      	ldr	r3, [r7, #0]
 8007c28:	685b      	ldr	r3, [r3, #4]
 8007c2a:	2b00      	cmp	r3, #0
 8007c2c:	d114      	bne.n	8007c58 <mg_dnsc_init+0x50>
    dnsc->c = mg_connect(mgr, dnsc->url, NULL, NULL);
 8007c2e:	683b      	ldr	r3, [r7, #0]
 8007c30:	6819      	ldr	r1, [r3, #0]
 8007c32:	2300      	movs	r3, #0
 8007c34:	2200      	movs	r2, #0
 8007c36:	6878      	ldr	r0, [r7, #4]
 8007c38:	f005 ffe0 	bl	800dbfc <mg_connect>
 8007c3c:	4602      	mov	r2, r0
 8007c3e:	683b      	ldr	r3, [r7, #0]
 8007c40:	605a      	str	r2, [r3, #4]
    if (dnsc->c == NULL) return false;
 8007c42:	683b      	ldr	r3, [r7, #0]
 8007c44:	685b      	ldr	r3, [r3, #4]
 8007c46:	2b00      	cmp	r3, #0
 8007c48:	d101      	bne.n	8007c4e <mg_dnsc_init+0x46>
 8007c4a:	2300      	movs	r3, #0
 8007c4c:	e005      	b.n	8007c5a <mg_dnsc_init+0x52>
    dnsc->c->pfn = dns_cb;
 8007c4e:	683b      	ldr	r3, [r7, #0]
 8007c50:	685b      	ldr	r3, [r3, #4]
 8007c52:	4a05      	ldr	r2, [pc, #20]	@ (8007c68 <mg_dnsc_init+0x60>)
 8007c54:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  }
  return true;
 8007c58:	2301      	movs	r3, #1
}
 8007c5a:	4618      	mov	r0, r3
 8007c5c:	3708      	adds	r7, #8
 8007c5e:	46bd      	mov	sp, r7
 8007c60:	bd80      	pop	{r7, pc}
 8007c62:	bf00      	nop
 8007c64:	08025210 	.word	0x08025210
 8007c68:	08007745 	.word	0x08007745

08007c6c <mg_sendnsreq>:

static void mg_sendnsreq(struct mg_connection *c, struct mg_str *name, int ms,
                         struct mg_dns *dnsc, bool ipv6) {
 8007c6c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8007c70:	b088      	sub	sp, #32
 8007c72:	af02      	add	r7, sp, #8
 8007c74:	60f8      	str	r0, [r7, #12]
 8007c76:	60b9      	str	r1, [r7, #8]
 8007c78:	607a      	str	r2, [r7, #4]
 8007c7a:	603b      	str	r3, [r7, #0]
  struct dns_data *d = NULL;
 8007c7c:	2300      	movs	r3, #0
 8007c7e:	617b      	str	r3, [r7, #20]
  if (!mg_dnsc_init(c->mgr, dnsc)) {
 8007c80:	68fb      	ldr	r3, [r7, #12]
 8007c82:	685b      	ldr	r3, [r3, #4]
 8007c84:	6839      	ldr	r1, [r7, #0]
 8007c86:	4618      	mov	r0, r3
 8007c88:	f7ff ffbe 	bl	8007c08 <mg_dnsc_init>
 8007c8c:	4603      	mov	r3, r0
 8007c8e:	f083 0301 	eor.w	r3, r3, #1
 8007c92:	b2db      	uxtb	r3, r3
 8007c94:	2b00      	cmp	r3, #0
 8007c96:	d004      	beq.n	8007ca2 <mg_sendnsreq+0x36>
    mg_error(c, "resolver");
 8007c98:	493c      	ldr	r1, [pc, #240]	@ (8007d8c <mg_sendnsreq+0x120>)
 8007c9a:	68f8      	ldr	r0, [r7, #12]
 8007c9c:	f000 f8ea 	bl	8007e74 <mg_error>
                name->buf, dnsc->url, d->txnid));
    if (!mg_dns_send(dnsc->c, name, d->txnid, ipv6)) {
      mg_error(dnsc->c, "DNS send");
    }
  }
}
 8007ca0:	e06f      	b.n	8007d82 <mg_sendnsreq+0x116>
  } else if ((d = (struct dns_data *) mg_calloc(1, sizeof(*d))) == NULL) {
 8007ca2:	2118      	movs	r1, #24
 8007ca4:	2001      	movs	r0, #1
 8007ca6:	f7ff f8b4 	bl	8006e12 <mg_calloc>
 8007caa:	6178      	str	r0, [r7, #20]
 8007cac:	697b      	ldr	r3, [r7, #20]
 8007cae:	2b00      	cmp	r3, #0
 8007cb0:	d104      	bne.n	8007cbc <mg_sendnsreq+0x50>
    mg_error(c, "resolve OOM");
 8007cb2:	4937      	ldr	r1, [pc, #220]	@ (8007d90 <mg_sendnsreq+0x124>)
 8007cb4:	68f8      	ldr	r0, [r7, #12]
 8007cb6:	f000 f8dd 	bl	8007e74 <mg_error>
}
 8007cba:	e062      	b.n	8007d82 <mg_sendnsreq+0x116>
    struct dns_data *reqs = (struct dns_data *) c->mgr->active_dns_requests;
 8007cbc:	68fb      	ldr	r3, [r7, #12]
 8007cbe:	685b      	ldr	r3, [r3, #4]
 8007cc0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007cc2:	613b      	str	r3, [r7, #16]
    d->txnid = reqs ? (uint16_t) (reqs->txnid + 1) : 1;
 8007cc4:	693b      	ldr	r3, [r7, #16]
 8007cc6:	2b00      	cmp	r3, #0
 8007cc8:	d004      	beq.n	8007cd4 <mg_sendnsreq+0x68>
 8007cca:	693b      	ldr	r3, [r7, #16]
 8007ccc:	8a1b      	ldrh	r3, [r3, #16]
 8007cce:	3301      	adds	r3, #1
 8007cd0:	b29a      	uxth	r2, r3
 8007cd2:	e000      	b.n	8007cd6 <mg_sendnsreq+0x6a>
 8007cd4:	2201      	movs	r2, #1
 8007cd6:	697b      	ldr	r3, [r7, #20]
 8007cd8:	821a      	strh	r2, [r3, #16]
    d->next = (struct dns_data *) c->mgr->active_dns_requests;
 8007cda:	68fb      	ldr	r3, [r7, #12]
 8007cdc:	685b      	ldr	r3, [r3, #4]
 8007cde:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007ce0:	697b      	ldr	r3, [r7, #20]
 8007ce2:	601a      	str	r2, [r3, #0]
    c->mgr->active_dns_requests = d;
 8007ce4:	68fb      	ldr	r3, [r7, #12]
 8007ce6:	685b      	ldr	r3, [r3, #4]
 8007ce8:	697a      	ldr	r2, [r7, #20]
 8007cea:	62da      	str	r2, [r3, #44]	@ 0x2c
    d->expire = mg_millis() + (uint64_t) ms;
 8007cec:	f019 fa0c 	bl	8021108 <mg_millis>
 8007cf0:	4602      	mov	r2, r0
 8007cf2:	460b      	mov	r3, r1
 8007cf4:	6879      	ldr	r1, [r7, #4]
 8007cf6:	17c8      	asrs	r0, r1, #31
 8007cf8:	460c      	mov	r4, r1
 8007cfa:	4605      	mov	r5, r0
 8007cfc:	eb12 0804 	adds.w	r8, r2, r4
 8007d00:	eb43 0905 	adc.w	r9, r3, r5
 8007d04:	697b      	ldr	r3, [r7, #20]
 8007d06:	e9c3 8902 	strd	r8, r9, [r3, #8]
    d->c = c;
 8007d0a:	697b      	ldr	r3, [r7, #20]
 8007d0c:	68fa      	ldr	r2, [r7, #12]
 8007d0e:	605a      	str	r2, [r3, #4]
    c->is_resolving = 1;
 8007d10:	68fa      	ldr	r2, [r7, #12]
 8007d12:	f892 30b4 	ldrb.w	r3, [r2, #180]	@ 0xb4
 8007d16:	f043 0308 	orr.w	r3, r3, #8
 8007d1a:	f882 30b4 	strb.w	r3, [r2, #180]	@ 0xb4
    MG_VERBOSE(("%lu resolving %.*s @ %s, txnid %hu", c->id, (int) name->len,
 8007d1e:	4b1d      	ldr	r3, [pc, #116]	@ (8007d94 <mg_sendnsreq+0x128>)
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	2b03      	cmp	r3, #3
 8007d24:	dd18      	ble.n	8007d58 <mg_sendnsreq+0xec>
 8007d26:	4b1c      	ldr	r3, [pc, #112]	@ (8007d98 <mg_sendnsreq+0x12c>)
 8007d28:	f240 1281 	movw	r2, #385	@ 0x181
 8007d2c:	491b      	ldr	r1, [pc, #108]	@ (8007d9c <mg_sendnsreq+0x130>)
 8007d2e:	2004      	movs	r0, #4
 8007d30:	f005 fa3c 	bl	800d1ac <mg_log_prefix>
 8007d34:	68fb      	ldr	r3, [r7, #12]
 8007d36:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 8007d38:	68bb      	ldr	r3, [r7, #8]
 8007d3a:	685b      	ldr	r3, [r3, #4]
 8007d3c:	461c      	mov	r4, r3
 8007d3e:	68bb      	ldr	r3, [r7, #8]
 8007d40:	6818      	ldr	r0, [r3, #0]
 8007d42:	683b      	ldr	r3, [r7, #0]
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	697a      	ldr	r2, [r7, #20]
 8007d48:	8a12      	ldrh	r2, [r2, #16]
 8007d4a:	9201      	str	r2, [sp, #4]
 8007d4c:	9300      	str	r3, [sp, #0]
 8007d4e:	4603      	mov	r3, r0
 8007d50:	4622      	mov	r2, r4
 8007d52:	4813      	ldr	r0, [pc, #76]	@ (8007da0 <mg_sendnsreq+0x134>)
 8007d54:	f005 fa7a 	bl	800d24c <mg_log>
    if (!mg_dns_send(dnsc->c, name, d->txnid, ipv6)) {
 8007d58:	683b      	ldr	r3, [r7, #0]
 8007d5a:	6858      	ldr	r0, [r3, #4]
 8007d5c:	697b      	ldr	r3, [r7, #20]
 8007d5e:	8a1a      	ldrh	r2, [r3, #16]
 8007d60:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8007d64:	68b9      	ldr	r1, [r7, #8]
 8007d66:	f7ff fe6f 	bl	8007a48 <mg_dns_send>
 8007d6a:	4603      	mov	r3, r0
 8007d6c:	f083 0301 	eor.w	r3, r3, #1
 8007d70:	b2db      	uxtb	r3, r3
 8007d72:	2b00      	cmp	r3, #0
 8007d74:	d005      	beq.n	8007d82 <mg_sendnsreq+0x116>
      mg_error(dnsc->c, "DNS send");
 8007d76:	683b      	ldr	r3, [r7, #0]
 8007d78:	685b      	ldr	r3, [r3, #4]
 8007d7a:	490a      	ldr	r1, [pc, #40]	@ (8007da4 <mg_sendnsreq+0x138>)
 8007d7c:	4618      	mov	r0, r3
 8007d7e:	f000 f879 	bl	8007e74 <mg_error>
}
 8007d82:	bf00      	nop
 8007d84:	3718      	adds	r7, #24
 8007d86:	46bd      	mov	sp, r7
 8007d88:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8007d8c:	0802523c 	.word	0x0802523c
 8007d90:	08025248 	.word	0x08025248
 8007d94:	20000258 	.word	0x20000258
 8007d98:	080287d4 	.word	0x080287d4
 8007d9c:	08025140 	.word	0x08025140
 8007da0:	08025254 	.word	0x08025254
 8007da4:	08025278 	.word	0x08025278

08007da8 <mg_resolve>:

void mg_resolve(struct mg_connection *c, const char *url) {
 8007da8:	b580      	push	{r7, lr}
 8007daa:	b088      	sub	sp, #32
 8007dac:	af02      	add	r7, sp, #8
 8007dae:	6078      	str	r0, [r7, #4]
 8007db0:	6039      	str	r1, [r7, #0]
  struct mg_str host = mg_url_host(url);
 8007db2:	f107 030c 	add.w	r3, r7, #12
 8007db6:	6839      	ldr	r1, [r7, #0]
 8007db8:	4618      	mov	r0, r3
 8007dba:	f019 f874 	bl	8020ea6 <mg_url_host>
  c->rem.port = mg_htons(mg_url_port(url));
 8007dbe:	6838      	ldr	r0, [r7, #0]
 8007dc0:	f019 f8a4 	bl	8020f0c <mg_url_port>
 8007dc4:	4603      	mov	r3, r0
 8007dc6:	4618      	mov	r0, r3
 8007dc8:	f019 f9ab 	bl	8021122 <mg_ntohs>
 8007dcc:	4603      	mov	r3, r0
 8007dce:	461a      	mov	r2, r3
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	861a      	strh	r2, [r3, #48]	@ 0x30
  if (mg_aton(host, &c->rem)) {
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	3320      	adds	r3, #32
 8007dd8:	461a      	mov	r2, r3
 8007dda:	f107 030c 	add.w	r3, r7, #12
 8007dde:	e893 0003 	ldmia.w	r3, {r0, r1}
 8007de2:	f005 fd92 	bl	800d90a <mg_aton>
 8007de6:	4603      	mov	r3, r0
 8007de8:	2b00      	cmp	r3, #0
 8007dea:	d003      	beq.n	8007df4 <mg_resolve+0x4c>
    // host is an IP address, do not fire name resolution
    mg_connect_resolved(c);
 8007dec:	6878      	ldr	r0, [r7, #4]
 8007dee:	f009 fd51 	bl	8011894 <mg_connect_resolved>
  } else {
    // host is not an IP, send DNS resolution request
    struct mg_dns *dns = c->mgr->use_dns6 ? &c->mgr->dns6 : &c->mgr->dns4;
    mg_sendnsreq(c, &host, c->mgr->dnstimeout, dns, c->mgr->use_dns6);
  }
}
 8007df2:	e019      	b.n	8007e28 <mg_resolve+0x80>
    struct mg_dns *dns = c->mgr->use_dns6 ? &c->mgr->dns6 : &c->mgr->dns4;
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	685b      	ldr	r3, [r3, #4]
 8007df8:	7e1b      	ldrb	r3, [r3, #24]
 8007dfa:	2b00      	cmp	r3, #0
 8007dfc:	d003      	beq.n	8007e06 <mg_resolve+0x5e>
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	685b      	ldr	r3, [r3, #4]
 8007e02:	330c      	adds	r3, #12
 8007e04:	e002      	b.n	8007e0c <mg_resolve+0x64>
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	685b      	ldr	r3, [r3, #4]
 8007e0a:	3304      	adds	r3, #4
 8007e0c:	617b      	str	r3, [r7, #20]
    mg_sendnsreq(c, &host, c->mgr->dnstimeout, dns, c->mgr->use_dns6);
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	685b      	ldr	r3, [r3, #4]
 8007e12:	695a      	ldr	r2, [r3, #20]
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	685b      	ldr	r3, [r3, #4]
 8007e18:	7e1b      	ldrb	r3, [r3, #24]
 8007e1a:	f107 010c 	add.w	r1, r7, #12
 8007e1e:	9300      	str	r3, [sp, #0]
 8007e20:	697b      	ldr	r3, [r7, #20]
 8007e22:	6878      	ldr	r0, [r7, #4]
 8007e24:	f7ff ff22 	bl	8007c6c <mg_sendnsreq>
}
 8007e28:	bf00      	nop
 8007e2a:	3718      	adds	r7, #24
 8007e2c:	46bd      	mov	sp, r7
 8007e2e:	bd80      	pop	{r7, pc}

08007e30 <mg_call>:





void mg_call(struct mg_connection *c, int ev, void *ev_data) {
 8007e30:	b580      	push	{r7, lr}
 8007e32:	b084      	sub	sp, #16
 8007e34:	af00      	add	r7, sp, #0
 8007e36:	60f8      	str	r0, [r7, #12]
 8007e38:	60b9      	str	r1, [r7, #8]
 8007e3a:	607a      	str	r2, [r7, #4]
  if (ev != MG_EV_POLL && ev < (int) (sizeof(names) / sizeof(names[0]))) {
    MG_PROF_ADD(c, names[ev]);
  }
#endif
  // Fire protocol handler first, user handler second. See #2559
  if (c->pfn != NULL) c->pfn(c, ev, ev_data);
 8007e3c:	68fb      	ldr	r3, [r7, #12]
 8007e3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007e42:	2b00      	cmp	r3, #0
 8007e44:	d006      	beq.n	8007e54 <mg_call+0x24>
 8007e46:	68fb      	ldr	r3, [r7, #12]
 8007e48:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007e4c:	687a      	ldr	r2, [r7, #4]
 8007e4e:	68b9      	ldr	r1, [r7, #8]
 8007e50:	68f8      	ldr	r0, [r7, #12]
 8007e52:	4798      	blx	r3
  if (c->fn != NULL) c->fn(c, ev, ev_data);
 8007e54:	68fb      	ldr	r3, [r7, #12]
 8007e56:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007e5a:	2b00      	cmp	r3, #0
 8007e5c:	d006      	beq.n	8007e6c <mg_call+0x3c>
 8007e5e:	68fb      	ldr	r3, [r7, #12]
 8007e60:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007e64:	687a      	ldr	r2, [r7, #4]
 8007e66:	68b9      	ldr	r1, [r7, #8]
 8007e68:	68f8      	ldr	r0, [r7, #12]
 8007e6a:	4798      	blx	r3
}
 8007e6c:	bf00      	nop
 8007e6e:	3710      	adds	r7, #16
 8007e70:	46bd      	mov	sp, r7
 8007e72:	bd80      	pop	{r7, pc}

08007e74 <mg_error>:

void mg_error(struct mg_connection *c, const char *fmt, ...) {
 8007e74:	b40e      	push	{r1, r2, r3}
 8007e76:	b580      	push	{r7, lr}
 8007e78:	b095      	sub	sp, #84	@ 0x54
 8007e7a:	af00      	add	r7, sp, #0
 8007e7c:	6078      	str	r0, [r7, #4]
  char buf[64];
  va_list ap;
  va_start(ap, fmt);
 8007e7e:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8007e82:	60fb      	str	r3, [r7, #12]
  mg_vsnprintf(buf, sizeof(buf), fmt, &ap);
 8007e84:	f107 030c 	add.w	r3, r7, #12
 8007e88:	f107 0010 	add.w	r0, r7, #16
 8007e8c:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8007e8e:	2140      	movs	r1, #64	@ 0x40
 8007e90:	f00a f98e 	bl	80121b0 <mg_vsnprintf>
  va_end(ap);
  MG_ERROR(("%lu %ld %s", c->id, c->fd, buf));
 8007e94:	4b14      	ldr	r3, [pc, #80]	@ (8007ee8 <mg_error+0x74>)
 8007e96:	681b      	ldr	r3, [r3, #0]
 8007e98:	2b00      	cmp	r3, #0
 8007e9a:	dd0f      	ble.n	8007ebc <mg_error+0x48>
 8007e9c:	4b13      	ldr	r3, [pc, #76]	@ (8007eec <mg_error+0x78>)
 8007e9e:	f44f 72fe 	mov.w	r2, #508	@ 0x1fc
 8007ea2:	4913      	ldr	r1, [pc, #76]	@ (8007ef0 <mg_error+0x7c>)
 8007ea4:	2001      	movs	r0, #1
 8007ea6:	f005 f981 	bl	800d1ac <mg_log_prefix>
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007eb2:	f107 0310 	add.w	r3, r7, #16
 8007eb6:	480f      	ldr	r0, [pc, #60]	@ (8007ef4 <mg_error+0x80>)
 8007eb8:	f005 f9c8 	bl	800d24c <mg_log>
  c->is_closing = 1;             // Set is_closing before sending MG_EV_CALL
 8007ebc:	687a      	ldr	r2, [r7, #4]
 8007ebe:	f892 30b5 	ldrb.w	r3, [r2, #181]	@ 0xb5
 8007ec2:	f043 0320 	orr.w	r3, r3, #32
 8007ec6:	f882 30b5 	strb.w	r3, [r2, #181]	@ 0xb5
  mg_call(c, MG_EV_ERROR, buf);  // Let user handler override it
 8007eca:	f107 0310 	add.w	r3, r7, #16
 8007ece:	461a      	mov	r2, r3
 8007ed0:	2100      	movs	r1, #0
 8007ed2:	6878      	ldr	r0, [r7, #4]
 8007ed4:	f7ff ffac 	bl	8007e30 <mg_call>
}
 8007ed8:	bf00      	nop
 8007eda:	3754      	adds	r7, #84	@ 0x54
 8007edc:	46bd      	mov	sp, r7
 8007ede:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007ee2:	b003      	add	sp, #12
 8007ee4:	4770      	bx	lr
 8007ee6:	bf00      	nop
 8007ee8:	20000258 	.word	0x20000258
 8007eec:	080287e4 	.word	0x080287e4
 8007ef0:	08025140 	.word	0x08025140
 8007ef4:	080252f0 	.word	0x080252f0

08007ef8 <is_digit>:
#endif




static bool is_digit(int c) {
 8007ef8:	b480      	push	{r7}
 8007efa:	b083      	sub	sp, #12
 8007efc:	af00      	add	r7, sp, #0
 8007efe:	6078      	str	r0, [r7, #4]
  return c >= '0' && c <= '9';
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	2b2f      	cmp	r3, #47	@ 0x2f
 8007f04:	dd04      	ble.n	8007f10 <is_digit+0x18>
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	2b39      	cmp	r3, #57	@ 0x39
 8007f0a:	dc01      	bgt.n	8007f10 <is_digit+0x18>
 8007f0c:	2301      	movs	r3, #1
 8007f0e:	e000      	b.n	8007f12 <is_digit+0x1a>
 8007f10:	2300      	movs	r3, #0
 8007f12:	f003 0301 	and.w	r3, r3, #1
 8007f16:	b2db      	uxtb	r3, r3
}
 8007f18:	4618      	mov	r0, r3
 8007f1a:	370c      	adds	r7, #12
 8007f1c:	46bd      	mov	sp, r7
 8007f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f22:	4770      	bx	lr

08007f24 <addexp>:

static int addexp(char *buf, int e, int sign) {
 8007f24:	b480      	push	{r7}
 8007f26:	b087      	sub	sp, #28
 8007f28:	af00      	add	r7, sp, #0
 8007f2a:	60f8      	str	r0, [r7, #12]
 8007f2c:	60b9      	str	r1, [r7, #8]
 8007f2e:	607a      	str	r2, [r7, #4]
  int n = 0;
 8007f30:	2300      	movs	r3, #0
 8007f32:	617b      	str	r3, [r7, #20]
  buf[n++] = 'e';
 8007f34:	697b      	ldr	r3, [r7, #20]
 8007f36:	1c5a      	adds	r2, r3, #1
 8007f38:	617a      	str	r2, [r7, #20]
 8007f3a:	461a      	mov	r2, r3
 8007f3c:	68fb      	ldr	r3, [r7, #12]
 8007f3e:	4413      	add	r3, r2
 8007f40:	2265      	movs	r2, #101	@ 0x65
 8007f42:	701a      	strb	r2, [r3, #0]
  buf[n++] = (char) sign;
 8007f44:	697b      	ldr	r3, [r7, #20]
 8007f46:	1c5a      	adds	r2, r3, #1
 8007f48:	617a      	str	r2, [r7, #20]
 8007f4a:	461a      	mov	r2, r3
 8007f4c:	68fb      	ldr	r3, [r7, #12]
 8007f4e:	4413      	add	r3, r2
 8007f50:	687a      	ldr	r2, [r7, #4]
 8007f52:	b2d2      	uxtb	r2, r2
 8007f54:	701a      	strb	r2, [r3, #0]
  if (e > 400) return 0;
 8007f56:	68bb      	ldr	r3, [r7, #8]
 8007f58:	f5b3 7fc8 	cmp.w	r3, #400	@ 0x190
 8007f5c:	dd01      	ble.n	8007f62 <addexp+0x3e>
 8007f5e:	2300      	movs	r3, #0
 8007f60:	e057      	b.n	8008012 <addexp+0xee>
  if (e < 10) buf[n++] = '0';
 8007f62:	68bb      	ldr	r3, [r7, #8]
 8007f64:	2b09      	cmp	r3, #9
 8007f66:	dc07      	bgt.n	8007f78 <addexp+0x54>
 8007f68:	697b      	ldr	r3, [r7, #20]
 8007f6a:	1c5a      	adds	r2, r3, #1
 8007f6c:	617a      	str	r2, [r7, #20]
 8007f6e:	461a      	mov	r2, r3
 8007f70:	68fb      	ldr	r3, [r7, #12]
 8007f72:	4413      	add	r3, r2
 8007f74:	2230      	movs	r2, #48	@ 0x30
 8007f76:	701a      	strb	r2, [r3, #0]
  if (e >= 100) buf[n++] = (char) (e / 100 + '0'), e -= 100 * (e / 100);
 8007f78:	68bb      	ldr	r3, [r7, #8]
 8007f7a:	2b63      	cmp	r3, #99	@ 0x63
 8007f7c:	dd1c      	ble.n	8007fb8 <addexp+0x94>
 8007f7e:	68bb      	ldr	r3, [r7, #8]
 8007f80:	4a27      	ldr	r2, [pc, #156]	@ (8008020 <addexp+0xfc>)
 8007f82:	fb82 1203 	smull	r1, r2, r2, r3
 8007f86:	1152      	asrs	r2, r2, #5
 8007f88:	17db      	asrs	r3, r3, #31
 8007f8a:	1ad3      	subs	r3, r2, r3
 8007f8c:	b2da      	uxtb	r2, r3
 8007f8e:	697b      	ldr	r3, [r7, #20]
 8007f90:	1c59      	adds	r1, r3, #1
 8007f92:	6179      	str	r1, [r7, #20]
 8007f94:	4619      	mov	r1, r3
 8007f96:	68fb      	ldr	r3, [r7, #12]
 8007f98:	440b      	add	r3, r1
 8007f9a:	3230      	adds	r2, #48	@ 0x30
 8007f9c:	b2d2      	uxtb	r2, r2
 8007f9e:	701a      	strb	r2, [r3, #0]
 8007fa0:	68bb      	ldr	r3, [r7, #8]
 8007fa2:	4a1f      	ldr	r2, [pc, #124]	@ (8008020 <addexp+0xfc>)
 8007fa4:	fb82 1203 	smull	r1, r2, r2, r3
 8007fa8:	1151      	asrs	r1, r2, #5
 8007faa:	17da      	asrs	r2, r3, #31
 8007fac:	1a8a      	subs	r2, r1, r2
 8007fae:	2164      	movs	r1, #100	@ 0x64
 8007fb0:	fb01 f202 	mul.w	r2, r1, r2
 8007fb4:	1a9b      	subs	r3, r3, r2
 8007fb6:	60bb      	str	r3, [r7, #8]
  if (e >= 10) buf[n++] = (char) (e / 10 + '0'), e -= 10 * (e / 10);
 8007fb8:	68bb      	ldr	r3, [r7, #8]
 8007fba:	2b09      	cmp	r3, #9
 8007fbc:	dd1d      	ble.n	8007ffa <addexp+0xd6>
 8007fbe:	68bb      	ldr	r3, [r7, #8]
 8007fc0:	4a18      	ldr	r2, [pc, #96]	@ (8008024 <addexp+0x100>)
 8007fc2:	fb82 1203 	smull	r1, r2, r2, r3
 8007fc6:	1092      	asrs	r2, r2, #2
 8007fc8:	17db      	asrs	r3, r3, #31
 8007fca:	1ad3      	subs	r3, r2, r3
 8007fcc:	b2da      	uxtb	r2, r3
 8007fce:	697b      	ldr	r3, [r7, #20]
 8007fd0:	1c59      	adds	r1, r3, #1
 8007fd2:	6179      	str	r1, [r7, #20]
 8007fd4:	4619      	mov	r1, r3
 8007fd6:	68fb      	ldr	r3, [r7, #12]
 8007fd8:	440b      	add	r3, r1
 8007fda:	3230      	adds	r2, #48	@ 0x30
 8007fdc:	b2d2      	uxtb	r2, r2
 8007fde:	701a      	strb	r2, [r3, #0]
 8007fe0:	68ba      	ldr	r2, [r7, #8]
 8007fe2:	4b10      	ldr	r3, [pc, #64]	@ (8008024 <addexp+0x100>)
 8007fe4:	fb83 1302 	smull	r1, r3, r3, r2
 8007fe8:	1099      	asrs	r1, r3, #2
 8007fea:	17d3      	asrs	r3, r2, #31
 8007fec:	1ac9      	subs	r1, r1, r3
 8007fee:	460b      	mov	r3, r1
 8007ff0:	009b      	lsls	r3, r3, #2
 8007ff2:	440b      	add	r3, r1
 8007ff4:	005b      	lsls	r3, r3, #1
 8007ff6:	1ad3      	subs	r3, r2, r3
 8007ff8:	60bb      	str	r3, [r7, #8]
  buf[n++] = (char) (e + '0');
 8007ffa:	68bb      	ldr	r3, [r7, #8]
 8007ffc:	b2da      	uxtb	r2, r3
 8007ffe:	697b      	ldr	r3, [r7, #20]
 8008000:	1c59      	adds	r1, r3, #1
 8008002:	6179      	str	r1, [r7, #20]
 8008004:	4619      	mov	r1, r3
 8008006:	68fb      	ldr	r3, [r7, #12]
 8008008:	440b      	add	r3, r1
 800800a:	3230      	adds	r2, #48	@ 0x30
 800800c:	b2d2      	uxtb	r2, r2
 800800e:	701a      	strb	r2, [r3, #0]
  return n;
 8008010:	697b      	ldr	r3, [r7, #20]
}
 8008012:	4618      	mov	r0, r3
 8008014:	371c      	adds	r7, #28
 8008016:	46bd      	mov	sp, r7
 8008018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800801c:	4770      	bx	lr
 800801e:	bf00      	nop
 8008020:	51eb851f 	.word	0x51eb851f
 8008024:	66666667 	.word	0x66666667

08008028 <xisinf>:

static int xisinf(double x) {
 8008028:	b480      	push	{r7}
 800802a:	b085      	sub	sp, #20
 800802c:	af00      	add	r7, sp, #0
 800802e:	ed87 0b00 	vstr	d0, [r7]
  union {
    double f;
    uint64_t u;
  } ieee754 = {x};
 8008032:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008036:	e9c7 2302 	strd	r2, r3, [r7, #8]
  return ((unsigned) (ieee754.u >> 32) & 0x7fffffff) == 0x7ff00000 &&
 800803a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800803e:	f04f 0200 	mov.w	r2, #0
 8008042:	f04f 0300 	mov.w	r3, #0
 8008046:	000a      	movs	r2, r1
 8008048:	2300      	movs	r3, #0
 800804a:	4613      	mov	r3, r2
 800804c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8008050:	4a08      	ldr	r2, [pc, #32]	@ (8008074 <xisinf+0x4c>)
 8008052:	4293      	cmp	r3, r2
 8008054:	d106      	bne.n	8008064 <xisinf+0x3c>
         ((unsigned) ieee754.u == 0);
 8008056:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800805a:	4613      	mov	r3, r2
  return ((unsigned) (ieee754.u >> 32) & 0x7fffffff) == 0x7ff00000 &&
 800805c:	2b00      	cmp	r3, #0
 800805e:	d101      	bne.n	8008064 <xisinf+0x3c>
 8008060:	2301      	movs	r3, #1
 8008062:	e000      	b.n	8008066 <xisinf+0x3e>
 8008064:	2300      	movs	r3, #0
}
 8008066:	4618      	mov	r0, r3
 8008068:	3714      	adds	r7, #20
 800806a:	46bd      	mov	sp, r7
 800806c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008070:	4770      	bx	lr
 8008072:	bf00      	nop
 8008074:	7ff00000 	.word	0x7ff00000

08008078 <xisnan>:

static int xisnan(double x) {
 8008078:	b480      	push	{r7}
 800807a:	b085      	sub	sp, #20
 800807c:	af00      	add	r7, sp, #0
 800807e:	ed87 0b00 	vstr	d0, [r7]
  union {
    double f;
    uint64_t u;
  } ieee754 = {x};
 8008082:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008086:	e9c7 2302 	strd	r2, r3, [r7, #8]
  return ((unsigned) (ieee754.u >> 32) & 0x7fffffff) +
 800808a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800808e:	f04f 0200 	mov.w	r2, #0
 8008092:	f04f 0300 	mov.w	r3, #0
 8008096:	000a      	movs	r2, r1
 8008098:	2300      	movs	r3, #0
 800809a:	4613      	mov	r3, r2
 800809c:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
             ((unsigned) ieee754.u != 0) >
 80080a0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80080a4:	4613      	mov	r3, r2
 80080a6:	2b00      	cmp	r3, #0
 80080a8:	bf14      	ite	ne
 80080aa:	2301      	movne	r3, #1
 80080ac:	2300      	moveq	r3, #0
 80080ae:	b2db      	uxtb	r3, r3
  return ((unsigned) (ieee754.u >> 32) & 0x7fffffff) +
 80080b0:	440b      	add	r3, r1
             ((unsigned) ieee754.u != 0) >
 80080b2:	4a06      	ldr	r2, [pc, #24]	@ (80080cc <xisnan+0x54>)
 80080b4:	4293      	cmp	r3, r2
 80080b6:	bf8c      	ite	hi
 80080b8:	2301      	movhi	r3, #1
 80080ba:	2300      	movls	r3, #0
 80080bc:	b2db      	uxtb	r3, r3
         0x7ff00000;
}
 80080be:	4618      	mov	r0, r3
 80080c0:	3714      	adds	r7, #20
 80080c2:	46bd      	mov	sp, r7
 80080c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080c8:	4770      	bx	lr
 80080ca:	bf00      	nop
 80080cc:	7ff00000 	.word	0x7ff00000

080080d0 <mg_dtoa>:

static size_t mg_dtoa(char *dst, size_t dstlen, double d, int width, bool tz) {
 80080d0:	b580      	push	{r7, lr}
 80080d2:	b0a0      	sub	sp, #128	@ 0x80
 80080d4:	af02      	add	r7, sp, #8
 80080d6:	6178      	str	r0, [r7, #20]
 80080d8:	6139      	str	r1, [r7, #16]
 80080da:	ed87 0b02 	vstr	d0, [r7, #8]
 80080de:	607a      	str	r2, [r7, #4]
 80080e0:	70fb      	strb	r3, [r7, #3]
  char buf[40];
  int i, s = 0, n = 0, e = 0;
 80080e2:	2300      	movs	r3, #0
 80080e4:	673b      	str	r3, [r7, #112]	@ 0x70
 80080e6:	2300      	movs	r3, #0
 80080e8:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80080ea:	2300      	movs	r3, #0
 80080ec:	66bb      	str	r3, [r7, #104]	@ 0x68
  double t, mul, saved;
  if (d == 0.0) return mg_snprintf(dst, dstlen, "%s", "0");
 80080ee:	ed97 7b02 	vldr	d7, [r7, #8]
 80080f2:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80080f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80080fa:	d107      	bne.n	800810c <mg_dtoa+0x3c>
 80080fc:	4bb8      	ldr	r3, [pc, #736]	@ (80083e0 <mg_dtoa+0x310>)
 80080fe:	4ab9      	ldr	r2, [pc, #740]	@ (80083e4 <mg_dtoa+0x314>)
 8008100:	6939      	ldr	r1, [r7, #16]
 8008102:	6978      	ldr	r0, [r7, #20]
 8008104:	f00a f87c 	bl	8012200 <mg_snprintf>
 8008108:	4603      	mov	r3, r0
 800810a:	e28d      	b.n	8008628 <mg_dtoa+0x558>
  if (xisinf(d)) return mg_snprintf(dst, dstlen, "%s", d > 0 ? "inf" : "-inf");
 800810c:	ed97 0b02 	vldr	d0, [r7, #8]
 8008110:	f7ff ff8a 	bl	8008028 <xisinf>
 8008114:	4603      	mov	r3, r0
 8008116:	2b00      	cmp	r3, #0
 8008118:	d010      	beq.n	800813c <mg_dtoa+0x6c>
 800811a:	ed97 7b02 	vldr	d7, [r7, #8]
 800811e:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8008122:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008126:	dd01      	ble.n	800812c <mg_dtoa+0x5c>
 8008128:	4baf      	ldr	r3, [pc, #700]	@ (80083e8 <mg_dtoa+0x318>)
 800812a:	e000      	b.n	800812e <mg_dtoa+0x5e>
 800812c:	4baf      	ldr	r3, [pc, #700]	@ (80083ec <mg_dtoa+0x31c>)
 800812e:	4aad      	ldr	r2, [pc, #692]	@ (80083e4 <mg_dtoa+0x314>)
 8008130:	6939      	ldr	r1, [r7, #16]
 8008132:	6978      	ldr	r0, [r7, #20]
 8008134:	f00a f864 	bl	8012200 <mg_snprintf>
 8008138:	4603      	mov	r3, r0
 800813a:	e275      	b.n	8008628 <mg_dtoa+0x558>
  if (xisnan(d)) return mg_snprintf(dst, dstlen, "%s", "nan");
 800813c:	ed97 0b02 	vldr	d0, [r7, #8]
 8008140:	f7ff ff9a 	bl	8008078 <xisnan>
 8008144:	4603      	mov	r3, r0
 8008146:	2b00      	cmp	r3, #0
 8008148:	d007      	beq.n	800815a <mg_dtoa+0x8a>
 800814a:	4ba9      	ldr	r3, [pc, #676]	@ (80083f0 <mg_dtoa+0x320>)
 800814c:	4aa5      	ldr	r2, [pc, #660]	@ (80083e4 <mg_dtoa+0x314>)
 800814e:	6939      	ldr	r1, [r7, #16]
 8008150:	6978      	ldr	r0, [r7, #20]
 8008152:	f00a f855 	bl	8012200 <mg_snprintf>
 8008156:	4603      	mov	r3, r0
 8008158:	e266      	b.n	8008628 <mg_dtoa+0x558>
  if (d < 0.0) d = -d, buf[s++] = '-';
 800815a:	ed97 7b02 	vldr	d7, [r7, #8]
 800815e:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8008162:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008166:	d50d      	bpl.n	8008184 <mg_dtoa+0xb4>
 8008168:	ed97 7b02 	vldr	d7, [r7, #8]
 800816c:	eeb1 7b47 	vneg.f64	d7, d7
 8008170:	ed87 7b02 	vstr	d7, [r7, #8]
 8008174:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8008176:	1c5a      	adds	r2, r3, #1
 8008178:	673a      	str	r2, [r7, #112]	@ 0x70
 800817a:	3378      	adds	r3, #120	@ 0x78
 800817c:	443b      	add	r3, r7
 800817e:	222d      	movs	r2, #45	@ 0x2d
 8008180:	f803 2c60 	strb.w	r2, [r3, #-96]

  // Round
  saved = d;
 8008184:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008188:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48
  if (tz) {
 800818c:	78fb      	ldrb	r3, [r7, #3]
 800818e:	2b00      	cmp	r3, #0
 8008190:	d024      	beq.n	80081dc <mg_dtoa+0x10c>
    mul = 1.0;
 8008192:	f04f 0200 	mov.w	r2, #0
 8008196:	4b97      	ldr	r3, [pc, #604]	@ (80083f4 <mg_dtoa+0x324>)
 8008198:	e9c7 2316 	strd	r2, r3, [r7, #88]	@ 0x58
    while (d >= 10.0 && d / mul >= 10.0) mul *= 10.0;
 800819c:	e007      	b.n	80081ae <mg_dtoa+0xde>
 800819e:	ed97 7b16 	vldr	d7, [r7, #88]	@ 0x58
 80081a2:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
 80081a6:	ee27 7b06 	vmul.f64	d7, d7, d6
 80081aa:	ed87 7b16 	vstr	d7, [r7, #88]	@ 0x58
 80081ae:	ed97 7b02 	vldr	d7, [r7, #8]
 80081b2:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
 80081b6:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80081ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80081be:	db12      	blt.n	80081e6 <mg_dtoa+0x116>
 80081c0:	ed97 5b02 	vldr	d5, [r7, #8]
 80081c4:	ed97 6b16 	vldr	d6, [r7, #88]	@ 0x58
 80081c8:	ee85 7b06 	vdiv.f64	d7, d5, d6
 80081cc:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
 80081d0:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80081d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80081d8:	dae1      	bge.n	800819e <mg_dtoa+0xce>
 80081da:	e00d      	b.n	80081f8 <mg_dtoa+0x128>
  } else {
    mul = 0.1;
 80081dc:	a37e      	add	r3, pc, #504	@ (adr r3, 80083d8 <mg_dtoa+0x308>)
 80081de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081e2:	e9c7 2316 	strd	r2, r3, [r7, #88]	@ 0x58
  }

  while (d <= 1.0 && d / mul <= 1.0) mul /= 10.0;
 80081e6:	e007      	b.n	80081f8 <mg_dtoa+0x128>
 80081e8:	ed97 6b16 	vldr	d6, [r7, #88]	@ 0x58
 80081ec:	eeb2 5b04 	vmov.f64	d5, #36	@ 0x41200000  10.0
 80081f0:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80081f4:	ed87 7b16 	vstr	d7, [r7, #88]	@ 0x58
 80081f8:	ed97 7b02 	vldr	d7, [r7, #8]
 80081fc:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 8008200:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8008204:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008208:	d80c      	bhi.n	8008224 <mg_dtoa+0x154>
 800820a:	ed97 5b02 	vldr	d5, [r7, #8]
 800820e:	ed97 6b16 	vldr	d6, [r7, #88]	@ 0x58
 8008212:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8008216:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 800821a:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800821e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008222:	d9e1      	bls.n	80081e8 <mg_dtoa+0x118>
  for (i = 0, t = mul * 5; i < width; i++) t /= 10.0;
 8008224:	2300      	movs	r3, #0
 8008226:	677b      	str	r3, [r7, #116]	@ 0x74
 8008228:	ed97 7b16 	vldr	d7, [r7, #88]	@ 0x58
 800822c:	eeb1 6b04 	vmov.f64	d6, #20	@ 0x40a00000  5.0
 8008230:	ee27 7b06 	vmul.f64	d7, d7, d6
 8008234:	ed87 7b18 	vstr	d7, [r7, #96]	@ 0x60
 8008238:	e00a      	b.n	8008250 <mg_dtoa+0x180>
 800823a:	ed97 6b18 	vldr	d6, [r7, #96]	@ 0x60
 800823e:	eeb2 5b04 	vmov.f64	d5, #36	@ 0x41200000  10.0
 8008242:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8008246:	ed87 7b18 	vstr	d7, [r7, #96]	@ 0x60
 800824a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800824c:	3301      	adds	r3, #1
 800824e:	677b      	str	r3, [r7, #116]	@ 0x74
 8008250:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	429a      	cmp	r2, r3
 8008256:	dbf0      	blt.n	800823a <mg_dtoa+0x16a>

  d += t;
 8008258:	ed97 6b02 	vldr	d6, [r7, #8]
 800825c:	ed97 7b18 	vldr	d7, [r7, #96]	@ 0x60
 8008260:	ee36 7b07 	vadd.f64	d7, d6, d7
 8008264:	ed87 7b02 	vstr	d7, [r7, #8]

  // Calculate exponent, and 'mul' for scientific representation
  mul = 1.0;
 8008268:	f04f 0200 	mov.w	r2, #0
 800826c:	4b61      	ldr	r3, [pc, #388]	@ (80083f4 <mg_dtoa+0x324>)
 800826e:	e9c7 2316 	strd	r2, r3, [r7, #88]	@ 0x58
  while (d >= 10.0 && d / mul >= 10.0) mul *= 10.0, e++;
 8008272:	e00a      	b.n	800828a <mg_dtoa+0x1ba>
 8008274:	ed97 7b16 	vldr	d7, [r7, #88]	@ 0x58
 8008278:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
 800827c:	ee27 7b06 	vmul.f64	d7, d7, d6
 8008280:	ed87 7b16 	vstr	d7, [r7, #88]	@ 0x58
 8008284:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8008286:	3301      	adds	r3, #1
 8008288:	66bb      	str	r3, [r7, #104]	@ 0x68
 800828a:	ed97 7b02 	vldr	d7, [r7, #8]
 800828e:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
 8008292:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8008296:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800829a:	db0c      	blt.n	80082b6 <mg_dtoa+0x1e6>
 800829c:	ed97 5b02 	vldr	d5, [r7, #8]
 80082a0:	ed97 6b16 	vldr	d6, [r7, #88]	@ 0x58
 80082a4:	ee85 7b06 	vdiv.f64	d7, d5, d6
 80082a8:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
 80082ac:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80082b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80082b4:	dade      	bge.n	8008274 <mg_dtoa+0x1a4>
  while (d < 1.0 && d / mul < 1.0) mul /= 10.0, e--;
 80082b6:	e00a      	b.n	80082ce <mg_dtoa+0x1fe>
 80082b8:	ed97 6b16 	vldr	d6, [r7, #88]	@ 0x58
 80082bc:	eeb2 5b04 	vmov.f64	d5, #36	@ 0x41200000  10.0
 80082c0:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80082c4:	ed87 7b16 	vstr	d7, [r7, #88]	@ 0x58
 80082c8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80082ca:	3b01      	subs	r3, #1
 80082cc:	66bb      	str	r3, [r7, #104]	@ 0x68
 80082ce:	ed97 7b02 	vldr	d7, [r7, #8]
 80082d2:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 80082d6:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80082da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80082de:	d50c      	bpl.n	80082fa <mg_dtoa+0x22a>
 80082e0:	ed97 5b02 	vldr	d5, [r7, #8]
 80082e4:	ed97 6b16 	vldr	d6, [r7, #88]	@ 0x58
 80082e8:	ee85 7b06 	vdiv.f64	d7, d5, d6
 80082ec:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 80082f0:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80082f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80082f8:	d4de      	bmi.n	80082b8 <mg_dtoa+0x1e8>
  // printf(" --> %g %d %g %g\n", saved, e, t, mul);

  if (tz && e >= width && width > 1) {
 80082fa:	78fb      	ldrb	r3, [r7, #3]
 80082fc:	2b00      	cmp	r3, #0
 80082fe:	d031      	beq.n	8008364 <mg_dtoa+0x294>
 8008300:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	429a      	cmp	r2, r3
 8008306:	db2d      	blt.n	8008364 <mg_dtoa+0x294>
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	2b01      	cmp	r3, #1
 800830c:	dd2a      	ble.n	8008364 <mg_dtoa+0x294>
    n = (int) mg_dtoa(buf, sizeof(buf), saved / mul, width, tz);
 800830e:	ed97 6b12 	vldr	d6, [r7, #72]	@ 0x48
 8008312:	ed97 7b16 	vldr	d7, [r7, #88]	@ 0x58
 8008316:	ee86 5b07 	vdiv.f64	d5, d6, d7
 800831a:	78fb      	ldrb	r3, [r7, #3]
 800831c:	f107 0018 	add.w	r0, r7, #24
 8008320:	687a      	ldr	r2, [r7, #4]
 8008322:	eeb0 0b45 	vmov.f64	d0, d5
 8008326:	2128      	movs	r1, #40	@ 0x28
 8008328:	f7ff fed2 	bl	80080d0 <mg_dtoa>
 800832c:	4603      	mov	r3, r0
 800832e:	66fb      	str	r3, [r7, #108]	@ 0x6c
    // printf(" --> %.*g %d [%.*s]\n", 10, d / t, e, n, buf);
    n += addexp(buf + s + n, e, '+');
 8008330:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8008332:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008334:	4413      	add	r3, r2
 8008336:	f107 0218 	add.w	r2, r7, #24
 800833a:	4413      	add	r3, r2
 800833c:	222b      	movs	r2, #43	@ 0x2b
 800833e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8008340:	4618      	mov	r0, r3
 8008342:	f7ff fdef 	bl	8007f24 <addexp>
 8008346:	4602      	mov	r2, r0
 8008348:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800834a:	4413      	add	r3, r2
 800834c:	66fb      	str	r3, [r7, #108]	@ 0x6c
    return mg_snprintf(dst, dstlen, "%.*s", n, buf);
 800834e:	f107 0318 	add.w	r3, r7, #24
 8008352:	9300      	str	r3, [sp, #0]
 8008354:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008356:	4a28      	ldr	r2, [pc, #160]	@ (80083f8 <mg_dtoa+0x328>)
 8008358:	6939      	ldr	r1, [r7, #16]
 800835a:	6978      	ldr	r0, [r7, #20]
 800835c:	f009 ff50 	bl	8012200 <mg_snprintf>
 8008360:	4603      	mov	r3, r0
 8008362:	e161      	b.n	8008628 <mg_dtoa+0x558>
  } else if (tz && e <= -width && width > 1) {
 8008364:	78fb      	ldrb	r3, [r7, #3]
 8008366:	2b00      	cmp	r3, #0
 8008368:	d048      	beq.n	80083fc <mg_dtoa+0x32c>
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	425b      	negs	r3, r3
 800836e:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8008370:	429a      	cmp	r2, r3
 8008372:	dc43      	bgt.n	80083fc <mg_dtoa+0x32c>
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	2b01      	cmp	r3, #1
 8008378:	dd40      	ble.n	80083fc <mg_dtoa+0x32c>
    n = (int) mg_dtoa(buf, sizeof(buf), saved / mul, width, tz);
 800837a:	ed97 6b12 	vldr	d6, [r7, #72]	@ 0x48
 800837e:	ed97 7b16 	vldr	d7, [r7, #88]	@ 0x58
 8008382:	ee86 5b07 	vdiv.f64	d5, d6, d7
 8008386:	78fb      	ldrb	r3, [r7, #3]
 8008388:	f107 0018 	add.w	r0, r7, #24
 800838c:	687a      	ldr	r2, [r7, #4]
 800838e:	eeb0 0b45 	vmov.f64	d0, d5
 8008392:	2128      	movs	r1, #40	@ 0x28
 8008394:	f7ff fe9c 	bl	80080d0 <mg_dtoa>
 8008398:	4603      	mov	r3, r0
 800839a:	66fb      	str	r3, [r7, #108]	@ 0x6c
    // printf(" --> %.*g %d [%.*s]\n", 10, d / mul, e, n, buf);
    n += addexp(buf + s + n, -e, '-');
 800839c:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 800839e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80083a0:	4413      	add	r3, r2
 80083a2:	f107 0218 	add.w	r2, r7, #24
 80083a6:	18d0      	adds	r0, r2, r3
 80083a8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80083aa:	425b      	negs	r3, r3
 80083ac:	222d      	movs	r2, #45	@ 0x2d
 80083ae:	4619      	mov	r1, r3
 80083b0:	f7ff fdb8 	bl	8007f24 <addexp>
 80083b4:	4602      	mov	r2, r0
 80083b6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80083b8:	4413      	add	r3, r2
 80083ba:	66fb      	str	r3, [r7, #108]	@ 0x6c
    return mg_snprintf(dst, dstlen, "%.*s", n, buf);
 80083bc:	f107 0318 	add.w	r3, r7, #24
 80083c0:	9300      	str	r3, [sp, #0]
 80083c2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80083c4:	4a0c      	ldr	r2, [pc, #48]	@ (80083f8 <mg_dtoa+0x328>)
 80083c6:	6939      	ldr	r1, [r7, #16]
 80083c8:	6978      	ldr	r0, [r7, #20]
 80083ca:	f009 ff19 	bl	8012200 <mg_snprintf>
 80083ce:	4603      	mov	r3, r0
 80083d0:	e12a      	b.n	8008628 <mg_dtoa+0x558>
 80083d2:	bf00      	nop
 80083d4:	f3af 8000 	nop.w
 80083d8:	9999999a 	.word	0x9999999a
 80083dc:	3fb99999 	.word	0x3fb99999
 80083e0:	08025408 	.word	0x08025408
 80083e4:	0802540c 	.word	0x0802540c
 80083e8:	08025410 	.word	0x08025410
 80083ec:	08025414 	.word	0x08025414
 80083f0:	0802541c 	.word	0x0802541c
 80083f4:	3ff00000 	.word	0x3ff00000
 80083f8:	08025420 	.word	0x08025420
  } else {
    int targ_width = width;
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	657b      	str	r3, [r7, #84]	@ 0x54
    for (i = 0, t = mul; t >= 1.0 && s + n < (int) sizeof(buf); i++) {
 8008400:	2300      	movs	r3, #0
 8008402:	677b      	str	r3, [r7, #116]	@ 0x74
 8008404:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8008408:	e9c7 2318 	strd	r2, r3, [r7, #96]	@ 0x60
 800840c:	e037      	b.n	800847e <mg_dtoa+0x3ae>
      int ch = (int) (d / t);
 800840e:	ed97 5b02 	vldr	d5, [r7, #8]
 8008412:	ed97 6b18 	vldr	d6, [r7, #96]	@ 0x60
 8008416:	ee85 7b06 	vdiv.f64	d7, d5, d6
 800841a:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 800841e:	ee17 3a90 	vmov	r3, s15
 8008422:	647b      	str	r3, [r7, #68]	@ 0x44
      if (n > 0 || ch > 0) buf[s + n++] = (char) (ch + '0');
 8008424:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008426:	2b00      	cmp	r3, #0
 8008428:	dc02      	bgt.n	8008430 <mg_dtoa+0x360>
 800842a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800842c:	2b00      	cmp	r3, #0
 800842e:	dd0c      	ble.n	800844a <mg_dtoa+0x37a>
 8008430:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008432:	b2da      	uxtb	r2, r3
 8008434:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008436:	1c59      	adds	r1, r3, #1
 8008438:	66f9      	str	r1, [r7, #108]	@ 0x6c
 800843a:	6f39      	ldr	r1, [r7, #112]	@ 0x70
 800843c:	440b      	add	r3, r1
 800843e:	3230      	adds	r2, #48	@ 0x30
 8008440:	b2d2      	uxtb	r2, r2
 8008442:	3378      	adds	r3, #120	@ 0x78
 8008444:	443b      	add	r3, r7
 8008446:	f803 2c60 	strb.w	r2, [r3, #-96]
      d -= ch * t;
 800844a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800844c:	ee07 3a90 	vmov	s15, r3
 8008450:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8008454:	ed97 7b18 	vldr	d7, [r7, #96]	@ 0x60
 8008458:	ee26 7b07 	vmul.f64	d7, d6, d7
 800845c:	ed97 6b02 	vldr	d6, [r7, #8]
 8008460:	ee36 7b47 	vsub.f64	d7, d6, d7
 8008464:	ed87 7b02 	vstr	d7, [r7, #8]
      t /= 10.0;
 8008468:	ed97 6b18 	vldr	d6, [r7, #96]	@ 0x60
 800846c:	eeb2 5b04 	vmov.f64	d5, #36	@ 0x41200000  10.0
 8008470:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8008474:	ed87 7b18 	vstr	d7, [r7, #96]	@ 0x60
    for (i = 0, t = mul; t >= 1.0 && s + n < (int) sizeof(buf); i++) {
 8008478:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800847a:	3301      	adds	r3, #1
 800847c:	677b      	str	r3, [r7, #116]	@ 0x74
 800847e:	ed97 7b18 	vldr	d7, [r7, #96]	@ 0x60
 8008482:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 8008486:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800848a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800848e:	db04      	blt.n	800849a <mg_dtoa+0x3ca>
 8008490:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8008492:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008494:	4413      	add	r3, r2
 8008496:	2b27      	cmp	r3, #39	@ 0x27
 8008498:	ddb9      	ble.n	800840e <mg_dtoa+0x33e>
    }
    // printf(" --> [%g] -> %g %g (%d) [%.*s]\n", saved, d, t, n, s + n, buf);
    if (n == 0) buf[s++] = '0';
 800849a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800849c:	2b00      	cmp	r3, #0
 800849e:	d118      	bne.n	80084d2 <mg_dtoa+0x402>
 80084a0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80084a2:	1c5a      	adds	r2, r3, #1
 80084a4:	673a      	str	r2, [r7, #112]	@ 0x70
 80084a6:	3378      	adds	r3, #120	@ 0x78
 80084a8:	443b      	add	r3, r7
 80084aa:	2230      	movs	r2, #48	@ 0x30
 80084ac:	f803 2c60 	strb.w	r2, [r3, #-96]
    while (t >= 1.0 && n + s < (int) sizeof(buf)) buf[n++] = '0', t /= 10.0;
 80084b0:	e00f      	b.n	80084d2 <mg_dtoa+0x402>
 80084b2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80084b4:	1c5a      	adds	r2, r3, #1
 80084b6:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80084b8:	3378      	adds	r3, #120	@ 0x78
 80084ba:	443b      	add	r3, r7
 80084bc:	2230      	movs	r2, #48	@ 0x30
 80084be:	f803 2c60 	strb.w	r2, [r3, #-96]
 80084c2:	ed97 6b18 	vldr	d6, [r7, #96]	@ 0x60
 80084c6:	eeb2 5b04 	vmov.f64	d5, #36	@ 0x41200000  10.0
 80084ca:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80084ce:	ed87 7b18 	vstr	d7, [r7, #96]	@ 0x60
 80084d2:	ed97 7b18 	vldr	d7, [r7, #96]	@ 0x60
 80084d6:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 80084da:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80084de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80084e2:	db04      	blt.n	80084ee <mg_dtoa+0x41e>
 80084e4:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80084e6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80084e8:	4413      	add	r3, r2
 80084ea:	2b27      	cmp	r3, #39	@ 0x27
 80084ec:	dde1      	ble.n	80084b2 <mg_dtoa+0x3e2>
    if (s + n < (int) sizeof(buf)) buf[n + s++] = '.';
 80084ee:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 80084f0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80084f2:	4413      	add	r3, r2
 80084f4:	2b27      	cmp	r3, #39	@ 0x27
 80084f6:	dc09      	bgt.n	800850c <mg_dtoa+0x43c>
 80084f8:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80084fa:	1c5a      	adds	r2, r3, #1
 80084fc:	673a      	str	r2, [r7, #112]	@ 0x70
 80084fe:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8008500:	4413      	add	r3, r2
 8008502:	3378      	adds	r3, #120	@ 0x78
 8008504:	443b      	add	r3, r7
 8008506:	222e      	movs	r2, #46	@ 0x2e
 8008508:	f803 2c60 	strb.w	r2, [r3, #-96]
    // printf(" 1--> [%g] -> [%.*s]\n", saved, s + n, buf);
    if (!tz && n > 0) targ_width = width + n;
 800850c:	78fb      	ldrb	r3, [r7, #3]
 800850e:	f083 0301 	eor.w	r3, r3, #1
 8008512:	b2db      	uxtb	r3, r3
 8008514:	2b00      	cmp	r3, #0
 8008516:	d006      	beq.n	8008526 <mg_dtoa+0x456>
 8008518:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800851a:	2b00      	cmp	r3, #0
 800851c:	dd03      	ble.n	8008526 <mg_dtoa+0x456>
 800851e:	687a      	ldr	r2, [r7, #4]
 8008520:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008522:	4413      	add	r3, r2
 8008524:	657b      	str	r3, [r7, #84]	@ 0x54
    for (i = 0, t = 0.1; s + n < (int) sizeof(buf) && n < targ_width; i++) {
 8008526:	2300      	movs	r3, #0
 8008528:	677b      	str	r3, [r7, #116]	@ 0x74
 800852a:	a342      	add	r3, pc, #264	@ (adr r3, 8008634 <mg_dtoa+0x564>)
 800852c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008530:	e9c7 2318 	strd	r2, r3, [r7, #96]	@ 0x60
 8008534:	e031      	b.n	800859a <mg_dtoa+0x4ca>
      int ch = (int) (d / t);
 8008536:	ed97 5b02 	vldr	d5, [r7, #8]
 800853a:	ed97 6b18 	vldr	d6, [r7, #96]	@ 0x60
 800853e:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8008542:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8008546:	ee17 3a90 	vmov	r3, s15
 800854a:	643b      	str	r3, [r7, #64]	@ 0x40
      buf[s + n++] = (char) (ch + '0');
 800854c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800854e:	b2da      	uxtb	r2, r3
 8008550:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008552:	1c59      	adds	r1, r3, #1
 8008554:	66f9      	str	r1, [r7, #108]	@ 0x6c
 8008556:	6f39      	ldr	r1, [r7, #112]	@ 0x70
 8008558:	440b      	add	r3, r1
 800855a:	3230      	adds	r2, #48	@ 0x30
 800855c:	b2d2      	uxtb	r2, r2
 800855e:	3378      	adds	r3, #120	@ 0x78
 8008560:	443b      	add	r3, r7
 8008562:	f803 2c60 	strb.w	r2, [r3, #-96]
      d -= ch * t;
 8008566:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008568:	ee07 3a90 	vmov	s15, r3
 800856c:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8008570:	ed97 7b18 	vldr	d7, [r7, #96]	@ 0x60
 8008574:	ee26 7b07 	vmul.f64	d7, d6, d7
 8008578:	ed97 6b02 	vldr	d6, [r7, #8]
 800857c:	ee36 7b47 	vsub.f64	d7, d6, d7
 8008580:	ed87 7b02 	vstr	d7, [r7, #8]
      t /= 10.0;
 8008584:	ed97 6b18 	vldr	d6, [r7, #96]	@ 0x60
 8008588:	eeb2 5b04 	vmov.f64	d5, #36	@ 0x41200000  10.0
 800858c:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8008590:	ed87 7b18 	vstr	d7, [r7, #96]	@ 0x60
    for (i = 0, t = 0.1; s + n < (int) sizeof(buf) && n < targ_width; i++) {
 8008594:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8008596:	3301      	adds	r3, #1
 8008598:	677b      	str	r3, [r7, #116]	@ 0x74
 800859a:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 800859c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800859e:	4413      	add	r3, r2
 80085a0:	2b27      	cmp	r3, #39	@ 0x27
 80085a2:	dc07      	bgt.n	80085b4 <mg_dtoa+0x4e4>
 80085a4:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80085a6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80085a8:	429a      	cmp	r2, r3
 80085aa:	dbc4      	blt.n	8008536 <mg_dtoa+0x466>
    }
  }

  while (tz && n > 0 && buf[s + n - 1] == '0') n--;  // Trim trailing zeroes
 80085ac:	e002      	b.n	80085b4 <mg_dtoa+0x4e4>
 80085ae:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80085b0:	3b01      	subs	r3, #1
 80085b2:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80085b4:	78fb      	ldrb	r3, [r7, #3]
 80085b6:	2b00      	cmp	r3, #0
 80085b8:	d00c      	beq.n	80085d4 <mg_dtoa+0x504>
 80085ba:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80085bc:	2b00      	cmp	r3, #0
 80085be:	dd09      	ble.n	80085d4 <mg_dtoa+0x504>
 80085c0:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 80085c2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80085c4:	4413      	add	r3, r2
 80085c6:	3b01      	subs	r3, #1
 80085c8:	3378      	adds	r3, #120	@ 0x78
 80085ca:	443b      	add	r3, r7
 80085cc:	f813 3c60 	ldrb.w	r3, [r3, #-96]
 80085d0:	2b30      	cmp	r3, #48	@ 0x30
 80085d2:	d0ec      	beq.n	80085ae <mg_dtoa+0x4de>
  if (tz && n > 0 && buf[s + n - 1] == '.') n--;           // Trim trailing dot
 80085d4:	78fb      	ldrb	r3, [r7, #3]
 80085d6:	2b00      	cmp	r3, #0
 80085d8:	d00f      	beq.n	80085fa <mg_dtoa+0x52a>
 80085da:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80085dc:	2b00      	cmp	r3, #0
 80085de:	dd0c      	ble.n	80085fa <mg_dtoa+0x52a>
 80085e0:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 80085e2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80085e4:	4413      	add	r3, r2
 80085e6:	3b01      	subs	r3, #1
 80085e8:	3378      	adds	r3, #120	@ 0x78
 80085ea:	443b      	add	r3, r7
 80085ec:	f813 3c60 	ldrb.w	r3, [r3, #-96]
 80085f0:	2b2e      	cmp	r3, #46	@ 0x2e
 80085f2:	d102      	bne.n	80085fa <mg_dtoa+0x52a>
 80085f4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80085f6:	3b01      	subs	r3, #1
 80085f8:	66fb      	str	r3, [r7, #108]	@ 0x6c
  n += s;
 80085fa:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80085fc:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80085fe:	4413      	add	r3, r2
 8008600:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (n >= (int) sizeof(buf)) n = (int) sizeof(buf) - 1;
 8008602:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008604:	2b27      	cmp	r3, #39	@ 0x27
 8008606:	dd01      	ble.n	800860c <mg_dtoa+0x53c>
 8008608:	2327      	movs	r3, #39	@ 0x27
 800860a:	66fb      	str	r3, [r7, #108]	@ 0x6c
  buf[n] = '\0';
 800860c:	f107 0218 	add.w	r2, r7, #24
 8008610:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008612:	4413      	add	r3, r2
 8008614:	2200      	movs	r2, #0
 8008616:	701a      	strb	r2, [r3, #0]
  return mg_snprintf(dst, dstlen, "%s", buf);
 8008618:	f107 0318 	add.w	r3, r7, #24
 800861c:	4a04      	ldr	r2, [pc, #16]	@ (8008630 <mg_dtoa+0x560>)
 800861e:	6939      	ldr	r1, [r7, #16]
 8008620:	6978      	ldr	r0, [r7, #20]
 8008622:	f009 fded 	bl	8012200 <mg_snprintf>
 8008626:	4603      	mov	r3, r0
}
 8008628:	4618      	mov	r0, r3
 800862a:	3778      	adds	r7, #120	@ 0x78
 800862c:	46bd      	mov	sp, r7
 800862e:	bd80      	pop	{r7, pc}
 8008630:	0802540c 	.word	0x0802540c
 8008634:	9999999a 	.word	0x9999999a
 8008638:	3fb99999 	.word	0x3fb99999

0800863c <mg_lld>:

static size_t mg_lld(char *buf, int64_t val, bool is_signed, bool is_hex) {
 800863c:	b5b0      	push	{r4, r5, r7, lr}
 800863e:	b08c      	sub	sp, #48	@ 0x30
 8008640:	af00      	add	r7, sp, #0
 8008642:	60f8      	str	r0, [r7, #12]
 8008644:	e9c7 2300 	strd	r2, r3, [r7]
  const char *letters = "0123456789abcdef";
 8008648:	4b53      	ldr	r3, [pc, #332]	@ (8008798 <mg_lld+0x15c>)
 800864a:	61bb      	str	r3, [r7, #24]
  uint64_t v = (uint64_t) val;
 800864c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008650:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
  size_t s = 0, n, i;
 8008654:	2300      	movs	r3, #0
 8008656:	627b      	str	r3, [r7, #36]	@ 0x24
  if (is_signed && val < 0) buf[s++] = '-', v = (uint64_t) (-val);
 8008658:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 800865c:	2b00      	cmp	r3, #0
 800865e:	d012      	beq.n	8008686 <mg_lld+0x4a>
 8008660:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008664:	2b00      	cmp	r3, #0
 8008666:	da0e      	bge.n	8008686 <mg_lld+0x4a>
 8008668:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800866a:	1c5a      	adds	r2, r3, #1
 800866c:	627a      	str	r2, [r7, #36]	@ 0x24
 800866e:	68fa      	ldr	r2, [r7, #12]
 8008670:	4413      	add	r3, r2
 8008672:	222d      	movs	r2, #45	@ 0x2d
 8008674:	701a      	strb	r2, [r3, #0]
 8008676:	e9d7 2300 	ldrd	r2, r3, [r7]
 800867a:	2100      	movs	r1, #0
 800867c:	4254      	negs	r4, r2
 800867e:	eb61 0503 	sbc.w	r5, r1, r3
 8008682:	e9c7 450a 	strd	r4, r5, [r7, #40]	@ 0x28
  // This loop prints a number in reverse order. I guess this is because we
  // write numbers from right to left: least significant digit comes last.
  // Maybe because we use Arabic numbers, and Arabs write RTL?
  if (is_hex) {
 8008686:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 800868a:	2b00      	cmp	r3, #0
 800868c:	d021      	beq.n	80086d2 <mg_lld+0x96>
    for (n = 0; v; v >>= 4) buf[s + n++] = letters[v & 15];
 800868e:	2300      	movs	r3, #0
 8008690:	623b      	str	r3, [r7, #32]
 8008692:	e019      	b.n	80086c8 <mg_lld+0x8c>
 8008694:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008696:	f003 030f 	and.w	r3, r3, #15
 800869a:	69ba      	ldr	r2, [r7, #24]
 800869c:	441a      	add	r2, r3
 800869e:	6a3b      	ldr	r3, [r7, #32]
 80086a0:	1c59      	adds	r1, r3, #1
 80086a2:	6239      	str	r1, [r7, #32]
 80086a4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80086a6:	440b      	add	r3, r1
 80086a8:	68f9      	ldr	r1, [r7, #12]
 80086aa:	440b      	add	r3, r1
 80086ac:	7812      	ldrb	r2, [r2, #0]
 80086ae:	701a      	strb	r2, [r3, #0]
 80086b0:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80086b4:	f04f 0200 	mov.w	r2, #0
 80086b8:	f04f 0300 	mov.w	r3, #0
 80086bc:	0902      	lsrs	r2, r0, #4
 80086be:	ea42 7201 	orr.w	r2, r2, r1, lsl #28
 80086c2:	090b      	lsrs	r3, r1, #4
 80086c4:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
 80086c8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80086cc:	4313      	orrs	r3, r2
 80086ce:	d1e1      	bne.n	8008694 <mg_lld+0x58>
 80086d0:	e025      	b.n	800871e <mg_lld+0xe2>
  } else {
    for (n = 0; v; v /= 10) buf[s + n++] = letters[v % 10];
 80086d2:	2300      	movs	r3, #0
 80086d4:	623b      	str	r3, [r7, #32]
 80086d6:	e01e      	b.n	8008716 <mg_lld+0xda>
 80086d8:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80086dc:	f04f 020a 	mov.w	r2, #10
 80086e0:	f04f 0300 	mov.w	r3, #0
 80086e4:	f7f7 fe14 	bl	8000310 <__aeabi_uldivmod>
 80086e8:	69bb      	ldr	r3, [r7, #24]
 80086ea:	441a      	add	r2, r3
 80086ec:	6a3b      	ldr	r3, [r7, #32]
 80086ee:	1c59      	adds	r1, r3, #1
 80086f0:	6239      	str	r1, [r7, #32]
 80086f2:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80086f4:	440b      	add	r3, r1
 80086f6:	68f9      	ldr	r1, [r7, #12]
 80086f8:	440b      	add	r3, r1
 80086fa:	7812      	ldrb	r2, [r2, #0]
 80086fc:	701a      	strb	r2, [r3, #0]
 80086fe:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8008702:	f04f 020a 	mov.w	r2, #10
 8008706:	f04f 0300 	mov.w	r3, #0
 800870a:	f7f7 fe01 	bl	8000310 <__aeabi_uldivmod>
 800870e:	4602      	mov	r2, r0
 8008710:	460b      	mov	r3, r1
 8008712:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
 8008716:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800871a:	4313      	orrs	r3, r2
 800871c:	d1dc      	bne.n	80086d8 <mg_lld+0x9c>
  }
  // Reverse a string
  for (i = 0; i < n / 2; i++) {
 800871e:	2300      	movs	r3, #0
 8008720:	61fb      	str	r3, [r7, #28]
 8008722:	e022      	b.n	800876a <mg_lld+0x12e>
    char t = buf[s + i];
 8008724:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008726:	69fb      	ldr	r3, [r7, #28]
 8008728:	4413      	add	r3, r2
 800872a:	68fa      	ldr	r2, [r7, #12]
 800872c:	4413      	add	r3, r2
 800872e:	781b      	ldrb	r3, [r3, #0]
 8008730:	75fb      	strb	r3, [r7, #23]
    buf[s + i] = buf[s + n - i - 1], buf[s + n - i - 1] = t;
 8008732:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008734:	6a3b      	ldr	r3, [r7, #32]
 8008736:	441a      	add	r2, r3
 8008738:	69fb      	ldr	r3, [r7, #28]
 800873a:	1ad3      	subs	r3, r2, r3
 800873c:	3b01      	subs	r3, #1
 800873e:	68fa      	ldr	r2, [r7, #12]
 8008740:	441a      	add	r2, r3
 8008742:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8008744:	69fb      	ldr	r3, [r7, #28]
 8008746:	440b      	add	r3, r1
 8008748:	68f9      	ldr	r1, [r7, #12]
 800874a:	440b      	add	r3, r1
 800874c:	7812      	ldrb	r2, [r2, #0]
 800874e:	701a      	strb	r2, [r3, #0]
 8008750:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008752:	6a3b      	ldr	r3, [r7, #32]
 8008754:	441a      	add	r2, r3
 8008756:	69fb      	ldr	r3, [r7, #28]
 8008758:	1ad3      	subs	r3, r2, r3
 800875a:	3b01      	subs	r3, #1
 800875c:	68fa      	ldr	r2, [r7, #12]
 800875e:	4413      	add	r3, r2
 8008760:	7dfa      	ldrb	r2, [r7, #23]
 8008762:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < n / 2; i++) {
 8008764:	69fb      	ldr	r3, [r7, #28]
 8008766:	3301      	adds	r3, #1
 8008768:	61fb      	str	r3, [r7, #28]
 800876a:	6a3b      	ldr	r3, [r7, #32]
 800876c:	085b      	lsrs	r3, r3, #1
 800876e:	69fa      	ldr	r2, [r7, #28]
 8008770:	429a      	cmp	r2, r3
 8008772:	d3d7      	bcc.n	8008724 <mg_lld+0xe8>
  }
  if (val == 0) buf[n++] = '0';  // Handle special case
 8008774:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008778:	4313      	orrs	r3, r2
 800877a:	d106      	bne.n	800878a <mg_lld+0x14e>
 800877c:	6a3b      	ldr	r3, [r7, #32]
 800877e:	1c5a      	adds	r2, r3, #1
 8008780:	623a      	str	r2, [r7, #32]
 8008782:	68fa      	ldr	r2, [r7, #12]
 8008784:	4413      	add	r3, r2
 8008786:	2230      	movs	r2, #48	@ 0x30
 8008788:	701a      	strb	r2, [r3, #0]
  return n + s;
 800878a:	6a3a      	ldr	r2, [r7, #32]
 800878c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800878e:	4413      	add	r3, r2
}
 8008790:	4618      	mov	r0, r3
 8008792:	3730      	adds	r7, #48	@ 0x30
 8008794:	46bd      	mov	sp, r7
 8008796:	bdb0      	pop	{r4, r5, r7, pc}
 8008798:	08025428 	.word	0x08025428

0800879c <scpy>:

static size_t scpy(void (*out)(char, void *), void *ptr, char *buf,
                          size_t len) {
 800879c:	b580      	push	{r7, lr}
 800879e:	b086      	sub	sp, #24
 80087a0:	af00      	add	r7, sp, #0
 80087a2:	60f8      	str	r0, [r7, #12]
 80087a4:	60b9      	str	r1, [r7, #8]
 80087a6:	607a      	str	r2, [r7, #4]
 80087a8:	603b      	str	r3, [r7, #0]
  size_t i = 0;
 80087aa:	2300      	movs	r3, #0
 80087ac:	617b      	str	r3, [r7, #20]
  while (i < len && buf[i] != '\0') out(buf[i++], ptr);
 80087ae:	e009      	b.n	80087c4 <scpy+0x28>
 80087b0:	697b      	ldr	r3, [r7, #20]
 80087b2:	1c5a      	adds	r2, r3, #1
 80087b4:	617a      	str	r2, [r7, #20]
 80087b6:	687a      	ldr	r2, [r7, #4]
 80087b8:	4413      	add	r3, r2
 80087ba:	781a      	ldrb	r2, [r3, #0]
 80087bc:	68fb      	ldr	r3, [r7, #12]
 80087be:	68b9      	ldr	r1, [r7, #8]
 80087c0:	4610      	mov	r0, r2
 80087c2:	4798      	blx	r3
 80087c4:	697a      	ldr	r2, [r7, #20]
 80087c6:	683b      	ldr	r3, [r7, #0]
 80087c8:	429a      	cmp	r2, r3
 80087ca:	d205      	bcs.n	80087d8 <scpy+0x3c>
 80087cc:	687a      	ldr	r2, [r7, #4]
 80087ce:	697b      	ldr	r3, [r7, #20]
 80087d0:	4413      	add	r3, r2
 80087d2:	781b      	ldrb	r3, [r3, #0]
 80087d4:	2b00      	cmp	r3, #0
 80087d6:	d1eb      	bne.n	80087b0 <scpy+0x14>
  return i;
 80087d8:	697b      	ldr	r3, [r7, #20]
}
 80087da:	4618      	mov	r0, r3
 80087dc:	3718      	adds	r7, #24
 80087de:	46bd      	mov	sp, r7
 80087e0:	bd80      	pop	{r7, pc}

080087e2 <mg_xprintf>:

size_t mg_xprintf(void (*out)(char, void *), void *ptr, const char *fmt, ...) {
 80087e2:	b40c      	push	{r2, r3}
 80087e4:	b580      	push	{r7, lr}
 80087e6:	b084      	sub	sp, #16
 80087e8:	af00      	add	r7, sp, #0
 80087ea:	6078      	str	r0, [r7, #4]
 80087ec:	6039      	str	r1, [r7, #0]
  size_t len = 0;
 80087ee:	2300      	movs	r3, #0
 80087f0:	60fb      	str	r3, [r7, #12]
  va_list ap;
  va_start(ap, fmt);
 80087f2:	f107 031c 	add.w	r3, r7, #28
 80087f6:	60bb      	str	r3, [r7, #8]
  len = mg_vxprintf(out, ptr, fmt, &ap);
 80087f8:	f107 0308 	add.w	r3, r7, #8
 80087fc:	69ba      	ldr	r2, [r7, #24]
 80087fe:	6839      	ldr	r1, [r7, #0]
 8008800:	6878      	ldr	r0, [r7, #4]
 8008802:	f000 f809 	bl	8008818 <mg_vxprintf>
 8008806:	60f8      	str	r0, [r7, #12]
  va_end(ap);
  return len;
 8008808:	68fb      	ldr	r3, [r7, #12]
}
 800880a:	4618      	mov	r0, r3
 800880c:	3710      	adds	r7, #16
 800880e:	46bd      	mov	sp, r7
 8008810:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008814:	b002      	add	sp, #8
 8008816:	4770      	bx	lr

08008818 <mg_vxprintf>:

size_t mg_vxprintf(void (*out)(char, void *), void *param, const char *fmt,
                   va_list *ap) {
 8008818:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800881c:	b0a6      	sub	sp, #152	@ 0x98
 800881e:	af02      	add	r7, sp, #8
 8008820:	60f8      	str	r0, [r7, #12]
 8008822:	60b9      	str	r1, [r7, #8]
 8008824:	607a      	str	r2, [r7, #4]
 8008826:	603b      	str	r3, [r7, #0]
  size_t i = 0, n = 0;
 8008828:	2300      	movs	r3, #0
 800882a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800882e:	2300      	movs	r3, #0
 8008830:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  while (fmt[i] != '\0') {
 8008834:	e383      	b.n	8008f3e <mg_vxprintf+0x726>
    if (fmt[i] == '%') {
 8008836:	687a      	ldr	r2, [r7, #4]
 8008838:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800883c:	4413      	add	r3, r2
 800883e:	781b      	ldrb	r3, [r3, #0]
 8008840:	2b25      	cmp	r3, #37	@ 0x25
 8008842:	f040 8369 	bne.w	8008f18 <mg_vxprintf+0x700>
      size_t j, k, x = 0, is_long = 0, w = 0 /* width */, pr = ~0U /* prec */;
 8008846:	2300      	movs	r3, #0
 8008848:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800884a:	2300      	movs	r3, #0
 800884c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800884e:	2300      	movs	r3, #0
 8008850:	677b      	str	r3, [r7, #116]	@ 0x74
 8008852:	f04f 33ff 	mov.w	r3, #4294967295
 8008856:	673b      	str	r3, [r7, #112]	@ 0x70
      char pad = ' ', minus = 0, c = fmt[++i];
 8008858:	2320      	movs	r3, #32
 800885a:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 800885e:	2300      	movs	r3, #0
 8008860:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
 8008864:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008868:	3301      	adds	r3, #1
 800886a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800886e:	687a      	ldr	r2, [r7, #4]
 8008870:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008874:	4413      	add	r3, r2
 8008876:	781b      	ldrb	r3, [r3, #0]
 8008878:	f887 306e 	strb.w	r3, [r7, #110]	@ 0x6e
      if (c == '#') x++, c = fmt[++i];
 800887c:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8008880:	2b23      	cmp	r3, #35	@ 0x23
 8008882:	d10e      	bne.n	80088a2 <mg_vxprintf+0x8a>
 8008884:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8008886:	3301      	adds	r3, #1
 8008888:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800888a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800888e:	3301      	adds	r3, #1
 8008890:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8008894:	687a      	ldr	r2, [r7, #4]
 8008896:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800889a:	4413      	add	r3, r2
 800889c:	781b      	ldrb	r3, [r3, #0]
 800889e:	f887 306e 	strb.w	r3, [r7, #110]	@ 0x6e
      if (c == '-') minus++, c = fmt[++i];
 80088a2:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 80088a6:	2b2d      	cmp	r3, #45	@ 0x2d
 80088a8:	d110      	bne.n	80088cc <mg_vxprintf+0xb4>
 80088aa:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 80088ae:	3301      	adds	r3, #1
 80088b0:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
 80088b4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80088b8:	3301      	adds	r3, #1
 80088ba:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80088be:	687a      	ldr	r2, [r7, #4]
 80088c0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80088c4:	4413      	add	r3, r2
 80088c6:	781b      	ldrb	r3, [r3, #0]
 80088c8:	f887 306e 	strb.w	r3, [r7, #110]	@ 0x6e
      if (c == '0') pad = '0', c = fmt[++i];
 80088cc:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 80088d0:	2b30      	cmp	r3, #48	@ 0x30
 80088d2:	d127      	bne.n	8008924 <mg_vxprintf+0x10c>
 80088d4:	2330      	movs	r3, #48	@ 0x30
 80088d6:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 80088da:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80088de:	3301      	adds	r3, #1
 80088e0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80088e4:	687a      	ldr	r2, [r7, #4]
 80088e6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80088ea:	4413      	add	r3, r2
 80088ec:	781b      	ldrb	r3, [r3, #0]
 80088ee:	f887 306e 	strb.w	r3, [r7, #110]	@ 0x6e
      while (is_digit(c)) w *= 10, w += (size_t) (c - '0'), c = fmt[++i];
 80088f2:	e017      	b.n	8008924 <mg_vxprintf+0x10c>
 80088f4:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 80088f6:	4613      	mov	r3, r2
 80088f8:	009b      	lsls	r3, r3, #2
 80088fa:	4413      	add	r3, r2
 80088fc:	005b      	lsls	r3, r3, #1
 80088fe:	677b      	str	r3, [r7, #116]	@ 0x74
 8008900:	f897 206e 	ldrb.w	r2, [r7, #110]	@ 0x6e
 8008904:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8008906:	4413      	add	r3, r2
 8008908:	3b30      	subs	r3, #48	@ 0x30
 800890a:	677b      	str	r3, [r7, #116]	@ 0x74
 800890c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008910:	3301      	adds	r3, #1
 8008912:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8008916:	687a      	ldr	r2, [r7, #4]
 8008918:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800891c:	4413      	add	r3, r2
 800891e:	781b      	ldrb	r3, [r3, #0]
 8008920:	f887 306e 	strb.w	r3, [r7, #110]	@ 0x6e
 8008924:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8008928:	4618      	mov	r0, r3
 800892a:	f7ff fae5 	bl	8007ef8 <is_digit>
 800892e:	4603      	mov	r3, r0
 8008930:	2b00      	cmp	r3, #0
 8008932:	d1df      	bne.n	80088f4 <mg_vxprintf+0xdc>
      if (c == '.') {
 8008934:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8008938:	2b2e      	cmp	r3, #46	@ 0x2e
 800893a:	d153      	bne.n	80089e4 <mg_vxprintf+0x1cc>
        c = fmt[++i];
 800893c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008940:	3301      	adds	r3, #1
 8008942:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8008946:	687a      	ldr	r2, [r7, #4]
 8008948:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800894c:	4413      	add	r3, r2
 800894e:	781b      	ldrb	r3, [r3, #0]
 8008950:	f887 306e 	strb.w	r3, [r7, #110]	@ 0x6e
        if (c == '*') {
 8008954:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8008958:	2b2a      	cmp	r3, #42	@ 0x2a
 800895a:	d113      	bne.n	8008984 <mg_vxprintf+0x16c>
          pr = (size_t) va_arg(*ap, int);
 800895c:	683b      	ldr	r3, [r7, #0]
 800895e:	681b      	ldr	r3, [r3, #0]
 8008960:	1d19      	adds	r1, r3, #4
 8008962:	683a      	ldr	r2, [r7, #0]
 8008964:	6011      	str	r1, [r2, #0]
 8008966:	681b      	ldr	r3, [r3, #0]
 8008968:	673b      	str	r3, [r7, #112]	@ 0x70
          c = fmt[++i];
 800896a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800896e:	3301      	adds	r3, #1
 8008970:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8008974:	687a      	ldr	r2, [r7, #4]
 8008976:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800897a:	4413      	add	r3, r2
 800897c:	781b      	ldrb	r3, [r3, #0]
 800897e:	f887 306e 	strb.w	r3, [r7, #110]	@ 0x6e
 8008982:	e02f      	b.n	80089e4 <mg_vxprintf+0x1cc>
        } else {
          pr = 0;
 8008984:	2300      	movs	r3, #0
 8008986:	673b      	str	r3, [r7, #112]	@ 0x70
          while (is_digit(c)) pr *= 10, pr += (size_t) (c - '0'), c = fmt[++i];
 8008988:	e017      	b.n	80089ba <mg_vxprintf+0x1a2>
 800898a:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 800898c:	4613      	mov	r3, r2
 800898e:	009b      	lsls	r3, r3, #2
 8008990:	4413      	add	r3, r2
 8008992:	005b      	lsls	r3, r3, #1
 8008994:	673b      	str	r3, [r7, #112]	@ 0x70
 8008996:	f897 206e 	ldrb.w	r2, [r7, #110]	@ 0x6e
 800899a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800899c:	4413      	add	r3, r2
 800899e:	3b30      	subs	r3, #48	@ 0x30
 80089a0:	673b      	str	r3, [r7, #112]	@ 0x70
 80089a2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80089a6:	3301      	adds	r3, #1
 80089a8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80089ac:	687a      	ldr	r2, [r7, #4]
 80089ae:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80089b2:	4413      	add	r3, r2
 80089b4:	781b      	ldrb	r3, [r3, #0]
 80089b6:	f887 306e 	strb.w	r3, [r7, #110]	@ 0x6e
 80089ba:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 80089be:	4618      	mov	r0, r3
 80089c0:	f7ff fa9a 	bl	8007ef8 <is_digit>
 80089c4:	4603      	mov	r3, r0
 80089c6:	2b00      	cmp	r3, #0
 80089c8:	d1df      	bne.n	800898a <mg_vxprintf+0x172>
        }
      }
      while (c == 'h') c = fmt[++i];  // Treat h and hh as int
 80089ca:	e00b      	b.n	80089e4 <mg_vxprintf+0x1cc>
 80089cc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80089d0:	3301      	adds	r3, #1
 80089d2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80089d6:	687a      	ldr	r2, [r7, #4]
 80089d8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80089dc:	4413      	add	r3, r2
 80089de:	781b      	ldrb	r3, [r3, #0]
 80089e0:	f887 306e 	strb.w	r3, [r7, #110]	@ 0x6e
 80089e4:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 80089e8:	2b68      	cmp	r3, #104	@ 0x68
 80089ea:	d0ef      	beq.n	80089cc <mg_vxprintf+0x1b4>
      if (c == 'l') {
 80089ec:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 80089f0:	2b6c      	cmp	r3, #108	@ 0x6c
 80089f2:	d121      	bne.n	8008a38 <mg_vxprintf+0x220>
        is_long++, c = fmt[++i];
 80089f4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80089f6:	3301      	adds	r3, #1
 80089f8:	67bb      	str	r3, [r7, #120]	@ 0x78
 80089fa:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80089fe:	3301      	adds	r3, #1
 8008a00:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8008a04:	687a      	ldr	r2, [r7, #4]
 8008a06:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008a0a:	4413      	add	r3, r2
 8008a0c:	781b      	ldrb	r3, [r3, #0]
 8008a0e:	f887 306e 	strb.w	r3, [r7, #110]	@ 0x6e
        if (c == 'l') is_long++, c = fmt[++i];
 8008a12:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8008a16:	2b6c      	cmp	r3, #108	@ 0x6c
 8008a18:	d10e      	bne.n	8008a38 <mg_vxprintf+0x220>
 8008a1a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008a1c:	3301      	adds	r3, #1
 8008a1e:	67bb      	str	r3, [r7, #120]	@ 0x78
 8008a20:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008a24:	3301      	adds	r3, #1
 8008a26:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8008a2a:	687a      	ldr	r2, [r7, #4]
 8008a2c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008a30:	4413      	add	r3, r2
 8008a32:	781b      	ldrb	r3, [r3, #0]
 8008a34:	f887 306e 	strb.w	r3, [r7, #110]	@ 0x6e
      }
      if (c == 'p') x = 1, is_long = 1;
 8008a38:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8008a3c:	2b70      	cmp	r3, #112	@ 0x70
 8008a3e:	d103      	bne.n	8008a48 <mg_vxprintf+0x230>
 8008a40:	2301      	movs	r3, #1
 8008a42:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8008a44:	2301      	movs	r3, #1
 8008a46:	67bb      	str	r3, [r7, #120]	@ 0x78
      if (c == 'd' || c == 'u' || c == 'x' || c == 'X' || c == 'p' ||
 8008a48:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8008a4c:	2b64      	cmp	r3, #100	@ 0x64
 8008a4e:	d018      	beq.n	8008a82 <mg_vxprintf+0x26a>
 8008a50:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8008a54:	2b75      	cmp	r3, #117	@ 0x75
 8008a56:	d014      	beq.n	8008a82 <mg_vxprintf+0x26a>
 8008a58:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8008a5c:	2b78      	cmp	r3, #120	@ 0x78
 8008a5e:	d010      	beq.n	8008a82 <mg_vxprintf+0x26a>
 8008a60:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8008a64:	2b58      	cmp	r3, #88	@ 0x58
 8008a66:	d00c      	beq.n	8008a82 <mg_vxprintf+0x26a>
 8008a68:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8008a6c:	2b70      	cmp	r3, #112	@ 0x70
 8008a6e:	d008      	beq.n	8008a82 <mg_vxprintf+0x26a>
 8008a70:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8008a74:	2b67      	cmp	r3, #103	@ 0x67
 8008a76:	d004      	beq.n	8008a82 <mg_vxprintf+0x26a>
          c == 'g' || c == 'f') {
 8008a78:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8008a7c:	2b66      	cmp	r3, #102	@ 0x66
 8008a7e:	f040 816c 	bne.w	8008d5a <mg_vxprintf+0x542>
        bool s = (c == 'd'), h = (c == 'x' || c == 'X' || c == 'p');
 8008a82:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8008a86:	2b64      	cmp	r3, #100	@ 0x64
 8008a88:	bf0c      	ite	eq
 8008a8a:	2301      	moveq	r3, #1
 8008a8c:	2300      	movne	r3, #0
 8008a8e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8008a92:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8008a96:	2b78      	cmp	r3, #120	@ 0x78
 8008a98:	d007      	beq.n	8008aaa <mg_vxprintf+0x292>
 8008a9a:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8008a9e:	2b58      	cmp	r3, #88	@ 0x58
 8008aa0:	d003      	beq.n	8008aaa <mg_vxprintf+0x292>
 8008aa2:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8008aa6:	2b70      	cmp	r3, #112	@ 0x70
 8008aa8:	d101      	bne.n	8008aae <mg_vxprintf+0x296>
 8008aaa:	2301      	movs	r3, #1
 8008aac:	e000      	b.n	8008ab0 <mg_vxprintf+0x298>
 8008aae:	2300      	movs	r3, #0
 8008ab0:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e
 8008ab4:	f897 305e 	ldrb.w	r3, [r7, #94]	@ 0x5e
 8008ab8:	f003 0301 	and.w	r3, r3, #1
 8008abc:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e
        char tmp[40];
        size_t xl = x ? 2 : 0;
 8008ac0:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8008ac2:	2b00      	cmp	r3, #0
 8008ac4:	d001      	beq.n	8008aca <mg_vxprintf+0x2b2>
 8008ac6:	2302      	movs	r3, #2
 8008ac8:	e000      	b.n	8008acc <mg_vxprintf+0x2b4>
 8008aca:	2300      	movs	r3, #0
 8008acc:	65bb      	str	r3, [r7, #88]	@ 0x58
        if (c == 'g' || c == 'f') {
 8008ace:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8008ad2:	2b67      	cmp	r3, #103	@ 0x67
 8008ad4:	d003      	beq.n	8008ade <mg_vxprintf+0x2c6>
 8008ad6:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8008ada:	2b66      	cmp	r3, #102	@ 0x66
 8008adc:	d124      	bne.n	8008b28 <mg_vxprintf+0x310>
          double v = va_arg(*ap, double);
 8008ade:	683b      	ldr	r3, [r7, #0]
 8008ae0:	681b      	ldr	r3, [r3, #0]
 8008ae2:	3307      	adds	r3, #7
 8008ae4:	f023 0307 	bic.w	r3, r3, #7
 8008ae8:	f103 0108 	add.w	r1, r3, #8
 8008aec:	683a      	ldr	r2, [r7, #0]
 8008aee:	6011      	str	r1, [r2, #0]
 8008af0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008af4:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
          if (pr == ~0U) pr = 6;
 8008af8:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8008afa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008afe:	d101      	bne.n	8008b04 <mg_vxprintf+0x2ec>
 8008b00:	2306      	movs	r3, #6
 8008b02:	673b      	str	r3, [r7, #112]	@ 0x70
          k = mg_dtoa(tmp, sizeof(tmp), v, (int) pr, c == 'g');
 8008b04:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8008b06:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8008b0a:	2b67      	cmp	r3, #103	@ 0x67
 8008b0c:	bf0c      	ite	eq
 8008b0e:	2301      	moveq	r3, #1
 8008b10:	2300      	movne	r3, #0
 8008b12:	b2db      	uxtb	r3, r3
 8008b14:	f107 0014 	add.w	r0, r7, #20
 8008b18:	ed97 0b10 	vldr	d0, [r7, #64]	@ 0x40
 8008b1c:	2128      	movs	r1, #40	@ 0x28
 8008b1e:	f7ff fad7 	bl	80080d0 <mg_dtoa>
 8008b22:	f8c7 0080 	str.w	r0, [r7, #128]	@ 0x80
        if (c == 'g' || c == 'f') {
 8008b26:	e069      	b.n	8008bfc <mg_vxprintf+0x3e4>
        } else if (is_long == 2) {
 8008b28:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008b2a:	2b02      	cmp	r3, #2
 8008b2c:	d11c      	bne.n	8008b68 <mg_vxprintf+0x350>
          int64_t v = va_arg(*ap, int64_t);
 8008b2e:	683b      	ldr	r3, [r7, #0]
 8008b30:	681b      	ldr	r3, [r3, #0]
 8008b32:	3307      	adds	r3, #7
 8008b34:	f023 0307 	bic.w	r3, r3, #7
 8008b38:	f103 0108 	add.w	r1, r3, #8
 8008b3c:	683a      	ldr	r2, [r7, #0]
 8008b3e:	6011      	str	r1, [r2, #0]
 8008b40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b44:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48
          k = mg_lld(tmp, v, s, h);
 8008b48:	f107 0114 	add.w	r1, r7, #20
 8008b4c:	f897 305e 	ldrb.w	r3, [r7, #94]	@ 0x5e
 8008b50:	9301      	str	r3, [sp, #4]
 8008b52:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8008b56:	9300      	str	r3, [sp, #0]
 8008b58:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8008b5c:	4608      	mov	r0, r1
 8008b5e:	f7ff fd6d 	bl	800863c <mg_lld>
 8008b62:	f8c7 0080 	str.w	r0, [r7, #128]	@ 0x80
 8008b66:	e049      	b.n	8008bfc <mg_vxprintf+0x3e4>
        } else if (is_long == 1) {
 8008b68:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008b6a:	2b01      	cmp	r3, #1
 8008b6c:	d123      	bne.n	8008bb6 <mg_vxprintf+0x39e>
          long v = va_arg(*ap, long);
 8008b6e:	683b      	ldr	r3, [r7, #0]
 8008b70:	681b      	ldr	r3, [r3, #0]
 8008b72:	1d19      	adds	r1, r3, #4
 8008b74:	683a      	ldr	r2, [r7, #0]
 8008b76:	6011      	str	r1, [r2, #0]
 8008b78:	681b      	ldr	r3, [r3, #0]
 8008b7a:	653b      	str	r3, [r7, #80]	@ 0x50
          k = mg_lld(tmp, s ? (int64_t) v : (int64_t) (unsigned long) v, s, h);
 8008b7c:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8008b80:	2b00      	cmp	r3, #0
 8008b82:	d004      	beq.n	8008b8e <mg_vxprintf+0x376>
 8008b84:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008b86:	17da      	asrs	r2, r3, #31
 8008b88:	461c      	mov	r4, r3
 8008b8a:	4615      	mov	r5, r2
 8008b8c:	e003      	b.n	8008b96 <mg_vxprintf+0x37e>
 8008b8e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008b90:	2200      	movs	r2, #0
 8008b92:	461c      	mov	r4, r3
 8008b94:	4615      	mov	r5, r2
 8008b96:	f107 0114 	add.w	r1, r7, #20
 8008b9a:	f897 305e 	ldrb.w	r3, [r7, #94]	@ 0x5e
 8008b9e:	9301      	str	r3, [sp, #4]
 8008ba0:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8008ba4:	9300      	str	r3, [sp, #0]
 8008ba6:	4622      	mov	r2, r4
 8008ba8:	462b      	mov	r3, r5
 8008baa:	4608      	mov	r0, r1
 8008bac:	f7ff fd46 	bl	800863c <mg_lld>
 8008bb0:	f8c7 0080 	str.w	r0, [r7, #128]	@ 0x80
 8008bb4:	e022      	b.n	8008bfc <mg_vxprintf+0x3e4>
        } else {
          int v = va_arg(*ap, int);
 8008bb6:	683b      	ldr	r3, [r7, #0]
 8008bb8:	681b      	ldr	r3, [r3, #0]
 8008bba:	1d19      	adds	r1, r3, #4
 8008bbc:	683a      	ldr	r2, [r7, #0]
 8008bbe:	6011      	str	r1, [r2, #0]
 8008bc0:	681b      	ldr	r3, [r3, #0]
 8008bc2:	657b      	str	r3, [r7, #84]	@ 0x54
          k = mg_lld(tmp, s ? (int64_t) v : (int64_t) (unsigned) v, s, h);
 8008bc4:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8008bc8:	2b00      	cmp	r3, #0
 8008bca:	d004      	beq.n	8008bd6 <mg_vxprintf+0x3be>
 8008bcc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008bce:	17da      	asrs	r2, r3, #31
 8008bd0:	4698      	mov	r8, r3
 8008bd2:	4691      	mov	r9, r2
 8008bd4:	e003      	b.n	8008bde <mg_vxprintf+0x3c6>
 8008bd6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008bd8:	2200      	movs	r2, #0
 8008bda:	4698      	mov	r8, r3
 8008bdc:	4691      	mov	r9, r2
 8008bde:	f107 0114 	add.w	r1, r7, #20
 8008be2:	f897 305e 	ldrb.w	r3, [r7, #94]	@ 0x5e
 8008be6:	9301      	str	r3, [sp, #4]
 8008be8:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8008bec:	9300      	str	r3, [sp, #0]
 8008bee:	4642      	mov	r2, r8
 8008bf0:	464b      	mov	r3, r9
 8008bf2:	4608      	mov	r0, r1
 8008bf4:	f7ff fd22 	bl	800863c <mg_lld>
 8008bf8:	f8c7 0080 	str.w	r0, [r7, #128]	@ 0x80
        }
        for (j = 0; j < xl && w > 0; j++) w--;
 8008bfc:	2300      	movs	r3, #0
 8008bfe:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8008c02:	e007      	b.n	8008c14 <mg_vxprintf+0x3fc>
 8008c04:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8008c06:	3b01      	subs	r3, #1
 8008c08:	677b      	str	r3, [r7, #116]	@ 0x74
 8008c0a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8008c0e:	3301      	adds	r3, #1
 8008c10:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8008c14:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8008c18:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8008c1a:	429a      	cmp	r2, r3
 8008c1c:	d202      	bcs.n	8008c24 <mg_vxprintf+0x40c>
 8008c1e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8008c20:	2b00      	cmp	r3, #0
 8008c22:	d1ef      	bne.n	8008c04 <mg_vxprintf+0x3ec>
        for (j = 0; pad == ' ' && !minus && k < w && j + k < w; j++)
 8008c24:	2300      	movs	r3, #0
 8008c26:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8008c2a:	e011      	b.n	8008c50 <mg_vxprintf+0x438>
          n += scpy(out, param, &pad, 1);
 8008c2c:	f107 023f 	add.w	r2, r7, #63	@ 0x3f
 8008c30:	2301      	movs	r3, #1
 8008c32:	68b9      	ldr	r1, [r7, #8]
 8008c34:	68f8      	ldr	r0, [r7, #12]
 8008c36:	f7ff fdb1 	bl	800879c <scpy>
 8008c3a:	4602      	mov	r2, r0
 8008c3c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8008c40:	4413      	add	r3, r2
 8008c42:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
        for (j = 0; pad == ' ' && !minus && k < w && j + k < w; j++)
 8008c46:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8008c4a:	3301      	adds	r3, #1
 8008c4c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8008c50:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8008c54:	2b20      	cmp	r3, #32
 8008c56:	d110      	bne.n	8008c7a <mg_vxprintf+0x462>
 8008c58:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8008c5c:	2b00      	cmp	r3, #0
 8008c5e:	d10c      	bne.n	8008c7a <mg_vxprintf+0x462>
 8008c60:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8008c64:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8008c66:	429a      	cmp	r2, r3
 8008c68:	d207      	bcs.n	8008c7a <mg_vxprintf+0x462>
 8008c6a:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8008c6e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8008c72:	4413      	add	r3, r2
 8008c74:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8008c76:	429a      	cmp	r2, r3
 8008c78:	d8d8      	bhi.n	8008c2c <mg_vxprintf+0x414>
        n += scpy(out, param, (char *) "0x", xl);
 8008c7a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8008c7c:	4ab7      	ldr	r2, [pc, #732]	@ (8008f5c <mg_vxprintf+0x744>)
 8008c7e:	68b9      	ldr	r1, [r7, #8]
 8008c80:	68f8      	ldr	r0, [r7, #12]
 8008c82:	f7ff fd8b 	bl	800879c <scpy>
 8008c86:	4602      	mov	r2, r0
 8008c88:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8008c8c:	4413      	add	r3, r2
 8008c8e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
        for (j = 0; pad == '0' && k < w && j + k < w; j++)
 8008c92:	2300      	movs	r3, #0
 8008c94:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8008c98:	e011      	b.n	8008cbe <mg_vxprintf+0x4a6>
          n += scpy(out, param, &pad, 1);
 8008c9a:	f107 023f 	add.w	r2, r7, #63	@ 0x3f
 8008c9e:	2301      	movs	r3, #1
 8008ca0:	68b9      	ldr	r1, [r7, #8]
 8008ca2:	68f8      	ldr	r0, [r7, #12]
 8008ca4:	f7ff fd7a 	bl	800879c <scpy>
 8008ca8:	4602      	mov	r2, r0
 8008caa:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8008cae:	4413      	add	r3, r2
 8008cb0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
        for (j = 0; pad == '0' && k < w && j + k < w; j++)
 8008cb4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8008cb8:	3301      	adds	r3, #1
 8008cba:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8008cbe:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8008cc2:	2b30      	cmp	r3, #48	@ 0x30
 8008cc4:	d10c      	bne.n	8008ce0 <mg_vxprintf+0x4c8>
 8008cc6:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8008cca:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8008ccc:	429a      	cmp	r2, r3
 8008cce:	d207      	bcs.n	8008ce0 <mg_vxprintf+0x4c8>
 8008cd0:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8008cd4:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8008cd8:	4413      	add	r3, r2
 8008cda:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8008cdc:	429a      	cmp	r2, r3
 8008cde:	d8dc      	bhi.n	8008c9a <mg_vxprintf+0x482>
        n += scpy(out, param, tmp, k);
 8008ce0:	f107 0214 	add.w	r2, r7, #20
 8008ce4:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8008ce8:	68b9      	ldr	r1, [r7, #8]
 8008cea:	68f8      	ldr	r0, [r7, #12]
 8008cec:	f7ff fd56 	bl	800879c <scpy>
 8008cf0:	4602      	mov	r2, r0
 8008cf2:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8008cf6:	4413      	add	r3, r2
 8008cf8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
        for (j = 0; pad == ' ' && minus && k < w && j + k < w; j++)
 8008cfc:	2300      	movs	r3, #0
 8008cfe:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8008d02:	e011      	b.n	8008d28 <mg_vxprintf+0x510>
          n += scpy(out, param, &pad, 1);
 8008d04:	f107 023f 	add.w	r2, r7, #63	@ 0x3f
 8008d08:	2301      	movs	r3, #1
 8008d0a:	68b9      	ldr	r1, [r7, #8]
 8008d0c:	68f8      	ldr	r0, [r7, #12]
 8008d0e:	f7ff fd45 	bl	800879c <scpy>
 8008d12:	4602      	mov	r2, r0
 8008d14:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8008d18:	4413      	add	r3, r2
 8008d1a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
        for (j = 0; pad == ' ' && minus && k < w && j + k < w; j++)
 8008d1e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8008d22:	3301      	adds	r3, #1
 8008d24:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8008d28:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8008d2c:	2b20      	cmp	r3, #32
 8008d2e:	f040 80ea 	bne.w	8008f06 <mg_vxprintf+0x6ee>
 8008d32:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8008d36:	2b00      	cmp	r3, #0
 8008d38:	f000 80e5 	beq.w	8008f06 <mg_vxprintf+0x6ee>
 8008d3c:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8008d40:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8008d42:	429a      	cmp	r2, r3
 8008d44:	f080 80df 	bcs.w	8008f06 <mg_vxprintf+0x6ee>
 8008d48:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8008d4c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8008d50:	4413      	add	r3, r2
 8008d52:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8008d54:	429a      	cmp	r2, r3
 8008d56:	d8d5      	bhi.n	8008d04 <mg_vxprintf+0x4ec>
          c == 'g' || c == 'f') {
 8008d58:	e0d5      	b.n	8008f06 <mg_vxprintf+0x6ee>
      } else if (c == 'm' || c == 'M') {
 8008d5a:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8008d5e:	2b6d      	cmp	r3, #109	@ 0x6d
 8008d60:	d003      	beq.n	8008d6a <mg_vxprintf+0x552>
 8008d62:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8008d66:	2b4d      	cmp	r3, #77	@ 0x4d
 8008d68:	d128      	bne.n	8008dbc <mg_vxprintf+0x5a4>
        mg_pm_t f = va_arg(*ap, mg_pm_t);
 8008d6a:	683b      	ldr	r3, [r7, #0]
 8008d6c:	681b      	ldr	r3, [r3, #0]
 8008d6e:	1d19      	adds	r1, r3, #4
 8008d70:	683a      	ldr	r2, [r7, #0]
 8008d72:	6011      	str	r1, [r2, #0]
 8008d74:	681b      	ldr	r3, [r3, #0]
 8008d76:	663b      	str	r3, [r7, #96]	@ 0x60
        if (c == 'm') out('"', param);
 8008d78:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8008d7c:	2b6d      	cmp	r3, #109	@ 0x6d
 8008d7e:	d103      	bne.n	8008d88 <mg_vxprintf+0x570>
 8008d80:	68fb      	ldr	r3, [r7, #12]
 8008d82:	68b9      	ldr	r1, [r7, #8]
 8008d84:	2022      	movs	r0, #34	@ 0x22
 8008d86:	4798      	blx	r3
        n += f(out, param, ap);
 8008d88:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008d8a:	683a      	ldr	r2, [r7, #0]
 8008d8c:	68b9      	ldr	r1, [r7, #8]
 8008d8e:	68f8      	ldr	r0, [r7, #12]
 8008d90:	4798      	blx	r3
 8008d92:	4602      	mov	r2, r0
 8008d94:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8008d98:	4413      	add	r3, r2
 8008d9a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
        if (c == 'm') n += 2, out('"', param);
 8008d9e:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8008da2:	2b6d      	cmp	r3, #109	@ 0x6d
 8008da4:	f040 80b1 	bne.w	8008f0a <mg_vxprintf+0x6f2>
 8008da8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8008dac:	3302      	adds	r3, #2
 8008dae:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8008db2:	68fb      	ldr	r3, [r7, #12]
 8008db4:	68b9      	ldr	r1, [r7, #8]
 8008db6:	2022      	movs	r0, #34	@ 0x22
 8008db8:	4798      	blx	r3
      } else if (c == 'm' || c == 'M') {
 8008dba:	e0a6      	b.n	8008f0a <mg_vxprintf+0x6f2>
      } else if (c == 'c') {
 8008dbc:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8008dc0:	2b63      	cmp	r3, #99	@ 0x63
 8008dc2:	d112      	bne.n	8008dea <mg_vxprintf+0x5d2>
        int ch = va_arg(*ap, int);
 8008dc4:	683b      	ldr	r3, [r7, #0]
 8008dc6:	681b      	ldr	r3, [r3, #0]
 8008dc8:	1d19      	adds	r1, r3, #4
 8008dca:	683a      	ldr	r2, [r7, #0]
 8008dcc:	6011      	str	r1, [r2, #0]
 8008dce:	681b      	ldr	r3, [r3, #0]
 8008dd0:	667b      	str	r3, [r7, #100]	@ 0x64
        out((char) ch, param);
 8008dd2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008dd4:	b2da      	uxtb	r2, r3
 8008dd6:	68fb      	ldr	r3, [r7, #12]
 8008dd8:	68b9      	ldr	r1, [r7, #8]
 8008dda:	4610      	mov	r0, r2
 8008ddc:	4798      	blx	r3
        n++;
 8008dde:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8008de2:	3301      	adds	r3, #1
 8008de4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8008de8:	e090      	b.n	8008f0c <mg_vxprintf+0x6f4>
      } else if (c == 's') {
 8008dea:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8008dee:	2b73      	cmp	r3, #115	@ 0x73
 8008df0:	d16b      	bne.n	8008eca <mg_vxprintf+0x6b2>
        char *p = va_arg(*ap, char *);
 8008df2:	683b      	ldr	r3, [r7, #0]
 8008df4:	681b      	ldr	r3, [r3, #0]
 8008df6:	1d19      	adds	r1, r3, #4
 8008df8:	683a      	ldr	r2, [r7, #0]
 8008dfa:	6011      	str	r1, [r2, #0]
 8008dfc:	681b      	ldr	r3, [r3, #0]
 8008dfe:	66bb      	str	r3, [r7, #104]	@ 0x68
        if (pr == ~0U) pr = p == NULL ? 0 : strlen(p);
 8008e00:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8008e02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008e06:	d109      	bne.n	8008e1c <mg_vxprintf+0x604>
 8008e08:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8008e0a:	2b00      	cmp	r3, #0
 8008e0c:	d004      	beq.n	8008e18 <mg_vxprintf+0x600>
 8008e0e:	6eb8      	ldr	r0, [r7, #104]	@ 0x68
 8008e10:	f7f7 fa76 	bl	8000300 <strlen>
 8008e14:	4603      	mov	r3, r0
 8008e16:	e000      	b.n	8008e1a <mg_vxprintf+0x602>
 8008e18:	2300      	movs	r3, #0
 8008e1a:	673b      	str	r3, [r7, #112]	@ 0x70
        for (j = 0; !minus && pr < w && j + pr < w; j++)
 8008e1c:	2300      	movs	r3, #0
 8008e1e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8008e22:	e011      	b.n	8008e48 <mg_vxprintf+0x630>
          n += scpy(out, param, &pad, 1);
 8008e24:	f107 023f 	add.w	r2, r7, #63	@ 0x3f
 8008e28:	2301      	movs	r3, #1
 8008e2a:	68b9      	ldr	r1, [r7, #8]
 8008e2c:	68f8      	ldr	r0, [r7, #12]
 8008e2e:	f7ff fcb5 	bl	800879c <scpy>
 8008e32:	4602      	mov	r2, r0
 8008e34:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8008e38:	4413      	add	r3, r2
 8008e3a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
        for (j = 0; !minus && pr < w && j + pr < w; j++)
 8008e3e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8008e42:	3301      	adds	r3, #1
 8008e44:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8008e48:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8008e4c:	2b00      	cmp	r3, #0
 8008e4e:	d10a      	bne.n	8008e66 <mg_vxprintf+0x64e>
 8008e50:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8008e52:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8008e54:	429a      	cmp	r2, r3
 8008e56:	d206      	bcs.n	8008e66 <mg_vxprintf+0x64e>
 8008e58:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8008e5c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8008e5e:	4413      	add	r3, r2
 8008e60:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8008e62:	429a      	cmp	r2, r3
 8008e64:	d8de      	bhi.n	8008e24 <mg_vxprintf+0x60c>
        n += scpy(out, param, p, pr);
 8008e66:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8008e68:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8008e6a:	68b9      	ldr	r1, [r7, #8]
 8008e6c:	68f8      	ldr	r0, [r7, #12]
 8008e6e:	f7ff fc95 	bl	800879c <scpy>
 8008e72:	4602      	mov	r2, r0
 8008e74:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8008e78:	4413      	add	r3, r2
 8008e7a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
        for (j = 0; minus && pr < w && j + pr < w; j++)
 8008e7e:	2300      	movs	r3, #0
 8008e80:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8008e84:	e011      	b.n	8008eaa <mg_vxprintf+0x692>
          n += scpy(out, param, &pad, 1);
 8008e86:	f107 023f 	add.w	r2, r7, #63	@ 0x3f
 8008e8a:	2301      	movs	r3, #1
 8008e8c:	68b9      	ldr	r1, [r7, #8]
 8008e8e:	68f8      	ldr	r0, [r7, #12]
 8008e90:	f7ff fc84 	bl	800879c <scpy>
 8008e94:	4602      	mov	r2, r0
 8008e96:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8008e9a:	4413      	add	r3, r2
 8008e9c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
        for (j = 0; minus && pr < w && j + pr < w; j++)
 8008ea0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8008ea4:	3301      	adds	r3, #1
 8008ea6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8008eaa:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8008eae:	2b00      	cmp	r3, #0
 8008eb0:	d02c      	beq.n	8008f0c <mg_vxprintf+0x6f4>
 8008eb2:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8008eb4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8008eb6:	429a      	cmp	r2, r3
 8008eb8:	d228      	bcs.n	8008f0c <mg_vxprintf+0x6f4>
 8008eba:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8008ebe:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8008ec0:	4413      	add	r3, r2
 8008ec2:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8008ec4:	429a      	cmp	r2, r3
 8008ec6:	d8de      	bhi.n	8008e86 <mg_vxprintf+0x66e>
 8008ec8:	e020      	b.n	8008f0c <mg_vxprintf+0x6f4>
      } else if (c == '%') {
 8008eca:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8008ece:	2b25      	cmp	r3, #37	@ 0x25
 8008ed0:	d109      	bne.n	8008ee6 <mg_vxprintf+0x6ce>
        out('%', param);
 8008ed2:	68fb      	ldr	r3, [r7, #12]
 8008ed4:	68b9      	ldr	r1, [r7, #8]
 8008ed6:	2025      	movs	r0, #37	@ 0x25
 8008ed8:	4798      	blx	r3
        n++;
 8008eda:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8008ede:	3301      	adds	r3, #1
 8008ee0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8008ee4:	e012      	b.n	8008f0c <mg_vxprintf+0x6f4>
      } else {
        out('%', param);
 8008ee6:	68fb      	ldr	r3, [r7, #12]
 8008ee8:	68b9      	ldr	r1, [r7, #8]
 8008eea:	2025      	movs	r0, #37	@ 0x25
 8008eec:	4798      	blx	r3
        out(c, param);
 8008eee:	f897 206e 	ldrb.w	r2, [r7, #110]	@ 0x6e
 8008ef2:	68fb      	ldr	r3, [r7, #12]
 8008ef4:	68b9      	ldr	r1, [r7, #8]
 8008ef6:	4610      	mov	r0, r2
 8008ef8:	4798      	blx	r3
        n += 2;
 8008efa:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8008efe:	3302      	adds	r3, #2
 8008f00:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8008f04:	e002      	b.n	8008f0c <mg_vxprintf+0x6f4>
          c == 'g' || c == 'f') {
 8008f06:	bf00      	nop
 8008f08:	e000      	b.n	8008f0c <mg_vxprintf+0x6f4>
      } else if (c == 'm' || c == 'M') {
 8008f0a:	bf00      	nop
      }
      i++;
 8008f0c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008f10:	3301      	adds	r3, #1
 8008f12:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8008f16:	e012      	b.n	8008f3e <mg_vxprintf+0x726>
    } else {
      out(fmt[i], param), n++, i++;
 8008f18:	687a      	ldr	r2, [r7, #4]
 8008f1a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008f1e:	4413      	add	r3, r2
 8008f20:	781a      	ldrb	r2, [r3, #0]
 8008f22:	68fb      	ldr	r3, [r7, #12]
 8008f24:	68b9      	ldr	r1, [r7, #8]
 8008f26:	4610      	mov	r0, r2
 8008f28:	4798      	blx	r3
 8008f2a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8008f2e:	3301      	adds	r3, #1
 8008f30:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8008f34:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008f38:	3301      	adds	r3, #1
 8008f3a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  while (fmt[i] != '\0') {
 8008f3e:	687a      	ldr	r2, [r7, #4]
 8008f40:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008f44:	4413      	add	r3, r2
 8008f46:	781b      	ldrb	r3, [r3, #0]
 8008f48:	2b00      	cmp	r3, #0
 8008f4a:	f47f ac74 	bne.w	8008836 <mg_vxprintf+0x1e>
    }
  }
  return n;
 8008f4e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
}
 8008f52:	4618      	mov	r0, r3
 8008f54:	3790      	adds	r7, #144	@ 0x90
 8008f56:	46bd      	mov	sp, r7
 8008f58:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8008f5c:	0802543c 	.word	0x0802543c

08008f60 <mg_fs_open>:





struct mg_fd *mg_fs_open(struct mg_fs *fs, const char *path, int flags) {
 8008f60:	b580      	push	{r7, lr}
 8008f62:	b086      	sub	sp, #24
 8008f64:	af00      	add	r7, sp, #0
 8008f66:	60f8      	str	r0, [r7, #12]
 8008f68:	60b9      	str	r1, [r7, #8]
 8008f6a:	607a      	str	r2, [r7, #4]
  struct mg_fd *fd = (struct mg_fd *) mg_calloc(1, sizeof(*fd));
 8008f6c:	2108      	movs	r1, #8
 8008f6e:	2001      	movs	r0, #1
 8008f70:	f7fd ff4f 	bl	8006e12 <mg_calloc>
 8008f74:	6178      	str	r0, [r7, #20]
  if (fd != NULL) {
 8008f76:	697b      	ldr	r3, [r7, #20]
 8008f78:	2b00      	cmp	r3, #0
 8008f7a:	d013      	beq.n	8008fa4 <mg_fs_open+0x44>
    fd->fd = fs->op(path, flags);
 8008f7c:	68fb      	ldr	r3, [r7, #12]
 8008f7e:	689b      	ldr	r3, [r3, #8]
 8008f80:	6879      	ldr	r1, [r7, #4]
 8008f82:	68b8      	ldr	r0, [r7, #8]
 8008f84:	4798      	blx	r3
 8008f86:	4602      	mov	r2, r0
 8008f88:	697b      	ldr	r3, [r7, #20]
 8008f8a:	601a      	str	r2, [r3, #0]
    fd->fs = fs;
 8008f8c:	697b      	ldr	r3, [r7, #20]
 8008f8e:	68fa      	ldr	r2, [r7, #12]
 8008f90:	605a      	str	r2, [r3, #4]
    if (fd->fd == NULL) {
 8008f92:	697b      	ldr	r3, [r7, #20]
 8008f94:	681b      	ldr	r3, [r3, #0]
 8008f96:	2b00      	cmp	r3, #0
 8008f98:	d104      	bne.n	8008fa4 <mg_fs_open+0x44>
      mg_free(fd);
 8008f9a:	6978      	ldr	r0, [r7, #20]
 8008f9c:	f7fd ff2e 	bl	8006dfc <mg_free>
      fd = NULL;
 8008fa0:	2300      	movs	r3, #0
 8008fa2:	617b      	str	r3, [r7, #20]
    }
  }
  return fd;
 8008fa4:	697b      	ldr	r3, [r7, #20]
}
 8008fa6:	4618      	mov	r0, r3
 8008fa8:	3718      	adds	r7, #24
 8008faa:	46bd      	mov	sp, r7
 8008fac:	bd80      	pop	{r7, pc}

08008fae <mg_fs_close>:

void mg_fs_close(struct mg_fd *fd) {
 8008fae:	b580      	push	{r7, lr}
 8008fb0:	b082      	sub	sp, #8
 8008fb2:	af00      	add	r7, sp, #0
 8008fb4:	6078      	str	r0, [r7, #4]
  if (fd != NULL) {
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	2b00      	cmp	r3, #0
 8008fba:	d009      	beq.n	8008fd0 <mg_fs_close+0x22>
    fd->fs->cl(fd->fd);
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	685b      	ldr	r3, [r3, #4]
 8008fc0:	68db      	ldr	r3, [r3, #12]
 8008fc2:	687a      	ldr	r2, [r7, #4]
 8008fc4:	6812      	ldr	r2, [r2, #0]
 8008fc6:	4610      	mov	r0, r2
 8008fc8:	4798      	blx	r3
    mg_free(fd);
 8008fca:	6878      	ldr	r0, [r7, #4]
 8008fcc:	f7fd ff16 	bl	8006dfc <mg_free>
  }
}
 8008fd0:	bf00      	nop
 8008fd2:	3708      	adds	r7, #8
 8008fd4:	46bd      	mov	sp, r7
 8008fd6:	bd80      	pop	{r7, pc}

08008fd8 <is_dir_prefix>:
  size_t len = 0;
  const char *buf = mg_unpack(path, &len, NULL);
  return mg_str_n(buf, len);
}

static int is_dir_prefix(const char *prefix, size_t n, const char *path) {
 8008fd8:	b580      	push	{r7, lr}
 8008fda:	b084      	sub	sp, #16
 8008fdc:	af00      	add	r7, sp, #0
 8008fde:	60f8      	str	r0, [r7, #12]
 8008fe0:	60b9      	str	r1, [r7, #8]
 8008fe2:	607a      	str	r2, [r7, #4]
  // MG_INFO(("[%.*s] [%s] %c", (int) n, prefix, path, path[n]));
  return n < strlen(path) && strncmp(prefix, path, n) == 0 &&
 8008fe4:	6878      	ldr	r0, [r7, #4]
 8008fe6:	f7f7 f98b 	bl	8000300 <strlen>
 8008fea:	4602      	mov	r2, r0
 8008fec:	68bb      	ldr	r3, [r7, #8]
 8008fee:	4293      	cmp	r3, r2
 8008ff0:	d219      	bcs.n	8009026 <is_dir_prefix+0x4e>
 8008ff2:	68ba      	ldr	r2, [r7, #8]
 8008ff4:	6879      	ldr	r1, [r7, #4]
 8008ff6:	68f8      	ldr	r0, [r7, #12]
 8008ff8:	f01b fa5d 	bl	80244b6 <strncmp>
 8008ffc:	4603      	mov	r3, r0
 8008ffe:	2b00      	cmp	r3, #0
 8009000:	d111      	bne.n	8009026 <is_dir_prefix+0x4e>
 8009002:	68bb      	ldr	r3, [r7, #8]
 8009004:	2b00      	cmp	r3, #0
 8009006:	d00c      	beq.n	8009022 <is_dir_prefix+0x4a>
         (n == 0 || path[n] == '/' || path[n - 1] == '/');
 8009008:	687a      	ldr	r2, [r7, #4]
 800900a:	68bb      	ldr	r3, [r7, #8]
 800900c:	4413      	add	r3, r2
 800900e:	781b      	ldrb	r3, [r3, #0]
 8009010:	2b2f      	cmp	r3, #47	@ 0x2f
 8009012:	d006      	beq.n	8009022 <is_dir_prefix+0x4a>
 8009014:	68bb      	ldr	r3, [r7, #8]
 8009016:	3b01      	subs	r3, #1
 8009018:	687a      	ldr	r2, [r7, #4]
 800901a:	4413      	add	r3, r2
 800901c:	781b      	ldrb	r3, [r3, #0]
 800901e:	2b2f      	cmp	r3, #47	@ 0x2f
 8009020:	d101      	bne.n	8009026 <is_dir_prefix+0x4e>
  return n < strlen(path) && strncmp(prefix, path, n) == 0 &&
 8009022:	2301      	movs	r3, #1
 8009024:	e000      	b.n	8009028 <is_dir_prefix+0x50>
 8009026:	2300      	movs	r3, #0
}
 8009028:	4618      	mov	r0, r3
 800902a:	3710      	adds	r7, #16
 800902c:	46bd      	mov	sp, r7
 800902e:	bd80      	pop	{r7, pc}

08009030 <packed_stat>:

static int packed_stat(const char *path, size_t *size, time_t *mtime) {
 8009030:	b580      	push	{r7, lr}
 8009032:	b088      	sub	sp, #32
 8009034:	af00      	add	r7, sp, #0
 8009036:	60f8      	str	r0, [r7, #12]
 8009038:	60b9      	str	r1, [r7, #8]
 800903a:	607a      	str	r2, [r7, #4]
  const char *p;
  size_t i, n = strlen(path);
 800903c:	68f8      	ldr	r0, [r7, #12]
 800903e:	f7f7 f95f 	bl	8000300 <strlen>
 8009042:	61b8      	str	r0, [r7, #24]
  if (mg_unpack(path, size, mtime)) return MG_FS_READ;  // Regular file
 8009044:	687a      	ldr	r2, [r7, #4]
 8009046:	68b9      	ldr	r1, [r7, #8]
 8009048:	68f8      	ldr	r0, [r7, #12]
 800904a:	f019 fbfb 	bl	8022844 <mg_unpack>
 800904e:	4603      	mov	r3, r0
 8009050:	2b00      	cmp	r3, #0
 8009052:	d001      	beq.n	8009058 <packed_stat+0x28>
 8009054:	2301      	movs	r3, #1
 8009056:	e017      	b.n	8009088 <packed_stat+0x58>
  // Scan all files. If `path` is a dir prefix for any of them, it's a dir
  for (i = 0; (p = mg_unlist(i)) != NULL; i++) {
 8009058:	2300      	movs	r3, #0
 800905a:	61fb      	str	r3, [r7, #28]
 800905c:	e00c      	b.n	8009078 <packed_stat+0x48>
    if (is_dir_prefix(path, n, p)) return MG_FS_DIR;
 800905e:	697a      	ldr	r2, [r7, #20]
 8009060:	69b9      	ldr	r1, [r7, #24]
 8009062:	68f8      	ldr	r0, [r7, #12]
 8009064:	f7ff ffb8 	bl	8008fd8 <is_dir_prefix>
 8009068:	4603      	mov	r3, r0
 800906a:	2b00      	cmp	r3, #0
 800906c:	d001      	beq.n	8009072 <packed_stat+0x42>
 800906e:	2304      	movs	r3, #4
 8009070:	e00a      	b.n	8009088 <packed_stat+0x58>
  for (i = 0; (p = mg_unlist(i)) != NULL; i++) {
 8009072:	69fb      	ldr	r3, [r7, #28]
 8009074:	3301      	adds	r3, #1
 8009076:	61fb      	str	r3, [r7, #28]
 8009078:	69f8      	ldr	r0, [r7, #28]
 800907a:	f019 fbcf 	bl	802281c <mg_unlist>
 800907e:	6178      	str	r0, [r7, #20]
 8009080:	697b      	ldr	r3, [r7, #20]
 8009082:	2b00      	cmp	r3, #0
 8009084:	d1eb      	bne.n	800905e <packed_stat+0x2e>
  }
  return 0;
 8009086:	2300      	movs	r3, #0
}
 8009088:	4618      	mov	r0, r3
 800908a:	3720      	adds	r7, #32
 800908c:	46bd      	mov	sp, r7
 800908e:	bd80      	pop	{r7, pc}

08009090 <packed_list>:

static void packed_list(const char *dir, void (*fn)(const char *, void *),
                        void *userdata) {
 8009090:	b580      	push	{r7, lr}
 8009092:	b0cc      	sub	sp, #304	@ 0x130
 8009094:	af02      	add	r7, sp, #8
 8009096:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 800909a:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 800909e:	6018      	str	r0, [r3, #0]
 80090a0:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 80090a4:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 80090a8:	6019      	str	r1, [r3, #0]
 80090aa:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 80090ae:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 80090b2:	601a      	str	r2, [r3, #0]
  char buf[MG_PATH_MAX], tmp[sizeof(buf)];
  const char *path, *begin, *end;
  size_t i, n = strlen(dir);
 80090b4:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 80090b8:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80090bc:	6818      	ldr	r0, [r3, #0]
 80090be:	f7f7 f91f 	bl	8000300 <strlen>
 80090c2:	f8c7 011c 	str.w	r0, [r7, #284]	@ 0x11c
  tmp[0] = '\0';  // Previously listed entry
 80090c6:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 80090ca:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80090ce:	2200      	movs	r2, #0
 80090d0:	701a      	strb	r2, [r3, #0]
  for (i = 0; (path = mg_unlist(i)) != NULL; i++) {
 80090d2:	2300      	movs	r3, #0
 80090d4:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 80090d8:	e065      	b.n	80091a6 <packed_list+0x116>
    if (!is_dir_prefix(dir, n, path)) continue;
 80090da:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 80090de:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80090e2:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 80090e6:	f8d7 111c 	ldr.w	r1, [r7, #284]	@ 0x11c
 80090ea:	6818      	ldr	r0, [r3, #0]
 80090ec:	f7ff ff74 	bl	8008fd8 <is_dir_prefix>
 80090f0:	4603      	mov	r3, r0
 80090f2:	2b00      	cmp	r3, #0
 80090f4:	d04f      	beq.n	8009196 <packed_list+0x106>
    begin = &path[n + 1];
 80090f6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80090fa:	3301      	adds	r3, #1
 80090fc:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 8009100:	4413      	add	r3, r2
 8009102:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    end = strchr(begin, '/');
 8009106:	212f      	movs	r1, #47	@ 0x2f
 8009108:	f8d7 0114 	ldr.w	r0, [r7, #276]	@ 0x114
 800910c:	f01b f9c6 	bl	802449c <strchr>
 8009110:	f8c7 0124 	str.w	r0, [r7, #292]	@ 0x124
    if (end == NULL) end = begin + strlen(begin);
 8009114:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8009118:	2b00      	cmp	r3, #0
 800911a:	d109      	bne.n	8009130 <packed_list+0xa0>
 800911c:	f8d7 0114 	ldr.w	r0, [r7, #276]	@ 0x114
 8009120:	f7f7 f8ee 	bl	8000300 <strlen>
 8009124:	4602      	mov	r2, r0
 8009126:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800912a:	4413      	add	r3, r2
 800912c:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
    mg_snprintf(buf, sizeof(buf), "%.*s", (int) (end - begin), begin);
 8009130:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 8009134:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009138:	1ad2      	subs	r2, r2, r3
 800913a:	f107 0094 	add.w	r0, r7, #148	@ 0x94
 800913e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009142:	9300      	str	r3, [sp, #0]
 8009144:	4613      	mov	r3, r2
 8009146:	4a20      	ldr	r2, [pc, #128]	@ (80091c8 <packed_list+0x138>)
 8009148:	2180      	movs	r1, #128	@ 0x80
 800914a:	f009 f859 	bl	8012200 <mg_snprintf>
    buf[sizeof(buf) - 1] = '\0';
 800914e:	2300      	movs	r3, #0
 8009150:	f887 3113 	strb.w	r3, [r7, #275]	@ 0x113
    // If this entry has been already listed, skip
    // NOTE: we're assuming that file list is sorted alphabetically
    if (strcmp(buf, tmp) == 0) continue;
 8009154:	f107 0214 	add.w	r2, r7, #20
 8009158:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 800915c:	4611      	mov	r1, r2
 800915e:	4618      	mov	r0, r3
 8009160:	f7f7 f86e 	bl	8000240 <strcmp>
 8009164:	4603      	mov	r3, r0
 8009166:	2b00      	cmp	r3, #0
 8009168:	d017      	beq.n	800919a <packed_list+0x10a>
    fn(buf, userdata);  // Not yet listed, call user function
 800916a:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 800916e:	f5a3 7292 	sub.w	r2, r3, #292	@ 0x124
 8009172:	f107 0094 	add.w	r0, r7, #148	@ 0x94
 8009176:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 800917a:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800917e:	681b      	ldr	r3, [r3, #0]
 8009180:	6811      	ldr	r1, [r2, #0]
 8009182:	4798      	blx	r3
    strcpy(tmp, buf);   // And save this entry as listed
 8009184:	f107 0294 	add.w	r2, r7, #148	@ 0x94
 8009188:	f107 0314 	add.w	r3, r7, #20
 800918c:	4611      	mov	r1, r2
 800918e:	4618      	mov	r0, r3
 8009190:	f01b faf1 	bl	8024776 <strcpy>
 8009194:	e002      	b.n	800919c <packed_list+0x10c>
    if (!is_dir_prefix(dir, n, path)) continue;
 8009196:	bf00      	nop
 8009198:	e000      	b.n	800919c <packed_list+0x10c>
    if (strcmp(buf, tmp) == 0) continue;
 800919a:	bf00      	nop
  for (i = 0; (path = mg_unlist(i)) != NULL; i++) {
 800919c:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80091a0:	3301      	adds	r3, #1
 80091a2:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 80091a6:	f8d7 0120 	ldr.w	r0, [r7, #288]	@ 0x120
 80091aa:	f019 fb37 	bl	802281c <mg_unlist>
 80091ae:	f8c7 0118 	str.w	r0, [r7, #280]	@ 0x118
 80091b2:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 80091b6:	2b00      	cmp	r3, #0
 80091b8:	d18f      	bne.n	80090da <packed_list+0x4a>
  }
}
 80091ba:	bf00      	nop
 80091bc:	bf00      	nop
 80091be:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 80091c2:	46bd      	mov	sp, r7
 80091c4:	bd80      	pop	{r7, pc}
 80091c6:	bf00      	nop
 80091c8:	08025420 	.word	0x08025420

080091cc <packed_open>:

static void *packed_open(const char *path, int flags) {
 80091cc:	b580      	push	{r7, lr}
 80091ce:	b086      	sub	sp, #24
 80091d0:	af00      	add	r7, sp, #0
 80091d2:	6078      	str	r0, [r7, #4]
 80091d4:	6039      	str	r1, [r7, #0]
  size_t size = 0;
 80091d6:	2300      	movs	r3, #0
 80091d8:	60fb      	str	r3, [r7, #12]
  const char *data = mg_unpack(path, &size, NULL);
 80091da:	f107 030c 	add.w	r3, r7, #12
 80091de:	2200      	movs	r2, #0
 80091e0:	4619      	mov	r1, r3
 80091e2:	6878      	ldr	r0, [r7, #4]
 80091e4:	f019 fb2e 	bl	8022844 <mg_unpack>
 80091e8:	6178      	str	r0, [r7, #20]
  struct packed_file *fp = NULL;
 80091ea:	2300      	movs	r3, #0
 80091ec:	613b      	str	r3, [r7, #16]
  if (data == NULL) return NULL;
 80091ee:	697b      	ldr	r3, [r7, #20]
 80091f0:	2b00      	cmp	r3, #0
 80091f2:	d101      	bne.n	80091f8 <packed_open+0x2c>
 80091f4:	2300      	movs	r3, #0
 80091f6:	e015      	b.n	8009224 <packed_open+0x58>
  if (flags & MG_FS_WRITE) return NULL;
 80091f8:	683b      	ldr	r3, [r7, #0]
 80091fa:	f003 0302 	and.w	r3, r3, #2
 80091fe:	2b00      	cmp	r3, #0
 8009200:	d001      	beq.n	8009206 <packed_open+0x3a>
 8009202:	2300      	movs	r3, #0
 8009204:	e00e      	b.n	8009224 <packed_open+0x58>
  if ((fp = (struct packed_file *) mg_calloc(1, sizeof(*fp))) != NULL) {
 8009206:	210c      	movs	r1, #12
 8009208:	2001      	movs	r0, #1
 800920a:	f7fd fe02 	bl	8006e12 <mg_calloc>
 800920e:	6138      	str	r0, [r7, #16]
 8009210:	693b      	ldr	r3, [r7, #16]
 8009212:	2b00      	cmp	r3, #0
 8009214:	d005      	beq.n	8009222 <packed_open+0x56>
    fp->size = size;
 8009216:	68fa      	ldr	r2, [r7, #12]
 8009218:	693b      	ldr	r3, [r7, #16]
 800921a:	605a      	str	r2, [r3, #4]
    fp->data = data;
 800921c:	693b      	ldr	r3, [r7, #16]
 800921e:	697a      	ldr	r2, [r7, #20]
 8009220:	601a      	str	r2, [r3, #0]
  }
  return (void *) fp;
 8009222:	693b      	ldr	r3, [r7, #16]
}
 8009224:	4618      	mov	r0, r3
 8009226:	3718      	adds	r7, #24
 8009228:	46bd      	mov	sp, r7
 800922a:	bd80      	pop	{r7, pc}

0800922c <packed_close>:

static void packed_close(void *fp) {
 800922c:	b580      	push	{r7, lr}
 800922e:	b082      	sub	sp, #8
 8009230:	af00      	add	r7, sp, #0
 8009232:	6078      	str	r0, [r7, #4]
  if (fp != NULL) mg_free(fp);
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	2b00      	cmp	r3, #0
 8009238:	d002      	beq.n	8009240 <packed_close+0x14>
 800923a:	6878      	ldr	r0, [r7, #4]
 800923c:	f7fd fdde 	bl	8006dfc <mg_free>
}
 8009240:	bf00      	nop
 8009242:	3708      	adds	r7, #8
 8009244:	46bd      	mov	sp, r7
 8009246:	bd80      	pop	{r7, pc}

08009248 <packed_read>:

static size_t packed_read(void *fd, void *buf, size_t len) {
 8009248:	b580      	push	{r7, lr}
 800924a:	b086      	sub	sp, #24
 800924c:	af00      	add	r7, sp, #0
 800924e:	60f8      	str	r0, [r7, #12]
 8009250:	60b9      	str	r1, [r7, #8]
 8009252:	607a      	str	r2, [r7, #4]
  struct packed_file *fp = (struct packed_file *) fd;
 8009254:	68fb      	ldr	r3, [r7, #12]
 8009256:	617b      	str	r3, [r7, #20]
  if (fp->pos + len > fp->size) len = fp->size - fp->pos;
 8009258:	697b      	ldr	r3, [r7, #20]
 800925a:	689a      	ldr	r2, [r3, #8]
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	441a      	add	r2, r3
 8009260:	697b      	ldr	r3, [r7, #20]
 8009262:	685b      	ldr	r3, [r3, #4]
 8009264:	429a      	cmp	r2, r3
 8009266:	d905      	bls.n	8009274 <packed_read+0x2c>
 8009268:	697b      	ldr	r3, [r7, #20]
 800926a:	685a      	ldr	r2, [r3, #4]
 800926c:	697b      	ldr	r3, [r7, #20]
 800926e:	689b      	ldr	r3, [r3, #8]
 8009270:	1ad3      	subs	r3, r2, r3
 8009272:	607b      	str	r3, [r7, #4]
  memcpy(buf, &fp->data[fp->pos], len);
 8009274:	697b      	ldr	r3, [r7, #20]
 8009276:	681a      	ldr	r2, [r3, #0]
 8009278:	697b      	ldr	r3, [r7, #20]
 800927a:	689b      	ldr	r3, [r3, #8]
 800927c:	4413      	add	r3, r2
 800927e:	687a      	ldr	r2, [r7, #4]
 8009280:	4619      	mov	r1, r3
 8009282:	68b8      	ldr	r0, [r7, #8]
 8009284:	f01b fa7f 	bl	8024786 <memcpy>
  fp->pos += len;
 8009288:	697b      	ldr	r3, [r7, #20]
 800928a:	689a      	ldr	r2, [r3, #8]
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	441a      	add	r2, r3
 8009290:	697b      	ldr	r3, [r7, #20]
 8009292:	609a      	str	r2, [r3, #8]
  return len;
 8009294:	687b      	ldr	r3, [r7, #4]
}
 8009296:	4618      	mov	r0, r3
 8009298:	3718      	adds	r7, #24
 800929a:	46bd      	mov	sp, r7
 800929c:	bd80      	pop	{r7, pc}

0800929e <packed_write>:

static size_t packed_write(void *fd, const void *buf, size_t len) {
 800929e:	b480      	push	{r7}
 80092a0:	b085      	sub	sp, #20
 80092a2:	af00      	add	r7, sp, #0
 80092a4:	60f8      	str	r0, [r7, #12]
 80092a6:	60b9      	str	r1, [r7, #8]
 80092a8:	607a      	str	r2, [r7, #4]
  (void) fd, (void) buf, (void) len;
  return 0;
 80092aa:	2300      	movs	r3, #0
}
 80092ac:	4618      	mov	r0, r3
 80092ae:	3714      	adds	r7, #20
 80092b0:	46bd      	mov	sp, r7
 80092b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092b6:	4770      	bx	lr

080092b8 <packed_seek>:

static size_t packed_seek(void *fd, size_t offset) {
 80092b8:	b480      	push	{r7}
 80092ba:	b085      	sub	sp, #20
 80092bc:	af00      	add	r7, sp, #0
 80092be:	6078      	str	r0, [r7, #4]
 80092c0:	6039      	str	r1, [r7, #0]
  struct packed_file *fp = (struct packed_file *) fd;
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	60fb      	str	r3, [r7, #12]
  fp->pos = offset;
 80092c6:	68fb      	ldr	r3, [r7, #12]
 80092c8:	683a      	ldr	r2, [r7, #0]
 80092ca:	609a      	str	r2, [r3, #8]
  if (fp->pos > fp->size) fp->pos = fp->size;
 80092cc:	68fb      	ldr	r3, [r7, #12]
 80092ce:	689a      	ldr	r2, [r3, #8]
 80092d0:	68fb      	ldr	r3, [r7, #12]
 80092d2:	685b      	ldr	r3, [r3, #4]
 80092d4:	429a      	cmp	r2, r3
 80092d6:	d903      	bls.n	80092e0 <packed_seek+0x28>
 80092d8:	68fb      	ldr	r3, [r7, #12]
 80092da:	685a      	ldr	r2, [r3, #4]
 80092dc:	68fb      	ldr	r3, [r7, #12]
 80092de:	609a      	str	r2, [r3, #8]
  return fp->pos;
 80092e0:	68fb      	ldr	r3, [r7, #12]
 80092e2:	689b      	ldr	r3, [r3, #8]
}
 80092e4:	4618      	mov	r0, r3
 80092e6:	3714      	adds	r7, #20
 80092e8:	46bd      	mov	sp, r7
 80092ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092ee:	4770      	bx	lr

080092f0 <packed_rename>:

static bool packed_rename(const char *from, const char *to) {
 80092f0:	b480      	push	{r7}
 80092f2:	b083      	sub	sp, #12
 80092f4:	af00      	add	r7, sp, #0
 80092f6:	6078      	str	r0, [r7, #4]
 80092f8:	6039      	str	r1, [r7, #0]
  (void) from, (void) to;
  return false;
 80092fa:	2300      	movs	r3, #0
}
 80092fc:	4618      	mov	r0, r3
 80092fe:	370c      	adds	r7, #12
 8009300:	46bd      	mov	sp, r7
 8009302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009306:	4770      	bx	lr

08009308 <packed_remove>:

static bool packed_remove(const char *path) {
 8009308:	b480      	push	{r7}
 800930a:	b083      	sub	sp, #12
 800930c:	af00      	add	r7, sp, #0
 800930e:	6078      	str	r0, [r7, #4]
  (void) path;
  return false;
 8009310:	2300      	movs	r3, #0
}
 8009312:	4618      	mov	r0, r3
 8009314:	370c      	adds	r7, #12
 8009316:	46bd      	mov	sp, r7
 8009318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800931c:	4770      	bx	lr

0800931e <packed_mkdir>:

static bool packed_mkdir(const char *path) {
 800931e:	b480      	push	{r7}
 8009320:	b083      	sub	sp, #12
 8009322:	af00      	add	r7, sp, #0
 8009324:	6078      	str	r0, [r7, #4]
  (void) path;
  return false;
 8009326:	2300      	movs	r3, #0
}
 8009328:	4618      	mov	r0, r3
 800932a:	370c      	adds	r7, #12
 800932c:	46bd      	mov	sp, r7
 800932e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009332:	4770      	bx	lr

08009334 <p_stat>:
  return mkdir(path, 0775) == 0;
}

#else

static int p_stat(const char *path, size_t *size, time_t *mtime) {
 8009334:	b480      	push	{r7}
 8009336:	b085      	sub	sp, #20
 8009338:	af00      	add	r7, sp, #0
 800933a:	60f8      	str	r0, [r7, #12]
 800933c:	60b9      	str	r1, [r7, #8]
 800933e:	607a      	str	r2, [r7, #4]
  (void) path, (void) size, (void) mtime;
  return 0;
 8009340:	2300      	movs	r3, #0
}
 8009342:	4618      	mov	r0, r3
 8009344:	3714      	adds	r7, #20
 8009346:	46bd      	mov	sp, r7
 8009348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800934c:	4770      	bx	lr

0800934e <p_list>:
static void p_list(const char *path, void (*fn)(const char *, void *),
                   void *userdata) {
 800934e:	b480      	push	{r7}
 8009350:	b085      	sub	sp, #20
 8009352:	af00      	add	r7, sp, #0
 8009354:	60f8      	str	r0, [r7, #12]
 8009356:	60b9      	str	r1, [r7, #8]
 8009358:	607a      	str	r2, [r7, #4]
  (void) path, (void) fn, (void) userdata;
}
 800935a:	bf00      	nop
 800935c:	3714      	adds	r7, #20
 800935e:	46bd      	mov	sp, r7
 8009360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009364:	4770      	bx	lr

08009366 <p_open>:
static void *p_open(const char *path, int flags) {
 8009366:	b480      	push	{r7}
 8009368:	b083      	sub	sp, #12
 800936a:	af00      	add	r7, sp, #0
 800936c:	6078      	str	r0, [r7, #4]
 800936e:	6039      	str	r1, [r7, #0]
  (void) path, (void) flags;
  return NULL;
 8009370:	2300      	movs	r3, #0
}
 8009372:	4618      	mov	r0, r3
 8009374:	370c      	adds	r7, #12
 8009376:	46bd      	mov	sp, r7
 8009378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800937c:	4770      	bx	lr

0800937e <p_close>:
static void p_close(void *fp) {
 800937e:	b480      	push	{r7}
 8009380:	b083      	sub	sp, #12
 8009382:	af00      	add	r7, sp, #0
 8009384:	6078      	str	r0, [r7, #4]
  (void) fp;
}
 8009386:	bf00      	nop
 8009388:	370c      	adds	r7, #12
 800938a:	46bd      	mov	sp, r7
 800938c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009390:	4770      	bx	lr

08009392 <p_read>:
static size_t p_read(void *fd, void *buf, size_t len) {
 8009392:	b480      	push	{r7}
 8009394:	b085      	sub	sp, #20
 8009396:	af00      	add	r7, sp, #0
 8009398:	60f8      	str	r0, [r7, #12]
 800939a:	60b9      	str	r1, [r7, #8]
 800939c:	607a      	str	r2, [r7, #4]
  (void) fd, (void) buf, (void) len;
  return 0;
 800939e:	2300      	movs	r3, #0
}
 80093a0:	4618      	mov	r0, r3
 80093a2:	3714      	adds	r7, #20
 80093a4:	46bd      	mov	sp, r7
 80093a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093aa:	4770      	bx	lr

080093ac <p_write>:
static size_t p_write(void *fd, const void *buf, size_t len) {
 80093ac:	b480      	push	{r7}
 80093ae:	b085      	sub	sp, #20
 80093b0:	af00      	add	r7, sp, #0
 80093b2:	60f8      	str	r0, [r7, #12]
 80093b4:	60b9      	str	r1, [r7, #8]
 80093b6:	607a      	str	r2, [r7, #4]
  (void) fd, (void) buf, (void) len;
  return 0;
 80093b8:	2300      	movs	r3, #0
}
 80093ba:	4618      	mov	r0, r3
 80093bc:	3714      	adds	r7, #20
 80093be:	46bd      	mov	sp, r7
 80093c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093c4:	4770      	bx	lr

080093c6 <p_seek>:
static size_t p_seek(void *fd, size_t offset) {
 80093c6:	b480      	push	{r7}
 80093c8:	b083      	sub	sp, #12
 80093ca:	af00      	add	r7, sp, #0
 80093cc:	6078      	str	r0, [r7, #4]
 80093ce:	6039      	str	r1, [r7, #0]
  (void) fd, (void) offset;
  return (size_t) ~0;
 80093d0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80093d4:	4618      	mov	r0, r3
 80093d6:	370c      	adds	r7, #12
 80093d8:	46bd      	mov	sp, r7
 80093da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093de:	4770      	bx	lr

080093e0 <p_rename>:
static bool p_rename(const char *from, const char *to) {
 80093e0:	b480      	push	{r7}
 80093e2:	b083      	sub	sp, #12
 80093e4:	af00      	add	r7, sp, #0
 80093e6:	6078      	str	r0, [r7, #4]
 80093e8:	6039      	str	r1, [r7, #0]
  (void) from, (void) to;
  return false;
 80093ea:	2300      	movs	r3, #0
}
 80093ec:	4618      	mov	r0, r3
 80093ee:	370c      	adds	r7, #12
 80093f0:	46bd      	mov	sp, r7
 80093f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093f6:	4770      	bx	lr

080093f8 <p_remove>:
static bool p_remove(const char *path) {
 80093f8:	b480      	push	{r7}
 80093fa:	b083      	sub	sp, #12
 80093fc:	af00      	add	r7, sp, #0
 80093fe:	6078      	str	r0, [r7, #4]
  (void) path;
  return false;
 8009400:	2300      	movs	r3, #0
}
 8009402:	4618      	mov	r0, r3
 8009404:	370c      	adds	r7, #12
 8009406:	46bd      	mov	sp, r7
 8009408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800940c:	4770      	bx	lr

0800940e <p_mkdir>:
static bool p_mkdir(const char *path) {
 800940e:	b480      	push	{r7}
 8009410:	b083      	sub	sp, #12
 8009412:	af00      	add	r7, sp, #0
 8009414:	6078      	str	r0, [r7, #4]
  (void) path;
  return false;
 8009416:	2300      	movs	r3, #0
}
 8009418:	4618      	mov	r0, r3
 800941a:	370c      	adds	r7, #12
 800941c:	46bd      	mov	sp, r7
 800941e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009422:	4770      	bx	lr

08009424 <mg_ncasecmp>:





static int mg_ncasecmp(const char *s1, const char *s2, size_t len) {
 8009424:	b480      	push	{r7}
 8009426:	b089      	sub	sp, #36	@ 0x24
 8009428:	af00      	add	r7, sp, #0
 800942a:	60f8      	str	r0, [r7, #12]
 800942c:	60b9      	str	r1, [r7, #8]
 800942e:	607a      	str	r2, [r7, #4]
  int diff = 0;
 8009430:	2300      	movs	r3, #0
 8009432:	61fb      	str	r3, [r7, #28]
  if (len > 0) do {
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	2b00      	cmp	r3, #0
 8009438:	d02d      	beq.n	8009496 <mg_ncasecmp+0x72>
      int c = *s1++, d = *s2++;
 800943a:	68fb      	ldr	r3, [r7, #12]
 800943c:	1c5a      	adds	r2, r3, #1
 800943e:	60fa      	str	r2, [r7, #12]
 8009440:	781b      	ldrb	r3, [r3, #0]
 8009442:	61bb      	str	r3, [r7, #24]
 8009444:	68bb      	ldr	r3, [r7, #8]
 8009446:	1c5a      	adds	r2, r3, #1
 8009448:	60ba      	str	r2, [r7, #8]
 800944a:	781b      	ldrb	r3, [r3, #0]
 800944c:	617b      	str	r3, [r7, #20]
      if (c >= 'A' && c <= 'Z') c += 'a' - 'A';
 800944e:	69bb      	ldr	r3, [r7, #24]
 8009450:	2b40      	cmp	r3, #64	@ 0x40
 8009452:	dd05      	ble.n	8009460 <mg_ncasecmp+0x3c>
 8009454:	69bb      	ldr	r3, [r7, #24]
 8009456:	2b5a      	cmp	r3, #90	@ 0x5a
 8009458:	dc02      	bgt.n	8009460 <mg_ncasecmp+0x3c>
 800945a:	69bb      	ldr	r3, [r7, #24]
 800945c:	3320      	adds	r3, #32
 800945e:	61bb      	str	r3, [r7, #24]
      if (d >= 'A' && d <= 'Z') d += 'a' - 'A';
 8009460:	697b      	ldr	r3, [r7, #20]
 8009462:	2b40      	cmp	r3, #64	@ 0x40
 8009464:	dd05      	ble.n	8009472 <mg_ncasecmp+0x4e>
 8009466:	697b      	ldr	r3, [r7, #20]
 8009468:	2b5a      	cmp	r3, #90	@ 0x5a
 800946a:	dc02      	bgt.n	8009472 <mg_ncasecmp+0x4e>
 800946c:	697b      	ldr	r3, [r7, #20]
 800946e:	3320      	adds	r3, #32
 8009470:	617b      	str	r3, [r7, #20]
      diff = c - d;
 8009472:	69ba      	ldr	r2, [r7, #24]
 8009474:	697b      	ldr	r3, [r7, #20]
 8009476:	1ad3      	subs	r3, r2, r3
 8009478:	61fb      	str	r3, [r7, #28]
    } while (diff == 0 && s1[-1] != '\0' && --len > 0);
 800947a:	69fb      	ldr	r3, [r7, #28]
 800947c:	2b00      	cmp	r3, #0
 800947e:	d10a      	bne.n	8009496 <mg_ncasecmp+0x72>
 8009480:	68fb      	ldr	r3, [r7, #12]
 8009482:	3b01      	subs	r3, #1
 8009484:	781b      	ldrb	r3, [r3, #0]
 8009486:	2b00      	cmp	r3, #0
 8009488:	d005      	beq.n	8009496 <mg_ncasecmp+0x72>
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	3b01      	subs	r3, #1
 800948e:	607b      	str	r3, [r7, #4]
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	2b00      	cmp	r3, #0
 8009494:	d1d1      	bne.n	800943a <mg_ncasecmp+0x16>
  return diff;
 8009496:	69fb      	ldr	r3, [r7, #28]
}
 8009498:	4618      	mov	r0, r3
 800949a:	3724      	adds	r7, #36	@ 0x24
 800949c:	46bd      	mov	sp, r7
 800949e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094a2:	4770      	bx	lr

080094a4 <mg_to_size_t>:

bool mg_to_size_t(struct mg_str str, size_t *val);
bool mg_to_size_t(struct mg_str str, size_t *val) {
 80094a4:	b480      	push	{r7}
 80094a6:	b08b      	sub	sp, #44	@ 0x2c
 80094a8:	af00      	add	r7, sp, #0
 80094aa:	f107 0308 	add.w	r3, r7, #8
 80094ae:	e883 0003 	stmia.w	r3, {r0, r1}
 80094b2:	607a      	str	r2, [r7, #4]
  size_t i = 0, max = (size_t) -1, max2 = max / 10, result = 0, ndigits = 0;
 80094b4:	2300      	movs	r3, #0
 80094b6:	627b      	str	r3, [r7, #36]	@ 0x24
 80094b8:	f04f 33ff 	mov.w	r3, #4294967295
 80094bc:	61bb      	str	r3, [r7, #24]
 80094be:	69bb      	ldr	r3, [r7, #24]
 80094c0:	4a42      	ldr	r2, [pc, #264]	@ (80095cc <mg_to_size_t+0x128>)
 80094c2:	fba2 2303 	umull	r2, r3, r2, r3
 80094c6:	08db      	lsrs	r3, r3, #3
 80094c8:	617b      	str	r3, [r7, #20]
 80094ca:	2300      	movs	r3, #0
 80094cc:	623b      	str	r3, [r7, #32]
 80094ce:	2300      	movs	r3, #0
 80094d0:	61fb      	str	r3, [r7, #28]
  while (i < str.len && (str.buf[i] == ' ' || str.buf[i] == '\t')) i++;
 80094d2:	e002      	b.n	80094da <mg_to_size_t+0x36>
 80094d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80094d6:	3301      	adds	r3, #1
 80094d8:	627b      	str	r3, [r7, #36]	@ 0x24
 80094da:	68fb      	ldr	r3, [r7, #12]
 80094dc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80094de:	429a      	cmp	r2, r3
 80094e0:	d20b      	bcs.n	80094fa <mg_to_size_t+0x56>
 80094e2:	68ba      	ldr	r2, [r7, #8]
 80094e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80094e6:	4413      	add	r3, r2
 80094e8:	781b      	ldrb	r3, [r3, #0]
 80094ea:	2b20      	cmp	r3, #32
 80094ec:	d0f2      	beq.n	80094d4 <mg_to_size_t+0x30>
 80094ee:	68ba      	ldr	r2, [r7, #8]
 80094f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80094f2:	4413      	add	r3, r2
 80094f4:	781b      	ldrb	r3, [r3, #0]
 80094f6:	2b09      	cmp	r3, #9
 80094f8:	d0ec      	beq.n	80094d4 <mg_to_size_t+0x30>
  if (i < str.len && str.buf[i] == '-') return false;
 80094fa:	68fb      	ldr	r3, [r7, #12]
 80094fc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80094fe:	429a      	cmp	r2, r3
 8009500:	d22b      	bcs.n	800955a <mg_to_size_t+0xb6>
 8009502:	68ba      	ldr	r2, [r7, #8]
 8009504:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009506:	4413      	add	r3, r2
 8009508:	781b      	ldrb	r3, [r3, #0]
 800950a:	2b2d      	cmp	r3, #45	@ 0x2d
 800950c:	d125      	bne.n	800955a <mg_to_size_t+0xb6>
 800950e:	2300      	movs	r3, #0
 8009510:	e056      	b.n	80095c0 <mg_to_size_t+0x11c>
  while (i < str.len && str.buf[i] >= '0' && str.buf[i] <= '9') {
    size_t digit = (size_t) (str.buf[i] - '0');
 8009512:	68ba      	ldr	r2, [r7, #8]
 8009514:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009516:	4413      	add	r3, r2
 8009518:	781b      	ldrb	r3, [r3, #0]
 800951a:	3b30      	subs	r3, #48	@ 0x30
 800951c:	613b      	str	r3, [r7, #16]
    if (result > max2) return false;  // Overflow
 800951e:	6a3a      	ldr	r2, [r7, #32]
 8009520:	697b      	ldr	r3, [r7, #20]
 8009522:	429a      	cmp	r2, r3
 8009524:	d901      	bls.n	800952a <mg_to_size_t+0x86>
 8009526:	2300      	movs	r3, #0
 8009528:	e04a      	b.n	80095c0 <mg_to_size_t+0x11c>
    result *= 10;
 800952a:	6a3a      	ldr	r2, [r7, #32]
 800952c:	4613      	mov	r3, r2
 800952e:	009b      	lsls	r3, r3, #2
 8009530:	4413      	add	r3, r2
 8009532:	005b      	lsls	r3, r3, #1
 8009534:	623b      	str	r3, [r7, #32]
    if (result > max - digit) return false;  // Overflow
 8009536:	69ba      	ldr	r2, [r7, #24]
 8009538:	693b      	ldr	r3, [r7, #16]
 800953a:	1ad3      	subs	r3, r2, r3
 800953c:	6a3a      	ldr	r2, [r7, #32]
 800953e:	429a      	cmp	r2, r3
 8009540:	d901      	bls.n	8009546 <mg_to_size_t+0xa2>
 8009542:	2300      	movs	r3, #0
 8009544:	e03c      	b.n	80095c0 <mg_to_size_t+0x11c>
    result += digit;
 8009546:	6a3a      	ldr	r2, [r7, #32]
 8009548:	693b      	ldr	r3, [r7, #16]
 800954a:	4413      	add	r3, r2
 800954c:	623b      	str	r3, [r7, #32]
    i++, ndigits++;
 800954e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009550:	3301      	adds	r3, #1
 8009552:	627b      	str	r3, [r7, #36]	@ 0x24
 8009554:	69fb      	ldr	r3, [r7, #28]
 8009556:	3301      	adds	r3, #1
 8009558:	61fb      	str	r3, [r7, #28]
  while (i < str.len && str.buf[i] >= '0' && str.buf[i] <= '9') {
 800955a:	68fb      	ldr	r3, [r7, #12]
 800955c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800955e:	429a      	cmp	r2, r3
 8009560:	d20f      	bcs.n	8009582 <mg_to_size_t+0xde>
 8009562:	68ba      	ldr	r2, [r7, #8]
 8009564:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009566:	4413      	add	r3, r2
 8009568:	781b      	ldrb	r3, [r3, #0]
 800956a:	2b2f      	cmp	r3, #47	@ 0x2f
 800956c:	d909      	bls.n	8009582 <mg_to_size_t+0xde>
 800956e:	68ba      	ldr	r2, [r7, #8]
 8009570:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009572:	4413      	add	r3, r2
 8009574:	781b      	ldrb	r3, [r3, #0]
 8009576:	2b39      	cmp	r3, #57	@ 0x39
 8009578:	d9cb      	bls.n	8009512 <mg_to_size_t+0x6e>
  }
  while (i < str.len && (str.buf[i] == ' ' || str.buf[i] == '\t')) i++;
 800957a:	e002      	b.n	8009582 <mg_to_size_t+0xde>
 800957c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800957e:	3301      	adds	r3, #1
 8009580:	627b      	str	r3, [r7, #36]	@ 0x24
 8009582:	68fb      	ldr	r3, [r7, #12]
 8009584:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009586:	429a      	cmp	r2, r3
 8009588:	d20b      	bcs.n	80095a2 <mg_to_size_t+0xfe>
 800958a:	68ba      	ldr	r2, [r7, #8]
 800958c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800958e:	4413      	add	r3, r2
 8009590:	781b      	ldrb	r3, [r3, #0]
 8009592:	2b20      	cmp	r3, #32
 8009594:	d0f2      	beq.n	800957c <mg_to_size_t+0xd8>
 8009596:	68ba      	ldr	r2, [r7, #8]
 8009598:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800959a:	4413      	add	r3, r2
 800959c:	781b      	ldrb	r3, [r3, #0]
 800959e:	2b09      	cmp	r3, #9
 80095a0:	d0ec      	beq.n	800957c <mg_to_size_t+0xd8>
  if (ndigits == 0) return false;  // #2322: Content-Length = 1 * DIGIT
 80095a2:	69fb      	ldr	r3, [r7, #28]
 80095a4:	2b00      	cmp	r3, #0
 80095a6:	d101      	bne.n	80095ac <mg_to_size_t+0x108>
 80095a8:	2300      	movs	r3, #0
 80095aa:	e009      	b.n	80095c0 <mg_to_size_t+0x11c>
  if (i != str.len) return false;  // Ditto
 80095ac:	68fb      	ldr	r3, [r7, #12]
 80095ae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80095b0:	429a      	cmp	r2, r3
 80095b2:	d001      	beq.n	80095b8 <mg_to_size_t+0x114>
 80095b4:	2300      	movs	r3, #0
 80095b6:	e003      	b.n	80095c0 <mg_to_size_t+0x11c>
  *val = (size_t) result;
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	6a3a      	ldr	r2, [r7, #32]
 80095bc:	601a      	str	r2, [r3, #0]
  return true;
 80095be:	2301      	movs	r3, #1
}
 80095c0:	4618      	mov	r0, r3
 80095c2:	372c      	adds	r7, #44	@ 0x2c
 80095c4:	46bd      	mov	sp, r7
 80095c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095ca:	4770      	bx	lr
 80095cc:	cccccccd 	.word	0xcccccccd

080095d0 <mg_http_var>:
  } else {
    MG_ERROR(("%lu oom %d->%d ", c->id, (int) c->send.size, (int) need));
  }
}

struct mg_str mg_http_var(struct mg_str buf, struct mg_str name) {
 80095d0:	b082      	sub	sp, #8
 80095d2:	b580      	push	{r7, lr}
 80095d4:	b08e      	sub	sp, #56	@ 0x38
 80095d6:	af02      	add	r7, sp, #8
 80095d8:	60f8      	str	r0, [r7, #12]
 80095da:	1d38      	adds	r0, r7, #4
 80095dc:	e880 0006 	stmia.w	r0, {r1, r2}
 80095e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  struct mg_str entry, k, v, result = mg_str_n(NULL, 0);
 80095e2:	f107 0310 	add.w	r3, r7, #16
 80095e6:	2200      	movs	r2, #0
 80095e8:	2100      	movs	r1, #0
 80095ea:	4618      	mov	r0, r3
 80095ec:	f00c f9ed 	bl	80159ca <mg_str_n>
  while (mg_span(buf, &entry, &buf, '&')) {
 80095f0:	e023      	b.n	800963a <mg_http_var+0x6a>
    if (mg_span(entry, &k, &v, '=') && name.len == k.len &&
 80095f2:	f107 0318 	add.w	r3, r7, #24
 80095f6:	f107 0220 	add.w	r2, r7, #32
 80095fa:	213d      	movs	r1, #61	@ 0x3d
 80095fc:	9100      	str	r1, [sp, #0]
 80095fe:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 8009602:	c903      	ldmia	r1, {r0, r1}
 8009604:	f00c fbc1 	bl	8015d8a <mg_span>
 8009608:	4603      	mov	r3, r0
 800960a:	2b00      	cmp	r3, #0
 800960c:	d015      	beq.n	800963a <mg_http_var+0x6a>
 800960e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8009610:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009612:	429a      	cmp	r2, r3
 8009614:	d111      	bne.n	800963a <mg_http_var+0x6a>
        mg_ncasecmp(name.buf, k.buf, k.len) == 0) {
 8009616:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009618:	6a39      	ldr	r1, [r7, #32]
 800961a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800961c:	4618      	mov	r0, r3
 800961e:	f7ff ff01 	bl	8009424 <mg_ncasecmp>
 8009622:	4603      	mov	r3, r0
    if (mg_span(entry, &k, &v, '=') && name.len == k.len &&
 8009624:	2b00      	cmp	r3, #0
 8009626:	d108      	bne.n	800963a <mg_http_var+0x6a>
      result = v;
 8009628:	f107 0310 	add.w	r3, r7, #16
 800962c:	f107 0218 	add.w	r2, r7, #24
 8009630:	e892 0003 	ldmia.w	r2, {r0, r1}
 8009634:	e883 0003 	stmia.w	r3, {r0, r1}
      break;
 8009638:	e00b      	b.n	8009652 <mg_http_var+0x82>
  while (mg_span(buf, &entry, &buf, '&')) {
 800963a:	1d3b      	adds	r3, r7, #4
 800963c:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 8009640:	2126      	movs	r1, #38	@ 0x26
 8009642:	9100      	str	r1, [sp, #0]
 8009644:	1d39      	adds	r1, r7, #4
 8009646:	c903      	ldmia	r1, {r0, r1}
 8009648:	f00c fb9f 	bl	8015d8a <mg_span>
 800964c:	4603      	mov	r3, r0
 800964e:	2b00      	cmp	r3, #0
 8009650:	d1cf      	bne.n	80095f2 <mg_http_var+0x22>
    }
  }
  return result;
 8009652:	68fb      	ldr	r3, [r7, #12]
 8009654:	461a      	mov	r2, r3
 8009656:	f107 0310 	add.w	r3, r7, #16
 800965a:	e893 0003 	ldmia.w	r3, {r0, r1}
 800965e:	e882 0003 	stmia.w	r2, {r0, r1}
}
 8009662:	68f8      	ldr	r0, [r7, #12]
 8009664:	3730      	adds	r7, #48	@ 0x30
 8009666:	46bd      	mov	sp, r7
 8009668:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800966c:	b002      	add	sp, #8
 800966e:	4770      	bx	lr

08009670 <mg_http_get_var>:

int mg_http_get_var(const struct mg_str *buf, const char *name, char *dst,
                    size_t dst_len) {
 8009670:	b580      	push	{r7, lr}
 8009672:	b08c      	sub	sp, #48	@ 0x30
 8009674:	af02      	add	r7, sp, #8
 8009676:	60f8      	str	r0, [r7, #12]
 8009678:	60b9      	str	r1, [r7, #8]
 800967a:	607a      	str	r2, [r7, #4]
 800967c:	603b      	str	r3, [r7, #0]
  int len;
  if (dst != NULL && dst_len > 0) {
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	2b00      	cmp	r3, #0
 8009682:	d005      	beq.n	8009690 <mg_http_get_var+0x20>
 8009684:	683b      	ldr	r3, [r7, #0]
 8009686:	2b00      	cmp	r3, #0
 8009688:	d002      	beq.n	8009690 <mg_http_get_var+0x20>
    dst[0] = '\0';  // If destination buffer is valid, always nul-terminate it
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	2200      	movs	r2, #0
 800968e:	701a      	strb	r2, [r3, #0]
  }
  if (dst == NULL || dst_len == 0) {
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	2b00      	cmp	r3, #0
 8009694:	d002      	beq.n	800969c <mg_http_get_var+0x2c>
 8009696:	683b      	ldr	r3, [r7, #0]
 8009698:	2b00      	cmp	r3, #0
 800969a:	d103      	bne.n	80096a4 <mg_http_get_var+0x34>
    len = -2;  // Bad destination
 800969c:	f06f 0301 	mvn.w	r3, #1
 80096a0:	627b      	str	r3, [r7, #36]	@ 0x24
 80096a2:	e033      	b.n	800970c <mg_http_get_var+0x9c>
  } else if (buf->buf == NULL || name == NULL || buf->len == 0) {
 80096a4:	68fb      	ldr	r3, [r7, #12]
 80096a6:	681b      	ldr	r3, [r3, #0]
 80096a8:	2b00      	cmp	r3, #0
 80096aa:	d006      	beq.n	80096ba <mg_http_get_var+0x4a>
 80096ac:	68bb      	ldr	r3, [r7, #8]
 80096ae:	2b00      	cmp	r3, #0
 80096b0:	d003      	beq.n	80096ba <mg_http_get_var+0x4a>
 80096b2:	68fb      	ldr	r3, [r7, #12]
 80096b4:	685b      	ldr	r3, [r3, #4]
 80096b6:	2b00      	cmp	r3, #0
 80096b8:	d103      	bne.n	80096c2 <mg_http_get_var+0x52>
    len = -1;  // Bad source
 80096ba:	f04f 33ff 	mov.w	r3, #4294967295
 80096be:	627b      	str	r3, [r7, #36]	@ 0x24
 80096c0:	e024      	b.n	800970c <mg_http_get_var+0x9c>
  } else {
    struct mg_str v = mg_http_var(*buf, mg_str(name));
 80096c2:	f107 031c 	add.w	r3, r7, #28
 80096c6:	68b9      	ldr	r1, [r7, #8]
 80096c8:	4618      	mov	r0, r3
 80096ca:	f00c f961 	bl	8015990 <mg_str_s>
 80096ce:	f107 0014 	add.w	r0, r7, #20
 80096d2:	68fa      	ldr	r2, [r7, #12]
 80096d4:	6a3b      	ldr	r3, [r7, #32]
 80096d6:	9300      	str	r3, [sp, #0]
 80096d8:	69fb      	ldr	r3, [r7, #28]
 80096da:	ca06      	ldmia	r2, {r1, r2}
 80096dc:	f7ff ff78 	bl	80095d0 <mg_http_var>
    if (v.buf == NULL) {
 80096e0:	697b      	ldr	r3, [r7, #20]
 80096e2:	2b00      	cmp	r3, #0
 80096e4:	d103      	bne.n	80096ee <mg_http_get_var+0x7e>
      len = -4;  // Name does not exist
 80096e6:	f06f 0303 	mvn.w	r3, #3
 80096ea:	627b      	str	r3, [r7, #36]	@ 0x24
 80096ec:	e00e      	b.n	800970c <mg_http_get_var+0x9c>
    } else {
      len = mg_url_decode(v.buf, v.len, dst, dst_len, 1);
 80096ee:	6978      	ldr	r0, [r7, #20]
 80096f0:	69b9      	ldr	r1, [r7, #24]
 80096f2:	2301      	movs	r3, #1
 80096f4:	9300      	str	r3, [sp, #0]
 80096f6:	683b      	ldr	r3, [r7, #0]
 80096f8:	687a      	ldr	r2, [r7, #4]
 80096fa:	f000 f82e 	bl	800975a <mg_url_decode>
 80096fe:	6278      	str	r0, [r7, #36]	@ 0x24
      if (len < 0) len = -3;  // Failed to decode
 8009700:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009702:	2b00      	cmp	r3, #0
 8009704:	da02      	bge.n	800970c <mg_http_get_var+0x9c>
 8009706:	f06f 0302 	mvn.w	r3, #2
 800970a:	627b      	str	r3, [r7, #36]	@ 0x24
    }
  }
  return len;
 800970c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800970e:	4618      	mov	r0, r3
 8009710:	3728      	adds	r7, #40	@ 0x28
 8009712:	46bd      	mov	sp, r7
 8009714:	bd80      	pop	{r7, pc}

08009716 <isx>:

static bool isx(int c) {
 8009716:	b480      	push	{r7}
 8009718:	b083      	sub	sp, #12
 800971a:	af00      	add	r7, sp, #0
 800971c:	6078      	str	r0, [r7, #4]
  return (c >= '0' && c <= '9') || (c >= 'a' && c <= 'f') ||
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	2b2f      	cmp	r3, #47	@ 0x2f
 8009722:	dd02      	ble.n	800972a <isx+0x14>
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	2b39      	cmp	r3, #57	@ 0x39
 8009728:	dd0b      	ble.n	8009742 <isx+0x2c>
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	2b60      	cmp	r3, #96	@ 0x60
 800972e:	dd02      	ble.n	8009736 <isx+0x20>
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	2b66      	cmp	r3, #102	@ 0x66
 8009734:	dd05      	ble.n	8009742 <isx+0x2c>
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	2b40      	cmp	r3, #64	@ 0x40
 800973a:	dd04      	ble.n	8009746 <isx+0x30>
         (c >= 'A' && c <= 'F');
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	2b46      	cmp	r3, #70	@ 0x46
 8009740:	dc01      	bgt.n	8009746 <isx+0x30>
  return (c >= '0' && c <= '9') || (c >= 'a' && c <= 'f') ||
 8009742:	2301      	movs	r3, #1
 8009744:	e000      	b.n	8009748 <isx+0x32>
 8009746:	2300      	movs	r3, #0
 8009748:	f003 0301 	and.w	r3, r3, #1
 800974c:	b2db      	uxtb	r3, r3
}
 800974e:	4618      	mov	r0, r3
 8009750:	370c      	adds	r7, #12
 8009752:	46bd      	mov	sp, r7
 8009754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009758:	4770      	bx	lr

0800975a <mg_url_decode>:

int mg_url_decode(const char *src, size_t src_len, char *dst, size_t dst_len,
                  int is_form_url_encoded) {
 800975a:	b580      	push	{r7, lr}
 800975c:	b08a      	sub	sp, #40	@ 0x28
 800975e:	af02      	add	r7, sp, #8
 8009760:	60f8      	str	r0, [r7, #12]
 8009762:	60b9      	str	r1, [r7, #8]
 8009764:	607a      	str	r2, [r7, #4]
 8009766:	603b      	str	r3, [r7, #0]
  size_t i, j;
  for (i = j = 0; i < src_len && j + 1 < dst_len; i++, j++) {
 8009768:	2300      	movs	r3, #0
 800976a:	61bb      	str	r3, [r7, #24]
 800976c:	69bb      	ldr	r3, [r7, #24]
 800976e:	61fb      	str	r3, [r7, #28]
 8009770:	e059      	b.n	8009826 <mg_url_decode+0xcc>
    if (src[i] == '%') {
 8009772:	68fa      	ldr	r2, [r7, #12]
 8009774:	69fb      	ldr	r3, [r7, #28]
 8009776:	4413      	add	r3, r2
 8009778:	781b      	ldrb	r3, [r3, #0]
 800977a:	2b25      	cmp	r3, #37	@ 0x25
 800977c:	d136      	bne.n	80097ec <mg_url_decode+0x92>
      // Use `i + 2 < src_len`, not `i < src_len - 2`, note small src_len
      if (i + 2 < src_len && isx(src[i + 1]) && isx(src[i + 2])) {
 800977e:	69fb      	ldr	r3, [r7, #28]
 8009780:	3302      	adds	r3, #2
 8009782:	68ba      	ldr	r2, [r7, #8]
 8009784:	429a      	cmp	r2, r3
 8009786:	d92e      	bls.n	80097e6 <mg_url_decode+0x8c>
 8009788:	69fb      	ldr	r3, [r7, #28]
 800978a:	3301      	adds	r3, #1
 800978c:	68fa      	ldr	r2, [r7, #12]
 800978e:	4413      	add	r3, r2
 8009790:	781b      	ldrb	r3, [r3, #0]
 8009792:	4618      	mov	r0, r3
 8009794:	f7ff ffbf 	bl	8009716 <isx>
 8009798:	4603      	mov	r3, r0
 800979a:	2b00      	cmp	r3, #0
 800979c:	d023      	beq.n	80097e6 <mg_url_decode+0x8c>
 800979e:	69fb      	ldr	r3, [r7, #28]
 80097a0:	3302      	adds	r3, #2
 80097a2:	68fa      	ldr	r2, [r7, #12]
 80097a4:	4413      	add	r3, r2
 80097a6:	781b      	ldrb	r3, [r3, #0]
 80097a8:	4618      	mov	r0, r3
 80097aa:	f7ff ffb4 	bl	8009716 <isx>
 80097ae:	4603      	mov	r3, r0
 80097b0:	2b00      	cmp	r3, #0
 80097b2:	d018      	beq.n	80097e6 <mg_url_decode+0x8c>
        mg_str_to_num(mg_str_n(src + i + 1, 2), 16, &dst[j], sizeof(uint8_t));
 80097b4:	69fb      	ldr	r3, [r7, #28]
 80097b6:	3301      	adds	r3, #1
 80097b8:	68fa      	ldr	r2, [r7, #12]
 80097ba:	18d1      	adds	r1, r2, r3
 80097bc:	f107 0310 	add.w	r3, r7, #16
 80097c0:	2202      	movs	r2, #2
 80097c2:	4618      	mov	r0, r3
 80097c4:	f00c f901 	bl	80159ca <mg_str_n>
 80097c8:	687a      	ldr	r2, [r7, #4]
 80097ca:	69bb      	ldr	r3, [r7, #24]
 80097cc:	4413      	add	r3, r2
 80097ce:	2201      	movs	r2, #1
 80097d0:	9200      	str	r2, [sp, #0]
 80097d2:	2210      	movs	r2, #16
 80097d4:	f107 0110 	add.w	r1, r7, #16
 80097d8:	c903      	ldmia	r1, {r0, r1}
 80097da:	f00c fb33 	bl	8015e44 <mg_str_to_num>
        i += 2;
 80097de:	69fb      	ldr	r3, [r7, #28]
 80097e0:	3302      	adds	r3, #2
 80097e2:	61fb      	str	r3, [r7, #28]
 80097e4:	e019      	b.n	800981a <mg_url_decode+0xc0>
      } else {
        return -1;
 80097e6:	f04f 33ff 	mov.w	r3, #4294967295
 80097ea:	e03a      	b.n	8009862 <mg_url_decode+0x108>
      }
    } else if (is_form_url_encoded && src[i] == '+') {
 80097ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80097ee:	2b00      	cmp	r3, #0
 80097f0:	d00b      	beq.n	800980a <mg_url_decode+0xb0>
 80097f2:	68fa      	ldr	r2, [r7, #12]
 80097f4:	69fb      	ldr	r3, [r7, #28]
 80097f6:	4413      	add	r3, r2
 80097f8:	781b      	ldrb	r3, [r3, #0]
 80097fa:	2b2b      	cmp	r3, #43	@ 0x2b
 80097fc:	d105      	bne.n	800980a <mg_url_decode+0xb0>
      dst[j] = ' ';
 80097fe:	687a      	ldr	r2, [r7, #4]
 8009800:	69bb      	ldr	r3, [r7, #24]
 8009802:	4413      	add	r3, r2
 8009804:	2220      	movs	r2, #32
 8009806:	701a      	strb	r2, [r3, #0]
 8009808:	e007      	b.n	800981a <mg_url_decode+0xc0>
    } else {
      dst[j] = src[i];
 800980a:	68fa      	ldr	r2, [r7, #12]
 800980c:	69fb      	ldr	r3, [r7, #28]
 800980e:	441a      	add	r2, r3
 8009810:	6879      	ldr	r1, [r7, #4]
 8009812:	69bb      	ldr	r3, [r7, #24]
 8009814:	440b      	add	r3, r1
 8009816:	7812      	ldrb	r2, [r2, #0]
 8009818:	701a      	strb	r2, [r3, #0]
  for (i = j = 0; i < src_len && j + 1 < dst_len; i++, j++) {
 800981a:	69fb      	ldr	r3, [r7, #28]
 800981c:	3301      	adds	r3, #1
 800981e:	61fb      	str	r3, [r7, #28]
 8009820:	69bb      	ldr	r3, [r7, #24]
 8009822:	3301      	adds	r3, #1
 8009824:	61bb      	str	r3, [r7, #24]
 8009826:	69fa      	ldr	r2, [r7, #28]
 8009828:	68bb      	ldr	r3, [r7, #8]
 800982a:	429a      	cmp	r2, r3
 800982c:	d204      	bcs.n	8009838 <mg_url_decode+0xde>
 800982e:	69bb      	ldr	r3, [r7, #24]
 8009830:	3301      	adds	r3, #1
 8009832:	683a      	ldr	r2, [r7, #0]
 8009834:	429a      	cmp	r2, r3
 8009836:	d89c      	bhi.n	8009772 <mg_url_decode+0x18>
    }
  }
  if (j < dst_len) dst[j] = '\0';  // Null-terminate the destination
 8009838:	69ba      	ldr	r2, [r7, #24]
 800983a:	683b      	ldr	r3, [r7, #0]
 800983c:	429a      	cmp	r2, r3
 800983e:	d204      	bcs.n	800984a <mg_url_decode+0xf0>
 8009840:	687a      	ldr	r2, [r7, #4]
 8009842:	69bb      	ldr	r3, [r7, #24]
 8009844:	4413      	add	r3, r2
 8009846:	2200      	movs	r2, #0
 8009848:	701a      	strb	r2, [r3, #0]
  return i >= src_len && j < dst_len ? (int) j : -1;
 800984a:	69fa      	ldr	r2, [r7, #28]
 800984c:	68bb      	ldr	r3, [r7, #8]
 800984e:	429a      	cmp	r2, r3
 8009850:	d305      	bcc.n	800985e <mg_url_decode+0x104>
 8009852:	69ba      	ldr	r2, [r7, #24]
 8009854:	683b      	ldr	r3, [r7, #0]
 8009856:	429a      	cmp	r2, r3
 8009858:	d201      	bcs.n	800985e <mg_url_decode+0x104>
 800985a:	69bb      	ldr	r3, [r7, #24]
 800985c:	e001      	b.n	8009862 <mg_url_decode+0x108>
 800985e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8009862:	4618      	mov	r0, r3
 8009864:	3720      	adds	r7, #32
 8009866:	46bd      	mov	sp, r7
 8009868:	bd80      	pop	{r7, pc}

0800986a <isok>:

static bool isok(uint8_t c) {
 800986a:	b480      	push	{r7}
 800986c:	b083      	sub	sp, #12
 800986e:	af00      	add	r7, sp, #0
 8009870:	4603      	mov	r3, r0
 8009872:	71fb      	strb	r3, [r7, #7]
  return c == '\n' || c == '\r' || c == '\t' || c >= ' ';
 8009874:	79fb      	ldrb	r3, [r7, #7]
 8009876:	2b0a      	cmp	r3, #10
 8009878:	d008      	beq.n	800988c <isok+0x22>
 800987a:	79fb      	ldrb	r3, [r7, #7]
 800987c:	2b0d      	cmp	r3, #13
 800987e:	d005      	beq.n	800988c <isok+0x22>
 8009880:	79fb      	ldrb	r3, [r7, #7]
 8009882:	2b09      	cmp	r3, #9
 8009884:	d002      	beq.n	800988c <isok+0x22>
 8009886:	79fb      	ldrb	r3, [r7, #7]
 8009888:	2b1f      	cmp	r3, #31
 800988a:	d901      	bls.n	8009890 <isok+0x26>
 800988c:	2301      	movs	r3, #1
 800988e:	e000      	b.n	8009892 <isok+0x28>
 8009890:	2300      	movs	r3, #0
 8009892:	f003 0301 	and.w	r3, r3, #1
 8009896:	b2db      	uxtb	r3, r3
}
 8009898:	4618      	mov	r0, r3
 800989a:	370c      	adds	r7, #12
 800989c:	46bd      	mov	sp, r7
 800989e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098a2:	4770      	bx	lr

080098a4 <mg_http_get_request_len>:

int mg_http_get_request_len(const unsigned char *buf, size_t buf_len) {
 80098a4:	b580      	push	{r7, lr}
 80098a6:	b084      	sub	sp, #16
 80098a8:	af00      	add	r7, sp, #0
 80098aa:	6078      	str	r0, [r7, #4]
 80098ac:	6039      	str	r1, [r7, #0]
  size_t i;
  for (i = 0; i < buf_len; i++) {
 80098ae:	2300      	movs	r3, #0
 80098b0:	60fb      	str	r3, [r7, #12]
 80098b2:	e03c      	b.n	800992e <mg_http_get_request_len+0x8a>
    if (!isok(buf[i])) return -1;
 80098b4:	687a      	ldr	r2, [r7, #4]
 80098b6:	68fb      	ldr	r3, [r7, #12]
 80098b8:	4413      	add	r3, r2
 80098ba:	781b      	ldrb	r3, [r3, #0]
 80098bc:	4618      	mov	r0, r3
 80098be:	f7ff ffd4 	bl	800986a <isok>
 80098c2:	4603      	mov	r3, r0
 80098c4:	f083 0301 	eor.w	r3, r3, #1
 80098c8:	b2db      	uxtb	r3, r3
 80098ca:	2b00      	cmp	r3, #0
 80098cc:	d002      	beq.n	80098d4 <mg_http_get_request_len+0x30>
 80098ce:	f04f 33ff 	mov.w	r3, #4294967295
 80098d2:	e031      	b.n	8009938 <mg_http_get_request_len+0x94>
    if ((i > 0 && buf[i] == '\n' && buf[i - 1] == '\n') ||
 80098d4:	68fb      	ldr	r3, [r7, #12]
 80098d6:	2b00      	cmp	r3, #0
 80098d8:	d00c      	beq.n	80098f4 <mg_http_get_request_len+0x50>
 80098da:	687a      	ldr	r2, [r7, #4]
 80098dc:	68fb      	ldr	r3, [r7, #12]
 80098de:	4413      	add	r3, r2
 80098e0:	781b      	ldrb	r3, [r3, #0]
 80098e2:	2b0a      	cmp	r3, #10
 80098e4:	d106      	bne.n	80098f4 <mg_http_get_request_len+0x50>
 80098e6:	68fb      	ldr	r3, [r7, #12]
 80098e8:	3b01      	subs	r3, #1
 80098ea:	687a      	ldr	r2, [r7, #4]
 80098ec:	4413      	add	r3, r2
 80098ee:	781b      	ldrb	r3, [r3, #0]
 80098f0:	2b0a      	cmp	r3, #10
 80098f2:	d016      	beq.n	8009922 <mg_http_get_request_len+0x7e>
 80098f4:	68fb      	ldr	r3, [r7, #12]
 80098f6:	2b03      	cmp	r3, #3
 80098f8:	d916      	bls.n	8009928 <mg_http_get_request_len+0x84>
        (i > 3 && buf[i] == '\n' && buf[i - 1] == '\r' && buf[i - 2] == '\n'))
 80098fa:	687a      	ldr	r2, [r7, #4]
 80098fc:	68fb      	ldr	r3, [r7, #12]
 80098fe:	4413      	add	r3, r2
 8009900:	781b      	ldrb	r3, [r3, #0]
 8009902:	2b0a      	cmp	r3, #10
 8009904:	d110      	bne.n	8009928 <mg_http_get_request_len+0x84>
 8009906:	68fb      	ldr	r3, [r7, #12]
 8009908:	3b01      	subs	r3, #1
 800990a:	687a      	ldr	r2, [r7, #4]
 800990c:	4413      	add	r3, r2
 800990e:	781b      	ldrb	r3, [r3, #0]
 8009910:	2b0d      	cmp	r3, #13
 8009912:	d109      	bne.n	8009928 <mg_http_get_request_len+0x84>
 8009914:	68fb      	ldr	r3, [r7, #12]
 8009916:	3b02      	subs	r3, #2
 8009918:	687a      	ldr	r2, [r7, #4]
 800991a:	4413      	add	r3, r2
 800991c:	781b      	ldrb	r3, [r3, #0]
 800991e:	2b0a      	cmp	r3, #10
 8009920:	d102      	bne.n	8009928 <mg_http_get_request_len+0x84>
      return (int) i + 1;
 8009922:	68fb      	ldr	r3, [r7, #12]
 8009924:	3301      	adds	r3, #1
 8009926:	e007      	b.n	8009938 <mg_http_get_request_len+0x94>
  for (i = 0; i < buf_len; i++) {
 8009928:	68fb      	ldr	r3, [r7, #12]
 800992a:	3301      	adds	r3, #1
 800992c:	60fb      	str	r3, [r7, #12]
 800992e:	68fa      	ldr	r2, [r7, #12]
 8009930:	683b      	ldr	r3, [r7, #0]
 8009932:	429a      	cmp	r2, r3
 8009934:	d3be      	bcc.n	80098b4 <mg_http_get_request_len+0x10>
  }
  return 0;
 8009936:	2300      	movs	r3, #0
}
 8009938:	4618      	mov	r0, r3
 800993a:	3710      	adds	r7, #16
 800993c:	46bd      	mov	sp, r7
 800993e:	bd80      	pop	{r7, pc}

08009940 <mg_http_get_header>:
struct mg_str *mg_http_get_header(struct mg_http_message *h, const char *name) {
 8009940:	b580      	push	{r7, lr}
 8009942:	b088      	sub	sp, #32
 8009944:	af00      	add	r7, sp, #0
 8009946:	6078      	str	r0, [r7, #4]
 8009948:	6039      	str	r1, [r7, #0]
  size_t i, n = strlen(name), max = sizeof(h->headers) / sizeof(h->headers[0]);
 800994a:	6838      	ldr	r0, [r7, #0]
 800994c:	f7f6 fcd8 	bl	8000300 <strlen>
 8009950:	61b8      	str	r0, [r7, #24]
 8009952:	231e      	movs	r3, #30
 8009954:	617b      	str	r3, [r7, #20]
  for (i = 0; i < max && h->headers[i].name.len > 0; i++) {
 8009956:	2300      	movs	r3, #0
 8009958:	61fb      	str	r3, [r7, #28]
 800995a:	e01f      	b.n	800999c <mg_http_get_header+0x5c>
    struct mg_str *k = &h->headers[i].name, *v = &h->headers[i].value;
 800995c:	69fb      	ldr	r3, [r7, #28]
 800995e:	3302      	adds	r3, #2
 8009960:	011b      	lsls	r3, r3, #4
 8009962:	687a      	ldr	r2, [r7, #4]
 8009964:	4413      	add	r3, r2
 8009966:	613b      	str	r3, [r7, #16]
 8009968:	69fb      	ldr	r3, [r7, #28]
 800996a:	011b      	lsls	r3, r3, #4
 800996c:	3328      	adds	r3, #40	@ 0x28
 800996e:	687a      	ldr	r2, [r7, #4]
 8009970:	4413      	add	r3, r2
 8009972:	60fb      	str	r3, [r7, #12]
    if (n == k->len && mg_ncasecmp(k->buf, name, n) == 0) return v;
 8009974:	693b      	ldr	r3, [r7, #16]
 8009976:	685b      	ldr	r3, [r3, #4]
 8009978:	69ba      	ldr	r2, [r7, #24]
 800997a:	429a      	cmp	r2, r3
 800997c:	d10b      	bne.n	8009996 <mg_http_get_header+0x56>
 800997e:	693b      	ldr	r3, [r7, #16]
 8009980:	681b      	ldr	r3, [r3, #0]
 8009982:	69ba      	ldr	r2, [r7, #24]
 8009984:	6839      	ldr	r1, [r7, #0]
 8009986:	4618      	mov	r0, r3
 8009988:	f7ff fd4c 	bl	8009424 <mg_ncasecmp>
 800998c:	4603      	mov	r3, r0
 800998e:	2b00      	cmp	r3, #0
 8009990:	d101      	bne.n	8009996 <mg_http_get_header+0x56>
 8009992:	68fb      	ldr	r3, [r7, #12]
 8009994:	e010      	b.n	80099b8 <mg_http_get_header+0x78>
  for (i = 0; i < max && h->headers[i].name.len > 0; i++) {
 8009996:	69fb      	ldr	r3, [r7, #28]
 8009998:	3301      	adds	r3, #1
 800999a:	61fb      	str	r3, [r7, #28]
 800999c:	69fa      	ldr	r2, [r7, #28]
 800999e:	697b      	ldr	r3, [r7, #20]
 80099a0:	429a      	cmp	r2, r3
 80099a2:	d208      	bcs.n	80099b6 <mg_http_get_header+0x76>
 80099a4:	687a      	ldr	r2, [r7, #4]
 80099a6:	69fb      	ldr	r3, [r7, #28]
 80099a8:	3302      	adds	r3, #2
 80099aa:	011b      	lsls	r3, r3, #4
 80099ac:	4413      	add	r3, r2
 80099ae:	3304      	adds	r3, #4
 80099b0:	681b      	ldr	r3, [r3, #0]
 80099b2:	2b00      	cmp	r3, #0
 80099b4:	d1d2      	bne.n	800995c <mg_http_get_header+0x1c>
  }
  return NULL;
 80099b6:	2300      	movs	r3, #0
}
 80099b8:	4618      	mov	r0, r3
 80099ba:	3720      	adds	r7, #32
 80099bc:	46bd      	mov	sp, r7
 80099be:	bd80      	pop	{r7, pc}

080099c0 <vcb>:

// Is it a valid utf-8 continuation byte
static bool vcb(uint8_t c) {
 80099c0:	b480      	push	{r7}
 80099c2:	b083      	sub	sp, #12
 80099c4:	af00      	add	r7, sp, #0
 80099c6:	4603      	mov	r3, r0
 80099c8:	71fb      	strb	r3, [r7, #7]
  return (c & 0xc0) == 0x80;
 80099ca:	79fb      	ldrb	r3, [r7, #7]
 80099cc:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80099d0:	2b80      	cmp	r3, #128	@ 0x80
 80099d2:	bf0c      	ite	eq
 80099d4:	2301      	moveq	r3, #1
 80099d6:	2300      	movne	r3, #0
 80099d8:	b2db      	uxtb	r3, r3
}
 80099da:	4618      	mov	r0, r3
 80099dc:	370c      	adds	r7, #12
 80099de:	46bd      	mov	sp, r7
 80099e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099e4:	4770      	bx	lr

080099e6 <clen>:

// Get character length (valid utf-8). Used to parse method, URI, headers
static size_t clen(const char *s, const char *end) {
 80099e6:	b580      	push	{r7, lr}
 80099e8:	b086      	sub	sp, #24
 80099ea:	af00      	add	r7, sp, #0
 80099ec:	6078      	str	r0, [r7, #4]
 80099ee:	6039      	str	r1, [r7, #0]
  const unsigned char *u = (unsigned char *) s, c = *u;
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	617b      	str	r3, [r7, #20]
 80099f4:	697b      	ldr	r3, [r7, #20]
 80099f6:	781b      	ldrb	r3, [r3, #0]
 80099f8:	74fb      	strb	r3, [r7, #19]
  long n = (long) (end - s);
 80099fa:	683a      	ldr	r2, [r7, #0]
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	1ad3      	subs	r3, r2, r3
 8009a00:	60fb      	str	r3, [r7, #12]
  if (c > ' ' && c <= '~') return 1;  // Usual ascii printed char
 8009a02:	7cfb      	ldrb	r3, [r7, #19]
 8009a04:	2b20      	cmp	r3, #32
 8009a06:	d904      	bls.n	8009a12 <clen+0x2c>
 8009a08:	7cfb      	ldrb	r3, [r7, #19]
 8009a0a:	2b7e      	cmp	r3, #126	@ 0x7e
 8009a0c:	d801      	bhi.n	8009a12 <clen+0x2c>
 8009a0e:	2301      	movs	r3, #1
 8009a10:	e054      	b.n	8009abc <clen+0xd6>
  if ((c & 0xe0) == 0xc0 && n > 1 && vcb(u[1])) return 2;  // 2-byte UTF8
 8009a12:	7cfb      	ldrb	r3, [r7, #19]
 8009a14:	f003 03e0 	and.w	r3, r3, #224	@ 0xe0
 8009a18:	2bc0      	cmp	r3, #192	@ 0xc0
 8009a1a:	d10d      	bne.n	8009a38 <clen+0x52>
 8009a1c:	68fb      	ldr	r3, [r7, #12]
 8009a1e:	2b01      	cmp	r3, #1
 8009a20:	dd0a      	ble.n	8009a38 <clen+0x52>
 8009a22:	697b      	ldr	r3, [r7, #20]
 8009a24:	3301      	adds	r3, #1
 8009a26:	781b      	ldrb	r3, [r3, #0]
 8009a28:	4618      	mov	r0, r3
 8009a2a:	f7ff ffc9 	bl	80099c0 <vcb>
 8009a2e:	4603      	mov	r3, r0
 8009a30:	2b00      	cmp	r3, #0
 8009a32:	d001      	beq.n	8009a38 <clen+0x52>
 8009a34:	2302      	movs	r3, #2
 8009a36:	e041      	b.n	8009abc <clen+0xd6>
  if ((c & 0xf0) == 0xe0 && n > 2 && vcb(u[1]) && vcb(u[2])) return 3;
 8009a38:	7cfb      	ldrb	r3, [r7, #19]
 8009a3a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8009a3e:	2be0      	cmp	r3, #224	@ 0xe0
 8009a40:	d116      	bne.n	8009a70 <clen+0x8a>
 8009a42:	68fb      	ldr	r3, [r7, #12]
 8009a44:	2b02      	cmp	r3, #2
 8009a46:	dd13      	ble.n	8009a70 <clen+0x8a>
 8009a48:	697b      	ldr	r3, [r7, #20]
 8009a4a:	3301      	adds	r3, #1
 8009a4c:	781b      	ldrb	r3, [r3, #0]
 8009a4e:	4618      	mov	r0, r3
 8009a50:	f7ff ffb6 	bl	80099c0 <vcb>
 8009a54:	4603      	mov	r3, r0
 8009a56:	2b00      	cmp	r3, #0
 8009a58:	d00a      	beq.n	8009a70 <clen+0x8a>
 8009a5a:	697b      	ldr	r3, [r7, #20]
 8009a5c:	3302      	adds	r3, #2
 8009a5e:	781b      	ldrb	r3, [r3, #0]
 8009a60:	4618      	mov	r0, r3
 8009a62:	f7ff ffad 	bl	80099c0 <vcb>
 8009a66:	4603      	mov	r3, r0
 8009a68:	2b00      	cmp	r3, #0
 8009a6a:	d001      	beq.n	8009a70 <clen+0x8a>
 8009a6c:	2303      	movs	r3, #3
 8009a6e:	e025      	b.n	8009abc <clen+0xd6>
  if ((c & 0xf8) == 0xf0 && n > 3 && vcb(u[1]) && vcb(u[2]) && vcb(u[3]))
 8009a70:	7cfb      	ldrb	r3, [r7, #19]
 8009a72:	f003 03f8 	and.w	r3, r3, #248	@ 0xf8
 8009a76:	2bf0      	cmp	r3, #240	@ 0xf0
 8009a78:	d11f      	bne.n	8009aba <clen+0xd4>
 8009a7a:	68fb      	ldr	r3, [r7, #12]
 8009a7c:	2b03      	cmp	r3, #3
 8009a7e:	dd1c      	ble.n	8009aba <clen+0xd4>
 8009a80:	697b      	ldr	r3, [r7, #20]
 8009a82:	3301      	adds	r3, #1
 8009a84:	781b      	ldrb	r3, [r3, #0]
 8009a86:	4618      	mov	r0, r3
 8009a88:	f7ff ff9a 	bl	80099c0 <vcb>
 8009a8c:	4603      	mov	r3, r0
 8009a8e:	2b00      	cmp	r3, #0
 8009a90:	d013      	beq.n	8009aba <clen+0xd4>
 8009a92:	697b      	ldr	r3, [r7, #20]
 8009a94:	3302      	adds	r3, #2
 8009a96:	781b      	ldrb	r3, [r3, #0]
 8009a98:	4618      	mov	r0, r3
 8009a9a:	f7ff ff91 	bl	80099c0 <vcb>
 8009a9e:	4603      	mov	r3, r0
 8009aa0:	2b00      	cmp	r3, #0
 8009aa2:	d00a      	beq.n	8009aba <clen+0xd4>
 8009aa4:	697b      	ldr	r3, [r7, #20]
 8009aa6:	3303      	adds	r3, #3
 8009aa8:	781b      	ldrb	r3, [r3, #0]
 8009aaa:	4618      	mov	r0, r3
 8009aac:	f7ff ff88 	bl	80099c0 <vcb>
 8009ab0:	4603      	mov	r3, r0
 8009ab2:	2b00      	cmp	r3, #0
 8009ab4:	d001      	beq.n	8009aba <clen+0xd4>
    return 4;
 8009ab6:	2304      	movs	r3, #4
 8009ab8:	e000      	b.n	8009abc <clen+0xd6>
  return 0;
 8009aba:	2300      	movs	r3, #0
}
 8009abc:	4618      	mov	r0, r3
 8009abe:	3718      	adds	r7, #24
 8009ac0:	46bd      	mov	sp, r7
 8009ac2:	bd80      	pop	{r7, pc}

08009ac4 <skiptorn>:

// Skip until the newline. Return advanced `s`, or NULL on error
static const char *skiptorn(const char *s, const char *end, struct mg_str *v) {
 8009ac4:	b480      	push	{r7}
 8009ac6:	b085      	sub	sp, #20
 8009ac8:	af00      	add	r7, sp, #0
 8009aca:	60f8      	str	r0, [r7, #12]
 8009acc:	60b9      	str	r1, [r7, #8]
 8009ace:	607a      	str	r2, [r7, #4]
  v->buf = (char *) s;
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	68fa      	ldr	r2, [r7, #12]
 8009ad4:	601a      	str	r2, [r3, #0]
  while (s < end && s[0] != '\n' && s[0] != '\r') s++, v->len++;  // To newline
 8009ad6:	e007      	b.n	8009ae8 <skiptorn+0x24>
 8009ad8:	68fb      	ldr	r3, [r7, #12]
 8009ada:	3301      	adds	r3, #1
 8009adc:	60fb      	str	r3, [r7, #12]
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	685b      	ldr	r3, [r3, #4]
 8009ae2:	1c5a      	adds	r2, r3, #1
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	605a      	str	r2, [r3, #4]
 8009ae8:	68fa      	ldr	r2, [r7, #12]
 8009aea:	68bb      	ldr	r3, [r7, #8]
 8009aec:	429a      	cmp	r2, r3
 8009aee:	d207      	bcs.n	8009b00 <skiptorn+0x3c>
 8009af0:	68fb      	ldr	r3, [r7, #12]
 8009af2:	781b      	ldrb	r3, [r3, #0]
 8009af4:	2b0a      	cmp	r3, #10
 8009af6:	d003      	beq.n	8009b00 <skiptorn+0x3c>
 8009af8:	68fb      	ldr	r3, [r7, #12]
 8009afa:	781b      	ldrb	r3, [r3, #0]
 8009afc:	2b0d      	cmp	r3, #13
 8009afe:	d1eb      	bne.n	8009ad8 <skiptorn+0x14>
  if (s >= end || (s[0] == '\r' && s[1] != '\n')) return NULL;    // Stray \r
 8009b00:	68fa      	ldr	r2, [r7, #12]
 8009b02:	68bb      	ldr	r3, [r7, #8]
 8009b04:	429a      	cmp	r2, r3
 8009b06:	d208      	bcs.n	8009b1a <skiptorn+0x56>
 8009b08:	68fb      	ldr	r3, [r7, #12]
 8009b0a:	781b      	ldrb	r3, [r3, #0]
 8009b0c:	2b0d      	cmp	r3, #13
 8009b0e:	d106      	bne.n	8009b1e <skiptorn+0x5a>
 8009b10:	68fb      	ldr	r3, [r7, #12]
 8009b12:	3301      	adds	r3, #1
 8009b14:	781b      	ldrb	r3, [r3, #0]
 8009b16:	2b0a      	cmp	r3, #10
 8009b18:	d001      	beq.n	8009b1e <skiptorn+0x5a>
 8009b1a:	2300      	movs	r3, #0
 8009b1c:	e017      	b.n	8009b4e <skiptorn+0x8a>
  if (s < end && s[0] == '\r') s++;                               // Skip \r
 8009b1e:	68fa      	ldr	r2, [r7, #12]
 8009b20:	68bb      	ldr	r3, [r7, #8]
 8009b22:	429a      	cmp	r2, r3
 8009b24:	d206      	bcs.n	8009b34 <skiptorn+0x70>
 8009b26:	68fb      	ldr	r3, [r7, #12]
 8009b28:	781b      	ldrb	r3, [r3, #0]
 8009b2a:	2b0d      	cmp	r3, #13
 8009b2c:	d102      	bne.n	8009b34 <skiptorn+0x70>
 8009b2e:	68fb      	ldr	r3, [r7, #12]
 8009b30:	3301      	adds	r3, #1
 8009b32:	60fb      	str	r3, [r7, #12]
  if (s >= end || *s++ != '\n') return NULL;                      // Skip \n
 8009b34:	68fa      	ldr	r2, [r7, #12]
 8009b36:	68bb      	ldr	r3, [r7, #8]
 8009b38:	429a      	cmp	r2, r3
 8009b3a:	d205      	bcs.n	8009b48 <skiptorn+0x84>
 8009b3c:	68fb      	ldr	r3, [r7, #12]
 8009b3e:	1c5a      	adds	r2, r3, #1
 8009b40:	60fa      	str	r2, [r7, #12]
 8009b42:	781b      	ldrb	r3, [r3, #0]
 8009b44:	2b0a      	cmp	r3, #10
 8009b46:	d001      	beq.n	8009b4c <skiptorn+0x88>
 8009b48:	2300      	movs	r3, #0
 8009b4a:	e000      	b.n	8009b4e <skiptorn+0x8a>
  return s;
 8009b4c:	68fb      	ldr	r3, [r7, #12]
}
 8009b4e:	4618      	mov	r0, r3
 8009b50:	3714      	adds	r7, #20
 8009b52:	46bd      	mov	sp, r7
 8009b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b58:	4770      	bx	lr

08009b5a <mg_http_parse_headers>:

static bool mg_http_parse_headers(const char *s, const char *end,
                                  struct mg_http_header *h, size_t max_hdrs) {
 8009b5a:	b580      	push	{r7, lr}
 8009b5c:	b08a      	sub	sp, #40	@ 0x28
 8009b5e:	af00      	add	r7, sp, #0
 8009b60:	60f8      	str	r0, [r7, #12]
 8009b62:	60b9      	str	r1, [r7, #8]
 8009b64:	607a      	str	r2, [r7, #4]
 8009b66:	603b      	str	r3, [r7, #0]
  size_t i, n;
  for (i = 0; i < max_hdrs; i++) {
 8009b68:	2300      	movs	r3, #0
 8009b6a:	627b      	str	r3, [r7, #36]	@ 0x24
 8009b6c:	e09a      	b.n	8009ca4 <mg_http_parse_headers+0x14a>
    struct mg_str k = {NULL, 0}, v = {NULL, 0};
 8009b6e:	2300      	movs	r3, #0
 8009b70:	61bb      	str	r3, [r7, #24]
 8009b72:	2300      	movs	r3, #0
 8009b74:	61fb      	str	r3, [r7, #28]
 8009b76:	2300      	movs	r3, #0
 8009b78:	613b      	str	r3, [r7, #16]
 8009b7a:	2300      	movs	r3, #0
 8009b7c:	617b      	str	r3, [r7, #20]
    if (s >= end) return false;
 8009b7e:	68fa      	ldr	r2, [r7, #12]
 8009b80:	68bb      	ldr	r3, [r7, #8]
 8009b82:	429a      	cmp	r2, r3
 8009b84:	d301      	bcc.n	8009b8a <mg_http_parse_headers+0x30>
 8009b86:	2300      	movs	r3, #0
 8009b88:	e092      	b.n	8009cb0 <mg_http_parse_headers+0x156>
    if (s[0] == '\n' || (s[0] == '\r' && s[1] == '\n')) break;
 8009b8a:	68fb      	ldr	r3, [r7, #12]
 8009b8c:	781b      	ldrb	r3, [r3, #0]
 8009b8e:	2b0a      	cmp	r3, #10
 8009b90:	f000 808d 	beq.w	8009cae <mg_http_parse_headers+0x154>
 8009b94:	68fb      	ldr	r3, [r7, #12]
 8009b96:	781b      	ldrb	r3, [r3, #0]
 8009b98:	2b0d      	cmp	r3, #13
 8009b9a:	d105      	bne.n	8009ba8 <mg_http_parse_headers+0x4e>
 8009b9c:	68fb      	ldr	r3, [r7, #12]
 8009b9e:	3301      	adds	r3, #1
 8009ba0:	781b      	ldrb	r3, [r3, #0]
 8009ba2:	2b0a      	cmp	r3, #10
 8009ba4:	f000 8083 	beq.w	8009cae <mg_http_parse_headers+0x154>
    k.buf = (char *) s;
 8009ba8:	68fb      	ldr	r3, [r7, #12]
 8009baa:	61bb      	str	r3, [r7, #24]
    while (s < end && s[0] != ':' && (n = clen(s, end)) > 0) s += n, k.len += n;
 8009bac:	e007      	b.n	8009bbe <mg_http_parse_headers+0x64>
 8009bae:	68fa      	ldr	r2, [r7, #12]
 8009bb0:	6a3b      	ldr	r3, [r7, #32]
 8009bb2:	4413      	add	r3, r2
 8009bb4:	60fb      	str	r3, [r7, #12]
 8009bb6:	69fa      	ldr	r2, [r7, #28]
 8009bb8:	6a3b      	ldr	r3, [r7, #32]
 8009bba:	4413      	add	r3, r2
 8009bbc:	61fb      	str	r3, [r7, #28]
 8009bbe:	68fa      	ldr	r2, [r7, #12]
 8009bc0:	68bb      	ldr	r3, [r7, #8]
 8009bc2:	429a      	cmp	r2, r3
 8009bc4:	d20b      	bcs.n	8009bde <mg_http_parse_headers+0x84>
 8009bc6:	68fb      	ldr	r3, [r7, #12]
 8009bc8:	781b      	ldrb	r3, [r3, #0]
 8009bca:	2b3a      	cmp	r3, #58	@ 0x3a
 8009bcc:	d007      	beq.n	8009bde <mg_http_parse_headers+0x84>
 8009bce:	68b9      	ldr	r1, [r7, #8]
 8009bd0:	68f8      	ldr	r0, [r7, #12]
 8009bd2:	f7ff ff08 	bl	80099e6 <clen>
 8009bd6:	6238      	str	r0, [r7, #32]
 8009bd8:	6a3b      	ldr	r3, [r7, #32]
 8009bda:	2b00      	cmp	r3, #0
 8009bdc:	d1e7      	bne.n	8009bae <mg_http_parse_headers+0x54>
    if (k.len == 0) return false;                     // Empty name
 8009bde:	69fb      	ldr	r3, [r7, #28]
 8009be0:	2b00      	cmp	r3, #0
 8009be2:	d101      	bne.n	8009be8 <mg_http_parse_headers+0x8e>
 8009be4:	2300      	movs	r3, #0
 8009be6:	e063      	b.n	8009cb0 <mg_http_parse_headers+0x156>
    if (s >= end || clen(s, end) == 0) return false;  // Invalid UTF-8
 8009be8:	68fa      	ldr	r2, [r7, #12]
 8009bea:	68bb      	ldr	r3, [r7, #8]
 8009bec:	429a      	cmp	r2, r3
 8009bee:	d206      	bcs.n	8009bfe <mg_http_parse_headers+0xa4>
 8009bf0:	68b9      	ldr	r1, [r7, #8]
 8009bf2:	68f8      	ldr	r0, [r7, #12]
 8009bf4:	f7ff fef7 	bl	80099e6 <clen>
 8009bf8:	4603      	mov	r3, r0
 8009bfa:	2b00      	cmp	r3, #0
 8009bfc:	d101      	bne.n	8009c02 <mg_http_parse_headers+0xa8>
 8009bfe:	2300      	movs	r3, #0
 8009c00:	e056      	b.n	8009cb0 <mg_http_parse_headers+0x156>
    if (*s++ != ':') return false;  // Invalid, not followed by :
 8009c02:	68fb      	ldr	r3, [r7, #12]
 8009c04:	1c5a      	adds	r2, r3, #1
 8009c06:	60fa      	str	r2, [r7, #12]
 8009c08:	781b      	ldrb	r3, [r3, #0]
 8009c0a:	2b3a      	cmp	r3, #58	@ 0x3a
 8009c0c:	d004      	beq.n	8009c18 <mg_http_parse_headers+0xbe>
 8009c0e:	2300      	movs	r3, #0
 8009c10:	e04e      	b.n	8009cb0 <mg_http_parse_headers+0x156>
    // if (clen(s, end) == 0) return false;        // Invalid UTF-8
    while (s < end && (s[0] == ' ' || s[0] == '\t')) s++;  // Skip spaces
 8009c12:	68fb      	ldr	r3, [r7, #12]
 8009c14:	3301      	adds	r3, #1
 8009c16:	60fb      	str	r3, [r7, #12]
 8009c18:	68fa      	ldr	r2, [r7, #12]
 8009c1a:	68bb      	ldr	r3, [r7, #8]
 8009c1c:	429a      	cmp	r2, r3
 8009c1e:	d207      	bcs.n	8009c30 <mg_http_parse_headers+0xd6>
 8009c20:	68fb      	ldr	r3, [r7, #12]
 8009c22:	781b      	ldrb	r3, [r3, #0]
 8009c24:	2b20      	cmp	r3, #32
 8009c26:	d0f4      	beq.n	8009c12 <mg_http_parse_headers+0xb8>
 8009c28:	68fb      	ldr	r3, [r7, #12]
 8009c2a:	781b      	ldrb	r3, [r3, #0]
 8009c2c:	2b09      	cmp	r3, #9
 8009c2e:	d0f0      	beq.n	8009c12 <mg_http_parse_headers+0xb8>
    if ((s = skiptorn(s, end, &v)) == NULL) return false;
 8009c30:	f107 0310 	add.w	r3, r7, #16
 8009c34:	461a      	mov	r2, r3
 8009c36:	68b9      	ldr	r1, [r7, #8]
 8009c38:	68f8      	ldr	r0, [r7, #12]
 8009c3a:	f7ff ff43 	bl	8009ac4 <skiptorn>
 8009c3e:	60f8      	str	r0, [r7, #12]
 8009c40:	68fb      	ldr	r3, [r7, #12]
 8009c42:	2b00      	cmp	r3, #0
 8009c44:	d104      	bne.n	8009c50 <mg_http_parse_headers+0xf6>
 8009c46:	2300      	movs	r3, #0
 8009c48:	e032      	b.n	8009cb0 <mg_http_parse_headers+0x156>
    while (v.len > 0 && (v.buf[v.len - 1] == ' ' || v.buf[v.len - 1] == '\t')) {
      v.len--;  // Trim spaces
 8009c4a:	697b      	ldr	r3, [r7, #20]
 8009c4c:	3b01      	subs	r3, #1
 8009c4e:	617b      	str	r3, [r7, #20]
    while (v.len > 0 && (v.buf[v.len - 1] == ' ' || v.buf[v.len - 1] == '\t')) {
 8009c50:	697b      	ldr	r3, [r7, #20]
 8009c52:	2b00      	cmp	r3, #0
 8009c54:	d00d      	beq.n	8009c72 <mg_http_parse_headers+0x118>
 8009c56:	693a      	ldr	r2, [r7, #16]
 8009c58:	697b      	ldr	r3, [r7, #20]
 8009c5a:	3b01      	subs	r3, #1
 8009c5c:	4413      	add	r3, r2
 8009c5e:	781b      	ldrb	r3, [r3, #0]
 8009c60:	2b20      	cmp	r3, #32
 8009c62:	d0f2      	beq.n	8009c4a <mg_http_parse_headers+0xf0>
 8009c64:	693a      	ldr	r2, [r7, #16]
 8009c66:	697b      	ldr	r3, [r7, #20]
 8009c68:	3b01      	subs	r3, #1
 8009c6a:	4413      	add	r3, r2
 8009c6c:	781b      	ldrb	r3, [r3, #0]
 8009c6e:	2b09      	cmp	r3, #9
 8009c70:	d0eb      	beq.n	8009c4a <mg_http_parse_headers+0xf0>
    }
    // MG_INFO(("--HH [%.*s] [%.*s]", (int) k.len, k.buf, (int) v.len, v.buf));
    h[i].name = k, h[i].value = v;  // Success. Assign values
 8009c72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009c74:	011b      	lsls	r3, r3, #4
 8009c76:	687a      	ldr	r2, [r7, #4]
 8009c78:	4413      	add	r3, r2
 8009c7a:	461a      	mov	r2, r3
 8009c7c:	f107 0318 	add.w	r3, r7, #24
 8009c80:	e893 0003 	ldmia.w	r3, {r0, r1}
 8009c84:	e882 0003 	stmia.w	r2, {r0, r1}
 8009c88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009c8a:	011b      	lsls	r3, r3, #4
 8009c8c:	687a      	ldr	r2, [r7, #4]
 8009c8e:	4413      	add	r3, r2
 8009c90:	3308      	adds	r3, #8
 8009c92:	f107 0210 	add.w	r2, r7, #16
 8009c96:	e892 0003 	ldmia.w	r2, {r0, r1}
 8009c9a:	e883 0003 	stmia.w	r3, {r0, r1}
  for (i = 0; i < max_hdrs; i++) {
 8009c9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009ca0:	3301      	adds	r3, #1
 8009ca2:	627b      	str	r3, [r7, #36]	@ 0x24
 8009ca4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009ca6:	683b      	ldr	r3, [r7, #0]
 8009ca8:	429a      	cmp	r2, r3
 8009caa:	f4ff af60 	bcc.w	8009b6e <mg_http_parse_headers+0x14>
  }
  return true;
 8009cae:	2301      	movs	r3, #1
}
 8009cb0:	4618      	mov	r0, r3
 8009cb2:	3728      	adds	r7, #40	@ 0x28
 8009cb4:	46bd      	mov	sp, r7
 8009cb6:	bd80      	pop	{r7, pc}

08009cb8 <mg_http_parse>:

int mg_http_parse(const char *s, size_t len, struct mg_http_message *hm) {
 8009cb8:	b580      	push	{r7, lr}
 8009cba:	b092      	sub	sp, #72	@ 0x48
 8009cbc:	af00      	add	r7, sp, #0
 8009cbe:	60f8      	str	r0, [r7, #12]
 8009cc0:	60b9      	str	r1, [r7, #8]
 8009cc2:	607a      	str	r2, [r7, #4]
  int is_response, req_len = mg_http_get_request_len((unsigned char *) s, len);
 8009cc4:	68b9      	ldr	r1, [r7, #8]
 8009cc6:	68f8      	ldr	r0, [r7, #12]
 8009cc8:	f7ff fdec 	bl	80098a4 <mg_http_get_request_len>
 8009ccc:	6478      	str	r0, [r7, #68]	@ 0x44
  const char *end = s == NULL ? NULL : s + req_len, *qs;  // Cannot add to NULL
 8009cce:	68fb      	ldr	r3, [r7, #12]
 8009cd0:	2b00      	cmp	r3, #0
 8009cd2:	d003      	beq.n	8009cdc <mg_http_parse+0x24>
 8009cd4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009cd6:	68fa      	ldr	r2, [r7, #12]
 8009cd8:	4413      	add	r3, r2
 8009cda:	e000      	b.n	8009cde <mg_http_parse+0x26>
 8009cdc:	2300      	movs	r3, #0
 8009cde:	643b      	str	r3, [r7, #64]	@ 0x40
  const struct mg_str *cl;
  size_t n;
  bool version_prefix_valid;

  memset(hm, 0, sizeof(*hm));
 8009ce0:	f44f 7206 	mov.w	r2, #536	@ 0x218
 8009ce4:	2100      	movs	r1, #0
 8009ce6:	6878      	ldr	r0, [r7, #4]
 8009ce8:	f01a fbd0 	bl	802448c <memset>
  if (req_len <= 0) return req_len;
 8009cec:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009cee:	2b00      	cmp	r3, #0
 8009cf0:	dc01      	bgt.n	8009cf6 <mg_http_parse+0x3e>
 8009cf2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009cf4:	e18f      	b.n	800a016 <mg_http_parse+0x35e>

  hm->message.buf = hm->head.buf = (char *) s;
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	68fa      	ldr	r2, [r7, #12]
 8009cfa:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210
  hm->body.buf = (char *) end;
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8009d0e:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
  hm->head.len = (size_t) req_len;
 8009d12:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c
  hm->message.len = hm->body.len = (size_t) -1;  // Set body length to infinite
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	f04f 32ff 	mov.w	r2, #4294967295
 8009d20:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

  // Parse request line
  hm->method.buf = (char *) s;
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	68fa      	ldr	r2, [r7, #12]
 8009d34:	601a      	str	r2, [r3, #0]
  while (s < end && (n = clen(s, end)) > 0) s += n, hm->method.len += n;
 8009d36:	e009      	b.n	8009d4c <mg_http_parse+0x94>
 8009d38:	68fa      	ldr	r2, [r7, #12]
 8009d3a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009d3c:	4413      	add	r3, r2
 8009d3e:	60fb      	str	r3, [r7, #12]
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	685a      	ldr	r2, [r3, #4]
 8009d44:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009d46:	441a      	add	r2, r3
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	605a      	str	r2, [r3, #4]
 8009d4c:	68fa      	ldr	r2, [r7, #12]
 8009d4e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009d50:	429a      	cmp	r2, r3
 8009d52:	d20b      	bcs.n	8009d6c <mg_http_parse+0xb4>
 8009d54:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009d56:	68f8      	ldr	r0, [r7, #12]
 8009d58:	f7ff fe45 	bl	80099e6 <clen>
 8009d5c:	63f8      	str	r0, [r7, #60]	@ 0x3c
 8009d5e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009d60:	2b00      	cmp	r3, #0
 8009d62:	d1e9      	bne.n	8009d38 <mg_http_parse+0x80>
  while (s < end && s[0] == ' ') s++;  // Skip spaces
 8009d64:	e002      	b.n	8009d6c <mg_http_parse+0xb4>
 8009d66:	68fb      	ldr	r3, [r7, #12]
 8009d68:	3301      	adds	r3, #1
 8009d6a:	60fb      	str	r3, [r7, #12]
 8009d6c:	68fa      	ldr	r2, [r7, #12]
 8009d6e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009d70:	429a      	cmp	r2, r3
 8009d72:	d203      	bcs.n	8009d7c <mg_http_parse+0xc4>
 8009d74:	68fb      	ldr	r3, [r7, #12]
 8009d76:	781b      	ldrb	r3, [r3, #0]
 8009d78:	2b20      	cmp	r3, #32
 8009d7a:	d0f4      	beq.n	8009d66 <mg_http_parse+0xae>
  hm->uri.buf = (char *) s;
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	68fa      	ldr	r2, [r7, #12]
 8009d80:	609a      	str	r2, [r3, #8]
  while (s < end && (n = clen(s, end)) > 0) s += n, hm->uri.len += n;
 8009d82:	e009      	b.n	8009d98 <mg_http_parse+0xe0>
 8009d84:	68fa      	ldr	r2, [r7, #12]
 8009d86:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009d88:	4413      	add	r3, r2
 8009d8a:	60fb      	str	r3, [r7, #12]
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	68da      	ldr	r2, [r3, #12]
 8009d90:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009d92:	441a      	add	r2, r3
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	60da      	str	r2, [r3, #12]
 8009d98:	68fa      	ldr	r2, [r7, #12]
 8009d9a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009d9c:	429a      	cmp	r2, r3
 8009d9e:	d20b      	bcs.n	8009db8 <mg_http_parse+0x100>
 8009da0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009da2:	68f8      	ldr	r0, [r7, #12]
 8009da4:	f7ff fe1f 	bl	80099e6 <clen>
 8009da8:	63f8      	str	r0, [r7, #60]	@ 0x3c
 8009daa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009dac:	2b00      	cmp	r3, #0
 8009dae:	d1e9      	bne.n	8009d84 <mg_http_parse+0xcc>
  while (s < end && s[0] == ' ') s++;  // Skip spaces
 8009db0:	e002      	b.n	8009db8 <mg_http_parse+0x100>
 8009db2:	68fb      	ldr	r3, [r7, #12]
 8009db4:	3301      	adds	r3, #1
 8009db6:	60fb      	str	r3, [r7, #12]
 8009db8:	68fa      	ldr	r2, [r7, #12]
 8009dba:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009dbc:	429a      	cmp	r2, r3
 8009dbe:	d203      	bcs.n	8009dc8 <mg_http_parse+0x110>
 8009dc0:	68fb      	ldr	r3, [r7, #12]
 8009dc2:	781b      	ldrb	r3, [r3, #0]
 8009dc4:	2b20      	cmp	r3, #32
 8009dc6:	d0f4      	beq.n	8009db2 <mg_http_parse+0xfa>
  is_response =
      hm->method.len > 5 && (mg_ncasecmp(hm->method.buf, "HTTP/", 5) == 0);
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	685b      	ldr	r3, [r3, #4]
 8009dcc:	2b05      	cmp	r3, #5
 8009dce:	d90b      	bls.n	8009de8 <mg_http_parse+0x130>
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	681b      	ldr	r3, [r3, #0]
 8009dd4:	2205      	movs	r2, #5
 8009dd6:	4992      	ldr	r1, [pc, #584]	@ (800a020 <mg_http_parse+0x368>)
 8009dd8:	4618      	mov	r0, r3
 8009dda:	f7ff fb23 	bl	8009424 <mg_ncasecmp>
 8009dde:	4603      	mov	r3, r0
 8009de0:	2b00      	cmp	r3, #0
 8009de2:	d101      	bne.n	8009de8 <mg_http_parse+0x130>
 8009de4:	2301      	movs	r3, #1
 8009de6:	e000      	b.n	8009dea <mg_http_parse+0x132>
 8009de8:	2300      	movs	r3, #0
  is_response =
 8009dea:	63bb      	str	r3, [r7, #56]	@ 0x38
  if ((s = skiptorn(s, end, &hm->proto)) == NULL) return false;
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	3318      	adds	r3, #24
 8009df0:	461a      	mov	r2, r3
 8009df2:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009df4:	68f8      	ldr	r0, [r7, #12]
 8009df6:	f7ff fe65 	bl	8009ac4 <skiptorn>
 8009dfa:	60f8      	str	r0, [r7, #12]
 8009dfc:	68fb      	ldr	r3, [r7, #12]
 8009dfe:	2b00      	cmp	r3, #0
 8009e00:	d101      	bne.n	8009e06 <mg_http_parse+0x14e>
 8009e02:	2300      	movs	r3, #0
 8009e04:	e107      	b.n	800a016 <mg_http_parse+0x35e>
  // If we're given a version, check that it is HTTP/x.x
  version_prefix_valid =
      hm->proto.len > 5 && (mg_ncasecmp(hm->proto.buf, "HTTP/", 5) == 0);
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	69db      	ldr	r3, [r3, #28]
 8009e0a:	2b05      	cmp	r3, #5
 8009e0c:	d90b      	bls.n	8009e26 <mg_http_parse+0x16e>
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	699b      	ldr	r3, [r3, #24]
 8009e12:	2205      	movs	r2, #5
 8009e14:	4982      	ldr	r1, [pc, #520]	@ (800a020 <mg_http_parse+0x368>)
 8009e16:	4618      	mov	r0, r3
 8009e18:	f7ff fb04 	bl	8009424 <mg_ncasecmp>
 8009e1c:	4603      	mov	r3, r0
 8009e1e:	2b00      	cmp	r3, #0
 8009e20:	d101      	bne.n	8009e26 <mg_http_parse+0x16e>
 8009e22:	2301      	movs	r3, #1
 8009e24:	e000      	b.n	8009e28 <mg_http_parse+0x170>
 8009e26:	2300      	movs	r3, #0
  version_prefix_valid =
 8009e28:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8009e2c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8009e30:	f003 0301 	and.w	r3, r3, #1
 8009e34:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  if (!is_response && hm->proto.len > 0 &&
 8009e38:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009e3a:	2b00      	cmp	r3, #0
 8009e3c:	d12f      	bne.n	8009e9e <mg_http_parse+0x1e6>
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	69db      	ldr	r3, [r3, #28]
 8009e42:	2b00      	cmp	r3, #0
 8009e44:	d02b      	beq.n	8009e9e <mg_http_parse+0x1e6>
      (!version_prefix_valid || hm->proto.len != 8 ||
 8009e46:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8009e4a:	f083 0301 	eor.w	r3, r3, #1
 8009e4e:	b2db      	uxtb	r3, r3
  if (!is_response && hm->proto.len > 0 &&
 8009e50:	2b00      	cmp	r3, #0
 8009e52:	d121      	bne.n	8009e98 <mg_http_parse+0x1e0>
      (!version_prefix_valid || hm->proto.len != 8 ||
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	69db      	ldr	r3, [r3, #28]
 8009e58:	2b08      	cmp	r3, #8
 8009e5a:	d11d      	bne.n	8009e98 <mg_http_parse+0x1e0>
       (hm->proto.buf[5] < '0' || hm->proto.buf[5] > '9') ||
 8009e5c:	687b      	ldr	r3, [r7, #4]
 8009e5e:	699b      	ldr	r3, [r3, #24]
 8009e60:	3305      	adds	r3, #5
 8009e62:	781b      	ldrb	r3, [r3, #0]
      (!version_prefix_valid || hm->proto.len != 8 ||
 8009e64:	2b2f      	cmp	r3, #47	@ 0x2f
 8009e66:	d917      	bls.n	8009e98 <mg_http_parse+0x1e0>
       (hm->proto.buf[5] < '0' || hm->proto.buf[5] > '9') ||
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	699b      	ldr	r3, [r3, #24]
 8009e6c:	3305      	adds	r3, #5
 8009e6e:	781b      	ldrb	r3, [r3, #0]
 8009e70:	2b39      	cmp	r3, #57	@ 0x39
 8009e72:	d811      	bhi.n	8009e98 <mg_http_parse+0x1e0>
       (hm->proto.buf[6] != '.') ||
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	699b      	ldr	r3, [r3, #24]
 8009e78:	3306      	adds	r3, #6
 8009e7a:	781b      	ldrb	r3, [r3, #0]
       (hm->proto.buf[5] < '0' || hm->proto.buf[5] > '9') ||
 8009e7c:	2b2e      	cmp	r3, #46	@ 0x2e
 8009e7e:	d10b      	bne.n	8009e98 <mg_http_parse+0x1e0>
       (hm->proto.buf[7] < '0' || hm->proto.buf[7] > '9'))) {
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	699b      	ldr	r3, [r3, #24]
 8009e84:	3307      	adds	r3, #7
 8009e86:	781b      	ldrb	r3, [r3, #0]
       (hm->proto.buf[6] != '.') ||
 8009e88:	2b2f      	cmp	r3, #47	@ 0x2f
 8009e8a:	d905      	bls.n	8009e98 <mg_http_parse+0x1e0>
       (hm->proto.buf[7] < '0' || hm->proto.buf[7] > '9'))) {
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	699b      	ldr	r3, [r3, #24]
 8009e90:	3307      	adds	r3, #7
 8009e92:	781b      	ldrb	r3, [r3, #0]
 8009e94:	2b39      	cmp	r3, #57	@ 0x39
 8009e96:	d902      	bls.n	8009e9e <mg_http_parse+0x1e6>
    return -1;
 8009e98:	f04f 33ff 	mov.w	r3, #4294967295
 8009e9c:	e0bb      	b.n	800a016 <mg_http_parse+0x35e>
  }

  // If URI contains '?' character, setup query string
  if ((qs = (const char *) memchr(hm->uri.buf, '?', hm->uri.len)) != NULL) {
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	6898      	ldr	r0, [r3, #8]
 8009ea2:	687b      	ldr	r3, [r7, #4]
 8009ea4:	68db      	ldr	r3, [r3, #12]
 8009ea6:	461a      	mov	r2, r3
 8009ea8:	213f      	movs	r1, #63	@ 0x3f
 8009eaa:	f7f6 f9d9 	bl	8000260 <memchr>
 8009eae:	6338      	str	r0, [r7, #48]	@ 0x30
 8009eb0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009eb2:	2b00      	cmp	r3, #0
 8009eb4:	d015      	beq.n	8009ee2 <mg_http_parse+0x22a>
    hm->query.buf = (char *) qs + 1;
 8009eb6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009eb8:	1c5a      	adds	r2, r3, #1
 8009eba:	687b      	ldr	r3, [r7, #4]
 8009ebc:	611a      	str	r2, [r3, #16]
    hm->query.len = (size_t) (&hm->uri.buf[hm->uri.len] - (qs + 1));
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	689a      	ldr	r2, [r3, #8]
 8009ec2:	687b      	ldr	r3, [r7, #4]
 8009ec4:	68db      	ldr	r3, [r3, #12]
 8009ec6:	441a      	add	r2, r3
 8009ec8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009eca:	3301      	adds	r3, #1
 8009ecc:	1ad3      	subs	r3, r2, r3
 8009ece:	461a      	mov	r2, r3
 8009ed0:	687b      	ldr	r3, [r7, #4]
 8009ed2:	615a      	str	r2, [r3, #20]
    hm->uri.len = (size_t) (qs - hm->uri.buf);
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	689b      	ldr	r3, [r3, #8]
 8009ed8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009eda:	1ad3      	subs	r3, r2, r3
 8009edc:	461a      	mov	r2, r3
 8009ede:	687b      	ldr	r3, [r7, #4]
 8009ee0:	60da      	str	r2, [r3, #12]
  }

  // Sanity check. Allow protocol/reason to be empty
  // Do this check after hm->method.len and hm->uri.len are finalised
  if (hm->method.len == 0 || hm->uri.len == 0) return -1;
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	685b      	ldr	r3, [r3, #4]
 8009ee6:	2b00      	cmp	r3, #0
 8009ee8:	d003      	beq.n	8009ef2 <mg_http_parse+0x23a>
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	68db      	ldr	r3, [r3, #12]
 8009eee:	2b00      	cmp	r3, #0
 8009ef0:	d102      	bne.n	8009ef8 <mg_http_parse+0x240>
 8009ef2:	f04f 33ff 	mov.w	r3, #4294967295
 8009ef6:	e08e      	b.n	800a016 <mg_http_parse+0x35e>

  if (!mg_http_parse_headers(s, end, hm->headers,
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	f103 0220 	add.w	r2, r3, #32
 8009efe:	231e      	movs	r3, #30
 8009f00:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009f02:	68f8      	ldr	r0, [r7, #12]
 8009f04:	f7ff fe29 	bl	8009b5a <mg_http_parse_headers>
 8009f08:	4603      	mov	r3, r0
 8009f0a:	f083 0301 	eor.w	r3, r3, #1
 8009f0e:	b2db      	uxtb	r3, r3
 8009f10:	2b00      	cmp	r3, #0
 8009f12:	d002      	beq.n	8009f1a <mg_http_parse+0x262>
                             sizeof(hm->headers) / sizeof(hm->headers[0])))
    return -1;  // error when parsing
 8009f14:	f04f 33ff 	mov.w	r3, #4294967295
 8009f18:	e07d      	b.n	800a016 <mg_http_parse+0x35e>
  if ((cl = mg_http_get_header(hm, "Content-Length")) != NULL) {
 8009f1a:	4942      	ldr	r1, [pc, #264]	@ (800a024 <mg_http_parse+0x36c>)
 8009f1c:	6878      	ldr	r0, [r7, #4]
 8009f1e:	f7ff fd0f 	bl	8009940 <mg_http_get_header>
 8009f22:	62f8      	str	r0, [r7, #44]	@ 0x2c
 8009f24:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009f26:	2b00      	cmp	r3, #0
 8009f28:	d018      	beq.n	8009f5c <mg_http_parse+0x2a4>
    if (mg_to_size_t(*cl, &hm->body.len) == false) return -1;
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	f503 7201 	add.w	r2, r3, #516	@ 0x204
 8009f30:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009f32:	e893 0003 	ldmia.w	r3, {r0, r1}
 8009f36:	f7ff fab5 	bl	80094a4 <mg_to_size_t>
 8009f3a:	4603      	mov	r3, r0
 8009f3c:	f083 0301 	eor.w	r3, r3, #1
 8009f40:	b2db      	uxtb	r3, r3
 8009f42:	2b00      	cmp	r3, #0
 8009f44:	d002      	beq.n	8009f4c <mg_http_parse+0x294>
 8009f46:	f04f 33ff 	mov.w	r3, #4294967295
 8009f4a:	e064      	b.n	800a016 <mg_http_parse+0x35e>
    hm->message.len = (size_t) req_len + hm->body.len;
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8009f52:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009f54:	441a      	add	r2, r3
 8009f56:	687b      	ldr	r3, [r7, #4]
 8009f58:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  // Therefore, if Content-Length is not specified and methods are
  // not one of PUT or POST, set body length to 0.
  //
  // So, if it is HTTP request, and Content-Length is not set,
  // and method is not (PUT or POST) then reset body length to zero.
  if (hm->body.len == (size_t) ~0 && !is_response &&
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8009f62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009f66:	d12a      	bne.n	8009fbe <mg_http_parse+0x306>
 8009f68:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009f6a:	2b00      	cmp	r3, #0
 8009f6c:	d127      	bne.n	8009fbe <mg_http_parse+0x306>
      mg_strcasecmp(hm->method, mg_str("PUT")) != 0 &&
 8009f6e:	f107 0314 	add.w	r3, r7, #20
 8009f72:	492d      	ldr	r1, [pc, #180]	@ (800a028 <mg_http_parse+0x370>)
 8009f74:	4618      	mov	r0, r3
 8009f76:	f00b fd0b 	bl	8015990 <mg_str_s>
 8009f7a:	6879      	ldr	r1, [r7, #4]
 8009f7c:	f107 0314 	add.w	r3, r7, #20
 8009f80:	cb0c      	ldmia	r3, {r2, r3}
 8009f82:	c903      	ldmia	r1, {r0, r1}
 8009f84:	f00b fdc6 	bl	8015b14 <mg_strcasecmp>
 8009f88:	4603      	mov	r3, r0
  if (hm->body.len == (size_t) ~0 && !is_response &&
 8009f8a:	2b00      	cmp	r3, #0
 8009f8c:	d017      	beq.n	8009fbe <mg_http_parse+0x306>
      mg_strcasecmp(hm->method, mg_str("POST")) != 0) {
 8009f8e:	f107 031c 	add.w	r3, r7, #28
 8009f92:	4926      	ldr	r1, [pc, #152]	@ (800a02c <mg_http_parse+0x374>)
 8009f94:	4618      	mov	r0, r3
 8009f96:	f00b fcfb 	bl	8015990 <mg_str_s>
 8009f9a:	6879      	ldr	r1, [r7, #4]
 8009f9c:	f107 031c 	add.w	r3, r7, #28
 8009fa0:	cb0c      	ldmia	r3, {r2, r3}
 8009fa2:	c903      	ldmia	r1, {r0, r1}
 8009fa4:	f00b fdb6 	bl	8015b14 <mg_strcasecmp>
 8009fa8:	4603      	mov	r3, r0
      mg_strcasecmp(hm->method, mg_str("PUT")) != 0 &&
 8009faa:	2b00      	cmp	r3, #0
 8009fac:	d007      	beq.n	8009fbe <mg_http_parse+0x306>
    hm->body.len = 0;
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	2200      	movs	r2, #0
 8009fb2:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    hm->message.len = (size_t) req_len;
 8009fb6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  }

  // The 204 (No content) responses also have 0 body length
  if (hm->body.len == (size_t) ~0 && is_response &&
 8009fbe:	687b      	ldr	r3, [r7, #4]
 8009fc0:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8009fc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009fc8:	d11b      	bne.n	800a002 <mg_http_parse+0x34a>
 8009fca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009fcc:	2b00      	cmp	r3, #0
 8009fce:	d018      	beq.n	800a002 <mg_http_parse+0x34a>
      mg_strcasecmp(hm->uri, mg_str("204")) == 0) {
 8009fd0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009fd4:	4916      	ldr	r1, [pc, #88]	@ (800a030 <mg_http_parse+0x378>)
 8009fd6:	4618      	mov	r0, r3
 8009fd8:	f00b fcda 	bl	8015990 <mg_str_s>
 8009fdc:	6879      	ldr	r1, [r7, #4]
 8009fde:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009fe2:	cb0c      	ldmia	r3, {r2, r3}
 8009fe4:	3108      	adds	r1, #8
 8009fe6:	c903      	ldmia	r1, {r0, r1}
 8009fe8:	f00b fd94 	bl	8015b14 <mg_strcasecmp>
 8009fec:	4603      	mov	r3, r0
  if (hm->body.len == (size_t) ~0 && is_response &&
 8009fee:	2b00      	cmp	r3, #0
 8009ff0:	d107      	bne.n	800a002 <mg_http_parse+0x34a>
    hm->body.len = 0;
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	2200      	movs	r2, #0
 8009ff6:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    hm->message.len = (size_t) req_len;
 8009ffa:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  }
  if (hm->message.len < (size_t) req_len) return -1;  // Overflow protection
 800a002:	687b      	ldr	r3, [r7, #4]
 800a004:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 800a008:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a00a:	429a      	cmp	r2, r3
 800a00c:	d202      	bcs.n	800a014 <mg_http_parse+0x35c>
 800a00e:	f04f 33ff 	mov.w	r3, #4294967295
 800a012:	e000      	b.n	800a016 <mg_http_parse+0x35e>

  return req_len;
 800a014:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
}
 800a016:	4618      	mov	r0, r3
 800a018:	3748      	adds	r7, #72	@ 0x48
 800a01a:	46bd      	mov	sp, r7
 800a01c:	bd80      	pop	{r7, pc}
 800a01e:	bf00      	nop
 800a020:	0802549c 	.word	0x0802549c
 800a024:	080254a4 	.word	0x080254a4
 800a028:	080254b4 	.word	0x080254b4
 800a02c:	080254b8 	.word	0x080254b8
 800a030:	080254c0 	.word	0x080254c0

0800a034 <mg_http_status_code_str>:
  mg_send(c, "\r\n", 2);
  if (len == 0) c->is_resp = 0;
}

// clang-format off
static const char *mg_http_status_code_str(int status_code) {
 800a034:	b480      	push	{r7}
 800a036:	b083      	sub	sp, #12
 800a038:	af00      	add	r7, sp, #0
 800a03a:	6078      	str	r0, [r7, #4]
  switch (status_code) {
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	3b64      	subs	r3, #100	@ 0x64
 800a040:	f240 12f3 	movw	r2, #499	@ 0x1f3
 800a044:	4293      	cmp	r3, r2
 800a046:	f200 8469 	bhi.w	800a91c <mg_http_status_code_str+0x8e8>
 800a04a:	a101      	add	r1, pc, #4	@ (adr r1, 800a050 <mg_http_status_code_str+0x1c>)
 800a04c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a050:	0800a821 	.word	0x0800a821
 800a054:	0800a825 	.word	0x0800a825
 800a058:	0800a829 	.word	0x0800a829
 800a05c:	0800a91d 	.word	0x0800a91d
 800a060:	0800a91d 	.word	0x0800a91d
 800a064:	0800a91d 	.word	0x0800a91d
 800a068:	0800a91d 	.word	0x0800a91d
 800a06c:	0800a91d 	.word	0x0800a91d
 800a070:	0800a91d 	.word	0x0800a91d
 800a074:	0800a91d 	.word	0x0800a91d
 800a078:	0800a91d 	.word	0x0800a91d
 800a07c:	0800a91d 	.word	0x0800a91d
 800a080:	0800a91d 	.word	0x0800a91d
 800a084:	0800a91d 	.word	0x0800a91d
 800a088:	0800a91d 	.word	0x0800a91d
 800a08c:	0800a91d 	.word	0x0800a91d
 800a090:	0800a91d 	.word	0x0800a91d
 800a094:	0800a91d 	.word	0x0800a91d
 800a098:	0800a91d 	.word	0x0800a91d
 800a09c:	0800a91d 	.word	0x0800a91d
 800a0a0:	0800a91d 	.word	0x0800a91d
 800a0a4:	0800a91d 	.word	0x0800a91d
 800a0a8:	0800a91d 	.word	0x0800a91d
 800a0ac:	0800a91d 	.word	0x0800a91d
 800a0b0:	0800a91d 	.word	0x0800a91d
 800a0b4:	0800a91d 	.word	0x0800a91d
 800a0b8:	0800a91d 	.word	0x0800a91d
 800a0bc:	0800a91d 	.word	0x0800a91d
 800a0c0:	0800a91d 	.word	0x0800a91d
 800a0c4:	0800a91d 	.word	0x0800a91d
 800a0c8:	0800a91d 	.word	0x0800a91d
 800a0cc:	0800a91d 	.word	0x0800a91d
 800a0d0:	0800a91d 	.word	0x0800a91d
 800a0d4:	0800a91d 	.word	0x0800a91d
 800a0d8:	0800a91d 	.word	0x0800a91d
 800a0dc:	0800a91d 	.word	0x0800a91d
 800a0e0:	0800a91d 	.word	0x0800a91d
 800a0e4:	0800a91d 	.word	0x0800a91d
 800a0e8:	0800a91d 	.word	0x0800a91d
 800a0ec:	0800a91d 	.word	0x0800a91d
 800a0f0:	0800a91d 	.word	0x0800a91d
 800a0f4:	0800a91d 	.word	0x0800a91d
 800a0f8:	0800a91d 	.word	0x0800a91d
 800a0fc:	0800a91d 	.word	0x0800a91d
 800a100:	0800a91d 	.word	0x0800a91d
 800a104:	0800a91d 	.word	0x0800a91d
 800a108:	0800a91d 	.word	0x0800a91d
 800a10c:	0800a91d 	.word	0x0800a91d
 800a110:	0800a91d 	.word	0x0800a91d
 800a114:	0800a91d 	.word	0x0800a91d
 800a118:	0800a91d 	.word	0x0800a91d
 800a11c:	0800a91d 	.word	0x0800a91d
 800a120:	0800a91d 	.word	0x0800a91d
 800a124:	0800a91d 	.word	0x0800a91d
 800a128:	0800a91d 	.word	0x0800a91d
 800a12c:	0800a91d 	.word	0x0800a91d
 800a130:	0800a91d 	.word	0x0800a91d
 800a134:	0800a91d 	.word	0x0800a91d
 800a138:	0800a91d 	.word	0x0800a91d
 800a13c:	0800a91d 	.word	0x0800a91d
 800a140:	0800a91d 	.word	0x0800a91d
 800a144:	0800a91d 	.word	0x0800a91d
 800a148:	0800a91d 	.word	0x0800a91d
 800a14c:	0800a91d 	.word	0x0800a91d
 800a150:	0800a91d 	.word	0x0800a91d
 800a154:	0800a91d 	.word	0x0800a91d
 800a158:	0800a91d 	.word	0x0800a91d
 800a15c:	0800a91d 	.word	0x0800a91d
 800a160:	0800a91d 	.word	0x0800a91d
 800a164:	0800a91d 	.word	0x0800a91d
 800a168:	0800a91d 	.word	0x0800a91d
 800a16c:	0800a91d 	.word	0x0800a91d
 800a170:	0800a91d 	.word	0x0800a91d
 800a174:	0800a91d 	.word	0x0800a91d
 800a178:	0800a91d 	.word	0x0800a91d
 800a17c:	0800a91d 	.word	0x0800a91d
 800a180:	0800a91d 	.word	0x0800a91d
 800a184:	0800a91d 	.word	0x0800a91d
 800a188:	0800a91d 	.word	0x0800a91d
 800a18c:	0800a91d 	.word	0x0800a91d
 800a190:	0800a91d 	.word	0x0800a91d
 800a194:	0800a91d 	.word	0x0800a91d
 800a198:	0800a91d 	.word	0x0800a91d
 800a19c:	0800a91d 	.word	0x0800a91d
 800a1a0:	0800a91d 	.word	0x0800a91d
 800a1a4:	0800a91d 	.word	0x0800a91d
 800a1a8:	0800a91d 	.word	0x0800a91d
 800a1ac:	0800a91d 	.word	0x0800a91d
 800a1b0:	0800a91d 	.word	0x0800a91d
 800a1b4:	0800a91d 	.word	0x0800a91d
 800a1b8:	0800a91d 	.word	0x0800a91d
 800a1bc:	0800a91d 	.word	0x0800a91d
 800a1c0:	0800a91d 	.word	0x0800a91d
 800a1c4:	0800a91d 	.word	0x0800a91d
 800a1c8:	0800a91d 	.word	0x0800a91d
 800a1cc:	0800a91d 	.word	0x0800a91d
 800a1d0:	0800a91d 	.word	0x0800a91d
 800a1d4:	0800a91d 	.word	0x0800a91d
 800a1d8:	0800a91d 	.word	0x0800a91d
 800a1dc:	0800a91d 	.word	0x0800a91d
 800a1e0:	0800a82d 	.word	0x0800a82d
 800a1e4:	0800a831 	.word	0x0800a831
 800a1e8:	0800a835 	.word	0x0800a835
 800a1ec:	0800a839 	.word	0x0800a839
 800a1f0:	0800a83d 	.word	0x0800a83d
 800a1f4:	0800a841 	.word	0x0800a841
 800a1f8:	0800a845 	.word	0x0800a845
 800a1fc:	0800a849 	.word	0x0800a849
 800a200:	0800a84d 	.word	0x0800a84d
 800a204:	0800a91d 	.word	0x0800a91d
 800a208:	0800a91d 	.word	0x0800a91d
 800a20c:	0800a91d 	.word	0x0800a91d
 800a210:	0800a91d 	.word	0x0800a91d
 800a214:	0800a91d 	.word	0x0800a91d
 800a218:	0800a91d 	.word	0x0800a91d
 800a21c:	0800a91d 	.word	0x0800a91d
 800a220:	0800a91d 	.word	0x0800a91d
 800a224:	0800a91d 	.word	0x0800a91d
 800a228:	0800a91d 	.word	0x0800a91d
 800a22c:	0800a91d 	.word	0x0800a91d
 800a230:	0800a91d 	.word	0x0800a91d
 800a234:	0800a91d 	.word	0x0800a91d
 800a238:	0800a91d 	.word	0x0800a91d
 800a23c:	0800a91d 	.word	0x0800a91d
 800a240:	0800a91d 	.word	0x0800a91d
 800a244:	0800a91d 	.word	0x0800a91d
 800a248:	0800a851 	.word	0x0800a851
 800a24c:	0800a91d 	.word	0x0800a91d
 800a250:	0800a91d 	.word	0x0800a91d
 800a254:	0800a91d 	.word	0x0800a91d
 800a258:	0800a91d 	.word	0x0800a91d
 800a25c:	0800a91d 	.word	0x0800a91d
 800a260:	0800a91d 	.word	0x0800a91d
 800a264:	0800a91d 	.word	0x0800a91d
 800a268:	0800a91d 	.word	0x0800a91d
 800a26c:	0800a91d 	.word	0x0800a91d
 800a270:	0800a91d 	.word	0x0800a91d
 800a274:	0800a91d 	.word	0x0800a91d
 800a278:	0800a91d 	.word	0x0800a91d
 800a27c:	0800a91d 	.word	0x0800a91d
 800a280:	0800a91d 	.word	0x0800a91d
 800a284:	0800a91d 	.word	0x0800a91d
 800a288:	0800a91d 	.word	0x0800a91d
 800a28c:	0800a91d 	.word	0x0800a91d
 800a290:	0800a91d 	.word	0x0800a91d
 800a294:	0800a91d 	.word	0x0800a91d
 800a298:	0800a91d 	.word	0x0800a91d
 800a29c:	0800a91d 	.word	0x0800a91d
 800a2a0:	0800a91d 	.word	0x0800a91d
 800a2a4:	0800a91d 	.word	0x0800a91d
 800a2a8:	0800a91d 	.word	0x0800a91d
 800a2ac:	0800a91d 	.word	0x0800a91d
 800a2b0:	0800a91d 	.word	0x0800a91d
 800a2b4:	0800a91d 	.word	0x0800a91d
 800a2b8:	0800a91d 	.word	0x0800a91d
 800a2bc:	0800a91d 	.word	0x0800a91d
 800a2c0:	0800a91d 	.word	0x0800a91d
 800a2c4:	0800a91d 	.word	0x0800a91d
 800a2c8:	0800a91d 	.word	0x0800a91d
 800a2cc:	0800a91d 	.word	0x0800a91d
 800a2d0:	0800a91d 	.word	0x0800a91d
 800a2d4:	0800a91d 	.word	0x0800a91d
 800a2d8:	0800a91d 	.word	0x0800a91d
 800a2dc:	0800a91d 	.word	0x0800a91d
 800a2e0:	0800a91d 	.word	0x0800a91d
 800a2e4:	0800a91d 	.word	0x0800a91d
 800a2e8:	0800a91d 	.word	0x0800a91d
 800a2ec:	0800a91d 	.word	0x0800a91d
 800a2f0:	0800a91d 	.word	0x0800a91d
 800a2f4:	0800a91d 	.word	0x0800a91d
 800a2f8:	0800a91d 	.word	0x0800a91d
 800a2fc:	0800a91d 	.word	0x0800a91d
 800a300:	0800a91d 	.word	0x0800a91d
 800a304:	0800a91d 	.word	0x0800a91d
 800a308:	0800a91d 	.word	0x0800a91d
 800a30c:	0800a91d 	.word	0x0800a91d
 800a310:	0800a91d 	.word	0x0800a91d
 800a314:	0800a91d 	.word	0x0800a91d
 800a318:	0800a91d 	.word	0x0800a91d
 800a31c:	0800a91d 	.word	0x0800a91d
 800a320:	0800a91d 	.word	0x0800a91d
 800a324:	0800a91d 	.word	0x0800a91d
 800a328:	0800a91d 	.word	0x0800a91d
 800a32c:	0800a91d 	.word	0x0800a91d
 800a330:	0800a91d 	.word	0x0800a91d
 800a334:	0800a91d 	.word	0x0800a91d
 800a338:	0800a91d 	.word	0x0800a91d
 800a33c:	0800a91d 	.word	0x0800a91d
 800a340:	0800a91d 	.word	0x0800a91d
 800a344:	0800a91d 	.word	0x0800a91d
 800a348:	0800a91d 	.word	0x0800a91d
 800a34c:	0800a91d 	.word	0x0800a91d
 800a350:	0800a91d 	.word	0x0800a91d
 800a354:	0800a91d 	.word	0x0800a91d
 800a358:	0800a91d 	.word	0x0800a91d
 800a35c:	0800a91d 	.word	0x0800a91d
 800a360:	0800a91d 	.word	0x0800a91d
 800a364:	0800a91d 	.word	0x0800a91d
 800a368:	0800a91d 	.word	0x0800a91d
 800a36c:	0800a91d 	.word	0x0800a91d
 800a370:	0800a855 	.word	0x0800a855
 800a374:	0800a859 	.word	0x0800a859
 800a378:	0800a85d 	.word	0x0800a85d
 800a37c:	0800a861 	.word	0x0800a861
 800a380:	0800a865 	.word	0x0800a865
 800a384:	0800a869 	.word	0x0800a869
 800a388:	0800a91d 	.word	0x0800a91d
 800a38c:	0800a86d 	.word	0x0800a86d
 800a390:	0800a871 	.word	0x0800a871
 800a394:	0800a91d 	.word	0x0800a91d
 800a398:	0800a91d 	.word	0x0800a91d
 800a39c:	0800a91d 	.word	0x0800a91d
 800a3a0:	0800a91d 	.word	0x0800a91d
 800a3a4:	0800a91d 	.word	0x0800a91d
 800a3a8:	0800a91d 	.word	0x0800a91d
 800a3ac:	0800a91d 	.word	0x0800a91d
 800a3b0:	0800a91d 	.word	0x0800a91d
 800a3b4:	0800a91d 	.word	0x0800a91d
 800a3b8:	0800a91d 	.word	0x0800a91d
 800a3bc:	0800a91d 	.word	0x0800a91d
 800a3c0:	0800a91d 	.word	0x0800a91d
 800a3c4:	0800a91d 	.word	0x0800a91d
 800a3c8:	0800a91d 	.word	0x0800a91d
 800a3cc:	0800a91d 	.word	0x0800a91d
 800a3d0:	0800a91d 	.word	0x0800a91d
 800a3d4:	0800a91d 	.word	0x0800a91d
 800a3d8:	0800a91d 	.word	0x0800a91d
 800a3dc:	0800a91d 	.word	0x0800a91d
 800a3e0:	0800a91d 	.word	0x0800a91d
 800a3e4:	0800a91d 	.word	0x0800a91d
 800a3e8:	0800a91d 	.word	0x0800a91d
 800a3ec:	0800a91d 	.word	0x0800a91d
 800a3f0:	0800a91d 	.word	0x0800a91d
 800a3f4:	0800a91d 	.word	0x0800a91d
 800a3f8:	0800a91d 	.word	0x0800a91d
 800a3fc:	0800a91d 	.word	0x0800a91d
 800a400:	0800a91d 	.word	0x0800a91d
 800a404:	0800a91d 	.word	0x0800a91d
 800a408:	0800a91d 	.word	0x0800a91d
 800a40c:	0800a91d 	.word	0x0800a91d
 800a410:	0800a91d 	.word	0x0800a91d
 800a414:	0800a91d 	.word	0x0800a91d
 800a418:	0800a91d 	.word	0x0800a91d
 800a41c:	0800a91d 	.word	0x0800a91d
 800a420:	0800a91d 	.word	0x0800a91d
 800a424:	0800a91d 	.word	0x0800a91d
 800a428:	0800a91d 	.word	0x0800a91d
 800a42c:	0800a91d 	.word	0x0800a91d
 800a430:	0800a91d 	.word	0x0800a91d
 800a434:	0800a91d 	.word	0x0800a91d
 800a438:	0800a91d 	.word	0x0800a91d
 800a43c:	0800a91d 	.word	0x0800a91d
 800a440:	0800a91d 	.word	0x0800a91d
 800a444:	0800a91d 	.word	0x0800a91d
 800a448:	0800a91d 	.word	0x0800a91d
 800a44c:	0800a91d 	.word	0x0800a91d
 800a450:	0800a91d 	.word	0x0800a91d
 800a454:	0800a91d 	.word	0x0800a91d
 800a458:	0800a91d 	.word	0x0800a91d
 800a45c:	0800a91d 	.word	0x0800a91d
 800a460:	0800a91d 	.word	0x0800a91d
 800a464:	0800a91d 	.word	0x0800a91d
 800a468:	0800a91d 	.word	0x0800a91d
 800a46c:	0800a91d 	.word	0x0800a91d
 800a470:	0800a91d 	.word	0x0800a91d
 800a474:	0800a91d 	.word	0x0800a91d
 800a478:	0800a91d 	.word	0x0800a91d
 800a47c:	0800a91d 	.word	0x0800a91d
 800a480:	0800a91d 	.word	0x0800a91d
 800a484:	0800a91d 	.word	0x0800a91d
 800a488:	0800a91d 	.word	0x0800a91d
 800a48c:	0800a91d 	.word	0x0800a91d
 800a490:	0800a91d 	.word	0x0800a91d
 800a494:	0800a91d 	.word	0x0800a91d
 800a498:	0800a91d 	.word	0x0800a91d
 800a49c:	0800a91d 	.word	0x0800a91d
 800a4a0:	0800a91d 	.word	0x0800a91d
 800a4a4:	0800a91d 	.word	0x0800a91d
 800a4a8:	0800a91d 	.word	0x0800a91d
 800a4ac:	0800a91d 	.word	0x0800a91d
 800a4b0:	0800a91d 	.word	0x0800a91d
 800a4b4:	0800a91d 	.word	0x0800a91d
 800a4b8:	0800a91d 	.word	0x0800a91d
 800a4bc:	0800a91d 	.word	0x0800a91d
 800a4c0:	0800a91d 	.word	0x0800a91d
 800a4c4:	0800a91d 	.word	0x0800a91d
 800a4c8:	0800a91d 	.word	0x0800a91d
 800a4cc:	0800a91d 	.word	0x0800a91d
 800a4d0:	0800a91d 	.word	0x0800a91d
 800a4d4:	0800a91d 	.word	0x0800a91d
 800a4d8:	0800a91d 	.word	0x0800a91d
 800a4dc:	0800a91d 	.word	0x0800a91d
 800a4e0:	0800a91d 	.word	0x0800a91d
 800a4e4:	0800a91d 	.word	0x0800a91d
 800a4e8:	0800a91d 	.word	0x0800a91d
 800a4ec:	0800a91d 	.word	0x0800a91d
 800a4f0:	0800a91d 	.word	0x0800a91d
 800a4f4:	0800a91d 	.word	0x0800a91d
 800a4f8:	0800a91d 	.word	0x0800a91d
 800a4fc:	0800a91d 	.word	0x0800a91d
 800a500:	0800a875 	.word	0x0800a875
 800a504:	0800a879 	.word	0x0800a879
 800a508:	0800a87d 	.word	0x0800a87d
 800a50c:	0800a881 	.word	0x0800a881
 800a510:	0800a885 	.word	0x0800a885
 800a514:	0800a889 	.word	0x0800a889
 800a518:	0800a88d 	.word	0x0800a88d
 800a51c:	0800a891 	.word	0x0800a891
 800a520:	0800a895 	.word	0x0800a895
 800a524:	0800a899 	.word	0x0800a899
 800a528:	0800a89d 	.word	0x0800a89d
 800a52c:	0800a8a1 	.word	0x0800a8a1
 800a530:	0800a8a5 	.word	0x0800a8a5
 800a534:	0800a8a9 	.word	0x0800a8a9
 800a538:	0800a8ad 	.word	0x0800a8ad
 800a53c:	0800a8b1 	.word	0x0800a8b1
 800a540:	0800a8b5 	.word	0x0800a8b5
 800a544:	0800a8b9 	.word	0x0800a8b9
 800a548:	0800a8bd 	.word	0x0800a8bd
 800a54c:	0800a91d 	.word	0x0800a91d
 800a550:	0800a91d 	.word	0x0800a91d
 800a554:	0800a8c1 	.word	0x0800a8c1
 800a558:	0800a8c5 	.word	0x0800a8c5
 800a55c:	0800a8c9 	.word	0x0800a8c9
 800a560:	0800a8cd 	.word	0x0800a8cd
 800a564:	0800a91d 	.word	0x0800a91d
 800a568:	0800a8d1 	.word	0x0800a8d1
 800a56c:	0800a91d 	.word	0x0800a91d
 800a570:	0800a8d5 	.word	0x0800a8d5
 800a574:	0800a8d9 	.word	0x0800a8d9
 800a578:	0800a91d 	.word	0x0800a91d
 800a57c:	0800a8dd 	.word	0x0800a8dd
 800a580:	0800a91d 	.word	0x0800a91d
 800a584:	0800a91d 	.word	0x0800a91d
 800a588:	0800a91d 	.word	0x0800a91d
 800a58c:	0800a91d 	.word	0x0800a91d
 800a590:	0800a91d 	.word	0x0800a91d
 800a594:	0800a91d 	.word	0x0800a91d
 800a598:	0800a91d 	.word	0x0800a91d
 800a59c:	0800a91d 	.word	0x0800a91d
 800a5a0:	0800a91d 	.word	0x0800a91d
 800a5a4:	0800a91d 	.word	0x0800a91d
 800a5a8:	0800a91d 	.word	0x0800a91d
 800a5ac:	0800a91d 	.word	0x0800a91d
 800a5b0:	0800a8e1 	.word	0x0800a8e1
 800a5b4:	0800a91d 	.word	0x0800a91d
 800a5b8:	0800a91d 	.word	0x0800a91d
 800a5bc:	0800a91d 	.word	0x0800a91d
 800a5c0:	0800a91d 	.word	0x0800a91d
 800a5c4:	0800a91d 	.word	0x0800a91d
 800a5c8:	0800a91d 	.word	0x0800a91d
 800a5cc:	0800a8e5 	.word	0x0800a8e5
 800a5d0:	0800a91d 	.word	0x0800a91d
 800a5d4:	0800a91d 	.word	0x0800a91d
 800a5d8:	0800a91d 	.word	0x0800a91d
 800a5dc:	0800a91d 	.word	0x0800a91d
 800a5e0:	0800a91d 	.word	0x0800a91d
 800a5e4:	0800a91d 	.word	0x0800a91d
 800a5e8:	0800a91d 	.word	0x0800a91d
 800a5ec:	0800a91d 	.word	0x0800a91d
 800a5f0:	0800a91d 	.word	0x0800a91d
 800a5f4:	0800a91d 	.word	0x0800a91d
 800a5f8:	0800a91d 	.word	0x0800a91d
 800a5fc:	0800a91d 	.word	0x0800a91d
 800a600:	0800a91d 	.word	0x0800a91d
 800a604:	0800a91d 	.word	0x0800a91d
 800a608:	0800a91d 	.word	0x0800a91d
 800a60c:	0800a91d 	.word	0x0800a91d
 800a610:	0800a91d 	.word	0x0800a91d
 800a614:	0800a91d 	.word	0x0800a91d
 800a618:	0800a91d 	.word	0x0800a91d
 800a61c:	0800a91d 	.word	0x0800a91d
 800a620:	0800a91d 	.word	0x0800a91d
 800a624:	0800a91d 	.word	0x0800a91d
 800a628:	0800a91d 	.word	0x0800a91d
 800a62c:	0800a91d 	.word	0x0800a91d
 800a630:	0800a91d 	.word	0x0800a91d
 800a634:	0800a91d 	.word	0x0800a91d
 800a638:	0800a91d 	.word	0x0800a91d
 800a63c:	0800a91d 	.word	0x0800a91d
 800a640:	0800a91d 	.word	0x0800a91d
 800a644:	0800a91d 	.word	0x0800a91d
 800a648:	0800a91d 	.word	0x0800a91d
 800a64c:	0800a91d 	.word	0x0800a91d
 800a650:	0800a91d 	.word	0x0800a91d
 800a654:	0800a91d 	.word	0x0800a91d
 800a658:	0800a91d 	.word	0x0800a91d
 800a65c:	0800a91d 	.word	0x0800a91d
 800a660:	0800a91d 	.word	0x0800a91d
 800a664:	0800a91d 	.word	0x0800a91d
 800a668:	0800a91d 	.word	0x0800a91d
 800a66c:	0800a91d 	.word	0x0800a91d
 800a670:	0800a91d 	.word	0x0800a91d
 800a674:	0800a91d 	.word	0x0800a91d
 800a678:	0800a91d 	.word	0x0800a91d
 800a67c:	0800a91d 	.word	0x0800a91d
 800a680:	0800a91d 	.word	0x0800a91d
 800a684:	0800a91d 	.word	0x0800a91d
 800a688:	0800a91d 	.word	0x0800a91d
 800a68c:	0800a8e9 	.word	0x0800a8e9
 800a690:	0800a8ed 	.word	0x0800a8ed
 800a694:	0800a8f1 	.word	0x0800a8f1
 800a698:	0800a8f5 	.word	0x0800a8f5
 800a69c:	0800a8f9 	.word	0x0800a8f9
 800a6a0:	0800a8fd 	.word	0x0800a8fd
 800a6a4:	0800a901 	.word	0x0800a901
 800a6a8:	0800a905 	.word	0x0800a905
 800a6ac:	0800a909 	.word	0x0800a909
 800a6b0:	0800a90d 	.word	0x0800a90d
 800a6b4:	0800a91d 	.word	0x0800a91d
 800a6b8:	0800a911 	.word	0x0800a911
 800a6bc:	0800a915 	.word	0x0800a915
 800a6c0:	0800a91d 	.word	0x0800a91d
 800a6c4:	0800a91d 	.word	0x0800a91d
 800a6c8:	0800a91d 	.word	0x0800a91d
 800a6cc:	0800a91d 	.word	0x0800a91d
 800a6d0:	0800a91d 	.word	0x0800a91d
 800a6d4:	0800a91d 	.word	0x0800a91d
 800a6d8:	0800a91d 	.word	0x0800a91d
 800a6dc:	0800a91d 	.word	0x0800a91d
 800a6e0:	0800a91d 	.word	0x0800a91d
 800a6e4:	0800a91d 	.word	0x0800a91d
 800a6e8:	0800a91d 	.word	0x0800a91d
 800a6ec:	0800a91d 	.word	0x0800a91d
 800a6f0:	0800a91d 	.word	0x0800a91d
 800a6f4:	0800a91d 	.word	0x0800a91d
 800a6f8:	0800a91d 	.word	0x0800a91d
 800a6fc:	0800a91d 	.word	0x0800a91d
 800a700:	0800a91d 	.word	0x0800a91d
 800a704:	0800a91d 	.word	0x0800a91d
 800a708:	0800a91d 	.word	0x0800a91d
 800a70c:	0800a91d 	.word	0x0800a91d
 800a710:	0800a91d 	.word	0x0800a91d
 800a714:	0800a91d 	.word	0x0800a91d
 800a718:	0800a91d 	.word	0x0800a91d
 800a71c:	0800a91d 	.word	0x0800a91d
 800a720:	0800a91d 	.word	0x0800a91d
 800a724:	0800a91d 	.word	0x0800a91d
 800a728:	0800a91d 	.word	0x0800a91d
 800a72c:	0800a91d 	.word	0x0800a91d
 800a730:	0800a91d 	.word	0x0800a91d
 800a734:	0800a91d 	.word	0x0800a91d
 800a738:	0800a91d 	.word	0x0800a91d
 800a73c:	0800a91d 	.word	0x0800a91d
 800a740:	0800a91d 	.word	0x0800a91d
 800a744:	0800a91d 	.word	0x0800a91d
 800a748:	0800a91d 	.word	0x0800a91d
 800a74c:	0800a91d 	.word	0x0800a91d
 800a750:	0800a91d 	.word	0x0800a91d
 800a754:	0800a91d 	.word	0x0800a91d
 800a758:	0800a91d 	.word	0x0800a91d
 800a75c:	0800a91d 	.word	0x0800a91d
 800a760:	0800a91d 	.word	0x0800a91d
 800a764:	0800a91d 	.word	0x0800a91d
 800a768:	0800a91d 	.word	0x0800a91d
 800a76c:	0800a91d 	.word	0x0800a91d
 800a770:	0800a91d 	.word	0x0800a91d
 800a774:	0800a91d 	.word	0x0800a91d
 800a778:	0800a91d 	.word	0x0800a91d
 800a77c:	0800a91d 	.word	0x0800a91d
 800a780:	0800a91d 	.word	0x0800a91d
 800a784:	0800a91d 	.word	0x0800a91d
 800a788:	0800a91d 	.word	0x0800a91d
 800a78c:	0800a91d 	.word	0x0800a91d
 800a790:	0800a91d 	.word	0x0800a91d
 800a794:	0800a91d 	.word	0x0800a91d
 800a798:	0800a91d 	.word	0x0800a91d
 800a79c:	0800a91d 	.word	0x0800a91d
 800a7a0:	0800a91d 	.word	0x0800a91d
 800a7a4:	0800a91d 	.word	0x0800a91d
 800a7a8:	0800a91d 	.word	0x0800a91d
 800a7ac:	0800a91d 	.word	0x0800a91d
 800a7b0:	0800a91d 	.word	0x0800a91d
 800a7b4:	0800a91d 	.word	0x0800a91d
 800a7b8:	0800a91d 	.word	0x0800a91d
 800a7bc:	0800a91d 	.word	0x0800a91d
 800a7c0:	0800a91d 	.word	0x0800a91d
 800a7c4:	0800a91d 	.word	0x0800a91d
 800a7c8:	0800a91d 	.word	0x0800a91d
 800a7cc:	0800a91d 	.word	0x0800a91d
 800a7d0:	0800a91d 	.word	0x0800a91d
 800a7d4:	0800a91d 	.word	0x0800a91d
 800a7d8:	0800a91d 	.word	0x0800a91d
 800a7dc:	0800a91d 	.word	0x0800a91d
 800a7e0:	0800a91d 	.word	0x0800a91d
 800a7e4:	0800a91d 	.word	0x0800a91d
 800a7e8:	0800a91d 	.word	0x0800a91d
 800a7ec:	0800a91d 	.word	0x0800a91d
 800a7f0:	0800a91d 	.word	0x0800a91d
 800a7f4:	0800a91d 	.word	0x0800a91d
 800a7f8:	0800a91d 	.word	0x0800a91d
 800a7fc:	0800a91d 	.word	0x0800a91d
 800a800:	0800a91d 	.word	0x0800a91d
 800a804:	0800a91d 	.word	0x0800a91d
 800a808:	0800a91d 	.word	0x0800a91d
 800a80c:	0800a91d 	.word	0x0800a91d
 800a810:	0800a91d 	.word	0x0800a91d
 800a814:	0800a91d 	.word	0x0800a91d
 800a818:	0800a91d 	.word	0x0800a91d
 800a81c:	0800a919 	.word	0x0800a919
    case 100: return "Continue";
 800a820:	4b42      	ldr	r3, [pc, #264]	@ (800a92c <mg_http_status_code_str+0x8f8>)
 800a822:	e07c      	b.n	800a91e <mg_http_status_code_str+0x8ea>
    case 101: return "Switching Protocols";
 800a824:	4b42      	ldr	r3, [pc, #264]	@ (800a930 <mg_http_status_code_str+0x8fc>)
 800a826:	e07a      	b.n	800a91e <mg_http_status_code_str+0x8ea>
    case 102: return "Processing";
 800a828:	4b42      	ldr	r3, [pc, #264]	@ (800a934 <mg_http_status_code_str+0x900>)
 800a82a:	e078      	b.n	800a91e <mg_http_status_code_str+0x8ea>
    case 200: return "OK";
 800a82c:	4b42      	ldr	r3, [pc, #264]	@ (800a938 <mg_http_status_code_str+0x904>)
 800a82e:	e076      	b.n	800a91e <mg_http_status_code_str+0x8ea>
    case 201: return "Created";
 800a830:	4b42      	ldr	r3, [pc, #264]	@ (800a93c <mg_http_status_code_str+0x908>)
 800a832:	e074      	b.n	800a91e <mg_http_status_code_str+0x8ea>
    case 202: return "Accepted";
 800a834:	4b42      	ldr	r3, [pc, #264]	@ (800a940 <mg_http_status_code_str+0x90c>)
 800a836:	e072      	b.n	800a91e <mg_http_status_code_str+0x8ea>
    case 203: return "Non-authoritative Information";
 800a838:	4b42      	ldr	r3, [pc, #264]	@ (800a944 <mg_http_status_code_str+0x910>)
 800a83a:	e070      	b.n	800a91e <mg_http_status_code_str+0x8ea>
    case 204: return "No Content";
 800a83c:	4b42      	ldr	r3, [pc, #264]	@ (800a948 <mg_http_status_code_str+0x914>)
 800a83e:	e06e      	b.n	800a91e <mg_http_status_code_str+0x8ea>
    case 205: return "Reset Content";
 800a840:	4b42      	ldr	r3, [pc, #264]	@ (800a94c <mg_http_status_code_str+0x918>)
 800a842:	e06c      	b.n	800a91e <mg_http_status_code_str+0x8ea>
    case 206: return "Partial Content";
 800a844:	4b42      	ldr	r3, [pc, #264]	@ (800a950 <mg_http_status_code_str+0x91c>)
 800a846:	e06a      	b.n	800a91e <mg_http_status_code_str+0x8ea>
    case 207: return "Multi-Status";
 800a848:	4b42      	ldr	r3, [pc, #264]	@ (800a954 <mg_http_status_code_str+0x920>)
 800a84a:	e068      	b.n	800a91e <mg_http_status_code_str+0x8ea>
    case 208: return "Already Reported";
 800a84c:	4b42      	ldr	r3, [pc, #264]	@ (800a958 <mg_http_status_code_str+0x924>)
 800a84e:	e066      	b.n	800a91e <mg_http_status_code_str+0x8ea>
    case 226: return "IM Used";
 800a850:	4b42      	ldr	r3, [pc, #264]	@ (800a95c <mg_http_status_code_str+0x928>)
 800a852:	e064      	b.n	800a91e <mg_http_status_code_str+0x8ea>
    case 300: return "Multiple Choices";
 800a854:	4b42      	ldr	r3, [pc, #264]	@ (800a960 <mg_http_status_code_str+0x92c>)
 800a856:	e062      	b.n	800a91e <mg_http_status_code_str+0x8ea>
    case 301: return "Moved Permanently";
 800a858:	4b42      	ldr	r3, [pc, #264]	@ (800a964 <mg_http_status_code_str+0x930>)
 800a85a:	e060      	b.n	800a91e <mg_http_status_code_str+0x8ea>
    case 302: return "Found";
 800a85c:	4b42      	ldr	r3, [pc, #264]	@ (800a968 <mg_http_status_code_str+0x934>)
 800a85e:	e05e      	b.n	800a91e <mg_http_status_code_str+0x8ea>
    case 303: return "See Other";
 800a860:	4b42      	ldr	r3, [pc, #264]	@ (800a96c <mg_http_status_code_str+0x938>)
 800a862:	e05c      	b.n	800a91e <mg_http_status_code_str+0x8ea>
    case 304: return "Not Modified";
 800a864:	4b42      	ldr	r3, [pc, #264]	@ (800a970 <mg_http_status_code_str+0x93c>)
 800a866:	e05a      	b.n	800a91e <mg_http_status_code_str+0x8ea>
    case 305: return "Use Proxy";
 800a868:	4b42      	ldr	r3, [pc, #264]	@ (800a974 <mg_http_status_code_str+0x940>)
 800a86a:	e058      	b.n	800a91e <mg_http_status_code_str+0x8ea>
    case 307: return "Temporary Redirect";
 800a86c:	4b42      	ldr	r3, [pc, #264]	@ (800a978 <mg_http_status_code_str+0x944>)
 800a86e:	e056      	b.n	800a91e <mg_http_status_code_str+0x8ea>
    case 308: return "Permanent Redirect";
 800a870:	4b42      	ldr	r3, [pc, #264]	@ (800a97c <mg_http_status_code_str+0x948>)
 800a872:	e054      	b.n	800a91e <mg_http_status_code_str+0x8ea>
    case 400: return "Bad Request";
 800a874:	4b42      	ldr	r3, [pc, #264]	@ (800a980 <mg_http_status_code_str+0x94c>)
 800a876:	e052      	b.n	800a91e <mg_http_status_code_str+0x8ea>
    case 401: return "Unauthorized";
 800a878:	4b42      	ldr	r3, [pc, #264]	@ (800a984 <mg_http_status_code_str+0x950>)
 800a87a:	e050      	b.n	800a91e <mg_http_status_code_str+0x8ea>
    case 402: return "Payment Required";
 800a87c:	4b42      	ldr	r3, [pc, #264]	@ (800a988 <mg_http_status_code_str+0x954>)
 800a87e:	e04e      	b.n	800a91e <mg_http_status_code_str+0x8ea>
    case 403: return "Forbidden";
 800a880:	4b42      	ldr	r3, [pc, #264]	@ (800a98c <mg_http_status_code_str+0x958>)
 800a882:	e04c      	b.n	800a91e <mg_http_status_code_str+0x8ea>
    case 404: return "Not Found";
 800a884:	4b42      	ldr	r3, [pc, #264]	@ (800a990 <mg_http_status_code_str+0x95c>)
 800a886:	e04a      	b.n	800a91e <mg_http_status_code_str+0x8ea>
    case 405: return "Method Not Allowed";
 800a888:	4b42      	ldr	r3, [pc, #264]	@ (800a994 <mg_http_status_code_str+0x960>)
 800a88a:	e048      	b.n	800a91e <mg_http_status_code_str+0x8ea>
    case 406: return "Not Acceptable";
 800a88c:	4b42      	ldr	r3, [pc, #264]	@ (800a998 <mg_http_status_code_str+0x964>)
 800a88e:	e046      	b.n	800a91e <mg_http_status_code_str+0x8ea>
    case 407: return "Proxy Authentication Required";
 800a890:	4b42      	ldr	r3, [pc, #264]	@ (800a99c <mg_http_status_code_str+0x968>)
 800a892:	e044      	b.n	800a91e <mg_http_status_code_str+0x8ea>
    case 408: return "Request Timeout";
 800a894:	4b42      	ldr	r3, [pc, #264]	@ (800a9a0 <mg_http_status_code_str+0x96c>)
 800a896:	e042      	b.n	800a91e <mg_http_status_code_str+0x8ea>
    case 409: return "Conflict";
 800a898:	4b42      	ldr	r3, [pc, #264]	@ (800a9a4 <mg_http_status_code_str+0x970>)
 800a89a:	e040      	b.n	800a91e <mg_http_status_code_str+0x8ea>
    case 410: return "Gone";
 800a89c:	4b42      	ldr	r3, [pc, #264]	@ (800a9a8 <mg_http_status_code_str+0x974>)
 800a89e:	e03e      	b.n	800a91e <mg_http_status_code_str+0x8ea>
    case 411: return "Length Required";
 800a8a0:	4b42      	ldr	r3, [pc, #264]	@ (800a9ac <mg_http_status_code_str+0x978>)
 800a8a2:	e03c      	b.n	800a91e <mg_http_status_code_str+0x8ea>
    case 412: return "Precondition Failed";
 800a8a4:	4b42      	ldr	r3, [pc, #264]	@ (800a9b0 <mg_http_status_code_str+0x97c>)
 800a8a6:	e03a      	b.n	800a91e <mg_http_status_code_str+0x8ea>
    case 413: return "Payload Too Large";
 800a8a8:	4b42      	ldr	r3, [pc, #264]	@ (800a9b4 <mg_http_status_code_str+0x980>)
 800a8aa:	e038      	b.n	800a91e <mg_http_status_code_str+0x8ea>
    case 414: return "Request-URI Too Long";
 800a8ac:	4b42      	ldr	r3, [pc, #264]	@ (800a9b8 <mg_http_status_code_str+0x984>)
 800a8ae:	e036      	b.n	800a91e <mg_http_status_code_str+0x8ea>
    case 415: return "Unsupported Media Type";
 800a8b0:	4b42      	ldr	r3, [pc, #264]	@ (800a9bc <mg_http_status_code_str+0x988>)
 800a8b2:	e034      	b.n	800a91e <mg_http_status_code_str+0x8ea>
    case 416: return "Requested Range Not Satisfiable";
 800a8b4:	4b42      	ldr	r3, [pc, #264]	@ (800a9c0 <mg_http_status_code_str+0x98c>)
 800a8b6:	e032      	b.n	800a91e <mg_http_status_code_str+0x8ea>
    case 417: return "Expectation Failed";
 800a8b8:	4b42      	ldr	r3, [pc, #264]	@ (800a9c4 <mg_http_status_code_str+0x990>)
 800a8ba:	e030      	b.n	800a91e <mg_http_status_code_str+0x8ea>
    case 418: return "I'm a teapot";
 800a8bc:	4b42      	ldr	r3, [pc, #264]	@ (800a9c8 <mg_http_status_code_str+0x994>)
 800a8be:	e02e      	b.n	800a91e <mg_http_status_code_str+0x8ea>
    case 421: return "Misdirected Request";
 800a8c0:	4b42      	ldr	r3, [pc, #264]	@ (800a9cc <mg_http_status_code_str+0x998>)
 800a8c2:	e02c      	b.n	800a91e <mg_http_status_code_str+0x8ea>
    case 422: return "Unprocessable Entity";
 800a8c4:	4b42      	ldr	r3, [pc, #264]	@ (800a9d0 <mg_http_status_code_str+0x99c>)
 800a8c6:	e02a      	b.n	800a91e <mg_http_status_code_str+0x8ea>
    case 423: return "Locked";
 800a8c8:	4b42      	ldr	r3, [pc, #264]	@ (800a9d4 <mg_http_status_code_str+0x9a0>)
 800a8ca:	e028      	b.n	800a91e <mg_http_status_code_str+0x8ea>
    case 424: return "Failed Dependency";
 800a8cc:	4b42      	ldr	r3, [pc, #264]	@ (800a9d8 <mg_http_status_code_str+0x9a4>)
 800a8ce:	e026      	b.n	800a91e <mg_http_status_code_str+0x8ea>
    case 426: return "Upgrade Required";
 800a8d0:	4b42      	ldr	r3, [pc, #264]	@ (800a9dc <mg_http_status_code_str+0x9a8>)
 800a8d2:	e024      	b.n	800a91e <mg_http_status_code_str+0x8ea>
    case 428: return "Precondition Required";
 800a8d4:	4b42      	ldr	r3, [pc, #264]	@ (800a9e0 <mg_http_status_code_str+0x9ac>)
 800a8d6:	e022      	b.n	800a91e <mg_http_status_code_str+0x8ea>
    case 429: return "Too Many Requests";
 800a8d8:	4b42      	ldr	r3, [pc, #264]	@ (800a9e4 <mg_http_status_code_str+0x9b0>)
 800a8da:	e020      	b.n	800a91e <mg_http_status_code_str+0x8ea>
    case 431: return "Request Header Fields Too Large";
 800a8dc:	4b42      	ldr	r3, [pc, #264]	@ (800a9e8 <mg_http_status_code_str+0x9b4>)
 800a8de:	e01e      	b.n	800a91e <mg_http_status_code_str+0x8ea>
    case 444: return "Connection Closed Without Response";
 800a8e0:	4b42      	ldr	r3, [pc, #264]	@ (800a9ec <mg_http_status_code_str+0x9b8>)
 800a8e2:	e01c      	b.n	800a91e <mg_http_status_code_str+0x8ea>
    case 451: return "Unavailable For Legal Reasons";
 800a8e4:	4b42      	ldr	r3, [pc, #264]	@ (800a9f0 <mg_http_status_code_str+0x9bc>)
 800a8e6:	e01a      	b.n	800a91e <mg_http_status_code_str+0x8ea>
    case 499: return "Client Closed Request";
 800a8e8:	4b42      	ldr	r3, [pc, #264]	@ (800a9f4 <mg_http_status_code_str+0x9c0>)
 800a8ea:	e018      	b.n	800a91e <mg_http_status_code_str+0x8ea>
    case 500: return "Internal Server Error";
 800a8ec:	4b42      	ldr	r3, [pc, #264]	@ (800a9f8 <mg_http_status_code_str+0x9c4>)
 800a8ee:	e016      	b.n	800a91e <mg_http_status_code_str+0x8ea>
    case 501: return "Not Implemented";
 800a8f0:	4b42      	ldr	r3, [pc, #264]	@ (800a9fc <mg_http_status_code_str+0x9c8>)
 800a8f2:	e014      	b.n	800a91e <mg_http_status_code_str+0x8ea>
    case 502: return "Bad Gateway";
 800a8f4:	4b42      	ldr	r3, [pc, #264]	@ (800aa00 <mg_http_status_code_str+0x9cc>)
 800a8f6:	e012      	b.n	800a91e <mg_http_status_code_str+0x8ea>
    case 503: return "Service Unavailable";
 800a8f8:	4b42      	ldr	r3, [pc, #264]	@ (800aa04 <mg_http_status_code_str+0x9d0>)
 800a8fa:	e010      	b.n	800a91e <mg_http_status_code_str+0x8ea>
    case 504: return "Gateway Timeout";
 800a8fc:	4b42      	ldr	r3, [pc, #264]	@ (800aa08 <mg_http_status_code_str+0x9d4>)
 800a8fe:	e00e      	b.n	800a91e <mg_http_status_code_str+0x8ea>
    case 505: return "HTTP Version Not Supported";
 800a900:	4b42      	ldr	r3, [pc, #264]	@ (800aa0c <mg_http_status_code_str+0x9d8>)
 800a902:	e00c      	b.n	800a91e <mg_http_status_code_str+0x8ea>
    case 506: return "Variant Also Negotiates";
 800a904:	4b42      	ldr	r3, [pc, #264]	@ (800aa10 <mg_http_status_code_str+0x9dc>)
 800a906:	e00a      	b.n	800a91e <mg_http_status_code_str+0x8ea>
    case 507: return "Insufficient Storage";
 800a908:	4b42      	ldr	r3, [pc, #264]	@ (800aa14 <mg_http_status_code_str+0x9e0>)
 800a90a:	e008      	b.n	800a91e <mg_http_status_code_str+0x8ea>
    case 508: return "Loop Detected";
 800a90c:	4b42      	ldr	r3, [pc, #264]	@ (800aa18 <mg_http_status_code_str+0x9e4>)
 800a90e:	e006      	b.n	800a91e <mg_http_status_code_str+0x8ea>
    case 510: return "Not Extended";
 800a910:	4b42      	ldr	r3, [pc, #264]	@ (800aa1c <mg_http_status_code_str+0x9e8>)
 800a912:	e004      	b.n	800a91e <mg_http_status_code_str+0x8ea>
    case 511: return "Network Authentication Required";
 800a914:	4b42      	ldr	r3, [pc, #264]	@ (800aa20 <mg_http_status_code_str+0x9ec>)
 800a916:	e002      	b.n	800a91e <mg_http_status_code_str+0x8ea>
    case 599: return "Network Connect Timeout Error";
 800a918:	4b42      	ldr	r3, [pc, #264]	@ (800aa24 <mg_http_status_code_str+0x9f0>)
 800a91a:	e000      	b.n	800a91e <mg_http_status_code_str+0x8ea>
    default: return "";
 800a91c:	4b42      	ldr	r3, [pc, #264]	@ (800aa28 <mg_http_status_code_str+0x9f4>)
  }
}
 800a91e:	4618      	mov	r0, r3
 800a920:	370c      	adds	r7, #12
 800a922:	46bd      	mov	sp, r7
 800a924:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a928:	4770      	bx	lr
 800a92a:	bf00      	nop
 800a92c:	080254e0 	.word	0x080254e0
 800a930:	080254ec 	.word	0x080254ec
 800a934:	08025500 	.word	0x08025500
 800a938:	0802550c 	.word	0x0802550c
 800a93c:	08025510 	.word	0x08025510
 800a940:	08025518 	.word	0x08025518
 800a944:	08025524 	.word	0x08025524
 800a948:	08025544 	.word	0x08025544
 800a94c:	08025550 	.word	0x08025550
 800a950:	08025560 	.word	0x08025560
 800a954:	08025570 	.word	0x08025570
 800a958:	08025580 	.word	0x08025580
 800a95c:	08025594 	.word	0x08025594
 800a960:	0802559c 	.word	0x0802559c
 800a964:	080255b0 	.word	0x080255b0
 800a968:	080255c4 	.word	0x080255c4
 800a96c:	080255cc 	.word	0x080255cc
 800a970:	080255d8 	.word	0x080255d8
 800a974:	080255e8 	.word	0x080255e8
 800a978:	080255f4 	.word	0x080255f4
 800a97c:	08025608 	.word	0x08025608
 800a980:	0802561c 	.word	0x0802561c
 800a984:	08025628 	.word	0x08025628
 800a988:	08025638 	.word	0x08025638
 800a98c:	0802564c 	.word	0x0802564c
 800a990:	08025658 	.word	0x08025658
 800a994:	08025664 	.word	0x08025664
 800a998:	08025678 	.word	0x08025678
 800a99c:	08025688 	.word	0x08025688
 800a9a0:	080256a8 	.word	0x080256a8
 800a9a4:	080256b8 	.word	0x080256b8
 800a9a8:	080256c4 	.word	0x080256c4
 800a9ac:	080256cc 	.word	0x080256cc
 800a9b0:	080256dc 	.word	0x080256dc
 800a9b4:	080256f0 	.word	0x080256f0
 800a9b8:	08025704 	.word	0x08025704
 800a9bc:	0802571c 	.word	0x0802571c
 800a9c0:	08025734 	.word	0x08025734
 800a9c4:	08025754 	.word	0x08025754
 800a9c8:	08025768 	.word	0x08025768
 800a9cc:	08025778 	.word	0x08025778
 800a9d0:	0802578c 	.word	0x0802578c
 800a9d4:	080257a4 	.word	0x080257a4
 800a9d8:	080257ac 	.word	0x080257ac
 800a9dc:	080257c0 	.word	0x080257c0
 800a9e0:	080257d4 	.word	0x080257d4
 800a9e4:	080257ec 	.word	0x080257ec
 800a9e8:	08025800 	.word	0x08025800
 800a9ec:	08025820 	.word	0x08025820
 800a9f0:	08025844 	.word	0x08025844
 800a9f4:	08025864 	.word	0x08025864
 800a9f8:	0802587c 	.word	0x0802587c
 800a9fc:	08025894 	.word	0x08025894
 800aa00:	080258a4 	.word	0x080258a4
 800aa04:	080258b0 	.word	0x080258b0
 800aa08:	080258c4 	.word	0x080258c4
 800aa0c:	080258d4 	.word	0x080258d4
 800aa10:	080258f0 	.word	0x080258f0
 800aa14:	08025908 	.word	0x08025908
 800aa18:	08025920 	.word	0x08025920
 800aa1c:	08025930 	.word	0x08025930
 800aa20:	08025940 	.word	0x08025940
 800aa24:	08025960 	.word	0x08025960
 800aa28:	08025980 	.word	0x08025980

0800aa2c <mg_http_reply>:
// clang-format on

void mg_http_reply(struct mg_connection *c, int code, const char *headers,
                   const char *fmt, ...) {
 800aa2c:	b408      	push	{r3}
 800aa2e:	b580      	push	{r7, lr}
 800aa30:	b08b      	sub	sp, #44	@ 0x2c
 800aa32:	af02      	add	r7, sp, #8
 800aa34:	60f8      	str	r0, [r7, #12]
 800aa36:	60b9      	str	r1, [r7, #8]
 800aa38:	607a      	str	r2, [r7, #4]
  va_list ap;
  size_t len;
  mg_printf(c, "HTTP/1.1 %d %s\r\n%sContent-Length:            \r\n\r\n", code,
 800aa3a:	68b8      	ldr	r0, [r7, #8]
 800aa3c:	f7ff fafa 	bl	800a034 <mg_http_status_code_str>
 800aa40:	4602      	mov	r2, r0
 800aa42:	687b      	ldr	r3, [r7, #4]
 800aa44:	2b00      	cmp	r3, #0
 800aa46:	d001      	beq.n	800aa4c <mg_http_reply+0x20>
 800aa48:	687b      	ldr	r3, [r7, #4]
 800aa4a:	e000      	b.n	800aa4e <mg_http_reply+0x22>
 800aa4c:	4b1f      	ldr	r3, [pc, #124]	@ (800aacc <mg_http_reply+0xa0>)
 800aa4e:	9300      	str	r3, [sp, #0]
 800aa50:	4613      	mov	r3, r2
 800aa52:	68ba      	ldr	r2, [r7, #8]
 800aa54:	491e      	ldr	r1, [pc, #120]	@ (800aad0 <mg_http_reply+0xa4>)
 800aa56:	68f8      	ldr	r0, [r7, #12]
 800aa58:	f002 fd04 	bl	800d464 <mg_printf>
            mg_http_status_code_str(code), headers == NULL ? "" : headers);
  len = c->send.len;
 800aa5c:	68fb      	ldr	r3, [r7, #12]
 800aa5e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800aa60:	61fb      	str	r3, [r7, #28]
  va_start(ap, fmt);
 800aa62:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800aa66:	617b      	str	r3, [r7, #20]
  mg_vxprintf(mg_pfn_iobuf, &c->send, fmt, &ap);
 800aa68:	68fb      	ldr	r3, [r7, #12]
 800aa6a:	f103 0150 	add.w	r1, r3, #80	@ 0x50
 800aa6e:	f107 0314 	add.w	r3, r7, #20
 800aa72:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800aa74:	4817      	ldr	r0, [pc, #92]	@ (800aad4 <mg_http_reply+0xa8>)
 800aa76:	f7fd fecf 	bl	8008818 <mg_vxprintf>
  va_end(ap);
  if (c->send.len > 16) {
 800aa7a:	68fb      	ldr	r3, [r7, #12]
 800aa7c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800aa7e:	2b10      	cmp	r3, #16
 800aa80:	d916      	bls.n	800aab0 <mg_http_reply+0x84>
    size_t n = mg_snprintf((char *) &c->send.buf[len - 15], 11, "%-10lu",
 800aa82:	68fb      	ldr	r3, [r7, #12]
 800aa84:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800aa86:	69fb      	ldr	r3, [r7, #28]
 800aa88:	3b0f      	subs	r3, #15
 800aa8a:	18d0      	adds	r0, r2, r3
                           (unsigned long) (c->send.len - len));
 800aa8c:	68fb      	ldr	r3, [r7, #12]
 800aa8e:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800aa90:	69fb      	ldr	r3, [r7, #28]
 800aa92:	1ad3      	subs	r3, r2, r3
    size_t n = mg_snprintf((char *) &c->send.buf[len - 15], 11, "%-10lu",
 800aa94:	4a10      	ldr	r2, [pc, #64]	@ (800aad8 <mg_http_reply+0xac>)
 800aa96:	210b      	movs	r1, #11
 800aa98:	f007 fbb2 	bl	8012200 <mg_snprintf>
 800aa9c:	61b8      	str	r0, [r7, #24]
    c->send.buf[len - 15 + n] = ' ';  // Change ending 0 to space
 800aa9e:	68fb      	ldr	r3, [r7, #12]
 800aaa0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800aaa2:	69f9      	ldr	r1, [r7, #28]
 800aaa4:	69bb      	ldr	r3, [r7, #24]
 800aaa6:	440b      	add	r3, r1
 800aaa8:	3b0f      	subs	r3, #15
 800aaaa:	4413      	add	r3, r2
 800aaac:	2220      	movs	r2, #32
 800aaae:	701a      	strb	r2, [r3, #0]
  }
  c->is_resp = 0;
 800aab0:	68fa      	ldr	r2, [r7, #12]
 800aab2:	f892 30b6 	ldrb.w	r3, [r2, #182]	@ 0xb6
 800aab6:	f023 0301 	bic.w	r3, r3, #1
 800aaba:	f882 30b6 	strb.w	r3, [r2, #182]	@ 0xb6
}
 800aabe:	bf00      	nop
 800aac0:	3724      	adds	r7, #36	@ 0x24
 800aac2:	46bd      	mov	sp, r7
 800aac4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800aac8:	b001      	add	sp, #4
 800aaca:	4770      	bx	lr
 800aacc:	08025980 	.word	0x08025980
 800aad0:	08025984 	.word	0x08025984
 800aad4:	08012191 	.word	0x08012191
 800aad8:	080259b8 	.word	0x080259b8

0800aadc <restore_http_cb>:

static void http_cb(struct mg_connection *, int, void *);
static void restore_http_cb(struct mg_connection *c) {
 800aadc:	b580      	push	{r7, lr}
 800aade:	b082      	sub	sp, #8
 800aae0:	af00      	add	r7, sp, #0
 800aae2:	6078      	str	r0, [r7, #4]
  mg_fs_close((struct mg_fd *) c->pfn_data);
 800aae4:	687b      	ldr	r3, [r7, #4]
 800aae6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800aaea:	4618      	mov	r0, r3
 800aaec:	f7fe fa5f 	bl	8008fae <mg_fs_close>
  c->pfn_data = NULL;
 800aaf0:	687b      	ldr	r3, [r7, #4]
 800aaf2:	2200      	movs	r2, #0
 800aaf4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  c->pfn = http_cb;
 800aaf8:	687b      	ldr	r3, [r7, #4]
 800aafa:	4a07      	ldr	r2, [pc, #28]	@ (800ab18 <restore_http_cb+0x3c>)
 800aafc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  c->is_resp = 0;
 800ab00:	687a      	ldr	r2, [r7, #4]
 800ab02:	f892 30b6 	ldrb.w	r3, [r2, #182]	@ 0xb6
 800ab06:	f023 0301 	bic.w	r3, r3, #1
 800ab0a:	f882 30b6 	strb.w	r3, [r2, #182]	@ 0xb6
}
 800ab0e:	bf00      	nop
 800ab10:	3708      	adds	r7, #8
 800ab12:	46bd      	mov	sp, r7
 800ab14:	bd80      	pop	{r7, pc}
 800ab16:	bf00      	nop
 800ab18:	0800baa5 	.word	0x0800baa5

0800ab1c <mg_http_etag>:

char *mg_http_etag(char *buf, size_t len, size_t size, time_t mtime);
char *mg_http_etag(char *buf, size_t len, size_t size, time_t mtime) {
 800ab1c:	b5b0      	push	{r4, r5, r7, lr}
 800ab1e:	b088      	sub	sp, #32
 800ab20:	af04      	add	r7, sp, #16
 800ab22:	60f8      	str	r0, [r7, #12]
 800ab24:	60b9      	str	r1, [r7, #8]
 800ab26:	607a      	str	r2, [r7, #4]
  mg_snprintf(buf, len, "\"%lld.%lld\"", (int64_t) mtime, (int64_t) size);
 800ab28:	687b      	ldr	r3, [r7, #4]
 800ab2a:	2200      	movs	r2, #0
 800ab2c:	461c      	mov	r4, r3
 800ab2e:	4615      	mov	r5, r2
 800ab30:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800ab34:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800ab38:	e9cd 2300 	strd	r2, r3, [sp]
 800ab3c:	4a04      	ldr	r2, [pc, #16]	@ (800ab50 <mg_http_etag+0x34>)
 800ab3e:	68b9      	ldr	r1, [r7, #8]
 800ab40:	68f8      	ldr	r0, [r7, #12]
 800ab42:	f007 fb5d 	bl	8012200 <mg_snprintf>
  return buf;
 800ab46:	68fb      	ldr	r3, [r7, #12]
}
 800ab48:	4618      	mov	r0, r3
 800ab4a:	3710      	adds	r7, #16
 800ab4c:	46bd      	mov	sp, r7
 800ab4e:	bdb0      	pop	{r4, r5, r7, pc}
 800ab50:	080259c0 	.word	0x080259c0

0800ab54 <static_cb>:

static void static_cb(struct mg_connection *c, int ev, void *ev_data) {
 800ab54:	b580      	push	{r7, lr}
 800ab56:	b08a      	sub	sp, #40	@ 0x28
 800ab58:	af00      	add	r7, sp, #0
 800ab5a:	60f8      	str	r0, [r7, #12]
 800ab5c:	60b9      	str	r1, [r7, #8]
 800ab5e:	607a      	str	r2, [r7, #4]
  if (ev == MG_EV_WRITE || ev == MG_EV_POLL) {
 800ab60:	68bb      	ldr	r3, [r7, #8]
 800ab62:	2b08      	cmp	r3, #8
 800ab64:	d002      	beq.n	800ab6c <static_cb+0x18>
 800ab66:	68bb      	ldr	r3, [r7, #8]
 800ab68:	2b02      	cmp	r3, #2
 800ab6a:	d148      	bne.n	800abfe <static_cb+0xaa>
    struct mg_fd *fd = (struct mg_fd *) c->pfn_data;
 800ab6c:	68fb      	ldr	r3, [r7, #12]
 800ab6e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800ab72:	623b      	str	r3, [r7, #32]
    // Read to send IO buffer directly, avoid extra on-stack buffer
    size_t n, max = MG_IO_SIZE, space;
 800ab74:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800ab78:	61fb      	str	r3, [r7, #28]
    size_t *cl = (size_t *) &c->data[(sizeof(c->data) - sizeof(size_t)) /
 800ab7a:	68fb      	ldr	r3, [r7, #12]
 800ab7c:	33ac      	adds	r3, #172	@ 0xac
 800ab7e:	61bb      	str	r3, [r7, #24]
                                     sizeof(size_t) * sizeof(size_t)];
    if (c->send.size < max) mg_iobuf_resize(&c->send, max);
 800ab80:	68fb      	ldr	r3, [r7, #12]
 800ab82:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ab84:	69fa      	ldr	r2, [r7, #28]
 800ab86:	429a      	cmp	r2, r3
 800ab88:	d905      	bls.n	800ab96 <static_cb+0x42>
 800ab8a:	68fb      	ldr	r3, [r7, #12]
 800ab8c:	3350      	adds	r3, #80	@ 0x50
 800ab8e:	69f9      	ldr	r1, [r7, #28]
 800ab90:	4618      	mov	r0, r3
 800ab92:	f001 fb5d 	bl	800c250 <mg_iobuf_resize>
    if (c->send.len >= c->send.size) return;  // Rate limit
 800ab96:	68fb      	ldr	r3, [r7, #12]
 800ab98:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800ab9a:	68fb      	ldr	r3, [r7, #12]
 800ab9c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ab9e:	429a      	cmp	r2, r3
 800aba0:	d234      	bcs.n	800ac0c <static_cb+0xb8>
    if ((space = c->send.size - c->send.len) > *cl) space = *cl;
 800aba2:	68fb      	ldr	r3, [r7, #12]
 800aba4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800aba6:	68fb      	ldr	r3, [r7, #12]
 800aba8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800abaa:	1ad3      	subs	r3, r2, r3
 800abac:	627b      	str	r3, [r7, #36]	@ 0x24
 800abae:	69bb      	ldr	r3, [r7, #24]
 800abb0:	681b      	ldr	r3, [r3, #0]
 800abb2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800abb4:	429a      	cmp	r2, r3
 800abb6:	d902      	bls.n	800abbe <static_cb+0x6a>
 800abb8:	69bb      	ldr	r3, [r7, #24]
 800abba:	681b      	ldr	r3, [r3, #0]
 800abbc:	627b      	str	r3, [r7, #36]	@ 0x24
    n = fd->fs->rd(fd->fd, c->send.buf + c->send.len, space);
 800abbe:	6a3b      	ldr	r3, [r7, #32]
 800abc0:	685b      	ldr	r3, [r3, #4]
 800abc2:	691b      	ldr	r3, [r3, #16]
 800abc4:	6a3a      	ldr	r2, [r7, #32]
 800abc6:	6810      	ldr	r0, [r2, #0]
 800abc8:	68fa      	ldr	r2, [r7, #12]
 800abca:	6d11      	ldr	r1, [r2, #80]	@ 0x50
 800abcc:	68fa      	ldr	r2, [r7, #12]
 800abce:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 800abd0:	4411      	add	r1, r2
 800abd2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800abd4:	4798      	blx	r3
 800abd6:	6178      	str	r0, [r7, #20]
    c->send.len += n;
 800abd8:	68fb      	ldr	r3, [r7, #12]
 800abda:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800abdc:	697b      	ldr	r3, [r7, #20]
 800abde:	441a      	add	r2, r3
 800abe0:	68fb      	ldr	r3, [r7, #12]
 800abe2:	659a      	str	r2, [r3, #88]	@ 0x58
    *cl -= n;
 800abe4:	69bb      	ldr	r3, [r7, #24]
 800abe6:	681a      	ldr	r2, [r3, #0]
 800abe8:	697b      	ldr	r3, [r7, #20]
 800abea:	1ad2      	subs	r2, r2, r3
 800abec:	69bb      	ldr	r3, [r7, #24]
 800abee:	601a      	str	r2, [r3, #0]
    if (n == 0) restore_http_cb(c);
 800abf0:	697b      	ldr	r3, [r7, #20]
 800abf2:	2b00      	cmp	r3, #0
 800abf4:	d10c      	bne.n	800ac10 <static_cb+0xbc>
 800abf6:	68f8      	ldr	r0, [r7, #12]
 800abf8:	f7ff ff70 	bl	800aadc <restore_http_cb>
  if (ev == MG_EV_WRITE || ev == MG_EV_POLL) {
 800abfc:	e008      	b.n	800ac10 <static_cb+0xbc>
  } else if (ev == MG_EV_CLOSE) {
 800abfe:	68bb      	ldr	r3, [r7, #8]
 800ac00:	2b09      	cmp	r3, #9
 800ac02:	d106      	bne.n	800ac12 <static_cb+0xbe>
    restore_http_cb(c);
 800ac04:	68f8      	ldr	r0, [r7, #12]
 800ac06:	f7ff ff69 	bl	800aadc <restore_http_cb>
 800ac0a:	e002      	b.n	800ac12 <static_cb+0xbe>
    if (c->send.len >= c->send.size) return;  // Rate limit
 800ac0c:	bf00      	nop
 800ac0e:	e000      	b.n	800ac12 <static_cb+0xbe>
  if (ev == MG_EV_WRITE || ev == MG_EV_POLL) {
 800ac10:	bf00      	nop
  }
  (void) ev_data;
}
 800ac12:	3728      	adds	r7, #40	@ 0x28
 800ac14:	46bd      	mov	sp, r7
 800ac16:	bd80      	pop	{r7, pc}

0800ac18 <guess_content_type>:
    MG_C_STR("3gp"), MG_C_STR("video/3gpp"),
    {0, 0},
};
// clang-format on

static struct mg_str guess_content_type(struct mg_str path, const char *extra) {
 800ac18:	b590      	push	{r4, r7, lr}
 800ac1a:	b093      	sub	sp, #76	@ 0x4c
 800ac1c:	af02      	add	r7, sp, #8
 800ac1e:	60f8      	str	r0, [r7, #12]
 800ac20:	1d38      	adds	r0, r7, #4
 800ac22:	e880 0006 	stmia.w	r0, {r1, r2}
 800ac26:	603b      	str	r3, [r7, #0]
  struct mg_str entry, k, v, s = mg_str(extra), asterisk = mg_str_n("*", 1);
 800ac28:	f107 031c 	add.w	r3, r7, #28
 800ac2c:	6839      	ldr	r1, [r7, #0]
 800ac2e:	4618      	mov	r0, r3
 800ac30:	f00a feae 	bl	8015990 <mg_str_s>
 800ac34:	f107 0314 	add.w	r3, r7, #20
 800ac38:	2201      	movs	r2, #1
 800ac3a:	4943      	ldr	r1, [pc, #268]	@ (800ad48 <guess_content_type+0x130>)
 800ac3c:	4618      	mov	r0, r3
 800ac3e:	f00a fec4 	bl	80159ca <mg_str_n>
  size_t i = 0;
 800ac42:	2300      	movs	r3, #0
 800ac44:	63fb      	str	r3, [r7, #60]	@ 0x3c

  // Shrink path to its extension only
  while (i < path.len && path.buf[path.len - i - 1] != '.') i++;
 800ac46:	e002      	b.n	800ac4e <guess_content_type+0x36>
 800ac48:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ac4a:	3301      	adds	r3, #1
 800ac4c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ac4e:	68bb      	ldr	r3, [r7, #8]
 800ac50:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800ac52:	429a      	cmp	r2, r3
 800ac54:	d208      	bcs.n	800ac68 <guess_content_type+0x50>
 800ac56:	687a      	ldr	r2, [r7, #4]
 800ac58:	68b9      	ldr	r1, [r7, #8]
 800ac5a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ac5c:	1acb      	subs	r3, r1, r3
 800ac5e:	3b01      	subs	r3, #1
 800ac60:	4413      	add	r3, r2
 800ac62:	781b      	ldrb	r3, [r3, #0]
 800ac64:	2b2e      	cmp	r3, #46	@ 0x2e
 800ac66:	d1ef      	bne.n	800ac48 <guess_content_type+0x30>
  path.buf += path.len - i;
 800ac68:	687a      	ldr	r2, [r7, #4]
 800ac6a:	68b9      	ldr	r1, [r7, #8]
 800ac6c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ac6e:	1acb      	subs	r3, r1, r3
 800ac70:	4413      	add	r3, r2
 800ac72:	607b      	str	r3, [r7, #4]
  path.len = i;
 800ac74:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ac76:	60bb      	str	r3, [r7, #8]

  // Process user-provided mime type overrides, if any
  while (mg_span(s, &entry, &s, ',')) {
 800ac78:	e02b      	b.n	800acd2 <guess_content_type+0xba>
    if (mg_span(entry, &k, &v, '=') &&
 800ac7a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800ac7e:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 800ac82:	213d      	movs	r1, #61	@ 0x3d
 800ac84:	9100      	str	r1, [sp, #0]
 800ac86:	f107 0134 	add.w	r1, r7, #52	@ 0x34
 800ac8a:	c903      	ldmia	r1, {r0, r1}
 800ac8c:	f00b f87d 	bl	8015d8a <mg_span>
 800ac90:	4603      	mov	r3, r0
 800ac92:	2b00      	cmp	r3, #0
 800ac94:	d01d      	beq.n	800acd2 <guess_content_type+0xba>
        (mg_strcmp(asterisk, k) == 0 || mg_strcmp(path, k) == 0))
 800ac96:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800ac9a:	cb0c      	ldmia	r3, {r2, r3}
 800ac9c:	f107 0114 	add.w	r1, r7, #20
 800aca0:	c903      	ldmia	r1, {r0, r1}
 800aca2:	f00a fef5 	bl	8015a90 <mg_strcmp>
 800aca6:	4603      	mov	r3, r0
    if (mg_span(entry, &k, &v, '=') &&
 800aca8:	2b00      	cmp	r3, #0
 800acaa:	d009      	beq.n	800acc0 <guess_content_type+0xa8>
        (mg_strcmp(asterisk, k) == 0 || mg_strcmp(path, k) == 0))
 800acac:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800acb0:	cb0c      	ldmia	r3, {r2, r3}
 800acb2:	1d39      	adds	r1, r7, #4
 800acb4:	c903      	ldmia	r1, {r0, r1}
 800acb6:	f00a feeb 	bl	8015a90 <mg_strcmp>
 800acba:	4603      	mov	r3, r0
 800acbc:	2b00      	cmp	r3, #0
 800acbe:	d108      	bne.n	800acd2 <guess_content_type+0xba>
      return v;
 800acc0:	68fb      	ldr	r3, [r7, #12]
 800acc2:	461a      	mov	r2, r3
 800acc4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800acc8:	e893 0003 	ldmia.w	r3, {r0, r1}
 800accc:	e882 0003 	stmia.w	r2, {r0, r1}
 800acd0:	e036      	b.n	800ad40 <guess_content_type+0x128>
  while (mg_span(s, &entry, &s, ',')) {
 800acd2:	f107 031c 	add.w	r3, r7, #28
 800acd6:	f107 0234 	add.w	r2, r7, #52	@ 0x34
 800acda:	212c      	movs	r1, #44	@ 0x2c
 800acdc:	9100      	str	r1, [sp, #0]
 800acde:	f107 011c 	add.w	r1, r7, #28
 800ace2:	c903      	ldmia	r1, {r0, r1}
 800ace4:	f00b f851 	bl	8015d8a <mg_span>
 800ace8:	4603      	mov	r3, r0
 800acea:	2b00      	cmp	r3, #0
 800acec:	d1c5      	bne.n	800ac7a <guess_content_type+0x62>
  }

  // Process built-in mime types
  for (i = 0; s_known_types[i].buf != NULL; i += 2) {
 800acee:	2300      	movs	r3, #0
 800acf0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800acf2:	e01a      	b.n	800ad2a <guess_content_type+0x112>
    if (mg_strcmp(path, s_known_types[i]) == 0) return s_known_types[i + 1];
 800acf4:	4a15      	ldr	r2, [pc, #84]	@ (800ad4c <guess_content_type+0x134>)
 800acf6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800acf8:	00db      	lsls	r3, r3, #3
 800acfa:	4413      	add	r3, r2
 800acfc:	cb0c      	ldmia	r3, {r2, r3}
 800acfe:	1d39      	adds	r1, r7, #4
 800ad00:	c903      	ldmia	r1, {r0, r1}
 800ad02:	f00a fec5 	bl	8015a90 <mg_strcmp>
 800ad06:	4603      	mov	r3, r0
 800ad08:	2b00      	cmp	r3, #0
 800ad0a:	d10b      	bne.n	800ad24 <guess_content_type+0x10c>
 800ad0c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ad0e:	3301      	adds	r3, #1
 800ad10:	68f9      	ldr	r1, [r7, #12]
 800ad12:	4a0e      	ldr	r2, [pc, #56]	@ (800ad4c <guess_content_type+0x134>)
 800ad14:	460c      	mov	r4, r1
 800ad16:	00db      	lsls	r3, r3, #3
 800ad18:	4413      	add	r3, r2
 800ad1a:	e893 0003 	ldmia.w	r3, {r0, r1}
 800ad1e:	e884 0003 	stmia.w	r4, {r0, r1}
 800ad22:	e00d      	b.n	800ad40 <guess_content_type+0x128>
  for (i = 0; s_known_types[i].buf != NULL; i += 2) {
 800ad24:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ad26:	3302      	adds	r3, #2
 800ad28:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ad2a:	4a08      	ldr	r2, [pc, #32]	@ (800ad4c <guess_content_type+0x134>)
 800ad2c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ad2e:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800ad32:	2b00      	cmp	r3, #0
 800ad34:	d1de      	bne.n	800acf4 <guess_content_type+0xdc>
  }

  return mg_str("text/plain; charset=utf-8");
 800ad36:	68fb      	ldr	r3, [r7, #12]
 800ad38:	4905      	ldr	r1, [pc, #20]	@ (800ad50 <guess_content_type+0x138>)
 800ad3a:	4618      	mov	r0, r3
 800ad3c:	f00a fe28 	bl	8015990 <mg_str_s>
}
 800ad40:	68f8      	ldr	r0, [r7, #12]
 800ad42:	3744      	adds	r7, #68	@ 0x44
 800ad44:	46bd      	mov	sp, r7
 800ad46:	bd90      	pop	{r4, r7, pc}
 800ad48:	08025c30 	.word	0x08025c30
 800ad4c:	20000060 	.word	0x20000060
 800ad50:	08025aac 	.word	0x08025aac

0800ad54 <getrange>:

static int getrange(struct mg_str *s, size_t *a, size_t *b) {
 800ad54:	b580      	push	{r7, lr}
 800ad56:	b08c      	sub	sp, #48	@ 0x30
 800ad58:	af02      	add	r7, sp, #8
 800ad5a:	60f8      	str	r0, [r7, #12]
 800ad5c:	60b9      	str	r1, [r7, #8]
 800ad5e:	607a      	str	r2, [r7, #4]
  size_t i, numparsed = 0;
 800ad60:	2300      	movs	r3, #0
 800ad62:	623b      	str	r3, [r7, #32]
  for (i = 0; i + 6 < s->len; i++) {
 800ad64:	2300      	movs	r3, #0
 800ad66:	627b      	str	r3, [r7, #36]	@ 0x24
 800ad68:	e058      	b.n	800ae1c <getrange+0xc8>
    struct mg_str k, v = mg_str_n(s->buf + i + 6, s->len - i - 6);
 800ad6a:	68fb      	ldr	r3, [r7, #12]
 800ad6c:	681a      	ldr	r2, [r3, #0]
 800ad6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ad70:	3306      	adds	r3, #6
 800ad72:	18d1      	adds	r1, r2, r3
 800ad74:	68fb      	ldr	r3, [r7, #12]
 800ad76:	685a      	ldr	r2, [r3, #4]
 800ad78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ad7a:	1ad3      	subs	r3, r2, r3
 800ad7c:	1f9a      	subs	r2, r3, #6
 800ad7e:	f107 0310 	add.w	r3, r7, #16
 800ad82:	4618      	mov	r0, r3
 800ad84:	f00a fe21 	bl	80159ca <mg_str_n>
    if (memcmp(&s->buf[i], "bytes=", 6) != 0) continue;
 800ad88:	68fb      	ldr	r3, [r7, #12]
 800ad8a:	681a      	ldr	r2, [r3, #0]
 800ad8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ad8e:	4413      	add	r3, r2
 800ad90:	2206      	movs	r2, #6
 800ad92:	4929      	ldr	r1, [pc, #164]	@ (800ae38 <getrange+0xe4>)
 800ad94:	4618      	mov	r0, r3
 800ad96:	f019 fb4f 	bl	8024438 <memcmp>
 800ad9a:	4603      	mov	r3, r0
 800ad9c:	2b00      	cmp	r3, #0
 800ad9e:	d139      	bne.n	800ae14 <getrange+0xc0>
    if (mg_span(v, &k, &v, '-')) {
 800ada0:	f107 0310 	add.w	r3, r7, #16
 800ada4:	f107 0218 	add.w	r2, r7, #24
 800ada8:	212d      	movs	r1, #45	@ 0x2d
 800adaa:	9100      	str	r1, [sp, #0]
 800adac:	f107 0110 	add.w	r1, r7, #16
 800adb0:	c903      	ldmia	r1, {r0, r1}
 800adb2:	f00a ffea 	bl	8015d8a <mg_span>
 800adb6:	4603      	mov	r3, r0
 800adb8:	2b00      	cmp	r3, #0
 800adba:	d01d      	beq.n	800adf8 <getrange+0xa4>
      if (mg_to_size_t(k, a)) numparsed++;
 800adbc:	68ba      	ldr	r2, [r7, #8]
 800adbe:	f107 0318 	add.w	r3, r7, #24
 800adc2:	e893 0003 	ldmia.w	r3, {r0, r1}
 800adc6:	f7fe fb6d 	bl	80094a4 <mg_to_size_t>
 800adca:	4603      	mov	r3, r0
 800adcc:	2b00      	cmp	r3, #0
 800adce:	d002      	beq.n	800add6 <getrange+0x82>
 800add0:	6a3b      	ldr	r3, [r7, #32]
 800add2:	3301      	adds	r3, #1
 800add4:	623b      	str	r3, [r7, #32]
      if (v.len > 0 && mg_to_size_t(v, b)) numparsed++;
 800add6:	697b      	ldr	r3, [r7, #20]
 800add8:	2b00      	cmp	r3, #0
 800adda:	d026      	beq.n	800ae2a <getrange+0xd6>
 800addc:	687a      	ldr	r2, [r7, #4]
 800adde:	f107 0310 	add.w	r3, r7, #16
 800ade2:	e893 0003 	ldmia.w	r3, {r0, r1}
 800ade6:	f7fe fb5d 	bl	80094a4 <mg_to_size_t>
 800adea:	4603      	mov	r3, r0
 800adec:	2b00      	cmp	r3, #0
 800adee:	d01c      	beq.n	800ae2a <getrange+0xd6>
 800adf0:	6a3b      	ldr	r3, [r7, #32]
 800adf2:	3301      	adds	r3, #1
 800adf4:	623b      	str	r3, [r7, #32]
    } else {
      if (mg_to_size_t(v, a)) numparsed++;
    }
    break;
 800adf6:	e018      	b.n	800ae2a <getrange+0xd6>
      if (mg_to_size_t(v, a)) numparsed++;
 800adf8:	68ba      	ldr	r2, [r7, #8]
 800adfa:	f107 0310 	add.w	r3, r7, #16
 800adfe:	e893 0003 	ldmia.w	r3, {r0, r1}
 800ae02:	f7fe fb4f 	bl	80094a4 <mg_to_size_t>
 800ae06:	4603      	mov	r3, r0
 800ae08:	2b00      	cmp	r3, #0
 800ae0a:	d00e      	beq.n	800ae2a <getrange+0xd6>
 800ae0c:	6a3b      	ldr	r3, [r7, #32]
 800ae0e:	3301      	adds	r3, #1
 800ae10:	623b      	str	r3, [r7, #32]
 800ae12:	e00b      	b.n	800ae2c <getrange+0xd8>
    if (memcmp(&s->buf[i], "bytes=", 6) != 0) continue;
 800ae14:	bf00      	nop
  for (i = 0; i + 6 < s->len; i++) {
 800ae16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ae18:	3301      	adds	r3, #1
 800ae1a:	627b      	str	r3, [r7, #36]	@ 0x24
 800ae1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ae1e:	1d9a      	adds	r2, r3, #6
 800ae20:	68fb      	ldr	r3, [r7, #12]
 800ae22:	685b      	ldr	r3, [r3, #4]
 800ae24:	429a      	cmp	r2, r3
 800ae26:	d3a0      	bcc.n	800ad6a <getrange+0x16>
 800ae28:	e000      	b.n	800ae2c <getrange+0xd8>
    break;
 800ae2a:	bf00      	nop
  }
  return (int) numparsed;
 800ae2c:	6a3b      	ldr	r3, [r7, #32]
}
 800ae2e:	4618      	mov	r0, r3
 800ae30:	3728      	adds	r7, #40	@ 0x28
 800ae32:	46bd      	mov	sp, r7
 800ae34:	bd80      	pop	{r7, pc}
 800ae36:	bf00      	nop
 800ae38:	08025c34 	.word	0x08025c34

0800ae3c <mg_http_serve_file>:

void mg_http_serve_file(struct mg_connection *c, struct mg_http_message *hm,
                        const char *path,
                        const struct mg_http_serve_opts *opts) {
 800ae3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ae40:	b0fb      	sub	sp, #492	@ 0x1ec
 800ae42:	af0a      	add	r7, sp, #40	@ 0x28
 800ae44:	f507 74e0 	add.w	r4, r7, #448	@ 0x1c0
 800ae48:	f5a4 74ce 	sub.w	r4, r4, #412	@ 0x19c
 800ae4c:	6020      	str	r0, [r4, #0]
 800ae4e:	f507 70e0 	add.w	r0, r7, #448	@ 0x1c0
 800ae52:	f5a0 70d0 	sub.w	r0, r0, #416	@ 0x1a0
 800ae56:	6001      	str	r1, [r0, #0]
 800ae58:	f507 71e0 	add.w	r1, r7, #448	@ 0x1c0
 800ae5c:	f5a1 71d2 	sub.w	r1, r1, #420	@ 0x1a4
 800ae60:	600a      	str	r2, [r1, #0]
 800ae62:	f507 72e0 	add.w	r2, r7, #448	@ 0x1c0
 800ae66:	f5a2 72d4 	sub.w	r2, r2, #424	@ 0x1a8
 800ae6a:	6013      	str	r3, [r2, #0]
  char etag[64], tmp[MG_PATH_MAX];
  struct mg_fs *fs = opts->fs == NULL ? &mg_fs_posix : opts->fs;
 800ae6c:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 800ae70:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 800ae74:	681b      	ldr	r3, [r3, #0]
 800ae76:	695b      	ldr	r3, [r3, #20]
 800ae78:	2b00      	cmp	r3, #0
 800ae7a:	d006      	beq.n	800ae8a <mg_http_serve_file+0x4e>
 800ae7c:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 800ae80:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 800ae84:	681b      	ldr	r3, [r3, #0]
 800ae86:	695b      	ldr	r3, [r3, #20]
 800ae88:	e000      	b.n	800ae8c <mg_http_serve_file+0x50>
 800ae8a:	4ba3      	ldr	r3, [pc, #652]	@ (800b118 <mg_http_serve_file+0x2dc>)
 800ae8c:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
  struct mg_fd *fd = NULL;
 800ae90:	2300      	movs	r3, #0
 800ae92:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
  size_t size = 0;
 800ae96:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 800ae9a:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800ae9e:	2200      	movs	r2, #0
 800aea0:	601a      	str	r2, [r3, #0]
  time_t mtime = 0;
 800aea2:	f04f 0200 	mov.w	r2, #0
 800aea6:	f04f 0300 	mov.w	r3, #0
 800aeaa:	e9c7 2328 	strd	r2, r3, [r7, #160]	@ 0xa0
  struct mg_str *inm = NULL;
 800aeae:	2300      	movs	r3, #0
 800aeb0:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
  struct mg_str mime = guess_content_type(mg_str(path), opts->mime_types);
 800aeb4:	f507 72b8 	add.w	r2, r7, #368	@ 0x170
 800aeb8:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 800aebc:	f5a3 73d2 	sub.w	r3, r3, #420	@ 0x1a4
 800aec0:	6819      	ldr	r1, [r3, #0]
 800aec2:	4610      	mov	r0, r2
 800aec4:	f00a fd64 	bl	8015990 <mg_str_s>
 800aec8:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 800aecc:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 800aed0:	681b      	ldr	r3, [r3, #0]
 800aed2:	68db      	ldr	r3, [r3, #12]
 800aed4:	f507 72e0 	add.w	r2, r7, #448	@ 0x1c0
 800aed8:	f5a2 7094 	sub.w	r0, r2, #296	@ 0x128
 800aedc:	f507 72b8 	add.w	r2, r7, #368	@ 0x170
 800aee0:	ca06      	ldmia	r2, {r1, r2}
 800aee2:	f7ff fe99 	bl	800ac18 <guess_content_type>
  bool gzip = false;
 800aee6:	2300      	movs	r3, #0
 800aee8:	f887 31bb 	strb.w	r3, [r7, #443]	@ 0x1bb

  if (path != NULL) {
 800aeec:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 800aef0:	f5a3 73d2 	sub.w	r3, r3, #420	@ 0x1a4
 800aef4:	681b      	ldr	r3, [r3, #0]
 800aef6:	2b00      	cmp	r3, #0
 800aef8:	d053      	beq.n	800afa2 <mg_http_serve_file+0x166>
    // If a browser sends us "Accept-Encoding: gzip", try to open .gz first
    struct mg_str *ae = mg_http_get_header(hm, "Accept-Encoding");
 800aefa:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 800aefe:	f5a3 73d0 	sub.w	r3, r3, #416	@ 0x1a0
 800af02:	4986      	ldr	r1, [pc, #536]	@ (800b11c <mg_http_serve_file+0x2e0>)
 800af04:	6818      	ldr	r0, [r3, #0]
 800af06:	f7fe fd1b 	bl	8009940 <mg_http_get_header>
 800af0a:	f8c7 01a4 	str.w	r0, [r7, #420]	@ 0x1a4
    if (ae != NULL) {
 800af0e:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 800af12:	2b00      	cmp	r3, #0
 800af14:	d035      	beq.n	800af82 <mg_http_serve_file+0x146>
      if (mg_match(*ae, mg_str("*gzip*"), NULL)) {
 800af16:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 800af1a:	4981      	ldr	r1, [pc, #516]	@ (800b120 <mg_http_serve_file+0x2e4>)
 800af1c:	4618      	mov	r0, r3
 800af1e:	f00a fd37 	bl	8015990 <mg_str_s>
 800af22:	f8d7 11a4 	ldr.w	r1, [r7, #420]	@ 0x1a4
 800af26:	2300      	movs	r3, #0
 800af28:	9300      	str	r3, [sp, #0]
 800af2a:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 800af2e:	cb0c      	ldmia	r3, {r2, r3}
 800af30:	c903      	ldmia	r1, {r0, r1}
 800af32:	f00a fe36 	bl	8015ba2 <mg_match>
 800af36:	4603      	mov	r3, r0
 800af38:	2b00      	cmp	r3, #0
 800af3a:	d022      	beq.n	800af82 <mg_http_serve_file+0x146>
        mg_snprintf(tmp, sizeof(tmp), "%s.gz", path);
 800af3c:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 800af40:	f5a3 73d2 	sub.w	r3, r3, #420	@ 0x1a4
 800af44:	f107 00b0 	add.w	r0, r7, #176	@ 0xb0
 800af48:	681b      	ldr	r3, [r3, #0]
 800af4a:	4a76      	ldr	r2, [pc, #472]	@ (800b124 <mg_http_serve_file+0x2e8>)
 800af4c:	2180      	movs	r1, #128	@ 0x80
 800af4e:	f007 f957 	bl	8012200 <mg_snprintf>
        fd = mg_fs_open(fs, tmp, MG_FS_READ);
 800af52:	f107 03b0 	add.w	r3, r7, #176	@ 0xb0
 800af56:	2201      	movs	r2, #1
 800af58:	4619      	mov	r1, r3
 800af5a:	f8d7 01ac 	ldr.w	r0, [r7, #428]	@ 0x1ac
 800af5e:	f7fd ffff 	bl	8008f60 <mg_fs_open>
 800af62:	f8c7 01bc 	str.w	r0, [r7, #444]	@ 0x1bc
        if (fd != NULL) gzip = true, path = tmp;
 800af66:	f8d7 31bc 	ldr.w	r3, [r7, #444]	@ 0x1bc
 800af6a:	2b00      	cmp	r3, #0
 800af6c:	d009      	beq.n	800af82 <mg_http_serve_file+0x146>
 800af6e:	2301      	movs	r3, #1
 800af70:	f887 31bb 	strb.w	r3, [r7, #443]	@ 0x1bb
 800af74:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 800af78:	f5a3 73d2 	sub.w	r3, r3, #420	@ 0x1a4
 800af7c:	f107 02b0 	add.w	r2, r7, #176	@ 0xb0
 800af80:	601a      	str	r2, [r3, #0]
      }
    }
    // No luck opening .gz? Open what we've told to open
    if (fd == NULL) fd = mg_fs_open(fs, path, MG_FS_READ);
 800af82:	f8d7 31bc 	ldr.w	r3, [r7, #444]	@ 0x1bc
 800af86:	2b00      	cmp	r3, #0
 800af88:	d10b      	bne.n	800afa2 <mg_http_serve_file+0x166>
 800af8a:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 800af8e:	f5a3 73d2 	sub.w	r3, r3, #420	@ 0x1a4
 800af92:	2201      	movs	r2, #1
 800af94:	6819      	ldr	r1, [r3, #0]
 800af96:	f8d7 01ac 	ldr.w	r0, [r7, #428]	@ 0x1ac
 800af9a:	f7fd ffe1 	bl	8008f60 <mg_fs_open>
 800af9e:	f8c7 01bc 	str.w	r0, [r7, #444]	@ 0x1bc
  }

  // Failed to open, and page404 is configured? Open it, then
  if (fd == NULL && opts->page404 != NULL) {
 800afa2:	f8d7 31bc 	ldr.w	r3, [r7, #444]	@ 0x1bc
 800afa6:	2b00      	cmp	r3, #0
 800afa8:	d144      	bne.n	800b034 <mg_http_serve_file+0x1f8>
 800afaa:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 800afae:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 800afb2:	681b      	ldr	r3, [r3, #0]
 800afb4:	691b      	ldr	r3, [r3, #16]
 800afb6:	2b00      	cmp	r3, #0
 800afb8:	d03c      	beq.n	800b034 <mg_http_serve_file+0x1f8>
    fd = mg_fs_open(fs, opts->page404, MG_FS_READ);
 800afba:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 800afbe:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 800afc2:	681b      	ldr	r3, [r3, #0]
 800afc4:	691b      	ldr	r3, [r3, #16]
 800afc6:	2201      	movs	r2, #1
 800afc8:	4619      	mov	r1, r3
 800afca:	f8d7 01ac 	ldr.w	r0, [r7, #428]	@ 0x1ac
 800afce:	f7fd ffc7 	bl	8008f60 <mg_fs_open>
 800afd2:	f8c7 01bc 	str.w	r0, [r7, #444]	@ 0x1bc
    path = opts->page404;
 800afd6:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 800afda:	f5a3 73d2 	sub.w	r3, r3, #420	@ 0x1a4
 800afde:	f507 72e0 	add.w	r2, r7, #448	@ 0x1c0
 800afe2:	f5a2 72d4 	sub.w	r2, r2, #424	@ 0x1a8
 800afe6:	6812      	ldr	r2, [r2, #0]
 800afe8:	6912      	ldr	r2, [r2, #16]
 800afea:	601a      	str	r2, [r3, #0]
    mime = guess_content_type(mg_str(path), opts->mime_types);
 800afec:	f507 72c0 	add.w	r2, r7, #384	@ 0x180
 800aff0:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 800aff4:	f5a3 73d2 	sub.w	r3, r3, #420	@ 0x1a4
 800aff8:	6819      	ldr	r1, [r3, #0]
 800affa:	4610      	mov	r0, r2
 800affc:	f00a fcc8 	bl	8015990 <mg_str_s>
 800b000:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 800b004:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 800b008:	681b      	ldr	r3, [r3, #0]
 800b00a:	68db      	ldr	r3, [r3, #12]
 800b00c:	f507 72e0 	add.w	r2, r7, #448	@ 0x1c0
 800b010:	f5a2 7494 	sub.w	r4, r2, #296	@ 0x128
 800b014:	f107 0010 	add.w	r0, r7, #16
 800b018:	f507 72c0 	add.w	r2, r7, #384	@ 0x180
 800b01c:	ca06      	ldmia	r2, {r1, r2}
 800b01e:	f7ff fdfb 	bl	800ac18 <guess_content_type>
 800b022:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 800b026:	f5a3 72d8 	sub.w	r2, r3, #432	@ 0x1b0
 800b02a:	4623      	mov	r3, r4
 800b02c:	e892 0003 	ldmia.w	r2, {r0, r1}
 800b030:	e883 0003 	stmia.w	r3, {r0, r1}
  }

  if (fd == NULL || fs->st(path, &size, &mtime) == 0) {
 800b034:	f8d7 31bc 	ldr.w	r3, [r7, #444]	@ 0x1bc
 800b038:	2b00      	cmp	r3, #0
 800b03a:	d00f      	beq.n	800b05c <mg_http_serve_file+0x220>
 800b03c:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
 800b040:	681c      	ldr	r4, [r3, #0]
 800b042:	f107 02a0 	add.w	r2, r7, #160	@ 0xa0
 800b046:	f107 01ac 	add.w	r1, r7, #172	@ 0xac
 800b04a:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 800b04e:	f5a3 73d2 	sub.w	r3, r3, #420	@ 0x1a4
 800b052:	6818      	ldr	r0, [r3, #0]
 800b054:	47a0      	blx	r4
 800b056:	4603      	mov	r3, r0
 800b058:	2b00      	cmp	r3, #0
 800b05a:	d114      	bne.n	800b086 <mg_http_serve_file+0x24a>
    mg_http_reply(c, 404, opts->extra_headers, "Not found\n");
 800b05c:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 800b060:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 800b064:	681b      	ldr	r3, [r3, #0]
 800b066:	689a      	ldr	r2, [r3, #8]
 800b068:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 800b06c:	f5a3 70ce 	sub.w	r0, r3, #412	@ 0x19c
 800b070:	4b2d      	ldr	r3, [pc, #180]	@ (800b128 <mg_http_serve_file+0x2ec>)
 800b072:	f44f 71ca 	mov.w	r1, #404	@ 0x194
 800b076:	6800      	ldr	r0, [r0, #0]
 800b078:	f7ff fcd8 	bl	800aa2c <mg_http_reply>
    mg_fs_close(fd);
 800b07c:	f8d7 01bc 	ldr.w	r0, [r7, #444]	@ 0x1bc
 800b080:	f7fd ff95 	bl	8008fae <mg_fs_close>
 800b084:	e19c      	b.n	800b3c0 <mg_http_serve_file+0x584>
    // NOTE: mg_http_etag() call should go first!
  } else if (mg_http_etag(etag, sizeof(etag), size, mtime) != NULL &&
 800b086:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 800b08a:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800b08e:	6819      	ldr	r1, [r3, #0]
 800b090:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	@ 0xa0
 800b094:	f507 7098 	add.w	r0, r7, #304	@ 0x130
 800b098:	e9cd 2300 	strd	r2, r3, [sp]
 800b09c:	460a      	mov	r2, r1
 800b09e:	2140      	movs	r1, #64	@ 0x40
 800b0a0:	f7ff fd3c 	bl	800ab1c <mg_http_etag>
 800b0a4:	4603      	mov	r3, r0
 800b0a6:	2b00      	cmp	r3, #0
 800b0a8:	d044      	beq.n	800b134 <mg_http_serve_file+0x2f8>
             (inm = mg_http_get_header(hm, "If-None-Match")) != NULL &&
 800b0aa:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 800b0ae:	f5a3 73d0 	sub.w	r3, r3, #416	@ 0x1a0
 800b0b2:	491e      	ldr	r1, [pc, #120]	@ (800b12c <mg_http_serve_file+0x2f0>)
 800b0b4:	6818      	ldr	r0, [r3, #0]
 800b0b6:	f7fe fc43 	bl	8009940 <mg_http_get_header>
 800b0ba:	f8c7 01a8 	str.w	r0, [r7, #424]	@ 0x1a8
  } else if (mg_http_etag(etag, sizeof(etag), size, mtime) != NULL &&
 800b0be:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 800b0c2:	2b00      	cmp	r3, #0
 800b0c4:	d036      	beq.n	800b134 <mg_http_serve_file+0x2f8>
             mg_strcasecmp(*inm, mg_str(etag)) == 0) {
 800b0c6:	f507 73c4 	add.w	r3, r7, #392	@ 0x188
 800b0ca:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800b0ce:	4611      	mov	r1, r2
 800b0d0:	4618      	mov	r0, r3
 800b0d2:	f00a fc5d 	bl	8015990 <mg_str_s>
 800b0d6:	f8d7 11a8 	ldr.w	r1, [r7, #424]	@ 0x1a8
 800b0da:	f507 73c4 	add.w	r3, r7, #392	@ 0x188
 800b0de:	cb0c      	ldmia	r3, {r2, r3}
 800b0e0:	c903      	ldmia	r1, {r0, r1}
 800b0e2:	f00a fd17 	bl	8015b14 <mg_strcasecmp>
 800b0e6:	4603      	mov	r3, r0
             (inm = mg_http_get_header(hm, "If-None-Match")) != NULL &&
 800b0e8:	2b00      	cmp	r3, #0
 800b0ea:	d123      	bne.n	800b134 <mg_http_serve_file+0x2f8>
    mg_fs_close(fd);
 800b0ec:	f8d7 01bc 	ldr.w	r0, [r7, #444]	@ 0x1bc
 800b0f0:	f7fd ff5d 	bl	8008fae <mg_fs_close>
    mg_http_reply(c, 304, opts->extra_headers, "");
 800b0f4:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 800b0f8:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 800b0fc:	681b      	ldr	r3, [r3, #0]
 800b0fe:	689a      	ldr	r2, [r3, #8]
 800b100:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 800b104:	f5a3 70ce 	sub.w	r0, r3, #412	@ 0x19c
 800b108:	4b09      	ldr	r3, [pc, #36]	@ (800b130 <mg_http_serve_file+0x2f4>)
 800b10a:	f44f 7198 	mov.w	r1, #304	@ 0x130
 800b10e:	6800      	ldr	r0, [r0, #0]
 800b110:	f7ff fc8c 	bl	800aa2c <mg_http_reply>
 800b114:	e154      	b.n	800b3c0 <mg_http_serve_file+0x584>
 800b116:	bf00      	nop
 800b118:	20000038 	.word	0x20000038
 800b11c:	08025c3c 	.word	0x08025c3c
 800b120:	08025c4c 	.word	0x08025c4c
 800b124:	08025c54 	.word	0x08025c54
 800b128:	08025c5c 	.word	0x08025c5c
 800b12c:	08025c68 	.word	0x08025c68
 800b130:	08025980 	.word	0x08025980
  } else {
    int n, status = 200;
 800b134:	23c8      	movs	r3, #200	@ 0xc8
 800b136:	f8c7 31b4 	str.w	r3, [r7, #436]	@ 0x1b4
    char range[100];
    size_t r1 = 0, r2 = 0, cl = size;
 800b13a:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 800b13e:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800b142:	2200      	movs	r2, #0
 800b144:	601a      	str	r2, [r3, #0]
 800b146:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 800b14a:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800b14e:	2200      	movs	r2, #0
 800b150:	601a      	str	r2, [r3, #0]
 800b152:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 800b156:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800b15a:	681b      	ldr	r3, [r3, #0]
 800b15c:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0

    // Handle Range header
    struct mg_str *rh = mg_http_get_header(hm, "Range");
 800b160:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 800b164:	f5a3 73d0 	sub.w	r3, r3, #416	@ 0x1a0
 800b168:	4998      	ldr	r1, [pc, #608]	@ (800b3cc <mg_http_serve_file+0x590>)
 800b16a:	6818      	ldr	r0, [r3, #0]
 800b16c:	f7fe fbe8 	bl	8009940 <mg_http_get_header>
 800b170:	f8c7 01a0 	str.w	r0, [r7, #416]	@ 0x1a0
    range[0] = '\0';
 800b174:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 800b178:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 800b17c:	2200      	movs	r2, #0
 800b17e:	701a      	strb	r2, [r3, #0]
    if (rh != NULL && (n = getrange(rh, &r1, &r2)) > 0) {
 800b180:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 800b184:	2b00      	cmp	r3, #0
 800b186:	f000 8095 	beq.w	800b2b4 <mg_http_serve_file+0x478>
 800b18a:	f107 0290 	add.w	r2, r7, #144	@ 0x90
 800b18e:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 800b192:	4619      	mov	r1, r3
 800b194:	f8d7 01a0 	ldr.w	r0, [r7, #416]	@ 0x1a0
 800b198:	f7ff fddc 	bl	800ad54 <getrange>
 800b19c:	f8c7 019c 	str.w	r0, [r7, #412]	@ 0x19c
 800b1a0:	f8d7 319c 	ldr.w	r3, [r7, #412]	@ 0x19c
 800b1a4:	2b00      	cmp	r3, #0
 800b1a6:	f340 8085 	ble.w	800b2b4 <mg_http_serve_file+0x478>
      // If range is specified like "400-", set second limit to content len
      if (n == 1) r2 = cl - 1;
 800b1aa:	f8d7 319c 	ldr.w	r3, [r7, #412]	@ 0x19c
 800b1ae:	2b01      	cmp	r3, #1
 800b1b0:	d107      	bne.n	800b1c2 <mg_http_serve_file+0x386>
 800b1b2:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 800b1b6:	1e5a      	subs	r2, r3, #1
 800b1b8:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 800b1bc:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800b1c0:	601a      	str	r2, [r3, #0]
      if (r1 > r2 || r2 >= cl) {
 800b1c2:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 800b1c6:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800b1ca:	681a      	ldr	r2, [r3, #0]
 800b1cc:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 800b1d0:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800b1d4:	681b      	ldr	r3, [r3, #0]
 800b1d6:	429a      	cmp	r2, r3
 800b1d8:	d808      	bhi.n	800b1ec <mg_http_serve_file+0x3b0>
 800b1da:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 800b1de:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800b1e2:	681b      	ldr	r3, [r3, #0]
 800b1e4:	f8d7 21b0 	ldr.w	r2, [r7, #432]	@ 0x1b0
 800b1e8:	429a      	cmp	r2, r3
 800b1ea:	d81a      	bhi.n	800b222 <mg_http_serve_file+0x3e6>
        status = 416;
 800b1ec:	f44f 73d0 	mov.w	r3, #416	@ 0x1a0
 800b1f0:	f8c7 31b4 	str.w	r3, [r7, #436]	@ 0x1b4
        cl = 0;
 800b1f4:	2300      	movs	r3, #0
 800b1f6:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
        mg_snprintf(range, sizeof(range), "Content-Range: bytes */%lld\r\n",
 800b1fa:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 800b1fe:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800b202:	681b      	ldr	r3, [r3, #0]
 800b204:	2200      	movs	r2, #0
 800b206:	60bb      	str	r3, [r7, #8]
 800b208:	60fa      	str	r2, [r7, #12]
 800b20a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800b20e:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800b212:	e9cd 1200 	strd	r1, r2, [sp]
 800b216:	4a6e      	ldr	r2, [pc, #440]	@ (800b3d0 <mg_http_serve_file+0x594>)
 800b218:	2164      	movs	r1, #100	@ 0x64
 800b21a:	4618      	mov	r0, r3
 800b21c:	f006 fff0 	bl	8012200 <mg_snprintf>
 800b220:	e048      	b.n	800b2b4 <mg_http_serve_file+0x478>
                    (int64_t) size);
      } else {
        status = 206;
 800b222:	23ce      	movs	r3, #206	@ 0xce
 800b224:	f8c7 31b4 	str.w	r3, [r7, #436]	@ 0x1b4
        cl = r2 - r1 + 1;
 800b228:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 800b22c:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800b230:	681a      	ldr	r2, [r3, #0]
 800b232:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 800b236:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800b23a:	681b      	ldr	r3, [r3, #0]
 800b23c:	1ad3      	subs	r3, r2, r3
 800b23e:	3301      	adds	r3, #1
 800b240:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
        mg_snprintf(range, sizeof(range),
 800b244:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 800b248:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800b24c:	681b      	ldr	r3, [r3, #0]
 800b24e:	2200      	movs	r2, #0
 800b250:	469a      	mov	sl, r3
 800b252:	4693      	mov	fp, r2
                    "Content-Range: bytes %llu-%llu/%llu\r\n", (uint64_t) r1,
                    (uint64_t) (r1 + cl - 1), (uint64_t) size);
 800b254:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 800b258:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800b25c:	681a      	ldr	r2, [r3, #0]
 800b25e:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 800b262:	4413      	add	r3, r2
 800b264:	3b01      	subs	r3, #1
        mg_snprintf(range, sizeof(range),
 800b266:	2200      	movs	r2, #0
 800b268:	461d      	mov	r5, r3
 800b26a:	4616      	mov	r6, r2
 800b26c:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 800b270:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800b274:	681b      	ldr	r3, [r3, #0]
 800b276:	2200      	movs	r2, #0
 800b278:	603b      	str	r3, [r7, #0]
 800b27a:	607a      	str	r2, [r7, #4]
 800b27c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800b280:	e9d7 1200 	ldrd	r1, r2, [r7]
 800b284:	e9cd 1204 	strd	r1, r2, [sp, #16]
 800b288:	e9cd 5602 	strd	r5, r6, [sp, #8]
 800b28c:	e9cd ab00 	strd	sl, fp, [sp]
 800b290:	4a50      	ldr	r2, [pc, #320]	@ (800b3d4 <mg_http_serve_file+0x598>)
 800b292:	2164      	movs	r1, #100	@ 0x64
 800b294:	4618      	mov	r0, r3
 800b296:	f006 ffb3 	bl	8012200 <mg_snprintf>
        fs->sk(fd->fd, r1);
 800b29a:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
 800b29e:	699b      	ldr	r3, [r3, #24]
 800b2a0:	f8d7 21bc 	ldr.w	r2, [r7, #444]	@ 0x1bc
 800b2a4:	6810      	ldr	r0, [r2, #0]
 800b2a6:	f507 72e0 	add.w	r2, r7, #448	@ 0x1c0
 800b2aa:	f5a2 7296 	sub.w	r2, r2, #300	@ 0x12c
 800b2ae:	6812      	ldr	r2, [r2, #0]
 800b2b0:	4611      	mov	r1, r2
 800b2b2:	4798      	blx	r3
      }
    }
    mg_printf(c,
 800b2b4:	f8d7 01b4 	ldr.w	r0, [r7, #436]	@ 0x1b4
 800b2b8:	f7fe febc 	bl	800a034 <mg_http_status_code_str>
 800b2bc:	4604      	mov	r4, r0
              "HTTP/1.1 %d %s\r\n"
              "Content-Type: %.*s\r\n"
              "Etag: %s\r\n"
              "Content-Length: %llu\r\n"
              "%s%s%s\r\n",
              status, mg_http_status_code_str(status), (int) mime.len, mime.buf,
 800b2be:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 800b2c2:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800b2c6:	685b      	ldr	r3, [r3, #4]
    mg_printf(c,
 800b2c8:	461d      	mov	r5, r3
 800b2ca:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 800b2ce:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800b2d2:	681a      	ldr	r2, [r3, #0]
 800b2d4:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 800b2d8:	2100      	movs	r1, #0
 800b2da:	4698      	mov	r8, r3
 800b2dc:	4689      	mov	r9, r1
 800b2de:	f897 31bb 	ldrb.w	r3, [r7, #443]	@ 0x1bb
 800b2e2:	2b00      	cmp	r3, #0
 800b2e4:	d001      	beq.n	800b2ea <mg_http_serve_file+0x4ae>
 800b2e6:	493c      	ldr	r1, [pc, #240]	@ (800b3d8 <mg_http_serve_file+0x59c>)
 800b2e8:	e000      	b.n	800b2ec <mg_http_serve_file+0x4b0>
 800b2ea:	493c      	ldr	r1, [pc, #240]	@ (800b3dc <mg_http_serve_file+0x5a0>)
              etag, (uint64_t) cl, gzip ? "Content-Encoding: gzip\r\n" : "",
              range, opts->extra_headers ? opts->extra_headers : "");
 800b2ec:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 800b2f0:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 800b2f4:	681b      	ldr	r3, [r3, #0]
 800b2f6:	689b      	ldr	r3, [r3, #8]
    mg_printf(c,
 800b2f8:	2b00      	cmp	r3, #0
 800b2fa:	d006      	beq.n	800b30a <mg_http_serve_file+0x4ce>
 800b2fc:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 800b300:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 800b304:	681b      	ldr	r3, [r3, #0]
 800b306:	689b      	ldr	r3, [r3, #8]
 800b308:	e000      	b.n	800b30c <mg_http_serve_file+0x4d0>
 800b30a:	4b34      	ldr	r3, [pc, #208]	@ (800b3dc <mg_http_serve_file+0x5a0>)
 800b30c:	f507 70e0 	add.w	r0, r7, #448	@ 0x1c0
 800b310:	f5a0 70ce 	sub.w	r0, r0, #412	@ 0x19c
 800b314:	9308      	str	r3, [sp, #32]
 800b316:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800b31a:	9307      	str	r3, [sp, #28]
 800b31c:	9106      	str	r1, [sp, #24]
 800b31e:	e9cd 8904 	strd	r8, r9, [sp, #16]
 800b322:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800b326:	9302      	str	r3, [sp, #8]
 800b328:	9201      	str	r2, [sp, #4]
 800b32a:	9500      	str	r5, [sp, #0]
 800b32c:	4623      	mov	r3, r4
 800b32e:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
 800b332:	492b      	ldr	r1, [pc, #172]	@ (800b3e0 <mg_http_serve_file+0x5a4>)
 800b334:	6800      	ldr	r0, [r0, #0]
 800b336:	f002 f895 	bl	800d464 <mg_printf>
    if (mg_strcasecmp(hm->method, mg_str("HEAD")) == 0) {
 800b33a:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 800b33e:	4929      	ldr	r1, [pc, #164]	@ (800b3e4 <mg_http_serve_file+0x5a8>)
 800b340:	4618      	mov	r0, r3
 800b342:	f00a fb25 	bl	8015990 <mg_str_s>
 800b346:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 800b34a:	f5a3 73d0 	sub.w	r3, r3, #416	@ 0x1a0
 800b34e:	6819      	ldr	r1, [r3, #0]
 800b350:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 800b354:	cb0c      	ldmia	r3, {r2, r3}
 800b356:	c903      	ldmia	r1, {r0, r1}
 800b358:	f00a fbdc 	bl	8015b14 <mg_strcasecmp>
 800b35c:	4603      	mov	r3, r0
 800b35e:	2b00      	cmp	r3, #0
 800b360:	d10f      	bne.n	800b382 <mg_http_serve_file+0x546>
      c->is_resp = 0;
 800b362:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 800b366:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 800b36a:	681a      	ldr	r2, [r3, #0]
 800b36c:	f892 30b6 	ldrb.w	r3, [r2, #182]	@ 0xb6
 800b370:	f023 0301 	bic.w	r3, r3, #1
 800b374:	f882 30b6 	strb.w	r3, [r2, #182]	@ 0xb6
      mg_fs_close(fd);
 800b378:	f8d7 01bc 	ldr.w	r0, [r7, #444]	@ 0x1bc
 800b37c:	f7fd fe17 	bl	8008fae <mg_fs_close>
      c->pfn = static_cb;
      c->pfn_data = fd;
      *clp = cl;
    }
  }
}
 800b380:	e01e      	b.n	800b3c0 <mg_http_serve_file+0x584>
      size_t *clp = (size_t *) &c->data[(sizeof(c->data) - sizeof(size_t)) /
 800b382:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 800b386:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 800b38a:	681b      	ldr	r3, [r3, #0]
 800b38c:	33ac      	adds	r3, #172	@ 0xac
 800b38e:	f8c7 3198 	str.w	r3, [r7, #408]	@ 0x198
      c->pfn = static_cb;
 800b392:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 800b396:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 800b39a:	681b      	ldr	r3, [r3, #0]
 800b39c:	4a12      	ldr	r2, [pc, #72]	@ (800b3e8 <mg_http_serve_file+0x5ac>)
 800b39e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      c->pfn_data = fd;
 800b3a2:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 800b3a6:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 800b3aa:	681b      	ldr	r3, [r3, #0]
 800b3ac:	f8d7 21bc 	ldr.w	r2, [r7, #444]	@ 0x1bc
 800b3b0:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
      *clp = cl;
 800b3b4:	f8d7 3198 	ldr.w	r3, [r7, #408]	@ 0x198
 800b3b8:	f8d7 21b0 	ldr.w	r2, [r7, #432]	@ 0x1b0
 800b3bc:	601a      	str	r2, [r3, #0]
}
 800b3be:	e7ff      	b.n	800b3c0 <mg_http_serve_file+0x584>
 800b3c0:	bf00      	nop
 800b3c2:	f507 77e2 	add.w	r7, r7, #452	@ 0x1c4
 800b3c6:	46bd      	mov	sp, r7
 800b3c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b3cc:	08025c78 	.word	0x08025c78
 800b3d0:	08025c80 	.word	0x08025c80
 800b3d4:	08025ca0 	.word	0x08025ca0
 800b3d8:	08025cc8 	.word	0x08025cc8
 800b3dc:	08025980 	.word	0x08025980
 800b3e0:	08025ce4 	.word	0x08025ce4
 800b3e4:	08025d34 	.word	0x08025d34
 800b3e8:	0800ab55 	.word	0x0800ab55

0800b3ec <uri_to_path2>:
#endif

// Resolve requested file into `path` and return its fs->st() result
static int uri_to_path2(struct mg_connection *c, struct mg_http_message *hm,
                        struct mg_fs *fs, struct mg_str url, struct mg_str dir,
                        char *path, size_t path_size) {
 800b3ec:	b082      	sub	sp, #8
 800b3ee:	b590      	push	{r4, r7, lr}
 800b3f0:	b08f      	sub	sp, #60	@ 0x3c
 800b3f2:	af02      	add	r7, sp, #8
 800b3f4:	60f8      	str	r0, [r7, #12]
 800b3f6:	60b9      	str	r1, [r7, #8]
 800b3f8:	607a      	str	r2, [r7, #4]
 800b3fa:	647b      	str	r3, [r7, #68]	@ 0x44
  int flags, tmp;
  // Append URI to the root_dir, and sanitize it
  size_t n = mg_snprintf(path, path_size, "%.*s", (int) dir.len, dir.buf);
 800b3fc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b3fe:	461a      	mov	r2, r3
 800b400:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b402:	9300      	str	r3, [sp, #0]
 800b404:	4613      	mov	r3, r2
 800b406:	4a9c      	ldr	r2, [pc, #624]	@ (800b678 <uri_to_path2+0x28c>)
 800b408:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800b40a:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 800b40c:	f006 fef8 	bl	8012200 <mg_snprintf>
 800b410:	6278      	str	r0, [r7, #36]	@ 0x24
  if (n + 2 >= path_size) {
 800b412:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b414:	3302      	adds	r3, #2
 800b416:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800b418:	429a      	cmp	r2, r3
 800b41a:	d809      	bhi.n	800b430 <uri_to_path2+0x44>
    mg_http_reply(c, 400, "", "Exceeded path size");
 800b41c:	4b97      	ldr	r3, [pc, #604]	@ (800b67c <uri_to_path2+0x290>)
 800b41e:	4a98      	ldr	r2, [pc, #608]	@ (800b680 <uri_to_path2+0x294>)
 800b420:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 800b424:	68f8      	ldr	r0, [r7, #12]
 800b426:	f7ff fb01 	bl	800aa2c <mg_http_reply>
    return -1;
 800b42a:	f04f 33ff 	mov.w	r3, #4294967295
 800b42e:	e143      	b.n	800b6b8 <uri_to_path2+0x2cc>
  }
  path[path_size - 1] = '\0';
 800b430:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800b432:	3b01      	subs	r3, #1
 800b434:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800b436:	4413      	add	r3, r2
 800b438:	2200      	movs	r2, #0
 800b43a:	701a      	strb	r2, [r3, #0]
  // Terminate root dir with slash
  if (n > 0 && path[n - 1] != '/') path[n++] = '/', path[n] = '\0';
 800b43c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b43e:	2b00      	cmp	r3, #0
 800b440:	d012      	beq.n	800b468 <uri_to_path2+0x7c>
 800b442:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b444:	3b01      	subs	r3, #1
 800b446:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800b448:	4413      	add	r3, r2
 800b44a:	781b      	ldrb	r3, [r3, #0]
 800b44c:	2b2f      	cmp	r3, #47	@ 0x2f
 800b44e:	d00b      	beq.n	800b468 <uri_to_path2+0x7c>
 800b450:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b452:	1c5a      	adds	r2, r3, #1
 800b454:	627a      	str	r2, [r7, #36]	@ 0x24
 800b456:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800b458:	4413      	add	r3, r2
 800b45a:	222f      	movs	r2, #47	@ 0x2f
 800b45c:	701a      	strb	r2, [r3, #0]
 800b45e:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800b460:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b462:	4413      	add	r3, r2
 800b464:	2200      	movs	r2, #0
 800b466:	701a      	strb	r2, [r3, #0]
  if (url.len < hm->uri.len) {
 800b468:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800b46a:	68bb      	ldr	r3, [r7, #8]
 800b46c:	68db      	ldr	r3, [r3, #12]
 800b46e:	429a      	cmp	r2, r3
 800b470:	d212      	bcs.n	800b498 <uri_to_path2+0xac>
    mg_url_decode(hm->uri.buf + url.len, hm->uri.len - url.len, path + n,
 800b472:	68bb      	ldr	r3, [r7, #8]
 800b474:	689a      	ldr	r2, [r3, #8]
 800b476:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b478:	18d0      	adds	r0, r2, r3
 800b47a:	68bb      	ldr	r3, [r7, #8]
 800b47c:	68da      	ldr	r2, [r3, #12]
 800b47e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b480:	1ad1      	subs	r1, r2, r3
 800b482:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800b484:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b486:	18d4      	adds	r4, r2, r3
 800b488:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800b48a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b48c:	1ad3      	subs	r3, r2, r3
 800b48e:	2200      	movs	r2, #0
 800b490:	9200      	str	r2, [sp, #0]
 800b492:	4622      	mov	r2, r4
 800b494:	f7fe f961 	bl	800975a <mg_url_decode>
                  path_size - n, 0);
  }
  path[path_size - 1] = '\0';  // Double-check
 800b498:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800b49a:	3b01      	subs	r3, #1
 800b49c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800b49e:	4413      	add	r3, r2
 800b4a0:	2200      	movs	r2, #0
 800b4a2:	701a      	strb	r2, [r3, #0]
  if (!mg_path_is_sane(mg_str_n(path, path_size))) {
 800b4a4:	f107 0314 	add.w	r3, r7, #20
 800b4a8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800b4aa:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800b4ac:	4618      	mov	r0, r3
 800b4ae:	f00a fa8c 	bl	80159ca <mg_str_n>
 800b4b2:	f107 0314 	add.w	r3, r7, #20
 800b4b6:	e893 0003 	ldmia.w	r3, {r0, r1}
 800b4ba:	f015 fddf 	bl	802107c <mg_path_is_sane>
 800b4be:	4603      	mov	r3, r0
 800b4c0:	f083 0301 	eor.w	r3, r3, #1
 800b4c4:	b2db      	uxtb	r3, r3
 800b4c6:	2b00      	cmp	r3, #0
 800b4c8:	d009      	beq.n	800b4de <uri_to_path2+0xf2>
    mg_http_reply(c, 400, "", "Invalid path");
 800b4ca:	4b6e      	ldr	r3, [pc, #440]	@ (800b684 <uri_to_path2+0x298>)
 800b4cc:	4a6c      	ldr	r2, [pc, #432]	@ (800b680 <uri_to_path2+0x294>)
 800b4ce:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 800b4d2:	68f8      	ldr	r0, [r7, #12]
 800b4d4:	f7ff faaa 	bl	800aa2c <mg_http_reply>
    return -1;
 800b4d8:	f04f 33ff 	mov.w	r3, #4294967295
 800b4dc:	e0ec      	b.n	800b6b8 <uri_to_path2+0x2cc>
  }
  n = strlen(path);
 800b4de:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 800b4e0:	f7f4 ff0e 	bl	8000300 <strlen>
 800b4e4:	6278      	str	r0, [r7, #36]	@ 0x24
  while (n > 1 && path[n - 1] == '/') path[--n] = 0;  // Trim trailing slashes
 800b4e6:	e007      	b.n	800b4f8 <uri_to_path2+0x10c>
 800b4e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b4ea:	3b01      	subs	r3, #1
 800b4ec:	627b      	str	r3, [r7, #36]	@ 0x24
 800b4ee:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800b4f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b4f2:	4413      	add	r3, r2
 800b4f4:	2200      	movs	r2, #0
 800b4f6:	701a      	strb	r2, [r3, #0]
 800b4f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b4fa:	2b01      	cmp	r3, #1
 800b4fc:	d906      	bls.n	800b50c <uri_to_path2+0x120>
 800b4fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b500:	3b01      	subs	r3, #1
 800b502:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800b504:	4413      	add	r3, r2
 800b506:	781b      	ldrb	r3, [r3, #0]
 800b508:	2b2f      	cmp	r3, #47	@ 0x2f
 800b50a:	d0ed      	beq.n	800b4e8 <uri_to_path2+0xfc>
  flags = mg_strcmp(hm->uri, mg_str("/")) == 0 ? MG_FS_DIR
 800b50c:	f107 031c 	add.w	r3, r7, #28
 800b510:	495d      	ldr	r1, [pc, #372]	@ (800b688 <uri_to_path2+0x29c>)
 800b512:	4618      	mov	r0, r3
 800b514:	f00a fa3c 	bl	8015990 <mg_str_s>
 800b518:	68b9      	ldr	r1, [r7, #8]
 800b51a:	f107 031c 	add.w	r3, r7, #28
 800b51e:	cb0c      	ldmia	r3, {r2, r3}
 800b520:	3108      	adds	r1, #8
 800b522:	c903      	ldmia	r1, {r0, r1}
 800b524:	f00a fab4 	bl	8015a90 <mg_strcmp>
 800b528:	4603      	mov	r3, r0
                                               : fs->st(path, NULL, NULL);
 800b52a:	2b00      	cmp	r3, #0
 800b52c:	d007      	beq.n	800b53e <uri_to_path2+0x152>
 800b52e:	687b      	ldr	r3, [r7, #4]
 800b530:	681b      	ldr	r3, [r3, #0]
 800b532:	2200      	movs	r2, #0
 800b534:	2100      	movs	r1, #0
 800b536:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 800b538:	4798      	blx	r3
 800b53a:	4603      	mov	r3, r0
 800b53c:	e000      	b.n	800b540 <uri_to_path2+0x154>
 800b53e:	2304      	movs	r3, #4
  flags = mg_strcmp(hm->uri, mg_str("/")) == 0 ? MG_FS_DIR
 800b540:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MG_VERBOSE(("%lu %.*s -> %s %d", c->id, (int) hm->uri.len, hm->uri.buf, path,
 800b542:	4b52      	ldr	r3, [pc, #328]	@ (800b68c <uri_to_path2+0x2a0>)
 800b544:	681b      	ldr	r3, [r3, #0]
 800b546:	2b03      	cmp	r3, #3
 800b548:	dd16      	ble.n	800b578 <uri_to_path2+0x18c>
 800b54a:	4b51      	ldr	r3, [pc, #324]	@ (800b690 <uri_to_path2+0x2a4>)
 800b54c:	f44f 620d 	mov.w	r2, #2256	@ 0x8d0
 800b550:	4950      	ldr	r1, [pc, #320]	@ (800b694 <uri_to_path2+0x2a8>)
 800b552:	2004      	movs	r0, #4
 800b554:	f001 fe2a 	bl	800d1ac <mg_log_prefix>
 800b558:	68fb      	ldr	r3, [r7, #12]
 800b55a:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 800b55c:	68bb      	ldr	r3, [r7, #8]
 800b55e:	68db      	ldr	r3, [r3, #12]
 800b560:	4618      	mov	r0, r3
 800b562:	68bb      	ldr	r3, [r7, #8]
 800b564:	689a      	ldr	r2, [r3, #8]
 800b566:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b568:	9301      	str	r3, [sp, #4]
 800b56a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b56c:	9300      	str	r3, [sp, #0]
 800b56e:	4613      	mov	r3, r2
 800b570:	4602      	mov	r2, r0
 800b572:	4849      	ldr	r0, [pc, #292]	@ (800b698 <uri_to_path2+0x2ac>)
 800b574:	f001 fe6a 	bl	800d24c <mg_log>
              flags));
  if (flags == 0) {
 800b578:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b57a:	2b00      	cmp	r3, #0
 800b57c:	f000 809b 	beq.w	800b6b6 <uri_to_path2+0x2ca>
    // Do nothing - let's caller decide
  } else if ((flags & MG_FS_DIR) && hm->uri.len > 0 &&
 800b580:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b582:	f003 0304 	and.w	r3, r3, #4
 800b586:	2b00      	cmp	r3, #0
 800b588:	d020      	beq.n	800b5cc <uri_to_path2+0x1e0>
 800b58a:	68bb      	ldr	r3, [r7, #8]
 800b58c:	68db      	ldr	r3, [r3, #12]
 800b58e:	2b00      	cmp	r3, #0
 800b590:	d01c      	beq.n	800b5cc <uri_to_path2+0x1e0>
             hm->uri.buf[hm->uri.len - 1] != '/') {
 800b592:	68bb      	ldr	r3, [r7, #8]
 800b594:	689a      	ldr	r2, [r3, #8]
 800b596:	68bb      	ldr	r3, [r7, #8]
 800b598:	68db      	ldr	r3, [r3, #12]
 800b59a:	3b01      	subs	r3, #1
 800b59c:	4413      	add	r3, r2
 800b59e:	781b      	ldrb	r3, [r3, #0]
  } else if ((flags & MG_FS_DIR) && hm->uri.len > 0 &&
 800b5a0:	2b2f      	cmp	r3, #47	@ 0x2f
 800b5a2:	d013      	beq.n	800b5cc <uri_to_path2+0x1e0>
    mg_printf(c,
              "HTTP/1.1 301 Moved\r\n"
              "Location: %.*s/\r\n"
              "Content-Length: 0\r\n"
              "\r\n",
              (int) hm->uri.len, hm->uri.buf);
 800b5a4:	68bb      	ldr	r3, [r7, #8]
 800b5a6:	68db      	ldr	r3, [r3, #12]
    mg_printf(c,
 800b5a8:	461a      	mov	r2, r3
 800b5aa:	68bb      	ldr	r3, [r7, #8]
 800b5ac:	689b      	ldr	r3, [r3, #8]
 800b5ae:	493b      	ldr	r1, [pc, #236]	@ (800b69c <uri_to_path2+0x2b0>)
 800b5b0:	68f8      	ldr	r0, [r7, #12]
 800b5b2:	f001 ff57 	bl	800d464 <mg_printf>
    c->is_resp = 0;
 800b5b6:	68fa      	ldr	r2, [r7, #12]
 800b5b8:	f892 30b6 	ldrb.w	r3, [r2, #182]	@ 0xb6
 800b5bc:	f023 0301 	bic.w	r3, r3, #1
 800b5c0:	f882 30b6 	strb.w	r3, [r2, #182]	@ 0xb6
    flags = -1;
 800b5c4:	f04f 33ff 	mov.w	r3, #4294967295
 800b5c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800b5ca:	e074      	b.n	800b6b6 <uri_to_path2+0x2ca>
  } else if (flags & MG_FS_DIR) {
 800b5cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b5ce:	f003 0304 	and.w	r3, r3, #4
 800b5d2:	2b00      	cmp	r3, #0
 800b5d4:	d06f      	beq.n	800b6b6 <uri_to_path2+0x2ca>
    if (((mg_snprintf(path + n, path_size - n, "/" MG_HTTP_INDEX) > 0 &&
 800b5d6:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800b5d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b5da:	18d0      	adds	r0, r2, r3
 800b5dc:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800b5de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b5e0:	1ad3      	subs	r3, r2, r3
 800b5e2:	4a2f      	ldr	r2, [pc, #188]	@ (800b6a0 <uri_to_path2+0x2b4>)
 800b5e4:	4619      	mov	r1, r3
 800b5e6:	f006 fe0b 	bl	8012200 <mg_snprintf>
 800b5ea:	4603      	mov	r3, r0
 800b5ec:	2b00      	cmp	r3, #0
 800b5ee:	d009      	beq.n	800b604 <uri_to_path2+0x218>
          (tmp = fs->st(path, NULL, NULL)) != 0) ||
 800b5f0:	687b      	ldr	r3, [r7, #4]
 800b5f2:	681b      	ldr	r3, [r3, #0]
 800b5f4:	2200      	movs	r2, #0
 800b5f6:	2100      	movs	r1, #0
 800b5f8:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 800b5fa:	4798      	blx	r3
 800b5fc:	62b8      	str	r0, [r7, #40]	@ 0x28
    if (((mg_snprintf(path + n, path_size - n, "/" MG_HTTP_INDEX) > 0 &&
 800b5fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b600:	2b00      	cmp	r3, #0
 800b602:	d116      	bne.n	800b632 <uri_to_path2+0x246>
         (mg_snprintf(path + n, path_size - n, "/index.shtml") > 0 &&
 800b604:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800b606:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b608:	18d0      	adds	r0, r2, r3
 800b60a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800b60c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b60e:	1ad3      	subs	r3, r2, r3
 800b610:	4a24      	ldr	r2, [pc, #144]	@ (800b6a4 <uri_to_path2+0x2b8>)
 800b612:	4619      	mov	r1, r3
 800b614:	f006 fdf4 	bl	8012200 <mg_snprintf>
 800b618:	4603      	mov	r3, r0
          (tmp = fs->st(path, NULL, NULL)) != 0) ||
 800b61a:	2b00      	cmp	r3, #0
 800b61c:	d00c      	beq.n	800b638 <uri_to_path2+0x24c>
          (tmp = fs->st(path, NULL, NULL)) != 0))) {
 800b61e:	687b      	ldr	r3, [r7, #4]
 800b620:	681b      	ldr	r3, [r3, #0]
 800b622:	2200      	movs	r2, #0
 800b624:	2100      	movs	r1, #0
 800b626:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 800b628:	4798      	blx	r3
 800b62a:	62b8      	str	r0, [r7, #40]	@ 0x28
         (mg_snprintf(path + n, path_size - n, "/index.shtml") > 0 &&
 800b62c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b62e:	2b00      	cmp	r3, #0
 800b630:	d002      	beq.n	800b638 <uri_to_path2+0x24c>
      flags = tmp;
 800b632:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b634:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800b636:	e03e      	b.n	800b6b6 <uri_to_path2+0x2ca>
    } else if ((mg_snprintf(path + n, path_size - n, "/" MG_HTTP_INDEX ".gz") >
 800b638:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800b63a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b63c:	18d0      	adds	r0, r2, r3
 800b63e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800b640:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b642:	1ad3      	subs	r3, r2, r3
 800b644:	4a18      	ldr	r2, [pc, #96]	@ (800b6a8 <uri_to_path2+0x2bc>)
 800b646:	4619      	mov	r1, r3
 800b648:	f006 fdda 	bl	8012200 <mg_snprintf>
 800b64c:	4603      	mov	r3, r0
 800b64e:	2b00      	cmp	r3, #0
 800b650:	d02c      	beq.n	800b6ac <uri_to_path2+0x2c0>
                    0 &&
                (tmp = fs->st(path, NULL, NULL)) !=
 800b652:	687b      	ldr	r3, [r7, #4]
 800b654:	681b      	ldr	r3, [r3, #0]
 800b656:	2200      	movs	r2, #0
 800b658:	2100      	movs	r1, #0
 800b65a:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 800b65c:	4798      	blx	r3
 800b65e:	62b8      	str	r0, [r7, #40]	@ 0x28
                    0 &&
 800b660:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b662:	2b00      	cmp	r3, #0
 800b664:	d022      	beq.n	800b6ac <uri_to_path2+0x2c0>
                    0)) {  // check for gzipped index
      flags = tmp;
 800b666:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b668:	62fb      	str	r3, [r7, #44]	@ 0x2c
      path[n + 1 + strlen(MG_HTTP_INDEX)] =
 800b66a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b66c:	330b      	adds	r3, #11
 800b66e:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800b670:	4413      	add	r3, r2
 800b672:	2200      	movs	r2, #0
 800b674:	701a      	strb	r2, [r3, #0]
 800b676:	e01e      	b.n	800b6b6 <uri_to_path2+0x2ca>
 800b678:	08025420 	.word	0x08025420
 800b67c:	08025d3c 	.word	0x08025d3c
 800b680:	08025980 	.word	0x08025980
 800b684:	08025d50 	.word	0x08025d50
 800b688:	08025d60 	.word	0x08025d60
 800b68c:	20000258 	.word	0x20000258
 800b690:	080287f0 	.word	0x080287f0
 800b694:	08025140 	.word	0x08025140
 800b698:	08025d64 	.word	0x08025d64
 800b69c:	08025d78 	.word	0x08025d78
 800b6a0:	08025db4 	.word	0x08025db4
 800b6a4:	08025dc0 	.word	0x08025dc0
 800b6a8:	08025dd0 	.word	0x08025dd0
          '\0';  // Remove appended .gz in index file name
    } else {
      path[n] = '\0';  // Remove appended index file name
 800b6ac:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800b6ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b6b0:	4413      	add	r3, r2
 800b6b2:	2200      	movs	r2, #0
 800b6b4:	701a      	strb	r2, [r3, #0]
    }
  }
  return flags;
 800b6b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 800b6b8:	4618      	mov	r0, r3
 800b6ba:	3734      	adds	r7, #52	@ 0x34
 800b6bc:	46bd      	mov	sp, r7
 800b6be:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 800b6c2:	b002      	add	sp, #8
 800b6c4:	4770      	bx	lr
 800b6c6:	bf00      	nop

0800b6c8 <uri_to_path>:

static int uri_to_path(struct mg_connection *c, struct mg_http_message *hm,
                       const struct mg_http_serve_opts *opts, char *path,
                       size_t path_size) {
 800b6c8:	b580      	push	{r7, lr}
 800b6ca:	b09c      	sub	sp, #112	@ 0x70
 800b6cc:	af06      	add	r7, sp, #24
 800b6ce:	6178      	str	r0, [r7, #20]
 800b6d0:	6139      	str	r1, [r7, #16]
 800b6d2:	60fa      	str	r2, [r7, #12]
 800b6d4:	60bb      	str	r3, [r7, #8]
  struct mg_fs *fs = opts->fs == NULL ? &mg_fs_posix : opts->fs;
 800b6d6:	68fb      	ldr	r3, [r7, #12]
 800b6d8:	695b      	ldr	r3, [r3, #20]
 800b6da:	2b00      	cmp	r3, #0
 800b6dc:	d002      	beq.n	800b6e4 <uri_to_path+0x1c>
 800b6de:	68fb      	ldr	r3, [r7, #12]
 800b6e0:	695b      	ldr	r3, [r3, #20]
 800b6e2:	e000      	b.n	800b6e6 <uri_to_path+0x1e>
 800b6e4:	4b5b      	ldr	r3, [pc, #364]	@ (800b854 <uri_to_path+0x18c>)
 800b6e6:	657b      	str	r3, [r7, #84]	@ 0x54
  struct mg_str k, v, part, s = mg_str(opts->root_dir), u = {NULL, 0}, p = u;
 800b6e8:	68fb      	ldr	r3, [r7, #12]
 800b6ea:	681a      	ldr	r2, [r3, #0]
 800b6ec:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800b6f0:	4611      	mov	r1, r2
 800b6f2:	4618      	mov	r0, r3
 800b6f4:	f00a f94c 	bl	8015990 <mg_str_s>
 800b6f8:	2300      	movs	r3, #0
 800b6fa:	627b      	str	r3, [r7, #36]	@ 0x24
 800b6fc:	2300      	movs	r3, #0
 800b6fe:	62bb      	str	r3, [r7, #40]	@ 0x28
 800b700:	f107 031c 	add.w	r3, r7, #28
 800b704:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 800b708:	e892 0003 	ldmia.w	r2, {r0, r1}
 800b70c:	e883 0003 	stmia.w	r3, {r0, r1}
  while (mg_span(s, &part, &s, ',')) {
 800b710:	e078      	b.n	800b804 <uri_to_path+0x13c>
    if (!mg_span(part, &k, &v, '=')) k = part, v = mg_str_n(NULL, 0);
 800b712:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800b716:	f107 0244 	add.w	r2, r7, #68	@ 0x44
 800b71a:	213d      	movs	r1, #61	@ 0x3d
 800b71c:	9100      	str	r1, [sp, #0]
 800b71e:	f107 0134 	add.w	r1, r7, #52	@ 0x34
 800b722:	c903      	ldmia	r1, {r0, r1}
 800b724:	f00a fb31 	bl	8015d8a <mg_span>
 800b728:	4603      	mov	r3, r0
 800b72a:	f083 0301 	eor.w	r3, r3, #1
 800b72e:	b2db      	uxtb	r3, r3
 800b730:	2b00      	cmp	r3, #0
 800b732:	d014      	beq.n	800b75e <uri_to_path+0x96>
 800b734:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 800b738:	f107 0234 	add.w	r2, r7, #52	@ 0x34
 800b73c:	e892 0003 	ldmia.w	r2, {r0, r1}
 800b740:	e883 0003 	stmia.w	r3, {r0, r1}
 800b744:	463b      	mov	r3, r7
 800b746:	2200      	movs	r2, #0
 800b748:	2100      	movs	r1, #0
 800b74a:	4618      	mov	r0, r3
 800b74c:	f00a f93d 	bl	80159ca <mg_str_n>
 800b750:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800b754:	463a      	mov	r2, r7
 800b756:	e892 0003 	ldmia.w	r2, {r0, r1}
 800b75a:	e883 0003 	stmia.w	r3, {r0, r1}
    if (v.len == 0) v = k, k = mg_str("/"), u = k, p = v;
 800b75e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b760:	2b00      	cmp	r3, #0
 800b762:	d123      	bne.n	800b7ac <uri_to_path+0xe4>
 800b764:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800b768:	f107 0244 	add.w	r2, r7, #68	@ 0x44
 800b76c:	e892 0003 	ldmia.w	r2, {r0, r1}
 800b770:	e883 0003 	stmia.w	r3, {r0, r1}
 800b774:	463b      	mov	r3, r7
 800b776:	4938      	ldr	r1, [pc, #224]	@ (800b858 <uri_to_path+0x190>)
 800b778:	4618      	mov	r0, r3
 800b77a:	f00a f909 	bl	8015990 <mg_str_s>
 800b77e:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 800b782:	463a      	mov	r2, r7
 800b784:	e892 0003 	ldmia.w	r2, {r0, r1}
 800b788:	e883 0003 	stmia.w	r3, {r0, r1}
 800b78c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800b790:	f107 0244 	add.w	r2, r7, #68	@ 0x44
 800b794:	e892 0003 	ldmia.w	r2, {r0, r1}
 800b798:	e883 0003 	stmia.w	r3, {r0, r1}
 800b79c:	f107 031c 	add.w	r3, r7, #28
 800b7a0:	f107 023c 	add.w	r2, r7, #60	@ 0x3c
 800b7a4:	e892 0003 	ldmia.w	r2, {r0, r1}
 800b7a8:	e883 0003 	stmia.w	r3, {r0, r1}
    if (hm->uri.len < k.len) continue;
 800b7ac:	693b      	ldr	r3, [r7, #16]
 800b7ae:	68da      	ldr	r2, [r3, #12]
 800b7b0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b7b2:	429a      	cmp	r2, r3
 800b7b4:	d323      	bcc.n	800b7fe <uri_to_path+0x136>
    if (mg_strcmp(k, mg_str_n(hm->uri.buf, k.len)) != 0) continue;
 800b7b6:	693b      	ldr	r3, [r7, #16]
 800b7b8:	6899      	ldr	r1, [r3, #8]
 800b7ba:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800b7bc:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 800b7c0:	4618      	mov	r0, r3
 800b7c2:	f00a f902 	bl	80159ca <mg_str_n>
 800b7c6:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 800b7ca:	cb0c      	ldmia	r3, {r2, r3}
 800b7cc:	f107 0144 	add.w	r1, r7, #68	@ 0x44
 800b7d0:	c903      	ldmia	r1, {r0, r1}
 800b7d2:	f00a f95d 	bl	8015a90 <mg_strcmp>
 800b7d6:	4603      	mov	r3, r0
 800b7d8:	2b00      	cmp	r3, #0
 800b7da:	d112      	bne.n	800b802 <uri_to_path+0x13a>
    u = k, p = v;
 800b7dc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800b7e0:	f107 0244 	add.w	r2, r7, #68	@ 0x44
 800b7e4:	e892 0003 	ldmia.w	r2, {r0, r1}
 800b7e8:	e883 0003 	stmia.w	r3, {r0, r1}
 800b7ec:	f107 031c 	add.w	r3, r7, #28
 800b7f0:	f107 023c 	add.w	r2, r7, #60	@ 0x3c
 800b7f4:	e892 0003 	ldmia.w	r2, {r0, r1}
 800b7f8:	e883 0003 	stmia.w	r3, {r0, r1}
 800b7fc:	e002      	b.n	800b804 <uri_to_path+0x13c>
    if (hm->uri.len < k.len) continue;
 800b7fe:	bf00      	nop
 800b800:	e000      	b.n	800b804 <uri_to_path+0x13c>
    if (mg_strcmp(k, mg_str_n(hm->uri.buf, k.len)) != 0) continue;
 800b802:	bf00      	nop
  while (mg_span(s, &part, &s, ',')) {
 800b804:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800b808:	f107 0234 	add.w	r2, r7, #52	@ 0x34
 800b80c:	212c      	movs	r1, #44	@ 0x2c
 800b80e:	9100      	str	r1, [sp, #0]
 800b810:	f107 012c 	add.w	r1, r7, #44	@ 0x2c
 800b814:	c903      	ldmia	r1, {r0, r1}
 800b816:	f00a fab8 	bl	8015d8a <mg_span>
 800b81a:	4603      	mov	r3, r0
 800b81c:	2b00      	cmp	r3, #0
 800b81e:	f47f af78 	bne.w	800b712 <uri_to_path+0x4a>
  }
  return uri_to_path2(c, hm, fs, u, p, path, path_size);
 800b822:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800b824:	9304      	str	r3, [sp, #16]
 800b826:	68bb      	ldr	r3, [r7, #8]
 800b828:	9303      	str	r3, [sp, #12]
 800b82a:	aa01      	add	r2, sp, #4
 800b82c:	f107 031c 	add.w	r3, r7, #28
 800b830:	e893 0003 	ldmia.w	r3, {r0, r1}
 800b834:	e882 0003 	stmia.w	r2, {r0, r1}
 800b838:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b83a:	9300      	str	r3, [sp, #0]
 800b83c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b83e:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800b840:	6939      	ldr	r1, [r7, #16]
 800b842:	6978      	ldr	r0, [r7, #20]
 800b844:	f7ff fdd2 	bl	800b3ec <uri_to_path2>
 800b848:	4603      	mov	r3, r0
}
 800b84a:	4618      	mov	r0, r3
 800b84c:	3758      	adds	r7, #88	@ 0x58
 800b84e:	46bd      	mov	sp, r7
 800b850:	bd80      	pop	{r7, pc}
 800b852:	bf00      	nop
 800b854:	20000038 	.word	0x20000038
 800b858:	08025d60 	.word	0x08025d60

0800b85c <mg_http_serve_dir>:

void mg_http_serve_dir(struct mg_connection *c, struct mg_http_message *hm,
                       const struct mg_http_serve_opts *opts) {
 800b85c:	b580      	push	{r7, lr}
 800b85e:	b0ac      	sub	sp, #176	@ 0xb0
 800b860:	af02      	add	r7, sp, #8
 800b862:	60f8      	str	r0, [r7, #12]
 800b864:	60b9      	str	r1, [r7, #8]
 800b866:	607a      	str	r2, [r7, #4]
  char path[MG_PATH_MAX];
  const char *sp = opts->ssi_pattern;
 800b868:	687b      	ldr	r3, [r7, #4]
 800b86a:	685b      	ldr	r3, [r3, #4]
 800b86c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  int flags = uri_to_path(c, hm, opts, path, sizeof(path));
 800b870:	f107 0310 	add.w	r3, r7, #16
 800b874:	2280      	movs	r2, #128	@ 0x80
 800b876:	9200      	str	r2, [sp, #0]
 800b878:	687a      	ldr	r2, [r7, #4]
 800b87a:	68b9      	ldr	r1, [r7, #8]
 800b87c:	68f8      	ldr	r0, [r7, #12]
 800b87e:	f7ff ff23 	bl	800b6c8 <uri_to_path>
 800b882:	f8c7 00a0 	str.w	r0, [r7, #160]	@ 0xa0
  if (flags < 0) {
 800b886:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800b88a:	2b00      	cmp	r3, #0
 800b88c:	db41      	blt.n	800b912 <mg_http_serve_dir+0xb6>
    // Do nothing: the response has already been sent by uri_to_path()
  } else if (flags & MG_FS_DIR) {
 800b88e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800b892:	f003 0304 	and.w	r3, r3, #4
 800b896:	2b00      	cmp	r3, #0
 800b898:	d007      	beq.n	800b8aa <mg_http_serve_dir+0x4e>
#if MG_ENABLE_DIRLIST
    listdir(c, hm, opts, path);
#else
    mg_http_reply(c, 403, "", "Forbidden\n");
 800b89a:	4b20      	ldr	r3, [pc, #128]	@ (800b91c <mg_http_serve_dir+0xc0>)
 800b89c:	4a20      	ldr	r2, [pc, #128]	@ (800b920 <mg_http_serve_dir+0xc4>)
 800b89e:	f240 1193 	movw	r1, #403	@ 0x193
 800b8a2:	68f8      	ldr	r0, [r7, #12]
 800b8a4:	f7ff f8c2 	bl	800aa2c <mg_http_reply>
  } else if (flags && sp != NULL && mg_match(mg_str(path), mg_str(sp), NULL)) {
    mg_http_serve_ssi(c, opts->root_dir, path);
  } else {
    mg_http_serve_file(c, hm, path, opts);
  }
}
 800b8a8:	e033      	b.n	800b912 <mg_http_serve_dir+0xb6>
  } else if (flags && sp != NULL && mg_match(mg_str(path), mg_str(sp), NULL)) {
 800b8aa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800b8ae:	2b00      	cmp	r3, #0
 800b8b0:	d028      	beq.n	800b904 <mg_http_serve_dir+0xa8>
 800b8b2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800b8b6:	2b00      	cmp	r3, #0
 800b8b8:	d024      	beq.n	800b904 <mg_http_serve_dir+0xa8>
 800b8ba:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 800b8be:	f107 0210 	add.w	r2, r7, #16
 800b8c2:	4611      	mov	r1, r2
 800b8c4:	4618      	mov	r0, r3
 800b8c6:	f00a f863 	bl	8015990 <mg_str_s>
 800b8ca:	f107 0398 	add.w	r3, r7, #152	@ 0x98
 800b8ce:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800b8d2:	4618      	mov	r0, r3
 800b8d4:	f00a f85c 	bl	8015990 <mg_str_s>
 800b8d8:	2300      	movs	r3, #0
 800b8da:	9300      	str	r3, [sp, #0]
 800b8dc:	f107 0398 	add.w	r3, r7, #152	@ 0x98
 800b8e0:	cb0c      	ldmia	r3, {r2, r3}
 800b8e2:	f107 0190 	add.w	r1, r7, #144	@ 0x90
 800b8e6:	c903      	ldmia	r1, {r0, r1}
 800b8e8:	f00a f95b 	bl	8015ba2 <mg_match>
 800b8ec:	4603      	mov	r3, r0
 800b8ee:	2b00      	cmp	r3, #0
 800b8f0:	d008      	beq.n	800b904 <mg_http_serve_dir+0xa8>
    mg_http_serve_ssi(c, opts->root_dir, path);
 800b8f2:	687b      	ldr	r3, [r7, #4]
 800b8f4:	681b      	ldr	r3, [r3, #0]
 800b8f6:	f107 0210 	add.w	r2, r7, #16
 800b8fa:	4619      	mov	r1, r3
 800b8fc:	68f8      	ldr	r0, [r7, #12]
 800b8fe:	f00a f833 	bl	8015968 <mg_http_serve_ssi>
}
 800b902:	e006      	b.n	800b912 <mg_http_serve_dir+0xb6>
    mg_http_serve_file(c, hm, path, opts);
 800b904:	f107 0210 	add.w	r2, r7, #16
 800b908:	687b      	ldr	r3, [r7, #4]
 800b90a:	68b9      	ldr	r1, [r7, #8]
 800b90c:	68f8      	ldr	r0, [r7, #12]
 800b90e:	f7ff fa95 	bl	800ae3c <mg_http_serve_file>
}
 800b912:	bf00      	nop
 800b914:	37a8      	adds	r7, #168	@ 0xa8
 800b916:	46bd      	mov	sp, r7
 800b918:	bd80      	pop	{r7, pc}
 800b91a:	bf00      	nop
 800b91c:	08025de0 	.word	0x08025de0
 800b920:	08025980 	.word	0x08025980

0800b924 <mg_http_status>:
    }
  }
  return res;
}

int mg_http_status(const struct mg_http_message *hm) {
 800b924:	b580      	push	{r7, lr}
 800b926:	b082      	sub	sp, #8
 800b928:	af00      	add	r7, sp, #0
 800b92a:	6078      	str	r0, [r7, #4]
  return atoi(hm->uri.buf);
 800b92c:	687b      	ldr	r3, [r7, #4]
 800b92e:	689b      	ldr	r3, [r3, #8]
 800b930:	4618      	mov	r0, r3
 800b932:	f018 f9cd 	bl	8023cd0 <atoi>
 800b936:	4603      	mov	r3, r0
}
 800b938:	4618      	mov	r0, r3
 800b93a:	3708      	adds	r7, #8
 800b93c:	46bd      	mov	sp, r7
 800b93e:	bd80      	pop	{r7, pc}

0800b940 <is_hex_digit>:

static bool is_hex_digit(int c) {
 800b940:	b480      	push	{r7}
 800b942:	b083      	sub	sp, #12
 800b944:	af00      	add	r7, sp, #0
 800b946:	6078      	str	r0, [r7, #4]
  return (c >= '0' && c <= '9') || (c >= 'a' && c <= 'f') ||
 800b948:	687b      	ldr	r3, [r7, #4]
 800b94a:	2b2f      	cmp	r3, #47	@ 0x2f
 800b94c:	dd02      	ble.n	800b954 <is_hex_digit+0x14>
 800b94e:	687b      	ldr	r3, [r7, #4]
 800b950:	2b39      	cmp	r3, #57	@ 0x39
 800b952:	dd0b      	ble.n	800b96c <is_hex_digit+0x2c>
 800b954:	687b      	ldr	r3, [r7, #4]
 800b956:	2b60      	cmp	r3, #96	@ 0x60
 800b958:	dd02      	ble.n	800b960 <is_hex_digit+0x20>
 800b95a:	687b      	ldr	r3, [r7, #4]
 800b95c:	2b66      	cmp	r3, #102	@ 0x66
 800b95e:	dd05      	ble.n	800b96c <is_hex_digit+0x2c>
 800b960:	687b      	ldr	r3, [r7, #4]
 800b962:	2b40      	cmp	r3, #64	@ 0x40
 800b964:	dd04      	ble.n	800b970 <is_hex_digit+0x30>
         (c >= 'A' && c <= 'F');
 800b966:	687b      	ldr	r3, [r7, #4]
 800b968:	2b46      	cmp	r3, #70	@ 0x46
 800b96a:	dc01      	bgt.n	800b970 <is_hex_digit+0x30>
  return (c >= '0' && c <= '9') || (c >= 'a' && c <= 'f') ||
 800b96c:	2301      	movs	r3, #1
 800b96e:	e000      	b.n	800b972 <is_hex_digit+0x32>
 800b970:	2300      	movs	r3, #0
 800b972:	f003 0301 	and.w	r3, r3, #1
 800b976:	b2db      	uxtb	r3, r3
}
 800b978:	4618      	mov	r0, r3
 800b97a:	370c      	adds	r7, #12
 800b97c:	46bd      	mov	sp, r7
 800b97e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b982:	4770      	bx	lr

0800b984 <skip_chunk>:

static int skip_chunk(const char *buf, int len, int *pl, int *dl) {
 800b984:	b580      	push	{r7, lr}
 800b986:	b08a      	sub	sp, #40	@ 0x28
 800b988:	af02      	add	r7, sp, #8
 800b98a:	60f8      	str	r0, [r7, #12]
 800b98c:	60b9      	str	r1, [r7, #8]
 800b98e:	607a      	str	r2, [r7, #4]
 800b990:	603b      	str	r3, [r7, #0]
  int i = 0, n = 0;
 800b992:	2300      	movs	r3, #0
 800b994:	61fb      	str	r3, [r7, #28]
 800b996:	2300      	movs	r3, #0
 800b998:	613b      	str	r3, [r7, #16]
  if (len < 3) return 0;
 800b99a:	68bb      	ldr	r3, [r7, #8]
 800b99c:	2b02      	cmp	r3, #2
 800b99e:	dc04      	bgt.n	800b9aa <skip_chunk+0x26>
 800b9a0:	2300      	movs	r3, #0
 800b9a2:	e07a      	b.n	800ba9a <skip_chunk+0x116>
  while (i < len && is_hex_digit(buf[i])) i++;
 800b9a4:	69fb      	ldr	r3, [r7, #28]
 800b9a6:	3301      	adds	r3, #1
 800b9a8:	61fb      	str	r3, [r7, #28]
 800b9aa:	69fa      	ldr	r2, [r7, #28]
 800b9ac:	68bb      	ldr	r3, [r7, #8]
 800b9ae:	429a      	cmp	r2, r3
 800b9b0:	da09      	bge.n	800b9c6 <skip_chunk+0x42>
 800b9b2:	69fb      	ldr	r3, [r7, #28]
 800b9b4:	68fa      	ldr	r2, [r7, #12]
 800b9b6:	4413      	add	r3, r2
 800b9b8:	781b      	ldrb	r3, [r3, #0]
 800b9ba:	4618      	mov	r0, r3
 800b9bc:	f7ff ffc0 	bl	800b940 <is_hex_digit>
 800b9c0:	4603      	mov	r3, r0
 800b9c2:	2b00      	cmp	r3, #0
 800b9c4:	d1ee      	bne.n	800b9a4 <skip_chunk+0x20>
  if (i == 0) return -1;                     // Error, no length specified
 800b9c6:	69fb      	ldr	r3, [r7, #28]
 800b9c8:	2b00      	cmp	r3, #0
 800b9ca:	d102      	bne.n	800b9d2 <skip_chunk+0x4e>
 800b9cc:	f04f 33ff 	mov.w	r3, #4294967295
 800b9d0:	e063      	b.n	800ba9a <skip_chunk+0x116>
  if (i > (int) sizeof(int) * 2) return -1;  // Chunk length is too big
 800b9d2:	69fb      	ldr	r3, [r7, #28]
 800b9d4:	2b08      	cmp	r3, #8
 800b9d6:	dd02      	ble.n	800b9de <skip_chunk+0x5a>
 800b9d8:	f04f 33ff 	mov.w	r3, #4294967295
 800b9dc:	e05d      	b.n	800ba9a <skip_chunk+0x116>
  if (len < i + 1 || buf[i] != '\r' || buf[i + 1] != '\n') return -1;  // Error
 800b9de:	69fa      	ldr	r2, [r7, #28]
 800b9e0:	68bb      	ldr	r3, [r7, #8]
 800b9e2:	429a      	cmp	r2, r3
 800b9e4:	da0c      	bge.n	800ba00 <skip_chunk+0x7c>
 800b9e6:	69fb      	ldr	r3, [r7, #28]
 800b9e8:	68fa      	ldr	r2, [r7, #12]
 800b9ea:	4413      	add	r3, r2
 800b9ec:	781b      	ldrb	r3, [r3, #0]
 800b9ee:	2b0d      	cmp	r3, #13
 800b9f0:	d106      	bne.n	800ba00 <skip_chunk+0x7c>
 800b9f2:	69fb      	ldr	r3, [r7, #28]
 800b9f4:	3301      	adds	r3, #1
 800b9f6:	68fa      	ldr	r2, [r7, #12]
 800b9f8:	4413      	add	r3, r2
 800b9fa:	781b      	ldrb	r3, [r3, #0]
 800b9fc:	2b0a      	cmp	r3, #10
 800b9fe:	d002      	beq.n	800ba06 <skip_chunk+0x82>
 800ba00:	f04f 33ff 	mov.w	r3, #4294967295
 800ba04:	e049      	b.n	800ba9a <skip_chunk+0x116>
  if (mg_str_to_num(mg_str_n(buf, (size_t) i), 16, &n, sizeof(int)) == false)
 800ba06:	69fa      	ldr	r2, [r7, #28]
 800ba08:	f107 0314 	add.w	r3, r7, #20
 800ba0c:	68f9      	ldr	r1, [r7, #12]
 800ba0e:	4618      	mov	r0, r3
 800ba10:	f009 ffdb 	bl	80159ca <mg_str_n>
 800ba14:	f107 0310 	add.w	r3, r7, #16
 800ba18:	2204      	movs	r2, #4
 800ba1a:	9200      	str	r2, [sp, #0]
 800ba1c:	2210      	movs	r2, #16
 800ba1e:	f107 0114 	add.w	r1, r7, #20
 800ba22:	c903      	ldmia	r1, {r0, r1}
 800ba24:	f00a fa0e 	bl	8015e44 <mg_str_to_num>
 800ba28:	4603      	mov	r3, r0
 800ba2a:	f083 0301 	eor.w	r3, r3, #1
 800ba2e:	b2db      	uxtb	r3, r3
 800ba30:	2b00      	cmp	r3, #0
 800ba32:	d002      	beq.n	800ba3a <skip_chunk+0xb6>
    return -1;                    // Decode chunk length, overflow
 800ba34:	f04f 33ff 	mov.w	r3, #4294967295
 800ba38:	e02f      	b.n	800ba9a <skip_chunk+0x116>
  if (n < 0) return -1;           // Error. TODO(): some checks now redundant
 800ba3a:	693b      	ldr	r3, [r7, #16]
 800ba3c:	2b00      	cmp	r3, #0
 800ba3e:	da02      	bge.n	800ba46 <skip_chunk+0xc2>
 800ba40:	f04f 33ff 	mov.w	r3, #4294967295
 800ba44:	e029      	b.n	800ba9a <skip_chunk+0x116>
  if (n > len - i - 4) return 0;  // Chunk not yet fully buffered
 800ba46:	68ba      	ldr	r2, [r7, #8]
 800ba48:	69fb      	ldr	r3, [r7, #28]
 800ba4a:	1ad3      	subs	r3, r2, r3
 800ba4c:	1eda      	subs	r2, r3, #3
 800ba4e:	693b      	ldr	r3, [r7, #16]
 800ba50:	429a      	cmp	r2, r3
 800ba52:	dc01      	bgt.n	800ba58 <skip_chunk+0xd4>
 800ba54:	2300      	movs	r3, #0
 800ba56:	e020      	b.n	800ba9a <skip_chunk+0x116>
  if (buf[i + n + 2] != '\r' || buf[i + n + 3] != '\n') return -1;  // Error
 800ba58:	693a      	ldr	r2, [r7, #16]
 800ba5a:	69fb      	ldr	r3, [r7, #28]
 800ba5c:	4413      	add	r3, r2
 800ba5e:	3302      	adds	r3, #2
 800ba60:	68fa      	ldr	r2, [r7, #12]
 800ba62:	4413      	add	r3, r2
 800ba64:	781b      	ldrb	r3, [r3, #0]
 800ba66:	2b0d      	cmp	r3, #13
 800ba68:	d108      	bne.n	800ba7c <skip_chunk+0xf8>
 800ba6a:	693a      	ldr	r2, [r7, #16]
 800ba6c:	69fb      	ldr	r3, [r7, #28]
 800ba6e:	4413      	add	r3, r2
 800ba70:	3303      	adds	r3, #3
 800ba72:	68fa      	ldr	r2, [r7, #12]
 800ba74:	4413      	add	r3, r2
 800ba76:	781b      	ldrb	r3, [r3, #0]
 800ba78:	2b0a      	cmp	r3, #10
 800ba7a:	d002      	beq.n	800ba82 <skip_chunk+0xfe>
 800ba7c:	f04f 33ff 	mov.w	r3, #4294967295
 800ba80:	e00b      	b.n	800ba9a <skip_chunk+0x116>
  *pl = i + 2, *dl = n;
 800ba82:	69fb      	ldr	r3, [r7, #28]
 800ba84:	1c9a      	adds	r2, r3, #2
 800ba86:	687b      	ldr	r3, [r7, #4]
 800ba88:	601a      	str	r2, [r3, #0]
 800ba8a:	693a      	ldr	r2, [r7, #16]
 800ba8c:	683b      	ldr	r3, [r7, #0]
 800ba8e:	601a      	str	r2, [r3, #0]
  return i + 2 + n + 2;
 800ba90:	69fb      	ldr	r3, [r7, #28]
 800ba92:	1c9a      	adds	r2, r3, #2
 800ba94:	693b      	ldr	r3, [r7, #16]
 800ba96:	4413      	add	r3, r2
 800ba98:	3302      	adds	r3, #2
}
 800ba9a:	4618      	mov	r0, r3
 800ba9c:	3720      	adds	r7, #32
 800ba9e:	46bd      	mov	sp, r7
 800baa0:	bd80      	pop	{r7, pc}
	...

0800baa4 <http_cb>:

static void http_cb(struct mg_connection *c, int ev, void *ev_data) {
 800baa4:	b580      	push	{r7, lr}
 800baa6:	f5ad 7d22 	sub.w	sp, sp, #648	@ 0x288
 800baaa:	af00      	add	r7, sp, #0
 800baac:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 800bab0:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 800bab4:	6018      	str	r0, [r3, #0]
 800bab6:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 800baba:	f5a3 7320 	sub.w	r3, r3, #640	@ 0x280
 800babe:	6019      	str	r1, [r3, #0]
 800bac0:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 800bac4:	f5a3 7321 	sub.w	r3, r3, #644	@ 0x284
 800bac8:	601a      	str	r2, [r3, #0]
  if (ev == MG_EV_READ || ev == MG_EV_CLOSE ||
 800baca:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 800bace:	f5a3 7320 	sub.w	r3, r3, #640	@ 0x280
 800bad2:	681b      	ldr	r3, [r3, #0]
 800bad4:	2b07      	cmp	r3, #7
 800bad6:	d031      	beq.n	800bb3c <http_cb+0x98>
 800bad8:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 800badc:	f5a3 7320 	sub.w	r3, r3, #640	@ 0x280
 800bae0:	681b      	ldr	r3, [r3, #0]
 800bae2:	2b09      	cmp	r3, #9
 800bae4:	d02a      	beq.n	800bb3c <http_cb+0x98>
 800bae6:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 800baea:	f5a3 7320 	sub.w	r3, r3, #640	@ 0x280
 800baee:	681b      	ldr	r3, [r3, #0]
 800baf0:	2b02      	cmp	r3, #2
 800baf2:	f040 8368 	bne.w	800c1c6 <http_cb+0x722>
      (ev == MG_EV_POLL && c->is_accepted && !c->is_draining &&
 800baf6:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 800bafa:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 800bafe:	681b      	ldr	r3, [r3, #0]
 800bb00:	f893 30b4 	ldrb.w	r3, [r3, #180]	@ 0xb4
 800bb04:	f003 0304 	and.w	r3, r3, #4
 800bb08:	b2db      	uxtb	r3, r3
 800bb0a:	2b00      	cmp	r3, #0
 800bb0c:	f000 835b 	beq.w	800c1c6 <http_cb+0x722>
 800bb10:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 800bb14:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 800bb18:	681b      	ldr	r3, [r3, #0]
 800bb1a:	f893 30b5 	ldrb.w	r3, [r3, #181]	@ 0xb5
 800bb1e:	f003 0310 	and.w	r3, r3, #16
 800bb22:	b2db      	uxtb	r3, r3
 800bb24:	2b00      	cmp	r3, #0
 800bb26:	f040 834e 	bne.w	800c1c6 <http_cb+0x722>
       c->recv.len > 0)) {  // see #2796
 800bb2a:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 800bb2e:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 800bb32:	681b      	ldr	r3, [r3, #0]
 800bb34:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
      (ev == MG_EV_POLL && c->is_accepted && !c->is_draining &&
 800bb36:	2b00      	cmp	r3, #0
 800bb38:	f000 8345 	beq.w	800c1c6 <http_cb+0x722>
    struct mg_http_message hm;
    size_t ofs = 0;  // Parsing offset
 800bb3c:	2300      	movs	r3, #0
 800bb3e:	f8c7 3284 	str.w	r3, [r7, #644]	@ 0x284
    while (c->is_resp == 0 && ofs < c->recv.len) {
 800bb42:	e313      	b.n	800c16c <http_cb+0x6c8>
      const char *buf = (char *) c->recv.buf + ofs;
 800bb44:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 800bb48:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 800bb4c:	681b      	ldr	r3, [r3, #0]
 800bb4e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800bb50:	f8d7 3284 	ldr.w	r3, [r7, #644]	@ 0x284
 800bb54:	4413      	add	r3, r2
 800bb56:	f8c7 3278 	str.w	r3, [r7, #632]	@ 0x278
      int n = mg_http_parse(buf, c->recv.len - ofs, &hm);
 800bb5a:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 800bb5e:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 800bb62:	681b      	ldr	r3, [r3, #0]
 800bb64:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800bb66:	f8d7 3284 	ldr.w	r3, [r7, #644]	@ 0x284
 800bb6a:	1ad3      	subs	r3, r2, r3
 800bb6c:	f107 0210 	add.w	r2, r7, #16
 800bb70:	4619      	mov	r1, r3
 800bb72:	f8d7 0278 	ldr.w	r0, [r7, #632]	@ 0x278
 800bb76:	f7fe f89f 	bl	8009cb8 <mg_http_parse>
 800bb7a:	f8c7 0274 	str.w	r0, [r7, #628]	@ 0x274
      struct mg_str *te;  // Transfer - encoding header
      bool is_chunked = false;
 800bb7e:	2300      	movs	r3, #0
 800bb80:	f887 3283 	strb.w	r3, [r7, #643]	@ 0x283
      size_t old_len = c->recv.len;
 800bb84:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 800bb88:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 800bb8c:	681b      	ldr	r3, [r3, #0]
 800bb8e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800bb90:	f8c7 3270 	str.w	r3, [r7, #624]	@ 0x270
      if (n < 0) {
 800bb94:	f8d7 3274 	ldr.w	r3, [r7, #628]	@ 0x274
 800bb98:	2b00      	cmp	r3, #0
 800bb9a:	da38      	bge.n	800bc0e <http_cb+0x16a>
        // We don't use mg_error() here, to avoid closing pipelined requests
        // prematurely, see #2592
        MG_ERROR(("HTTP parse, %lu bytes", c->recv.len));
 800bb9c:	4bb7      	ldr	r3, [pc, #732]	@ (800be7c <http_cb+0x3d8>)
 800bb9e:	681b      	ldr	r3, [r3, #0]
 800bba0:	2b00      	cmp	r3, #0
 800bba2:	dd10      	ble.n	800bbc6 <http_cb+0x122>
 800bba4:	4bb6      	ldr	r3, [pc, #728]	@ (800be80 <http_cb+0x3dc>)
 800bba6:	f640 12ac 	movw	r2, #2476	@ 0x9ac
 800bbaa:	49b6      	ldr	r1, [pc, #728]	@ (800be84 <http_cb+0x3e0>)
 800bbac:	2001      	movs	r0, #1
 800bbae:	f001 fafd 	bl	800d1ac <mg_log_prefix>
 800bbb2:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 800bbb6:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 800bbba:	681b      	ldr	r3, [r3, #0]
 800bbbc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800bbbe:	4619      	mov	r1, r3
 800bbc0:	48b1      	ldr	r0, [pc, #708]	@ (800be88 <http_cb+0x3e4>)
 800bbc2:	f001 fb43 	bl	800d24c <mg_log>
        c->is_draining = 1;
 800bbc6:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 800bbca:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 800bbce:	681a      	ldr	r2, [r3, #0]
 800bbd0:	f892 30b5 	ldrb.w	r3, [r2, #181]	@ 0xb5
 800bbd4:	f043 0310 	orr.w	r3, r3, #16
 800bbd8:	f882 30b5 	strb.w	r3, [r2, #181]	@ 0xb5
        mg_hexdump(buf, c->recv.len - ofs > 16 ? 16 : c->recv.len - ofs);
 800bbdc:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 800bbe0:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 800bbe4:	681b      	ldr	r3, [r3, #0]
 800bbe6:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800bbe8:	f8d7 3284 	ldr.w	r3, [r7, #644]	@ 0x284
 800bbec:	1ad3      	subs	r3, r2, r3
 800bbee:	2b10      	cmp	r3, #16
 800bbf0:	bf28      	it	cs
 800bbf2:	2310      	movcs	r3, #16
 800bbf4:	4619      	mov	r1, r3
 800bbf6:	f8d7 0278 	ldr.w	r0, [r7, #632]	@ 0x278
 800bbfa:	f001 fb5d 	bl	800d2b8 <mg_hexdump>
        c->recv.len = 0;
 800bbfe:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 800bc02:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 800bc06:	681b      	ldr	r3, [r3, #0]
 800bc08:	2200      	movs	r2, #0
 800bc0a:	649a      	str	r2, [r3, #72]	@ 0x48
        return;
 800bc0c:	e2db      	b.n	800c1c6 <http_cb+0x722>
      }
      if (n == 0) break;                 // Request is not buffered yet
 800bc0e:	f8d7 3274 	ldr.w	r3, [r7, #628]	@ 0x274
 800bc12:	2b00      	cmp	r3, #0
 800bc14:	f000 82c2 	beq.w	800c19c <http_cb+0x6f8>
      mg_call(c, MG_EV_HTTP_HDRS, &hm);  // Got all HTTP headers
 800bc18:	f107 0210 	add.w	r2, r7, #16
 800bc1c:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 800bc20:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 800bc24:	210a      	movs	r1, #10
 800bc26:	6818      	ldr	r0, [r3, #0]
 800bc28:	f7fc f902 	bl	8007e30 <mg_call>
      if (c->recv.len != old_len) {
 800bc2c:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 800bc30:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 800bc34:	681b      	ldr	r3, [r3, #0]
 800bc36:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800bc38:	f8d7 2270 	ldr.w	r2, [r7, #624]	@ 0x270
 800bc3c:	429a      	cmp	r2, r3
 800bc3e:	d01d      	beq.n	800bc7c <http_cb+0x1d8>
        // User manipulated received data. Wash our hands
        MG_DEBUG(("%lu detaching HTTP handler", c->id));
 800bc40:	4b8e      	ldr	r3, [pc, #568]	@ (800be7c <http_cb+0x3d8>)
 800bc42:	681b      	ldr	r3, [r3, #0]
 800bc44:	2b02      	cmp	r3, #2
 800bc46:	dd10      	ble.n	800bc6a <http_cb+0x1c6>
 800bc48:	4b8d      	ldr	r3, [pc, #564]	@ (800be80 <http_cb+0x3dc>)
 800bc4a:	f640 12b6 	movw	r2, #2486	@ 0x9b6
 800bc4e:	498d      	ldr	r1, [pc, #564]	@ (800be84 <http_cb+0x3e0>)
 800bc50:	2003      	movs	r0, #3
 800bc52:	f001 faab 	bl	800d1ac <mg_log_prefix>
 800bc56:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 800bc5a:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 800bc5e:	681b      	ldr	r3, [r3, #0]
 800bc60:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bc62:	4619      	mov	r1, r3
 800bc64:	4889      	ldr	r0, [pc, #548]	@ (800be8c <http_cb+0x3e8>)
 800bc66:	f001 faf1 	bl	800d24c <mg_log>
        c->pfn = NULL;
 800bc6a:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 800bc6e:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 800bc72:	681b      	ldr	r3, [r3, #0]
 800bc74:	2200      	movs	r2, #0
 800bc76:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
        return;
 800bc7a:	e2a4      	b.n	800c1c6 <http_cb+0x722>
      }
      if (ev == MG_EV_CLOSE) {  // If client did not set Content-Length
 800bc7c:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 800bc80:	f5a3 7320 	sub.w	r3, r3, #640	@ 0x280
 800bc84:	681b      	ldr	r3, [r3, #0]
 800bc86:	2b09      	cmp	r3, #9
 800bc88:	d128      	bne.n	800bcdc <http_cb+0x238>
        hm.message.len = c->recv.len - ofs;  // and closes now, deliver MSG
 800bc8a:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 800bc8e:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 800bc92:	681b      	ldr	r3, [r3, #0]
 800bc94:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800bc96:	f8d7 3284 	ldr.w	r3, [r7, #644]	@ 0x284
 800bc9a:	1ad2      	subs	r2, r2, r3
 800bc9c:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 800bca0:	f5a3 731e 	sub.w	r3, r3, #632	@ 0x278
 800bca4:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
        hm.body.len = hm.message.len - (size_t) (hm.body.buf - hm.message.buf);
 800bca8:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 800bcac:	f5a3 731e 	sub.w	r3, r3, #632	@ 0x278
 800bcb0:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800bcb4:	f507 7222 	add.w	r2, r7, #648	@ 0x288
 800bcb8:	f5a2 721e 	sub.w	r2, r2, #632	@ 0x278
 800bcbc:	f8d2 1200 	ldr.w	r1, [r2, #512]	@ 0x200
 800bcc0:	f507 7222 	add.w	r2, r7, #648	@ 0x288
 800bcc4:	f5a2 721e 	sub.w	r2, r2, #632	@ 0x278
 800bcc8:	f8d2 2210 	ldr.w	r2, [r2, #528]	@ 0x210
 800bccc:	1a8a      	subs	r2, r1, r2
 800bcce:	1a9a      	subs	r2, r3, r2
 800bcd0:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 800bcd4:	f5a3 731e 	sub.w	r3, r3, #632	@ 0x278
 800bcd8:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
      }
      if ((te = mg_http_get_header(&hm, "Transfer-Encoding")) != NULL) {
 800bcdc:	f107 0310 	add.w	r3, r7, #16
 800bce0:	496b      	ldr	r1, [pc, #428]	@ (800be90 <http_cb+0x3ec>)
 800bce2:	4618      	mov	r0, r3
 800bce4:	f7fd fe2c 	bl	8009940 <mg_http_get_header>
 800bce8:	f8c7 026c 	str.w	r0, [r7, #620]	@ 0x26c
 800bcec:	f8d7 326c 	ldr.w	r3, [r7, #620]	@ 0x26c
 800bcf0:	2b00      	cmp	r3, #0
 800bcf2:	d01d      	beq.n	800bd30 <http_cb+0x28c>
        if (mg_strcasecmp(*te, mg_str("chunked")) == 0) {
 800bcf4:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 800bcf8:	4966      	ldr	r1, [pc, #408]	@ (800be94 <http_cb+0x3f0>)
 800bcfa:	4618      	mov	r0, r3
 800bcfc:	f009 fe48 	bl	8015990 <mg_str_s>
 800bd00:	f8d7 126c 	ldr.w	r1, [r7, #620]	@ 0x26c
 800bd04:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 800bd08:	cb0c      	ldmia	r3, {r2, r3}
 800bd0a:	c903      	ldmia	r1, {r0, r1}
 800bd0c:	f009 ff02 	bl	8015b14 <mg_strcasecmp>
 800bd10:	4603      	mov	r3, r0
 800bd12:	2b00      	cmp	r3, #0
 800bd14:	d103      	bne.n	800bd1e <http_cb+0x27a>
          is_chunked = true;
 800bd16:	2301      	movs	r3, #1
 800bd18:	f887 3283 	strb.w	r3, [r7, #643]	@ 0x283
 800bd1c:	e0cf      	b.n	800bebe <http_cb+0x41a>
        } else {
          mg_error(c, "Invalid Transfer-Encoding");  // See #2460
 800bd1e:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 800bd22:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 800bd26:	495c      	ldr	r1, [pc, #368]	@ (800be98 <http_cb+0x3f4>)
 800bd28:	6818      	ldr	r0, [r3, #0]
 800bd2a:	f7fc f8a3 	bl	8007e74 <mg_error>
          return;
 800bd2e:	e24a      	b.n	800c1c6 <http_cb+0x722>
        }
      } else if (mg_http_get_header(&hm, "Content-length") == NULL) {
 800bd30:	f107 0310 	add.w	r3, r7, #16
 800bd34:	4959      	ldr	r1, [pc, #356]	@ (800be9c <http_cb+0x3f8>)
 800bd36:	4618      	mov	r0, r3
 800bd38:	f7fd fe02 	bl	8009940 <mg_http_get_header>
 800bd3c:	4603      	mov	r3, r0
 800bd3e:	2b00      	cmp	r3, #0
 800bd40:	f040 80bd 	bne.w	800bebe <http_cb+0x41a>
        // #2593: HTTP packets must contain either Transfer-Encoding or
        // Content-length
        bool is_response = mg_ncasecmp(hm.method.buf, "HTTP/", 5) == 0;
 800bd44:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 800bd48:	f5a3 731e 	sub.w	r3, r3, #632	@ 0x278
 800bd4c:	681b      	ldr	r3, [r3, #0]
 800bd4e:	2205      	movs	r2, #5
 800bd50:	4953      	ldr	r1, [pc, #332]	@ (800bea0 <http_cb+0x3fc>)
 800bd52:	4618      	mov	r0, r3
 800bd54:	f7fd fb66 	bl	8009424 <mg_ncasecmp>
 800bd58:	4603      	mov	r3, r0
 800bd5a:	2b00      	cmp	r3, #0
 800bd5c:	bf0c      	ite	eq
 800bd5e:	2301      	moveq	r3, #1
 800bd60:	2300      	movne	r3, #0
 800bd62:	f887 326b 	strb.w	r3, [r7, #619]	@ 0x26b
        bool require_content_len = false;
 800bd66:	2300      	movs	r3, #0
 800bd68:	f887 3282 	strb.w	r3, [r7, #642]	@ 0x282
        if (!is_response && (mg_strcasecmp(hm.method, mg_str("POST")) == 0 ||
 800bd6c:	f897 326b 	ldrb.w	r3, [r7, #619]	@ 0x26b
 800bd70:	f083 0301 	eor.w	r3, r3, #1
 800bd74:	b2db      	uxtb	r3, r3
 800bd76:	2b00      	cmp	r3, #0
 800bd78:	d030      	beq.n	800bddc <http_cb+0x338>
 800bd7a:	f507 730e 	add.w	r3, r7, #568	@ 0x238
 800bd7e:	4949      	ldr	r1, [pc, #292]	@ (800bea4 <http_cb+0x400>)
 800bd80:	4618      	mov	r0, r3
 800bd82:	f009 fe05 	bl	8015990 <mg_str_s>
 800bd86:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 800bd8a:	f5a3 711e 	sub.w	r1, r3, #632	@ 0x278
 800bd8e:	f507 730e 	add.w	r3, r7, #568	@ 0x238
 800bd92:	cb0c      	ldmia	r3, {r2, r3}
 800bd94:	c903      	ldmia	r1, {r0, r1}
 800bd96:	f009 febd 	bl	8015b14 <mg_strcasecmp>
 800bd9a:	4603      	mov	r3, r0
 800bd9c:	2b00      	cmp	r3, #0
 800bd9e:	d012      	beq.n	800bdc6 <http_cb+0x322>
                             mg_strcasecmp(hm.method, mg_str("PUT")) == 0)) {
 800bda0:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 800bda4:	4940      	ldr	r1, [pc, #256]	@ (800bea8 <http_cb+0x404>)
 800bda6:	4618      	mov	r0, r3
 800bda8:	f009 fdf2 	bl	8015990 <mg_str_s>
 800bdac:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 800bdb0:	f5a3 711e 	sub.w	r1, r3, #632	@ 0x278
 800bdb4:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 800bdb8:	cb0c      	ldmia	r3, {r2, r3}
 800bdba:	c903      	ldmia	r1, {r0, r1}
 800bdbc:	f009 feaa 	bl	8015b14 <mg_strcasecmp>
 800bdc0:	4603      	mov	r3, r0
        if (!is_response && (mg_strcasecmp(hm.method, mg_str("POST")) == 0 ||
 800bdc2:	2b00      	cmp	r3, #0
 800bdc4:	d10a      	bne.n	800bddc <http_cb+0x338>
          // POST and PUT should include an entity body. Therefore, they should
          // contain a Content-length header. Other requests can also contain a
          // body, but their content has no defined semantics (RFC 7231)
          require_content_len = true;
 800bdc6:	2301      	movs	r3, #1
 800bdc8:	f887 3282 	strb.w	r3, [r7, #642]	@ 0x282
          ofs += (size_t) n;  // this request has been processed
 800bdcc:	f8d7 3274 	ldr.w	r3, [r7, #628]	@ 0x274
 800bdd0:	f8d7 2284 	ldr.w	r2, [r7, #644]	@ 0x284
 800bdd4:	4413      	add	r3, r2
 800bdd6:	f8c7 3284 	str.w	r3, [r7, #644]	@ 0x284
 800bdda:	e022      	b.n	800be22 <http_cb+0x37e>
        } else if (is_response) {
 800bddc:	f897 326b 	ldrb.w	r3, [r7, #619]	@ 0x26b
 800bde0:	2b00      	cmp	r3, #0
 800bde2:	d01e      	beq.n	800be22 <http_cb+0x37e>
          // HTTP spec 7.2 Entity body: All other responses must include a body
          // or Content-Length header field defined with a value of 0.
          int status = mg_http_status(&hm);
 800bde4:	f107 0310 	add.w	r3, r7, #16
 800bde8:	4618      	mov	r0, r3
 800bdea:	f7ff fd9b 	bl	800b924 <mg_http_status>
 800bdee:	f8c7 0264 	str.w	r0, [r7, #612]	@ 0x264
          require_content_len = status >= 200 && status != 204 && status != 304;
 800bdf2:	f8d7 3264 	ldr.w	r3, [r7, #612]	@ 0x264
 800bdf6:	2bc7      	cmp	r3, #199	@ 0xc7
 800bdf8:	dd0a      	ble.n	800be10 <http_cb+0x36c>
 800bdfa:	f8d7 3264 	ldr.w	r3, [r7, #612]	@ 0x264
 800bdfe:	2bcc      	cmp	r3, #204	@ 0xcc
 800be00:	d006      	beq.n	800be10 <http_cb+0x36c>
 800be02:	f8d7 3264 	ldr.w	r3, [r7, #612]	@ 0x264
 800be06:	f5b3 7f98 	cmp.w	r3, #304	@ 0x130
 800be0a:	d001      	beq.n	800be10 <http_cb+0x36c>
 800be0c:	2301      	movs	r3, #1
 800be0e:	e000      	b.n	800be12 <http_cb+0x36e>
 800be10:	2300      	movs	r3, #0
 800be12:	f887 3282 	strb.w	r3, [r7, #642]	@ 0x282
 800be16:	f897 3282 	ldrb.w	r3, [r7, #642]	@ 0x282
 800be1a:	f003 0301 	and.w	r3, r3, #1
 800be1e:	f887 3282 	strb.w	r3, [r7, #642]	@ 0x282
        }
        if (require_content_len) {
 800be22:	f897 3282 	ldrb.w	r3, [r7, #642]	@ 0x282
 800be26:	2b00      	cmp	r3, #0
 800be28:	d049      	beq.n	800bebe <http_cb+0x41a>
          if (!c->is_client) mg_http_reply(c, 411, "", "");
 800be2a:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 800be2e:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 800be32:	681b      	ldr	r3, [r3, #0]
 800be34:	f893 30b4 	ldrb.w	r3, [r3, #180]	@ 0xb4
 800be38:	f003 0302 	and.w	r3, r3, #2
 800be3c:	b2db      	uxtb	r3, r3
 800be3e:	2b00      	cmp	r3, #0
 800be40:	d10a      	bne.n	800be58 <http_cb+0x3b4>
 800be42:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 800be46:	f5a3 701f 	sub.w	r0, r3, #636	@ 0x27c
 800be4a:	4b18      	ldr	r3, [pc, #96]	@ (800beac <http_cb+0x408>)
 800be4c:	4a17      	ldr	r2, [pc, #92]	@ (800beac <http_cb+0x408>)
 800be4e:	f240 119b 	movw	r1, #411	@ 0x19b
 800be52:	6800      	ldr	r0, [r0, #0]
 800be54:	f7fe fdea 	bl	800aa2c <mg_http_reply>
          MG_ERROR(("Content length missing from %s",
 800be58:	4b08      	ldr	r3, [pc, #32]	@ (800be7c <http_cb+0x3d8>)
 800be5a:	681b      	ldr	r3, [r3, #0]
 800be5c:	2b00      	cmp	r3, #0
 800be5e:	dd2e      	ble.n	800bebe <http_cb+0x41a>
 800be60:	4b07      	ldr	r3, [pc, #28]	@ (800be80 <http_cb+0x3dc>)
 800be62:	f640 12d9 	movw	r2, #2521	@ 0x9d9
 800be66:	4907      	ldr	r1, [pc, #28]	@ (800be84 <http_cb+0x3e0>)
 800be68:	2001      	movs	r0, #1
 800be6a:	f001 f99f 	bl	800d1ac <mg_log_prefix>
 800be6e:	f897 326b 	ldrb.w	r3, [r7, #619]	@ 0x26b
 800be72:	2b00      	cmp	r3, #0
 800be74:	d01e      	beq.n	800beb4 <http_cb+0x410>
 800be76:	4b0e      	ldr	r3, [pc, #56]	@ (800beb0 <http_cb+0x40c>)
 800be78:	e01d      	b.n	800beb6 <http_cb+0x412>
 800be7a:	bf00      	nop
 800be7c:	20000258 	.word	0x20000258
 800be80:	08028800 	.word	0x08028800
 800be84:	08025140 	.word	0x08025140
 800be88:	08025ed0 	.word	0x08025ed0
 800be8c:	08025ee8 	.word	0x08025ee8
 800be90:	08025f04 	.word	0x08025f04
 800be94:	08025f18 	.word	0x08025f18
 800be98:	08025f20 	.word	0x08025f20
 800be9c:	08025f3c 	.word	0x08025f3c
 800bea0:	0802549c 	.word	0x0802549c
 800bea4:	080254b8 	.word	0x080254b8
 800bea8:	080254b4 	.word	0x080254b4
 800beac:	08025980 	.word	0x08025980
 800beb0:	08025f4c 	.word	0x08025f4c
 800beb4:	4bc6      	ldr	r3, [pc, #792]	@ (800c1d0 <http_cb+0x72c>)
 800beb6:	4619      	mov	r1, r3
 800beb8:	48c6      	ldr	r0, [pc, #792]	@ (800c1d4 <http_cb+0x730>)
 800beba:	f001 f9c7 	bl	800d24c <mg_log>
                    is_response ? "response" : "request"));
        }
      }

      if (is_chunked) {
 800bebe:	f897 3283 	ldrb.w	r3, [r7, #643]	@ 0x283
 800bec2:	2b00      	cmp	r3, #0
 800bec4:	f000 80c9 	beq.w	800c05a <http_cb+0x5b6>
        // For chunked data, strip off prefixes and suffixes from chunks
        // and relocate them right after the headers, then report a message
        char *s = (char *) c->recv.buf + ofs + n;
 800bec8:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 800becc:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 800bed0:	681b      	ldr	r3, [r3, #0]
 800bed2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800bed4:	f8d7 1274 	ldr.w	r1, [r7, #628]	@ 0x274
 800bed8:	f8d7 3284 	ldr.w	r3, [r7, #644]	@ 0x284
 800bedc:	440b      	add	r3, r1
 800bede:	4413      	add	r3, r2
 800bee0:	f8c7 325c 	str.w	r3, [r7, #604]	@ 0x25c
        int o = 0, pl, dl, cl, len = (int) (c->recv.len - ofs - (size_t) n);
 800bee4:	2300      	movs	r3, #0
 800bee6:	f8c7 327c 	str.w	r3, [r7, #636]	@ 0x27c
 800beea:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 800beee:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 800bef2:	681b      	ldr	r3, [r3, #0]
 800bef4:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800bef6:	f8d7 3284 	ldr.w	r3, [r7, #644]	@ 0x284
 800befa:	1ad2      	subs	r2, r2, r3
 800befc:	f8d7 3274 	ldr.w	r3, [r7, #628]	@ 0x274
 800bf00:	1ad3      	subs	r3, r2, r3
 800bf02:	f8c7 3258 	str.w	r3, [r7, #600]	@ 0x258

        // Find zero-length chunk (the end of the body)
        while ((cl = skip_chunk(s + o, len - o, &pl, &dl)) > 0 && dl) o += cl;
 800bf06:	e006      	b.n	800bf16 <http_cb+0x472>
 800bf08:	f8d7 227c 	ldr.w	r2, [r7, #636]	@ 0x27c
 800bf0c:	f8d7 3254 	ldr.w	r3, [r7, #596]	@ 0x254
 800bf10:	4413      	add	r3, r2
 800bf12:	f8c7 327c 	str.w	r3, [r7, #636]	@ 0x27c
 800bf16:	f8d7 327c 	ldr.w	r3, [r7, #636]	@ 0x27c
 800bf1a:	f8d7 225c 	ldr.w	r2, [r7, #604]	@ 0x25c
 800bf1e:	18d0      	adds	r0, r2, r3
 800bf20:	f8d7 2258 	ldr.w	r2, [r7, #600]	@ 0x258
 800bf24:	f8d7 327c 	ldr.w	r3, [r7, #636]	@ 0x27c
 800bf28:	1ad1      	subs	r1, r2, r3
 800bf2a:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 800bf2e:	f507 720b 	add.w	r2, r7, #556	@ 0x22c
 800bf32:	f7ff fd27 	bl	800b984 <skip_chunk>
 800bf36:	f8c7 0254 	str.w	r0, [r7, #596]	@ 0x254
 800bf3a:	f8d7 3254 	ldr.w	r3, [r7, #596]	@ 0x254
 800bf3e:	2b00      	cmp	r3, #0
 800bf40:	dd03      	ble.n	800bf4a <http_cb+0x4a6>
 800bf42:	f8d7 3228 	ldr.w	r3, [r7, #552]	@ 0x228
 800bf46:	2b00      	cmp	r3, #0
 800bf48:	d1de      	bne.n	800bf08 <http_cb+0x464>
        if (cl == 0) break;  // No zero-len chunk, buffer more data
 800bf4a:	f8d7 3254 	ldr.w	r3, [r7, #596]	@ 0x254
 800bf4e:	2b00      	cmp	r3, #0
 800bf50:	f000 8126 	beq.w	800c1a0 <http_cb+0x6fc>
        if (cl < 0) {
 800bf54:	f8d7 3254 	ldr.w	r3, [r7, #596]	@ 0x254
 800bf58:	2b00      	cmp	r3, #0
 800bf5a:	da08      	bge.n	800bf6e <http_cb+0x4ca>
          mg_error(c, "Invalid chunk");
 800bf5c:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 800bf60:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 800bf64:	499c      	ldr	r1, [pc, #624]	@ (800c1d8 <http_cb+0x734>)
 800bf66:	6818      	ldr	r0, [r3, #0]
 800bf68:	f7fb ff84 	bl	8007e74 <mg_error>
          break;
 800bf6c:	e11b      	b.n	800c1a6 <http_cb+0x702>
        }

        // Zero chunk found. Second pass: strip + relocate
        o = 0, hm.body.len = 0, hm.message.len = (size_t) n;
 800bf6e:	2300      	movs	r3, #0
 800bf70:	f8c7 327c 	str.w	r3, [r7, #636]	@ 0x27c
 800bf74:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 800bf78:	f5a3 731e 	sub.w	r3, r3, #632	@ 0x278
 800bf7c:	2200      	movs	r2, #0
 800bf7e:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 800bf82:	f8d7 2274 	ldr.w	r2, [r7, #628]	@ 0x274
 800bf86:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 800bf8a:	f5a3 731e 	sub.w	r3, r3, #632	@ 0x278
 800bf8e:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
        while ((cl = skip_chunk(s + o, len - o, &pl, &dl)) > 0) {
 800bf92:	e03e      	b.n	800c012 <http_cb+0x56e>
          memmove(s + hm.body.len, s + o + pl, (size_t) dl);
 800bf94:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 800bf98:	f5a3 731e 	sub.w	r3, r3, #632	@ 0x278
 800bf9c:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 800bfa0:	f8d7 225c 	ldr.w	r2, [r7, #604]	@ 0x25c
 800bfa4:	18d0      	adds	r0, r2, r3
 800bfa6:	f8d7 327c 	ldr.w	r3, [r7, #636]	@ 0x27c
 800bfaa:	f8d7 222c 	ldr.w	r2, [r7, #556]	@ 0x22c
 800bfae:	4413      	add	r3, r2
 800bfb0:	f8d7 225c 	ldr.w	r2, [r7, #604]	@ 0x25c
 800bfb4:	4413      	add	r3, r2
 800bfb6:	f8d7 2228 	ldr.w	r2, [r7, #552]	@ 0x228
 800bfba:	4619      	mov	r1, r3
 800bfbc:	f018 fa4c 	bl	8024458 <memmove>
          o += cl, hm.body.len += (size_t) dl, hm.message.len += (size_t) dl;
 800bfc0:	f8d7 227c 	ldr.w	r2, [r7, #636]	@ 0x27c
 800bfc4:	f8d7 3254 	ldr.w	r3, [r7, #596]	@ 0x254
 800bfc8:	4413      	add	r3, r2
 800bfca:	f8c7 327c 	str.w	r3, [r7, #636]	@ 0x27c
 800bfce:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 800bfd2:	f5a3 731e 	sub.w	r3, r3, #632	@ 0x278
 800bfd6:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 800bfda:	f8d7 2228 	ldr.w	r2, [r7, #552]	@ 0x228
 800bfde:	441a      	add	r2, r3
 800bfe0:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 800bfe4:	f5a3 731e 	sub.w	r3, r3, #632	@ 0x278
 800bfe8:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 800bfec:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 800bff0:	f5a3 731e 	sub.w	r3, r3, #632	@ 0x278
 800bff4:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800bff8:	f8d7 2228 	ldr.w	r2, [r7, #552]	@ 0x228
 800bffc:	441a      	add	r2, r3
 800bffe:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 800c002:	f5a3 731e 	sub.w	r3, r3, #632	@ 0x278
 800c006:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
          if (dl == 0) break;
 800c00a:	f8d7 3228 	ldr.w	r3, [r7, #552]	@ 0x228
 800c00e:	2b00      	cmp	r3, #0
 800c010:	d016      	beq.n	800c040 <http_cb+0x59c>
        while ((cl = skip_chunk(s + o, len - o, &pl, &dl)) > 0) {
 800c012:	f8d7 327c 	ldr.w	r3, [r7, #636]	@ 0x27c
 800c016:	f8d7 225c 	ldr.w	r2, [r7, #604]	@ 0x25c
 800c01a:	18d0      	adds	r0, r2, r3
 800c01c:	f8d7 2258 	ldr.w	r2, [r7, #600]	@ 0x258
 800c020:	f8d7 327c 	ldr.w	r3, [r7, #636]	@ 0x27c
 800c024:	1ad1      	subs	r1, r2, r3
 800c026:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 800c02a:	f507 720b 	add.w	r2, r7, #556	@ 0x22c
 800c02e:	f7ff fca9 	bl	800b984 <skip_chunk>
 800c032:	f8c7 0254 	str.w	r0, [r7, #596]	@ 0x254
 800c036:	f8d7 3254 	ldr.w	r3, [r7, #596]	@ 0x254
 800c03a:	2b00      	cmp	r3, #0
 800c03c:	dcaa      	bgt.n	800bf94 <http_cb+0x4f0>
 800c03e:	e000      	b.n	800c042 <http_cb+0x59e>
          if (dl == 0) break;
 800c040:	bf00      	nop
        }
        ofs += (size_t) (n + o);
 800c042:	f8d7 2274 	ldr.w	r2, [r7, #628]	@ 0x274
 800c046:	f8d7 327c 	ldr.w	r3, [r7, #636]	@ 0x27c
 800c04a:	4413      	add	r3, r2
 800c04c:	461a      	mov	r2, r3
 800c04e:	f8d7 3284 	ldr.w	r3, [r7, #644]	@ 0x284
 800c052:	4413      	add	r3, r2
 800c054:	f8c7 3284 	str.w	r3, [r7, #644]	@ 0x284
 800c058:	e026      	b.n	800c0a8 <http_cb+0x604>
      } else {  // Normal, non-chunked data
        size_t len = c->recv.len - ofs - (size_t) n;
 800c05a:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 800c05e:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 800c062:	681b      	ldr	r3, [r3, #0]
 800c064:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800c066:	f8d7 3284 	ldr.w	r3, [r7, #644]	@ 0x284
 800c06a:	1ad2      	subs	r2, r2, r3
 800c06c:	f8d7 3274 	ldr.w	r3, [r7, #628]	@ 0x274
 800c070:	1ad3      	subs	r3, r2, r3
 800c072:	f8c7 3260 	str.w	r3, [r7, #608]	@ 0x260
        if (hm.body.len > len) break;  // Buffer more data
 800c076:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 800c07a:	f5a3 731e 	sub.w	r3, r3, #632	@ 0x278
 800c07e:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 800c082:	f8d7 2260 	ldr.w	r2, [r7, #608]	@ 0x260
 800c086:	429a      	cmp	r2, r3
 800c088:	f0c0 808c 	bcc.w	800c1a4 <http_cb+0x700>
        ofs += (size_t) n + hm.body.len;
 800c08c:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 800c090:	f5a3 731e 	sub.w	r3, r3, #632	@ 0x278
 800c094:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800c098:	f8d7 3274 	ldr.w	r3, [r7, #628]	@ 0x274
 800c09c:	4413      	add	r3, r2
 800c09e:	f8d7 2284 	ldr.w	r2, [r7, #644]	@ 0x284
 800c0a2:	4413      	add	r3, r2
 800c0a4:	f8c7 3284 	str.w	r3, [r7, #644]	@ 0x284
      }

      if (c->is_accepted) c->is_resp = 1;  // Start generating response
 800c0a8:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 800c0ac:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 800c0b0:	681b      	ldr	r3, [r3, #0]
 800c0b2:	f893 30b4 	ldrb.w	r3, [r3, #180]	@ 0xb4
 800c0b6:	f003 0304 	and.w	r3, r3, #4
 800c0ba:	b2db      	uxtb	r3, r3
 800c0bc:	2b00      	cmp	r3, #0
 800c0be:	d00a      	beq.n	800c0d6 <http_cb+0x632>
 800c0c0:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 800c0c4:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 800c0c8:	681a      	ldr	r2, [r3, #0]
 800c0ca:	f892 30b6 	ldrb.w	r3, [r2, #182]	@ 0xb6
 800c0ce:	f043 0301 	orr.w	r3, r3, #1
 800c0d2:	f882 30b6 	strb.w	r3, [r2, #182]	@ 0xb6
      mg_call(c, MG_EV_HTTP_MSG, &hm);     // User handler can clear is_resp
 800c0d6:	f107 0210 	add.w	r2, r7, #16
 800c0da:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 800c0de:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 800c0e2:	210b      	movs	r1, #11
 800c0e4:	6818      	ldr	r0, [r3, #0]
 800c0e6:	f7fb fea3 	bl	8007e30 <mg_call>
      if (c->is_accepted && !c->is_resp) {
 800c0ea:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 800c0ee:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 800c0f2:	681b      	ldr	r3, [r3, #0]
 800c0f4:	f893 30b4 	ldrb.w	r3, [r3, #180]	@ 0xb4
 800c0f8:	f003 0304 	and.w	r3, r3, #4
 800c0fc:	b2db      	uxtb	r3, r3
 800c0fe:	2b00      	cmp	r3, #0
 800c100:	d034      	beq.n	800c16c <http_cb+0x6c8>
 800c102:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 800c106:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 800c10a:	681b      	ldr	r3, [r3, #0]
 800c10c:	f893 30b6 	ldrb.w	r3, [r3, #182]	@ 0xb6
 800c110:	f003 0301 	and.w	r3, r3, #1
 800c114:	b2db      	uxtb	r3, r3
 800c116:	2b00      	cmp	r3, #0
 800c118:	d128      	bne.n	800c16c <http_cb+0x6c8>
        struct mg_str *cc = mg_http_get_header(&hm, "Connection");
 800c11a:	f107 0310 	add.w	r3, r7, #16
 800c11e:	492f      	ldr	r1, [pc, #188]	@ (800c1dc <http_cb+0x738>)
 800c120:	4618      	mov	r0, r3
 800c122:	f7fd fc0d 	bl	8009940 <mg_http_get_header>
 800c126:	f8c7 0250 	str.w	r0, [r7, #592]	@ 0x250
        if (cc != NULL && mg_strcasecmp(*cc, mg_str("close")) == 0) {
 800c12a:	f8d7 3250 	ldr.w	r3, [r7, #592]	@ 0x250
 800c12e:	2b00      	cmp	r3, #0
 800c130:	d01c      	beq.n	800c16c <http_cb+0x6c8>
 800c132:	f507 7312 	add.w	r3, r7, #584	@ 0x248
 800c136:	492a      	ldr	r1, [pc, #168]	@ (800c1e0 <http_cb+0x73c>)
 800c138:	4618      	mov	r0, r3
 800c13a:	f009 fc29 	bl	8015990 <mg_str_s>
 800c13e:	f8d7 1250 	ldr.w	r1, [r7, #592]	@ 0x250
 800c142:	f507 7312 	add.w	r3, r7, #584	@ 0x248
 800c146:	cb0c      	ldmia	r3, {r2, r3}
 800c148:	c903      	ldmia	r1, {r0, r1}
 800c14a:	f009 fce3 	bl	8015b14 <mg_strcasecmp>
 800c14e:	4603      	mov	r3, r0
 800c150:	2b00      	cmp	r3, #0
 800c152:	d10b      	bne.n	800c16c <http_cb+0x6c8>
          c->is_draining = 1;  // honor "Connection: close"
 800c154:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 800c158:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 800c15c:	681a      	ldr	r2, [r3, #0]
 800c15e:	f892 30b5 	ldrb.w	r3, [r2, #181]	@ 0xb5
 800c162:	f043 0310 	orr.w	r3, r3, #16
 800c166:	f882 30b5 	strb.w	r3, [r2, #181]	@ 0xb5
          break;
 800c16a:	e01c      	b.n	800c1a6 <http_cb+0x702>
    while (c->is_resp == 0 && ofs < c->recv.len) {
 800c16c:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 800c170:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 800c174:	681b      	ldr	r3, [r3, #0]
 800c176:	f893 30b6 	ldrb.w	r3, [r3, #182]	@ 0xb6
 800c17a:	f003 0301 	and.w	r3, r3, #1
 800c17e:	b2db      	uxtb	r3, r3
 800c180:	2b00      	cmp	r3, #0
 800c182:	d110      	bne.n	800c1a6 <http_cb+0x702>
 800c184:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 800c188:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 800c18c:	681b      	ldr	r3, [r3, #0]
 800c18e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800c190:	f8d7 2284 	ldr.w	r2, [r7, #644]	@ 0x284
 800c194:	429a      	cmp	r2, r3
 800c196:	f4ff acd5 	bcc.w	800bb44 <http_cb+0xa0>
 800c19a:	e004      	b.n	800c1a6 <http_cb+0x702>
      if (n == 0) break;                 // Request is not buffered yet
 800c19c:	bf00      	nop
 800c19e:	e002      	b.n	800c1a6 <http_cb+0x702>
        if (cl == 0) break;  // No zero-len chunk, buffer more data
 800c1a0:	bf00      	nop
 800c1a2:	e000      	b.n	800c1a6 <http_cb+0x702>
        if (hm.body.len > len) break;  // Buffer more data
 800c1a4:	bf00      	nop
        }
      }
    }
    if (ofs > 0) mg_iobuf_del(&c->recv, 0, ofs);  // Delete processed data
 800c1a6:	f8d7 3284 	ldr.w	r3, [r7, #644]	@ 0x284
 800c1aa:	2b00      	cmp	r3, #0
 800c1ac:	d00b      	beq.n	800c1c6 <http_cb+0x722>
 800c1ae:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 800c1b2:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 800c1b6:	681b      	ldr	r3, [r3, #0]
 800c1b8:	3340      	adds	r3, #64	@ 0x40
 800c1ba:	f8d7 2284 	ldr.w	r2, [r7, #644]	@ 0x284
 800c1be:	2100      	movs	r1, #0
 800c1c0:	4618      	mov	r0, r3
 800c1c2:	f000 f925 	bl	800c410 <mg_iobuf_del>
  }
  (void) ev_data;
}
 800c1c6:	f507 7722 	add.w	r7, r7, #648	@ 0x288
 800c1ca:	46bd      	mov	sp, r7
 800c1cc:	bd80      	pop	{r7, pc}
 800c1ce:	bf00      	nop
 800c1d0:	08025f58 	.word	0x08025f58
 800c1d4:	08025f60 	.word	0x08025f60
 800c1d8:	08025f80 	.word	0x08025f80
 800c1dc:	08025f90 	.word	0x08025f90
 800c1e0:	08025f9c 	.word	0x08025f9c

0800c1e4 <mg_http_listen>:
                                      mg_event_handler_t fn, void *fn_data) {
  return mg_connect_svc(mgr, url, fn, fn_data, http_cb, NULL);
}

struct mg_connection *mg_http_listen(struct mg_mgr *mgr, const char *url,
                                     mg_event_handler_t fn, void *fn_data) {
 800c1e4:	b580      	push	{r7, lr}
 800c1e6:	b086      	sub	sp, #24
 800c1e8:	af00      	add	r7, sp, #0
 800c1ea:	60f8      	str	r0, [r7, #12]
 800c1ec:	60b9      	str	r1, [r7, #8]
 800c1ee:	607a      	str	r2, [r7, #4]
 800c1f0:	603b      	str	r3, [r7, #0]
  struct mg_connection *c = mg_listen(mgr, url, fn, fn_data);
 800c1f2:	683b      	ldr	r3, [r7, #0]
 800c1f4:	687a      	ldr	r2, [r7, #4]
 800c1f6:	68b9      	ldr	r1, [r7, #8]
 800c1f8:	68f8      	ldr	r0, [r7, #12]
 800c1fa:	f001 fd15 	bl	800dc28 <mg_listen>
 800c1fe:	6178      	str	r0, [r7, #20]
  if (c != NULL) c->pfn = http_cb;
 800c200:	697b      	ldr	r3, [r7, #20]
 800c202:	2b00      	cmp	r3, #0
 800c204:	d003      	beq.n	800c20e <mg_http_listen+0x2a>
 800c206:	697b      	ldr	r3, [r7, #20]
 800c208:	4a03      	ldr	r2, [pc, #12]	@ (800c218 <mg_http_listen+0x34>)
 800c20a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  return c;
 800c20e:	697b      	ldr	r3, [r7, #20]
}
 800c210:	4618      	mov	r0, r3
 800c212:	3718      	adds	r7, #24
 800c214:	46bd      	mov	sp, r7
 800c216:	bd80      	pop	{r7, pc}
 800c218:	0800baa5 	.word	0x0800baa5

0800c21c <roundup>:





static size_t roundup(size_t size, size_t align) {
 800c21c:	b480      	push	{r7}
 800c21e:	b083      	sub	sp, #12
 800c220:	af00      	add	r7, sp, #0
 800c222:	6078      	str	r0, [r7, #4]
 800c224:	6039      	str	r1, [r7, #0]
  return align == 0 ? size : (size + align - 1) / align * align;
 800c226:	683b      	ldr	r3, [r7, #0]
 800c228:	2b00      	cmp	r3, #0
 800c22a:	d00a      	beq.n	800c242 <roundup+0x26>
 800c22c:	687a      	ldr	r2, [r7, #4]
 800c22e:	683b      	ldr	r3, [r7, #0]
 800c230:	4413      	add	r3, r2
 800c232:	1e5a      	subs	r2, r3, #1
 800c234:	683b      	ldr	r3, [r7, #0]
 800c236:	fbb2 f3f3 	udiv	r3, r2, r3
 800c23a:	683a      	ldr	r2, [r7, #0]
 800c23c:	fb02 f303 	mul.w	r3, r2, r3
 800c240:	e000      	b.n	800c244 <roundup+0x28>
 800c242:	687b      	ldr	r3, [r7, #4]
}
 800c244:	4618      	mov	r0, r3
 800c246:	370c      	adds	r7, #12
 800c248:	46bd      	mov	sp, r7
 800c24a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c24e:	4770      	bx	lr

0800c250 <mg_iobuf_resize>:

int mg_iobuf_resize(struct mg_iobuf *io, size_t new_size) {
 800c250:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800c254:	b088      	sub	sp, #32
 800c256:	af02      	add	r7, sp, #8
 800c258:	6078      	str	r0, [r7, #4]
 800c25a:	6039      	str	r1, [r7, #0]
  int ok = 1;
 800c25c:	2301      	movs	r3, #1
 800c25e:	617b      	str	r3, [r7, #20]
  new_size = roundup(new_size, io->align);
 800c260:	687b      	ldr	r3, [r7, #4]
 800c262:	68db      	ldr	r3, [r3, #12]
 800c264:	4619      	mov	r1, r3
 800c266:	6838      	ldr	r0, [r7, #0]
 800c268:	f7ff ffd8 	bl	800c21c <roundup>
 800c26c:	6038      	str	r0, [r7, #0]
  if (new_size == 0) {
 800c26e:	683b      	ldr	r3, [r7, #0]
 800c270:	2b00      	cmp	r3, #0
 800c272:	d117      	bne.n	800c2a4 <mg_iobuf_resize+0x54>
    mg_bzero(io->buf, io->size);
 800c274:	687b      	ldr	r3, [r7, #4]
 800c276:	681a      	ldr	r2, [r3, #0]
 800c278:	687b      	ldr	r3, [r7, #4]
 800c27a:	685b      	ldr	r3, [r3, #4]
 800c27c:	4619      	mov	r1, r3
 800c27e:	4610      	mov	r0, r2
 800c280:	f014 fea8 	bl	8020fd4 <mg_bzero>
    mg_free(io->buf);
 800c284:	687b      	ldr	r3, [r7, #4]
 800c286:	681b      	ldr	r3, [r3, #0]
 800c288:	4618      	mov	r0, r3
 800c28a:	f7fa fdb7 	bl	8006dfc <mg_free>
    io->buf = NULL;
 800c28e:	687b      	ldr	r3, [r7, #4]
 800c290:	2200      	movs	r2, #0
 800c292:	601a      	str	r2, [r3, #0]
    io->len = io->size = 0;
 800c294:	687b      	ldr	r3, [r7, #4]
 800c296:	2200      	movs	r2, #0
 800c298:	605a      	str	r2, [r3, #4]
 800c29a:	687b      	ldr	r3, [r7, #4]
 800c29c:	685a      	ldr	r2, [r3, #4]
 800c29e:	687b      	ldr	r3, [r7, #4]
 800c2a0:	609a      	str	r2, [r3, #8]
 800c2a2:	e055      	b.n	800c350 <mg_iobuf_resize+0x100>
  } else if (new_size != io->size) {
 800c2a4:	687b      	ldr	r3, [r7, #4]
 800c2a6:	685b      	ldr	r3, [r3, #4]
 800c2a8:	683a      	ldr	r2, [r7, #0]
 800c2aa:	429a      	cmp	r2, r3
 800c2ac:	d050      	beq.n	800c350 <mg_iobuf_resize+0x100>
    // NOTE(lsm): do not use realloc here. Use mg_calloc/mg_free only
    void *p = mg_calloc(1, new_size);
 800c2ae:	6839      	ldr	r1, [r7, #0]
 800c2b0:	2001      	movs	r0, #1
 800c2b2:	f7fa fdae 	bl	8006e12 <mg_calloc>
 800c2b6:	6138      	str	r0, [r7, #16]
    if (p != NULL) {
 800c2b8:	693b      	ldr	r3, [r7, #16]
 800c2ba:	2b00      	cmp	r3, #0
 800c2bc:	d02b      	beq.n	800c316 <mg_iobuf_resize+0xc6>
      size_t len = new_size < io->len ? new_size : io->len;
 800c2be:	687b      	ldr	r3, [r7, #4]
 800c2c0:	689b      	ldr	r3, [r3, #8]
 800c2c2:	683a      	ldr	r2, [r7, #0]
 800c2c4:	4293      	cmp	r3, r2
 800c2c6:	bf28      	it	cs
 800c2c8:	4613      	movcs	r3, r2
 800c2ca:	60fb      	str	r3, [r7, #12]
      if (len > 0 && io->buf != NULL) memmove(p, io->buf, len);
 800c2cc:	68fb      	ldr	r3, [r7, #12]
 800c2ce:	2b00      	cmp	r3, #0
 800c2d0:	d00a      	beq.n	800c2e8 <mg_iobuf_resize+0x98>
 800c2d2:	687b      	ldr	r3, [r7, #4]
 800c2d4:	681b      	ldr	r3, [r3, #0]
 800c2d6:	2b00      	cmp	r3, #0
 800c2d8:	d006      	beq.n	800c2e8 <mg_iobuf_resize+0x98>
 800c2da:	687b      	ldr	r3, [r7, #4]
 800c2dc:	681b      	ldr	r3, [r3, #0]
 800c2de:	68fa      	ldr	r2, [r7, #12]
 800c2e0:	4619      	mov	r1, r3
 800c2e2:	6938      	ldr	r0, [r7, #16]
 800c2e4:	f018 f8b8 	bl	8024458 <memmove>
      mg_bzero(io->buf, io->size);
 800c2e8:	687b      	ldr	r3, [r7, #4]
 800c2ea:	681a      	ldr	r2, [r3, #0]
 800c2ec:	687b      	ldr	r3, [r7, #4]
 800c2ee:	685b      	ldr	r3, [r3, #4]
 800c2f0:	4619      	mov	r1, r3
 800c2f2:	4610      	mov	r0, r2
 800c2f4:	f014 fe6e 	bl	8020fd4 <mg_bzero>
      mg_free(io->buf);
 800c2f8:	687b      	ldr	r3, [r7, #4]
 800c2fa:	681b      	ldr	r3, [r3, #0]
 800c2fc:	4618      	mov	r0, r3
 800c2fe:	f7fa fd7d 	bl	8006dfc <mg_free>
      io->buf = (unsigned char *) p;
 800c302:	687b      	ldr	r3, [r7, #4]
 800c304:	693a      	ldr	r2, [r7, #16]
 800c306:	601a      	str	r2, [r3, #0]
      io->size = new_size;
 800c308:	687b      	ldr	r3, [r7, #4]
 800c30a:	683a      	ldr	r2, [r7, #0]
 800c30c:	605a      	str	r2, [r3, #4]
      io->len = len;
 800c30e:	687b      	ldr	r3, [r7, #4]
 800c310:	68fa      	ldr	r2, [r7, #12]
 800c312:	609a      	str	r2, [r3, #8]
 800c314:	e01c      	b.n	800c350 <mg_iobuf_resize+0x100>
    } else {
      ok = 0;
 800c316:	2300      	movs	r3, #0
 800c318:	617b      	str	r3, [r7, #20]
      MG_ERROR(("%lld->%lld", (uint64_t) io->size, (uint64_t) new_size));
 800c31a:	4b10      	ldr	r3, [pc, #64]	@ (800c35c <mg_iobuf_resize+0x10c>)
 800c31c:	681b      	ldr	r3, [r3, #0]
 800c31e:	2b00      	cmp	r3, #0
 800c320:	dd16      	ble.n	800c350 <mg_iobuf_resize+0x100>
 800c322:	4b0f      	ldr	r3, [pc, #60]	@ (800c360 <mg_iobuf_resize+0x110>)
 800c324:	f640 2236 	movw	r2, #2614	@ 0xa36
 800c328:	490e      	ldr	r1, [pc, #56]	@ (800c364 <mg_iobuf_resize+0x114>)
 800c32a:	2001      	movs	r0, #1
 800c32c:	f000 ff3e 	bl	800d1ac <mg_log_prefix>
 800c330:	687b      	ldr	r3, [r7, #4]
 800c332:	685b      	ldr	r3, [r3, #4]
 800c334:	2200      	movs	r2, #0
 800c336:	4698      	mov	r8, r3
 800c338:	4691      	mov	r9, r2
 800c33a:	683b      	ldr	r3, [r7, #0]
 800c33c:	2200      	movs	r2, #0
 800c33e:	461c      	mov	r4, r3
 800c340:	4615      	mov	r5, r2
 800c342:	e9cd 4500 	strd	r4, r5, [sp]
 800c346:	4642      	mov	r2, r8
 800c348:	464b      	mov	r3, r9
 800c34a:	4807      	ldr	r0, [pc, #28]	@ (800c368 <mg_iobuf_resize+0x118>)
 800c34c:	f000 ff7e 	bl	800d24c <mg_log>
    }
  }
  return ok;
 800c350:	697b      	ldr	r3, [r7, #20]
}
 800c352:	4618      	mov	r0, r3
 800c354:	3718      	adds	r7, #24
 800c356:	46bd      	mov	sp, r7
 800c358:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800c35c:	20000258 	.word	0x20000258
 800c360:	08028808 	.word	0x08028808
 800c364:	08025140 	.word	0x08025140
 800c368:	08025fa4 	.word	0x08025fa4

0800c36c <mg_iobuf_add>:
  io->size = io->len = 0;
  return mg_iobuf_resize(io, size);
}

size_t mg_iobuf_add(struct mg_iobuf *io, size_t ofs, const void *buf,
                    size_t len) {
 800c36c:	b580      	push	{r7, lr}
 800c36e:	b086      	sub	sp, #24
 800c370:	af00      	add	r7, sp, #0
 800c372:	60f8      	str	r0, [r7, #12]
 800c374:	60b9      	str	r1, [r7, #8]
 800c376:	607a      	str	r2, [r7, #4]
 800c378:	603b      	str	r3, [r7, #0]
  size_t new_size = roundup(io->len + len, io->align);
 800c37a:	68fb      	ldr	r3, [r7, #12]
 800c37c:	689a      	ldr	r2, [r3, #8]
 800c37e:	683b      	ldr	r3, [r7, #0]
 800c380:	441a      	add	r2, r3
 800c382:	68fb      	ldr	r3, [r7, #12]
 800c384:	68db      	ldr	r3, [r3, #12]
 800c386:	4619      	mov	r1, r3
 800c388:	4610      	mov	r0, r2
 800c38a:	f7ff ff47 	bl	800c21c <roundup>
 800c38e:	6178      	str	r0, [r7, #20]
  mg_iobuf_resize(io, new_size);      // Attempt to resize
 800c390:	6979      	ldr	r1, [r7, #20]
 800c392:	68f8      	ldr	r0, [r7, #12]
 800c394:	f7ff ff5c 	bl	800c250 <mg_iobuf_resize>
  if (new_size != io->size) len = 0;  // Resize failure, append nothing
 800c398:	68fb      	ldr	r3, [r7, #12]
 800c39a:	685b      	ldr	r3, [r3, #4]
 800c39c:	697a      	ldr	r2, [r7, #20]
 800c39e:	429a      	cmp	r2, r3
 800c3a0:	d001      	beq.n	800c3a6 <mg_iobuf_add+0x3a>
 800c3a2:	2300      	movs	r3, #0
 800c3a4:	603b      	str	r3, [r7, #0]
  if (ofs < io->len) memmove(io->buf + ofs + len, io->buf + ofs, io->len - ofs);
 800c3a6:	68fb      	ldr	r3, [r7, #12]
 800c3a8:	689b      	ldr	r3, [r3, #8]
 800c3aa:	68ba      	ldr	r2, [r7, #8]
 800c3ac:	429a      	cmp	r2, r3
 800c3ae:	d210      	bcs.n	800c3d2 <mg_iobuf_add+0x66>
 800c3b0:	68fb      	ldr	r3, [r7, #12]
 800c3b2:	681a      	ldr	r2, [r3, #0]
 800c3b4:	68b9      	ldr	r1, [r7, #8]
 800c3b6:	683b      	ldr	r3, [r7, #0]
 800c3b8:	440b      	add	r3, r1
 800c3ba:	18d0      	adds	r0, r2, r3
 800c3bc:	68fb      	ldr	r3, [r7, #12]
 800c3be:	681a      	ldr	r2, [r3, #0]
 800c3c0:	68bb      	ldr	r3, [r7, #8]
 800c3c2:	18d1      	adds	r1, r2, r3
 800c3c4:	68fb      	ldr	r3, [r7, #12]
 800c3c6:	689a      	ldr	r2, [r3, #8]
 800c3c8:	68bb      	ldr	r3, [r7, #8]
 800c3ca:	1ad3      	subs	r3, r2, r3
 800c3cc:	461a      	mov	r2, r3
 800c3ce:	f018 f843 	bl	8024458 <memmove>
  if (buf != NULL) memmove(io->buf + ofs, buf, len);
 800c3d2:	687b      	ldr	r3, [r7, #4]
 800c3d4:	2b00      	cmp	r3, #0
 800c3d6:	d008      	beq.n	800c3ea <mg_iobuf_add+0x7e>
 800c3d8:	68fb      	ldr	r3, [r7, #12]
 800c3da:	681a      	ldr	r2, [r3, #0]
 800c3dc:	68bb      	ldr	r3, [r7, #8]
 800c3de:	4413      	add	r3, r2
 800c3e0:	683a      	ldr	r2, [r7, #0]
 800c3e2:	6879      	ldr	r1, [r7, #4]
 800c3e4:	4618      	mov	r0, r3
 800c3e6:	f018 f837 	bl	8024458 <memmove>
  if (ofs > io->len) io->len += ofs - io->len;
 800c3ea:	68fb      	ldr	r3, [r7, #12]
 800c3ec:	689b      	ldr	r3, [r3, #8]
 800c3ee:	68ba      	ldr	r2, [r7, #8]
 800c3f0:	429a      	cmp	r2, r3
 800c3f2:	d902      	bls.n	800c3fa <mg_iobuf_add+0x8e>
 800c3f4:	68fb      	ldr	r3, [r7, #12]
 800c3f6:	68ba      	ldr	r2, [r7, #8]
 800c3f8:	609a      	str	r2, [r3, #8]
  io->len += len;
 800c3fa:	68fb      	ldr	r3, [r7, #12]
 800c3fc:	689a      	ldr	r2, [r3, #8]
 800c3fe:	683b      	ldr	r3, [r7, #0]
 800c400:	441a      	add	r2, r3
 800c402:	68fb      	ldr	r3, [r7, #12]
 800c404:	609a      	str	r2, [r3, #8]
  return len;
 800c406:	683b      	ldr	r3, [r7, #0]
}
 800c408:	4618      	mov	r0, r3
 800c40a:	3718      	adds	r7, #24
 800c40c:	46bd      	mov	sp, r7
 800c40e:	bd80      	pop	{r7, pc}

0800c410 <mg_iobuf_del>:

size_t mg_iobuf_del(struct mg_iobuf *io, size_t ofs, size_t len) {
 800c410:	b580      	push	{r7, lr}
 800c412:	b084      	sub	sp, #16
 800c414:	af00      	add	r7, sp, #0
 800c416:	60f8      	str	r0, [r7, #12]
 800c418:	60b9      	str	r1, [r7, #8]
 800c41a:	607a      	str	r2, [r7, #4]
  if (ofs > io->len) ofs = io->len;
 800c41c:	68fb      	ldr	r3, [r7, #12]
 800c41e:	689b      	ldr	r3, [r3, #8]
 800c420:	68ba      	ldr	r2, [r7, #8]
 800c422:	429a      	cmp	r2, r3
 800c424:	d902      	bls.n	800c42c <mg_iobuf_del+0x1c>
 800c426:	68fb      	ldr	r3, [r7, #12]
 800c428:	689b      	ldr	r3, [r3, #8]
 800c42a:	60bb      	str	r3, [r7, #8]
  if (ofs + len > io->len) len = io->len - ofs;
 800c42c:	68ba      	ldr	r2, [r7, #8]
 800c42e:	687b      	ldr	r3, [r7, #4]
 800c430:	441a      	add	r2, r3
 800c432:	68fb      	ldr	r3, [r7, #12]
 800c434:	689b      	ldr	r3, [r3, #8]
 800c436:	429a      	cmp	r2, r3
 800c438:	d904      	bls.n	800c444 <mg_iobuf_del+0x34>
 800c43a:	68fb      	ldr	r3, [r7, #12]
 800c43c:	689a      	ldr	r2, [r3, #8]
 800c43e:	68bb      	ldr	r3, [r7, #8]
 800c440:	1ad3      	subs	r3, r2, r3
 800c442:	607b      	str	r3, [r7, #4]
  if (io->buf) memmove(io->buf + ofs, io->buf + ofs + len, io->len - ofs - len);
 800c444:	68fb      	ldr	r3, [r7, #12]
 800c446:	681b      	ldr	r3, [r3, #0]
 800c448:	2b00      	cmp	r3, #0
 800c44a:	d012      	beq.n	800c472 <mg_iobuf_del+0x62>
 800c44c:	68fb      	ldr	r3, [r7, #12]
 800c44e:	681a      	ldr	r2, [r3, #0]
 800c450:	68bb      	ldr	r3, [r7, #8]
 800c452:	18d0      	adds	r0, r2, r3
 800c454:	68fb      	ldr	r3, [r7, #12]
 800c456:	681a      	ldr	r2, [r3, #0]
 800c458:	68b9      	ldr	r1, [r7, #8]
 800c45a:	687b      	ldr	r3, [r7, #4]
 800c45c:	440b      	add	r3, r1
 800c45e:	18d1      	adds	r1, r2, r3
 800c460:	68fb      	ldr	r3, [r7, #12]
 800c462:	689a      	ldr	r2, [r3, #8]
 800c464:	68bb      	ldr	r3, [r7, #8]
 800c466:	1ad2      	subs	r2, r2, r3
 800c468:	687b      	ldr	r3, [r7, #4]
 800c46a:	1ad3      	subs	r3, r2, r3
 800c46c:	461a      	mov	r2, r3
 800c46e:	f017 fff3 	bl	8024458 <memmove>
  if (io->buf) mg_bzero(io->buf + io->len - len, len);
 800c472:	68fb      	ldr	r3, [r7, #12]
 800c474:	681b      	ldr	r3, [r3, #0]
 800c476:	2b00      	cmp	r3, #0
 800c478:	d00a      	beq.n	800c490 <mg_iobuf_del+0x80>
 800c47a:	68fb      	ldr	r3, [r7, #12]
 800c47c:	681a      	ldr	r2, [r3, #0]
 800c47e:	68fb      	ldr	r3, [r7, #12]
 800c480:	6899      	ldr	r1, [r3, #8]
 800c482:	687b      	ldr	r3, [r7, #4]
 800c484:	1acb      	subs	r3, r1, r3
 800c486:	4413      	add	r3, r2
 800c488:	6879      	ldr	r1, [r7, #4]
 800c48a:	4618      	mov	r0, r3
 800c48c:	f014 fda2 	bl	8020fd4 <mg_bzero>
  io->len -= len;
 800c490:	68fb      	ldr	r3, [r7, #12]
 800c492:	689a      	ldr	r2, [r3, #8]
 800c494:	687b      	ldr	r3, [r7, #4]
 800c496:	1ad2      	subs	r2, r2, r3
 800c498:	68fb      	ldr	r3, [r7, #12]
 800c49a:	609a      	str	r2, [r3, #8]
  return len;
 800c49c:	687b      	ldr	r3, [r7, #4]
}
 800c49e:	4618      	mov	r0, r3
 800c4a0:	3710      	adds	r7, #16
 800c4a2:	46bd      	mov	sp, r7
 800c4a4:	bd80      	pop	{r7, pc}

0800c4a6 <mg_iobuf_free>:

void mg_iobuf_free(struct mg_iobuf *io) {
 800c4a6:	b580      	push	{r7, lr}
 800c4a8:	b082      	sub	sp, #8
 800c4aa:	af00      	add	r7, sp, #0
 800c4ac:	6078      	str	r0, [r7, #4]
  mg_iobuf_resize(io, 0);
 800c4ae:	2100      	movs	r1, #0
 800c4b0:	6878      	ldr	r0, [r7, #4]
 800c4b2:	f7ff fecd 	bl	800c250 <mg_iobuf_resize>
}
 800c4b6:	bf00      	nop
 800c4b8:	3708      	adds	r7, #8
 800c4ba:	46bd      	mov	sp, r7
 800c4bc:	bd80      	pop	{r7, pc}
	...

0800c4c0 <escapeseq>:





static const char *escapeseq(int esc) {
 800c4c0:	b480      	push	{r7}
 800c4c2:	b083      	sub	sp, #12
 800c4c4:	af00      	add	r7, sp, #0
 800c4c6:	6078      	str	r0, [r7, #4]
  return esc ? "\b\f\n\r\t\\\"" : "bfnrt\\\"";
 800c4c8:	687b      	ldr	r3, [r7, #4]
 800c4ca:	2b00      	cmp	r3, #0
 800c4cc:	d001      	beq.n	800c4d2 <escapeseq+0x12>
 800c4ce:	4b04      	ldr	r3, [pc, #16]	@ (800c4e0 <escapeseq+0x20>)
 800c4d0:	e000      	b.n	800c4d4 <escapeseq+0x14>
 800c4d2:	4b04      	ldr	r3, [pc, #16]	@ (800c4e4 <escapeseq+0x24>)
}
 800c4d4:	4618      	mov	r0, r3
 800c4d6:	370c      	adds	r7, #12
 800c4d8:	46bd      	mov	sp, r7
 800c4da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4de:	4770      	bx	lr
 800c4e0:	08025fb0 	.word	0x08025fb0
 800c4e4:	08025fb8 	.word	0x08025fb8

0800c4e8 <json_esc>:

static char json_esc(int c, int esc) {
 800c4e8:	b580      	push	{r7, lr}
 800c4ea:	b086      	sub	sp, #24
 800c4ec:	af00      	add	r7, sp, #0
 800c4ee:	6078      	str	r0, [r7, #4]
 800c4f0:	6039      	str	r1, [r7, #0]
  const char *p, *esc1 = escapeseq(esc), *esc2 = escapeseq(!esc);
 800c4f2:	6838      	ldr	r0, [r7, #0]
 800c4f4:	f7ff ffe4 	bl	800c4c0 <escapeseq>
 800c4f8:	6138      	str	r0, [r7, #16]
 800c4fa:	683b      	ldr	r3, [r7, #0]
 800c4fc:	2b00      	cmp	r3, #0
 800c4fe:	bf0c      	ite	eq
 800c500:	2301      	moveq	r3, #1
 800c502:	2300      	movne	r3, #0
 800c504:	b2db      	uxtb	r3, r3
 800c506:	4618      	mov	r0, r3
 800c508:	f7ff ffda 	bl	800c4c0 <escapeseq>
 800c50c:	60f8      	str	r0, [r7, #12]
  for (p = esc1; *p != '\0'; p++) {
 800c50e:	693b      	ldr	r3, [r7, #16]
 800c510:	617b      	str	r3, [r7, #20]
 800c512:	e010      	b.n	800c536 <json_esc+0x4e>
    if (*p == c) return esc2[p - esc1];
 800c514:	697b      	ldr	r3, [r7, #20]
 800c516:	781b      	ldrb	r3, [r3, #0]
 800c518:	461a      	mov	r2, r3
 800c51a:	687b      	ldr	r3, [r7, #4]
 800c51c:	4293      	cmp	r3, r2
 800c51e:	d107      	bne.n	800c530 <json_esc+0x48>
 800c520:	697a      	ldr	r2, [r7, #20]
 800c522:	693b      	ldr	r3, [r7, #16]
 800c524:	1ad3      	subs	r3, r2, r3
 800c526:	461a      	mov	r2, r3
 800c528:	68fb      	ldr	r3, [r7, #12]
 800c52a:	4413      	add	r3, r2
 800c52c:	781b      	ldrb	r3, [r3, #0]
 800c52e:	e007      	b.n	800c540 <json_esc+0x58>
  for (p = esc1; *p != '\0'; p++) {
 800c530:	697b      	ldr	r3, [r7, #20]
 800c532:	3301      	adds	r3, #1
 800c534:	617b      	str	r3, [r7, #20]
 800c536:	697b      	ldr	r3, [r7, #20]
 800c538:	781b      	ldrb	r3, [r3, #0]
 800c53a:	2b00      	cmp	r3, #0
 800c53c:	d1ea      	bne.n	800c514 <json_esc+0x2c>
  }
  return 0;
 800c53e:	2300      	movs	r3, #0
}
 800c540:	4618      	mov	r0, r3
 800c542:	3718      	adds	r7, #24
 800c544:	46bd      	mov	sp, r7
 800c546:	bd80      	pop	{r7, pc}

0800c548 <mg_pass_string>:

static int mg_pass_string(const char *s, int len) {
 800c548:	b580      	push	{r7, lr}
 800c54a:	b084      	sub	sp, #16
 800c54c:	af00      	add	r7, sp, #0
 800c54e:	6078      	str	r0, [r7, #4]
 800c550:	6039      	str	r1, [r7, #0]
  int i;
  for (i = 0; i < len; i++) {
 800c552:	2300      	movs	r3, #0
 800c554:	60fb      	str	r3, [r7, #12]
 800c556:	e02e      	b.n	800c5b6 <mg_pass_string+0x6e>
    if (s[i] == '\\' && i + 1 < len && json_esc(s[i + 1], 1)) {
 800c558:	68fb      	ldr	r3, [r7, #12]
 800c55a:	687a      	ldr	r2, [r7, #4]
 800c55c:	4413      	add	r3, r2
 800c55e:	781b      	ldrb	r3, [r3, #0]
 800c560:	2b5c      	cmp	r3, #92	@ 0x5c
 800c562:	d114      	bne.n	800c58e <mg_pass_string+0x46>
 800c564:	68fb      	ldr	r3, [r7, #12]
 800c566:	3301      	adds	r3, #1
 800c568:	683a      	ldr	r2, [r7, #0]
 800c56a:	429a      	cmp	r2, r3
 800c56c:	dd0f      	ble.n	800c58e <mg_pass_string+0x46>
 800c56e:	68fb      	ldr	r3, [r7, #12]
 800c570:	3301      	adds	r3, #1
 800c572:	687a      	ldr	r2, [r7, #4]
 800c574:	4413      	add	r3, r2
 800c576:	781b      	ldrb	r3, [r3, #0]
 800c578:	2101      	movs	r1, #1
 800c57a:	4618      	mov	r0, r3
 800c57c:	f7ff ffb4 	bl	800c4e8 <json_esc>
 800c580:	4603      	mov	r3, r0
 800c582:	2b00      	cmp	r3, #0
 800c584:	d003      	beq.n	800c58e <mg_pass_string+0x46>
      i++;
 800c586:	68fb      	ldr	r3, [r7, #12]
 800c588:	3301      	adds	r3, #1
 800c58a:	60fb      	str	r3, [r7, #12]
 800c58c:	e010      	b.n	800c5b0 <mg_pass_string+0x68>
    } else if (s[i] == '\0') {
 800c58e:	68fb      	ldr	r3, [r7, #12]
 800c590:	687a      	ldr	r2, [r7, #4]
 800c592:	4413      	add	r3, r2
 800c594:	781b      	ldrb	r3, [r3, #0]
 800c596:	2b00      	cmp	r3, #0
 800c598:	d102      	bne.n	800c5a0 <mg_pass_string+0x58>
      return MG_JSON_INVALID;
 800c59a:	f06f 0301 	mvn.w	r3, #1
 800c59e:	e010      	b.n	800c5c2 <mg_pass_string+0x7a>
    } else if (s[i] == '"') {
 800c5a0:	68fb      	ldr	r3, [r7, #12]
 800c5a2:	687a      	ldr	r2, [r7, #4]
 800c5a4:	4413      	add	r3, r2
 800c5a6:	781b      	ldrb	r3, [r3, #0]
 800c5a8:	2b22      	cmp	r3, #34	@ 0x22
 800c5aa:	d101      	bne.n	800c5b0 <mg_pass_string+0x68>
      return i;
 800c5ac:	68fb      	ldr	r3, [r7, #12]
 800c5ae:	e008      	b.n	800c5c2 <mg_pass_string+0x7a>
  for (i = 0; i < len; i++) {
 800c5b0:	68fb      	ldr	r3, [r7, #12]
 800c5b2:	3301      	adds	r3, #1
 800c5b4:	60fb      	str	r3, [r7, #12]
 800c5b6:	68fa      	ldr	r2, [r7, #12]
 800c5b8:	683b      	ldr	r3, [r7, #0]
 800c5ba:	429a      	cmp	r2, r3
 800c5bc:	dbcc      	blt.n	800c558 <mg_pass_string+0x10>
    }
  }
  return MG_JSON_INVALID;
 800c5be:	f06f 0301 	mvn.w	r3, #1
}
 800c5c2:	4618      	mov	r0, r3
 800c5c4:	3710      	adds	r7, #16
 800c5c6:	46bd      	mov	sp, r7
 800c5c8:	bd80      	pop	{r7, pc}
 800c5ca:	0000      	movs	r0, r0
 800c5cc:	0000      	movs	r0, r0
	...

0800c5d0 <mg_atod>:

static double mg_atod(const char *p, int len, int *numlen) {
 800c5d0:	b480      	push	{r7}
 800c5d2:	b091      	sub	sp, #68	@ 0x44
 800c5d4:	af00      	add	r7, sp, #0
 800c5d6:	60f8      	str	r0, [r7, #12]
 800c5d8:	60b9      	str	r1, [r7, #8]
 800c5da:	607a      	str	r2, [r7, #4]
  double d = 0.0;
 800c5dc:	f04f 0200 	mov.w	r2, #0
 800c5e0:	f04f 0300 	mov.w	r3, #0
 800c5e4:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
  int i = 0, sign = 1;
 800c5e8:	2300      	movs	r3, #0
 800c5ea:	637b      	str	r3, [r7, #52]	@ 0x34
 800c5ec:	2301      	movs	r3, #1
 800c5ee:	633b      	str	r3, [r7, #48]	@ 0x30

  // Sign
  if (i < len && *p == '-') {
 800c5f0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800c5f2:	68bb      	ldr	r3, [r7, #8]
 800c5f4:	429a      	cmp	r2, r3
 800c5f6:	da0a      	bge.n	800c60e <mg_atod+0x3e>
 800c5f8:	68fb      	ldr	r3, [r7, #12]
 800c5fa:	781b      	ldrb	r3, [r3, #0]
 800c5fc:	2b2d      	cmp	r3, #45	@ 0x2d
 800c5fe:	d106      	bne.n	800c60e <mg_atod+0x3e>
    sign = -1, i++;
 800c600:	f04f 33ff 	mov.w	r3, #4294967295
 800c604:	633b      	str	r3, [r7, #48]	@ 0x30
 800c606:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c608:	3301      	adds	r3, #1
 800c60a:	637b      	str	r3, [r7, #52]	@ 0x34
 800c60c:	e00a      	b.n	800c624 <mg_atod+0x54>
  } else if (i < len && *p == '+') {
 800c60e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800c610:	68bb      	ldr	r3, [r7, #8]
 800c612:	429a      	cmp	r2, r3
 800c614:	da21      	bge.n	800c65a <mg_atod+0x8a>
 800c616:	68fb      	ldr	r3, [r7, #12]
 800c618:	781b      	ldrb	r3, [r3, #0]
 800c61a:	2b2b      	cmp	r3, #43	@ 0x2b
 800c61c:	d11d      	bne.n	800c65a <mg_atod+0x8a>
    i++;
 800c61e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c620:	3301      	adds	r3, #1
 800c622:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  // Decimal
  for (; i < len && p[i] >= '0' && p[i] <= '9'; i++) {
 800c624:	e019      	b.n	800c65a <mg_atod+0x8a>
    d *= 10.0;
 800c626:	ed97 7b0e 	vldr	d7, [r7, #56]	@ 0x38
 800c62a:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
 800c62e:	ee27 7b06 	vmul.f64	d7, d7, d6
 800c632:	ed87 7b0e 	vstr	d7, [r7, #56]	@ 0x38
    d += p[i] - '0';
 800c636:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c638:	68fa      	ldr	r2, [r7, #12]
 800c63a:	4413      	add	r3, r2
 800c63c:	781b      	ldrb	r3, [r3, #0]
 800c63e:	3b30      	subs	r3, #48	@ 0x30
 800c640:	ee07 3a90 	vmov	s15, r3
 800c644:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800c648:	ed97 6b0e 	vldr	d6, [r7, #56]	@ 0x38
 800c64c:	ee36 7b07 	vadd.f64	d7, d6, d7
 800c650:	ed87 7b0e 	vstr	d7, [r7, #56]	@ 0x38
  for (; i < len && p[i] >= '0' && p[i] <= '9'; i++) {
 800c654:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c656:	3301      	adds	r3, #1
 800c658:	637b      	str	r3, [r7, #52]	@ 0x34
 800c65a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800c65c:	68bb      	ldr	r3, [r7, #8]
 800c65e:	429a      	cmp	r2, r3
 800c660:	da0b      	bge.n	800c67a <mg_atod+0xaa>
 800c662:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c664:	68fa      	ldr	r2, [r7, #12]
 800c666:	4413      	add	r3, r2
 800c668:	781b      	ldrb	r3, [r3, #0]
 800c66a:	2b2f      	cmp	r3, #47	@ 0x2f
 800c66c:	d905      	bls.n	800c67a <mg_atod+0xaa>
 800c66e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c670:	68fa      	ldr	r2, [r7, #12]
 800c672:	4413      	add	r3, r2
 800c674:	781b      	ldrb	r3, [r3, #0]
 800c676:	2b39      	cmp	r3, #57	@ 0x39
 800c678:	d9d5      	bls.n	800c626 <mg_atod+0x56>
  }
  d *= sign;
 800c67a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c67c:	ee07 3a90 	vmov	s15, r3
 800c680:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800c684:	ed97 6b0e 	vldr	d6, [r7, #56]	@ 0x38
 800c688:	ee26 7b07 	vmul.f64	d7, d6, d7
 800c68c:	ed87 7b0e 	vstr	d7, [r7, #56]	@ 0x38

  // Fractional
  if (i < len && p[i] == '.') {
 800c690:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800c692:	68bb      	ldr	r3, [r7, #8]
 800c694:	429a      	cmp	r2, r3
 800c696:	da51      	bge.n	800c73c <mg_atod+0x16c>
 800c698:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c69a:	68fa      	ldr	r2, [r7, #12]
 800c69c:	4413      	add	r3, r2
 800c69e:	781b      	ldrb	r3, [r3, #0]
 800c6a0:	2b2e      	cmp	r3, #46	@ 0x2e
 800c6a2:	d14b      	bne.n	800c73c <mg_atod+0x16c>
    double frac = 0.0, base = 0.1;
 800c6a4:	f04f 0200 	mov.w	r2, #0
 800c6a8:	f04f 0300 	mov.w	r3, #0
 800c6ac:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
 800c6b0:	a36d      	add	r3, pc, #436	@ (adr r3, 800c868 <mg_atod+0x298>)
 800c6b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c6b6:	e9c7 2308 	strd	r2, r3, [r7, #32]
    i++;
 800c6ba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c6bc:	3301      	adds	r3, #1
 800c6be:	637b      	str	r3, [r7, #52]	@ 0x34
    for (; i < len && p[i] >= '0' && p[i] <= '9'; i++) {
 800c6c0:	e01d      	b.n	800c6fe <mg_atod+0x12e>
      frac += base * (p[i] - '0');
 800c6c2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c6c4:	68fa      	ldr	r2, [r7, #12]
 800c6c6:	4413      	add	r3, r2
 800c6c8:	781b      	ldrb	r3, [r3, #0]
 800c6ca:	3b30      	subs	r3, #48	@ 0x30
 800c6cc:	ee07 3a90 	vmov	s15, r3
 800c6d0:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 800c6d4:	ed97 7b08 	vldr	d7, [r7, #32]
 800c6d8:	ee26 7b07 	vmul.f64	d7, d6, d7
 800c6dc:	ed97 6b0a 	vldr	d6, [r7, #40]	@ 0x28
 800c6e0:	ee36 7b07 	vadd.f64	d7, d6, d7
 800c6e4:	ed87 7b0a 	vstr	d7, [r7, #40]	@ 0x28
      base /= 10.0;
 800c6e8:	ed97 6b08 	vldr	d6, [r7, #32]
 800c6ec:	eeb2 5b04 	vmov.f64	d5, #36	@ 0x41200000  10.0
 800c6f0:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800c6f4:	ed87 7b08 	vstr	d7, [r7, #32]
    for (; i < len && p[i] >= '0' && p[i] <= '9'; i++) {
 800c6f8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c6fa:	3301      	adds	r3, #1
 800c6fc:	637b      	str	r3, [r7, #52]	@ 0x34
 800c6fe:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800c700:	68bb      	ldr	r3, [r7, #8]
 800c702:	429a      	cmp	r2, r3
 800c704:	da0b      	bge.n	800c71e <mg_atod+0x14e>
 800c706:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c708:	68fa      	ldr	r2, [r7, #12]
 800c70a:	4413      	add	r3, r2
 800c70c:	781b      	ldrb	r3, [r3, #0]
 800c70e:	2b2f      	cmp	r3, #47	@ 0x2f
 800c710:	d905      	bls.n	800c71e <mg_atod+0x14e>
 800c712:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c714:	68fa      	ldr	r2, [r7, #12]
 800c716:	4413      	add	r3, r2
 800c718:	781b      	ldrb	r3, [r3, #0]
 800c71a:	2b39      	cmp	r3, #57	@ 0x39
 800c71c:	d9d1      	bls.n	800c6c2 <mg_atod+0xf2>
    }
    d += frac * sign;
 800c71e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c720:	ee07 3a90 	vmov	s15, r3
 800c724:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 800c728:	ed97 7b0a 	vldr	d7, [r7, #40]	@ 0x28
 800c72c:	ee26 7b07 	vmul.f64	d7, d6, d7
 800c730:	ed97 6b0e 	vldr	d6, [r7, #56]	@ 0x38
 800c734:	ee36 7b07 	vadd.f64	d7, d6, d7
 800c738:	ed87 7b0e 	vstr	d7, [r7, #56]	@ 0x38
  }

  // Exponential
  if (i < len && (p[i] == 'e' || p[i] == 'E')) {
 800c73c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800c73e:	68bb      	ldr	r3, [r7, #8]
 800c740:	429a      	cmp	r2, r3
 800c742:	da7e      	bge.n	800c842 <mg_atod+0x272>
 800c744:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c746:	68fa      	ldr	r2, [r7, #12]
 800c748:	4413      	add	r3, r2
 800c74a:	781b      	ldrb	r3, [r3, #0]
 800c74c:	2b65      	cmp	r3, #101	@ 0x65
 800c74e:	d005      	beq.n	800c75c <mg_atod+0x18c>
 800c750:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c752:	68fa      	ldr	r2, [r7, #12]
 800c754:	4413      	add	r3, r2
 800c756:	781b      	ldrb	r3, [r3, #0]
 800c758:	2b45      	cmp	r3, #69	@ 0x45
 800c75a:	d172      	bne.n	800c842 <mg_atod+0x272>
    int j, exp = 0, minus = 0;
 800c75c:	2300      	movs	r3, #0
 800c75e:	61bb      	str	r3, [r7, #24]
 800c760:	2300      	movs	r3, #0
 800c762:	617b      	str	r3, [r7, #20]
    i++;
 800c764:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c766:	3301      	adds	r3, #1
 800c768:	637b      	str	r3, [r7, #52]	@ 0x34
    if (i < len && p[i] == '-') minus = 1, i++;
 800c76a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800c76c:	68bb      	ldr	r3, [r7, #8]
 800c76e:	429a      	cmp	r2, r3
 800c770:	da0a      	bge.n	800c788 <mg_atod+0x1b8>
 800c772:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c774:	68fa      	ldr	r2, [r7, #12]
 800c776:	4413      	add	r3, r2
 800c778:	781b      	ldrb	r3, [r3, #0]
 800c77a:	2b2d      	cmp	r3, #45	@ 0x2d
 800c77c:	d104      	bne.n	800c788 <mg_atod+0x1b8>
 800c77e:	2301      	movs	r3, #1
 800c780:	617b      	str	r3, [r7, #20]
 800c782:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c784:	3301      	adds	r3, #1
 800c786:	637b      	str	r3, [r7, #52]	@ 0x34
    if (i < len && p[i] == '+') i++;
 800c788:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800c78a:	68bb      	ldr	r3, [r7, #8]
 800c78c:	429a      	cmp	r2, r3
 800c78e:	da19      	bge.n	800c7c4 <mg_atod+0x1f4>
 800c790:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c792:	68fa      	ldr	r2, [r7, #12]
 800c794:	4413      	add	r3, r2
 800c796:	781b      	ldrb	r3, [r3, #0]
 800c798:	2b2b      	cmp	r3, #43	@ 0x2b
 800c79a:	d113      	bne.n	800c7c4 <mg_atod+0x1f4>
 800c79c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c79e:	3301      	adds	r3, #1
 800c7a0:	637b      	str	r3, [r7, #52]	@ 0x34
    while (i < len && p[i] >= '0' && p[i] <= '9' && exp < 308)
 800c7a2:	e00f      	b.n	800c7c4 <mg_atod+0x1f4>
      exp = exp * 10 + (p[i++] - '0');
 800c7a4:	69ba      	ldr	r2, [r7, #24]
 800c7a6:	4613      	mov	r3, r2
 800c7a8:	009b      	lsls	r3, r3, #2
 800c7aa:	4413      	add	r3, r2
 800c7ac:	005b      	lsls	r3, r3, #1
 800c7ae:	4619      	mov	r1, r3
 800c7b0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c7b2:	1c5a      	adds	r2, r3, #1
 800c7b4:	637a      	str	r2, [r7, #52]	@ 0x34
 800c7b6:	461a      	mov	r2, r3
 800c7b8:	68fb      	ldr	r3, [r7, #12]
 800c7ba:	4413      	add	r3, r2
 800c7bc:	781b      	ldrb	r3, [r3, #0]
 800c7be:	3b30      	subs	r3, #48	@ 0x30
 800c7c0:	440b      	add	r3, r1
 800c7c2:	61bb      	str	r3, [r7, #24]
    while (i < len && p[i] >= '0' && p[i] <= '9' && exp < 308)
 800c7c4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800c7c6:	68bb      	ldr	r3, [r7, #8]
 800c7c8:	429a      	cmp	r2, r3
 800c7ca:	da0f      	bge.n	800c7ec <mg_atod+0x21c>
 800c7cc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c7ce:	68fa      	ldr	r2, [r7, #12]
 800c7d0:	4413      	add	r3, r2
 800c7d2:	781b      	ldrb	r3, [r3, #0]
 800c7d4:	2b2f      	cmp	r3, #47	@ 0x2f
 800c7d6:	d909      	bls.n	800c7ec <mg_atod+0x21c>
 800c7d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c7da:	68fa      	ldr	r2, [r7, #12]
 800c7dc:	4413      	add	r3, r2
 800c7de:	781b      	ldrb	r3, [r3, #0]
 800c7e0:	2b39      	cmp	r3, #57	@ 0x39
 800c7e2:	d803      	bhi.n	800c7ec <mg_atod+0x21c>
 800c7e4:	69bb      	ldr	r3, [r7, #24]
 800c7e6:	f5b3 7f9a 	cmp.w	r3, #308	@ 0x134
 800c7ea:	dbdb      	blt.n	800c7a4 <mg_atod+0x1d4>
    if (minus) exp = -exp;
 800c7ec:	697b      	ldr	r3, [r7, #20]
 800c7ee:	2b00      	cmp	r3, #0
 800c7f0:	d002      	beq.n	800c7f8 <mg_atod+0x228>
 800c7f2:	69bb      	ldr	r3, [r7, #24]
 800c7f4:	425b      	negs	r3, r3
 800c7f6:	61bb      	str	r3, [r7, #24]
    for (j = 0; j < exp; j++) d *= 10.0;
 800c7f8:	2300      	movs	r3, #0
 800c7fa:	61fb      	str	r3, [r7, #28]
 800c7fc:	e00a      	b.n	800c814 <mg_atod+0x244>
 800c7fe:	ed97 7b0e 	vldr	d7, [r7, #56]	@ 0x38
 800c802:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
 800c806:	ee27 7b06 	vmul.f64	d7, d7, d6
 800c80a:	ed87 7b0e 	vstr	d7, [r7, #56]	@ 0x38
 800c80e:	69fb      	ldr	r3, [r7, #28]
 800c810:	3301      	adds	r3, #1
 800c812:	61fb      	str	r3, [r7, #28]
 800c814:	69fa      	ldr	r2, [r7, #28]
 800c816:	69bb      	ldr	r3, [r7, #24]
 800c818:	429a      	cmp	r2, r3
 800c81a:	dbf0      	blt.n	800c7fe <mg_atod+0x22e>
    for (j = 0; j < -exp; j++) d /= 10.0;
 800c81c:	2300      	movs	r3, #0
 800c81e:	61fb      	str	r3, [r7, #28]
 800c820:	e00a      	b.n	800c838 <mg_atod+0x268>
 800c822:	ed97 6b0e 	vldr	d6, [r7, #56]	@ 0x38
 800c826:	eeb2 5b04 	vmov.f64	d5, #36	@ 0x41200000  10.0
 800c82a:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800c82e:	ed87 7b0e 	vstr	d7, [r7, #56]	@ 0x38
 800c832:	69fb      	ldr	r3, [r7, #28]
 800c834:	3301      	adds	r3, #1
 800c836:	61fb      	str	r3, [r7, #28]
 800c838:	69bb      	ldr	r3, [r7, #24]
 800c83a:	425b      	negs	r3, r3
 800c83c:	69fa      	ldr	r2, [r7, #28]
 800c83e:	429a      	cmp	r2, r3
 800c840:	dbef      	blt.n	800c822 <mg_atod+0x252>
  }

  if (numlen != NULL) *numlen = i;
 800c842:	687b      	ldr	r3, [r7, #4]
 800c844:	2b00      	cmp	r3, #0
 800c846:	d002      	beq.n	800c84e <mg_atod+0x27e>
 800c848:	687b      	ldr	r3, [r7, #4]
 800c84a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800c84c:	601a      	str	r2, [r3, #0]
  return d;
 800c84e:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800c852:	ec43 2b17 	vmov	d7, r2, r3
}
 800c856:	eeb0 0b47 	vmov.f64	d0, d7
 800c85a:	3744      	adds	r7, #68	@ 0x44
 800c85c:	46bd      	mov	sp, r7
 800c85e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c862:	4770      	bx	lr
 800c864:	f3af 8000 	nop.w
 800c868:	9999999a 	.word	0x9999999a
 800c86c:	3fb99999 	.word	0x3fb99999

0800c870 <mg_json_get>:
    if (ofs > obj.len) ofs = 0;
  }
  return ofs;
}

int mg_json_get(struct mg_str json, const char *path, int *toklen) {
 800c870:	b590      	push	{r4, r7, lr}
 800c872:	b09b      	sub	sp, #108	@ 0x6c
 800c874:	af00      	add	r7, sp, #0
 800c876:	f107 0408 	add.w	r4, r7, #8
 800c87a:	e884 0003 	stmia.w	r4, {r0, r1}
 800c87e:	607a      	str	r2, [r7, #4]
 800c880:	603b      	str	r3, [r7, #0]
  const char *s = json.buf;
 800c882:	68bb      	ldr	r3, [r7, #8]
 800c884:	647b      	str	r3, [r7, #68]	@ 0x44
  int len = (int) json.len;
 800c886:	68fb      	ldr	r3, [r7, #12]
 800c888:	643b      	str	r3, [r7, #64]	@ 0x40
  enum { S_VALUE, S_KEY, S_COLON, S_COMMA_OR_EOO } expecting = S_VALUE;
 800c88a:	2300      	movs	r3, #0
 800c88c:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  unsigned char nesting[MG_JSON_MAX_DEPTH];
  int i = 0;             // Current offset in `s`
 800c890:	2300      	movs	r3, #0
 800c892:	663b      	str	r3, [r7, #96]	@ 0x60
  int j = 0;             // Offset in `s` we're looking for (return value)
 800c894:	2300      	movs	r3, #0
 800c896:	65fb      	str	r3, [r7, #92]	@ 0x5c
  int depth = 0;         // Current depth (nesting level)
 800c898:	2300      	movs	r3, #0
 800c89a:	65bb      	str	r3, [r7, #88]	@ 0x58
  int ed = 0;            // Expected depth
 800c89c:	2300      	movs	r3, #0
 800c89e:	657b      	str	r3, [r7, #84]	@ 0x54
  int pos = 1;           // Current position in `path`
 800c8a0:	2301      	movs	r3, #1
 800c8a2:	653b      	str	r3, [r7, #80]	@ 0x50
  int ci = -1, ei = -1;  // Current and expected index in array
 800c8a4:	f04f 33ff 	mov.w	r3, #4294967295
 800c8a8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800c8aa:	f04f 33ff 	mov.w	r3, #4294967295
 800c8ae:	64bb      	str	r3, [r7, #72]	@ 0x48

  if (toklen) *toklen = 0;
 800c8b0:	683b      	ldr	r3, [r7, #0]
 800c8b2:	2b00      	cmp	r3, #0
 800c8b4:	d002      	beq.n	800c8bc <mg_json_get+0x4c>
 800c8b6:	683b      	ldr	r3, [r7, #0]
 800c8b8:	2200      	movs	r2, #0
 800c8ba:	601a      	str	r2, [r3, #0]
  if (path[0] != '$') return MG_JSON_INVALID;
 800c8bc:	687b      	ldr	r3, [r7, #4]
 800c8be:	781b      	ldrb	r3, [r3, #0]
 800c8c0:	2b24      	cmp	r3, #36	@ 0x24
 800c8c2:	d002      	beq.n	800c8ca <mg_json_get+0x5a>
 800c8c4:	f06f 0301 	mvn.w	r3, #1
 800c8c8:	e308      	b.n	800cedc <mg_json_get+0x66c>
    if (c != nesting[depth - 1] + 2) return MG_JSON_INVALID; \
    depth--;                                                 \
    MG_CHECKRET(x);                                          \
  } while (0)

  for (i = 0; i < len; i++) {
 800c8ca:	2300      	movs	r3, #0
 800c8cc:	663b      	str	r3, [r7, #96]	@ 0x60
 800c8ce:	e2fe      	b.n	800cece <mg_json_get+0x65e>
    unsigned char c = ((unsigned char *) s)[i];
 800c8d0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800c8d2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800c8d4:	4413      	add	r3, r2
 800c8d6:	781b      	ldrb	r3, [r3, #0]
 800c8d8:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
    if (c == ' ' || c == '\t' || c == '\n' || c == '\r') continue;
 800c8dc:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800c8e0:	2b20      	cmp	r3, #32
 800c8e2:	f000 82ee 	beq.w	800cec2 <mg_json_get+0x652>
 800c8e6:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800c8ea:	2b09      	cmp	r3, #9
 800c8ec:	f000 82e9 	beq.w	800cec2 <mg_json_get+0x652>
 800c8f0:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800c8f4:	2b0a      	cmp	r3, #10
 800c8f6:	f000 82e4 	beq.w	800cec2 <mg_json_get+0x652>
 800c8fa:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800c8fe:	2b0d      	cmp	r3, #13
 800c900:	f000 82df 	beq.w	800cec2 <mg_json_get+0x652>
    switch (expecting) {
 800c904:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800c908:	2b03      	cmp	r3, #3
 800c90a:	f200 82dd 	bhi.w	800cec8 <mg_json_get+0x658>
 800c90e:	a201      	add	r2, pc, #4	@ (adr r2, 800c914 <mg_json_get+0xa4>)
 800c910:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c914:	0800c925 	.word	0x0800c925
 800c918:	0800cc0d 	.word	0x0800cc0d
 800c91c:	0800cd9b 	.word	0x0800cd9b
 800c920:	0800cdb1 	.word	0x0800cdb1
      case S_VALUE:
        // p("V %s [%.*s] %d %d %d %d\n", path, pos, path, depth, ed, ci, ei);
        if (depth == ed) j = i;
 800c924:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800c926:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c928:	429a      	cmp	r2, r3
 800c92a:	d101      	bne.n	800c930 <mg_json_get+0xc0>
 800c92c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800c92e:	65fb      	str	r3, [r7, #92]	@ 0x5c
        if (c == '{') {
 800c930:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800c934:	2b7b      	cmp	r3, #123	@ 0x7b
 800c936:	d12b      	bne.n	800c990 <mg_json_get+0x120>
          if (depth >= (int) sizeof(nesting)) return MG_JSON_TOO_DEEP;
 800c938:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800c93a:	2b1d      	cmp	r3, #29
 800c93c:	dd02      	ble.n	800c944 <mg_json_get+0xd4>
 800c93e:	f04f 33ff 	mov.w	r3, #4294967295
 800c942:	e2cb      	b.n	800cedc <mg_json_get+0x66c>
          if (depth == ed && path[pos] == '.' && ci == ei) {
 800c944:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800c946:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c948:	429a      	cmp	r2, r3
 800c94a:	d114      	bne.n	800c976 <mg_json_get+0x106>
 800c94c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c94e:	687a      	ldr	r2, [r7, #4]
 800c950:	4413      	add	r3, r2
 800c952:	781b      	ldrb	r3, [r3, #0]
 800c954:	2b2e      	cmp	r3, #46	@ 0x2e
 800c956:	d10e      	bne.n	800c976 <mg_json_get+0x106>
 800c958:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800c95a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c95c:	429a      	cmp	r2, r3
 800c95e:	d10a      	bne.n	800c976 <mg_json_get+0x106>
            // If we start the object, reset array indices
            ed++, pos++, ci = ei = -1;
 800c960:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c962:	3301      	adds	r3, #1
 800c964:	657b      	str	r3, [r7, #84]	@ 0x54
 800c966:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c968:	3301      	adds	r3, #1
 800c96a:	653b      	str	r3, [r7, #80]	@ 0x50
 800c96c:	f04f 33ff 	mov.w	r3, #4294967295
 800c970:	64bb      	str	r3, [r7, #72]	@ 0x48
 800c972:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c974:	64fb      	str	r3, [r7, #76]	@ 0x4c
          }
          nesting[depth++] = c;
 800c976:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800c978:	1c5a      	adds	r2, r3, #1
 800c97a:	65ba      	str	r2, [r7, #88]	@ 0x58
 800c97c:	3368      	adds	r3, #104	@ 0x68
 800c97e:	443b      	add	r3, r7
 800c980:	f897 203f 	ldrb.w	r2, [r7, #63]	@ 0x3f
 800c984:	f803 2c54 	strb.w	r2, [r3, #-84]
          expecting = S_KEY;
 800c988:	2301      	movs	r3, #1
 800c98a:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
          break;
 800c98e:	e29b      	b.n	800cec8 <mg_json_get+0x658>
        } else if (c == '[') {
 800c990:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800c994:	2b5b      	cmp	r3, #91	@ 0x5b
 800c996:	d14e      	bne.n	800ca36 <mg_json_get+0x1c6>
          if (depth >= (int) sizeof(nesting)) return MG_JSON_TOO_DEEP;
 800c998:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800c99a:	2b1d      	cmp	r3, #29
 800c99c:	dd02      	ble.n	800c9a4 <mg_json_get+0x134>
 800c99e:	f04f 33ff 	mov.w	r3, #4294967295
 800c9a2:	e29b      	b.n	800cedc <mg_json_get+0x66c>
          if (depth == ed && path[pos] == '[' && ei == ci) {
 800c9a4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800c9a6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c9a8:	429a      	cmp	r2, r3
 800c9aa:	d13a      	bne.n	800ca22 <mg_json_get+0x1b2>
 800c9ac:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c9ae:	687a      	ldr	r2, [r7, #4]
 800c9b0:	4413      	add	r3, r2
 800c9b2:	781b      	ldrb	r3, [r3, #0]
 800c9b4:	2b5b      	cmp	r3, #91	@ 0x5b
 800c9b6:	d134      	bne.n	800ca22 <mg_json_get+0x1b2>
 800c9b8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800c9ba:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c9bc:	429a      	cmp	r2, r3
 800c9be:	d130      	bne.n	800ca22 <mg_json_get+0x1b2>
            ed++, pos++, ci = 0;
 800c9c0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c9c2:	3301      	adds	r3, #1
 800c9c4:	657b      	str	r3, [r7, #84]	@ 0x54
 800c9c6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c9c8:	3301      	adds	r3, #1
 800c9ca:	653b      	str	r3, [r7, #80]	@ 0x50
 800c9cc:	2300      	movs	r3, #0
 800c9ce:	64fb      	str	r3, [r7, #76]	@ 0x4c
            for (ei = 0; path[pos] != ']' && path[pos] != '\0'; pos++) {
 800c9d0:	2300      	movs	r3, #0
 800c9d2:	64bb      	str	r3, [r7, #72]	@ 0x48
 800c9d4:	e010      	b.n	800c9f8 <mg_json_get+0x188>
              ei *= 10;
 800c9d6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800c9d8:	4613      	mov	r3, r2
 800c9da:	009b      	lsls	r3, r3, #2
 800c9dc:	4413      	add	r3, r2
 800c9de:	005b      	lsls	r3, r3, #1
 800c9e0:	64bb      	str	r3, [r7, #72]	@ 0x48
              ei += path[pos] - '0';
 800c9e2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c9e4:	687a      	ldr	r2, [r7, #4]
 800c9e6:	4413      	add	r3, r2
 800c9e8:	781b      	ldrb	r3, [r3, #0]
 800c9ea:	3b30      	subs	r3, #48	@ 0x30
 800c9ec:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800c9ee:	4413      	add	r3, r2
 800c9f0:	64bb      	str	r3, [r7, #72]	@ 0x48
            for (ei = 0; path[pos] != ']' && path[pos] != '\0'; pos++) {
 800c9f2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c9f4:	3301      	adds	r3, #1
 800c9f6:	653b      	str	r3, [r7, #80]	@ 0x50
 800c9f8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c9fa:	687a      	ldr	r2, [r7, #4]
 800c9fc:	4413      	add	r3, r2
 800c9fe:	781b      	ldrb	r3, [r3, #0]
 800ca00:	2b5d      	cmp	r3, #93	@ 0x5d
 800ca02:	d005      	beq.n	800ca10 <mg_json_get+0x1a0>
 800ca04:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ca06:	687a      	ldr	r2, [r7, #4]
 800ca08:	4413      	add	r3, r2
 800ca0a:	781b      	ldrb	r3, [r3, #0]
 800ca0c:	2b00      	cmp	r3, #0
 800ca0e:	d1e2      	bne.n	800c9d6 <mg_json_get+0x166>
            }
            if (path[pos] != 0) pos++;
 800ca10:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ca12:	687a      	ldr	r2, [r7, #4]
 800ca14:	4413      	add	r3, r2
 800ca16:	781b      	ldrb	r3, [r3, #0]
 800ca18:	2b00      	cmp	r3, #0
 800ca1a:	d002      	beq.n	800ca22 <mg_json_get+0x1b2>
 800ca1c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ca1e:	3301      	adds	r3, #1
 800ca20:	653b      	str	r3, [r7, #80]	@ 0x50
          }
          nesting[depth++] = c;
 800ca22:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800ca24:	1c5a      	adds	r2, r3, #1
 800ca26:	65ba      	str	r2, [r7, #88]	@ 0x58
 800ca28:	3368      	adds	r3, #104	@ 0x68
 800ca2a:	443b      	add	r3, r7
 800ca2c:	f897 203f 	ldrb.w	r2, [r7, #63]	@ 0x3f
 800ca30:	f803 2c54 	strb.w	r2, [r3, #-84]
          break;
 800ca34:	e248      	b.n	800cec8 <mg_json_get+0x658>
        } else if (c == ']' && depth > 0) {  // Empty array
 800ca36:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800ca3a:	2b5d      	cmp	r3, #93	@ 0x5d
 800ca3c:	d13a      	bne.n	800cab4 <mg_json_get+0x244>
 800ca3e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800ca40:	2b00      	cmp	r3, #0
 800ca42:	dd37      	ble.n	800cab4 <mg_json_get+0x244>
          MG_EOO(']');
 800ca44:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800ca46:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ca48:	429a      	cmp	r2, r3
 800ca4a:	d106      	bne.n	800ca5a <mg_json_get+0x1ea>
 800ca4c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800ca4e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ca50:	429a      	cmp	r2, r3
 800ca52:	d002      	beq.n	800ca5a <mg_json_get+0x1ea>
 800ca54:	f06f 0302 	mvn.w	r3, #2
 800ca58:	e240      	b.n	800cedc <mg_json_get+0x66c>
 800ca5a:	f897 203f 	ldrb.w	r2, [r7, #63]	@ 0x3f
 800ca5e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800ca60:	3b01      	subs	r3, #1
 800ca62:	3368      	adds	r3, #104	@ 0x68
 800ca64:	443b      	add	r3, r7
 800ca66:	f813 3c54 	ldrb.w	r3, [r3, #-84]
 800ca6a:	3302      	adds	r3, #2
 800ca6c:	429a      	cmp	r2, r3
 800ca6e:	d002      	beq.n	800ca76 <mg_json_get+0x206>
 800ca70:	f06f 0301 	mvn.w	r3, #1
 800ca74:	e232      	b.n	800cedc <mg_json_get+0x66c>
 800ca76:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800ca78:	3b01      	subs	r3, #1
 800ca7a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800ca7c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800ca7e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ca80:	429a      	cmp	r2, r3
 800ca82:	f040 809c 	bne.w	800cbbe <mg_json_get+0x34e>
 800ca86:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ca88:	687a      	ldr	r2, [r7, #4]
 800ca8a:	4413      	add	r3, r2
 800ca8c:	781b      	ldrb	r3, [r3, #0]
 800ca8e:	2b00      	cmp	r3, #0
 800ca90:	f040 8095 	bne.w	800cbbe <mg_json_get+0x34e>
 800ca94:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800ca96:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ca98:	429a      	cmp	r2, r3
 800ca9a:	f040 8090 	bne.w	800cbbe <mg_json_get+0x34e>
 800ca9e:	683b      	ldr	r3, [r7, #0]
 800caa0:	2b00      	cmp	r3, #0
 800caa2:	d005      	beq.n	800cab0 <mg_json_get+0x240>
 800caa4:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800caa6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800caa8:	1ad3      	subs	r3, r2, r3
 800caaa:	1c5a      	adds	r2, r3, #1
 800caac:	683b      	ldr	r3, [r7, #0]
 800caae:	601a      	str	r2, [r3, #0]
 800cab0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800cab2:	e213      	b.n	800cedc <mg_json_get+0x66c>
        } else if (c == 't' && i + 3 < len && memcmp(&s[i], "true", 4) == 0) {
 800cab4:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800cab8:	2b74      	cmp	r3, #116	@ 0x74
 800caba:	d113      	bne.n	800cae4 <mg_json_get+0x274>
 800cabc:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800cabe:	3303      	adds	r3, #3
 800cac0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800cac2:	429a      	cmp	r2, r3
 800cac4:	dd0e      	ble.n	800cae4 <mg_json_get+0x274>
 800cac6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800cac8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800caca:	4413      	add	r3, r2
 800cacc:	2204      	movs	r2, #4
 800cace:	4998      	ldr	r1, [pc, #608]	@ (800cd30 <mg_json_get+0x4c0>)
 800cad0:	4618      	mov	r0, r3
 800cad2:	f017 fcb1 	bl	8024438 <memcmp>
 800cad6:	4603      	mov	r3, r0
 800cad8:	2b00      	cmp	r3, #0
 800cada:	d103      	bne.n	800cae4 <mg_json_get+0x274>
          i += 3;
 800cadc:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800cade:	3303      	adds	r3, #3
 800cae0:	663b      	str	r3, [r7, #96]	@ 0x60
 800cae2:	e06c      	b.n	800cbbe <mg_json_get+0x34e>
        } else if (c == 'n' && i + 3 < len && memcmp(&s[i], "null", 4) == 0) {
 800cae4:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800cae8:	2b6e      	cmp	r3, #110	@ 0x6e
 800caea:	d113      	bne.n	800cb14 <mg_json_get+0x2a4>
 800caec:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800caee:	3303      	adds	r3, #3
 800caf0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800caf2:	429a      	cmp	r2, r3
 800caf4:	dd0e      	ble.n	800cb14 <mg_json_get+0x2a4>
 800caf6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800caf8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800cafa:	4413      	add	r3, r2
 800cafc:	2204      	movs	r2, #4
 800cafe:	498d      	ldr	r1, [pc, #564]	@ (800cd34 <mg_json_get+0x4c4>)
 800cb00:	4618      	mov	r0, r3
 800cb02:	f017 fc99 	bl	8024438 <memcmp>
 800cb06:	4603      	mov	r3, r0
 800cb08:	2b00      	cmp	r3, #0
 800cb0a:	d103      	bne.n	800cb14 <mg_json_get+0x2a4>
          i += 3;
 800cb0c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800cb0e:	3303      	adds	r3, #3
 800cb10:	663b      	str	r3, [r7, #96]	@ 0x60
 800cb12:	e054      	b.n	800cbbe <mg_json_get+0x34e>
        } else if (c == 'f' && i + 4 < len && memcmp(&s[i], "false", 5) == 0) {
 800cb14:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800cb18:	2b66      	cmp	r3, #102	@ 0x66
 800cb1a:	d113      	bne.n	800cb44 <mg_json_get+0x2d4>
 800cb1c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800cb1e:	3304      	adds	r3, #4
 800cb20:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800cb22:	429a      	cmp	r2, r3
 800cb24:	dd0e      	ble.n	800cb44 <mg_json_get+0x2d4>
 800cb26:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800cb28:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800cb2a:	4413      	add	r3, r2
 800cb2c:	2205      	movs	r2, #5
 800cb2e:	4982      	ldr	r1, [pc, #520]	@ (800cd38 <mg_json_get+0x4c8>)
 800cb30:	4618      	mov	r0, r3
 800cb32:	f017 fc81 	bl	8024438 <memcmp>
 800cb36:	4603      	mov	r3, r0
 800cb38:	2b00      	cmp	r3, #0
 800cb3a:	d103      	bne.n	800cb44 <mg_json_get+0x2d4>
          i += 4;
 800cb3c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800cb3e:	3304      	adds	r3, #4
 800cb40:	663b      	str	r3, [r7, #96]	@ 0x60
 800cb42:	e03c      	b.n	800cbbe <mg_json_get+0x34e>
        } else if (c == '-' || ((c >= '0' && c <= '9'))) {
 800cb44:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800cb48:	2b2d      	cmp	r3, #45	@ 0x2d
 800cb4a:	d007      	beq.n	800cb5c <mg_json_get+0x2ec>
 800cb4c:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800cb50:	2b2f      	cmp	r3, #47	@ 0x2f
 800cb52:	d916      	bls.n	800cb82 <mg_json_get+0x312>
 800cb54:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800cb58:	2b39      	cmp	r3, #57	@ 0x39
 800cb5a:	d812      	bhi.n	800cb82 <mg_json_get+0x312>
          int numlen = 0;
 800cb5c:	2300      	movs	r3, #0
 800cb5e:	613b      	str	r3, [r7, #16]
          mg_atod(&s[i], len - i, &numlen);
 800cb60:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800cb62:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800cb64:	18d0      	adds	r0, r2, r3
 800cb66:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800cb68:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800cb6a:	1ad3      	subs	r3, r2, r3
 800cb6c:	f107 0210 	add.w	r2, r7, #16
 800cb70:	4619      	mov	r1, r3
 800cb72:	f7ff fd2d 	bl	800c5d0 <mg_atod>
          i += numlen - 1;
 800cb76:	693b      	ldr	r3, [r7, #16]
 800cb78:	3b01      	subs	r3, #1
 800cb7a:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800cb7c:	4413      	add	r3, r2
 800cb7e:	663b      	str	r3, [r7, #96]	@ 0x60
        } else if (c == '-' || ((c >= '0' && c <= '9'))) {
 800cb80:	e01d      	b.n	800cbbe <mg_json_get+0x34e>
        } else if (c == '"') {
 800cb82:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800cb86:	2b22      	cmp	r3, #34	@ 0x22
 800cb88:	d116      	bne.n	800cbb8 <mg_json_get+0x348>
          int n = mg_pass_string(&s[i + 1], len - i - 1);
 800cb8a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800cb8c:	3301      	adds	r3, #1
 800cb8e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800cb90:	18d0      	adds	r0, r2, r3
 800cb92:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800cb94:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800cb96:	1ad3      	subs	r3, r2, r3
 800cb98:	3b01      	subs	r3, #1
 800cb9a:	4619      	mov	r1, r3
 800cb9c:	f7ff fcd4 	bl	800c548 <mg_pass_string>
 800cba0:	6378      	str	r0, [r7, #52]	@ 0x34
          if (n < 0) return n;
 800cba2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cba4:	2b00      	cmp	r3, #0
 800cba6:	da01      	bge.n	800cbac <mg_json_get+0x33c>
 800cba8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cbaa:	e197      	b.n	800cedc <mg_json_get+0x66c>
          i += n + 1;
 800cbac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cbae:	3301      	adds	r3, #1
 800cbb0:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800cbb2:	4413      	add	r3, r2
 800cbb4:	663b      	str	r3, [r7, #96]	@ 0x60
 800cbb6:	e002      	b.n	800cbbe <mg_json_get+0x34e>
        } else {
          return MG_JSON_INVALID;
 800cbb8:	f06f 0301 	mvn.w	r3, #1
 800cbbc:	e18e      	b.n	800cedc <mg_json_get+0x66c>
        }
        MG_CHECKRET('V');
 800cbbe:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800cbc0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800cbc2:	429a      	cmp	r2, r3
 800cbc4:	d114      	bne.n	800cbf0 <mg_json_get+0x380>
 800cbc6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800cbc8:	687a      	ldr	r2, [r7, #4]
 800cbca:	4413      	add	r3, r2
 800cbcc:	781b      	ldrb	r3, [r3, #0]
 800cbce:	2b00      	cmp	r3, #0
 800cbd0:	d10e      	bne.n	800cbf0 <mg_json_get+0x380>
 800cbd2:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800cbd4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800cbd6:	429a      	cmp	r2, r3
 800cbd8:	d10a      	bne.n	800cbf0 <mg_json_get+0x380>
 800cbda:	683b      	ldr	r3, [r7, #0]
 800cbdc:	2b00      	cmp	r3, #0
 800cbde:	d005      	beq.n	800cbec <mg_json_get+0x37c>
 800cbe0:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800cbe2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800cbe4:	1ad3      	subs	r3, r2, r3
 800cbe6:	1c5a      	adds	r2, r3, #1
 800cbe8:	683b      	ldr	r3, [r7, #0]
 800cbea:	601a      	str	r2, [r3, #0]
 800cbec:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800cbee:	e175      	b.n	800cedc <mg_json_get+0x66c>
        if (depth == ed && ei >= 0) ci++;
 800cbf0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800cbf2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800cbf4:	429a      	cmp	r2, r3
 800cbf6:	d105      	bne.n	800cc04 <mg_json_get+0x394>
 800cbf8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800cbfa:	2b00      	cmp	r3, #0
 800cbfc:	db02      	blt.n	800cc04 <mg_json_get+0x394>
 800cbfe:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800cc00:	3301      	adds	r3, #1
 800cc02:	64fb      	str	r3, [r7, #76]	@ 0x4c
        expecting = S_COMMA_OR_EOO;
 800cc04:	2303      	movs	r3, #3
 800cc06:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
        break;
 800cc0a:	e15d      	b.n	800cec8 <mg_json_get+0x658>

      case S_KEY:
        if (c == '"') {
 800cc0c:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800cc10:	2b22      	cmp	r3, #34	@ 0x22
 800cc12:	d170      	bne.n	800ccf6 <mg_json_get+0x486>
          int n = mg_pass_string(&s[i + 1], len - i - 1);
 800cc14:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800cc16:	3301      	adds	r3, #1
 800cc18:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800cc1a:	18d0      	adds	r0, r2, r3
 800cc1c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800cc1e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800cc20:	1ad3      	subs	r3, r2, r3
 800cc22:	3b01      	subs	r3, #1
 800cc24:	4619      	mov	r1, r3
 800cc26:	f7ff fc8f 	bl	800c548 <mg_pass_string>
 800cc2a:	63b8      	str	r0, [r7, #56]	@ 0x38
          if (n < 0) return n;
 800cc2c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cc2e:	2b00      	cmp	r3, #0
 800cc30:	da01      	bge.n	800cc36 <mg_json_get+0x3c6>
 800cc32:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cc34:	e152      	b.n	800cedc <mg_json_get+0x66c>
          if (i + 1 + n >= len) return MG_JSON_NOT_FOUND;
 800cc36:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800cc38:	1c5a      	adds	r2, r3, #1
 800cc3a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cc3c:	4413      	add	r3, r2
 800cc3e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800cc40:	429a      	cmp	r2, r3
 800cc42:	dc02      	bgt.n	800cc4a <mg_json_get+0x3da>
 800cc44:	f06f 0302 	mvn.w	r3, #2
 800cc48:	e148      	b.n	800cedc <mg_json_get+0x66c>
          if (depth < ed) return MG_JSON_NOT_FOUND;
 800cc4a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800cc4c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800cc4e:	429a      	cmp	r2, r3
 800cc50:	da02      	bge.n	800cc58 <mg_json_get+0x3e8>
 800cc52:	f06f 0302 	mvn.w	r3, #2
 800cc56:	e141      	b.n	800cedc <mg_json_get+0x66c>
          if (depth == ed && path[pos - 1] != '.') return MG_JSON_NOT_FOUND;
 800cc58:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800cc5a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800cc5c:	429a      	cmp	r2, r3
 800cc5e:	d109      	bne.n	800cc74 <mg_json_get+0x404>
 800cc60:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800cc62:	3b01      	subs	r3, #1
 800cc64:	687a      	ldr	r2, [r7, #4]
 800cc66:	4413      	add	r3, r2
 800cc68:	781b      	ldrb	r3, [r3, #0]
 800cc6a:	2b2e      	cmp	r3, #46	@ 0x2e
 800cc6c:	d002      	beq.n	800cc74 <mg_json_get+0x404>
 800cc6e:	f06f 0302 	mvn.w	r3, #2
 800cc72:	e133      	b.n	800cedc <mg_json_get+0x66c>
          // printf("K %s [%.*s] [%.*s] %d %d %d %d %d\n", path, pos, path, n,
          //        &s[i + 1], n, depth, ed, ci, ei);
          //  NOTE(cpq): in the check sequence below is important.
          //  strncmp() must go first: it fails fast if the remaining length
          //  of the path is smaller than `n`.
          if (depth == ed && path[pos - 1] == '.' &&
 800cc74:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800cc76:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800cc78:	429a      	cmp	r2, r3
 800cc7a:	d133      	bne.n	800cce4 <mg_json_get+0x474>
 800cc7c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800cc7e:	3b01      	subs	r3, #1
 800cc80:	687a      	ldr	r2, [r7, #4]
 800cc82:	4413      	add	r3, r2
 800cc84:	781b      	ldrb	r3, [r3, #0]
 800cc86:	2b2e      	cmp	r3, #46	@ 0x2e
 800cc88:	d12c      	bne.n	800cce4 <mg_json_get+0x474>
              strncmp(&s[i + 1], &path[pos], (size_t) n) == 0 &&
 800cc8a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800cc8c:	3301      	adds	r3, #1
 800cc8e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800cc90:	18d0      	adds	r0, r2, r3
 800cc92:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800cc94:	687a      	ldr	r2, [r7, #4]
 800cc96:	4413      	add	r3, r2
 800cc98:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800cc9a:	4619      	mov	r1, r3
 800cc9c:	f017 fc0b 	bl	80244b6 <strncmp>
 800cca0:	4603      	mov	r3, r0
          if (depth == ed && path[pos - 1] == '.' &&
 800cca2:	2b00      	cmp	r3, #0
 800cca4:	d11e      	bne.n	800cce4 <mg_json_get+0x474>
              (path[pos + n] == '\0' || path[pos + n] == '.' ||
 800cca6:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800cca8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ccaa:	4413      	add	r3, r2
 800ccac:	461a      	mov	r2, r3
 800ccae:	687b      	ldr	r3, [r7, #4]
 800ccb0:	4413      	add	r3, r2
 800ccb2:	781b      	ldrb	r3, [r3, #0]
              strncmp(&s[i + 1], &path[pos], (size_t) n) == 0 &&
 800ccb4:	2b00      	cmp	r3, #0
 800ccb6:	d011      	beq.n	800ccdc <mg_json_get+0x46c>
              (path[pos + n] == '\0' || path[pos + n] == '.' ||
 800ccb8:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800ccba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ccbc:	4413      	add	r3, r2
 800ccbe:	461a      	mov	r2, r3
 800ccc0:	687b      	ldr	r3, [r7, #4]
 800ccc2:	4413      	add	r3, r2
 800ccc4:	781b      	ldrb	r3, [r3, #0]
 800ccc6:	2b2e      	cmp	r3, #46	@ 0x2e
 800ccc8:	d008      	beq.n	800ccdc <mg_json_get+0x46c>
               path[pos + n] == '[')) {
 800ccca:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800cccc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ccce:	4413      	add	r3, r2
 800ccd0:	461a      	mov	r2, r3
 800ccd2:	687b      	ldr	r3, [r7, #4]
 800ccd4:	4413      	add	r3, r2
 800ccd6:	781b      	ldrb	r3, [r3, #0]
              (path[pos + n] == '\0' || path[pos + n] == '.' ||
 800ccd8:	2b5b      	cmp	r3, #91	@ 0x5b
 800ccda:	d103      	bne.n	800cce4 <mg_json_get+0x474>
            pos += n;
 800ccdc:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800ccde:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cce0:	4413      	add	r3, r2
 800cce2:	653b      	str	r3, [r7, #80]	@ 0x50
          }
          i += n + 1;
 800cce4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cce6:	3301      	adds	r3, #1
 800cce8:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800ccea:	4413      	add	r3, r2
 800ccec:	663b      	str	r3, [r7, #96]	@ 0x60
          expecting = S_COLON;
 800ccee:	2302      	movs	r3, #2
 800ccf0:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
          expecting = S_COMMA_OR_EOO;
          if (depth == ed && ei >= 0) ci++;
        } else {
          return MG_JSON_INVALID;
        }
        break;
 800ccf4:	e0e7      	b.n	800cec6 <mg_json_get+0x656>
        } else if (c == '}') {  // Empty object
 800ccf6:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800ccfa:	2b7d      	cmp	r3, #125	@ 0x7d
 800ccfc:	d14a      	bne.n	800cd94 <mg_json_get+0x524>
          MG_EOO('}');
 800ccfe:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800cd00:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800cd02:	429a      	cmp	r2, r3
 800cd04:	d106      	bne.n	800cd14 <mg_json_get+0x4a4>
 800cd06:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800cd08:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800cd0a:	429a      	cmp	r2, r3
 800cd0c:	d002      	beq.n	800cd14 <mg_json_get+0x4a4>
 800cd0e:	f06f 0302 	mvn.w	r3, #2
 800cd12:	e0e3      	b.n	800cedc <mg_json_get+0x66c>
 800cd14:	f897 203f 	ldrb.w	r2, [r7, #63]	@ 0x3f
 800cd18:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800cd1a:	3b01      	subs	r3, #1
 800cd1c:	3368      	adds	r3, #104	@ 0x68
 800cd1e:	443b      	add	r3, r7
 800cd20:	f813 3c54 	ldrb.w	r3, [r3, #-84]
 800cd24:	3302      	adds	r3, #2
 800cd26:	429a      	cmp	r2, r3
 800cd28:	d008      	beq.n	800cd3c <mg_json_get+0x4cc>
 800cd2a:	f06f 0301 	mvn.w	r3, #1
 800cd2e:	e0d5      	b.n	800cedc <mg_json_get+0x66c>
 800cd30:	08025fc4 	.word	0x08025fc4
 800cd34:	08025fcc 	.word	0x08025fcc
 800cd38:	08025fd4 	.word	0x08025fd4
 800cd3c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800cd3e:	3b01      	subs	r3, #1
 800cd40:	65bb      	str	r3, [r7, #88]	@ 0x58
 800cd42:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800cd44:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800cd46:	429a      	cmp	r2, r3
 800cd48:	d114      	bne.n	800cd74 <mg_json_get+0x504>
 800cd4a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800cd4c:	687a      	ldr	r2, [r7, #4]
 800cd4e:	4413      	add	r3, r2
 800cd50:	781b      	ldrb	r3, [r3, #0]
 800cd52:	2b00      	cmp	r3, #0
 800cd54:	d10e      	bne.n	800cd74 <mg_json_get+0x504>
 800cd56:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800cd58:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800cd5a:	429a      	cmp	r2, r3
 800cd5c:	d10a      	bne.n	800cd74 <mg_json_get+0x504>
 800cd5e:	683b      	ldr	r3, [r7, #0]
 800cd60:	2b00      	cmp	r3, #0
 800cd62:	d005      	beq.n	800cd70 <mg_json_get+0x500>
 800cd64:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800cd66:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800cd68:	1ad3      	subs	r3, r2, r3
 800cd6a:	1c5a      	adds	r2, r3, #1
 800cd6c:	683b      	ldr	r3, [r7, #0]
 800cd6e:	601a      	str	r2, [r3, #0]
 800cd70:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800cd72:	e0b3      	b.n	800cedc <mg_json_get+0x66c>
          expecting = S_COMMA_OR_EOO;
 800cd74:	2303      	movs	r3, #3
 800cd76:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
          if (depth == ed && ei >= 0) ci++;
 800cd7a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800cd7c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800cd7e:	429a      	cmp	r2, r3
 800cd80:	f040 80a1 	bne.w	800cec6 <mg_json_get+0x656>
 800cd84:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800cd86:	2b00      	cmp	r3, #0
 800cd88:	f2c0 809d 	blt.w	800cec6 <mg_json_get+0x656>
 800cd8c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800cd8e:	3301      	adds	r3, #1
 800cd90:	64fb      	str	r3, [r7, #76]	@ 0x4c
        break;
 800cd92:	e098      	b.n	800cec6 <mg_json_get+0x656>
          return MG_JSON_INVALID;
 800cd94:	f06f 0301 	mvn.w	r3, #1
 800cd98:	e0a0      	b.n	800cedc <mg_json_get+0x66c>

      case S_COLON:
        if (c == ':') {
 800cd9a:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800cd9e:	2b3a      	cmp	r3, #58	@ 0x3a
 800cda0:	d103      	bne.n	800cdaa <mg_json_get+0x53a>
          expecting = S_VALUE;
 800cda2:	2300      	movs	r3, #0
 800cda4:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
        } else {
          return MG_JSON_INVALID;
        }
        break;
 800cda8:	e08e      	b.n	800cec8 <mg_json_get+0x658>
          return MG_JSON_INVALID;
 800cdaa:	f06f 0301 	mvn.w	r3, #1
 800cdae:	e095      	b.n	800cedc <mg_json_get+0x66c>

      case S_COMMA_OR_EOO:
        if (depth <= 0) {
 800cdb0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800cdb2:	2b00      	cmp	r3, #0
 800cdb4:	dc02      	bgt.n	800cdbc <mg_json_get+0x54c>
          return MG_JSON_INVALID;
 800cdb6:	f06f 0301 	mvn.w	r3, #1
 800cdba:	e08f      	b.n	800cedc <mg_json_get+0x66c>
        } else if (c == ',') {
 800cdbc:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800cdc0:	2b2c      	cmp	r3, #44	@ 0x2c
 800cdc2:	d10d      	bne.n	800cde0 <mg_json_get+0x570>
          expecting = (nesting[depth - 1] == '{') ? S_KEY : S_VALUE;
 800cdc4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800cdc6:	3b01      	subs	r3, #1
 800cdc8:	3368      	adds	r3, #104	@ 0x68
 800cdca:	443b      	add	r3, r7
 800cdcc:	f813 3c54 	ldrb.w	r3, [r3, #-84]
 800cdd0:	2b7b      	cmp	r3, #123	@ 0x7b
 800cdd2:	bf0c      	ite	eq
 800cdd4:	2301      	moveq	r3, #1
 800cdd6:	2300      	movne	r3, #0
 800cdd8:	b2db      	uxtb	r3, r3
 800cdda:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
          MG_EOO('O');
          if (depth == ed && ei >= 0) ci++;
        } else {
          return MG_JSON_INVALID;
        }
        break;
 800cdde:	e073      	b.n	800cec8 <mg_json_get+0x658>
        } else if (c == ']' || c == '}') {
 800cde0:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800cde4:	2b5d      	cmp	r3, #93	@ 0x5d
 800cde6:	d003      	beq.n	800cdf0 <mg_json_get+0x580>
 800cde8:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800cdec:	2b7d      	cmp	r3, #125	@ 0x7d
 800cdee:	d163      	bne.n	800ceb8 <mg_json_get+0x648>
          if (depth == ed && c == '}' && path[pos - 1] == '.')
 800cdf0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800cdf2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800cdf4:	429a      	cmp	r2, r3
 800cdf6:	d10d      	bne.n	800ce14 <mg_json_get+0x5a4>
 800cdf8:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800cdfc:	2b7d      	cmp	r3, #125	@ 0x7d
 800cdfe:	d109      	bne.n	800ce14 <mg_json_get+0x5a4>
 800ce00:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ce02:	3b01      	subs	r3, #1
 800ce04:	687a      	ldr	r2, [r7, #4]
 800ce06:	4413      	add	r3, r2
 800ce08:	781b      	ldrb	r3, [r3, #0]
 800ce0a:	2b2e      	cmp	r3, #46	@ 0x2e
 800ce0c:	d102      	bne.n	800ce14 <mg_json_get+0x5a4>
            return MG_JSON_NOT_FOUND;
 800ce0e:	f06f 0302 	mvn.w	r3, #2
 800ce12:	e063      	b.n	800cedc <mg_json_get+0x66c>
          if (depth == ed && c == ']' && path[pos - 1] == ',')
 800ce14:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800ce16:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ce18:	429a      	cmp	r2, r3
 800ce1a:	d10d      	bne.n	800ce38 <mg_json_get+0x5c8>
 800ce1c:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800ce20:	2b5d      	cmp	r3, #93	@ 0x5d
 800ce22:	d109      	bne.n	800ce38 <mg_json_get+0x5c8>
 800ce24:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ce26:	3b01      	subs	r3, #1
 800ce28:	687a      	ldr	r2, [r7, #4]
 800ce2a:	4413      	add	r3, r2
 800ce2c:	781b      	ldrb	r3, [r3, #0]
 800ce2e:	2b2c      	cmp	r3, #44	@ 0x2c
 800ce30:	d102      	bne.n	800ce38 <mg_json_get+0x5c8>
            return MG_JSON_NOT_FOUND;
 800ce32:	f06f 0302 	mvn.w	r3, #2
 800ce36:	e051      	b.n	800cedc <mg_json_get+0x66c>
          MG_EOO('O');
 800ce38:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800ce3a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ce3c:	429a      	cmp	r2, r3
 800ce3e:	d106      	bne.n	800ce4e <mg_json_get+0x5de>
 800ce40:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800ce42:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ce44:	429a      	cmp	r2, r3
 800ce46:	d002      	beq.n	800ce4e <mg_json_get+0x5de>
 800ce48:	f06f 0302 	mvn.w	r3, #2
 800ce4c:	e046      	b.n	800cedc <mg_json_get+0x66c>
 800ce4e:	f897 203f 	ldrb.w	r2, [r7, #63]	@ 0x3f
 800ce52:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800ce54:	3b01      	subs	r3, #1
 800ce56:	3368      	adds	r3, #104	@ 0x68
 800ce58:	443b      	add	r3, r7
 800ce5a:	f813 3c54 	ldrb.w	r3, [r3, #-84]
 800ce5e:	3302      	adds	r3, #2
 800ce60:	429a      	cmp	r2, r3
 800ce62:	d002      	beq.n	800ce6a <mg_json_get+0x5fa>
 800ce64:	f06f 0301 	mvn.w	r3, #1
 800ce68:	e038      	b.n	800cedc <mg_json_get+0x66c>
 800ce6a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800ce6c:	3b01      	subs	r3, #1
 800ce6e:	65bb      	str	r3, [r7, #88]	@ 0x58
 800ce70:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800ce72:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ce74:	429a      	cmp	r2, r3
 800ce76:	d114      	bne.n	800cea2 <mg_json_get+0x632>
 800ce78:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ce7a:	687a      	ldr	r2, [r7, #4]
 800ce7c:	4413      	add	r3, r2
 800ce7e:	781b      	ldrb	r3, [r3, #0]
 800ce80:	2b00      	cmp	r3, #0
 800ce82:	d10e      	bne.n	800cea2 <mg_json_get+0x632>
 800ce84:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800ce86:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ce88:	429a      	cmp	r2, r3
 800ce8a:	d10a      	bne.n	800cea2 <mg_json_get+0x632>
 800ce8c:	683b      	ldr	r3, [r7, #0]
 800ce8e:	2b00      	cmp	r3, #0
 800ce90:	d005      	beq.n	800ce9e <mg_json_get+0x62e>
 800ce92:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800ce94:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800ce96:	1ad3      	subs	r3, r2, r3
 800ce98:	1c5a      	adds	r2, r3, #1
 800ce9a:	683b      	ldr	r3, [r7, #0]
 800ce9c:	601a      	str	r2, [r3, #0]
 800ce9e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800cea0:	e01c      	b.n	800cedc <mg_json_get+0x66c>
          if (depth == ed && ei >= 0) ci++;
 800cea2:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800cea4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800cea6:	429a      	cmp	r2, r3
 800cea8:	d109      	bne.n	800cebe <mg_json_get+0x64e>
 800ceaa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ceac:	2b00      	cmp	r3, #0
 800ceae:	db06      	blt.n	800cebe <mg_json_get+0x64e>
 800ceb0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ceb2:	3301      	adds	r3, #1
 800ceb4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800ceb6:	e002      	b.n	800cebe <mg_json_get+0x64e>
          return MG_JSON_INVALID;
 800ceb8:	f06f 0301 	mvn.w	r3, #1
 800cebc:	e00e      	b.n	800cedc <mg_json_get+0x66c>
          if (depth == ed && ei >= 0) ci++;
 800cebe:	bf00      	nop
        break;
 800cec0:	e002      	b.n	800cec8 <mg_json_get+0x658>
    if (c == ' ' || c == '\t' || c == '\n' || c == '\r') continue;
 800cec2:	bf00      	nop
 800cec4:	e000      	b.n	800cec8 <mg_json_get+0x658>
        break;
 800cec6:	bf00      	nop
  for (i = 0; i < len; i++) {
 800cec8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800ceca:	3301      	adds	r3, #1
 800cecc:	663b      	str	r3, [r7, #96]	@ 0x60
 800cece:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800ced0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ced2:	429a      	cmp	r2, r3
 800ced4:	f6ff acfc 	blt.w	800c8d0 <mg_json_get+0x60>
    }
  }
  return MG_JSON_NOT_FOUND;
 800ced8:	f06f 0302 	mvn.w	r3, #2
}
 800cedc:	4618      	mov	r0, r3
 800cede:	376c      	adds	r7, #108	@ 0x6c
 800cee0:	46bd      	mov	sp, r7
 800cee2:	bd90      	pop	{r4, r7, pc}

0800cee4 <mg_json_get_tok>:

struct mg_str mg_json_get_tok(struct mg_str json, const char *path) {
 800cee4:	b580      	push	{r7, lr}
 800cee6:	b086      	sub	sp, #24
 800cee8:	af00      	add	r7, sp, #0
 800ceea:	60f8      	str	r0, [r7, #12]
 800ceec:	1d38      	adds	r0, r7, #4
 800ceee:	e880 0006 	stmia.w	r0, {r1, r2}
 800cef2:	603b      	str	r3, [r7, #0]
  int len = 0, ofs = mg_json_get(json, path, &len);
 800cef4:	2300      	movs	r3, #0
 800cef6:	613b      	str	r3, [r7, #16]
 800cef8:	f107 0310 	add.w	r3, r7, #16
 800cefc:	683a      	ldr	r2, [r7, #0]
 800cefe:	1d39      	adds	r1, r7, #4
 800cf00:	c903      	ldmia	r1, {r0, r1}
 800cf02:	f7ff fcb5 	bl	800c870 <mg_json_get>
 800cf06:	6178      	str	r0, [r7, #20]
  return mg_str_n(ofs < 0 ? NULL : json.buf + ofs,
 800cf08:	697b      	ldr	r3, [r7, #20]
 800cf0a:	2b00      	cmp	r3, #0
 800cf0c:	db03      	blt.n	800cf16 <mg_json_get_tok+0x32>
 800cf0e:	687a      	ldr	r2, [r7, #4]
 800cf10:	697b      	ldr	r3, [r7, #20]
 800cf12:	4413      	add	r3, r2
 800cf14:	e000      	b.n	800cf18 <mg_json_get_tok+0x34>
 800cf16:	2300      	movs	r3, #0
                  (size_t) (len < 0 ? 0 : len));
 800cf18:	693a      	ldr	r2, [r7, #16]
 800cf1a:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
  return mg_str_n(ofs < 0 ? NULL : json.buf + ofs,
 800cf1e:	68f8      	ldr	r0, [r7, #12]
 800cf20:	4619      	mov	r1, r3
 800cf22:	f008 fd52 	bl	80159ca <mg_str_n>
}
 800cf26:	68f8      	ldr	r0, [r7, #12]
 800cf28:	3718      	adds	r7, #24
 800cf2a:	46bd      	mov	sp, r7
 800cf2c:	bd80      	pop	{r7, pc}

0800cf2e <mg_json_get_num>:

bool mg_json_get_num(struct mg_str json, const char *path, double *v) {
 800cf2e:	b590      	push	{r4, r7, lr}
 800cf30:	b089      	sub	sp, #36	@ 0x24
 800cf32:	af00      	add	r7, sp, #0
 800cf34:	f107 0408 	add.w	r4, r7, #8
 800cf38:	e884 0003 	stmia.w	r4, {r0, r1}
 800cf3c:	607a      	str	r2, [r7, #4]
 800cf3e:	603b      	str	r3, [r7, #0]
  int n, toklen, found = 0;
 800cf40:	2300      	movs	r3, #0
 800cf42:	61fb      	str	r3, [r7, #28]
  if ((n = mg_json_get(json, path, &toklen)) >= 0 &&
 800cf44:	f107 0314 	add.w	r3, r7, #20
 800cf48:	687a      	ldr	r2, [r7, #4]
 800cf4a:	f107 0108 	add.w	r1, r7, #8
 800cf4e:	c903      	ldmia	r1, {r0, r1}
 800cf50:	f7ff fc8e 	bl	800c870 <mg_json_get>
 800cf54:	61b8      	str	r0, [r7, #24]
 800cf56:	69bb      	ldr	r3, [r7, #24]
 800cf58:	2b00      	cmp	r3, #0
 800cf5a:	db23      	blt.n	800cfa4 <mg_json_get_num+0x76>
      (json.buf[n] == '-' || (json.buf[n] >= '0' && json.buf[n] <= '9'))) {
 800cf5c:	68ba      	ldr	r2, [r7, #8]
 800cf5e:	69bb      	ldr	r3, [r7, #24]
 800cf60:	4413      	add	r3, r2
 800cf62:	781b      	ldrb	r3, [r3, #0]
  if ((n = mg_json_get(json, path, &toklen)) >= 0 &&
 800cf64:	2b2d      	cmp	r3, #45	@ 0x2d
 800cf66:	d00b      	beq.n	800cf80 <mg_json_get_num+0x52>
      (json.buf[n] == '-' || (json.buf[n] >= '0' && json.buf[n] <= '9'))) {
 800cf68:	68ba      	ldr	r2, [r7, #8]
 800cf6a:	69bb      	ldr	r3, [r7, #24]
 800cf6c:	4413      	add	r3, r2
 800cf6e:	781b      	ldrb	r3, [r3, #0]
 800cf70:	2b2f      	cmp	r3, #47	@ 0x2f
 800cf72:	d917      	bls.n	800cfa4 <mg_json_get_num+0x76>
 800cf74:	68ba      	ldr	r2, [r7, #8]
 800cf76:	69bb      	ldr	r3, [r7, #24]
 800cf78:	4413      	add	r3, r2
 800cf7a:	781b      	ldrb	r3, [r3, #0]
 800cf7c:	2b39      	cmp	r3, #57	@ 0x39
 800cf7e:	d811      	bhi.n	800cfa4 <mg_json_get_num+0x76>
    if (v != NULL) *v = mg_atod(json.buf + n, toklen, NULL);
 800cf80:	683b      	ldr	r3, [r7, #0]
 800cf82:	2b00      	cmp	r3, #0
 800cf84:	d00c      	beq.n	800cfa0 <mg_json_get_num+0x72>
 800cf86:	68ba      	ldr	r2, [r7, #8]
 800cf88:	69bb      	ldr	r3, [r7, #24]
 800cf8a:	4413      	add	r3, r2
 800cf8c:	6979      	ldr	r1, [r7, #20]
 800cf8e:	2200      	movs	r2, #0
 800cf90:	4618      	mov	r0, r3
 800cf92:	f7ff fb1d 	bl	800c5d0 <mg_atod>
 800cf96:	eeb0 7b40 	vmov.f64	d7, d0
 800cf9a:	683b      	ldr	r3, [r7, #0]
 800cf9c:	ed83 7b00 	vstr	d7, [r3]
    found = 1;
 800cfa0:	2301      	movs	r3, #1
 800cfa2:	61fb      	str	r3, [r7, #28]
  }
  return found;
 800cfa4:	69fb      	ldr	r3, [r7, #28]
 800cfa6:	2b00      	cmp	r3, #0
 800cfa8:	bf14      	ite	ne
 800cfaa:	2301      	movne	r3, #1
 800cfac:	2300      	moveq	r3, #0
 800cfae:	b2db      	uxtb	r3, r3
}
 800cfb0:	4618      	mov	r0, r3
 800cfb2:	3724      	adds	r7, #36	@ 0x24
 800cfb4:	46bd      	mov	sp, r7
 800cfb6:	bd90      	pop	{r4, r7, pc}

0800cfb8 <mg_json_get_bool>:

bool mg_json_get_bool(struct mg_str json, const char *path, bool *v) {
 800cfb8:	b590      	push	{r4, r7, lr}
 800cfba:	b087      	sub	sp, #28
 800cfbc:	af00      	add	r7, sp, #0
 800cfbe:	f107 0408 	add.w	r4, r7, #8
 800cfc2:	e884 0003 	stmia.w	r4, {r0, r1}
 800cfc6:	607a      	str	r2, [r7, #4]
 800cfc8:	603b      	str	r3, [r7, #0]
  int found = 0, off = mg_json_get(json, path, NULL);
 800cfca:	2300      	movs	r3, #0
 800cfcc:	617b      	str	r3, [r7, #20]
 800cfce:	2300      	movs	r3, #0
 800cfd0:	687a      	ldr	r2, [r7, #4]
 800cfd2:	f107 0108 	add.w	r1, r7, #8
 800cfd6:	c903      	ldmia	r1, {r0, r1}
 800cfd8:	f7ff fc4a 	bl	800c870 <mg_json_get>
 800cfdc:	6138      	str	r0, [r7, #16]
  if (off >= 0 && (json.buf[off] == 't' || json.buf[off] == 'f')) {
 800cfde:	693b      	ldr	r3, [r7, #16]
 800cfe0:	2b00      	cmp	r3, #0
 800cfe2:	db1b      	blt.n	800d01c <mg_json_get_bool+0x64>
 800cfe4:	68ba      	ldr	r2, [r7, #8]
 800cfe6:	693b      	ldr	r3, [r7, #16]
 800cfe8:	4413      	add	r3, r2
 800cfea:	781b      	ldrb	r3, [r3, #0]
 800cfec:	2b74      	cmp	r3, #116	@ 0x74
 800cfee:	d005      	beq.n	800cffc <mg_json_get_bool+0x44>
 800cff0:	68ba      	ldr	r2, [r7, #8]
 800cff2:	693b      	ldr	r3, [r7, #16]
 800cff4:	4413      	add	r3, r2
 800cff6:	781b      	ldrb	r3, [r3, #0]
 800cff8:	2b66      	cmp	r3, #102	@ 0x66
 800cffa:	d10f      	bne.n	800d01c <mg_json_get_bool+0x64>
    if (v != NULL) *v = json.buf[off] == 't';
 800cffc:	683b      	ldr	r3, [r7, #0]
 800cffe:	2b00      	cmp	r3, #0
 800d000:	d00a      	beq.n	800d018 <mg_json_get_bool+0x60>
 800d002:	68ba      	ldr	r2, [r7, #8]
 800d004:	693b      	ldr	r3, [r7, #16]
 800d006:	4413      	add	r3, r2
 800d008:	781b      	ldrb	r3, [r3, #0]
 800d00a:	2b74      	cmp	r3, #116	@ 0x74
 800d00c:	bf0c      	ite	eq
 800d00e:	2301      	moveq	r3, #1
 800d010:	2300      	movne	r3, #0
 800d012:	b2da      	uxtb	r2, r3
 800d014:	683b      	ldr	r3, [r7, #0]
 800d016:	701a      	strb	r2, [r3, #0]
    found = 1;
 800d018:	2301      	movs	r3, #1
 800d01a:	617b      	str	r3, [r7, #20]
  }
  return found;
 800d01c:	697b      	ldr	r3, [r7, #20]
 800d01e:	2b00      	cmp	r3, #0
 800d020:	bf14      	ite	ne
 800d022:	2301      	movne	r3, #1
 800d024:	2300      	moveq	r3, #0
 800d026:	b2db      	uxtb	r3, r3
}
 800d028:	4618      	mov	r0, r3
 800d02a:	371c      	adds	r7, #28
 800d02c:	46bd      	mov	sp, r7
 800d02e:	bd90      	pop	{r4, r7, pc}

0800d030 <mg_json_unescape>:

bool mg_json_unescape(struct mg_str s, char *to, size_t n) {
 800d030:	b590      	push	{r4, r7, lr}
 800d032:	b08d      	sub	sp, #52	@ 0x34
 800d034:	af02      	add	r7, sp, #8
 800d036:	f107 0408 	add.w	r4, r7, #8
 800d03a:	e884 0003 	stmia.w	r4, {r0, r1}
 800d03e:	607a      	str	r2, [r7, #4]
 800d040:	603b      	str	r3, [r7, #0]
  size_t i, j;
  for (i = 0, j = 0; i < s.len && j < n; i++, j++) {
 800d042:	2300      	movs	r3, #0
 800d044:	627b      	str	r3, [r7, #36]	@ 0x24
 800d046:	2300      	movs	r3, #0
 800d048:	623b      	str	r3, [r7, #32]
 800d04a:	e064      	b.n	800d116 <mg_json_unescape+0xe6>
    if (s.buf[i] == '\\' && i + 5 < s.len && s.buf[i + 1] == 'u') {
 800d04c:	68ba      	ldr	r2, [r7, #8]
 800d04e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d050:	4413      	add	r3, r2
 800d052:	781b      	ldrb	r3, [r3, #0]
 800d054:	2b5c      	cmp	r3, #92	@ 0x5c
 800d056:	d12c      	bne.n	800d0b2 <mg_json_unescape+0x82>
 800d058:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d05a:	1d5a      	adds	r2, r3, #5
 800d05c:	68fb      	ldr	r3, [r7, #12]
 800d05e:	429a      	cmp	r2, r3
 800d060:	d227      	bcs.n	800d0b2 <mg_json_unescape+0x82>
 800d062:	68ba      	ldr	r2, [r7, #8]
 800d064:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d066:	3301      	adds	r3, #1
 800d068:	4413      	add	r3, r2
 800d06a:	781b      	ldrb	r3, [r3, #0]
 800d06c:	2b75      	cmp	r3, #117	@ 0x75
 800d06e:	d120      	bne.n	800d0b2 <mg_json_unescape+0x82>
      //  \uXXXX escape. We process simple one-byte chars \u00xx within ASCII
      //  range. More complex chars would require dragging in a UTF8 library,
      //  which is too much for us
      if (mg_str_to_num(mg_str_n(s.buf + i + 2, 4), 16, &to[j],
 800d070:	68ba      	ldr	r2, [r7, #8]
 800d072:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d074:	3302      	adds	r3, #2
 800d076:	18d1      	adds	r1, r2, r3
 800d078:	f107 0314 	add.w	r3, r7, #20
 800d07c:	2204      	movs	r2, #4
 800d07e:	4618      	mov	r0, r3
 800d080:	f008 fca3 	bl	80159ca <mg_str_n>
 800d084:	687a      	ldr	r2, [r7, #4]
 800d086:	6a3b      	ldr	r3, [r7, #32]
 800d088:	4413      	add	r3, r2
 800d08a:	2201      	movs	r2, #1
 800d08c:	9200      	str	r2, [sp, #0]
 800d08e:	2210      	movs	r2, #16
 800d090:	f107 0114 	add.w	r1, r7, #20
 800d094:	c903      	ldmia	r1, {r0, r1}
 800d096:	f008 fed5 	bl	8015e44 <mg_str_to_num>
 800d09a:	4603      	mov	r3, r0
                        sizeof(uint8_t)) == false)
 800d09c:	f083 0301 	eor.w	r3, r3, #1
 800d0a0:	b2db      	uxtb	r3, r3
      if (mg_str_to_num(mg_str_n(s.buf + i + 2, 4), 16, &to[j],
 800d0a2:	2b00      	cmp	r3, #0
 800d0a4:	d001      	beq.n	800d0aa <mg_json_unescape+0x7a>
        return false;
 800d0a6:	2300      	movs	r3, #0
 800d0a8:	e04c      	b.n	800d144 <mg_json_unescape+0x114>
      i += 5;
 800d0aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d0ac:	3305      	adds	r3, #5
 800d0ae:	627b      	str	r3, [r7, #36]	@ 0x24
 800d0b0:	e02b      	b.n	800d10a <mg_json_unescape+0xda>
    } else if (s.buf[i] == '\\' && i + 1 < s.len) {
 800d0b2:	68ba      	ldr	r2, [r7, #8]
 800d0b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d0b6:	4413      	add	r3, r2
 800d0b8:	781b      	ldrb	r3, [r3, #0]
 800d0ba:	2b5c      	cmp	r3, #92	@ 0x5c
 800d0bc:	d11d      	bne.n	800d0fa <mg_json_unescape+0xca>
 800d0be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d0c0:	1c5a      	adds	r2, r3, #1
 800d0c2:	68fb      	ldr	r3, [r7, #12]
 800d0c4:	429a      	cmp	r2, r3
 800d0c6:	d218      	bcs.n	800d0fa <mg_json_unescape+0xca>
      char c = json_esc(s.buf[i + 1], 0);
 800d0c8:	68ba      	ldr	r2, [r7, #8]
 800d0ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d0cc:	3301      	adds	r3, #1
 800d0ce:	4413      	add	r3, r2
 800d0d0:	781b      	ldrb	r3, [r3, #0]
 800d0d2:	2100      	movs	r1, #0
 800d0d4:	4618      	mov	r0, r3
 800d0d6:	f7ff fa07 	bl	800c4e8 <json_esc>
 800d0da:	4603      	mov	r3, r0
 800d0dc:	77fb      	strb	r3, [r7, #31]
      if (c == 0) return false;
 800d0de:	7ffb      	ldrb	r3, [r7, #31]
 800d0e0:	2b00      	cmp	r3, #0
 800d0e2:	d101      	bne.n	800d0e8 <mg_json_unescape+0xb8>
 800d0e4:	2300      	movs	r3, #0
 800d0e6:	e02d      	b.n	800d144 <mg_json_unescape+0x114>
      to[j] = c;
 800d0e8:	687a      	ldr	r2, [r7, #4]
 800d0ea:	6a3b      	ldr	r3, [r7, #32]
 800d0ec:	4413      	add	r3, r2
 800d0ee:	7ffa      	ldrb	r2, [r7, #31]
 800d0f0:	701a      	strb	r2, [r3, #0]
      i++;
 800d0f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d0f4:	3301      	adds	r3, #1
 800d0f6:	627b      	str	r3, [r7, #36]	@ 0x24
    } else if (s.buf[i] == '\\' && i + 1 < s.len) {
 800d0f8:	e007      	b.n	800d10a <mg_json_unescape+0xda>
    } else {
      to[j] = s.buf[i];
 800d0fa:	68ba      	ldr	r2, [r7, #8]
 800d0fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d0fe:	441a      	add	r2, r3
 800d100:	6879      	ldr	r1, [r7, #4]
 800d102:	6a3b      	ldr	r3, [r7, #32]
 800d104:	440b      	add	r3, r1
 800d106:	7812      	ldrb	r2, [r2, #0]
 800d108:	701a      	strb	r2, [r3, #0]
  for (i = 0, j = 0; i < s.len && j < n; i++, j++) {
 800d10a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d10c:	3301      	adds	r3, #1
 800d10e:	627b      	str	r3, [r7, #36]	@ 0x24
 800d110:	6a3b      	ldr	r3, [r7, #32]
 800d112:	3301      	adds	r3, #1
 800d114:	623b      	str	r3, [r7, #32]
 800d116:	68fb      	ldr	r3, [r7, #12]
 800d118:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d11a:	429a      	cmp	r2, r3
 800d11c:	d203      	bcs.n	800d126 <mg_json_unescape+0xf6>
 800d11e:	6a3a      	ldr	r2, [r7, #32]
 800d120:	683b      	ldr	r3, [r7, #0]
 800d122:	429a      	cmp	r2, r3
 800d124:	d392      	bcc.n	800d04c <mg_json_unescape+0x1c>
    }
  }
  if (j >= n) return false;
 800d126:	6a3a      	ldr	r2, [r7, #32]
 800d128:	683b      	ldr	r3, [r7, #0]
 800d12a:	429a      	cmp	r2, r3
 800d12c:	d301      	bcc.n	800d132 <mg_json_unescape+0x102>
 800d12e:	2300      	movs	r3, #0
 800d130:	e008      	b.n	800d144 <mg_json_unescape+0x114>
  if (n > 0) to[j] = '\0';
 800d132:	683b      	ldr	r3, [r7, #0]
 800d134:	2b00      	cmp	r3, #0
 800d136:	d004      	beq.n	800d142 <mg_json_unescape+0x112>
 800d138:	687a      	ldr	r2, [r7, #4]
 800d13a:	6a3b      	ldr	r3, [r7, #32]
 800d13c:	4413      	add	r3, r2
 800d13e:	2200      	movs	r2, #0
 800d140:	701a      	strb	r2, [r3, #0]
  return true;
 800d142:	2301      	movs	r3, #1
}
 800d144:	4618      	mov	r0, r3
 800d146:	372c      	adds	r7, #44	@ 0x2c
 800d148:	46bd      	mov	sp, r7
 800d14a:	bd90      	pop	{r4, r7, pc}

0800d14c <logc>:
void mg_log_set_fn(mg_pfn_t fn, void *param) {
  s_log_func = fn;
  s_log_func_param = param;
}

static void logc(unsigned char c) {
 800d14c:	b580      	push	{r7, lr}
 800d14e:	b082      	sub	sp, #8
 800d150:	af00      	add	r7, sp, #0
 800d152:	4603      	mov	r3, r0
 800d154:	71fb      	strb	r3, [r7, #7]
  s_log_func((char) c, s_log_func_param);
 800d156:	4b05      	ldr	r3, [pc, #20]	@ (800d16c <logc+0x20>)
 800d158:	681b      	ldr	r3, [r3, #0]
 800d15a:	4a05      	ldr	r2, [pc, #20]	@ (800d170 <logc+0x24>)
 800d15c:	6811      	ldr	r1, [r2, #0]
 800d15e:	79fa      	ldrb	r2, [r7, #7]
 800d160:	4610      	mov	r0, r2
 800d162:	4798      	blx	r3
}
 800d164:	bf00      	nop
 800d166:	3708      	adds	r7, #8
 800d168:	46bd      	mov	sp, r7
 800d16a:	bd80      	pop	{r7, pc}
 800d16c:	2000025c 	.word	0x2000025c
 800d170:	20011a94 	.word	0x20011a94

0800d174 <logs>:

static void logs(const char *buf, size_t len) {
 800d174:	b580      	push	{r7, lr}
 800d176:	b084      	sub	sp, #16
 800d178:	af00      	add	r7, sp, #0
 800d17a:	6078      	str	r0, [r7, #4]
 800d17c:	6039      	str	r1, [r7, #0]
  size_t i;
  for (i = 0; i < len; i++) logc(((unsigned char *) buf)[i]);
 800d17e:	2300      	movs	r3, #0
 800d180:	60fb      	str	r3, [r7, #12]
 800d182:	e009      	b.n	800d198 <logs+0x24>
 800d184:	687a      	ldr	r2, [r7, #4]
 800d186:	68fb      	ldr	r3, [r7, #12]
 800d188:	4413      	add	r3, r2
 800d18a:	781b      	ldrb	r3, [r3, #0]
 800d18c:	4618      	mov	r0, r3
 800d18e:	f7ff ffdd 	bl	800d14c <logc>
 800d192:	68fb      	ldr	r3, [r7, #12]
 800d194:	3301      	adds	r3, #1
 800d196:	60fb      	str	r3, [r7, #12]
 800d198:	68fa      	ldr	r2, [r7, #12]
 800d19a:	683b      	ldr	r3, [r7, #0]
 800d19c:	429a      	cmp	r2, r3
 800d19e:	d3f1      	bcc.n	800d184 <logs+0x10>
}
 800d1a0:	bf00      	nop
 800d1a2:	bf00      	nop
 800d1a4:	3710      	adds	r7, #16
 800d1a6:	46bd      	mov	sp, r7
 800d1a8:	bd80      	pop	{r7, pc}
	...

0800d1ac <mg_log_prefix>:

#if MG_ENABLE_CUSTOM_LOG
// Let user define their own mg_log_prefix() and mg_log()
#else
void mg_log_prefix(int level, const char *file, int line, const char *fname) {
 800d1ac:	b590      	push	{r4, r7, lr}
 800d1ae:	b099      	sub	sp, #100	@ 0x64
 800d1b0:	af06      	add	r7, sp, #24
 800d1b2:	60f8      	str	r0, [r7, #12]
 800d1b4:	60b9      	str	r1, [r7, #8]
 800d1b6:	607a      	str	r2, [r7, #4]
 800d1b8:	603b      	str	r3, [r7, #0]
  const char *p = strrchr(file, '/');
 800d1ba:	212f      	movs	r1, #47	@ 0x2f
 800d1bc:	68b8      	ldr	r0, [r7, #8]
 800d1be:	f017 f99f 	bl	8024500 <strrchr>
 800d1c2:	6478      	str	r0, [r7, #68]	@ 0x44
  char buf[41];
  size_t n;
  if (p == NULL) p = strrchr(file, '\\');
 800d1c4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d1c6:	2b00      	cmp	r3, #0
 800d1c8:	d104      	bne.n	800d1d4 <mg_log_prefix+0x28>
 800d1ca:	215c      	movs	r1, #92	@ 0x5c
 800d1cc:	68b8      	ldr	r0, [r7, #8]
 800d1ce:	f017 f997 	bl	8024500 <strrchr>
 800d1d2:	6478      	str	r0, [r7, #68]	@ 0x44
  n = mg_snprintf(buf, sizeof(buf), "%-6llx %d %s:%d:%s", mg_millis(), level,
 800d1d4:	f013 ff98 	bl	8021108 <mg_millis>
 800d1d8:	4602      	mov	r2, r0
 800d1da:	460b      	mov	r3, r1
 800d1dc:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800d1de:	2900      	cmp	r1, #0
 800d1e0:	d002      	beq.n	800d1e8 <mg_log_prefix+0x3c>
 800d1e2:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800d1e4:	3101      	adds	r1, #1
 800d1e6:	e000      	b.n	800d1ea <mg_log_prefix+0x3e>
 800d1e8:	68b9      	ldr	r1, [r7, #8]
 800d1ea:	f107 0414 	add.w	r4, r7, #20
 800d1ee:	6838      	ldr	r0, [r7, #0]
 800d1f0:	9005      	str	r0, [sp, #20]
 800d1f2:	6878      	ldr	r0, [r7, #4]
 800d1f4:	9004      	str	r0, [sp, #16]
 800d1f6:	9103      	str	r1, [sp, #12]
 800d1f8:	68f9      	ldr	r1, [r7, #12]
 800d1fa:	9102      	str	r1, [sp, #8]
 800d1fc:	e9cd 2300 	strd	r2, r3, [sp]
 800d200:	4a11      	ldr	r2, [pc, #68]	@ (800d248 <mg_log_prefix+0x9c>)
 800d202:	2129      	movs	r1, #41	@ 0x29
 800d204:	4620      	mov	r0, r4
 800d206:	f004 fffb 	bl	8012200 <mg_snprintf>
 800d20a:	6438      	str	r0, [r7, #64]	@ 0x40
                  p == NULL ? file : p + 1, line, fname);
  if (n > sizeof(buf) - 2) n = sizeof(buf) - 2;
 800d20c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d20e:	2b27      	cmp	r3, #39	@ 0x27
 800d210:	d90a      	bls.n	800d228 <mg_log_prefix+0x7c>
 800d212:	2327      	movs	r3, #39	@ 0x27
 800d214:	643b      	str	r3, [r7, #64]	@ 0x40
  while (n < sizeof(buf)) buf[n++] = ' ';
 800d216:	e007      	b.n	800d228 <mg_log_prefix+0x7c>
 800d218:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d21a:	1c5a      	adds	r2, r3, #1
 800d21c:	643a      	str	r2, [r7, #64]	@ 0x40
 800d21e:	3348      	adds	r3, #72	@ 0x48
 800d220:	443b      	add	r3, r7
 800d222:	2220      	movs	r2, #32
 800d224:	f803 2c34 	strb.w	r2, [r3, #-52]
 800d228:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d22a:	2b28      	cmp	r3, #40	@ 0x28
 800d22c:	d9f4      	bls.n	800d218 <mg_log_prefix+0x6c>
  logs(buf, n - 1);
 800d22e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d230:	1e5a      	subs	r2, r3, #1
 800d232:	f107 0314 	add.w	r3, r7, #20
 800d236:	4611      	mov	r1, r2
 800d238:	4618      	mov	r0, r3
 800d23a:	f7ff ff9b 	bl	800d174 <logs>
}
 800d23e:	bf00      	nop
 800d240:	374c      	adds	r7, #76	@ 0x4c
 800d242:	46bd      	mov	sp, r7
 800d244:	bd90      	pop	{r4, r7, pc}
 800d246:	bf00      	nop
 800d248:	08025fdc 	.word	0x08025fdc

0800d24c <mg_log>:

void mg_log(const char *fmt, ...) {
 800d24c:	b40f      	push	{r0, r1, r2, r3}
 800d24e:	b580      	push	{r7, lr}
 800d250:	b082      	sub	sp, #8
 800d252:	af00      	add	r7, sp, #0
  va_list ap;
  va_start(ap, fmt);
 800d254:	f107 0314 	add.w	r3, r7, #20
 800d258:	607b      	str	r3, [r7, #4]
  mg_vxprintf(s_log_func, s_log_func_param, fmt, &ap);
 800d25a:	4b09      	ldr	r3, [pc, #36]	@ (800d280 <mg_log+0x34>)
 800d25c:	6818      	ldr	r0, [r3, #0]
 800d25e:	4b09      	ldr	r3, [pc, #36]	@ (800d284 <mg_log+0x38>)
 800d260:	6819      	ldr	r1, [r3, #0]
 800d262:	1d3b      	adds	r3, r7, #4
 800d264:	693a      	ldr	r2, [r7, #16]
 800d266:	f7fb fad7 	bl	8008818 <mg_vxprintf>
  va_end(ap);
  logs("\r\n", 2);
 800d26a:	2102      	movs	r1, #2
 800d26c:	4806      	ldr	r0, [pc, #24]	@ (800d288 <mg_log+0x3c>)
 800d26e:	f7ff ff81 	bl	800d174 <logs>
}
 800d272:	bf00      	nop
 800d274:	3708      	adds	r7, #8
 800d276:	46bd      	mov	sp, r7
 800d278:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800d27c:	b004      	add	sp, #16
 800d27e:	4770      	bx	lr
 800d280:	2000025c 	.word	0x2000025c
 800d284:	20011a94 	.word	0x20011a94
 800d288:	08025488 	.word	0x08025488

0800d28c <nibble>:
#endif

static unsigned char nibble(unsigned c) {
 800d28c:	b480      	push	{r7}
 800d28e:	b083      	sub	sp, #12
 800d290:	af00      	add	r7, sp, #0
 800d292:	6078      	str	r0, [r7, #4]
  return (unsigned char) (c < 10 ? c + '0' : c + 'W');
 800d294:	687b      	ldr	r3, [r7, #4]
 800d296:	2b09      	cmp	r3, #9
 800d298:	d804      	bhi.n	800d2a4 <nibble+0x18>
 800d29a:	687b      	ldr	r3, [r7, #4]
 800d29c:	b2db      	uxtb	r3, r3
 800d29e:	3330      	adds	r3, #48	@ 0x30
 800d2a0:	b2db      	uxtb	r3, r3
 800d2a2:	e003      	b.n	800d2ac <nibble+0x20>
 800d2a4:	687b      	ldr	r3, [r7, #4]
 800d2a6:	b2db      	uxtb	r3, r3
 800d2a8:	3357      	adds	r3, #87	@ 0x57
 800d2aa:	b2db      	uxtb	r3, r3
}
 800d2ac:	4618      	mov	r0, r3
 800d2ae:	370c      	adds	r7, #12
 800d2b0:	46bd      	mov	sp, r7
 800d2b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2b6:	4770      	bx	lr

0800d2b8 <mg_hexdump>:

#define ISPRINT(x) ((x) >= ' ' && (x) <= '~')
void mg_hexdump(const void *buf, size_t len) {
 800d2b8:	b580      	push	{r7, lr}
 800d2ba:	b08a      	sub	sp, #40	@ 0x28
 800d2bc:	af00      	add	r7, sp, #0
 800d2be:	6078      	str	r0, [r7, #4]
 800d2c0:	6039      	str	r1, [r7, #0]
  const unsigned char *p = (const unsigned char *) buf;
 800d2c2:	687b      	ldr	r3, [r7, #4]
 800d2c4:	61fb      	str	r3, [r7, #28]
  unsigned char ascii[16], alen = 0;
 800d2c6:	2300      	movs	r3, #0
 800d2c8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  size_t i;
  for (i = 0; i < len; i++) {
 800d2cc:	2300      	movs	r3, #0
 800d2ce:	623b      	str	r3, [r7, #32]
 800d2d0:	e07b      	b.n	800d3ca <mg_hexdump+0x112>
    if ((i % 16) == 0) {
 800d2d2:	6a3b      	ldr	r3, [r7, #32]
 800d2d4:	f003 030f 	and.w	r3, r3, #15
 800d2d8:	2b00      	cmp	r3, #0
 800d2da:	d13b      	bne.n	800d354 <mg_hexdump+0x9c>
      // Print buffered ascii chars
      if (i > 0)
 800d2dc:	6a3b      	ldr	r3, [r7, #32]
 800d2de:	2b00      	cmp	r3, #0
 800d2e0:	d010      	beq.n	800d304 <mg_hexdump+0x4c>
        logs("  ", 2), logs((char *) ascii, 16), logs("\r\n", 2), alen = 0;
 800d2e2:	2102      	movs	r1, #2
 800d2e4:	484e      	ldr	r0, [pc, #312]	@ (800d420 <mg_hexdump+0x168>)
 800d2e6:	f7ff ff45 	bl	800d174 <logs>
 800d2ea:	f107 030c 	add.w	r3, r7, #12
 800d2ee:	2110      	movs	r1, #16
 800d2f0:	4618      	mov	r0, r3
 800d2f2:	f7ff ff3f 	bl	800d174 <logs>
 800d2f6:	2102      	movs	r1, #2
 800d2f8:	484a      	ldr	r0, [pc, #296]	@ (800d424 <mg_hexdump+0x16c>)
 800d2fa:	f7ff ff3b 	bl	800d174 <logs>
 800d2fe:	2300      	movs	r3, #0
 800d300:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      // Print hex address, then \t
      logc(nibble((i >> 12) & 15)), logc(nibble((i >> 8) & 15)),
 800d304:	6a3b      	ldr	r3, [r7, #32]
 800d306:	0b1b      	lsrs	r3, r3, #12
 800d308:	f003 030f 	and.w	r3, r3, #15
 800d30c:	4618      	mov	r0, r3
 800d30e:	f7ff ffbd 	bl	800d28c <nibble>
 800d312:	4603      	mov	r3, r0
 800d314:	4618      	mov	r0, r3
 800d316:	f7ff ff19 	bl	800d14c <logc>
 800d31a:	6a3b      	ldr	r3, [r7, #32]
 800d31c:	0a1b      	lsrs	r3, r3, #8
 800d31e:	f003 030f 	and.w	r3, r3, #15
 800d322:	4618      	mov	r0, r3
 800d324:	f7ff ffb2 	bl	800d28c <nibble>
 800d328:	4603      	mov	r3, r0
 800d32a:	4618      	mov	r0, r3
 800d32c:	f7ff ff0e 	bl	800d14c <logc>
          logc(nibble((i >> 4) & 15)), logc('0'), logs("   ", 3);
 800d330:	6a3b      	ldr	r3, [r7, #32]
 800d332:	091b      	lsrs	r3, r3, #4
 800d334:	f003 030f 	and.w	r3, r3, #15
 800d338:	4618      	mov	r0, r3
 800d33a:	f7ff ffa7 	bl	800d28c <nibble>
 800d33e:	4603      	mov	r3, r0
 800d340:	4618      	mov	r0, r3
 800d342:	f7ff ff03 	bl	800d14c <logc>
 800d346:	2030      	movs	r0, #48	@ 0x30
 800d348:	f7ff ff00 	bl	800d14c <logc>
 800d34c:	2103      	movs	r1, #3
 800d34e:	4836      	ldr	r0, [pc, #216]	@ (800d428 <mg_hexdump+0x170>)
 800d350:	f7ff ff10 	bl	800d174 <logs>
    }
    logc(nibble(p[i] >> 4)), logc(nibble(p[i] & 15));  // Two nibbles, e.g. c5
 800d354:	69fa      	ldr	r2, [r7, #28]
 800d356:	6a3b      	ldr	r3, [r7, #32]
 800d358:	4413      	add	r3, r2
 800d35a:	781b      	ldrb	r3, [r3, #0]
 800d35c:	091b      	lsrs	r3, r3, #4
 800d35e:	b2db      	uxtb	r3, r3
 800d360:	4618      	mov	r0, r3
 800d362:	f7ff ff93 	bl	800d28c <nibble>
 800d366:	4603      	mov	r3, r0
 800d368:	4618      	mov	r0, r3
 800d36a:	f7ff feef 	bl	800d14c <logc>
 800d36e:	69fa      	ldr	r2, [r7, #28]
 800d370:	6a3b      	ldr	r3, [r7, #32]
 800d372:	4413      	add	r3, r2
 800d374:	781b      	ldrb	r3, [r3, #0]
 800d376:	f003 030f 	and.w	r3, r3, #15
 800d37a:	4618      	mov	r0, r3
 800d37c:	f7ff ff86 	bl	800d28c <nibble>
 800d380:	4603      	mov	r3, r0
 800d382:	4618      	mov	r0, r3
 800d384:	f7ff fee2 	bl	800d14c <logc>
    logc(' ');                                         // Space after hex number
 800d388:	2020      	movs	r0, #32
 800d38a:	f7ff fedf 	bl	800d14c <logc>
    ascii[alen++] = ISPRINT(p[i]) ? p[i] : '.';        // Add to the ascii buf
 800d38e:	69fa      	ldr	r2, [r7, #28]
 800d390:	6a3b      	ldr	r3, [r7, #32]
 800d392:	4413      	add	r3, r2
 800d394:	781b      	ldrb	r3, [r3, #0]
 800d396:	2b1f      	cmp	r3, #31
 800d398:	d90a      	bls.n	800d3b0 <mg_hexdump+0xf8>
 800d39a:	69fa      	ldr	r2, [r7, #28]
 800d39c:	6a3b      	ldr	r3, [r7, #32]
 800d39e:	4413      	add	r3, r2
 800d3a0:	781b      	ldrb	r3, [r3, #0]
 800d3a2:	2b7e      	cmp	r3, #126	@ 0x7e
 800d3a4:	d804      	bhi.n	800d3b0 <mg_hexdump+0xf8>
 800d3a6:	69fa      	ldr	r2, [r7, #28]
 800d3a8:	6a3b      	ldr	r3, [r7, #32]
 800d3aa:	4413      	add	r3, r2
 800d3ac:	781a      	ldrb	r2, [r3, #0]
 800d3ae:	e000      	b.n	800d3b2 <mg_hexdump+0xfa>
 800d3b0:	222e      	movs	r2, #46	@ 0x2e
 800d3b2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800d3b6:	1c59      	adds	r1, r3, #1
 800d3b8:	f887 1027 	strb.w	r1, [r7, #39]	@ 0x27
 800d3bc:	3328      	adds	r3, #40	@ 0x28
 800d3be:	443b      	add	r3, r7
 800d3c0:	f803 2c1c 	strb.w	r2, [r3, #-28]
  for (i = 0; i < len; i++) {
 800d3c4:	6a3b      	ldr	r3, [r7, #32]
 800d3c6:	3301      	adds	r3, #1
 800d3c8:	623b      	str	r3, [r7, #32]
 800d3ca:	6a3a      	ldr	r2, [r7, #32]
 800d3cc:	683b      	ldr	r3, [r7, #0]
 800d3ce:	429a      	cmp	r2, r3
 800d3d0:	f4ff af7f 	bcc.w	800d2d2 <mg_hexdump+0x1a>
  }
  while (alen < 16) logs("   ", 3), ascii[alen++] = ' ';
 800d3d4:	e00d      	b.n	800d3f2 <mg_hexdump+0x13a>
 800d3d6:	2103      	movs	r1, #3
 800d3d8:	4813      	ldr	r0, [pc, #76]	@ (800d428 <mg_hexdump+0x170>)
 800d3da:	f7ff fecb 	bl	800d174 <logs>
 800d3de:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800d3e2:	1c5a      	adds	r2, r3, #1
 800d3e4:	f887 2027 	strb.w	r2, [r7, #39]	@ 0x27
 800d3e8:	3328      	adds	r3, #40	@ 0x28
 800d3ea:	443b      	add	r3, r7
 800d3ec:	2220      	movs	r2, #32
 800d3ee:	f803 2c1c 	strb.w	r2, [r3, #-28]
 800d3f2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800d3f6:	2b0f      	cmp	r3, #15
 800d3f8:	d9ed      	bls.n	800d3d6 <mg_hexdump+0x11e>
  logs("  ", 2), logs((char *) ascii, 16), logs("\r\n", 2);
 800d3fa:	2102      	movs	r1, #2
 800d3fc:	4808      	ldr	r0, [pc, #32]	@ (800d420 <mg_hexdump+0x168>)
 800d3fe:	f7ff feb9 	bl	800d174 <logs>
 800d402:	f107 030c 	add.w	r3, r7, #12
 800d406:	2110      	movs	r1, #16
 800d408:	4618      	mov	r0, r3
 800d40a:	f7ff feb3 	bl	800d174 <logs>
 800d40e:	2102      	movs	r1, #2
 800d410:	4804      	ldr	r0, [pc, #16]	@ (800d424 <mg_hexdump+0x16c>)
 800d412:	f7ff feaf 	bl	800d174 <logs>
}
 800d416:	bf00      	nop
 800d418:	3728      	adds	r7, #40	@ 0x28
 800d41a:	46bd      	mov	sp, r7
 800d41c:	bd80      	pop	{r7, pc}
 800d41e:	bf00      	nop
 800d420:	08025ff0 	.word	0x08025ff0
 800d424:	08025488 	.word	0x08025488
 800d428:	08025ff4 	.word	0x08025ff4

0800d42c <mg_vprintf>:





size_t mg_vprintf(struct mg_connection *c, const char *fmt, va_list *ap) {
 800d42c:	b580      	push	{r7, lr}
 800d42e:	b086      	sub	sp, #24
 800d430:	af00      	add	r7, sp, #0
 800d432:	60f8      	str	r0, [r7, #12]
 800d434:	60b9      	str	r1, [r7, #8]
 800d436:	607a      	str	r2, [r7, #4]
  size_t old = c->send.len;
 800d438:	68fb      	ldr	r3, [r7, #12]
 800d43a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d43c:	617b      	str	r3, [r7, #20]
  mg_vxprintf(mg_pfn_iobuf, &c->send, fmt, ap);
 800d43e:	68fb      	ldr	r3, [r7, #12]
 800d440:	f103 0150 	add.w	r1, r3, #80	@ 0x50
 800d444:	687b      	ldr	r3, [r7, #4]
 800d446:	68ba      	ldr	r2, [r7, #8]
 800d448:	4805      	ldr	r0, [pc, #20]	@ (800d460 <mg_vprintf+0x34>)
 800d44a:	f7fb f9e5 	bl	8008818 <mg_vxprintf>
  return c->send.len - old;
 800d44e:	68fb      	ldr	r3, [r7, #12]
 800d450:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800d452:	697b      	ldr	r3, [r7, #20]
 800d454:	1ad3      	subs	r3, r2, r3
}
 800d456:	4618      	mov	r0, r3
 800d458:	3718      	adds	r7, #24
 800d45a:	46bd      	mov	sp, r7
 800d45c:	bd80      	pop	{r7, pc}
 800d45e:	bf00      	nop
 800d460:	08012191 	.word	0x08012191

0800d464 <mg_printf>:

size_t mg_printf(struct mg_connection *c, const char *fmt, ...) {
 800d464:	b40e      	push	{r1, r2, r3}
 800d466:	b580      	push	{r7, lr}
 800d468:	b085      	sub	sp, #20
 800d46a:	af00      	add	r7, sp, #0
 800d46c:	6078      	str	r0, [r7, #4]
  size_t len = 0;
 800d46e:	2300      	movs	r3, #0
 800d470:	60fb      	str	r3, [r7, #12]
  va_list ap;
  va_start(ap, fmt);
 800d472:	f107 0320 	add.w	r3, r7, #32
 800d476:	60bb      	str	r3, [r7, #8]
  len = mg_vprintf(c, fmt, &ap);
 800d478:	f107 0308 	add.w	r3, r7, #8
 800d47c:	461a      	mov	r2, r3
 800d47e:	69f9      	ldr	r1, [r7, #28]
 800d480:	6878      	ldr	r0, [r7, #4]
 800d482:	f7ff ffd3 	bl	800d42c <mg_vprintf>
 800d486:	60f8      	str	r0, [r7, #12]
  va_end(ap);
  return len;
 800d488:	68fb      	ldr	r3, [r7, #12]
}
 800d48a:	4618      	mov	r0, r3
 800d48c:	3714      	adds	r7, #20
 800d48e:	46bd      	mov	sp, r7
 800d490:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800d494:	b003      	add	sp, #12
 800d496:	4770      	bx	lr

0800d498 <mg_atonl>:

static bool mg_atonl(struct mg_str str, struct mg_addr *addr) {
 800d498:	b580      	push	{r7, lr}
 800d49a:	b088      	sub	sp, #32
 800d49c:	af00      	add	r7, sp, #0
 800d49e:	f107 0308 	add.w	r3, r7, #8
 800d4a2:	e883 0003 	stmia.w	r3, {r0, r1}
 800d4a6:	607a      	str	r2, [r7, #4]
  uint32_t localhost = mg_htonl(0x7f000001);
 800d4a8:	4811      	ldr	r0, [pc, #68]	@ (800d4f0 <mg_atonl+0x58>)
 800d4aa:	f013 fe51 	bl	8021150 <mg_ntohl>
 800d4ae:	4603      	mov	r3, r0
 800d4b0:	617b      	str	r3, [r7, #20]
  if (mg_strcasecmp(str, mg_str("localhost")) != 0) return false;
 800d4b2:	f107 0318 	add.w	r3, r7, #24
 800d4b6:	490f      	ldr	r1, [pc, #60]	@ (800d4f4 <mg_atonl+0x5c>)
 800d4b8:	4618      	mov	r0, r3
 800d4ba:	f008 fa69 	bl	8015990 <mg_str_s>
 800d4be:	f107 0318 	add.w	r3, r7, #24
 800d4c2:	cb0c      	ldmia	r3, {r2, r3}
 800d4c4:	f107 0108 	add.w	r1, r7, #8
 800d4c8:	c903      	ldmia	r1, {r0, r1}
 800d4ca:	f008 fb23 	bl	8015b14 <mg_strcasecmp>
 800d4ce:	4603      	mov	r3, r0
 800d4d0:	2b00      	cmp	r3, #0
 800d4d2:	d001      	beq.n	800d4d8 <mg_atonl+0x40>
 800d4d4:	2300      	movs	r3, #0
 800d4d6:	e006      	b.n	800d4e6 <mg_atonl+0x4e>
  memcpy(addr->ip, &localhost, sizeof(uint32_t));
 800d4d8:	687b      	ldr	r3, [r7, #4]
 800d4da:	697a      	ldr	r2, [r7, #20]
 800d4dc:	601a      	str	r2, [r3, #0]
  addr->is_ip6 = false;
 800d4de:	687b      	ldr	r3, [r7, #4]
 800d4e0:	2200      	movs	r2, #0
 800d4e2:	74da      	strb	r2, [r3, #19]
  return true;
 800d4e4:	2301      	movs	r3, #1
}
 800d4e6:	4618      	mov	r0, r3
 800d4e8:	3720      	adds	r7, #32
 800d4ea:	46bd      	mov	sp, r7
 800d4ec:	bd80      	pop	{r7, pc}
 800d4ee:	bf00      	nop
 800d4f0:	7f000001 	.word	0x7f000001
 800d4f4:	08026098 	.word	0x08026098

0800d4f8 <mg_atone>:

static bool mg_atone(struct mg_str str, struct mg_addr *addr) {
 800d4f8:	b580      	push	{r7, lr}
 800d4fa:	b084      	sub	sp, #16
 800d4fc:	af00      	add	r7, sp, #0
 800d4fe:	f107 0308 	add.w	r3, r7, #8
 800d502:	e883 0003 	stmia.w	r3, {r0, r1}
 800d506:	607a      	str	r2, [r7, #4]
  if (str.len > 0) return false;
 800d508:	68fb      	ldr	r3, [r7, #12]
 800d50a:	2b00      	cmp	r3, #0
 800d50c:	d001      	beq.n	800d512 <mg_atone+0x1a>
 800d50e:	2300      	movs	r3, #0
 800d510:	e009      	b.n	800d526 <mg_atone+0x2e>
  memset(addr->ip, 0, sizeof(addr->ip));
 800d512:	687b      	ldr	r3, [r7, #4]
 800d514:	2210      	movs	r2, #16
 800d516:	2100      	movs	r1, #0
 800d518:	4618      	mov	r0, r3
 800d51a:	f016 ffb7 	bl	802448c <memset>
  addr->is_ip6 = false;
 800d51e:	687b      	ldr	r3, [r7, #4]
 800d520:	2200      	movs	r2, #0
 800d522:	74da      	strb	r2, [r3, #19]
  return true;
 800d524:	2301      	movs	r3, #1
}
 800d526:	4618      	mov	r0, r3
 800d528:	3710      	adds	r7, #16
 800d52a:	46bd      	mov	sp, r7
 800d52c:	bd80      	pop	{r7, pc}

0800d52e <mg_aton4>:

static bool mg_aton4(struct mg_str str, struct mg_addr *addr) {
 800d52e:	b480      	push	{r7}
 800d530:	b089      	sub	sp, #36	@ 0x24
 800d532:	af00      	add	r7, sp, #0
 800d534:	f107 0308 	add.w	r3, r7, #8
 800d538:	e883 0003 	stmia.w	r3, {r0, r1}
 800d53c:	607a      	str	r2, [r7, #4]
  uint8_t data[4] = {0, 0, 0, 0};
 800d53e:	2300      	movs	r3, #0
 800d540:	613b      	str	r3, [r7, #16]
  size_t i, num_dots = 0;
 800d542:	2300      	movs	r3, #0
 800d544:	61bb      	str	r3, [r7, #24]
  for (i = 0; i < str.len; i++) {
 800d546:	2300      	movs	r3, #0
 800d548:	61fb      	str	r3, [r7, #28]
 800d54a:	e049      	b.n	800d5e0 <mg_aton4+0xb2>
    if (str.buf[i] >= '0' && str.buf[i] <= '9') {
 800d54c:	68ba      	ldr	r2, [r7, #8]
 800d54e:	69fb      	ldr	r3, [r7, #28]
 800d550:	4413      	add	r3, r2
 800d552:	781b      	ldrb	r3, [r3, #0]
 800d554:	2b2f      	cmp	r3, #47	@ 0x2f
 800d556:	d925      	bls.n	800d5a4 <mg_aton4+0x76>
 800d558:	68ba      	ldr	r2, [r7, #8]
 800d55a:	69fb      	ldr	r3, [r7, #28]
 800d55c:	4413      	add	r3, r2
 800d55e:	781b      	ldrb	r3, [r3, #0]
 800d560:	2b39      	cmp	r3, #57	@ 0x39
 800d562:	d81f      	bhi.n	800d5a4 <mg_aton4+0x76>
      int octet = data[num_dots] * 10 + (str.buf[i] - '0');
 800d564:	f107 0210 	add.w	r2, r7, #16
 800d568:	69bb      	ldr	r3, [r7, #24]
 800d56a:	4413      	add	r3, r2
 800d56c:	781b      	ldrb	r3, [r3, #0]
 800d56e:	461a      	mov	r2, r3
 800d570:	4613      	mov	r3, r2
 800d572:	009b      	lsls	r3, r3, #2
 800d574:	4413      	add	r3, r2
 800d576:	005b      	lsls	r3, r3, #1
 800d578:	4619      	mov	r1, r3
 800d57a:	68ba      	ldr	r2, [r7, #8]
 800d57c:	69fb      	ldr	r3, [r7, #28]
 800d57e:	4413      	add	r3, r2
 800d580:	781b      	ldrb	r3, [r3, #0]
 800d582:	3b30      	subs	r3, #48	@ 0x30
 800d584:	440b      	add	r3, r1
 800d586:	617b      	str	r3, [r7, #20]
      if (octet > 255) return false;
 800d588:	697b      	ldr	r3, [r7, #20]
 800d58a:	2bff      	cmp	r3, #255	@ 0xff
 800d58c:	dd01      	ble.n	800d592 <mg_aton4+0x64>
 800d58e:	2300      	movs	r3, #0
 800d590:	e03d      	b.n	800d60e <mg_aton4+0xe0>
      data[num_dots] = (uint8_t) octet;
 800d592:	697b      	ldr	r3, [r7, #20]
 800d594:	b2d9      	uxtb	r1, r3
 800d596:	f107 0210 	add.w	r2, r7, #16
 800d59a:	69bb      	ldr	r3, [r7, #24]
 800d59c:	4413      	add	r3, r2
 800d59e:	460a      	mov	r2, r1
 800d5a0:	701a      	strb	r2, [r3, #0]
    if (str.buf[i] >= '0' && str.buf[i] <= '9') {
 800d5a2:	e01a      	b.n	800d5da <mg_aton4+0xac>
    } else if (str.buf[i] == '.') {
 800d5a4:	68ba      	ldr	r2, [r7, #8]
 800d5a6:	69fb      	ldr	r3, [r7, #28]
 800d5a8:	4413      	add	r3, r2
 800d5aa:	781b      	ldrb	r3, [r3, #0]
 800d5ac:	2b2e      	cmp	r3, #46	@ 0x2e
 800d5ae:	d112      	bne.n	800d5d6 <mg_aton4+0xa8>
      if (num_dots >= 3 || i == 0 || str.buf[i - 1] == '.') return false;
 800d5b0:	69bb      	ldr	r3, [r7, #24]
 800d5b2:	2b02      	cmp	r3, #2
 800d5b4:	d809      	bhi.n	800d5ca <mg_aton4+0x9c>
 800d5b6:	69fb      	ldr	r3, [r7, #28]
 800d5b8:	2b00      	cmp	r3, #0
 800d5ba:	d006      	beq.n	800d5ca <mg_aton4+0x9c>
 800d5bc:	68ba      	ldr	r2, [r7, #8]
 800d5be:	69fb      	ldr	r3, [r7, #28]
 800d5c0:	3b01      	subs	r3, #1
 800d5c2:	4413      	add	r3, r2
 800d5c4:	781b      	ldrb	r3, [r3, #0]
 800d5c6:	2b2e      	cmp	r3, #46	@ 0x2e
 800d5c8:	d101      	bne.n	800d5ce <mg_aton4+0xa0>
 800d5ca:	2300      	movs	r3, #0
 800d5cc:	e01f      	b.n	800d60e <mg_aton4+0xe0>
      num_dots++;
 800d5ce:	69bb      	ldr	r3, [r7, #24]
 800d5d0:	3301      	adds	r3, #1
 800d5d2:	61bb      	str	r3, [r7, #24]
 800d5d4:	e001      	b.n	800d5da <mg_aton4+0xac>
    } else {
      return false;
 800d5d6:	2300      	movs	r3, #0
 800d5d8:	e019      	b.n	800d60e <mg_aton4+0xe0>
  for (i = 0; i < str.len; i++) {
 800d5da:	69fb      	ldr	r3, [r7, #28]
 800d5dc:	3301      	adds	r3, #1
 800d5de:	61fb      	str	r3, [r7, #28]
 800d5e0:	68fb      	ldr	r3, [r7, #12]
 800d5e2:	69fa      	ldr	r2, [r7, #28]
 800d5e4:	429a      	cmp	r2, r3
 800d5e6:	d3b1      	bcc.n	800d54c <mg_aton4+0x1e>
    }
  }
  if (num_dots != 3 || str.buf[i - 1] == '.') return false;
 800d5e8:	69bb      	ldr	r3, [r7, #24]
 800d5ea:	2b03      	cmp	r3, #3
 800d5ec:	d106      	bne.n	800d5fc <mg_aton4+0xce>
 800d5ee:	68ba      	ldr	r2, [r7, #8]
 800d5f0:	69fb      	ldr	r3, [r7, #28]
 800d5f2:	3b01      	subs	r3, #1
 800d5f4:	4413      	add	r3, r2
 800d5f6:	781b      	ldrb	r3, [r3, #0]
 800d5f8:	2b2e      	cmp	r3, #46	@ 0x2e
 800d5fa:	d101      	bne.n	800d600 <mg_aton4+0xd2>
 800d5fc:	2300      	movs	r3, #0
 800d5fe:	e006      	b.n	800d60e <mg_aton4+0xe0>
  memcpy(&addr->ip, data, sizeof(data));
 800d600:	687b      	ldr	r3, [r7, #4]
 800d602:	693a      	ldr	r2, [r7, #16]
 800d604:	601a      	str	r2, [r3, #0]
  addr->is_ip6 = false;
 800d606:	687b      	ldr	r3, [r7, #4]
 800d608:	2200      	movs	r2, #0
 800d60a:	74da      	strb	r2, [r3, #19]
  return true;
 800d60c:	2301      	movs	r3, #1
}
 800d60e:	4618      	mov	r0, r3
 800d610:	3724      	adds	r7, #36	@ 0x24
 800d612:	46bd      	mov	sp, r7
 800d614:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d618:	4770      	bx	lr

0800d61a <mg_v4mapped>:

static bool mg_v4mapped(struct mg_str str, struct mg_addr *addr) {
 800d61a:	b580      	push	{r7, lr}
 800d61c:	b088      	sub	sp, #32
 800d61e:	af00      	add	r7, sp, #0
 800d620:	f107 0308 	add.w	r3, r7, #8
 800d624:	e883 0003 	stmia.w	r3, {r0, r1}
 800d628:	607a      	str	r2, [r7, #4]
  int i;
  uint32_t ipv4;
  if (str.len < 14) return false;
 800d62a:	68fb      	ldr	r3, [r7, #12]
 800d62c:	2b0d      	cmp	r3, #13
 800d62e:	d801      	bhi.n	800d634 <mg_v4mapped+0x1a>
 800d630:	2300      	movs	r3, #0
 800d632:	e056      	b.n	800d6e2 <mg_v4mapped+0xc8>
  if (str.buf[0] != ':' || str.buf[1] != ':' || str.buf[6] != ':') return false;
 800d634:	68bb      	ldr	r3, [r7, #8]
 800d636:	781b      	ldrb	r3, [r3, #0]
 800d638:	2b3a      	cmp	r3, #58	@ 0x3a
 800d63a:	d109      	bne.n	800d650 <mg_v4mapped+0x36>
 800d63c:	68bb      	ldr	r3, [r7, #8]
 800d63e:	3301      	adds	r3, #1
 800d640:	781b      	ldrb	r3, [r3, #0]
 800d642:	2b3a      	cmp	r3, #58	@ 0x3a
 800d644:	d104      	bne.n	800d650 <mg_v4mapped+0x36>
 800d646:	68bb      	ldr	r3, [r7, #8]
 800d648:	3306      	adds	r3, #6
 800d64a:	781b      	ldrb	r3, [r3, #0]
 800d64c:	2b3a      	cmp	r3, #58	@ 0x3a
 800d64e:	d001      	beq.n	800d654 <mg_v4mapped+0x3a>
 800d650:	2300      	movs	r3, #0
 800d652:	e046      	b.n	800d6e2 <mg_v4mapped+0xc8>
  for (i = 2; i < 6; i++) {
 800d654:	2302      	movs	r3, #2
 800d656:	61fb      	str	r3, [r7, #28]
 800d658:	e010      	b.n	800d67c <mg_v4mapped+0x62>
    if (str.buf[i] != 'f' && str.buf[i] != 'F') return false;
 800d65a:	68ba      	ldr	r2, [r7, #8]
 800d65c:	69fb      	ldr	r3, [r7, #28]
 800d65e:	4413      	add	r3, r2
 800d660:	781b      	ldrb	r3, [r3, #0]
 800d662:	2b66      	cmp	r3, #102	@ 0x66
 800d664:	d007      	beq.n	800d676 <mg_v4mapped+0x5c>
 800d666:	68ba      	ldr	r2, [r7, #8]
 800d668:	69fb      	ldr	r3, [r7, #28]
 800d66a:	4413      	add	r3, r2
 800d66c:	781b      	ldrb	r3, [r3, #0]
 800d66e:	2b46      	cmp	r3, #70	@ 0x46
 800d670:	d001      	beq.n	800d676 <mg_v4mapped+0x5c>
 800d672:	2300      	movs	r3, #0
 800d674:	e035      	b.n	800d6e2 <mg_v4mapped+0xc8>
  for (i = 2; i < 6; i++) {
 800d676:	69fb      	ldr	r3, [r7, #28]
 800d678:	3301      	adds	r3, #1
 800d67a:	61fb      	str	r3, [r7, #28]
 800d67c:	69fb      	ldr	r3, [r7, #28]
 800d67e:	2b05      	cmp	r3, #5
 800d680:	ddeb      	ble.n	800d65a <mg_v4mapped+0x40>
  }
  // struct mg_str s = mg_str_n(&str.buf[7], str.len - 7);
  if (!mg_aton4(mg_str_n(&str.buf[7], str.len - 7), addr)) return false;
 800d682:	68bb      	ldr	r3, [r7, #8]
 800d684:	1dd9      	adds	r1, r3, #7
 800d686:	68fb      	ldr	r3, [r7, #12]
 800d688:	1fda      	subs	r2, r3, #7
 800d68a:	f107 0314 	add.w	r3, r7, #20
 800d68e:	4618      	mov	r0, r3
 800d690:	f008 f99b 	bl	80159ca <mg_str_n>
 800d694:	687a      	ldr	r2, [r7, #4]
 800d696:	f107 0314 	add.w	r3, r7, #20
 800d69a:	e893 0003 	ldmia.w	r3, {r0, r1}
 800d69e:	f7ff ff46 	bl	800d52e <mg_aton4>
 800d6a2:	4603      	mov	r3, r0
 800d6a4:	f083 0301 	eor.w	r3, r3, #1
 800d6a8:	b2db      	uxtb	r3, r3
 800d6aa:	2b00      	cmp	r3, #0
 800d6ac:	d001      	beq.n	800d6b2 <mg_v4mapped+0x98>
 800d6ae:	2300      	movs	r3, #0
 800d6b0:	e017      	b.n	800d6e2 <mg_v4mapped+0xc8>
  memcpy(&ipv4, addr->ip, sizeof(ipv4));
 800d6b2:	687b      	ldr	r3, [r7, #4]
 800d6b4:	681b      	ldr	r3, [r3, #0]
 800d6b6:	613b      	str	r3, [r7, #16]
  memset(addr->ip, 0, sizeof(addr->ip));
 800d6b8:	687b      	ldr	r3, [r7, #4]
 800d6ba:	2210      	movs	r2, #16
 800d6bc:	2100      	movs	r1, #0
 800d6be:	4618      	mov	r0, r3
 800d6c0:	f016 fee4 	bl	802448c <memset>
  addr->ip[10] = addr->ip[11] = 255;
 800d6c4:	687b      	ldr	r3, [r7, #4]
 800d6c6:	22ff      	movs	r2, #255	@ 0xff
 800d6c8:	72da      	strb	r2, [r3, #11]
 800d6ca:	687b      	ldr	r3, [r7, #4]
 800d6cc:	7ada      	ldrb	r2, [r3, #11]
 800d6ce:	687b      	ldr	r3, [r7, #4]
 800d6d0:	729a      	strb	r2, [r3, #10]
  memcpy(&addr->ip[12], &ipv4, 4);
 800d6d2:	687b      	ldr	r3, [r7, #4]
 800d6d4:	330c      	adds	r3, #12
 800d6d6:	693a      	ldr	r2, [r7, #16]
 800d6d8:	601a      	str	r2, [r3, #0]
  addr->is_ip6 = true;
 800d6da:	687b      	ldr	r3, [r7, #4]
 800d6dc:	2201      	movs	r2, #1
 800d6de:	74da      	strb	r2, [r3, #19]
  return true;
 800d6e0:	2301      	movs	r3, #1
}
 800d6e2:	4618      	mov	r0, r3
 800d6e4:	3720      	adds	r7, #32
 800d6e6:	46bd      	mov	sp, r7
 800d6e8:	bd80      	pop	{r7, pc}

0800d6ea <mg_aton6>:

static bool mg_aton6(struct mg_str str, struct mg_addr *addr) {
 800d6ea:	b580      	push	{r7, lr}
 800d6ec:	b090      	sub	sp, #64	@ 0x40
 800d6ee:	af02      	add	r7, sp, #8
 800d6f0:	f107 0308 	add.w	r3, r7, #8
 800d6f4:	e883 0003 	stmia.w	r3, {r0, r1}
 800d6f8:	607a      	str	r2, [r7, #4]
  size_t i, j = 0, n = 0, dc = 42;
 800d6fa:	2300      	movs	r3, #0
 800d6fc:	633b      	str	r3, [r7, #48]	@ 0x30
 800d6fe:	2300      	movs	r3, #0
 800d700:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800d702:	232a      	movs	r3, #42	@ 0x2a
 800d704:	62bb      	str	r3, [r7, #40]	@ 0x28
  addr->scope_id = 0;
 800d706:	687b      	ldr	r3, [r7, #4]
 800d708:	2200      	movs	r2, #0
 800d70a:	749a      	strb	r2, [r3, #18]
  if (str.len > 2 && str.buf[0] == '[') str.buf++, str.len -= 2;
 800d70c:	68fb      	ldr	r3, [r7, #12]
 800d70e:	2b02      	cmp	r3, #2
 800d710:	d909      	bls.n	800d726 <mg_aton6+0x3c>
 800d712:	68bb      	ldr	r3, [r7, #8]
 800d714:	781b      	ldrb	r3, [r3, #0]
 800d716:	2b5b      	cmp	r3, #91	@ 0x5b
 800d718:	d105      	bne.n	800d726 <mg_aton6+0x3c>
 800d71a:	68bb      	ldr	r3, [r7, #8]
 800d71c:	3301      	adds	r3, #1
 800d71e:	60bb      	str	r3, [r7, #8]
 800d720:	68fb      	ldr	r3, [r7, #12]
 800d722:	3b02      	subs	r3, #2
 800d724:	60fb      	str	r3, [r7, #12]
  if (mg_v4mapped(str, addr)) return true;
 800d726:	687a      	ldr	r2, [r7, #4]
 800d728:	f107 0308 	add.w	r3, r7, #8
 800d72c:	e893 0003 	ldmia.w	r3, {r0, r1}
 800d730:	f7ff ff73 	bl	800d61a <mg_v4mapped>
 800d734:	4603      	mov	r3, r0
 800d736:	2b00      	cmp	r3, #0
 800d738:	d001      	beq.n	800d73e <mg_aton6+0x54>
 800d73a:	2301      	movs	r3, #1
 800d73c:	e0e1      	b.n	800d902 <mg_aton6+0x218>
  for (i = 0; i < str.len; i++) {
 800d73e:	2300      	movs	r3, #0
 800d740:	637b      	str	r3, [r7, #52]	@ 0x34
 800d742:	e0b0      	b.n	800d8a6 <mg_aton6+0x1bc>
    if ((str.buf[i] >= '0' && str.buf[i] <= '9') ||
 800d744:	68ba      	ldr	r2, [r7, #8]
 800d746:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d748:	4413      	add	r3, r2
 800d74a:	781b      	ldrb	r3, [r3, #0]
 800d74c:	2b2f      	cmp	r3, #47	@ 0x2f
 800d74e:	d905      	bls.n	800d75c <mg_aton6+0x72>
 800d750:	68ba      	ldr	r2, [r7, #8]
 800d752:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d754:	4413      	add	r3, r2
 800d756:	781b      	ldrb	r3, [r3, #0]
 800d758:	2b39      	cmp	r3, #57	@ 0x39
 800d75a:	d917      	bls.n	800d78c <mg_aton6+0xa2>
        (str.buf[i] >= 'a' && str.buf[i] <= 'f') ||
 800d75c:	68ba      	ldr	r2, [r7, #8]
 800d75e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d760:	4413      	add	r3, r2
 800d762:	781b      	ldrb	r3, [r3, #0]
    if ((str.buf[i] >= '0' && str.buf[i] <= '9') ||
 800d764:	2b60      	cmp	r3, #96	@ 0x60
 800d766:	d905      	bls.n	800d774 <mg_aton6+0x8a>
        (str.buf[i] >= 'a' && str.buf[i] <= 'f') ||
 800d768:	68ba      	ldr	r2, [r7, #8]
 800d76a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d76c:	4413      	add	r3, r2
 800d76e:	781b      	ldrb	r3, [r3, #0]
 800d770:	2b66      	cmp	r3, #102	@ 0x66
 800d772:	d90b      	bls.n	800d78c <mg_aton6+0xa2>
        (str.buf[i] >= 'A' && str.buf[i] <= 'F')) {
 800d774:	68ba      	ldr	r2, [r7, #8]
 800d776:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d778:	4413      	add	r3, r2
 800d77a:	781b      	ldrb	r3, [r3, #0]
        (str.buf[i] >= 'a' && str.buf[i] <= 'f') ||
 800d77c:	2b40      	cmp	r3, #64	@ 0x40
 800d77e:	d933      	bls.n	800d7e8 <mg_aton6+0xfe>
        (str.buf[i] >= 'A' && str.buf[i] <= 'F')) {
 800d780:	68ba      	ldr	r2, [r7, #8]
 800d782:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d784:	4413      	add	r3, r2
 800d786:	781b      	ldrb	r3, [r3, #0]
 800d788:	2b46      	cmp	r3, #70	@ 0x46
 800d78a:	d82d      	bhi.n	800d7e8 <mg_aton6+0xfe>
      unsigned long val = 0;  // TODO(): This loops on chars, refactor
 800d78c:	2300      	movs	r3, #0
 800d78e:	617b      	str	r3, [r7, #20]
      if (i > j + 3) return false;
 800d790:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d792:	3303      	adds	r3, #3
 800d794:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800d796:	429a      	cmp	r2, r3
 800d798:	d901      	bls.n	800d79e <mg_aton6+0xb4>
 800d79a:	2300      	movs	r3, #0
 800d79c:	e0b1      	b.n	800d902 <mg_aton6+0x218>
      // MG_DEBUG(("%lu %lu [%.*s]", i, j, (int) (i - j + 1), &str.buf[j]));
      mg_str_to_num(mg_str_n(&str.buf[j], i - j + 1), 16, &val, sizeof(val));
 800d79e:	68ba      	ldr	r2, [r7, #8]
 800d7a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d7a2:	18d1      	adds	r1, r2, r3
 800d7a4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800d7a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d7a8:	1ad3      	subs	r3, r2, r3
 800d7aa:	1c5a      	adds	r2, r3, #1
 800d7ac:	f107 0318 	add.w	r3, r7, #24
 800d7b0:	4618      	mov	r0, r3
 800d7b2:	f008 f90a 	bl	80159ca <mg_str_n>
 800d7b6:	f107 0314 	add.w	r3, r7, #20
 800d7ba:	2204      	movs	r2, #4
 800d7bc:	9200      	str	r2, [sp, #0]
 800d7be:	2210      	movs	r2, #16
 800d7c0:	f107 0118 	add.w	r1, r7, #24
 800d7c4:	c903      	ldmia	r1, {r0, r1}
 800d7c6:	f008 fb3d 	bl	8015e44 <mg_str_to_num>
      addr->ip[n] = (uint8_t) ((val >> 8) & 255);
 800d7ca:	697b      	ldr	r3, [r7, #20]
 800d7cc:	0a1b      	lsrs	r3, r3, #8
 800d7ce:	b2d9      	uxtb	r1, r3
 800d7d0:	687a      	ldr	r2, [r7, #4]
 800d7d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d7d4:	4413      	add	r3, r2
 800d7d6:	460a      	mov	r2, r1
 800d7d8:	701a      	strb	r2, [r3, #0]
      addr->ip[n + 1] = (uint8_t) (val & 255);
 800d7da:	697a      	ldr	r2, [r7, #20]
 800d7dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d7de:	3301      	adds	r3, #1
 800d7e0:	b2d1      	uxtb	r1, r2
 800d7e2:	687a      	ldr	r2, [r7, #4]
 800d7e4:	54d1      	strb	r1, [r2, r3]
        (str.buf[i] >= 'A' && str.buf[i] <= 'F')) {
 800d7e6:	e05b      	b.n	800d8a0 <mg_aton6+0x1b6>
    } else if (str.buf[i] == ':') {
 800d7e8:	68ba      	ldr	r2, [r7, #8]
 800d7ea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d7ec:	4413      	add	r3, r2
 800d7ee:	781b      	ldrb	r3, [r3, #0]
 800d7f0:	2b3a      	cmp	r3, #58	@ 0x3a
 800d7f2:	d134      	bne.n	800d85e <mg_aton6+0x174>
      j = i + 1;
 800d7f4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d7f6:	3301      	adds	r3, #1
 800d7f8:	633b      	str	r3, [r7, #48]	@ 0x30
      if (i > 0 && str.buf[i - 1] == ':') {
 800d7fa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d7fc:	2b00      	cmp	r3, #0
 800d7fe:	d014      	beq.n	800d82a <mg_aton6+0x140>
 800d800:	68ba      	ldr	r2, [r7, #8]
 800d802:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d804:	3b01      	subs	r3, #1
 800d806:	4413      	add	r3, r2
 800d808:	781b      	ldrb	r3, [r3, #0]
 800d80a:	2b3a      	cmp	r3, #58	@ 0x3a
 800d80c:	d10d      	bne.n	800d82a <mg_aton6+0x140>
        dc = n;  // Double colon
 800d80e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d810:	62bb      	str	r3, [r7, #40]	@ 0x28
        if (i > 1 && str.buf[i - 2] == ':') return false;
 800d812:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d814:	2b01      	cmp	r3, #1
 800d816:	d90f      	bls.n	800d838 <mg_aton6+0x14e>
 800d818:	68ba      	ldr	r2, [r7, #8]
 800d81a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d81c:	3b02      	subs	r3, #2
 800d81e:	4413      	add	r3, r2
 800d820:	781b      	ldrb	r3, [r3, #0]
 800d822:	2b3a      	cmp	r3, #58	@ 0x3a
 800d824:	d108      	bne.n	800d838 <mg_aton6+0x14e>
 800d826:	2300      	movs	r3, #0
 800d828:	e06b      	b.n	800d902 <mg_aton6+0x218>
      } else if (i > 0) {
 800d82a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d82c:	2b00      	cmp	r3, #0
 800d82e:	d004      	beq.n	800d83a <mg_aton6+0x150>
        n += 2;
 800d830:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d832:	3302      	adds	r3, #2
 800d834:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800d836:	e000      	b.n	800d83a <mg_aton6+0x150>
        if (i > 1 && str.buf[i - 2] == ':') return false;
 800d838:	bf00      	nop
      }
      if (n > 14) return false;
 800d83a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d83c:	2b0e      	cmp	r3, #14
 800d83e:	d901      	bls.n	800d844 <mg_aton6+0x15a>
 800d840:	2300      	movs	r3, #0
 800d842:	e05e      	b.n	800d902 <mg_aton6+0x218>
      addr->ip[n] = addr->ip[n + 1] = 0;  // For trailing ::
 800d844:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d846:	3301      	adds	r3, #1
 800d848:	687a      	ldr	r2, [r7, #4]
 800d84a:	2100      	movs	r1, #0
 800d84c:	54d1      	strb	r1, [r2, r3]
 800d84e:	687a      	ldr	r2, [r7, #4]
 800d850:	5cd1      	ldrb	r1, [r2, r3]
 800d852:	687a      	ldr	r2, [r7, #4]
 800d854:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d856:	4413      	add	r3, r2
 800d858:	460a      	mov	r2, r1
 800d85a:	701a      	strb	r2, [r3, #0]
 800d85c:	e020      	b.n	800d8a0 <mg_aton6+0x1b6>
    } else if (str.buf[i] == '%') {       // Scope ID, last in string
 800d85e:	68ba      	ldr	r2, [r7, #8]
 800d860:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d862:	4413      	add	r3, r2
 800d864:	781b      	ldrb	r3, [r3, #0]
 800d866:	2b25      	cmp	r3, #37	@ 0x25
 800d868:	d118      	bne.n	800d89c <mg_aton6+0x1b2>
      return mg_str_to_num(mg_str_n(&str.buf[i + 1], str.len - i - 1), 10,
 800d86a:	68ba      	ldr	r2, [r7, #8]
 800d86c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d86e:	3301      	adds	r3, #1
 800d870:	18d1      	adds	r1, r2, r3
 800d872:	68fa      	ldr	r2, [r7, #12]
 800d874:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d876:	1ad3      	subs	r3, r2, r3
 800d878:	1e5a      	subs	r2, r3, #1
 800d87a:	f107 0320 	add.w	r3, r7, #32
 800d87e:	4618      	mov	r0, r3
 800d880:	f008 f8a3 	bl	80159ca <mg_str_n>
                           &addr->scope_id, sizeof(uint8_t));
 800d884:	687b      	ldr	r3, [r7, #4]
 800d886:	3312      	adds	r3, #18
      return mg_str_to_num(mg_str_n(&str.buf[i + 1], str.len - i - 1), 10,
 800d888:	2201      	movs	r2, #1
 800d88a:	9200      	str	r2, [sp, #0]
 800d88c:	220a      	movs	r2, #10
 800d88e:	f107 0120 	add.w	r1, r7, #32
 800d892:	c903      	ldmia	r1, {r0, r1}
 800d894:	f008 fad6 	bl	8015e44 <mg_str_to_num>
 800d898:	4603      	mov	r3, r0
 800d89a:	e032      	b.n	800d902 <mg_aton6+0x218>
    } else {
      return false;
 800d89c:	2300      	movs	r3, #0
 800d89e:	e030      	b.n	800d902 <mg_aton6+0x218>
  for (i = 0; i < str.len; i++) {
 800d8a0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d8a2:	3301      	adds	r3, #1
 800d8a4:	637b      	str	r3, [r7, #52]	@ 0x34
 800d8a6:	68fb      	ldr	r3, [r7, #12]
 800d8a8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800d8aa:	429a      	cmp	r2, r3
 800d8ac:	f4ff af4a 	bcc.w	800d744 <mg_aton6+0x5a>
    }
  }
  if (n < 14 && dc == 42) return false;
 800d8b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d8b2:	2b0d      	cmp	r3, #13
 800d8b4:	d804      	bhi.n	800d8c0 <mg_aton6+0x1d6>
 800d8b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d8b8:	2b2a      	cmp	r3, #42	@ 0x2a
 800d8ba:	d101      	bne.n	800d8c0 <mg_aton6+0x1d6>
 800d8bc:	2300      	movs	r3, #0
 800d8be:	e020      	b.n	800d902 <mg_aton6+0x218>
  if (n < 14) {
 800d8c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d8c2:	2b0d      	cmp	r3, #13
 800d8c4:	d819      	bhi.n	800d8fa <mg_aton6+0x210>
    memmove(&addr->ip[dc + (14 - n)], &addr->ip[dc], n - dc + 2);
 800d8c6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800d8c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d8ca:	1ad3      	subs	r3, r2, r3
 800d8cc:	330e      	adds	r3, #14
 800d8ce:	687a      	ldr	r2, [r7, #4]
 800d8d0:	18d0      	adds	r0, r2, r3
 800d8d2:	687a      	ldr	r2, [r7, #4]
 800d8d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d8d6:	18d1      	adds	r1, r2, r3
 800d8d8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d8da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d8dc:	1ad3      	subs	r3, r2, r3
 800d8de:	3302      	adds	r3, #2
 800d8e0:	461a      	mov	r2, r3
 800d8e2:	f016 fdb9 	bl	8024458 <memmove>
    memset(&addr->ip[dc], 0, 14 - n);
 800d8e6:	687a      	ldr	r2, [r7, #4]
 800d8e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d8ea:	18d0      	adds	r0, r2, r3
 800d8ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d8ee:	f1c3 030e 	rsb	r3, r3, #14
 800d8f2:	461a      	mov	r2, r3
 800d8f4:	2100      	movs	r1, #0
 800d8f6:	f016 fdc9 	bl	802448c <memset>
  }

  addr->is_ip6 = true;
 800d8fa:	687b      	ldr	r3, [r7, #4]
 800d8fc:	2201      	movs	r2, #1
 800d8fe:	74da      	strb	r2, [r3, #19]
  return true;
 800d900:	2301      	movs	r3, #1
}
 800d902:	4618      	mov	r0, r3
 800d904:	3738      	adds	r7, #56	@ 0x38
 800d906:	46bd      	mov	sp, r7
 800d908:	bd80      	pop	{r7, pc}

0800d90a <mg_aton>:

bool mg_aton(struct mg_str str, struct mg_addr *addr) {
 800d90a:	b580      	push	{r7, lr}
 800d90c:	b084      	sub	sp, #16
 800d90e:	af00      	add	r7, sp, #0
 800d910:	f107 0308 	add.w	r3, r7, #8
 800d914:	e883 0003 	stmia.w	r3, {r0, r1}
 800d918:	607a      	str	r2, [r7, #4]
  // MG_INFO(("[%.*s]", (int) str.len, str.buf));
  return mg_atone(str, addr) || mg_atonl(str, addr) || mg_aton4(str, addr) ||
 800d91a:	687a      	ldr	r2, [r7, #4]
 800d91c:	f107 0308 	add.w	r3, r7, #8
 800d920:	e893 0003 	ldmia.w	r3, {r0, r1}
 800d924:	f7ff fde8 	bl	800d4f8 <mg_atone>
 800d928:	4603      	mov	r3, r0
 800d92a:	2b00      	cmp	r3, #0
 800d92c:	d11d      	bne.n	800d96a <mg_aton+0x60>
 800d92e:	687a      	ldr	r2, [r7, #4]
 800d930:	f107 0308 	add.w	r3, r7, #8
 800d934:	e893 0003 	ldmia.w	r3, {r0, r1}
 800d938:	f7ff fdae 	bl	800d498 <mg_atonl>
 800d93c:	4603      	mov	r3, r0
 800d93e:	2b00      	cmp	r3, #0
 800d940:	d113      	bne.n	800d96a <mg_aton+0x60>
 800d942:	687a      	ldr	r2, [r7, #4]
 800d944:	f107 0308 	add.w	r3, r7, #8
 800d948:	e893 0003 	ldmia.w	r3, {r0, r1}
 800d94c:	f7ff fdef 	bl	800d52e <mg_aton4>
 800d950:	4603      	mov	r3, r0
 800d952:	2b00      	cmp	r3, #0
 800d954:	d109      	bne.n	800d96a <mg_aton+0x60>
         mg_aton6(str, addr);
 800d956:	687a      	ldr	r2, [r7, #4]
 800d958:	f107 0308 	add.w	r3, r7, #8
 800d95c:	e893 0003 	ldmia.w	r3, {r0, r1}
 800d960:	f7ff fec3 	bl	800d6ea <mg_aton6>
 800d964:	4603      	mov	r3, r0
  return mg_atone(str, addr) || mg_atonl(str, addr) || mg_aton4(str, addr) ||
 800d966:	2b00      	cmp	r3, #0
 800d968:	d001      	beq.n	800d96e <mg_aton+0x64>
 800d96a:	2301      	movs	r3, #1
 800d96c:	e000      	b.n	800d970 <mg_aton+0x66>
 800d96e:	2300      	movs	r3, #0
 800d970:	f003 0301 	and.w	r3, r3, #1
 800d974:	b2db      	uxtb	r3, r3
}
 800d976:	4618      	mov	r0, r3
 800d978:	3710      	adds	r7, #16
 800d97a:	46bd      	mov	sp, r7
 800d97c:	bd80      	pop	{r7, pc}

0800d97e <mg_alloc_conn>:

struct mg_connection *mg_alloc_conn(struct mg_mgr *mgr) {
 800d97e:	b580      	push	{r7, lr}
 800d980:	b084      	sub	sp, #16
 800d982:	af00      	add	r7, sp, #0
 800d984:	6078      	str	r0, [r7, #4]
  struct mg_connection *c =
      (struct mg_connection *) mg_calloc(1, sizeof(*c) + mgr->extraconnsize);
 800d986:	687b      	ldr	r3, [r7, #4]
 800d988:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d98a:	33b8      	adds	r3, #184	@ 0xb8
 800d98c:	4619      	mov	r1, r3
 800d98e:	2001      	movs	r0, #1
 800d990:	f7f9 fa3f 	bl	8006e12 <mg_calloc>
 800d994:	60f8      	str	r0, [r7, #12]
  if (c != NULL) {
 800d996:	68fb      	ldr	r3, [r7, #12]
 800d998:	2b00      	cmp	r3, #0
 800d99a:	d017      	beq.n	800d9cc <mg_alloc_conn+0x4e>
    c->mgr = mgr;
 800d99c:	68fb      	ldr	r3, [r7, #12]
 800d99e:	687a      	ldr	r2, [r7, #4]
 800d9a0:	605a      	str	r2, [r3, #4]
    c->send.align = c->recv.align = c->rtls.align = MG_IO_SIZE;
 800d9a2:	68fb      	ldr	r3, [r7, #12]
 800d9a4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800d9a8:	67da      	str	r2, [r3, #124]	@ 0x7c
 800d9aa:	68fb      	ldr	r3, [r7, #12]
 800d9ac:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 800d9ae:	68fb      	ldr	r3, [r7, #12]
 800d9b0:	64da      	str	r2, [r3, #76]	@ 0x4c
 800d9b2:	68fb      	ldr	r3, [r7, #12]
 800d9b4:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800d9b6:	68fb      	ldr	r3, [r7, #12]
 800d9b8:	65da      	str	r2, [r3, #92]	@ 0x5c
    c->id = ++mgr->nextid;
 800d9ba:	687b      	ldr	r3, [r7, #4]
 800d9bc:	69db      	ldr	r3, [r3, #28]
 800d9be:	1c5a      	adds	r2, r3, #1
 800d9c0:	687b      	ldr	r3, [r7, #4]
 800d9c2:	61da      	str	r2, [r3, #28]
 800d9c4:	687b      	ldr	r3, [r7, #4]
 800d9c6:	69da      	ldr	r2, [r3, #28]
 800d9c8:	68fb      	ldr	r3, [r7, #12]
 800d9ca:	63da      	str	r2, [r3, #60]	@ 0x3c
    MG_PROF_INIT(c);
  }
  return c;
 800d9cc:	68fb      	ldr	r3, [r7, #12]
}
 800d9ce:	4618      	mov	r0, r3
 800d9d0:	3710      	adds	r7, #16
 800d9d2:	46bd      	mov	sp, r7
 800d9d4:	bd80      	pop	{r7, pc}
	...

0800d9d8 <mg_close_conn>:

void mg_close_conn(struct mg_connection *c) {
 800d9d8:	b580      	push	{r7, lr}
 800d9da:	b084      	sub	sp, #16
 800d9dc:	af00      	add	r7, sp, #0
 800d9de:	6078      	str	r0, [r7, #4]
  mg_resolve_cancel(c);  // Close any pending DNS query
 800d9e0:	6878      	ldr	r0, [r7, #4]
 800d9e2:	f7f9 fc44 	bl	800726e <mg_resolve_cancel>
  LIST_DELETE(struct mg_connection, &c->mgr->conns, c);
 800d9e6:	687b      	ldr	r3, [r7, #4]
 800d9e8:	685b      	ldr	r3, [r3, #4]
 800d9ea:	60fb      	str	r3, [r7, #12]
 800d9ec:	e002      	b.n	800d9f4 <mg_close_conn+0x1c>
 800d9ee:	68fb      	ldr	r3, [r7, #12]
 800d9f0:	681b      	ldr	r3, [r3, #0]
 800d9f2:	60fb      	str	r3, [r7, #12]
 800d9f4:	68fb      	ldr	r3, [r7, #12]
 800d9f6:	681b      	ldr	r3, [r3, #0]
 800d9f8:	687a      	ldr	r2, [r7, #4]
 800d9fa:	429a      	cmp	r2, r3
 800d9fc:	d1f7      	bne.n	800d9ee <mg_close_conn+0x16>
 800d9fe:	687b      	ldr	r3, [r7, #4]
 800da00:	681a      	ldr	r2, [r3, #0]
 800da02:	68fb      	ldr	r3, [r7, #12]
 800da04:	601a      	str	r2, [r3, #0]
  if (c == c->mgr->dns4.c) c->mgr->dns4.c = NULL;
 800da06:	687b      	ldr	r3, [r7, #4]
 800da08:	685b      	ldr	r3, [r3, #4]
 800da0a:	689b      	ldr	r3, [r3, #8]
 800da0c:	687a      	ldr	r2, [r7, #4]
 800da0e:	429a      	cmp	r2, r3
 800da10:	d103      	bne.n	800da1a <mg_close_conn+0x42>
 800da12:	687b      	ldr	r3, [r7, #4]
 800da14:	685b      	ldr	r3, [r3, #4]
 800da16:	2200      	movs	r2, #0
 800da18:	609a      	str	r2, [r3, #8]
  if (c == c->mgr->dns6.c) c->mgr->dns6.c = NULL;
 800da1a:	687b      	ldr	r3, [r7, #4]
 800da1c:	685b      	ldr	r3, [r3, #4]
 800da1e:	691b      	ldr	r3, [r3, #16]
 800da20:	687a      	ldr	r2, [r7, #4]
 800da22:	429a      	cmp	r2, r3
 800da24:	d103      	bne.n	800da2e <mg_close_conn+0x56>
 800da26:	687b      	ldr	r3, [r7, #4]
 800da28:	685b      	ldr	r3, [r3, #4]
 800da2a:	2200      	movs	r2, #0
 800da2c:	611a      	str	r2, [r3, #16]
  // Order of operations is important. `MG_EV_CLOSE` event must be fired
  // before we deallocate received data, see #1331
  mg_call(c, MG_EV_CLOSE, NULL);
 800da2e:	2200      	movs	r2, #0
 800da30:	2109      	movs	r1, #9
 800da32:	6878      	ldr	r0, [r7, #4]
 800da34:	f7fa f9fc 	bl	8007e30 <mg_call>
  MG_DEBUG(("%lu %ld closed", c->id, c->fd));
 800da38:	4b17      	ldr	r3, [pc, #92]	@ (800da98 <mg_close_conn+0xc0>)
 800da3a:	681b      	ldr	r3, [r3, #0]
 800da3c:	2b02      	cmp	r3, #2
 800da3e:	dd0e      	ble.n	800da5e <mg_close_conn+0x86>
 800da40:	4b16      	ldr	r3, [pc, #88]	@ (800da9c <mg_close_conn+0xc4>)
 800da42:	f640 72a4 	movw	r2, #4004	@ 0xfa4
 800da46:	4916      	ldr	r1, [pc, #88]	@ (800daa0 <mg_close_conn+0xc8>)
 800da48:	2003      	movs	r0, #3
 800da4a:	f7ff fbaf 	bl	800d1ac <mg_log_prefix>
 800da4e:	687b      	ldr	r3, [r7, #4]
 800da50:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 800da52:	687b      	ldr	r3, [r7, #4]
 800da54:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800da56:	461a      	mov	r2, r3
 800da58:	4812      	ldr	r0, [pc, #72]	@ (800daa4 <mg_close_conn+0xcc>)
 800da5a:	f7ff fbf7 	bl	800d24c <mg_log>
  MG_PROF_DUMP(c);
  MG_PROF_FREE(c);

  mg_tls_free(c);
 800da5e:	6878      	ldr	r0, [r7, #4]
 800da60:	f00c fdb4 	bl	801a5cc <mg_tls_free>
  mg_iobuf_free(&c->recv);
 800da64:	687b      	ldr	r3, [r7, #4]
 800da66:	3340      	adds	r3, #64	@ 0x40
 800da68:	4618      	mov	r0, r3
 800da6a:	f7fe fd1c 	bl	800c4a6 <mg_iobuf_free>
  mg_iobuf_free(&c->send);
 800da6e:	687b      	ldr	r3, [r7, #4]
 800da70:	3350      	adds	r3, #80	@ 0x50
 800da72:	4618      	mov	r0, r3
 800da74:	f7fe fd17 	bl	800c4a6 <mg_iobuf_free>
  mg_iobuf_free(&c->rtls);
 800da78:	687b      	ldr	r3, [r7, #4]
 800da7a:	3370      	adds	r3, #112	@ 0x70
 800da7c:	4618      	mov	r0, r3
 800da7e:	f7fe fd12 	bl	800c4a6 <mg_iobuf_free>
  mg_bzero((unsigned char *) c, sizeof(*c));
 800da82:	21b8      	movs	r1, #184	@ 0xb8
 800da84:	6878      	ldr	r0, [r7, #4]
 800da86:	f013 faa5 	bl	8020fd4 <mg_bzero>
  mg_free(c);
 800da8a:	6878      	ldr	r0, [r7, #4]
 800da8c:	f7f9 f9b6 	bl	8006dfc <mg_free>
}
 800da90:	bf00      	nop
 800da92:	3710      	adds	r7, #16
 800da94:	46bd      	mov	sp, r7
 800da96:	bd80      	pop	{r7, pc}
 800da98:	20000258 	.word	0x20000258
 800da9c:	08028818 	.word	0x08028818
 800daa0:	08025140 	.word	0x08025140
 800daa4:	080260a4 	.word	0x080260a4

0800daa8 <mg_connect_svc>:

struct mg_connection *mg_connect_svc(struct mg_mgr *mgr, const char *url,
                                     mg_event_handler_t fn, void *fn_data,
                                     mg_event_handler_t pfn, void *pfn_data) {
 800daa8:	b580      	push	{r7, lr}
 800daaa:	b086      	sub	sp, #24
 800daac:	af00      	add	r7, sp, #0
 800daae:	60f8      	str	r0, [r7, #12]
 800dab0:	60b9      	str	r1, [r7, #8]
 800dab2:	607a      	str	r2, [r7, #4]
 800dab4:	603b      	str	r3, [r7, #0]
  struct mg_connection *c = NULL;
 800dab6:	2300      	movs	r3, #0
 800dab8:	617b      	str	r3, [r7, #20]
  if (url == NULL || url[0] == '\0') {
 800daba:	68bb      	ldr	r3, [r7, #8]
 800dabc:	2b00      	cmp	r3, #0
 800dabe:	d003      	beq.n	800dac8 <mg_connect_svc+0x20>
 800dac0:	68bb      	ldr	r3, [r7, #8]
 800dac2:	781b      	ldrb	r3, [r3, #0]
 800dac4:	2b00      	cmp	r3, #0
 800dac6:	d10f      	bne.n	800dae8 <mg_connect_svc+0x40>
    MG_ERROR(("null url"));
 800dac8:	4b45      	ldr	r3, [pc, #276]	@ (800dbe0 <mg_connect_svc+0x138>)
 800daca:	681b      	ldr	r3, [r3, #0]
 800dacc:	2b00      	cmp	r3, #0
 800dace:	f340 8081 	ble.w	800dbd4 <mg_connect_svc+0x12c>
 800dad2:	4b44      	ldr	r3, [pc, #272]	@ (800dbe4 <mg_connect_svc+0x13c>)
 800dad4:	f640 72b5 	movw	r2, #4021	@ 0xfb5
 800dad8:	4943      	ldr	r1, [pc, #268]	@ (800dbe8 <mg_connect_svc+0x140>)
 800dada:	2001      	movs	r0, #1
 800dadc:	f7ff fb66 	bl	800d1ac <mg_log_prefix>
 800dae0:	4842      	ldr	r0, [pc, #264]	@ (800dbec <mg_connect_svc+0x144>)
 800dae2:	f7ff fbb3 	bl	800d24c <mg_log>
 800dae6:	e075      	b.n	800dbd4 <mg_connect_svc+0x12c>
  } else if ((c = mg_alloc_conn(mgr)) == NULL) {
 800dae8:	68f8      	ldr	r0, [r7, #12]
 800daea:	f7ff ff48 	bl	800d97e <mg_alloc_conn>
 800daee:	6178      	str	r0, [r7, #20]
 800daf0:	697b      	ldr	r3, [r7, #20]
 800daf2:	2b00      	cmp	r3, #0
 800daf4:	d10e      	bne.n	800db14 <mg_connect_svc+0x6c>
    MG_ERROR(("OOM"));
 800daf6:	4b3a      	ldr	r3, [pc, #232]	@ (800dbe0 <mg_connect_svc+0x138>)
 800daf8:	681b      	ldr	r3, [r3, #0]
 800dafa:	2b00      	cmp	r3, #0
 800dafc:	dd6a      	ble.n	800dbd4 <mg_connect_svc+0x12c>
 800dafe:	4b39      	ldr	r3, [pc, #228]	@ (800dbe4 <mg_connect_svc+0x13c>)
 800db00:	f640 72b7 	movw	r2, #4023	@ 0xfb7
 800db04:	4938      	ldr	r1, [pc, #224]	@ (800dbe8 <mg_connect_svc+0x140>)
 800db06:	2001      	movs	r0, #1
 800db08:	f7ff fb50 	bl	800d1ac <mg_log_prefix>
 800db0c:	4838      	ldr	r0, [pc, #224]	@ (800dbf0 <mg_connect_svc+0x148>)
 800db0e:	f7ff fb9d 	bl	800d24c <mg_log>
 800db12:	e05f      	b.n	800dbd4 <mg_connect_svc+0x12c>
  } else {
    LIST_ADD_HEAD(struct mg_connection, &mgr->conns, c);
 800db14:	68fb      	ldr	r3, [r7, #12]
 800db16:	681a      	ldr	r2, [r3, #0]
 800db18:	697b      	ldr	r3, [r7, #20]
 800db1a:	601a      	str	r2, [r3, #0]
 800db1c:	68fb      	ldr	r3, [r7, #12]
 800db1e:	697a      	ldr	r2, [r7, #20]
 800db20:	601a      	str	r2, [r3, #0]
    c->is_udp = (strncmp(url, "udp:", 4) == 0);
 800db22:	2204      	movs	r2, #4
 800db24:	4933      	ldr	r1, [pc, #204]	@ (800dbf4 <mg_connect_svc+0x14c>)
 800db26:	68b8      	ldr	r0, [r7, #8]
 800db28:	f016 fcc5 	bl	80244b6 <strncmp>
 800db2c:	4603      	mov	r3, r0
 800db2e:	2b00      	cmp	r3, #0
 800db30:	bf0c      	ite	eq
 800db32:	2301      	moveq	r3, #1
 800db34:	2300      	movne	r3, #0
 800db36:	b2d9      	uxtb	r1, r3
 800db38:	697a      	ldr	r2, [r7, #20]
 800db3a:	f892 30b5 	ldrb.w	r3, [r2, #181]	@ 0xb5
 800db3e:	f361 0300 	bfi	r3, r1, #0, #1
 800db42:	f882 30b5 	strb.w	r3, [r2, #181]	@ 0xb5
    c->fd = (void *) (size_t) MG_INVALID_SOCKET;
 800db46:	697b      	ldr	r3, [r7, #20]
 800db48:	f04f 32ff 	mov.w	r2, #4294967295
 800db4c:	639a      	str	r2, [r3, #56]	@ 0x38
    c->fn = fn;
 800db4e:	697b      	ldr	r3, [r7, #20]
 800db50:	687a      	ldr	r2, [r7, #4]
 800db52:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    c->is_client = true;
 800db56:	697a      	ldr	r2, [r7, #20]
 800db58:	f892 30b4 	ldrb.w	r3, [r2, #180]	@ 0xb4
 800db5c:	f043 0302 	orr.w	r3, r3, #2
 800db60:	f882 30b4 	strb.w	r3, [r2, #180]	@ 0xb4
    c->fn_data = fn_data;
 800db64:	697b      	ldr	r3, [r7, #20]
 800db66:	683a      	ldr	r2, [r7, #0]
 800db68:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    c->is_tls = (mg_url_is_ssl(url) != 0);
 800db6c:	68b8      	ldr	r0, [r7, #8]
 800db6e:	f013 f8d1 	bl	8020d14 <mg_url_is_ssl>
 800db72:	4603      	mov	r3, r0
 800db74:	2b00      	cmp	r3, #0
 800db76:	bf14      	ite	ne
 800db78:	2301      	movne	r3, #1
 800db7a:	2300      	moveq	r3, #0
 800db7c:	b2d9      	uxtb	r1, r3
 800db7e:	697a      	ldr	r2, [r7, #20]
 800db80:	f892 30b4 	ldrb.w	r3, [r2, #180]	@ 0xb4
 800db84:	f361 1386 	bfi	r3, r1, #6, #1
 800db88:	f882 30b4 	strb.w	r3, [r2, #180]	@ 0xb4
    c->pfn = pfn;
 800db8c:	697b      	ldr	r3, [r7, #20]
 800db8e:	6a3a      	ldr	r2, [r7, #32]
 800db90:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    c->pfn_data = pfn_data;
 800db94:	697b      	ldr	r3, [r7, #20]
 800db96:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800db98:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    mg_call(c, MG_EV_OPEN, (void *) url);
 800db9c:	68ba      	ldr	r2, [r7, #8]
 800db9e:	2101      	movs	r1, #1
 800dba0:	6978      	ldr	r0, [r7, #20]
 800dba2:	f7fa f945 	bl	8007e30 <mg_call>
    MG_DEBUG(("%lu %ld %s", c->id, c->fd, url));
 800dba6:	4b0e      	ldr	r3, [pc, #56]	@ (800dbe0 <mg_connect_svc+0x138>)
 800dba8:	681b      	ldr	r3, [r3, #0]
 800dbaa:	2b02      	cmp	r3, #2
 800dbac:	dd0e      	ble.n	800dbcc <mg_connect_svc+0x124>
 800dbae:	4b0d      	ldr	r3, [pc, #52]	@ (800dbe4 <mg_connect_svc+0x13c>)
 800dbb0:	f640 72c3 	movw	r2, #4035	@ 0xfc3
 800dbb4:	490c      	ldr	r1, [pc, #48]	@ (800dbe8 <mg_connect_svc+0x140>)
 800dbb6:	2003      	movs	r0, #3
 800dbb8:	f7ff faf8 	bl	800d1ac <mg_log_prefix>
 800dbbc:	697b      	ldr	r3, [r7, #20]
 800dbbe:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 800dbc0:	697b      	ldr	r3, [r7, #20]
 800dbc2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800dbc4:	68bb      	ldr	r3, [r7, #8]
 800dbc6:	480c      	ldr	r0, [pc, #48]	@ (800dbf8 <mg_connect_svc+0x150>)
 800dbc8:	f7ff fb40 	bl	800d24c <mg_log>
    mg_resolve(c, url);
 800dbcc:	68b9      	ldr	r1, [r7, #8]
 800dbce:	6978      	ldr	r0, [r7, #20]
 800dbd0:	f7fa f8ea 	bl	8007da8 <mg_resolve>
  }
  return c;
 800dbd4:	697b      	ldr	r3, [r7, #20]
}
 800dbd6:	4618      	mov	r0, r3
 800dbd8:	3718      	adds	r7, #24
 800dbda:	46bd      	mov	sp, r7
 800dbdc:	bd80      	pop	{r7, pc}
 800dbde:	bf00      	nop
 800dbe0:	20000258 	.word	0x20000258
 800dbe4:	08028828 	.word	0x08028828
 800dbe8:	08025140 	.word	0x08025140
 800dbec:	080260b4 	.word	0x080260b4
 800dbf0:	080260c0 	.word	0x080260c0
 800dbf4:	080260c4 	.word	0x080260c4
 800dbf8:	080252f0 	.word	0x080252f0

0800dbfc <mg_connect>:

struct mg_connection *mg_connect(struct mg_mgr *mgr, const char *url,
                                 mg_event_handler_t fn, void *fn_data) {
 800dbfc:	b580      	push	{r7, lr}
 800dbfe:	b086      	sub	sp, #24
 800dc00:	af02      	add	r7, sp, #8
 800dc02:	60f8      	str	r0, [r7, #12]
 800dc04:	60b9      	str	r1, [r7, #8]
 800dc06:	607a      	str	r2, [r7, #4]
 800dc08:	603b      	str	r3, [r7, #0]
  return mg_connect_svc(mgr, url, fn, fn_data, NULL, NULL);
 800dc0a:	2300      	movs	r3, #0
 800dc0c:	9301      	str	r3, [sp, #4]
 800dc0e:	2300      	movs	r3, #0
 800dc10:	9300      	str	r3, [sp, #0]
 800dc12:	683b      	ldr	r3, [r7, #0]
 800dc14:	687a      	ldr	r2, [r7, #4]
 800dc16:	68b9      	ldr	r1, [r7, #8]
 800dc18:	68f8      	ldr	r0, [r7, #12]
 800dc1a:	f7ff ff45 	bl	800daa8 <mg_connect_svc>
 800dc1e:	4603      	mov	r3, r0
}
 800dc20:	4618      	mov	r0, r3
 800dc22:	3710      	adds	r7, #16
 800dc24:	46bd      	mov	sp, r7
 800dc26:	bd80      	pop	{r7, pc}

0800dc28 <mg_listen>:

struct mg_connection *mg_listen(struct mg_mgr *mgr, const char *url,
                                mg_event_handler_t fn, void *fn_data) {
 800dc28:	b580      	push	{r7, lr}
 800dc2a:	b086      	sub	sp, #24
 800dc2c:	af00      	add	r7, sp, #0
 800dc2e:	60f8      	str	r0, [r7, #12]
 800dc30:	60b9      	str	r1, [r7, #8]
 800dc32:	607a      	str	r2, [r7, #4]
 800dc34:	603b      	str	r3, [r7, #0]
  struct mg_connection *c = NULL;
 800dc36:	2300      	movs	r3, #0
 800dc38:	617b      	str	r3, [r7, #20]
  if ((c = mg_alloc_conn(mgr)) == NULL) {
 800dc3a:	68f8      	ldr	r0, [r7, #12]
 800dc3c:	f7ff fe9f 	bl	800d97e <mg_alloc_conn>
 800dc40:	6178      	str	r0, [r7, #20]
 800dc42:	697b      	ldr	r3, [r7, #20]
 800dc44:	2b00      	cmp	r3, #0
 800dc46:	d10f      	bne.n	800dc68 <mg_listen+0x40>
    MG_ERROR(("OOM %s", url));
 800dc48:	4b41      	ldr	r3, [pc, #260]	@ (800dd50 <mg_listen+0x128>)
 800dc4a:	681b      	ldr	r3, [r3, #0]
 800dc4c:	2b00      	cmp	r3, #0
 800dc4e:	dd7a      	ble.n	800dd46 <mg_listen+0x11e>
 800dc50:	4b40      	ldr	r3, [pc, #256]	@ (800dd54 <mg_listen+0x12c>)
 800dc52:	f640 72d2 	movw	r2, #4050	@ 0xfd2
 800dc56:	4940      	ldr	r1, [pc, #256]	@ (800dd58 <mg_listen+0x130>)
 800dc58:	2001      	movs	r0, #1
 800dc5a:	f7ff faa7 	bl	800d1ac <mg_log_prefix>
 800dc5e:	68b9      	ldr	r1, [r7, #8]
 800dc60:	483e      	ldr	r0, [pc, #248]	@ (800dd5c <mg_listen+0x134>)
 800dc62:	f7ff faf3 	bl	800d24c <mg_log>
 800dc66:	e06e      	b.n	800dd46 <mg_listen+0x11e>
  } else if (!mg_open_listener(c, url)) {
 800dc68:	68b9      	ldr	r1, [r7, #8]
 800dc6a:	6978      	ldr	r0, [r7, #20]
 800dc6c:	f003 fef6 	bl	8011a5c <mg_open_listener>
 800dc70:	4603      	mov	r3, r0
 800dc72:	f083 0301 	eor.w	r3, r3, #1
 800dc76:	b2db      	uxtb	r3, r3
 800dc78:	2b00      	cmp	r3, #0
 800dc7a:	d014      	beq.n	800dca6 <mg_listen+0x7e>
    MG_ERROR(("Failed: %s", url));
 800dc7c:	4b34      	ldr	r3, [pc, #208]	@ (800dd50 <mg_listen+0x128>)
 800dc7e:	681b      	ldr	r3, [r3, #0]
 800dc80:	2b00      	cmp	r3, #0
 800dc82:	dd0a      	ble.n	800dc9a <mg_listen+0x72>
 800dc84:	4b33      	ldr	r3, [pc, #204]	@ (800dd54 <mg_listen+0x12c>)
 800dc86:	f640 72d4 	movw	r2, #4052	@ 0xfd4
 800dc8a:	4933      	ldr	r1, [pc, #204]	@ (800dd58 <mg_listen+0x130>)
 800dc8c:	2001      	movs	r0, #1
 800dc8e:	f7ff fa8d 	bl	800d1ac <mg_log_prefix>
 800dc92:	68b9      	ldr	r1, [r7, #8]
 800dc94:	4832      	ldr	r0, [pc, #200]	@ (800dd60 <mg_listen+0x138>)
 800dc96:	f7ff fad9 	bl	800d24c <mg_log>
    MG_PROF_FREE(c);
    mg_free(c);
 800dc9a:	6978      	ldr	r0, [r7, #20]
 800dc9c:	f7f9 f8ae 	bl	8006dfc <mg_free>
    c = NULL;
 800dca0:	2300      	movs	r3, #0
 800dca2:	617b      	str	r3, [r7, #20]
 800dca4:	e04f      	b.n	800dd46 <mg_listen+0x11e>
  } else {
    c->is_listening = 1;
 800dca6:	697a      	ldr	r2, [r7, #20]
 800dca8:	f892 30b4 	ldrb.w	r3, [r2, #180]	@ 0xb4
 800dcac:	f043 0301 	orr.w	r3, r3, #1
 800dcb0:	f882 30b4 	strb.w	r3, [r2, #180]	@ 0xb4
    c->is_udp = strncmp(url, "udp:", 4) == 0;
 800dcb4:	2204      	movs	r2, #4
 800dcb6:	492b      	ldr	r1, [pc, #172]	@ (800dd64 <mg_listen+0x13c>)
 800dcb8:	68b8      	ldr	r0, [r7, #8]
 800dcba:	f016 fbfc 	bl	80244b6 <strncmp>
 800dcbe:	4603      	mov	r3, r0
 800dcc0:	2b00      	cmp	r3, #0
 800dcc2:	bf0c      	ite	eq
 800dcc4:	2301      	moveq	r3, #1
 800dcc6:	2300      	movne	r3, #0
 800dcc8:	b2d9      	uxtb	r1, r3
 800dcca:	697a      	ldr	r2, [r7, #20]
 800dccc:	f892 30b5 	ldrb.w	r3, [r2, #181]	@ 0xb5
 800dcd0:	f361 0300 	bfi	r3, r1, #0, #1
 800dcd4:	f882 30b5 	strb.w	r3, [r2, #181]	@ 0xb5
    LIST_ADD_HEAD(struct mg_connection, &mgr->conns, c);
 800dcd8:	68fb      	ldr	r3, [r7, #12]
 800dcda:	681a      	ldr	r2, [r3, #0]
 800dcdc:	697b      	ldr	r3, [r7, #20]
 800dcde:	601a      	str	r2, [r3, #0]
 800dce0:	68fb      	ldr	r3, [r7, #12]
 800dce2:	697a      	ldr	r2, [r7, #20]
 800dce4:	601a      	str	r2, [r3, #0]
    c->fn = fn;
 800dce6:	697b      	ldr	r3, [r7, #20]
 800dce8:	687a      	ldr	r2, [r7, #4]
 800dcea:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    c->fn_data = fn_data;
 800dcee:	697b      	ldr	r3, [r7, #20]
 800dcf0:	683a      	ldr	r2, [r7, #0]
 800dcf2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    c->is_tls = (mg_url_is_ssl(url) != 0);
 800dcf6:	68b8      	ldr	r0, [r7, #8]
 800dcf8:	f013 f80c 	bl	8020d14 <mg_url_is_ssl>
 800dcfc:	4603      	mov	r3, r0
 800dcfe:	2b00      	cmp	r3, #0
 800dd00:	bf14      	ite	ne
 800dd02:	2301      	movne	r3, #1
 800dd04:	2300      	moveq	r3, #0
 800dd06:	b2d9      	uxtb	r1, r3
 800dd08:	697a      	ldr	r2, [r7, #20]
 800dd0a:	f892 30b4 	ldrb.w	r3, [r2, #180]	@ 0xb4
 800dd0e:	f361 1386 	bfi	r3, r1, #6, #1
 800dd12:	f882 30b4 	strb.w	r3, [r2, #180]	@ 0xb4
    mg_call(c, MG_EV_OPEN, NULL);
 800dd16:	2200      	movs	r2, #0
 800dd18:	2101      	movs	r1, #1
 800dd1a:	6978      	ldr	r0, [r7, #20]
 800dd1c:	f7fa f888 	bl	8007e30 <mg_call>
    MG_DEBUG(("%lu %ld %s", c->id, c->fd, url));
 800dd20:	4b0b      	ldr	r3, [pc, #44]	@ (800dd50 <mg_listen+0x128>)
 800dd22:	681b      	ldr	r3, [r3, #0]
 800dd24:	2b02      	cmp	r3, #2
 800dd26:	dd0e      	ble.n	800dd46 <mg_listen+0x11e>
 800dd28:	4b0a      	ldr	r3, [pc, #40]	@ (800dd54 <mg_listen+0x12c>)
 800dd2a:	f44f 627e 	mov.w	r2, #4064	@ 0xfe0
 800dd2e:	490a      	ldr	r1, [pc, #40]	@ (800dd58 <mg_listen+0x130>)
 800dd30:	2003      	movs	r0, #3
 800dd32:	f7ff fa3b 	bl	800d1ac <mg_log_prefix>
 800dd36:	697b      	ldr	r3, [r7, #20]
 800dd38:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 800dd3a:	697b      	ldr	r3, [r7, #20]
 800dd3c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800dd3e:	68bb      	ldr	r3, [r7, #8]
 800dd40:	4809      	ldr	r0, [pc, #36]	@ (800dd68 <mg_listen+0x140>)
 800dd42:	f7ff fa83 	bl	800d24c <mg_log>
  }
  return c;
 800dd46:	697b      	ldr	r3, [r7, #20]
}
 800dd48:	4618      	mov	r0, r3
 800dd4a:	3718      	adds	r7, #24
 800dd4c:	46bd      	mov	sp, r7
 800dd4e:	bd80      	pop	{r7, pc}
 800dd50:	20000258 	.word	0x20000258
 800dd54:	08028838 	.word	0x08028838
 800dd58:	08025140 	.word	0x08025140
 800dd5c:	080260cc 	.word	0x080260cc
 800dd60:	080260d4 	.word	0x080260d4
 800dd64:	080260c4 	.word	0x080260c4
 800dd68:	080252f0 	.word	0x080252f0

0800dd6c <mg_mgr_init>:
#if MG_ENABLE_TCPIP
  if (mgr->ifp) mg_tcpip_free(mgr->ifp);
#endif
}

void mg_mgr_init(struct mg_mgr *mgr) {
 800dd6c:	b580      	push	{r7, lr}
 800dd6e:	b082      	sub	sp, #8
 800dd70:	af00      	add	r7, sp, #0
 800dd72:	6078      	str	r0, [r7, #4]
  memset(mgr, 0, sizeof(*mgr));
 800dd74:	2244      	movs	r2, #68	@ 0x44
 800dd76:	2100      	movs	r1, #0
 800dd78:	6878      	ldr	r0, [r7, #4]
 800dd7a:	f016 fb87 	bl	802448c <memset>
#if MG_ENABLE_EPOLL
  if ((mgr->epoll_fd = epoll_create1(EPOLL_CLOEXEC)) < 0)
    MG_ERROR(("epoll_create1 errno %d", errno));
#else
  mgr->epoll_fd = -1;
 800dd7e:	687b      	ldr	r3, [r7, #4]
 800dd80:	f04f 32ff 	mov.w	r2, #4294967295
 800dd84:	635a      	str	r2, [r3, #52]	@ 0x34
#elif MG_ARCH == MG_ARCH_UNIX
  // Ignore SIGPIPE signal, so if client cancels the request, it
  // won't kill the whole process.
  signal(SIGPIPE, SIG_IGN);
#elif MG_ENABLE_TCPIP_DRIVER_INIT && defined(MG_TCPIP_DRIVER_INIT)
  MG_TCPIP_DRIVER_INIT(mgr);
 800dd86:	4b3b      	ldr	r3, [pc, #236]	@ (800de74 <mg_mgr_init+0x108>)
 800dd88:	2204      	movs	r2, #4
 800dd8a:	601a      	str	r2, [r3, #0]
 800dd8c:	4b39      	ldr	r3, [pc, #228]	@ (800de74 <mg_mgr_init+0x108>)
 800dd8e:	2200      	movs	r2, #0
 800dd90:	711a      	strb	r2, [r3, #4]
 800dd92:	4839      	ldr	r0, [pc, #228]	@ (800de78 <mg_mgr_init+0x10c>)
 800dd94:	f013 f9dc 	bl	8021150 <mg_ntohl>
 800dd98:	4603      	mov	r3, r0
 800dd9a:	4a38      	ldr	r2, [pc, #224]	@ (800de7c <mg_mgr_init+0x110>)
 800dd9c:	6093      	str	r3, [r2, #8]
 800dd9e:	f06f 00ff 	mvn.w	r0, #255	@ 0xff
 800dda2:	f013 f9d5 	bl	8021150 <mg_ntohl>
 800dda6:	4603      	mov	r3, r0
 800dda8:	4a34      	ldr	r2, [pc, #208]	@ (800de7c <mg_mgr_init+0x110>)
 800ddaa:	60d3      	str	r3, [r2, #12]
 800ddac:	4834      	ldr	r0, [pc, #208]	@ (800de80 <mg_mgr_init+0x114>)
 800ddae:	f013 f9cf 	bl	8021150 <mg_ntohl>
 800ddb2:	4603      	mov	r3, r0
 800ddb4:	4a31      	ldr	r2, [pc, #196]	@ (800de7c <mg_mgr_init+0x110>)
 800ddb6:	6113      	str	r3, [r2, #16]
 800ddb8:	4b30      	ldr	r3, [pc, #192]	@ (800de7c <mg_mgr_init+0x110>)
 800ddba:	4a32      	ldr	r2, [pc, #200]	@ (800de84 <mg_mgr_init+0x118>)
 800ddbc:	625a      	str	r2, [r3, #36]	@ 0x24
 800ddbe:	4b2f      	ldr	r3, [pc, #188]	@ (800de7c <mg_mgr_init+0x110>)
 800ddc0:	4a2c      	ldr	r2, [pc, #176]	@ (800de74 <mg_mgr_init+0x108>)
 800ddc2:	629a      	str	r2, [r3, #40]	@ 0x28
 800ddc4:	4b2d      	ldr	r3, [pc, #180]	@ (800de7c <mg_mgr_init+0x110>)
 800ddc6:	2202      	movs	r2, #2
 800ddc8:	701a      	strb	r2, [r3, #0]
 800ddca:	4b2f      	ldr	r3, [pc, #188]	@ (800de88 <mg_mgr_init+0x11c>)
 800ddcc:	681b      	ldr	r3, [r3, #0]
 800ddce:	b2da      	uxtb	r2, r3
 800ddd0:	4b2a      	ldr	r3, [pc, #168]	@ (800de7c <mg_mgr_init+0x110>)
 800ddd2:	705a      	strb	r2, [r3, #1]
 800ddd4:	4b2c      	ldr	r3, [pc, #176]	@ (800de88 <mg_mgr_init+0x11c>)
 800ddd6:	681b      	ldr	r3, [r3, #0]
 800ddd8:	0a9b      	lsrs	r3, r3, #10
 800ddda:	b2da      	uxtb	r2, r3
 800dddc:	4b27      	ldr	r3, [pc, #156]	@ (800de7c <mg_mgr_init+0x110>)
 800ddde:	709a      	strb	r2, [r3, #2]
 800dde0:	4b29      	ldr	r3, [pc, #164]	@ (800de88 <mg_mgr_init+0x11c>)
 800dde2:	681b      	ldr	r3, [r3, #0]
 800dde4:	0cdb      	lsrs	r3, r3, #19
 800dde6:	b2da      	uxtb	r2, r3
 800dde8:	4b24      	ldr	r3, [pc, #144]	@ (800de7c <mg_mgr_init+0x110>)
 800ddea:	70da      	strb	r2, [r3, #3]
 800ddec:	4b27      	ldr	r3, [pc, #156]	@ (800de8c <mg_mgr_init+0x120>)
 800ddee:	681b      	ldr	r3, [r3, #0]
 800ddf0:	b2da      	uxtb	r2, r3
 800ddf2:	4b22      	ldr	r3, [pc, #136]	@ (800de7c <mg_mgr_init+0x110>)
 800ddf4:	711a      	strb	r2, [r3, #4]
 800ddf6:	4b26      	ldr	r3, [pc, #152]	@ (800de90 <mg_mgr_init+0x124>)
 800ddf8:	681b      	ldr	r3, [r3, #0]
 800ddfa:	b2da      	uxtb	r2, r3
 800ddfc:	4b1f      	ldr	r3, [pc, #124]	@ (800de7c <mg_mgr_init+0x110>)
 800ddfe:	715a      	strb	r2, [r3, #5]
 800de00:	491e      	ldr	r1, [pc, #120]	@ (800de7c <mg_mgr_init+0x110>)
 800de02:	6878      	ldr	r0, [r7, #4]
 800de04:	f003 fbd8 	bl	80115b8 <mg_tcpip_init>
 800de08:	4b22      	ldr	r3, [pc, #136]	@ (800de94 <mg_mgr_init+0x128>)
 800de0a:	681b      	ldr	r3, [r3, #0]
 800de0c:	2b01      	cmp	r3, #1
 800de0e:	dd0b      	ble.n	800de28 <mg_mgr_init+0xbc>
 800de10:	4b21      	ldr	r3, [pc, #132]	@ (800de98 <mg_mgr_init+0x12c>)
 800de12:	f241 022c 	movw	r2, #4140	@ 0x102c
 800de16:	4921      	ldr	r1, [pc, #132]	@ (800de9c <mg_mgr_init+0x130>)
 800de18:	2002      	movs	r0, #2
 800de1a:	f7ff f9c7 	bl	800d1ac <mg_log_prefix>
 800de1e:	4a17      	ldr	r2, [pc, #92]	@ (800de7c <mg_mgr_init+0x110>)
 800de20:	491f      	ldr	r1, [pc, #124]	@ (800dea0 <mg_mgr_init+0x134>)
 800de22:	4820      	ldr	r0, [pc, #128]	@ (800dea4 <mg_mgr_init+0x138>)
 800de24:	f7ff fa12 	bl	800d24c <mg_log>
#endif
  mgr->pipe = MG_INVALID_SOCKET;
 800de28:	687b      	ldr	r3, [r7, #4]
 800de2a:	f04f 32ff 	mov.w	r2, #4294967295
 800de2e:	641a      	str	r2, [r3, #64]	@ 0x40
  mgr->dnstimeout = 3000;
 800de30:	687b      	ldr	r3, [r7, #4]
 800de32:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 800de36:	615a      	str	r2, [r3, #20]
  mgr->dns4.url = "udp://8.8.8.8:53";
 800de38:	687b      	ldr	r3, [r7, #4]
 800de3a:	4a1b      	ldr	r2, [pc, #108]	@ (800dea8 <mg_mgr_init+0x13c>)
 800de3c:	605a      	str	r2, [r3, #4]
  mgr->dns6.url = "udp://[2001:4860:4860::8888]:53";
 800de3e:	687b      	ldr	r3, [r7, #4]
 800de40:	4a1a      	ldr	r2, [pc, #104]	@ (800deac <mg_mgr_init+0x140>)
 800de42:	60da      	str	r2, [r3, #12]
  mg_tls_ctx_init(mgr);
 800de44:	6878      	ldr	r0, [r7, #4]
 800de46:	f00c fd1c 	bl	801a882 <mg_tls_ctx_init>
  MG_DEBUG(("MG_IO_SIZE: %lu, TLS: %s", MG_IO_SIZE,
 800de4a:	4b12      	ldr	r3, [pc, #72]	@ (800de94 <mg_mgr_init+0x128>)
 800de4c:	681b      	ldr	r3, [r3, #0]
 800de4e:	2b02      	cmp	r3, #2
 800de50:	dd0c      	ble.n	800de6c <mg_mgr_init+0x100>
 800de52:	4b11      	ldr	r3, [pc, #68]	@ (800de98 <mg_mgr_init+0x12c>)
 800de54:	f241 0233 	movw	r2, #4147	@ 0x1033
 800de58:	4910      	ldr	r1, [pc, #64]	@ (800de9c <mg_mgr_init+0x130>)
 800de5a:	2003      	movs	r0, #3
 800de5c:	f7ff f9a6 	bl	800d1ac <mg_log_prefix>
 800de60:	4a13      	ldr	r2, [pc, #76]	@ (800deb0 <mg_mgr_init+0x144>)
 800de62:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800de66:	4813      	ldr	r0, [pc, #76]	@ (800deb4 <mg_mgr_init+0x148>)
 800de68:	f7ff f9f0 	bl	800d24c <mg_log>
            : MG_TLS == MG_TLS_MBED    ? "MbedTLS"
            : MG_TLS == MG_TLS_OPENSSL ? "OpenSSL"
            : MG_TLS == MG_TLS_BUILTIN ? "builtin"
            : MG_TLS == MG_TLS_WOLFSSL ? "WolfSSL"
                                       : "custom"));
}
 800de6c:	bf00      	nop
 800de6e:	3708      	adds	r7, #8
 800de70:	46bd      	mov	sp, r7
 800de72:	bd80      	pop	{r7, pc}
 800de74:	20014b74 	.word	0x20014b74
 800de78:	c0a8b60b 	.word	0xc0a8b60b
 800de7c:	20014b80 	.word	0x20014b80
 800de80:	c0a8b601 	.word	0xc0a8b601
 800de84:	20000288 	.word	0x20000288
 800de88:	1ff0f420 	.word	0x1ff0f420
 800de8c:	1ff0f424 	.word	0x1ff0f424
 800de90:	1ff0f428 	.word	0x1ff0f428
 800de94:	20000258 	.word	0x20000258
 800de98:	08028844 	.word	0x08028844
 800de9c:	08025140 	.word	0x08025140
 800dea0:	080124a9 	.word	0x080124a9
 800dea4:	080260f8 	.word	0x080260f8
 800dea8:	08026110 	.word	0x08026110
 800deac:	08026124 	.word	0x08026124
 800deb0:	08026144 	.word	0x08026144
 800deb4:	0802614c 	.word	0x0802614c

0800deb8 <mg_tcpip_call>:
  struct udp *udp;
  struct dhcp *dhcp;
  struct dhcp6 *dhcp6;
};

static void mg_tcpip_call(struct mg_tcpip_if *ifp, int ev, void *ev_data) {
 800deb8:	b580      	push	{r7, lr}
 800deba:	b084      	sub	sp, #16
 800debc:	af00      	add	r7, sp, #0
 800debe:	60f8      	str	r0, [r7, #12]
 800dec0:	60b9      	str	r1, [r7, #8]
 800dec2:	607a      	str	r2, [r7, #4]
  if (ev != MG_TCPIP_EV_POLL && ev < (int) (sizeof(names) / sizeof(names[0]))) {
    MG_PROF_ADD(c, names[ev]);
  }
#endif
  // Fire protocol handler first, user handler second. See #2559
  if (ifp->pfn != NULL) ifp->pfn(ifp, ev, ev_data);
 800dec4:	68fb      	ldr	r3, [r7, #12]
 800dec6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dec8:	2b00      	cmp	r3, #0
 800deca:	d005      	beq.n	800ded8 <mg_tcpip_call+0x20>
 800decc:	68fb      	ldr	r3, [r7, #12]
 800dece:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ded0:	687a      	ldr	r2, [r7, #4]
 800ded2:	68b9      	ldr	r1, [r7, #8]
 800ded4:	68f8      	ldr	r0, [r7, #12]
 800ded6:	4798      	blx	r3
  if (ifp->fn != NULL) ifp->fn(ifp, ev, ev_data);
 800ded8:	68fb      	ldr	r3, [r7, #12]
 800deda:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800dedc:	2b00      	cmp	r3, #0
 800dede:	d005      	beq.n	800deec <mg_tcpip_call+0x34>
 800dee0:	68fb      	ldr	r3, [r7, #12]
 800dee2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800dee4:	687a      	ldr	r2, [r7, #4]
 800dee6:	68b9      	ldr	r1, [r7, #8]
 800dee8:	68f8      	ldr	r0, [r7, #12]
 800deea:	4798      	blx	r3
}
 800deec:	bf00      	nop
 800deee:	3710      	adds	r7, #16
 800def0:	46bd      	mov	sp, r7
 800def2:	bd80      	pop	{r7, pc}

0800def4 <mkpay>:

static void send_syn(struct mg_connection *c);

static void mkpay(struct pkt *pkt, void *p) {
 800def4:	b590      	push	{r4, r7, lr}
 800def6:	b085      	sub	sp, #20
 800def8:	af00      	add	r7, sp, #0
 800defa:	60f8      	str	r0, [r7, #12]
 800defc:	60b9      	str	r1, [r7, #8]
  pkt->pay =
      mg_str_n((char *) p, (size_t) (&pkt->pay.buf[pkt->pay.len] - (char *) p));
 800defe:	68fb      	ldr	r3, [r7, #12]
 800df00:	689a      	ldr	r2, [r3, #8]
 800df02:	68fb      	ldr	r3, [r7, #12]
 800df04:	68db      	ldr	r3, [r3, #12]
 800df06:	441a      	add	r2, r3
 800df08:	68bb      	ldr	r3, [r7, #8]
 800df0a:	1ad3      	subs	r3, r2, r3
 800df0c:	461a      	mov	r2, r3
 800df0e:	68fc      	ldr	r4, [r7, #12]
 800df10:	463b      	mov	r3, r7
 800df12:	68b9      	ldr	r1, [r7, #8]
 800df14:	4618      	mov	r0, r3
 800df16:	f007 fd58 	bl	80159ca <mg_str_n>
 800df1a:	f104 0308 	add.w	r3, r4, #8
 800df1e:	463a      	mov	r2, r7
 800df20:	e892 0003 	ldmia.w	r2, {r0, r1}
 800df24:	e883 0003 	stmia.w	r3, {r0, r1}
}
 800df28:	bf00      	nop
 800df2a:	3714      	adds	r7, #20
 800df2c:	46bd      	mov	sp, r7
 800df2e:	bd90      	pop	{r4, r7, pc}

0800df30 <csumup>:

static uint32_t csumup(uint32_t sum, const void *buf, size_t len) {
 800df30:	b480      	push	{r7}
 800df32:	b087      	sub	sp, #28
 800df34:	af00      	add	r7, sp, #0
 800df36:	60f8      	str	r0, [r7, #12]
 800df38:	60b9      	str	r1, [r7, #8]
 800df3a:	607a      	str	r2, [r7, #4]
  size_t i;
  const uint8_t *p = (const uint8_t *) buf;
 800df3c:	68bb      	ldr	r3, [r7, #8]
 800df3e:	613b      	str	r3, [r7, #16]
  for (i = 0; i < len; i++) sum += i & 1 ? p[i] : ((uint32_t) p[i]) << 8;
 800df40:	2300      	movs	r3, #0
 800df42:	617b      	str	r3, [r7, #20]
 800df44:	e014      	b.n	800df70 <csumup+0x40>
 800df46:	697b      	ldr	r3, [r7, #20]
 800df48:	f003 0301 	and.w	r3, r3, #1
 800df4c:	2b00      	cmp	r3, #0
 800df4e:	d004      	beq.n	800df5a <csumup+0x2a>
 800df50:	693a      	ldr	r2, [r7, #16]
 800df52:	697b      	ldr	r3, [r7, #20]
 800df54:	4413      	add	r3, r2
 800df56:	781b      	ldrb	r3, [r3, #0]
 800df58:	e004      	b.n	800df64 <csumup+0x34>
 800df5a:	693a      	ldr	r2, [r7, #16]
 800df5c:	697b      	ldr	r3, [r7, #20]
 800df5e:	4413      	add	r3, r2
 800df60:	781b      	ldrb	r3, [r3, #0]
 800df62:	021b      	lsls	r3, r3, #8
 800df64:	68fa      	ldr	r2, [r7, #12]
 800df66:	4413      	add	r3, r2
 800df68:	60fb      	str	r3, [r7, #12]
 800df6a:	697b      	ldr	r3, [r7, #20]
 800df6c:	3301      	adds	r3, #1
 800df6e:	617b      	str	r3, [r7, #20]
 800df70:	697a      	ldr	r2, [r7, #20]
 800df72:	687b      	ldr	r3, [r7, #4]
 800df74:	429a      	cmp	r2, r3
 800df76:	d3e6      	bcc.n	800df46 <csumup+0x16>
  return sum;
 800df78:	68fb      	ldr	r3, [r7, #12]
}
 800df7a:	4618      	mov	r0, r3
 800df7c:	371c      	adds	r7, #28
 800df7e:	46bd      	mov	sp, r7
 800df80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df84:	4770      	bx	lr

0800df86 <csumfin>:

static uint16_t csumfin(uint32_t sum) {
 800df86:	b580      	push	{r7, lr}
 800df88:	b082      	sub	sp, #8
 800df8a:	af00      	add	r7, sp, #0
 800df8c:	6078      	str	r0, [r7, #4]
  while (sum >> 16) sum = (sum & 0xffff) + (sum >> 16);
 800df8e:	e005      	b.n	800df9c <csumfin+0x16>
 800df90:	687b      	ldr	r3, [r7, #4]
 800df92:	b29a      	uxth	r2, r3
 800df94:	687b      	ldr	r3, [r7, #4]
 800df96:	0c1b      	lsrs	r3, r3, #16
 800df98:	4413      	add	r3, r2
 800df9a:	607b      	str	r3, [r7, #4]
 800df9c:	687b      	ldr	r3, [r7, #4]
 800df9e:	0c1b      	lsrs	r3, r3, #16
 800dfa0:	2b00      	cmp	r3, #0
 800dfa2:	d1f5      	bne.n	800df90 <csumfin+0xa>
  return mg_htons((uint16_t) ((uint16_t) ~sum & 0xffff));
 800dfa4:	687b      	ldr	r3, [r7, #4]
 800dfa6:	b29b      	uxth	r3, r3
 800dfa8:	43db      	mvns	r3, r3
 800dfaa:	b29b      	uxth	r3, r3
 800dfac:	4618      	mov	r0, r3
 800dfae:	f013 f8b8 	bl	8021122 <mg_ntohs>
 800dfb2:	4603      	mov	r3, r0
}
 800dfb4:	4618      	mov	r0, r3
 800dfb6:	3708      	adds	r7, #8
 800dfb8:	46bd      	mov	sp, r7
 800dfba:	bd80      	pop	{r7, pc}

0800dfbc <ipcsum>:

static uint16_t ipcsum(const void *buf, size_t len) {
 800dfbc:	b580      	push	{r7, lr}
 800dfbe:	b084      	sub	sp, #16
 800dfc0:	af00      	add	r7, sp, #0
 800dfc2:	6078      	str	r0, [r7, #4]
 800dfc4:	6039      	str	r1, [r7, #0]
  uint32_t sum = csumup(0, buf, len);
 800dfc6:	683a      	ldr	r2, [r7, #0]
 800dfc8:	6879      	ldr	r1, [r7, #4]
 800dfca:	2000      	movs	r0, #0
 800dfcc:	f7ff ffb0 	bl	800df30 <csumup>
 800dfd0:	60f8      	str	r0, [r7, #12]
  return csumfin(sum);
 800dfd2:	68f8      	ldr	r0, [r7, #12]
 800dfd4:	f7ff ffd7 	bl	800df86 <csumfin>
 800dfd8:	4603      	mov	r3, r0
}
 800dfda:	4618      	mov	r0, r3
 800dfdc:	3710      	adds	r7, #16
 800dfde:	46bd      	mov	sp, r7
 800dfe0:	bd80      	pop	{r7, pc}
	...

0800dfe4 <settmout>:

static void settmout(struct mg_connection *c, uint8_t type) {
 800dfe4:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800dfe8:	b088      	sub	sp, #32
 800dfea:	af02      	add	r7, sp, #8
 800dfec:	6078      	str	r0, [r7, #4]
 800dfee:	460b      	mov	r3, r1
 800dff0:	70fb      	strb	r3, [r7, #3]
  struct mg_tcpip_if *ifp = c->mgr->ifp;
 800dff2:	687b      	ldr	r3, [r7, #4]
 800dff4:	685b      	ldr	r3, [r3, #4]
 800dff6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800dff8:	617b      	str	r3, [r7, #20]
  struct connstate *s = (struct connstate *) (c + 1);
 800dffa:	687b      	ldr	r3, [r7, #4]
 800dffc:	33b8      	adds	r3, #184	@ 0xb8
 800dffe:	613b      	str	r3, [r7, #16]
  unsigned n = type == MIP_TTYPE_ACK   ? MIP_TCP_ACK_MS
               : type == MIP_TTYPE_ARP ? MIP_ARP_RESP_MS
 800e000:	78fb      	ldrb	r3, [r7, #3]
 800e002:	2b01      	cmp	r3, #1
 800e004:	d013      	beq.n	800e02e <settmout+0x4a>
 800e006:	78fb      	ldrb	r3, [r7, #3]
 800e008:	2b02      	cmp	r3, #2
 800e00a:	d00e      	beq.n	800e02a <settmout+0x46>
 800e00c:	78fb      	ldrb	r3, [r7, #3]
 800e00e:	2b03      	cmp	r3, #3
 800e010:	d008      	beq.n	800e024 <settmout+0x40>
 800e012:	78fb      	ldrb	r3, [r7, #3]
 800e014:	2b04      	cmp	r3, #4
 800e016:	d102      	bne.n	800e01e <settmout+0x3a>
 800e018:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800e01c:	e008      	b.n	800e030 <settmout+0x4c>
 800e01e:	f64a 73c8 	movw	r3, #45000	@ 0xafc8
 800e022:	e005      	b.n	800e030 <settmout+0x4c>
 800e024:	f643 2398 	movw	r3, #15000	@ 0x3a98
 800e028:	e002      	b.n	800e030 <settmout+0x4c>
 800e02a:	2364      	movs	r3, #100	@ 0x64
 800e02c:	e000      	b.n	800e030 <settmout+0x4c>
 800e02e:	2396      	movs	r3, #150	@ 0x96
  unsigned n = type == MIP_TTYPE_ACK   ? MIP_TCP_ACK_MS
 800e030:	60fb      	str	r3, [r7, #12]
               : type == MIP_TTYPE_SYN ? MIP_TCP_SYN_MS
               : type == MIP_TTYPE_FIN ? MIP_TCP_FIN_MS
                                       : MIP_TCP_KEEPALIVE_MS;
  if (s->ttype == MIP_TTYPE_FIN) return;  // skip if 3-way closing
 800e032:	693b      	ldr	r3, [r7, #16]
 800e034:	f893 3020 	ldrb.w	r3, [r3, #32]
 800e038:	2b04      	cmp	r3, #4
 800e03a:	d029      	beq.n	800e090 <settmout+0xac>
  s->timer = ifp->now + n;
 800e03c:	697b      	ldr	r3, [r7, #20]
 800e03e:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	@ 0x68
 800e042:	68f9      	ldr	r1, [r7, #12]
 800e044:	2000      	movs	r0, #0
 800e046:	460c      	mov	r4, r1
 800e048:	4605      	mov	r5, r0
 800e04a:	eb12 0804 	adds.w	r8, r2, r4
 800e04e:	eb43 0905 	adc.w	r9, r3, r5
 800e052:	693b      	ldr	r3, [r7, #16]
 800e054:	e9c3 8902 	strd	r8, r9, [r3, #8]
  s->ttype = type;
 800e058:	693b      	ldr	r3, [r7, #16]
 800e05a:	78fa      	ldrb	r2, [r7, #3]
 800e05c:	f883 2020 	strb.w	r2, [r3, #32]
  MG_VERBOSE(("%lu %d -> %llx", c->id, type, s->timer));
 800e060:	4b0e      	ldr	r3, [pc, #56]	@ (800e09c <settmout+0xb8>)
 800e062:	681b      	ldr	r3, [r3, #0]
 800e064:	2b03      	cmp	r3, #3
 800e066:	dd14      	ble.n	800e092 <settmout+0xae>
 800e068:	4b0d      	ldr	r3, [pc, #52]	@ (800e0a0 <settmout+0xbc>)
 800e06a:	f241 1219 	movw	r2, #4377	@ 0x1119
 800e06e:	490d      	ldr	r1, [pc, #52]	@ (800e0a4 <settmout+0xc0>)
 800e070:	2004      	movs	r0, #4
 800e072:	f7ff f89b 	bl	800d1ac <mg_log_prefix>
 800e076:	687b      	ldr	r3, [r7, #4]
 800e078:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 800e07a:	78f8      	ldrb	r0, [r7, #3]
 800e07c:	693b      	ldr	r3, [r7, #16]
 800e07e:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800e082:	e9cd 2300 	strd	r2, r3, [sp]
 800e086:	4602      	mov	r2, r0
 800e088:	4807      	ldr	r0, [pc, #28]	@ (800e0a8 <settmout+0xc4>)
 800e08a:	f7ff f8df 	bl	800d24c <mg_log>
 800e08e:	e000      	b.n	800e092 <settmout+0xae>
  if (s->ttype == MIP_TTYPE_FIN) return;  // skip if 3-way closing
 800e090:	bf00      	nop
}
 800e092:	3718      	adds	r7, #24
 800e094:	46bd      	mov	sp, r7
 800e096:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800e09a:	bf00      	nop
 800e09c:	20000258 	.word	0x20000258
 800e0a0:	08028850 	.word	0x08028850
 800e0a4:	08025140 	.word	0x08025140
 800e0a8:	08026168 	.word	0x08026168

0800e0ac <ether_output>:

static size_t ether_output(struct mg_tcpip_if *ifp, size_t len) {
 800e0ac:	b580      	push	{r7, lr}
 800e0ae:	b084      	sub	sp, #16
 800e0b0:	af00      	add	r7, sp, #0
 800e0b2:	6078      	str	r0, [r7, #4]
 800e0b4:	6039      	str	r1, [r7, #0]
  size_t n = ifp->driver->tx(ifp->tx.buf, len, ifp);
 800e0b6:	687b      	ldr	r3, [r7, #4]
 800e0b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e0ba:	685b      	ldr	r3, [r3, #4]
 800e0bc:	687a      	ldr	r2, [r7, #4]
 800e0be:	6950      	ldr	r0, [r2, #20]
 800e0c0:	687a      	ldr	r2, [r7, #4]
 800e0c2:	6839      	ldr	r1, [r7, #0]
 800e0c4:	4798      	blx	r3
 800e0c6:	60f8      	str	r0, [r7, #12]
  if (n == len) ifp->nsent++;
 800e0c8:	68fa      	ldr	r2, [r7, #12]
 800e0ca:	683b      	ldr	r3, [r7, #0]
 800e0cc:	429a      	cmp	r2, r3
 800e0ce:	d106      	bne.n	800e0de <ether_output+0x32>
 800e0d0:	687b      	ldr	r3, [r7, #4]
 800e0d2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800e0d6:	1c5a      	adds	r2, r3, #1
 800e0d8:	687b      	ldr	r3, [r7, #4]
 800e0da:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  return n;
 800e0de:	68fb      	ldr	r3, [r7, #12]
}
 800e0e0:	4618      	mov	r0, r3
 800e0e2:	3710      	adds	r7, #16
 800e0e4:	46bd      	mov	sp, r7
 800e0e6:	bd80      	pop	{r7, pc}

0800e0e8 <mg_tcpip_arp_request>:

void mg_tcpip_arp_request(struct mg_tcpip_if *ifp, uint32_t ip, uint8_t *mac) {
 800e0e8:	b580      	push	{r7, lr}
 800e0ea:	b086      	sub	sp, #24
 800e0ec:	af00      	add	r7, sp, #0
 800e0ee:	60f8      	str	r0, [r7, #12]
 800e0f0:	60b9      	str	r1, [r7, #8]
 800e0f2:	607a      	str	r2, [r7, #4]
  struct eth *eth = (struct eth *) ifp->tx.buf;
 800e0f4:	68fb      	ldr	r3, [r7, #12]
 800e0f6:	695b      	ldr	r3, [r3, #20]
 800e0f8:	617b      	str	r3, [r7, #20]
  struct arp *arp = (struct arp *) (eth + 1);
 800e0fa:	697b      	ldr	r3, [r7, #20]
 800e0fc:	330e      	adds	r3, #14
 800e0fe:	613b      	str	r3, [r7, #16]
  memset(eth->dst, 255, sizeof(eth->dst));
 800e100:	697b      	ldr	r3, [r7, #20]
 800e102:	2206      	movs	r2, #6
 800e104:	21ff      	movs	r1, #255	@ 0xff
 800e106:	4618      	mov	r0, r3
 800e108:	f016 f9c0 	bl	802448c <memset>
  memcpy(eth->src, ifp->mac, sizeof(eth->src));
 800e10c:	697b      	ldr	r3, [r7, #20]
 800e10e:	3306      	adds	r3, #6
 800e110:	68f9      	ldr	r1, [r7, #12]
 800e112:	2206      	movs	r2, #6
 800e114:	4618      	mov	r0, r3
 800e116:	f016 fb36 	bl	8024786 <memcpy>
  eth->type = mg_htons(0x806);
 800e11a:	f640 0006 	movw	r0, #2054	@ 0x806
 800e11e:	f013 f800 	bl	8021122 <mg_ntohs>
 800e122:	4603      	mov	r3, r0
 800e124:	461a      	mov	r2, r3
 800e126:	697b      	ldr	r3, [r7, #20]
 800e128:	819a      	strh	r2, [r3, #12]
  memset(arp, 0, sizeof(*arp));
 800e12a:	221c      	movs	r2, #28
 800e12c:	2100      	movs	r1, #0
 800e12e:	6938      	ldr	r0, [r7, #16]
 800e130:	f016 f9ac 	bl	802448c <memset>
  arp->fmt = mg_htons(1), arp->pro = mg_htons(0x800), arp->hlen = 6,
 800e134:	2001      	movs	r0, #1
 800e136:	f012 fff4 	bl	8021122 <mg_ntohs>
 800e13a:	4603      	mov	r3, r0
 800e13c:	461a      	mov	r2, r3
 800e13e:	693b      	ldr	r3, [r7, #16]
 800e140:	801a      	strh	r2, [r3, #0]
 800e142:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 800e146:	f012 ffec 	bl	8021122 <mg_ntohs>
 800e14a:	4603      	mov	r3, r0
 800e14c:	461a      	mov	r2, r3
 800e14e:	693b      	ldr	r3, [r7, #16]
 800e150:	805a      	strh	r2, [r3, #2]
 800e152:	693b      	ldr	r3, [r7, #16]
 800e154:	2206      	movs	r2, #6
 800e156:	711a      	strb	r2, [r3, #4]
  arp->plen = 4;
 800e158:	693b      	ldr	r3, [r7, #16]
 800e15a:	2204      	movs	r2, #4
 800e15c:	715a      	strb	r2, [r3, #5]
  arp->op = mg_htons(1), arp->tpa = ip, arp->spa = ifp->ip;
 800e15e:	2001      	movs	r0, #1
 800e160:	f012 ffdf 	bl	8021122 <mg_ntohs>
 800e164:	4603      	mov	r3, r0
 800e166:	461a      	mov	r2, r3
 800e168:	693b      	ldr	r3, [r7, #16]
 800e16a:	80da      	strh	r2, [r3, #6]
 800e16c:	693b      	ldr	r3, [r7, #16]
 800e16e:	68ba      	ldr	r2, [r7, #8]
 800e170:	619a      	str	r2, [r3, #24]
 800e172:	68fb      	ldr	r3, [r7, #12]
 800e174:	689a      	ldr	r2, [r3, #8]
 800e176:	693b      	ldr	r3, [r7, #16]
 800e178:	f8c3 200e 	str.w	r2, [r3, #14]
  memcpy(arp->sha, ifp->mac, sizeof(arp->sha));
 800e17c:	693b      	ldr	r3, [r7, #16]
 800e17e:	3308      	adds	r3, #8
 800e180:	68f9      	ldr	r1, [r7, #12]
 800e182:	2206      	movs	r2, #6
 800e184:	4618      	mov	r0, r3
 800e186:	f016 fafe 	bl	8024786 <memcpy>
  if (mac != NULL) memcpy(arp->tha, mac, sizeof(arp->tha));
 800e18a:	687b      	ldr	r3, [r7, #4]
 800e18c:	2b00      	cmp	r3, #0
 800e18e:	d006      	beq.n	800e19e <mg_tcpip_arp_request+0xb6>
 800e190:	693b      	ldr	r3, [r7, #16]
 800e192:	3312      	adds	r3, #18
 800e194:	2206      	movs	r2, #6
 800e196:	6879      	ldr	r1, [r7, #4]
 800e198:	4618      	mov	r0, r3
 800e19a:	f016 faf4 	bl	8024786 <memcpy>
  ether_output(ifp, PDIFF(eth, arp + 1));
 800e19e:	693b      	ldr	r3, [r7, #16]
 800e1a0:	f103 021c 	add.w	r2, r3, #28
 800e1a4:	697b      	ldr	r3, [r7, #20]
 800e1a6:	1ad3      	subs	r3, r2, r3
 800e1a8:	4619      	mov	r1, r3
 800e1aa:	68f8      	ldr	r0, [r7, #12]
 800e1ac:	f7ff ff7e 	bl	800e0ac <ether_output>
}
 800e1b0:	bf00      	nop
 800e1b2:	3718      	adds	r7, #24
 800e1b4:	46bd      	mov	sp, r7
 800e1b6:	bd80      	pop	{r7, pc}

0800e1b8 <onstatechange>:

static void onstatechange(struct mg_tcpip_if *ifp) {
 800e1b8:	b580      	push	{r7, lr}
 800e1ba:	b082      	sub	sp, #8
 800e1bc:	af00      	add	r7, sp, #0
 800e1be:	6078      	str	r0, [r7, #4]
  if (ifp->state == MG_TCPIP_STATE_READY) {
 800e1c0:	687b      	ldr	r3, [r7, #4]
 800e1c2:	f893 3094 	ldrb.w	r3, [r3, #148]	@ 0x94
 800e1c6:	2b04      	cmp	r3, #4
 800e1c8:	d135      	bne.n	800e236 <onstatechange+0x7e>
    MG_INFO(("READY, IP: %M", mg_print_ip4, &ifp->ip));
 800e1ca:	4b37      	ldr	r3, [pc, #220]	@ (800e2a8 <onstatechange+0xf0>)
 800e1cc:	681b      	ldr	r3, [r3, #0]
 800e1ce:	2b01      	cmp	r3, #1
 800e1d0:	dd0d      	ble.n	800e1ee <onstatechange+0x36>
 800e1d2:	4b36      	ldr	r3, [pc, #216]	@ (800e2ac <onstatechange+0xf4>)
 800e1d4:	f241 1233 	movw	r2, #4403	@ 0x1133
 800e1d8:	4935      	ldr	r1, [pc, #212]	@ (800e2b0 <onstatechange+0xf8>)
 800e1da:	2002      	movs	r0, #2
 800e1dc:	f7fe ffe6 	bl	800d1ac <mg_log_prefix>
 800e1e0:	687b      	ldr	r3, [r7, #4]
 800e1e2:	3308      	adds	r3, #8
 800e1e4:	461a      	mov	r2, r3
 800e1e6:	4933      	ldr	r1, [pc, #204]	@ (800e2b4 <onstatechange+0xfc>)
 800e1e8:	4833      	ldr	r0, [pc, #204]	@ (800e2b8 <onstatechange+0x100>)
 800e1ea:	f7ff f82f 	bl	800d24c <mg_log>
    MG_INFO(("       GW: %M", mg_print_ip4, &ifp->gw));
 800e1ee:	4b2e      	ldr	r3, [pc, #184]	@ (800e2a8 <onstatechange+0xf0>)
 800e1f0:	681b      	ldr	r3, [r3, #0]
 800e1f2:	2b01      	cmp	r3, #1
 800e1f4:	dd0d      	ble.n	800e212 <onstatechange+0x5a>
 800e1f6:	4b2d      	ldr	r3, [pc, #180]	@ (800e2ac <onstatechange+0xf4>)
 800e1f8:	f241 1234 	movw	r2, #4404	@ 0x1134
 800e1fc:	492c      	ldr	r1, [pc, #176]	@ (800e2b0 <onstatechange+0xf8>)
 800e1fe:	2002      	movs	r0, #2
 800e200:	f7fe ffd4 	bl	800d1ac <mg_log_prefix>
 800e204:	687b      	ldr	r3, [r7, #4]
 800e206:	3310      	adds	r3, #16
 800e208:	461a      	mov	r2, r3
 800e20a:	492a      	ldr	r1, [pc, #168]	@ (800e2b4 <onstatechange+0xfc>)
 800e20c:	482b      	ldr	r0, [pc, #172]	@ (800e2bc <onstatechange+0x104>)
 800e20e:	f7ff f81d 	bl	800d24c <mg_log>
    MG_INFO(("      MAC: %M", mg_print_mac, &ifp->mac));
 800e212:	4b25      	ldr	r3, [pc, #148]	@ (800e2a8 <onstatechange+0xf0>)
 800e214:	681b      	ldr	r3, [r3, #0]
 800e216:	2b01      	cmp	r3, #1
 800e218:	dd3b      	ble.n	800e292 <onstatechange+0xda>
 800e21a:	4b24      	ldr	r3, [pc, #144]	@ (800e2ac <onstatechange+0xf4>)
 800e21c:	f241 1235 	movw	r2, #4405	@ 0x1135
 800e220:	4923      	ldr	r1, [pc, #140]	@ (800e2b0 <onstatechange+0xf8>)
 800e222:	2002      	movs	r0, #2
 800e224:	f7fe ffc2 	bl	800d1ac <mg_log_prefix>
 800e228:	687b      	ldr	r3, [r7, #4]
 800e22a:	461a      	mov	r2, r3
 800e22c:	4924      	ldr	r1, [pc, #144]	@ (800e2c0 <onstatechange+0x108>)
 800e22e:	4825      	ldr	r0, [pc, #148]	@ (800e2c4 <onstatechange+0x10c>)
 800e230:	f7ff f80c 	bl	800d24c <mg_log>
 800e234:	e02d      	b.n	800e292 <onstatechange+0xda>
  } else if (ifp->state == MG_TCPIP_STATE_IP) {
 800e236:	687b      	ldr	r3, [r7, #4]
 800e238:	f893 3094 	ldrb.w	r3, [r3, #148]	@ 0x94
 800e23c:	2b03      	cmp	r3, #3
 800e23e:	d107      	bne.n	800e250 <onstatechange+0x98>
    mg_tcpip_arp_request(ifp, ifp->gw, NULL);  // unsolicited GW ARP request
 800e240:	687b      	ldr	r3, [r7, #4]
 800e242:	691b      	ldr	r3, [r3, #16]
 800e244:	2200      	movs	r2, #0
 800e246:	4619      	mov	r1, r3
 800e248:	6878      	ldr	r0, [r7, #4]
 800e24a:	f7ff ff4d 	bl	800e0e8 <mg_tcpip_arp_request>
 800e24e:	e020      	b.n	800e292 <onstatechange+0xda>
  } else if (ifp->state == MG_TCPIP_STATE_UP) {
 800e250:	687b      	ldr	r3, [r7, #4]
 800e252:	f893 3094 	ldrb.w	r3, [r3, #148]	@ 0x94
 800e256:	2b01      	cmp	r3, #1
 800e258:	d108      	bne.n	800e26c <onstatechange+0xb4>
    srand((unsigned int) mg_millis());
 800e25a:	f012 ff55 	bl	8021108 <mg_millis>
 800e25e:	4602      	mov	r2, r0
 800e260:	460b      	mov	r3, r1
 800e262:	4613      	mov	r3, r2
 800e264:	4618      	mov	r0, r3
 800e266:	f015 fe11 	bl	8023e8c <srand>
 800e26a:	e012      	b.n	800e292 <onstatechange+0xda>
  } else if (ifp->state == MG_TCPIP_STATE_DOWN) {
 800e26c:	687b      	ldr	r3, [r7, #4]
 800e26e:	f893 3094 	ldrb.w	r3, [r3, #148]	@ 0x94
 800e272:	2b00      	cmp	r3, #0
 800e274:	d10d      	bne.n	800e292 <onstatechange+0xda>
    MG_ERROR(("Link down"));
 800e276:	4b0c      	ldr	r3, [pc, #48]	@ (800e2a8 <onstatechange+0xf0>)
 800e278:	681b      	ldr	r3, [r3, #0]
 800e27a:	2b00      	cmp	r3, #0
 800e27c:	dd09      	ble.n	800e292 <onstatechange+0xda>
 800e27e:	4b0b      	ldr	r3, [pc, #44]	@ (800e2ac <onstatechange+0xf4>)
 800e280:	f241 123b 	movw	r2, #4411	@ 0x113b
 800e284:	490a      	ldr	r1, [pc, #40]	@ (800e2b0 <onstatechange+0xf8>)
 800e286:	2001      	movs	r0, #1
 800e288:	f7fe ff90 	bl	800d1ac <mg_log_prefix>
 800e28c:	480e      	ldr	r0, [pc, #56]	@ (800e2c8 <onstatechange+0x110>)
 800e28e:	f7fe ffdd 	bl	800d24c <mg_log>
  }
  mg_tcpip_call(ifp, MG_TCPIP_EV_ST_CHG, &ifp->state);
 800e292:	687b      	ldr	r3, [r7, #4]
 800e294:	3394      	adds	r3, #148	@ 0x94
 800e296:	461a      	mov	r2, r3
 800e298:	2100      	movs	r1, #0
 800e29a:	6878      	ldr	r0, [r7, #4]
 800e29c:	f7ff fe0c 	bl	800deb8 <mg_tcpip_call>
}
 800e2a0:	bf00      	nop
 800e2a2:	3708      	adds	r7, #8
 800e2a4:	46bd      	mov	sp, r7
 800e2a6:	bd80      	pop	{r7, pc}
 800e2a8:	20000258 	.word	0x20000258
 800e2ac:	0802885c 	.word	0x0802885c
 800e2b0:	08025140 	.word	0x08025140
 800e2b4:	080123b9 	.word	0x080123b9
 800e2b8:	08026178 	.word	0x08026178
 800e2bc:	08026188 	.word	0x08026188
 800e2c0:	080124a9 	.word	0x080124a9
 800e2c4:	08026198 	.word	0x08026198
 800e2c8:	080261a8 	.word	0x080261a8

0800e2cc <tx_ip>:

static struct ip *tx_ip(struct mg_tcpip_if *ifp, uint8_t *mac_dst,
                        uint8_t proto, uint32_t ip_src, uint32_t ip_dst,
                        size_t plen) {
 800e2cc:	b580      	push	{r7, lr}
 800e2ce:	b086      	sub	sp, #24
 800e2d0:	af00      	add	r7, sp, #0
 800e2d2:	60f8      	str	r0, [r7, #12]
 800e2d4:	60b9      	str	r1, [r7, #8]
 800e2d6:	603b      	str	r3, [r7, #0]
 800e2d8:	4613      	mov	r3, r2
 800e2da:	71fb      	strb	r3, [r7, #7]
  struct eth *eth = (struct eth *) ifp->tx.buf;
 800e2dc:	68fb      	ldr	r3, [r7, #12]
 800e2de:	695b      	ldr	r3, [r3, #20]
 800e2e0:	617b      	str	r3, [r7, #20]
  struct ip *ip = (struct ip *) (eth + 1);
 800e2e2:	697b      	ldr	r3, [r7, #20]
 800e2e4:	330e      	adds	r3, #14
 800e2e6:	613b      	str	r3, [r7, #16]
  memcpy(eth->dst, mac_dst, sizeof(eth->dst));
 800e2e8:	697b      	ldr	r3, [r7, #20]
 800e2ea:	2206      	movs	r2, #6
 800e2ec:	68b9      	ldr	r1, [r7, #8]
 800e2ee:	4618      	mov	r0, r3
 800e2f0:	f016 fa49 	bl	8024786 <memcpy>
  memcpy(eth->src, ifp->mac, sizeof(eth->src));  // Use our MAC
 800e2f4:	697b      	ldr	r3, [r7, #20]
 800e2f6:	3306      	adds	r3, #6
 800e2f8:	68f9      	ldr	r1, [r7, #12]
 800e2fa:	2206      	movs	r2, #6
 800e2fc:	4618      	mov	r0, r3
 800e2fe:	f016 fa42 	bl	8024786 <memcpy>
  eth->type = mg_htons(0x800);
 800e302:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 800e306:	f012 ff0c 	bl	8021122 <mg_ntohs>
 800e30a:	4603      	mov	r3, r0
 800e30c:	461a      	mov	r2, r3
 800e30e:	697b      	ldr	r3, [r7, #20]
 800e310:	819a      	strh	r2, [r3, #12]
  memset(ip, 0, sizeof(*ip));
 800e312:	2214      	movs	r2, #20
 800e314:	2100      	movs	r1, #0
 800e316:	6938      	ldr	r0, [r7, #16]
 800e318:	f016 f8b8 	bl	802448c <memset>
  ip->ver = 0x45;               // Version 4, header length 5 words
 800e31c:	693b      	ldr	r3, [r7, #16]
 800e31e:	2245      	movs	r2, #69	@ 0x45
 800e320:	701a      	strb	r2, [r3, #0]
  ip->frag = mg_htons(0x4000);  // Don't fragment
 800e322:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 800e326:	f012 fefc 	bl	8021122 <mg_ntohs>
 800e32a:	4603      	mov	r3, r0
 800e32c:	461a      	mov	r2, r3
 800e32e:	693b      	ldr	r3, [r7, #16]
 800e330:	80da      	strh	r2, [r3, #6]
  ip->len = mg_htons((uint16_t) (sizeof(*ip) + plen));
 800e332:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e334:	b29b      	uxth	r3, r3
 800e336:	3314      	adds	r3, #20
 800e338:	b29b      	uxth	r3, r3
 800e33a:	4618      	mov	r0, r3
 800e33c:	f012 fef1 	bl	8021122 <mg_ntohs>
 800e340:	4603      	mov	r3, r0
 800e342:	461a      	mov	r2, r3
 800e344:	693b      	ldr	r3, [r7, #16]
 800e346:	805a      	strh	r2, [r3, #2]
  ip->ttl = 64;
 800e348:	693b      	ldr	r3, [r7, #16]
 800e34a:	2240      	movs	r2, #64	@ 0x40
 800e34c:	721a      	strb	r2, [r3, #8]
  ip->proto = proto;
 800e34e:	693b      	ldr	r3, [r7, #16]
 800e350:	79fa      	ldrb	r2, [r7, #7]
 800e352:	725a      	strb	r2, [r3, #9]
  ip->src = ip_src;
 800e354:	693b      	ldr	r3, [r7, #16]
 800e356:	683a      	ldr	r2, [r7, #0]
 800e358:	60da      	str	r2, [r3, #12]
  ip->dst = ip_dst;
 800e35a:	693b      	ldr	r3, [r7, #16]
 800e35c:	6a3a      	ldr	r2, [r7, #32]
 800e35e:	611a      	str	r2, [r3, #16]
  ip->csum = ipcsum(ip, sizeof(*ip));
 800e360:	2114      	movs	r1, #20
 800e362:	6938      	ldr	r0, [r7, #16]
 800e364:	f7ff fe2a 	bl	800dfbc <ipcsum>
 800e368:	4603      	mov	r3, r0
 800e36a:	461a      	mov	r2, r3
 800e36c:	693b      	ldr	r3, [r7, #16]
 800e36e:	815a      	strh	r2, [r3, #10]
  return ip;
 800e370:	693b      	ldr	r3, [r7, #16]
}
 800e372:	4618      	mov	r0, r3
 800e374:	3718      	adds	r7, #24
 800e376:	46bd      	mov	sp, r7
 800e378:	bd80      	pop	{r7, pc}

0800e37a <tx_udp>:

static bool tx_udp(struct mg_tcpip_if *ifp, uint8_t *mac_dst, uint32_t ip_src,
                   uint16_t sport, uint32_t ip_dst, uint16_t dport,
                   const void *buf, size_t len) {
 800e37a:	b580      	push	{r7, lr}
 800e37c:	b08a      	sub	sp, #40	@ 0x28
 800e37e:	af02      	add	r7, sp, #8
 800e380:	60f8      	str	r0, [r7, #12]
 800e382:	60b9      	str	r1, [r7, #8]
 800e384:	607a      	str	r2, [r7, #4]
 800e386:	807b      	strh	r3, [r7, #2]
  struct ip *ip =
      tx_ip(ifp, mac_dst, 17, ip_src, ip_dst, len + sizeof(struct udp));
 800e388:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e38a:	3308      	adds	r3, #8
 800e38c:	9301      	str	r3, [sp, #4]
 800e38e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e390:	9300      	str	r3, [sp, #0]
 800e392:	687b      	ldr	r3, [r7, #4]
 800e394:	2211      	movs	r2, #17
 800e396:	68b9      	ldr	r1, [r7, #8]
 800e398:	68f8      	ldr	r0, [r7, #12]
 800e39a:	f7ff ff97 	bl	800e2cc <tx_ip>
 800e39e:	61f8      	str	r0, [r7, #28]
  struct udp *udp = (struct udp *) (ip + 1);
 800e3a0:	69fb      	ldr	r3, [r7, #28]
 800e3a2:	3314      	adds	r3, #20
 800e3a4:	61bb      	str	r3, [r7, #24]
  size_t eth_len;
  uint32_t cs;
  // MG_DEBUG(("UDP XX LEN %d %d", (int) len, (int) ifp->tx.len));
  udp->sport = sport;
 800e3a6:	69bb      	ldr	r3, [r7, #24]
 800e3a8:	887a      	ldrh	r2, [r7, #2]
 800e3aa:	801a      	strh	r2, [r3, #0]
  udp->dport = dport;
 800e3ac:	69bb      	ldr	r3, [r7, #24]
 800e3ae:	8dba      	ldrh	r2, [r7, #44]	@ 0x2c
 800e3b0:	805a      	strh	r2, [r3, #2]
  udp->len = mg_htons((uint16_t) (sizeof(*udp) + len));
 800e3b2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e3b4:	b29b      	uxth	r3, r3
 800e3b6:	3308      	adds	r3, #8
 800e3b8:	b29b      	uxth	r3, r3
 800e3ba:	4618      	mov	r0, r3
 800e3bc:	f012 feb1 	bl	8021122 <mg_ntohs>
 800e3c0:	4603      	mov	r3, r0
 800e3c2:	461a      	mov	r2, r3
 800e3c4:	69bb      	ldr	r3, [r7, #24]
 800e3c6:	809a      	strh	r2, [r3, #4]
  udp->csum = 0;
 800e3c8:	69bb      	ldr	r3, [r7, #24]
 800e3ca:	2200      	movs	r2, #0
 800e3cc:	719a      	strb	r2, [r3, #6]
 800e3ce:	2200      	movs	r2, #0
 800e3d0:	71da      	strb	r2, [r3, #7]
  cs = csumup(0, udp, sizeof(*udp));
 800e3d2:	2208      	movs	r2, #8
 800e3d4:	69b9      	ldr	r1, [r7, #24]
 800e3d6:	2000      	movs	r0, #0
 800e3d8:	f7ff fdaa 	bl	800df30 <csumup>
 800e3dc:	6178      	str	r0, [r7, #20]
  cs = csumup(cs, buf, len);
 800e3de:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800e3e0:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800e3e2:	6978      	ldr	r0, [r7, #20]
 800e3e4:	f7ff fda4 	bl	800df30 <csumup>
 800e3e8:	6178      	str	r0, [r7, #20]
  cs = csumup(cs, &ip->src, sizeof(ip->src));
 800e3ea:	69fb      	ldr	r3, [r7, #28]
 800e3ec:	330c      	adds	r3, #12
 800e3ee:	2204      	movs	r2, #4
 800e3f0:	4619      	mov	r1, r3
 800e3f2:	6978      	ldr	r0, [r7, #20]
 800e3f4:	f7ff fd9c 	bl	800df30 <csumup>
 800e3f8:	6178      	str	r0, [r7, #20]
  cs = csumup(cs, &ip->dst, sizeof(ip->dst));
 800e3fa:	69fb      	ldr	r3, [r7, #28]
 800e3fc:	3310      	adds	r3, #16
 800e3fe:	2204      	movs	r2, #4
 800e400:	4619      	mov	r1, r3
 800e402:	6978      	ldr	r0, [r7, #20]
 800e404:	f7ff fd94 	bl	800df30 <csumup>
 800e408:	6178      	str	r0, [r7, #20]
  cs += (uint32_t) (ip->proto + sizeof(*udp) + len);
 800e40a:	69fb      	ldr	r3, [r7, #28]
 800e40c:	7a5b      	ldrb	r3, [r3, #9]
 800e40e:	461a      	mov	r2, r3
 800e410:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e412:	441a      	add	r2, r3
 800e414:	697b      	ldr	r3, [r7, #20]
 800e416:	4413      	add	r3, r2
 800e418:	3308      	adds	r3, #8
 800e41a:	617b      	str	r3, [r7, #20]
  udp->csum = csumfin(cs);
 800e41c:	6978      	ldr	r0, [r7, #20]
 800e41e:	f7ff fdb2 	bl	800df86 <csumfin>
 800e422:	4603      	mov	r3, r0
 800e424:	461a      	mov	r2, r3
 800e426:	69bb      	ldr	r3, [r7, #24]
 800e428:	80da      	strh	r2, [r3, #6]
  memmove(udp + 1, buf, len);
 800e42a:	69bb      	ldr	r3, [r7, #24]
 800e42c:	3308      	adds	r3, #8
 800e42e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800e430:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800e432:	4618      	mov	r0, r3
 800e434:	f016 f810 	bl	8024458 <memmove>
  // MG_DEBUG(("UDP LEN %d %d", (int) len, (int) ifp->frame_len));
  eth_len = sizeof(struct eth) + sizeof(*ip) + sizeof(*udp) + len;
 800e438:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e43a:	332a      	adds	r3, #42	@ 0x2a
 800e43c:	613b      	str	r3, [r7, #16]
  return (ether_output(ifp, eth_len) == eth_len);
 800e43e:	6939      	ldr	r1, [r7, #16]
 800e440:	68f8      	ldr	r0, [r7, #12]
 800e442:	f7ff fe33 	bl	800e0ac <ether_output>
 800e446:	4602      	mov	r2, r0
 800e448:	693b      	ldr	r3, [r7, #16]
 800e44a:	4293      	cmp	r3, r2
 800e44c:	bf0c      	ite	eq
 800e44e:	2301      	moveq	r3, #1
 800e450:	2300      	movne	r3, #0
 800e452:	b2db      	uxtb	r3, r3
}
 800e454:	4618      	mov	r0, r3
 800e456:	3720      	adds	r7, #32
 800e458:	46bd      	mov	sp, r7
 800e45a:	bd80      	pop	{r7, pc}

0800e45c <tx_dhcp>:

static void tx_dhcp(struct mg_tcpip_if *ifp, uint8_t *mac_dst, uint32_t ip_src,
                    uint32_t ip_dst, uint8_t *opts, size_t optslen,
                    bool ciaddr) {
 800e45c:	b5b0      	push	{r4, r5, r7, lr}
 800e45e:	b0d0      	sub	sp, #320	@ 0x140
 800e460:	af04      	add	r7, sp, #16
 800e462:	f507 7498 	add.w	r4, r7, #304	@ 0x130
 800e466:	f5a4 7492 	sub.w	r4, r4, #292	@ 0x124
 800e46a:	6020      	str	r0, [r4, #0]
 800e46c:	f507 7098 	add.w	r0, r7, #304	@ 0x130
 800e470:	f5a0 7094 	sub.w	r0, r0, #296	@ 0x128
 800e474:	6001      	str	r1, [r0, #0]
 800e476:	f507 7198 	add.w	r1, r7, #304	@ 0x130
 800e47a:	f5a1 7196 	sub.w	r1, r1, #300	@ 0x12c
 800e47e:	600a      	str	r2, [r1, #0]
 800e480:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800e484:	f5a2 7298 	sub.w	r2, r2, #304	@ 0x130
 800e488:	6013      	str	r3, [r2, #0]
  // https://datatracker.ietf.org/doc/html/rfc2132#section-9.6
  struct dhcp dhcp = {1, 1, 6, 0, 0, 0, 0, 0, 0, 0, 0, {0}, 0, {0}};
 800e48a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800e48e:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800e492:	4a38      	ldr	r2, [pc, #224]	@ (800e574 <tx_dhcp+0x118>)
 800e494:	4618      	mov	r0, r3
 800e496:	4611      	mov	r1, r2
 800e498:	f44f 7390 	mov.w	r3, #288	@ 0x120
 800e49c:	461a      	mov	r2, r3
 800e49e:	f016 f972 	bl	8024786 <memcpy>
  dhcp.magic = mg_htonl(0x63825363);
 800e4a2:	4835      	ldr	r0, [pc, #212]	@ (800e578 <tx_dhcp+0x11c>)
 800e4a4:	f012 fe54 	bl	8021150 <mg_ntohl>
 800e4a8:	4602      	mov	r2, r0
 800e4aa:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800e4ae:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800e4b2:	f8c3 20ec 	str.w	r2, [r3, #236]	@ 0xec
  memcpy(&dhcp.hwaddr, ifp->mac, sizeof(ifp->mac));
 800e4b6:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800e4ba:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 800e4be:	6819      	ldr	r1, [r3, #0]
 800e4c0:	f107 0310 	add.w	r3, r7, #16
 800e4c4:	331c      	adds	r3, #28
 800e4c6:	2206      	movs	r2, #6
 800e4c8:	4618      	mov	r0, r3
 800e4ca:	f016 f95c 	bl	8024786 <memcpy>
  memcpy(&dhcp.xid, ifp->mac + 2, sizeof(dhcp.xid));
 800e4ce:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800e4d2:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 800e4d6:	681b      	ldr	r3, [r3, #0]
 800e4d8:	3302      	adds	r3, #2
 800e4da:	681b      	ldr	r3, [r3, #0]
 800e4dc:	461a      	mov	r2, r3
 800e4de:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800e4e2:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800e4e6:	605a      	str	r2, [r3, #4]
  memcpy(&dhcp.options, opts, optslen);
 800e4e8:	f107 0310 	add.w	r3, r7, #16
 800e4ec:	33f0      	adds	r3, #240	@ 0xf0
 800e4ee:	f8d7 2144 	ldr.w	r2, [r7, #324]	@ 0x144
 800e4f2:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 800e4f6:	4618      	mov	r0, r3
 800e4f8:	f016 f945 	bl	8024786 <memcpy>
  if (ciaddr) dhcp.ciaddr = ip_src;
 800e4fc:	f897 3148 	ldrb.w	r3, [r7, #328]	@ 0x148
 800e500:	2b00      	cmp	r3, #0
 800e502:	d009      	beq.n	800e518 <tx_dhcp+0xbc>
 800e504:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800e508:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800e50c:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800e510:	f5a2 7296 	sub.w	r2, r2, #300	@ 0x12c
 800e514:	6812      	ldr	r2, [r2, #0]
 800e516:	60da      	str	r2, [r3, #12]
  tx_udp(ifp, mac_dst, ip_src, mg_htons(68), ip_dst, mg_htons(67), &dhcp,
 800e518:	2044      	movs	r0, #68	@ 0x44
 800e51a:	f012 fe02 	bl	8021122 <mg_ntohs>
 800e51e:	4603      	mov	r3, r0
 800e520:	461d      	mov	r5, r3
 800e522:	2043      	movs	r0, #67	@ 0x43
 800e524:	f012 fdfd 	bl	8021122 <mg_ntohs>
 800e528:	4603      	mov	r3, r0
 800e52a:	461c      	mov	r4, r3
 800e52c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800e530:	f5a3 7296 	sub.w	r2, r3, #300	@ 0x12c
 800e534:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800e538:	f5a3 7194 	sub.w	r1, r3, #296	@ 0x128
 800e53c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800e540:	f5a3 7092 	sub.w	r0, r3, #292	@ 0x124
 800e544:	f44f 7390 	mov.w	r3, #288	@ 0x120
 800e548:	9303      	str	r3, [sp, #12]
 800e54a:	f107 0310 	add.w	r3, r7, #16
 800e54e:	9302      	str	r3, [sp, #8]
 800e550:	9401      	str	r4, [sp, #4]
 800e552:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800e556:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800e55a:	681b      	ldr	r3, [r3, #0]
 800e55c:	9300      	str	r3, [sp, #0]
 800e55e:	462b      	mov	r3, r5
 800e560:	6812      	ldr	r2, [r2, #0]
 800e562:	6809      	ldr	r1, [r1, #0]
 800e564:	6800      	ldr	r0, [r0, #0]
 800e566:	f7ff ff08 	bl	800e37a <tx_udp>
         sizeof(dhcp));
}
 800e56a:	bf00      	nop
 800e56c:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 800e570:	46bd      	mov	sp, r7
 800e572:	bdb0      	pop	{r4, r5, r7, pc}
 800e574:	080261b4 	.word	0x080261b4
 800e578:	63825363 	.word	0x63825363

0800e57c <tx_dhcp_request_sel>:

static const uint8_t broadcast[] = {255, 255, 255, 255, 255, 255};

// RFC-2131 #4.3.6, #4.4.1; RFC-2132 #9.8
static void tx_dhcp_request_sel(struct mg_tcpip_if *ifp, uint32_t ip_req,
                                uint32_t ip_srv) {
 800e57c:	b580      	push	{r7, lr}
 800e57e:	b098      	sub	sp, #96	@ 0x60
 800e580:	af04      	add	r7, sp, #16
 800e582:	60f8      	str	r0, [r7, #12]
 800e584:	60b9      	str	r1, [r7, #8]
 800e586:	607a      	str	r2, [r7, #4]
  uint8_t extra = (uint8_t) ((ifp->enable_req_dns ? 1 : 0) +
 800e588:	68fb      	ldr	r3, [r7, #12]
 800e58a:	7fdb      	ldrb	r3, [r3, #31]
 800e58c:	2b00      	cmp	r3, #0
 800e58e:	d001      	beq.n	800e594 <tx_dhcp_request_sel+0x18>
 800e590:	2201      	movs	r2, #1
 800e592:	e000      	b.n	800e596 <tx_dhcp_request_sel+0x1a>
 800e594:	2200      	movs	r2, #0
                             (ifp->enable_req_sntp ? 1 : 0));
 800e596:	68fb      	ldr	r3, [r7, #12]
 800e598:	f893 3020 	ldrb.w	r3, [r3, #32]
  uint8_t extra = (uint8_t) ((ifp->enable_req_dns ? 1 : 0) +
 800e59c:	2b00      	cmp	r3, #0
 800e59e:	d001      	beq.n	800e5a4 <tx_dhcp_request_sel+0x28>
 800e5a0:	2301      	movs	r3, #1
 800e5a2:	e000      	b.n	800e5a6 <tx_dhcp_request_sel+0x2a>
 800e5a4:	2300      	movs	r3, #0
 800e5a6:	4413      	add	r3, r2
 800e5a8:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
  size_t len = strlen(ifp->dhcp_name);
 800e5ac:	68fb      	ldr	r3, [r7, #12]
 800e5ae:	3348      	adds	r3, #72	@ 0x48
 800e5b0:	4618      	mov	r0, r3
 800e5b2:	f7f1 fea5 	bl	8000300 <strlen>
 800e5b6:	6478      	str	r0, [r7, #68]	@ 0x44
  size_t olen = 21 + len + extra + 2 + 1;  // Total length of options
 800e5b8:	f897 204b 	ldrb.w	r2, [r7, #75]	@ 0x4b
 800e5bc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e5be:	4413      	add	r3, r2
 800e5c0:	3318      	adds	r3, #24
 800e5c2:	643b      	str	r3, [r7, #64]	@ 0x40
#define OPTS_MAXLEN (21 + sizeof(ifp->dhcp_name) + 2 + 2 + 1)
  uint8_t opts[OPTS_MAXLEN];  // Allocate options (max size possible)
  uint8_t *p = opts;
 800e5c4:	f107 0314 	add.w	r3, r7, #20
 800e5c8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  assert(olen <= sizeof(opts));
 800e5ca:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e5cc:	2b2c      	cmp	r3, #44	@ 0x2c
 800e5ce:	d906      	bls.n	800e5de <tx_dhcp_request_sel+0x62>
 800e5d0:	4b50      	ldr	r3, [pc, #320]	@ (800e714 <tx_dhcp_request_sel+0x198>)
 800e5d2:	4a51      	ldr	r2, [pc, #324]	@ (800e718 <tx_dhcp_request_sel+0x19c>)
 800e5d4:	f241 1187 	movw	r1, #4487	@ 0x1187
 800e5d8:	4850      	ldr	r0, [pc, #320]	@ (800e71c <tx_dhcp_request_sel+0x1a0>)
 800e5da:	f015 fb5b 	bl	8023c94 <__assert_func>
  memset(opts, 0, sizeof(opts));
 800e5de:	f107 0314 	add.w	r3, r7, #20
 800e5e2:	222c      	movs	r2, #44	@ 0x2c
 800e5e4:	2100      	movs	r1, #0
 800e5e6:	4618      	mov	r0, r3
 800e5e8:	f015 ff50 	bl	802448c <memset>
  *p++ = 53, *p++ = 1, *p++ = 3;                       // Type: DHCP request
 800e5ec:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e5ee:	1c5a      	adds	r2, r3, #1
 800e5f0:	64fa      	str	r2, [r7, #76]	@ 0x4c
 800e5f2:	2235      	movs	r2, #53	@ 0x35
 800e5f4:	701a      	strb	r2, [r3, #0]
 800e5f6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e5f8:	1c5a      	adds	r2, r3, #1
 800e5fa:	64fa      	str	r2, [r7, #76]	@ 0x4c
 800e5fc:	2201      	movs	r2, #1
 800e5fe:	701a      	strb	r2, [r3, #0]
 800e600:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e602:	1c5a      	adds	r2, r3, #1
 800e604:	64fa      	str	r2, [r7, #76]	@ 0x4c
 800e606:	2203      	movs	r2, #3
 800e608:	701a      	strb	r2, [r3, #0]
  *p++ = 54, *p++ = 4, memcpy(p, &ip_srv, 4), p += 4;  // DHCP server ID
 800e60a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e60c:	1c5a      	adds	r2, r3, #1
 800e60e:	64fa      	str	r2, [r7, #76]	@ 0x4c
 800e610:	2236      	movs	r2, #54	@ 0x36
 800e612:	701a      	strb	r2, [r3, #0]
 800e614:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e616:	1c5a      	adds	r2, r3, #1
 800e618:	64fa      	str	r2, [r7, #76]	@ 0x4c
 800e61a:	2204      	movs	r2, #4
 800e61c:	701a      	strb	r2, [r3, #0]
 800e61e:	687a      	ldr	r2, [r7, #4]
 800e620:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e622:	601a      	str	r2, [r3, #0]
 800e624:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e626:	3304      	adds	r3, #4
 800e628:	64fb      	str	r3, [r7, #76]	@ 0x4c
  *p++ = 50, *p++ = 4, memcpy(p, &ip_req, 4), p += 4;  // Requested IP
 800e62a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e62c:	1c5a      	adds	r2, r3, #1
 800e62e:	64fa      	str	r2, [r7, #76]	@ 0x4c
 800e630:	2232      	movs	r2, #50	@ 0x32
 800e632:	701a      	strb	r2, [r3, #0]
 800e634:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e636:	1c5a      	adds	r2, r3, #1
 800e638:	64fa      	str	r2, [r7, #76]	@ 0x4c
 800e63a:	2204      	movs	r2, #4
 800e63c:	701a      	strb	r2, [r3, #0]
 800e63e:	68ba      	ldr	r2, [r7, #8]
 800e640:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e642:	601a      	str	r2, [r3, #0]
 800e644:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e646:	3304      	adds	r3, #4
 800e648:	64fb      	str	r3, [r7, #76]	@ 0x4c
  *p++ = 12, *p++ = (uint8_t) (len & 255);             // DHCP host
 800e64a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e64c:	1c5a      	adds	r2, r3, #1
 800e64e:	64fa      	str	r2, [r7, #76]	@ 0x4c
 800e650:	220c      	movs	r2, #12
 800e652:	701a      	strb	r2, [r3, #0]
 800e654:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e656:	1c5a      	adds	r2, r3, #1
 800e658:	64fa      	str	r2, [r7, #76]	@ 0x4c
 800e65a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800e65c:	b2d2      	uxtb	r2, r2
 800e65e:	701a      	strb	r2, [r3, #0]
  memcpy(p, ifp->dhcp_name, len), p += len;            // name
 800e660:	68fb      	ldr	r3, [r7, #12]
 800e662:	3348      	adds	r3, #72	@ 0x48
 800e664:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800e666:	4619      	mov	r1, r3
 800e668:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 800e66a:	f016 f88c 	bl	8024786 <memcpy>
 800e66e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800e670:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e672:	4413      	add	r3, r2
 800e674:	64fb      	str	r3, [r7, #76]	@ 0x4c
  *p++ = 55, *p++ = 2 + extra, *p++ = 1, *p++ = 3;     // GW, MASK
 800e676:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e678:	1c5a      	adds	r2, r3, #1
 800e67a:	64fa      	str	r2, [r7, #76]	@ 0x4c
 800e67c:	2237      	movs	r2, #55	@ 0x37
 800e67e:	701a      	strb	r2, [r3, #0]
 800e680:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e682:	1c5a      	adds	r2, r3, #1
 800e684:	64fa      	str	r2, [r7, #76]	@ 0x4c
 800e686:	f897 204b 	ldrb.w	r2, [r7, #75]	@ 0x4b
 800e68a:	3202      	adds	r2, #2
 800e68c:	b2d2      	uxtb	r2, r2
 800e68e:	701a      	strb	r2, [r3, #0]
 800e690:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e692:	1c5a      	adds	r2, r3, #1
 800e694:	64fa      	str	r2, [r7, #76]	@ 0x4c
 800e696:	2201      	movs	r2, #1
 800e698:	701a      	strb	r2, [r3, #0]
 800e69a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e69c:	1c5a      	adds	r2, r3, #1
 800e69e:	64fa      	str	r2, [r7, #76]	@ 0x4c
 800e6a0:	2203      	movs	r2, #3
 800e6a2:	701a      	strb	r2, [r3, #0]
  if (ifp->enable_req_dns) *p++ = 6;                   // DNS
 800e6a4:	68fb      	ldr	r3, [r7, #12]
 800e6a6:	7fdb      	ldrb	r3, [r3, #31]
 800e6a8:	2b00      	cmp	r3, #0
 800e6aa:	d004      	beq.n	800e6b6 <tx_dhcp_request_sel+0x13a>
 800e6ac:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e6ae:	1c5a      	adds	r2, r3, #1
 800e6b0:	64fa      	str	r2, [r7, #76]	@ 0x4c
 800e6b2:	2206      	movs	r2, #6
 800e6b4:	701a      	strb	r2, [r3, #0]
  if (ifp->enable_req_sntp) *p++ = 42;                 // SNTP
 800e6b6:	68fb      	ldr	r3, [r7, #12]
 800e6b8:	f893 3020 	ldrb.w	r3, [r3, #32]
 800e6bc:	2b00      	cmp	r3, #0
 800e6be:	d004      	beq.n	800e6ca <tx_dhcp_request_sel+0x14e>
 800e6c0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e6c2:	1c5a      	adds	r2, r3, #1
 800e6c4:	64fa      	str	r2, [r7, #76]	@ 0x4c
 800e6c6:	222a      	movs	r2, #42	@ 0x2a
 800e6c8:	701a      	strb	r2, [r3, #0]
  *p++ = 255;                                          // End of options
 800e6ca:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e6cc:	1c5a      	adds	r2, r3, #1
 800e6ce:	64fa      	str	r2, [r7, #76]	@ 0x4c
 800e6d0:	22ff      	movs	r2, #255	@ 0xff
 800e6d2:	701a      	strb	r2, [r3, #0]
  // assert((size_t) (p - opts) < olen);
  tx_dhcp(ifp, (uint8_t *) broadcast, 0, 0xffffffff, opts, olen, 0);
 800e6d4:	2300      	movs	r3, #0
 800e6d6:	9302      	str	r3, [sp, #8]
 800e6d8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e6da:	9301      	str	r3, [sp, #4]
 800e6dc:	f107 0314 	add.w	r3, r7, #20
 800e6e0:	9300      	str	r3, [sp, #0]
 800e6e2:	f04f 33ff 	mov.w	r3, #4294967295
 800e6e6:	2200      	movs	r2, #0
 800e6e8:	490d      	ldr	r1, [pc, #52]	@ (800e720 <tx_dhcp_request_sel+0x1a4>)
 800e6ea:	68f8      	ldr	r0, [r7, #12]
 800e6ec:	f7ff feb6 	bl	800e45c <tx_dhcp>
  MG_DEBUG(("DHCP req sent"));
 800e6f0:	4b0c      	ldr	r3, [pc, #48]	@ (800e724 <tx_dhcp_request_sel+0x1a8>)
 800e6f2:	681b      	ldr	r3, [r3, #0]
 800e6f4:	2b02      	cmp	r3, #2
 800e6f6:	dd09      	ble.n	800e70c <tx_dhcp_request_sel+0x190>
 800e6f8:	4b07      	ldr	r3, [pc, #28]	@ (800e718 <tx_dhcp_request_sel+0x19c>)
 800e6fa:	f241 1294 	movw	r2, #4500	@ 0x1194
 800e6fe:	4907      	ldr	r1, [pc, #28]	@ (800e71c <tx_dhcp_request_sel+0x1a0>)
 800e700:	2003      	movs	r0, #3
 800e702:	f7fe fd53 	bl	800d1ac <mg_log_prefix>
 800e706:	4808      	ldr	r0, [pc, #32]	@ (800e728 <tx_dhcp_request_sel+0x1ac>)
 800e708:	f7fe fda0 	bl	800d24c <mg_log>
}
 800e70c:	bf00      	nop
 800e70e:	3750      	adds	r7, #80	@ 0x50
 800e710:	46bd      	mov	sp, r7
 800e712:	bd80      	pop	{r7, pc}
 800e714:	080262d4 	.word	0x080262d4
 800e718:	0802886c 	.word	0x0802886c
 800e71c:	08025140 	.word	0x08025140
 800e720:	0802834c 	.word	0x0802834c
 800e724:	20000258 	.word	0x20000258
 800e728:	080262ec 	.word	0x080262ec

0800e72c <tx_dhcp_request_re>:

// RFC-2131 #4.3.6, #4.4.5 (renewing: unicast, rebinding: bcast)
static void tx_dhcp_request_re(struct mg_tcpip_if *ifp, uint8_t *mac_dst,
                               uint32_t ip_src, uint32_t ip_dst) {
 800e72c:	b580      	push	{r7, lr}
 800e72e:	b08a      	sub	sp, #40	@ 0x28
 800e730:	af04      	add	r7, sp, #16
 800e732:	60f8      	str	r0, [r7, #12]
 800e734:	60b9      	str	r1, [r7, #8]
 800e736:	607a      	str	r2, [r7, #4]
 800e738:	603b      	str	r3, [r7, #0]
  uint8_t opts[] = {
 800e73a:	4b10      	ldr	r3, [pc, #64]	@ (800e77c <tx_dhcp_request_re+0x50>)
 800e73c:	617b      	str	r3, [r7, #20]
      53, 1, 3,  // Type: DHCP request
      255        // End of options
  };
  tx_dhcp(ifp, mac_dst, ip_src, ip_dst, opts, sizeof(opts), true);
 800e73e:	2301      	movs	r3, #1
 800e740:	9302      	str	r3, [sp, #8]
 800e742:	2304      	movs	r3, #4
 800e744:	9301      	str	r3, [sp, #4]
 800e746:	f107 0314 	add.w	r3, r7, #20
 800e74a:	9300      	str	r3, [sp, #0]
 800e74c:	683b      	ldr	r3, [r7, #0]
 800e74e:	687a      	ldr	r2, [r7, #4]
 800e750:	68b9      	ldr	r1, [r7, #8]
 800e752:	68f8      	ldr	r0, [r7, #12]
 800e754:	f7ff fe82 	bl	800e45c <tx_dhcp>
  MG_DEBUG(("DHCP req sent"));
 800e758:	4b09      	ldr	r3, [pc, #36]	@ (800e780 <tx_dhcp_request_re+0x54>)
 800e75a:	681b      	ldr	r3, [r3, #0]
 800e75c:	2b02      	cmp	r3, #2
 800e75e:	dd09      	ble.n	800e774 <tx_dhcp_request_re+0x48>
 800e760:	4b08      	ldr	r3, [pc, #32]	@ (800e784 <tx_dhcp_request_re+0x58>)
 800e762:	f241 129f 	movw	r2, #4511	@ 0x119f
 800e766:	4908      	ldr	r1, [pc, #32]	@ (800e788 <tx_dhcp_request_re+0x5c>)
 800e768:	2003      	movs	r0, #3
 800e76a:	f7fe fd1f 	bl	800d1ac <mg_log_prefix>
 800e76e:	4807      	ldr	r0, [pc, #28]	@ (800e78c <tx_dhcp_request_re+0x60>)
 800e770:	f7fe fd6c 	bl	800d24c <mg_log>
}
 800e774:	bf00      	nop
 800e776:	3718      	adds	r7, #24
 800e778:	46bd      	mov	sp, r7
 800e77a:	bd80      	pop	{r7, pc}
 800e77c:	ff030135 	.word	0xff030135
 800e780:	20000258 	.word	0x20000258
 800e784:	08028880 	.word	0x08028880
 800e788:	08025140 	.word	0x08025140
 800e78c:	080262ec 	.word	0x080262ec

0800e790 <tx_dhcp_discover>:

static void tx_dhcp_discover(struct mg_tcpip_if *ifp) {
 800e790:	b580      	push	{r7, lr}
 800e792:	b088      	sub	sp, #32
 800e794:	af04      	add	r7, sp, #16
 800e796:	6078      	str	r0, [r7, #4]
  uint8_t opts[] = {
 800e798:	4a14      	ldr	r2, [pc, #80]	@ (800e7ec <tx_dhcp_discover+0x5c>)
 800e79a:	f107 0308 	add.w	r3, r7, #8
 800e79e:	e892 0003 	ldmia.w	r2, {r0, r1}
 800e7a2:	e883 0003 	stmia.w	r3, {r0, r1}
      53, 1, 1,     // Type: DHCP discover
      55, 2, 1, 3,  // Parameters: ip, mask
      255           // End of options
  };
  tx_dhcp(ifp, (uint8_t *) broadcast, 0, 0xffffffff, opts, sizeof(opts), false);
 800e7a6:	2300      	movs	r3, #0
 800e7a8:	9302      	str	r3, [sp, #8]
 800e7aa:	2308      	movs	r3, #8
 800e7ac:	9301      	str	r3, [sp, #4]
 800e7ae:	f107 0308 	add.w	r3, r7, #8
 800e7b2:	9300      	str	r3, [sp, #0]
 800e7b4:	f04f 33ff 	mov.w	r3, #4294967295
 800e7b8:	2200      	movs	r2, #0
 800e7ba:	490d      	ldr	r1, [pc, #52]	@ (800e7f0 <tx_dhcp_discover+0x60>)
 800e7bc:	6878      	ldr	r0, [r7, #4]
 800e7be:	f7ff fe4d 	bl	800e45c <tx_dhcp>
  MG_DEBUG(("DHCP discover sent. Our MAC: %M", mg_print_mac, ifp->mac));
 800e7c2:	4b0c      	ldr	r3, [pc, #48]	@ (800e7f4 <tx_dhcp_discover+0x64>)
 800e7c4:	681b      	ldr	r3, [r3, #0]
 800e7c6:	2b02      	cmp	r3, #2
 800e7c8:	dd0c      	ble.n	800e7e4 <tx_dhcp_discover+0x54>
 800e7ca:	4b0b      	ldr	r3, [pc, #44]	@ (800e7f8 <tx_dhcp_discover+0x68>)
 800e7cc:	f241 12a9 	movw	r2, #4521	@ 0x11a9
 800e7d0:	490a      	ldr	r1, [pc, #40]	@ (800e7fc <tx_dhcp_discover+0x6c>)
 800e7d2:	2003      	movs	r0, #3
 800e7d4:	f7fe fcea 	bl	800d1ac <mg_log_prefix>
 800e7d8:	687b      	ldr	r3, [r7, #4]
 800e7da:	461a      	mov	r2, r3
 800e7dc:	4908      	ldr	r1, [pc, #32]	@ (800e800 <tx_dhcp_discover+0x70>)
 800e7de:	4809      	ldr	r0, [pc, #36]	@ (800e804 <tx_dhcp_discover+0x74>)
 800e7e0:	f7fe fd34 	bl	800d24c <mg_log>
}
 800e7e4:	bf00      	nop
 800e7e6:	3710      	adds	r7, #16
 800e7e8:	46bd      	mov	sp, r7
 800e7ea:	bd80      	pop	{r7, pc}
 800e7ec:	0802631c 	.word	0x0802631c
 800e7f0:	0802834c 	.word	0x0802834c
 800e7f4:	20000258 	.word	0x20000258
 800e7f8:	08028894 	.word	0x08028894
 800e7fc:	08025140 	.word	0x08025140
 800e800:	080124a9 	.word	0x080124a9
 800e804:	080262fc 	.word	0x080262fc

0800e808 <getpeer>:

static struct mg_connection *getpeer(struct mg_mgr *mgr, struct pkt *pkt,
                                     bool lsn) {
 800e808:	b580      	push	{r7, lr}
 800e80a:	b086      	sub	sp, #24
 800e80c:	af00      	add	r7, sp, #0
 800e80e:	60f8      	str	r0, [r7, #12]
 800e810:	60b9      	str	r1, [r7, #8]
 800e812:	4613      	mov	r3, r2
 800e814:	71fb      	strb	r3, [r7, #7]
  struct mg_connection *c = NULL;
 800e816:	2300      	movs	r3, #0
 800e818:	617b      	str	r3, [r7, #20]
  for (c = mgr->conns; c != NULL; c = c->next) {
 800e81a:	68fb      	ldr	r3, [r7, #12]
 800e81c:	681b      	ldr	r3, [r3, #0]
 800e81e:	617b      	str	r3, [r7, #20]
 800e820:	e05c      	b.n	800e8dc <getpeer+0xd4>
    if (c->is_arplooking && pkt->arp &&
 800e822:	697b      	ldr	r3, [r7, #20]
 800e824:	f893 30b4 	ldrb.w	r3, [r3, #180]	@ 0xb4
 800e828:	f003 0310 	and.w	r3, r3, #16
 800e82c:	b2db      	uxtb	r3, r3
 800e82e:	2b00      	cmp	r3, #0
 800e830:	d010      	beq.n	800e854 <getpeer+0x4c>
 800e832:	68bb      	ldr	r3, [r7, #8]
 800e834:	699b      	ldr	r3, [r3, #24]
 800e836:	2b00      	cmp	r3, #0
 800e838:	d00c      	beq.n	800e854 <getpeer+0x4c>
        memcmp(&pkt->arp->spa, c->rem.ip, sizeof(pkt->arp->spa)) == 0)
 800e83a:	68bb      	ldr	r3, [r7, #8]
 800e83c:	699b      	ldr	r3, [r3, #24]
 800e83e:	f103 000e 	add.w	r0, r3, #14
 800e842:	697b      	ldr	r3, [r7, #20]
 800e844:	3320      	adds	r3, #32
 800e846:	2204      	movs	r2, #4
 800e848:	4619      	mov	r1, r3
 800e84a:	f015 fdf5 	bl	8024438 <memcmp>
 800e84e:	4603      	mov	r3, r0
    if (c->is_arplooking && pkt->arp &&
 800e850:	2b00      	cmp	r3, #0
 800e852:	d047      	beq.n	800e8e4 <getpeer+0xdc>
      break;
    if (c->is_udp && pkt->udp && c->loc.port == pkt->udp->dport) break;
 800e854:	697b      	ldr	r3, [r7, #20]
 800e856:	f893 30b5 	ldrb.w	r3, [r3, #181]	@ 0xb5
 800e85a:	f003 0301 	and.w	r3, r3, #1
 800e85e:	b2db      	uxtb	r3, r3
 800e860:	2b00      	cmp	r3, #0
 800e862:	d00b      	beq.n	800e87c <getpeer+0x74>
 800e864:	68bb      	ldr	r3, [r7, #8]
 800e866:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e868:	2b00      	cmp	r3, #0
 800e86a:	d007      	beq.n	800e87c <getpeer+0x74>
 800e86c:	697b      	ldr	r3, [r7, #20]
 800e86e:	8b1a      	ldrh	r2, [r3, #24]
 800e870:	68bb      	ldr	r3, [r7, #8]
 800e872:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e874:	885b      	ldrh	r3, [r3, #2]
 800e876:	b29b      	uxth	r3, r3
 800e878:	429a      	cmp	r2, r3
 800e87a:	d035      	beq.n	800e8e8 <getpeer+0xe0>
    if (!c->is_udp && pkt->tcp && c->loc.port == pkt->tcp->dport &&
 800e87c:	697b      	ldr	r3, [r7, #20]
 800e87e:	f893 30b5 	ldrb.w	r3, [r3, #181]	@ 0xb5
 800e882:	f003 0301 	and.w	r3, r3, #1
 800e886:	b2db      	uxtb	r3, r3
 800e888:	2b00      	cmp	r3, #0
 800e88a:	d124      	bne.n	800e8d6 <getpeer+0xce>
 800e88c:	68bb      	ldr	r3, [r7, #8]
 800e88e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e890:	2b00      	cmp	r3, #0
 800e892:	d020      	beq.n	800e8d6 <getpeer+0xce>
 800e894:	697b      	ldr	r3, [r7, #20]
 800e896:	8b1a      	ldrh	r2, [r3, #24]
 800e898:	68bb      	ldr	r3, [r7, #8]
 800e89a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e89c:	885b      	ldrh	r3, [r3, #2]
 800e89e:	b29b      	uxth	r3, r3
 800e8a0:	429a      	cmp	r2, r3
 800e8a2:	d118      	bne.n	800e8d6 <getpeer+0xce>
        lsn == (bool) c->is_listening &&
 800e8a4:	79fb      	ldrb	r3, [r7, #7]
 800e8a6:	697a      	ldr	r2, [r7, #20]
 800e8a8:	f892 20b4 	ldrb.w	r2, [r2, #180]	@ 0xb4
 800e8ac:	f002 0201 	and.w	r2, r2, #1
 800e8b0:	b2d2      	uxtb	r2, r2
 800e8b2:	2a00      	cmp	r2, #0
 800e8b4:	bf14      	ite	ne
 800e8b6:	2201      	movne	r2, #1
 800e8b8:	2200      	moveq	r2, #0
 800e8ba:	b2d2      	uxtb	r2, r2
    if (!c->is_udp && pkt->tcp && c->loc.port == pkt->tcp->dport &&
 800e8bc:	4293      	cmp	r3, r2
 800e8be:	d10a      	bne.n	800e8d6 <getpeer+0xce>
        lsn == (bool) c->is_listening &&
 800e8c0:	79fb      	ldrb	r3, [r7, #7]
 800e8c2:	2b00      	cmp	r3, #0
 800e8c4:	d111      	bne.n	800e8ea <getpeer+0xe2>
        (lsn || c->rem.port == pkt->tcp->sport))
 800e8c6:	697b      	ldr	r3, [r7, #20]
 800e8c8:	8e1a      	ldrh	r2, [r3, #48]	@ 0x30
 800e8ca:	68bb      	ldr	r3, [r7, #8]
 800e8cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e8ce:	881b      	ldrh	r3, [r3, #0]
 800e8d0:	b29b      	uxth	r3, r3
 800e8d2:	429a      	cmp	r2, r3
 800e8d4:	d009      	beq.n	800e8ea <getpeer+0xe2>
  for (c = mgr->conns; c != NULL; c = c->next) {
 800e8d6:	697b      	ldr	r3, [r7, #20]
 800e8d8:	681b      	ldr	r3, [r3, #0]
 800e8da:	617b      	str	r3, [r7, #20]
 800e8dc:	697b      	ldr	r3, [r7, #20]
 800e8de:	2b00      	cmp	r3, #0
 800e8e0:	d19f      	bne.n	800e822 <getpeer+0x1a>
 800e8e2:	e002      	b.n	800e8ea <getpeer+0xe2>
      break;
 800e8e4:	bf00      	nop
 800e8e6:	e000      	b.n	800e8ea <getpeer+0xe2>
    if (c->is_udp && pkt->udp && c->loc.port == pkt->udp->dport) break;
 800e8e8:	bf00      	nop
      break;
  }
  return c;
 800e8ea:	697b      	ldr	r3, [r7, #20]
}
 800e8ec:	4618      	mov	r0, r3
 800e8ee:	3718      	adds	r7, #24
 800e8f0:	46bd      	mov	sp, r7
 800e8f2:	bd80      	pop	{r7, pc}

0800e8f4 <rx_arp>:

static void mac_resolved(struct mg_connection *c);

static void rx_arp(struct mg_tcpip_if *ifp, struct pkt *pkt) {
 800e8f4:	b5b0      	push	{r4, r5, r7, lr}
 800e8f6:	b088      	sub	sp, #32
 800e8f8:	af02      	add	r7, sp, #8
 800e8fa:	6078      	str	r0, [r7, #4]
 800e8fc:	6039      	str	r1, [r7, #0]
  if (pkt->arp->op == mg_htons(1) && pkt->arp->tpa == ifp->ip) {
 800e8fe:	683b      	ldr	r3, [r7, #0]
 800e900:	699b      	ldr	r3, [r3, #24]
 800e902:	88db      	ldrh	r3, [r3, #6]
 800e904:	b29c      	uxth	r4, r3
 800e906:	2001      	movs	r0, #1
 800e908:	f012 fc0b 	bl	8021122 <mg_ntohs>
 800e90c:	4603      	mov	r3, r0
 800e90e:	429c      	cmp	r4, r3
 800e910:	d176      	bne.n	800ea00 <rx_arp+0x10c>
 800e912:	683b      	ldr	r3, [r7, #0]
 800e914:	699b      	ldr	r3, [r3, #24]
 800e916:	699a      	ldr	r2, [r3, #24]
 800e918:	687b      	ldr	r3, [r7, #4]
 800e91a:	689b      	ldr	r3, [r3, #8]
 800e91c:	429a      	cmp	r2, r3
 800e91e:	d16f      	bne.n	800ea00 <rx_arp+0x10c>
    // ARP request. Make a response, then send
    // MG_DEBUG(("ARP op %d %M: %M", mg_ntohs(pkt->arp->op), mg_print_ip4,
    //          &pkt->arp->spa, mg_print_ip4, &pkt->arp->tpa));
    struct eth *eth = (struct eth *) ifp->tx.buf;
 800e920:	687b      	ldr	r3, [r7, #4]
 800e922:	695b      	ldr	r3, [r3, #20]
 800e924:	617b      	str	r3, [r7, #20]
    struct arp *arp = (struct arp *) (eth + 1);
 800e926:	697b      	ldr	r3, [r7, #20]
 800e928:	330e      	adds	r3, #14
 800e92a:	613b      	str	r3, [r7, #16]
    memcpy(eth->dst, pkt->eth->src, sizeof(eth->dst));
 800e92c:	6978      	ldr	r0, [r7, #20]
 800e92e:	683b      	ldr	r3, [r7, #0]
 800e930:	691b      	ldr	r3, [r3, #16]
 800e932:	3306      	adds	r3, #6
 800e934:	2206      	movs	r2, #6
 800e936:	4619      	mov	r1, r3
 800e938:	f015 ff25 	bl	8024786 <memcpy>
    memcpy(eth->src, ifp->mac, sizeof(eth->src));
 800e93c:	697b      	ldr	r3, [r7, #20]
 800e93e:	3306      	adds	r3, #6
 800e940:	6879      	ldr	r1, [r7, #4]
 800e942:	2206      	movs	r2, #6
 800e944:	4618      	mov	r0, r3
 800e946:	f015 ff1e 	bl	8024786 <memcpy>
    eth->type = mg_htons(0x806);
 800e94a:	f640 0006 	movw	r0, #2054	@ 0x806
 800e94e:	f012 fbe8 	bl	8021122 <mg_ntohs>
 800e952:	4603      	mov	r3, r0
 800e954:	461a      	mov	r2, r3
 800e956:	697b      	ldr	r3, [r7, #20]
 800e958:	819a      	strh	r2, [r3, #12]
    *arp = *pkt->arp;
 800e95a:	683b      	ldr	r3, [r7, #0]
 800e95c:	699a      	ldr	r2, [r3, #24]
 800e95e:	693b      	ldr	r3, [r7, #16]
 800e960:	6814      	ldr	r4, [r2, #0]
 800e962:	6850      	ldr	r0, [r2, #4]
 800e964:	6891      	ldr	r1, [r2, #8]
 800e966:	68d5      	ldr	r5, [r2, #12]
 800e968:	601c      	str	r4, [r3, #0]
 800e96a:	6058      	str	r0, [r3, #4]
 800e96c:	6099      	str	r1, [r3, #8]
 800e96e:	60dd      	str	r5, [r3, #12]
 800e970:	6914      	ldr	r4, [r2, #16]
 800e972:	6950      	ldr	r0, [r2, #20]
 800e974:	6991      	ldr	r1, [r2, #24]
 800e976:	611c      	str	r4, [r3, #16]
 800e978:	6158      	str	r0, [r3, #20]
 800e97a:	6199      	str	r1, [r3, #24]
    arp->op = mg_htons(2);
 800e97c:	2002      	movs	r0, #2
 800e97e:	f012 fbd0 	bl	8021122 <mg_ntohs>
 800e982:	4603      	mov	r3, r0
 800e984:	461a      	mov	r2, r3
 800e986:	693b      	ldr	r3, [r7, #16]
 800e988:	80da      	strh	r2, [r3, #6]
    memcpy(arp->tha, pkt->arp->sha, sizeof(pkt->arp->tha));
 800e98a:	693b      	ldr	r3, [r7, #16]
 800e98c:	f103 0012 	add.w	r0, r3, #18
 800e990:	683b      	ldr	r3, [r7, #0]
 800e992:	699b      	ldr	r3, [r3, #24]
 800e994:	3308      	adds	r3, #8
 800e996:	2206      	movs	r2, #6
 800e998:	4619      	mov	r1, r3
 800e99a:	f015 fef4 	bl	8024786 <memcpy>
    memcpy(arp->sha, ifp->mac, sizeof(pkt->arp->sha));
 800e99e:	693b      	ldr	r3, [r7, #16]
 800e9a0:	3308      	adds	r3, #8
 800e9a2:	6879      	ldr	r1, [r7, #4]
 800e9a4:	2206      	movs	r2, #6
 800e9a6:	4618      	mov	r0, r3
 800e9a8:	f015 feed 	bl	8024786 <memcpy>
    arp->tpa = pkt->arp->spa;
 800e9ac:	683b      	ldr	r3, [r7, #0]
 800e9ae:	699b      	ldr	r3, [r3, #24]
 800e9b0:	f8d3 200e 	ldr.w	r2, [r3, #14]
 800e9b4:	693b      	ldr	r3, [r7, #16]
 800e9b6:	619a      	str	r2, [r3, #24]
    arp->spa = ifp->ip;
 800e9b8:	687b      	ldr	r3, [r7, #4]
 800e9ba:	689a      	ldr	r2, [r3, #8]
 800e9bc:	693b      	ldr	r3, [r7, #16]
 800e9be:	f8c3 200e 	str.w	r2, [r3, #14]
    MG_DEBUG(("ARP: tell %M we're %M", mg_print_ip4, &arp->tpa, mg_print_mac,
 800e9c2:	4b4e      	ldr	r3, [pc, #312]	@ (800eafc <rx_arp+0x208>)
 800e9c4:	681b      	ldr	r3, [r3, #0]
 800e9c6:	2b02      	cmp	r3, #2
 800e9c8:	dd10      	ble.n	800e9ec <rx_arp+0xf8>
 800e9ca:	4b4d      	ldr	r3, [pc, #308]	@ (800eb00 <rx_arp+0x20c>)
 800e9cc:	f241 12ce 	movw	r2, #4558	@ 0x11ce
 800e9d0:	494c      	ldr	r1, [pc, #304]	@ (800eb04 <rx_arp+0x210>)
 800e9d2:	2003      	movs	r0, #3
 800e9d4:	f7fe fbea 	bl	800d1ac <mg_log_prefix>
 800e9d8:	693b      	ldr	r3, [r7, #16]
 800e9da:	f103 0218 	add.w	r2, r3, #24
 800e9de:	687b      	ldr	r3, [r7, #4]
 800e9e0:	9300      	str	r3, [sp, #0]
 800e9e2:	4b49      	ldr	r3, [pc, #292]	@ (800eb08 <rx_arp+0x214>)
 800e9e4:	4949      	ldr	r1, [pc, #292]	@ (800eb0c <rx_arp+0x218>)
 800e9e6:	484a      	ldr	r0, [pc, #296]	@ (800eb10 <rx_arp+0x21c>)
 800e9e8:	f7fe fc30 	bl	800d24c <mg_log>
              &ifp->mac));
    ether_output(ifp, PDIFF(eth, arp + 1));
 800e9ec:	693b      	ldr	r3, [r7, #16]
 800e9ee:	f103 021c 	add.w	r2, r3, #28
 800e9f2:	697b      	ldr	r3, [r7, #20]
 800e9f4:	1ad3      	subs	r3, r2, r3
 800e9f6:	4619      	mov	r1, r3
 800e9f8:	6878      	ldr	r0, [r7, #4]
 800e9fa:	f7ff fb57 	bl	800e0ac <ether_output>
  if (pkt->arp->op == mg_htons(1) && pkt->arp->tpa == ifp->ip) {
 800e9fe:	e079      	b.n	800eaf4 <rx_arp+0x200>
  } else if (pkt->arp->op == mg_htons(2)) {
 800ea00:	683b      	ldr	r3, [r7, #0]
 800ea02:	699b      	ldr	r3, [r3, #24]
 800ea04:	88db      	ldrh	r3, [r3, #6]
 800ea06:	b29c      	uxth	r4, r3
 800ea08:	2002      	movs	r0, #2
 800ea0a:	f012 fb8a 	bl	8021122 <mg_ntohs>
 800ea0e:	4603      	mov	r3, r0
 800ea10:	429c      	cmp	r4, r3
 800ea12:	d16f      	bne.n	800eaf4 <rx_arp+0x200>
    if (memcmp(pkt->arp->tha, ifp->mac, sizeof(pkt->arp->tha)) != 0) return;
 800ea14:	683b      	ldr	r3, [r7, #0]
 800ea16:	699b      	ldr	r3, [r3, #24]
 800ea18:	3312      	adds	r3, #18
 800ea1a:	6879      	ldr	r1, [r7, #4]
 800ea1c:	2206      	movs	r2, #6
 800ea1e:	4618      	mov	r0, r3
 800ea20:	f015 fd0a 	bl	8024438 <memcmp>
 800ea24:	4603      	mov	r3, r0
 800ea26:	2b00      	cmp	r3, #0
 800ea28:	d163      	bne.n	800eaf2 <rx_arp+0x1fe>
    if (pkt->arp->spa == ifp->gw) {
 800ea2a:	683b      	ldr	r3, [r7, #0]
 800ea2c:	699b      	ldr	r3, [r3, #24]
 800ea2e:	f8d3 200e 	ldr.w	r2, [r3, #14]
 800ea32:	687b      	ldr	r3, [r7, #4]
 800ea34:	691b      	ldr	r3, [r3, #16]
 800ea36:	429a      	cmp	r2, r3
 800ea38:	d116      	bne.n	800ea68 <rx_arp+0x174>
      // Got response for the GW ARP request. Set ifp->gwmac and IP -> READY
      memcpy(ifp->gwmac, pkt->arp->sha, sizeof(ifp->gwmac));
 800ea3a:	687b      	ldr	r3, [r7, #4]
 800ea3c:	f103 005c 	add.w	r0, r3, #92	@ 0x5c
 800ea40:	683b      	ldr	r3, [r7, #0]
 800ea42:	699b      	ldr	r3, [r3, #24]
 800ea44:	3308      	adds	r3, #8
 800ea46:	2206      	movs	r2, #6
 800ea48:	4619      	mov	r1, r3
 800ea4a:	f015 fe9c 	bl	8024786 <memcpy>
      if (ifp->state == MG_TCPIP_STATE_IP) {
 800ea4e:	687b      	ldr	r3, [r7, #4]
 800ea50:	f893 3094 	ldrb.w	r3, [r3, #148]	@ 0x94
 800ea54:	2b03      	cmp	r3, #3
 800ea56:	d14d      	bne.n	800eaf4 <rx_arp+0x200>
        ifp->state = MG_TCPIP_STATE_READY;
 800ea58:	687b      	ldr	r3, [r7, #4]
 800ea5a:	2204      	movs	r2, #4
 800ea5c:	f883 2094 	strb.w	r2, [r3, #148]	@ 0x94
        onstatechange(ifp);
 800ea60:	6878      	ldr	r0, [r7, #4]
 800ea62:	f7ff fba9 	bl	800e1b8 <onstatechange>
 800ea66:	e045      	b.n	800eaf4 <rx_arp+0x200>
      }
    } else {
      struct mg_connection *c = getpeer(ifp->mgr, pkt, false);
 800ea68:	687b      	ldr	r3, [r7, #4]
 800ea6a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ea6c:	2200      	movs	r2, #0
 800ea6e:	6839      	ldr	r1, [r7, #0]
 800ea70:	4618      	mov	r0, r3
 800ea72:	f7ff fec9 	bl	800e808 <getpeer>
 800ea76:	60f8      	str	r0, [r7, #12]
      if (c != NULL && c->is_arplooking) {
 800ea78:	68fb      	ldr	r3, [r7, #12]
 800ea7a:	2b00      	cmp	r3, #0
 800ea7c:	d03a      	beq.n	800eaf4 <rx_arp+0x200>
 800ea7e:	68fb      	ldr	r3, [r7, #12]
 800ea80:	f893 30b4 	ldrb.w	r3, [r3, #180]	@ 0xb4
 800ea84:	f003 0310 	and.w	r3, r3, #16
 800ea88:	b2db      	uxtb	r3, r3
 800ea8a:	2b00      	cmp	r3, #0
 800ea8c:	d032      	beq.n	800eaf4 <rx_arp+0x200>
        struct connstate *s = (struct connstate *) (c + 1);
 800ea8e:	68fb      	ldr	r3, [r7, #12]
 800ea90:	33b8      	adds	r3, #184	@ 0xb8
 800ea92:	60bb      	str	r3, [r7, #8]
        memcpy(s->mac, pkt->arp->sha, sizeof(s->mac));
 800ea94:	68bb      	ldr	r3, [r7, #8]
 800ea96:	f103 001a 	add.w	r0, r3, #26
 800ea9a:	683b      	ldr	r3, [r7, #0]
 800ea9c:	699b      	ldr	r3, [r3, #24]
 800ea9e:	3308      	adds	r3, #8
 800eaa0:	2206      	movs	r2, #6
 800eaa2:	4619      	mov	r1, r3
 800eaa4:	f015 fe6f 	bl	8024786 <memcpy>
        MG_DEBUG(("%lu ARP resolved %M -> %M", c->id, mg_print_ip4, c->rem.ip,
 800eaa8:	4b14      	ldr	r3, [pc, #80]	@ (800eafc <rx_arp+0x208>)
 800eaaa:	681b      	ldr	r3, [r3, #0]
 800eaac:	2b02      	cmp	r3, #2
 800eaae:	dd15      	ble.n	800eadc <rx_arp+0x1e8>
 800eab0:	4b13      	ldr	r3, [pc, #76]	@ (800eb00 <rx_arp+0x20c>)
 800eab2:	f241 12df 	movw	r2, #4575	@ 0x11df
 800eab6:	4913      	ldr	r1, [pc, #76]	@ (800eb04 <rx_arp+0x210>)
 800eab8:	2003      	movs	r0, #3
 800eaba:	f7fe fb77 	bl	800d1ac <mg_log_prefix>
 800eabe:	68fb      	ldr	r3, [r7, #12]
 800eac0:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 800eac2:	68fb      	ldr	r3, [r7, #12]
 800eac4:	f103 0220 	add.w	r2, r3, #32
 800eac8:	68bb      	ldr	r3, [r7, #8]
 800eaca:	331a      	adds	r3, #26
 800eacc:	9301      	str	r3, [sp, #4]
 800eace:	4b0e      	ldr	r3, [pc, #56]	@ (800eb08 <rx_arp+0x214>)
 800ead0:	9300      	str	r3, [sp, #0]
 800ead2:	4613      	mov	r3, r2
 800ead4:	4a0d      	ldr	r2, [pc, #52]	@ (800eb0c <rx_arp+0x218>)
 800ead6:	480f      	ldr	r0, [pc, #60]	@ (800eb14 <rx_arp+0x220>)
 800ead8:	f7fe fbb8 	bl	800d24c <mg_log>
                  mg_print_mac, s->mac));
        c->is_arplooking = 0;
 800eadc:	68fa      	ldr	r2, [r7, #12]
 800eade:	f892 30b4 	ldrb.w	r3, [r2, #180]	@ 0xb4
 800eae2:	f023 0310 	bic.w	r3, r3, #16
 800eae6:	f882 30b4 	strb.w	r3, [r2, #180]	@ 0xb4
        mac_resolved(c);
 800eaea:	68f8      	ldr	r0, [r7, #12]
 800eaec:	f002 fe7f 	bl	80117ee <mac_resolved>
 800eaf0:	e000      	b.n	800eaf4 <rx_arp+0x200>
    if (memcmp(pkt->arp->tha, ifp->mac, sizeof(pkt->arp->tha)) != 0) return;
 800eaf2:	bf00      	nop
      }
    }
  }
}
 800eaf4:	3718      	adds	r7, #24
 800eaf6:	46bd      	mov	sp, r7
 800eaf8:	bdb0      	pop	{r4, r5, r7, pc}
 800eafa:	bf00      	nop
 800eafc:	20000258 	.word	0x20000258
 800eb00:	080288a8 	.word	0x080288a8
 800eb04:	08025140 	.word	0x08025140
 800eb08:	080124a9 	.word	0x080124a9
 800eb0c:	080123b9 	.word	0x080123b9
 800eb10:	08026324 	.word	0x08026324
 800eb14:	0802633c 	.word	0x0802633c

0800eb18 <rx_icmp>:

static void rx_icmp(struct mg_tcpip_if *ifp, struct pkt *pkt) {
 800eb18:	b580      	push	{r7, lr}
 800eb1a:	b08a      	sub	sp, #40	@ 0x28
 800eb1c:	af02      	add	r7, sp, #8
 800eb1e:	6078      	str	r0, [r7, #4]
 800eb20:	6039      	str	r1, [r7, #0]
  // MG_DEBUG(("ICMP %d", (int) len));
  if (pkt->icmp->type == 8 && pkt->ip != NULL && pkt->ip->dst == ifp->ip) {
 800eb22:	683b      	ldr	r3, [r7, #0]
 800eb24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800eb26:	781b      	ldrb	r3, [r3, #0]
 800eb28:	2b08      	cmp	r3, #8
 800eb2a:	d14d      	bne.n	800ebc8 <rx_icmp+0xb0>
 800eb2c:	683b      	ldr	r3, [r7, #0]
 800eb2e:	69db      	ldr	r3, [r3, #28]
 800eb30:	2b00      	cmp	r3, #0
 800eb32:	d049      	beq.n	800ebc8 <rx_icmp+0xb0>
 800eb34:	683b      	ldr	r3, [r7, #0]
 800eb36:	69db      	ldr	r3, [r3, #28]
 800eb38:	691a      	ldr	r2, [r3, #16]
 800eb3a:	687b      	ldr	r3, [r7, #4]
 800eb3c:	689b      	ldr	r3, [r3, #8]
 800eb3e:	429a      	cmp	r2, r3
 800eb40:	d142      	bne.n	800ebc8 <rx_icmp+0xb0>
    size_t hlen = sizeof(struct eth) + sizeof(struct ip) + sizeof(struct icmp);
 800eb42:	2326      	movs	r3, #38	@ 0x26
 800eb44:	61bb      	str	r3, [r7, #24]
    size_t space = ifp->tx.len - hlen, plen = pkt->pay.len;
 800eb46:	687b      	ldr	r3, [r7, #4]
 800eb48:	699a      	ldr	r2, [r3, #24]
 800eb4a:	69bb      	ldr	r3, [r7, #24]
 800eb4c:	1ad3      	subs	r3, r2, r3
 800eb4e:	617b      	str	r3, [r7, #20]
 800eb50:	683b      	ldr	r3, [r7, #0]
 800eb52:	68db      	ldr	r3, [r3, #12]
 800eb54:	61fb      	str	r3, [r7, #28]
    struct ip *ip;
    struct icmp *icmp;
    if (plen > space) plen = space;
 800eb56:	69fa      	ldr	r2, [r7, #28]
 800eb58:	697b      	ldr	r3, [r7, #20]
 800eb5a:	429a      	cmp	r2, r3
 800eb5c:	d901      	bls.n	800eb62 <rx_icmp+0x4a>
 800eb5e:	697b      	ldr	r3, [r7, #20]
 800eb60:	61fb      	str	r3, [r7, #28]
    ip = tx_ip(ifp, pkt->eth->src, 1, ifp->ip, pkt->ip->src,
 800eb62:	683b      	ldr	r3, [r7, #0]
 800eb64:	691b      	ldr	r3, [r3, #16]
 800eb66:	1d99      	adds	r1, r3, #6
 800eb68:	687b      	ldr	r3, [r7, #4]
 800eb6a:	6898      	ldr	r0, [r3, #8]
 800eb6c:	683b      	ldr	r3, [r7, #0]
 800eb6e:	69db      	ldr	r3, [r3, #28]
 800eb70:	68db      	ldr	r3, [r3, #12]
 800eb72:	69fa      	ldr	r2, [r7, #28]
 800eb74:	3204      	adds	r2, #4
 800eb76:	9201      	str	r2, [sp, #4]
 800eb78:	9300      	str	r3, [sp, #0]
 800eb7a:	4603      	mov	r3, r0
 800eb7c:	2201      	movs	r2, #1
 800eb7e:	6878      	ldr	r0, [r7, #4]
 800eb80:	f7ff fba4 	bl	800e2cc <tx_ip>
 800eb84:	6138      	str	r0, [r7, #16]
               sizeof(*icmp) + plen);
    icmp = (struct icmp *) (ip + 1);
 800eb86:	693b      	ldr	r3, [r7, #16]
 800eb88:	3314      	adds	r3, #20
 800eb8a:	60fb      	str	r3, [r7, #12]
    memset(icmp, 0, sizeof(*icmp));        // Set csum to 0
 800eb8c:	2204      	movs	r2, #4
 800eb8e:	2100      	movs	r1, #0
 800eb90:	68f8      	ldr	r0, [r7, #12]
 800eb92:	f015 fc7b 	bl	802448c <memset>
    memcpy(icmp + 1, pkt->pay.buf, plen);  // Copy RX payload to TX
 800eb96:	68fb      	ldr	r3, [r7, #12]
 800eb98:	1d18      	adds	r0, r3, #4
 800eb9a:	683b      	ldr	r3, [r7, #0]
 800eb9c:	689b      	ldr	r3, [r3, #8]
 800eb9e:	69fa      	ldr	r2, [r7, #28]
 800eba0:	4619      	mov	r1, r3
 800eba2:	f015 fdf0 	bl	8024786 <memcpy>
    icmp->csum = ipcsum(icmp, sizeof(*icmp) + plen);
 800eba6:	69fb      	ldr	r3, [r7, #28]
 800eba8:	3304      	adds	r3, #4
 800ebaa:	4619      	mov	r1, r3
 800ebac:	68f8      	ldr	r0, [r7, #12]
 800ebae:	f7ff fa05 	bl	800dfbc <ipcsum>
 800ebb2:	4603      	mov	r3, r0
 800ebb4:	461a      	mov	r2, r3
 800ebb6:	68fb      	ldr	r3, [r7, #12]
 800ebb8:	805a      	strh	r2, [r3, #2]
    ether_output(ifp, hlen + plen);
 800ebba:	69ba      	ldr	r2, [r7, #24]
 800ebbc:	69fb      	ldr	r3, [r7, #28]
 800ebbe:	4413      	add	r3, r2
 800ebc0:	4619      	mov	r1, r3
 800ebc2:	6878      	ldr	r0, [r7, #4]
 800ebc4:	f7ff fa72 	bl	800e0ac <ether_output>
  }
}
 800ebc8:	bf00      	nop
 800ebca:	3720      	adds	r7, #32
 800ebcc:	46bd      	mov	sp, r7
 800ebce:	bd80      	pop	{r7, pc}

0800ebd0 <rx_dhcp_client>:

static void setdns4(struct mg_tcpip_if *ifp, uint32_t *ip);

static void rx_dhcp_client(struct mg_tcpip_if *ifp, struct pkt *pkt) {
 800ebd0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800ebd4:	b090      	sub	sp, #64	@ 0x40
 800ebd6:	af00      	add	r7, sp, #0
 800ebd8:	60f8      	str	r0, [r7, #12]
 800ebda:	60b9      	str	r1, [r7, #8]
  uint32_t ip = 0, gw = 0, mask = 0, lease = 0, dns = 0, sntp = 0;
 800ebdc:	2300      	movs	r3, #0
 800ebde:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ebe0:	2300      	movs	r3, #0
 800ebe2:	62bb      	str	r3, [r7, #40]	@ 0x28
 800ebe4:	2300      	movs	r3, #0
 800ebe6:	627b      	str	r3, [r7, #36]	@ 0x24
 800ebe8:	2300      	movs	r3, #0
 800ebea:	623b      	str	r3, [r7, #32]
 800ebec:	2300      	movs	r3, #0
 800ebee:	61fb      	str	r3, [r7, #28]
 800ebf0:	2300      	movs	r3, #0
 800ebf2:	61bb      	str	r3, [r7, #24]
  uint8_t msgtype = 0, state = ifp->state;
 800ebf4:	2300      	movs	r3, #0
 800ebf6:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
 800ebfa:	68fb      	ldr	r3, [r7, #12]
 800ebfc:	f893 3094 	ldrb.w	r3, [r3, #148]	@ 0x94
 800ec00:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  // perform size check first, then access fields
  uint8_t *p = pkt->dhcp->options,
 800ec04:	68bb      	ldr	r3, [r7, #8]
 800ec06:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ec08:	33f0      	adds	r3, #240	@ 0xf0
 800ec0a:	637b      	str	r3, [r7, #52]	@ 0x34
          *end = (uint8_t *) &pkt->pay.buf[pkt->pay.len];
 800ec0c:	68bb      	ldr	r3, [r7, #8]
 800ec0e:	689a      	ldr	r2, [r3, #8]
 800ec10:	68bb      	ldr	r3, [r7, #8]
 800ec12:	68db      	ldr	r3, [r3, #12]
 800ec14:	4413      	add	r3, r2
 800ec16:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (end < (uint8_t *) (pkt->dhcp + 1)) return;
 800ec18:	68bb      	ldr	r3, [r7, #8]
 800ec1a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ec1c:	f503 7390 	add.w	r3, r3, #288	@ 0x120
 800ec20:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ec22:	429a      	cmp	r2, r3
 800ec24:	f0c0 81b4 	bcc.w	800ef90 <rx_dhcp_client+0x3c0>
  if (memcmp(&pkt->dhcp->xid, ifp->mac + 2, sizeof(pkt->dhcp->xid))) return;
 800ec28:	68bb      	ldr	r3, [r7, #8]
 800ec2a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ec2c:	1d18      	adds	r0, r3, #4
 800ec2e:	68fb      	ldr	r3, [r7, #12]
 800ec30:	3302      	adds	r3, #2
 800ec32:	2204      	movs	r2, #4
 800ec34:	4619      	mov	r1, r3
 800ec36:	f015 fbff 	bl	8024438 <memcmp>
 800ec3a:	4603      	mov	r3, r0
 800ec3c:	2b00      	cmp	r3, #0
 800ec3e:	f040 81a9 	bne.w	800ef94 <rx_dhcp_client+0x3c4>
  while (p + 1 < end && p[0] != 255) {  // Parse options RFC-1533 #9
 800ec42:	e08a      	b.n	800ed5a <rx_dhcp_client+0x18a>
    if (p[0] == 1 && p[1] == sizeof(ifp->mask) && p + 6 < end) {  // Mask
 800ec44:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ec46:	781b      	ldrb	r3, [r3, #0]
 800ec48:	2b01      	cmp	r3, #1
 800ec4a:	d10e      	bne.n	800ec6a <rx_dhcp_client+0x9a>
 800ec4c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ec4e:	3301      	adds	r3, #1
 800ec50:	781b      	ldrb	r3, [r3, #0]
 800ec52:	2b04      	cmp	r3, #4
 800ec54:	d109      	bne.n	800ec6a <rx_dhcp_client+0x9a>
 800ec56:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ec58:	3306      	adds	r3, #6
 800ec5a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ec5c:	429a      	cmp	r2, r3
 800ec5e:	d904      	bls.n	800ec6a <rx_dhcp_client+0x9a>
      memcpy(&mask, p + 2, sizeof(mask));
 800ec60:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ec62:	3302      	adds	r3, #2
 800ec64:	681b      	ldr	r3, [r3, #0]
 800ec66:	627b      	str	r3, [r7, #36]	@ 0x24
 800ec68:	e070      	b.n	800ed4c <rx_dhcp_client+0x17c>
    } else if (p[0] == 3 && p[1] == sizeof(ifp->gw) && p + 6 < end) {  // GW
 800ec6a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ec6c:	781b      	ldrb	r3, [r3, #0]
 800ec6e:	2b03      	cmp	r3, #3
 800ec70:	d112      	bne.n	800ec98 <rx_dhcp_client+0xc8>
 800ec72:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ec74:	3301      	adds	r3, #1
 800ec76:	781b      	ldrb	r3, [r3, #0]
 800ec78:	2b04      	cmp	r3, #4
 800ec7a:	d10d      	bne.n	800ec98 <rx_dhcp_client+0xc8>
 800ec7c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ec7e:	3306      	adds	r3, #6
 800ec80:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ec82:	429a      	cmp	r2, r3
 800ec84:	d908      	bls.n	800ec98 <rx_dhcp_client+0xc8>
      memcpy(&gw, p + 2, sizeof(gw));
 800ec86:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ec88:	3302      	adds	r3, #2
 800ec8a:	681b      	ldr	r3, [r3, #0]
 800ec8c:	62bb      	str	r3, [r7, #40]	@ 0x28
      ip = pkt->dhcp->yiaddr;
 800ec8e:	68bb      	ldr	r3, [r7, #8]
 800ec90:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ec92:	691b      	ldr	r3, [r3, #16]
 800ec94:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ec96:	e059      	b.n	800ed4c <rx_dhcp_client+0x17c>
    } else if (ifp->enable_req_dns && p[0] == 6 && p[1] == sizeof(dns) &&
 800ec98:	68fb      	ldr	r3, [r7, #12]
 800ec9a:	7fdb      	ldrb	r3, [r3, #31]
 800ec9c:	2b00      	cmp	r3, #0
 800ec9e:	d012      	beq.n	800ecc6 <rx_dhcp_client+0xf6>
 800eca0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800eca2:	781b      	ldrb	r3, [r3, #0]
 800eca4:	2b06      	cmp	r3, #6
 800eca6:	d10e      	bne.n	800ecc6 <rx_dhcp_client+0xf6>
 800eca8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ecaa:	3301      	adds	r3, #1
 800ecac:	781b      	ldrb	r3, [r3, #0]
 800ecae:	2b04      	cmp	r3, #4
 800ecb0:	d109      	bne.n	800ecc6 <rx_dhcp_client+0xf6>
               p + 6 < end) {  // DNS
 800ecb2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ecb4:	3306      	adds	r3, #6
    } else if (ifp->enable_req_dns && p[0] == 6 && p[1] == sizeof(dns) &&
 800ecb6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ecb8:	429a      	cmp	r2, r3
 800ecba:	d904      	bls.n	800ecc6 <rx_dhcp_client+0xf6>
      memcpy(&dns, p + 2, sizeof(dns));
 800ecbc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ecbe:	3302      	adds	r3, #2
 800ecc0:	681b      	ldr	r3, [r3, #0]
 800ecc2:	61fb      	str	r3, [r7, #28]
 800ecc4:	e042      	b.n	800ed4c <rx_dhcp_client+0x17c>
    } else if (ifp->enable_req_sntp && p[0] == 42 && p[1] == sizeof(sntp) &&
 800ecc6:	68fb      	ldr	r3, [r7, #12]
 800ecc8:	f893 3020 	ldrb.w	r3, [r3, #32]
 800eccc:	2b00      	cmp	r3, #0
 800ecce:	d012      	beq.n	800ecf6 <rx_dhcp_client+0x126>
 800ecd0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ecd2:	781b      	ldrb	r3, [r3, #0]
 800ecd4:	2b2a      	cmp	r3, #42	@ 0x2a
 800ecd6:	d10e      	bne.n	800ecf6 <rx_dhcp_client+0x126>
 800ecd8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ecda:	3301      	adds	r3, #1
 800ecdc:	781b      	ldrb	r3, [r3, #0]
 800ecde:	2b04      	cmp	r3, #4
 800ece0:	d109      	bne.n	800ecf6 <rx_dhcp_client+0x126>
               p + 6 < end) {  // SNTP
 800ece2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ece4:	3306      	adds	r3, #6
    } else if (ifp->enable_req_sntp && p[0] == 42 && p[1] == sizeof(sntp) &&
 800ece6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ece8:	429a      	cmp	r2, r3
 800ecea:	d904      	bls.n	800ecf6 <rx_dhcp_client+0x126>
      memcpy(&sntp, p + 2, sizeof(sntp));
 800ecec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ecee:	3302      	adds	r3, #2
 800ecf0:	681b      	ldr	r3, [r3, #0]
 800ecf2:	61bb      	str	r3, [r7, #24]
 800ecf4:	e02a      	b.n	800ed4c <rx_dhcp_client+0x17c>
    } else if (p[0] == 51 && p[1] == 4 && p + 6 < end) {  // Lease
 800ecf6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ecf8:	781b      	ldrb	r3, [r3, #0]
 800ecfa:	2b33      	cmp	r3, #51	@ 0x33
 800ecfc:	d114      	bne.n	800ed28 <rx_dhcp_client+0x158>
 800ecfe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ed00:	3301      	adds	r3, #1
 800ed02:	781b      	ldrb	r3, [r3, #0]
 800ed04:	2b04      	cmp	r3, #4
 800ed06:	d10f      	bne.n	800ed28 <rx_dhcp_client+0x158>
 800ed08:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ed0a:	3306      	adds	r3, #6
 800ed0c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ed0e:	429a      	cmp	r2, r3
 800ed10:	d90a      	bls.n	800ed28 <rx_dhcp_client+0x158>
      memcpy(&lease, p + 2, sizeof(lease));
 800ed12:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ed14:	3302      	adds	r3, #2
 800ed16:	681b      	ldr	r3, [r3, #0]
 800ed18:	623b      	str	r3, [r7, #32]
      lease = mg_ntohl(lease);
 800ed1a:	6a3b      	ldr	r3, [r7, #32]
 800ed1c:	4618      	mov	r0, r3
 800ed1e:	f012 fa17 	bl	8021150 <mg_ntohl>
 800ed22:	4603      	mov	r3, r0
 800ed24:	623b      	str	r3, [r7, #32]
 800ed26:	e011      	b.n	800ed4c <rx_dhcp_client+0x17c>
    } else if (p[0] == 53 && p[1] == 1 && p + 6 < end) {  // Msg Type
 800ed28:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ed2a:	781b      	ldrb	r3, [r3, #0]
 800ed2c:	2b35      	cmp	r3, #53	@ 0x35
 800ed2e:	d10d      	bne.n	800ed4c <rx_dhcp_client+0x17c>
 800ed30:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ed32:	3301      	adds	r3, #1
 800ed34:	781b      	ldrb	r3, [r3, #0]
 800ed36:	2b01      	cmp	r3, #1
 800ed38:	d108      	bne.n	800ed4c <rx_dhcp_client+0x17c>
 800ed3a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ed3c:	3306      	adds	r3, #6
 800ed3e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ed40:	429a      	cmp	r2, r3
 800ed42:	d903      	bls.n	800ed4c <rx_dhcp_client+0x17c>
      msgtype = p[2];
 800ed44:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ed46:	789b      	ldrb	r3, [r3, #2]
 800ed48:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
    }
    p += p[1] + 2;
 800ed4c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ed4e:	3301      	adds	r3, #1
 800ed50:	781b      	ldrb	r3, [r3, #0]
 800ed52:	3302      	adds	r3, #2
 800ed54:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800ed56:	4413      	add	r3, r2
 800ed58:	637b      	str	r3, [r7, #52]	@ 0x34
  while (p + 1 < end && p[0] != 255) {  // Parse options RFC-1533 #9
 800ed5a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ed5c:	3301      	adds	r3, #1
 800ed5e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ed60:	429a      	cmp	r2, r3
 800ed62:	d904      	bls.n	800ed6e <rx_dhcp_client+0x19e>
 800ed64:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ed66:	781b      	ldrb	r3, [r3, #0]
 800ed68:	2bff      	cmp	r3, #255	@ 0xff
 800ed6a:	f47f af6b 	bne.w	800ec44 <rx_dhcp_client+0x74>
  }
  // Process message type, RFC-1533 (9.4); RFC-2131 (3.1, 4)
  if (msgtype == 6 && ifp->ip == ip) {  // DHCPNACK, release IP
 800ed6e:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 800ed72:	2b06      	cmp	r3, #6
 800ed74:	d10c      	bne.n	800ed90 <rx_dhcp_client+0x1c0>
 800ed76:	68fb      	ldr	r3, [r7, #12]
 800ed78:	689b      	ldr	r3, [r3, #8]
 800ed7a:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800ed7c:	429a      	cmp	r2, r3
 800ed7e:	d107      	bne.n	800ed90 <rx_dhcp_client+0x1c0>
    ifp->state = MG_TCPIP_STATE_UP, ifp->ip = 0;
 800ed80:	68fb      	ldr	r3, [r7, #12]
 800ed82:	2201      	movs	r2, #1
 800ed84:	f883 2094 	strb.w	r2, [r3, #148]	@ 0x94
 800ed88:	68fb      	ldr	r3, [r7, #12]
 800ed8a:	2200      	movs	r2, #0
 800ed8c:	609a      	str	r2, [r3, #8]
 800ed8e:	e0f4      	b.n	800ef7a <rx_dhcp_client+0x3aa>
  } else if (msgtype == 2 && ifp->state == MG_TCPIP_STATE_UP && ip && gw &&
 800ed90:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 800ed94:	2b02      	cmp	r3, #2
 800ed96:	d123      	bne.n	800ede0 <rx_dhcp_client+0x210>
 800ed98:	68fb      	ldr	r3, [r7, #12]
 800ed9a:	f893 3094 	ldrb.w	r3, [r3, #148]	@ 0x94
 800ed9e:	2b01      	cmp	r3, #1
 800eda0:	d11e      	bne.n	800ede0 <rx_dhcp_client+0x210>
 800eda2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800eda4:	2b00      	cmp	r3, #0
 800eda6:	d01b      	beq.n	800ede0 <rx_dhcp_client+0x210>
 800eda8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800edaa:	2b00      	cmp	r3, #0
 800edac:	d018      	beq.n	800ede0 <rx_dhcp_client+0x210>
 800edae:	6a3b      	ldr	r3, [r7, #32]
 800edb0:	2b00      	cmp	r3, #0
 800edb2:	d015      	beq.n	800ede0 <rx_dhcp_client+0x210>
             lease) {  // DHCPOFFER
    // select IP, (4.4.1) (fallback to IP source addr on foul play)
    tx_dhcp_request_sel(ifp, ip,
                        pkt->dhcp->siaddr ? pkt->dhcp->siaddr : pkt->ip->src);
 800edb4:	68bb      	ldr	r3, [r7, #8]
 800edb6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800edb8:	695b      	ldr	r3, [r3, #20]
    tx_dhcp_request_sel(ifp, ip,
 800edba:	2b00      	cmp	r3, #0
 800edbc:	d003      	beq.n	800edc6 <rx_dhcp_client+0x1f6>
                        pkt->dhcp->siaddr ? pkt->dhcp->siaddr : pkt->ip->src);
 800edbe:	68bb      	ldr	r3, [r7, #8]
 800edc0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    tx_dhcp_request_sel(ifp, ip,
 800edc2:	695b      	ldr	r3, [r3, #20]
 800edc4:	e002      	b.n	800edcc <rx_dhcp_client+0x1fc>
                        pkt->dhcp->siaddr ? pkt->dhcp->siaddr : pkt->ip->src);
 800edc6:	68bb      	ldr	r3, [r7, #8]
 800edc8:	69db      	ldr	r3, [r3, #28]
    tx_dhcp_request_sel(ifp, ip,
 800edca:	68db      	ldr	r3, [r3, #12]
 800edcc:	461a      	mov	r2, r3
 800edce:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800edd0:	68f8      	ldr	r0, [r7, #12]
 800edd2:	f7ff fbd3 	bl	800e57c <tx_dhcp_request_sel>
    ifp->state = MG_TCPIP_STATE_REQ;  // REQUESTING state
 800edd6:	68fb      	ldr	r3, [r7, #12]
 800edd8:	2202      	movs	r2, #2
 800edda:	f883 2094 	strb.w	r2, [r3, #148]	@ 0x94
 800edde:	e0cc      	b.n	800ef7a <rx_dhcp_client+0x3aa>
  } else if (msgtype == 5) {          // DHCPACK
 800ede0:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 800ede4:	2b05      	cmp	r3, #5
 800ede6:	f040 80c8 	bne.w	800ef7a <rx_dhcp_client+0x3aa>
    if (ifp->state == MG_TCPIP_STATE_REQ && ip && gw && lease) {  // got an IP
 800edea:	68fb      	ldr	r3, [r7, #12]
 800edec:	f893 3094 	ldrb.w	r3, [r3, #148]	@ 0x94
 800edf0:	2b02      	cmp	r3, #2
 800edf2:	f040 8089 	bne.w	800ef08 <rx_dhcp_client+0x338>
 800edf6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800edf8:	2b00      	cmp	r3, #0
 800edfa:	f000 8085 	beq.w	800ef08 <rx_dhcp_client+0x338>
 800edfe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ee00:	2b00      	cmp	r3, #0
 800ee02:	f000 8081 	beq.w	800ef08 <rx_dhcp_client+0x338>
 800ee06:	6a3b      	ldr	r3, [r7, #32]
 800ee08:	2b00      	cmp	r3, #0
 800ee0a:	d07d      	beq.n	800ef08 <rx_dhcp_client+0x338>
      uint64_t rand;
      ifp->lease_expire = ifp->now + lease * 1000;
 800ee0c:	68fb      	ldr	r3, [r7, #12]
 800ee0e:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	@ 0x68
 800ee12:	6a39      	ldr	r1, [r7, #32]
 800ee14:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800ee18:	fb00 f101 	mul.w	r1, r0, r1
 800ee1c:	2000      	movs	r0, #0
 800ee1e:	4688      	mov	r8, r1
 800ee20:	4681      	mov	r9, r0
 800ee22:	eb12 0108 	adds.w	r1, r2, r8
 800ee26:	6039      	str	r1, [r7, #0]
 800ee28:	eb43 0309 	adc.w	r3, r3, r9
 800ee2c:	607b      	str	r3, [r7, #4]
 800ee2e:	68fb      	ldr	r3, [r7, #12]
 800ee30:	e9d7 1200 	ldrd	r1, r2, [r7]
 800ee34:	e9c3 121e 	strd	r1, r2, [r3, #120]	@ 0x78
      MG_INFO(("Lease: %u sec (%lld)", lease, ifp->lease_expire / 1000));
 800ee38:	4b59      	ldr	r3, [pc, #356]	@ (800efa0 <rx_dhcp_client+0x3d0>)
 800ee3a:	681b      	ldr	r3, [r3, #0]
 800ee3c:	2b01      	cmp	r3, #1
 800ee3e:	dd16      	ble.n	800ee6e <rx_dhcp_client+0x29e>
 800ee40:	4b58      	ldr	r3, [pc, #352]	@ (800efa4 <rx_dhcp_client+0x3d4>)
 800ee42:	f241 2225 	movw	r2, #4645	@ 0x1225
 800ee46:	4958      	ldr	r1, [pc, #352]	@ (800efa8 <rx_dhcp_client+0x3d8>)
 800ee48:	2002      	movs	r0, #2
 800ee4a:	f7fe f9af 	bl	800d1ac <mg_log_prefix>
 800ee4e:	6a3c      	ldr	r4, [r7, #32]
 800ee50:	68fb      	ldr	r3, [r7, #12]
 800ee52:	e9d3 011e 	ldrd	r0, r1, [r3, #120]	@ 0x78
 800ee56:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800ee5a:	f04f 0300 	mov.w	r3, #0
 800ee5e:	f7f1 fa57 	bl	8000310 <__aeabi_uldivmod>
 800ee62:	4602      	mov	r2, r0
 800ee64:	460b      	mov	r3, r1
 800ee66:	4621      	mov	r1, r4
 800ee68:	4850      	ldr	r0, [pc, #320]	@ (800efac <rx_dhcp_client+0x3dc>)
 800ee6a:	f7fe f9ef 	bl	800d24c <mg_log>
      // assume DHCP server = router until ARP resolves
      memcpy(ifp->gwmac, pkt->eth->src, sizeof(ifp->gwmac));
 800ee6e:	68fb      	ldr	r3, [r7, #12]
 800ee70:	f103 005c 	add.w	r0, r3, #92	@ 0x5c
 800ee74:	68bb      	ldr	r3, [r7, #8]
 800ee76:	691b      	ldr	r3, [r3, #16]
 800ee78:	3306      	adds	r3, #6
 800ee7a:	2206      	movs	r2, #6
 800ee7c:	4619      	mov	r1, r3
 800ee7e:	f015 fc82 	bl	8024786 <memcpy>
      ifp->ip = ip, ifp->gw = gw, ifp->mask = mask;
 800ee82:	68fb      	ldr	r3, [r7, #12]
 800ee84:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800ee86:	609a      	str	r2, [r3, #8]
 800ee88:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800ee8a:	68fb      	ldr	r3, [r7, #12]
 800ee8c:	611a      	str	r2, [r3, #16]
 800ee8e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ee90:	68fb      	ldr	r3, [r7, #12]
 800ee92:	60da      	str	r2, [r3, #12]
      ifp->state = MG_TCPIP_STATE_IP;  // BOUND state
 800ee94:	68fb      	ldr	r3, [r7, #12]
 800ee96:	2203      	movs	r2, #3
 800ee98:	f883 2094 	strb.w	r2, [r3, #148]	@ 0x94
      mg_random(&rand, sizeof(rand));
 800ee9c:	f107 0310 	add.w	r3, r7, #16
 800eea0:	2108      	movs	r1, #8
 800eea2:	4618      	mov	r0, r3
 800eea4:	f7f1 fc28 	bl	80006f8 <mg_random>
      srand((unsigned int) (rand + mg_millis()));
 800eea8:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800eeac:	4614      	mov	r4, r2
 800eeae:	f012 f92b 	bl	8021108 <mg_millis>
 800eeb2:	4602      	mov	r2, r0
 800eeb4:	460b      	mov	r3, r1
 800eeb6:	4613      	mov	r3, r2
 800eeb8:	4423      	add	r3, r4
 800eeba:	4618      	mov	r0, r3
 800eebc:	f014 ffe6 	bl	8023e8c <srand>
      if (ifp->enable_req_dns && dns != 0) {
 800eec0:	68fb      	ldr	r3, [r7, #12]
 800eec2:	7fdb      	ldrb	r3, [r3, #31]
 800eec4:	2b00      	cmp	r3, #0
 800eec6:	d00f      	beq.n	800eee8 <rx_dhcp_client+0x318>
 800eec8:	69fb      	ldr	r3, [r7, #28]
 800eeca:	2b00      	cmp	r3, #0
 800eecc:	d00c      	beq.n	800eee8 <rx_dhcp_client+0x318>
        setdns4(ifp, &dns);
 800eece:	f107 031c 	add.w	r3, r7, #28
 800eed2:	4619      	mov	r1, r3
 800eed4:	68f8      	ldr	r0, [r7, #12]
 800eed6:	f003 f89d 	bl	8012014 <setdns4>
        mg_tcpip_call(ifp, MG_TCPIP_EV_DHCP_DNS, &dns);
 800eeda:	f107 031c 	add.w	r3, r7, #28
 800eede:	461a      	mov	r2, r3
 800eee0:	2101      	movs	r1, #1
 800eee2:	68f8      	ldr	r0, [r7, #12]
 800eee4:	f7fe ffe8 	bl	800deb8 <mg_tcpip_call>
      }
      if (ifp->enable_req_sntp && sntp != 0)
 800eee8:	68fb      	ldr	r3, [r7, #12]
 800eeea:	f893 3020 	ldrb.w	r3, [r3, #32]
 800eeee:	2b00      	cmp	r3, #0
 800eef0:	d042      	beq.n	800ef78 <rx_dhcp_client+0x3a8>
 800eef2:	69bb      	ldr	r3, [r7, #24]
 800eef4:	2b00      	cmp	r3, #0
 800eef6:	d03f      	beq.n	800ef78 <rx_dhcp_client+0x3a8>
        mg_tcpip_call(ifp, MG_TCPIP_EV_DHCP_SNTP, &sntp);
 800eef8:	f107 0318 	add.w	r3, r7, #24
 800eefc:	461a      	mov	r2, r3
 800eefe:	2102      	movs	r1, #2
 800ef00:	68f8      	ldr	r0, [r7, #12]
 800ef02:	f7fe ffd9 	bl	800deb8 <mg_tcpip_call>
    if (ifp->state == MG_TCPIP_STATE_REQ && ip && gw && lease) {  // got an IP
 800ef06:	e037      	b.n	800ef78 <rx_dhcp_client+0x3a8>
    } else if (ifp->state == MG_TCPIP_STATE_READY && ifp->ip == ip) {  // renew
 800ef08:	68fb      	ldr	r3, [r7, #12]
 800ef0a:	f893 3094 	ldrb.w	r3, [r3, #148]	@ 0x94
 800ef0e:	2b04      	cmp	r3, #4
 800ef10:	d133      	bne.n	800ef7a <rx_dhcp_client+0x3aa>
 800ef12:	68fb      	ldr	r3, [r7, #12]
 800ef14:	689b      	ldr	r3, [r3, #8]
 800ef16:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800ef18:	429a      	cmp	r2, r3
 800ef1a:	d12e      	bne.n	800ef7a <rx_dhcp_client+0x3aa>
      ifp->lease_expire = ifp->now + lease * 1000;
 800ef1c:	68fb      	ldr	r3, [r7, #12]
 800ef1e:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	@ 0x68
 800ef22:	6a39      	ldr	r1, [r7, #32]
 800ef24:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800ef28:	fb00 f101 	mul.w	r1, r0, r1
 800ef2c:	2000      	movs	r0, #0
 800ef2e:	460c      	mov	r4, r1
 800ef30:	4605      	mov	r5, r0
 800ef32:	eb12 0a04 	adds.w	sl, r2, r4
 800ef36:	eb43 0b05 	adc.w	fp, r3, r5
 800ef3a:	68fb      	ldr	r3, [r7, #12]
 800ef3c:	e9c3 ab1e 	strd	sl, fp, [r3, #120]	@ 0x78
      MG_INFO(("Lease: %u sec (%lld)", lease, ifp->lease_expire / 1000));
 800ef40:	4b17      	ldr	r3, [pc, #92]	@ (800efa0 <rx_dhcp_client+0x3d0>)
 800ef42:	681b      	ldr	r3, [r3, #0]
 800ef44:	2b01      	cmp	r3, #1
 800ef46:	dd18      	ble.n	800ef7a <rx_dhcp_client+0x3aa>
 800ef48:	4b16      	ldr	r3, [pc, #88]	@ (800efa4 <rx_dhcp_client+0x3d4>)
 800ef4a:	f241 2234 	movw	r2, #4660	@ 0x1234
 800ef4e:	4916      	ldr	r1, [pc, #88]	@ (800efa8 <rx_dhcp_client+0x3d8>)
 800ef50:	2002      	movs	r0, #2
 800ef52:	f7fe f92b 	bl	800d1ac <mg_log_prefix>
 800ef56:	6a3c      	ldr	r4, [r7, #32]
 800ef58:	68fb      	ldr	r3, [r7, #12]
 800ef5a:	e9d3 011e 	ldrd	r0, r1, [r3, #120]	@ 0x78
 800ef5e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800ef62:	f04f 0300 	mov.w	r3, #0
 800ef66:	f7f1 f9d3 	bl	8000310 <__aeabi_uldivmod>
 800ef6a:	4602      	mov	r2, r0
 800ef6c:	460b      	mov	r3, r1
 800ef6e:	4621      	mov	r1, r4
 800ef70:	480e      	ldr	r0, [pc, #56]	@ (800efac <rx_dhcp_client+0x3dc>)
 800ef72:	f7fe f96b 	bl	800d24c <mg_log>
 800ef76:	e000      	b.n	800ef7a <rx_dhcp_client+0x3aa>
    if (ifp->state == MG_TCPIP_STATE_REQ && ip && gw && lease) {  // got an IP
 800ef78:	bf00      	nop
    }  // TODO(): accept provided T1/T2 and store server IP for renewal (4.4)
  }
  if (ifp->state != state) onstatechange(ifp);
 800ef7a:	68fb      	ldr	r3, [r7, #12]
 800ef7c:	f893 3094 	ldrb.w	r3, [r3, #148]	@ 0x94
 800ef80:	f897 2033 	ldrb.w	r2, [r7, #51]	@ 0x33
 800ef84:	429a      	cmp	r2, r3
 800ef86:	d006      	beq.n	800ef96 <rx_dhcp_client+0x3c6>
 800ef88:	68f8      	ldr	r0, [r7, #12]
 800ef8a:	f7ff f915 	bl	800e1b8 <onstatechange>
 800ef8e:	e002      	b.n	800ef96 <rx_dhcp_client+0x3c6>
  if (end < (uint8_t *) (pkt->dhcp + 1)) return;
 800ef90:	bf00      	nop
 800ef92:	e000      	b.n	800ef96 <rx_dhcp_client+0x3c6>
  if (memcmp(&pkt->dhcp->xid, ifp->mac + 2, sizeof(pkt->dhcp->xid))) return;
 800ef94:	bf00      	nop
}
 800ef96:	3740      	adds	r7, #64	@ 0x40
 800ef98:	46bd      	mov	sp, r7
 800ef9a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800ef9e:	bf00      	nop
 800efa0:	20000258 	.word	0x20000258
 800efa4:	080288b0 	.word	0x080288b0
 800efa8:	08025140 	.word	0x08025140
 800efac:	08026358 	.word	0x08026358

0800efb0 <rx_dhcp_server>:

// Simple DHCP server that assigns a next IP address: ifp->ip + 1
static void rx_dhcp_server(struct mg_tcpip_if *ifp, struct pkt *pkt) {
 800efb0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800efb4:	b0da      	sub	sp, #360	@ 0x168
 800efb6:	af04      	add	r7, sp, #16
 800efb8:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800efbc:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 800efc0:	6018      	str	r0, [r3, #0]
 800efc2:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800efc6:	f5a3 73ac 	sub.w	r3, r3, #344	@ 0x158
 800efca:	6019      	str	r1, [r3, #0]
  uint8_t op = 0, *p = pkt->dhcp->options,
 800efcc:	2300      	movs	r3, #0
 800efce:	f887 3157 	strb.w	r3, [r7, #343]	@ 0x157
 800efd2:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800efd6:	f5a3 73ac 	sub.w	r3, r3, #344	@ 0x158
 800efda:	681b      	ldr	r3, [r3, #0]
 800efdc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800efde:	33f0      	adds	r3, #240	@ 0xf0
 800efe0:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
          *end = (uint8_t *) &pkt->pay.buf[pkt->pay.len];
 800efe4:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800efe8:	f5a3 73ac 	sub.w	r3, r3, #344	@ 0x158
 800efec:	681b      	ldr	r3, [r3, #0]
 800efee:	689a      	ldr	r2, [r3, #8]
 800eff0:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800eff4:	f5a3 73ac 	sub.w	r3, r3, #344	@ 0x158
 800eff8:	681b      	ldr	r3, [r3, #0]
 800effa:	68db      	ldr	r3, [r3, #12]
 800effc:	4413      	add	r3, r2
 800effe:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
  // struct dhcp *req = pkt->dhcp;
  struct dhcp res = {2, 1, 6, 0, 0, 0, 0, 0, 0, 0, 0, {0}, 0, {0}};
 800f002:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800f006:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800f00a:	4adc      	ldr	r2, [pc, #880]	@ (800f37c <rx_dhcp_server+0x3cc>)
 800f00c:	4618      	mov	r0, r3
 800f00e:	4611      	mov	r1, r2
 800f010:	f44f 7390 	mov.w	r3, #288	@ 0x120
 800f014:	461a      	mov	r2, r3
 800f016:	f015 fbb6 	bl	8024786 <memcpy>
  if (end < (uint8_t *) (pkt->dhcp + 1)) return;
 800f01a:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800f01e:	f5a3 73ac 	sub.w	r3, r3, #344	@ 0x158
 800f022:	681b      	ldr	r3, [r3, #0]
 800f024:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f026:	f503 7390 	add.w	r3, r3, #288	@ 0x120
 800f02a:	f8d7 214c 	ldr.w	r2, [r7, #332]	@ 0x14c
 800f02e:	429a      	cmp	r2, r3
 800f030:	f0c0 81a6 	bcc.w	800f380 <rx_dhcp_server+0x3d0>
  res.yiaddr = ifp->ip;
 800f034:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800f038:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 800f03c:	681b      	ldr	r3, [r3, #0]
 800f03e:	689a      	ldr	r2, [r3, #8]
 800f040:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800f044:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800f048:	611a      	str	r2, [r3, #16]
  ((uint8_t *) (&res.yiaddr))[3]++;                // Offer our IP + 1
 800f04a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800f04e:	3310      	adds	r3, #16
 800f050:	3303      	adds	r3, #3
 800f052:	781a      	ldrb	r2, [r3, #0]
 800f054:	3201      	adds	r2, #1
 800f056:	b2d2      	uxtb	r2, r2
 800f058:	701a      	strb	r2, [r3, #0]
  while (p + 1 < end && p[0] != 255) {             // Parse options
 800f05a:	e020      	b.n	800f09e <rx_dhcp_server+0xee>
    if (p[0] == 53 && p[1] == 1 && p + 2 < end) {  // Message type
 800f05c:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 800f060:	781b      	ldrb	r3, [r3, #0]
 800f062:	2b35      	cmp	r3, #53	@ 0x35
 800f064:	d111      	bne.n	800f08a <rx_dhcp_server+0xda>
 800f066:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 800f06a:	3301      	adds	r3, #1
 800f06c:	781b      	ldrb	r3, [r3, #0]
 800f06e:	2b01      	cmp	r3, #1
 800f070:	d10b      	bne.n	800f08a <rx_dhcp_server+0xda>
 800f072:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 800f076:	3302      	adds	r3, #2
 800f078:	f8d7 214c 	ldr.w	r2, [r7, #332]	@ 0x14c
 800f07c:	429a      	cmp	r2, r3
 800f07e:	d904      	bls.n	800f08a <rx_dhcp_server+0xda>
      op = p[2];
 800f080:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 800f084:	789b      	ldrb	r3, [r3, #2]
 800f086:	f887 3157 	strb.w	r3, [r7, #343]	@ 0x157
    }
    p += p[1] + 2;
 800f08a:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 800f08e:	3301      	adds	r3, #1
 800f090:	781b      	ldrb	r3, [r3, #0]
 800f092:	3302      	adds	r3, #2
 800f094:	f8d7 2150 	ldr.w	r2, [r7, #336]	@ 0x150
 800f098:	4413      	add	r3, r2
 800f09a:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
  while (p + 1 < end && p[0] != 255) {             // Parse options
 800f09e:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 800f0a2:	3301      	adds	r3, #1
 800f0a4:	f8d7 214c 	ldr.w	r2, [r7, #332]	@ 0x14c
 800f0a8:	429a      	cmp	r2, r3
 800f0aa:	d904      	bls.n	800f0b6 <rx_dhcp_server+0x106>
 800f0ac:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 800f0b0:	781b      	ldrb	r3, [r3, #0]
 800f0b2:	2bff      	cmp	r3, #255	@ 0xff
 800f0b4:	d1d2      	bne.n	800f05c <rx_dhcp_server+0xac>
  }
  if (op == 1 || op == 3) {         // DHCP Discover or DHCP Request
 800f0b6:	f897 3157 	ldrb.w	r3, [r7, #343]	@ 0x157
 800f0ba:	2b01      	cmp	r3, #1
 800f0bc:	d004      	beq.n	800f0c8 <rx_dhcp_server+0x118>
 800f0be:	f897 3157 	ldrb.w	r3, [r7, #343]	@ 0x157
 800f0c2:	2b03      	cmp	r3, #3
 800f0c4:	f040 815d 	bne.w	800f382 <rx_dhcp_server+0x3d2>
    uint8_t msg = op == 1 ? 2 : 5;  // Message type: DHCP OFFER or DHCP ACK
 800f0c8:	f897 3157 	ldrb.w	r3, [r7, #343]	@ 0x157
 800f0cc:	2b01      	cmp	r3, #1
 800f0ce:	d101      	bne.n	800f0d4 <rx_dhcp_server+0x124>
 800f0d0:	2302      	movs	r3, #2
 800f0d2:	e000      	b.n	800f0d6 <rx_dhcp_server+0x126>
 800f0d4:	2305      	movs	r3, #5
 800f0d6:	f887 314b 	strb.w	r3, [r7, #331]	@ 0x14b
    uint8_t opts[] = {
 800f0da:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800f0de:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 800f0e2:	2235      	movs	r2, #53	@ 0x35
 800f0e4:	701a      	strb	r2, [r3, #0]
 800f0e6:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800f0ea:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 800f0ee:	2201      	movs	r2, #1
 800f0f0:	705a      	strb	r2, [r3, #1]
 800f0f2:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800f0f6:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 800f0fa:	f897 214b 	ldrb.w	r2, [r7, #331]	@ 0x14b
 800f0fe:	709a      	strb	r2, [r3, #2]
 800f100:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800f104:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 800f108:	2201      	movs	r2, #1
 800f10a:	70da      	strb	r2, [r3, #3]
 800f10c:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800f110:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 800f114:	2204      	movs	r2, #4
 800f116:	711a      	strb	r2, [r3, #4]
 800f118:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800f11c:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 800f120:	2200      	movs	r2, #0
 800f122:	715a      	strb	r2, [r3, #5]
 800f124:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800f128:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 800f12c:	2200      	movs	r2, #0
 800f12e:	719a      	strb	r2, [r3, #6]
 800f130:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800f134:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 800f138:	2200      	movs	r2, #0
 800f13a:	71da      	strb	r2, [r3, #7]
 800f13c:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800f140:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 800f144:	2200      	movs	r2, #0
 800f146:	721a      	strb	r2, [r3, #8]
 800f148:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800f14c:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 800f150:	2236      	movs	r2, #54	@ 0x36
 800f152:	725a      	strb	r2, [r3, #9]
 800f154:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800f158:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 800f15c:	2204      	movs	r2, #4
 800f15e:	729a      	strb	r2, [r3, #10]
 800f160:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800f164:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 800f168:	2200      	movs	r2, #0
 800f16a:	72da      	strb	r2, [r3, #11]
 800f16c:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800f170:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 800f174:	2200      	movs	r2, #0
 800f176:	731a      	strb	r2, [r3, #12]
 800f178:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800f17c:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 800f180:	2200      	movs	r2, #0
 800f182:	735a      	strb	r2, [r3, #13]
 800f184:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800f188:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 800f18c:	2200      	movs	r2, #0
 800f18e:	739a      	strb	r2, [r3, #14]
 800f190:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800f194:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 800f198:	220c      	movs	r2, #12
 800f19a:	73da      	strb	r2, [r3, #15]
 800f19c:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800f1a0:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 800f1a4:	2203      	movs	r2, #3
 800f1a6:	741a      	strb	r2, [r3, #16]
 800f1a8:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800f1ac:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 800f1b0:	226d      	movs	r2, #109	@ 0x6d
 800f1b2:	745a      	strb	r2, [r3, #17]
 800f1b4:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800f1b8:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 800f1bc:	2269      	movs	r2, #105	@ 0x69
 800f1be:	749a      	strb	r2, [r3, #18]
 800f1c0:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800f1c4:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 800f1c8:	2270      	movs	r2, #112	@ 0x70
 800f1ca:	74da      	strb	r2, [r3, #19]
 800f1cc:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800f1d0:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 800f1d4:	2233      	movs	r2, #51	@ 0x33
 800f1d6:	751a      	strb	r2, [r3, #20]
 800f1d8:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800f1dc:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 800f1e0:	2204      	movs	r2, #4
 800f1e2:	755a      	strb	r2, [r3, #21]
 800f1e4:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800f1e8:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 800f1ec:	22ff      	movs	r2, #255	@ 0xff
 800f1ee:	759a      	strb	r2, [r3, #22]
 800f1f0:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800f1f4:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 800f1f8:	22ff      	movs	r2, #255	@ 0xff
 800f1fa:	75da      	strb	r2, [r3, #23]
 800f1fc:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800f200:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 800f204:	22ff      	movs	r2, #255	@ 0xff
 800f206:	761a      	strb	r2, [r3, #24]
 800f208:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800f20c:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 800f210:	22ff      	movs	r2, #255	@ 0xff
 800f212:	765a      	strb	r2, [r3, #25]
 800f214:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800f218:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 800f21c:	22ff      	movs	r2, #255	@ 0xff
 800f21e:	769a      	strb	r2, [r3, #26]
        54, 4, 0,   0,   0,   0,    // Server ID
        12, 3, 'm', 'i', 'p',       // Host name: "mip"
        51, 4, 255, 255, 255, 255,  // Lease time
        255                         // End of options
    };
    memcpy(&res.hwaddr, pkt->dhcp->hwaddr, 6);
 800f220:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800f224:	f5a3 73ac 	sub.w	r3, r3, #344	@ 0x158
 800f228:	681b      	ldr	r3, [r3, #0]
 800f22a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f22c:	f103 011c 	add.w	r1, r3, #28
 800f230:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800f234:	331c      	adds	r3, #28
 800f236:	2206      	movs	r2, #6
 800f238:	4618      	mov	r0, r3
 800f23a:	f015 faa4 	bl	8024786 <memcpy>
    memcpy(opts + 5, &ifp->mask, sizeof(ifp->mask));
 800f23e:	f107 030c 	add.w	r3, r7, #12
 800f242:	3305      	adds	r3, #5
 800f244:	f507 72ac 	add.w	r2, r7, #344	@ 0x158
 800f248:	f5a2 72aa 	sub.w	r2, r2, #340	@ 0x154
 800f24c:	6812      	ldr	r2, [r2, #0]
 800f24e:	320c      	adds	r2, #12
 800f250:	6812      	ldr	r2, [r2, #0]
 800f252:	601a      	str	r2, [r3, #0]
    memcpy(opts + 11, &ifp->ip, sizeof(ifp->ip));
 800f254:	f107 030c 	add.w	r3, r7, #12
 800f258:	330b      	adds	r3, #11
 800f25a:	f507 72ac 	add.w	r2, r7, #344	@ 0x158
 800f25e:	f5a2 72aa 	sub.w	r2, r2, #340	@ 0x154
 800f262:	6812      	ldr	r2, [r2, #0]
 800f264:	3208      	adds	r2, #8
 800f266:	6812      	ldr	r2, [r2, #0]
 800f268:	601a      	str	r2, [r3, #0]
    memcpy(&res.options, opts, sizeof(opts));
 800f26a:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800f26e:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800f272:	f507 72ac 	add.w	r2, r7, #344	@ 0x158
 800f276:	f5a2 72a6 	sub.w	r2, r2, #332	@ 0x14c
 800f27a:	f103 04f0 	add.w	r4, r3, #240	@ 0xf0
 800f27e:	4615      	mov	r5, r2
 800f280:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800f282:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800f284:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800f288:	c403      	stmia	r4!, {r0, r1}
 800f28a:	8022      	strh	r2, [r4, #0]
 800f28c:	3402      	adds	r4, #2
 800f28e:	0c13      	lsrs	r3, r2, #16
 800f290:	7023      	strb	r3, [r4, #0]
    res.magic = pkt->dhcp->magic;
 800f292:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800f296:	f5a3 73ac 	sub.w	r3, r3, #344	@ 0x158
 800f29a:	681b      	ldr	r3, [r3, #0]
 800f29c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f29e:	f8d3 20ec 	ldr.w	r2, [r3, #236]	@ 0xec
 800f2a2:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800f2a6:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800f2aa:	f8c3 20ec 	str.w	r2, [r3, #236]	@ 0xec
    res.xid = pkt->dhcp->xid;
 800f2ae:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800f2b2:	f5a3 73ac 	sub.w	r3, r3, #344	@ 0x158
 800f2b6:	681b      	ldr	r3, [r3, #0]
 800f2b8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f2ba:	685a      	ldr	r2, [r3, #4]
 800f2bc:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800f2c0:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800f2c4:	605a      	str	r2, [r3, #4]
    if (ifp->enable_get_gateway) {
 800f2c6:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800f2ca:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 800f2ce:	681b      	ldr	r3, [r3, #0]
 800f2d0:	7f9b      	ldrb	r3, [r3, #30]
 800f2d2:	2b00      	cmp	r3, #0
 800f2d4:	d01c      	beq.n	800f310 <rx_dhcp_server+0x360>
      ifp->gw = res.yiaddr;  // set gw IP, best-effort gwmac as DHCP server's
 800f2d6:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800f2da:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800f2de:	691a      	ldr	r2, [r3, #16]
 800f2e0:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800f2e4:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 800f2e8:	681b      	ldr	r3, [r3, #0]
 800f2ea:	611a      	str	r2, [r3, #16]
      memcpy(ifp->gwmac, pkt->eth->src, sizeof(ifp->gwmac));
 800f2ec:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800f2f0:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 800f2f4:	681b      	ldr	r3, [r3, #0]
 800f2f6:	f103 005c 	add.w	r0, r3, #92	@ 0x5c
 800f2fa:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800f2fe:	f5a3 73ac 	sub.w	r3, r3, #344	@ 0x158
 800f302:	681b      	ldr	r3, [r3, #0]
 800f304:	691b      	ldr	r3, [r3, #16]
 800f306:	3306      	adds	r3, #6
 800f308:	2206      	movs	r2, #6
 800f30a:	4619      	mov	r1, r3
 800f30c:	f015 fa3b 	bl	8024786 <memcpy>
    }
    tx_udp(ifp, pkt->eth->src, ifp->ip, mg_htons(67),
 800f310:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800f314:	f5a3 73ac 	sub.w	r3, r3, #344	@ 0x158
 800f318:	681b      	ldr	r3, [r3, #0]
 800f31a:	691b      	ldr	r3, [r3, #16]
 800f31c:	1d9d      	adds	r5, r3, #6
 800f31e:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800f322:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 800f326:	681b      	ldr	r3, [r3, #0]
 800f328:	689e      	ldr	r6, [r3, #8]
 800f32a:	2043      	movs	r0, #67	@ 0x43
 800f32c:	f011 fef9 	bl	8021122 <mg_ntohs>
 800f330:	4603      	mov	r3, r0
 800f332:	4698      	mov	r8, r3
 800f334:	f897 3157 	ldrb.w	r3, [r7, #343]	@ 0x157
 800f338:	2b01      	cmp	r3, #1
 800f33a:	d005      	beq.n	800f348 <rx_dhcp_server+0x398>
 800f33c:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800f340:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800f344:	691c      	ldr	r4, [r3, #16]
 800f346:	e001      	b.n	800f34c <rx_dhcp_server+0x39c>
 800f348:	f04f 34ff 	mov.w	r4, #4294967295
 800f34c:	2044      	movs	r0, #68	@ 0x44
 800f34e:	f011 fee8 	bl	8021122 <mg_ntohs>
 800f352:	4603      	mov	r3, r0
 800f354:	461a      	mov	r2, r3
 800f356:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800f35a:	f5a3 70aa 	sub.w	r0, r3, #340	@ 0x154
 800f35e:	f44f 7390 	mov.w	r3, #288	@ 0x120
 800f362:	9303      	str	r3, [sp, #12]
 800f364:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800f368:	9302      	str	r3, [sp, #8]
 800f36a:	9201      	str	r2, [sp, #4]
 800f36c:	9400      	str	r4, [sp, #0]
 800f36e:	4643      	mov	r3, r8
 800f370:	4632      	mov	r2, r6
 800f372:	4629      	mov	r1, r5
 800f374:	6800      	ldr	r0, [r0, #0]
 800f376:	f7ff f800 	bl	800e37a <tx_udp>
 800f37a:	e002      	b.n	800f382 <rx_dhcp_server+0x3d2>
 800f37c:	08026370 	.word	0x08026370
  if (end < (uint8_t *) (pkt->dhcp + 1)) return;
 800f380:	bf00      	nop
           op == 1 ? ~0U : res.yiaddr, mg_htons(68), &res, sizeof(res));
  }
}
 800f382:	f507 77ac 	add.w	r7, r7, #344	@ 0x158
 800f386:	46bd      	mov	sp, r7
 800f388:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800f38c <rx_udp>:

static bool rx_udp(struct mg_tcpip_if *ifp, struct pkt *pkt) {
 800f38c:	b580      	push	{r7, lr}
 800f38e:	b084      	sub	sp, #16
 800f390:	af00      	add	r7, sp, #0
 800f392:	6078      	str	r0, [r7, #4]
 800f394:	6039      	str	r1, [r7, #0]
  struct mg_connection *c = getpeer(ifp->mgr, pkt, true);
 800f396:	687b      	ldr	r3, [r7, #4]
 800f398:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f39a:	2201      	movs	r2, #1
 800f39c:	6839      	ldr	r1, [r7, #0]
 800f39e:	4618      	mov	r0, r3
 800f3a0:	f7ff fa32 	bl	800e808 <getpeer>
 800f3a4:	60f8      	str	r0, [r7, #12]
  struct connstate *s;
  if (c == NULL) return false;  // No UDP listener on this port
 800f3a6:	68fb      	ldr	r3, [r7, #12]
 800f3a8:	2b00      	cmp	r3, #0
 800f3aa:	d101      	bne.n	800f3b0 <rx_udp+0x24>
 800f3ac:	2300      	movs	r3, #0
 800f3ae:	e05a      	b.n	800f466 <rx_udp+0xda>
  s = (struct connstate *) (c + 1);
 800f3b0:	68fb      	ldr	r3, [r7, #12]
 800f3b2:	33b8      	adds	r3, #184	@ 0xb8
 800f3b4:	60bb      	str	r3, [r7, #8]
  c->rem.port = pkt->udp->sport;
 800f3b6:	683b      	ldr	r3, [r7, #0]
 800f3b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f3ba:	881b      	ldrh	r3, [r3, #0]
 800f3bc:	b29a      	uxth	r2, r3
 800f3be:	68fb      	ldr	r3, [r7, #12]
 800f3c0:	861a      	strh	r2, [r3, #48]	@ 0x30
  memcpy(c->rem.ip, &pkt->ip->src, sizeof(uint32_t));
 800f3c2:	68fb      	ldr	r3, [r7, #12]
 800f3c4:	3320      	adds	r3, #32
 800f3c6:	683a      	ldr	r2, [r7, #0]
 800f3c8:	69d2      	ldr	r2, [r2, #28]
 800f3ca:	320c      	adds	r2, #12
 800f3cc:	6812      	ldr	r2, [r2, #0]
 800f3ce:	601a      	str	r2, [r3, #0]
  memcpy(s->mac, pkt->eth->src, sizeof(s->mac));
 800f3d0:	68bb      	ldr	r3, [r7, #8]
 800f3d2:	f103 001a 	add.w	r0, r3, #26
 800f3d6:	683b      	ldr	r3, [r7, #0]
 800f3d8:	691b      	ldr	r3, [r3, #16]
 800f3da:	3306      	adds	r3, #6
 800f3dc:	2206      	movs	r2, #6
 800f3de:	4619      	mov	r1, r3
 800f3e0:	f015 f9d1 	bl	8024786 <memcpy>
  if (c->recv.len >= MG_MAX_RECV_SIZE) {
 800f3e4:	68fb      	ldr	r3, [r7, #12]
 800f3e6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800f3e8:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800f3ec:	d304      	bcc.n	800f3f8 <rx_udp+0x6c>
    mg_error(c, "max_recv_buf_size reached");
 800f3ee:	4920      	ldr	r1, [pc, #128]	@ (800f470 <rx_udp+0xe4>)
 800f3f0:	68f8      	ldr	r0, [r7, #12]
 800f3f2:	f7f8 fd3f 	bl	8007e74 <mg_error>
 800f3f6:	e035      	b.n	800f464 <rx_udp+0xd8>
  } else if (c->recv.size - c->recv.len < pkt->pay.len &&
 800f3f8:	68fb      	ldr	r3, [r7, #12]
 800f3fa:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800f3fc:	68fb      	ldr	r3, [r7, #12]
 800f3fe:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800f400:	1ad2      	subs	r2, r2, r3
 800f402:	683b      	ldr	r3, [r7, #0]
 800f404:	68db      	ldr	r3, [r3, #12]
 800f406:	429a      	cmp	r2, r3
 800f408:	d212      	bcs.n	800f430 <rx_udp+0xa4>
             !mg_iobuf_resize(&c->recv, c->recv.len + pkt->pay.len)) {
 800f40a:	68fb      	ldr	r3, [r7, #12]
 800f40c:	f103 0040 	add.w	r0, r3, #64	@ 0x40
 800f410:	68fb      	ldr	r3, [r7, #12]
 800f412:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800f414:	683b      	ldr	r3, [r7, #0]
 800f416:	68db      	ldr	r3, [r3, #12]
 800f418:	4413      	add	r3, r2
 800f41a:	4619      	mov	r1, r3
 800f41c:	f7fc ff18 	bl	800c250 <mg_iobuf_resize>
 800f420:	4603      	mov	r3, r0
  } else if (c->recv.size - c->recv.len < pkt->pay.len &&
 800f422:	2b00      	cmp	r3, #0
 800f424:	d104      	bne.n	800f430 <rx_udp+0xa4>
    mg_error(c, "oom");
 800f426:	4913      	ldr	r1, [pc, #76]	@ (800f474 <rx_udp+0xe8>)
 800f428:	68f8      	ldr	r0, [r7, #12]
 800f42a:	f7f8 fd23 	bl	8007e74 <mg_error>
 800f42e:	e019      	b.n	800f464 <rx_udp+0xd8>
  } else {
    memcpy(&c->recv.buf[c->recv.len], pkt->pay.buf, pkt->pay.len);
 800f430:	68fb      	ldr	r3, [r7, #12]
 800f432:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800f434:	68fb      	ldr	r3, [r7, #12]
 800f436:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800f438:	18d0      	adds	r0, r2, r3
 800f43a:	683b      	ldr	r3, [r7, #0]
 800f43c:	6899      	ldr	r1, [r3, #8]
 800f43e:	683b      	ldr	r3, [r7, #0]
 800f440:	68db      	ldr	r3, [r3, #12]
 800f442:	461a      	mov	r2, r3
 800f444:	f015 f99f 	bl	8024786 <memcpy>
    c->recv.len += pkt->pay.len;
 800f448:	68fb      	ldr	r3, [r7, #12]
 800f44a:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800f44c:	683b      	ldr	r3, [r7, #0]
 800f44e:	68db      	ldr	r3, [r3, #12]
 800f450:	441a      	add	r2, r3
 800f452:	68fb      	ldr	r3, [r7, #12]
 800f454:	649a      	str	r2, [r3, #72]	@ 0x48
    mg_call(c, MG_EV_READ, &pkt->pay.len);
 800f456:	683b      	ldr	r3, [r7, #0]
 800f458:	330c      	adds	r3, #12
 800f45a:	461a      	mov	r2, r3
 800f45c:	2107      	movs	r1, #7
 800f45e:	68f8      	ldr	r0, [r7, #12]
 800f460:	f7f8 fce6 	bl	8007e30 <mg_call>
  }
  return true;
 800f464:	2301      	movs	r3, #1
}
 800f466:	4618      	mov	r0, r3
 800f468:	3710      	adds	r7, #16
 800f46a:	46bd      	mov	sp, r7
 800f46c:	bd80      	pop	{r7, pc}
 800f46e:	bf00      	nop
 800f470:	08026490 	.word	0x08026490
 800f474:	080264ac 	.word	0x080264ac

0800f478 <tx_tcp>:

static size_t tx_tcp(struct mg_tcpip_if *ifp, uint8_t *dst_mac, uint32_t dst_ip,
                     uint8_t flags, uint16_t sport, uint16_t dport,
                     uint32_t seq, uint32_t ack, const void *buf, size_t len) {
 800f478:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f47a:	b091      	sub	sp, #68	@ 0x44
 800f47c:	af06      	add	r7, sp, #24
 800f47e:	60f8      	str	r0, [r7, #12]
 800f480:	60b9      	str	r1, [r7, #8]
 800f482:	607a      	str	r2, [r7, #4]
 800f484:	70fb      	strb	r3, [r7, #3]
  struct ip *ip;
  struct tcp *tcp;
  uint16_t opts[4 / 2];
  if (flags & TH_SYN) {                              // Send MSS, RFC-9293 3.7.1
 800f486:	78fb      	ldrb	r3, [r7, #3]
 800f488:	f003 0302 	and.w	r3, r3, #2
 800f48c:	2b00      	cmp	r3, #0
 800f48e:	d014      	beq.n	800f4ba <tx_tcp+0x42>
    opts[0] = mg_htons(0x0204);                      // RFC-9293 3.2
 800f490:	f44f 7001 	mov.w	r0, #516	@ 0x204
 800f494:	f011 fe45 	bl	8021122 <mg_ntohs>
 800f498:	4603      	mov	r3, r0
 800f49a:	82bb      	strh	r3, [r7, #20]
    opts[1] = mg_htons((uint16_t) (ifp->mtu - 40));  // RFC-6691
 800f49c:	68fb      	ldr	r3, [r7, #12]
 800f49e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800f4a2:	3b28      	subs	r3, #40	@ 0x28
 800f4a4:	b29b      	uxth	r3, r3
 800f4a6:	4618      	mov	r0, r3
 800f4a8:	f011 fe3b 	bl	8021122 <mg_ntohs>
 800f4ac:	4603      	mov	r3, r0
 800f4ae:	82fb      	strh	r3, [r7, #22]
    buf = opts;
 800f4b0:	f107 0314 	add.w	r3, r7, #20
 800f4b4:	653b      	str	r3, [r7, #80]	@ 0x50
    len = sizeof(opts);
 800f4b6:	2304      	movs	r3, #4
 800f4b8:	657b      	str	r3, [r7, #84]	@ 0x54
  }
  ip = tx_ip(ifp, dst_mac, 6, ifp->ip, dst_ip, sizeof(struct tcp) + len);
 800f4ba:	68fb      	ldr	r3, [r7, #12]
 800f4bc:	689a      	ldr	r2, [r3, #8]
 800f4be:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f4c0:	3314      	adds	r3, #20
 800f4c2:	9301      	str	r3, [sp, #4]
 800f4c4:	687b      	ldr	r3, [r7, #4]
 800f4c6:	9300      	str	r3, [sp, #0]
 800f4c8:	4613      	mov	r3, r2
 800f4ca:	2206      	movs	r2, #6
 800f4cc:	68b9      	ldr	r1, [r7, #8]
 800f4ce:	68f8      	ldr	r0, [r7, #12]
 800f4d0:	f7fe fefc 	bl	800e2cc <tx_ip>
 800f4d4:	6278      	str	r0, [r7, #36]	@ 0x24
  tcp = (struct tcp *) (ip + 1);
 800f4d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f4d8:	3314      	adds	r3, #20
 800f4da:	623b      	str	r3, [r7, #32]
  memset(tcp, 0, sizeof(*tcp));
 800f4dc:	2214      	movs	r2, #20
 800f4de:	2100      	movs	r1, #0
 800f4e0:	6a38      	ldr	r0, [r7, #32]
 800f4e2:	f014 ffd3 	bl	802448c <memset>
  if (buf != NULL && len) memmove(tcp + 1, buf, len);
 800f4e6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800f4e8:	2b00      	cmp	r3, #0
 800f4ea:	d009      	beq.n	800f500 <tx_tcp+0x88>
 800f4ec:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f4ee:	2b00      	cmp	r3, #0
 800f4f0:	d006      	beq.n	800f500 <tx_tcp+0x88>
 800f4f2:	6a3b      	ldr	r3, [r7, #32]
 800f4f4:	3314      	adds	r3, #20
 800f4f6:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800f4f8:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800f4fa:	4618      	mov	r0, r3
 800f4fc:	f014 ffac 	bl	8024458 <memmove>
  tcp->sport = sport;
 800f500:	6a3b      	ldr	r3, [r7, #32]
 800f502:	f8b7 2040 	ldrh.w	r2, [r7, #64]	@ 0x40
 800f506:	801a      	strh	r2, [r3, #0]
  tcp->dport = dport;
 800f508:	6a3b      	ldr	r3, [r7, #32]
 800f50a:	f8b7 2044 	ldrh.w	r2, [r7, #68]	@ 0x44
 800f50e:	805a      	strh	r2, [r3, #2]
  tcp->seq = seq;
 800f510:	6a3b      	ldr	r3, [r7, #32]
 800f512:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800f514:	605a      	str	r2, [r3, #4]
  tcp->ack = ack;
 800f516:	6a3b      	ldr	r3, [r7, #32]
 800f518:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800f51a:	609a      	str	r2, [r3, #8]
  tcp->flags = flags;
 800f51c:	6a3b      	ldr	r3, [r7, #32]
 800f51e:	78fa      	ldrb	r2, [r7, #3]
 800f520:	735a      	strb	r2, [r3, #13]
  tcp->win = mg_htons(MIP_TCP_WIN);
 800f522:	f241 7070 	movw	r0, #6000	@ 0x1770
 800f526:	f011 fdfc 	bl	8021122 <mg_ntohs>
 800f52a:	4603      	mov	r3, r0
 800f52c:	461a      	mov	r2, r3
 800f52e:	6a3b      	ldr	r3, [r7, #32]
 800f530:	81da      	strh	r2, [r3, #14]
  tcp->off = (uint8_t) (sizeof(*tcp) / 4 << 4);
 800f532:	6a3b      	ldr	r3, [r7, #32]
 800f534:	2250      	movs	r2, #80	@ 0x50
 800f536:	731a      	strb	r2, [r3, #12]
  if (flags & TH_SYN) tcp->off += (uint8_t) (sizeof(opts) / 4 << 4);
 800f538:	78fb      	ldrb	r3, [r7, #3]
 800f53a:	f003 0302 	and.w	r3, r3, #2
 800f53e:	2b00      	cmp	r3, #0
 800f540:	d005      	beq.n	800f54e <tx_tcp+0xd6>
 800f542:	6a3b      	ldr	r3, [r7, #32]
 800f544:	7b1b      	ldrb	r3, [r3, #12]
 800f546:	3310      	adds	r3, #16
 800f548:	b2da      	uxtb	r2, r3
 800f54a:	6a3b      	ldr	r3, [r7, #32]
 800f54c:	731a      	strb	r2, [r3, #12]
  {
    uint32_t cs = 0;
 800f54e:	2300      	movs	r3, #0
 800f550:	61fb      	str	r3, [r7, #28]
    uint16_t n = (uint16_t) (sizeof(*tcp) + len);
 800f552:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f554:	b29b      	uxth	r3, r3
 800f556:	3314      	adds	r3, #20
 800f558:	837b      	strh	r3, [r7, #26]
    uint8_t pseudo[] = {0, ip->proto, (uint8_t) (n >> 8), (uint8_t) (n & 255)};
 800f55a:	2300      	movs	r3, #0
 800f55c:	743b      	strb	r3, [r7, #16]
 800f55e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f560:	7a5b      	ldrb	r3, [r3, #9]
 800f562:	747b      	strb	r3, [r7, #17]
 800f564:	8b7b      	ldrh	r3, [r7, #26]
 800f566:	0a1b      	lsrs	r3, r3, #8
 800f568:	b29b      	uxth	r3, r3
 800f56a:	b2db      	uxtb	r3, r3
 800f56c:	74bb      	strb	r3, [r7, #18]
 800f56e:	8b7b      	ldrh	r3, [r7, #26]
 800f570:	b2db      	uxtb	r3, r3
 800f572:	74fb      	strb	r3, [r7, #19]
    cs = csumup(cs, tcp, n);
 800f574:	8b7b      	ldrh	r3, [r7, #26]
 800f576:	461a      	mov	r2, r3
 800f578:	6a39      	ldr	r1, [r7, #32]
 800f57a:	69f8      	ldr	r0, [r7, #28]
 800f57c:	f7fe fcd8 	bl	800df30 <csumup>
 800f580:	61f8      	str	r0, [r7, #28]
    cs = csumup(cs, &ip->src, sizeof(ip->src));
 800f582:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f584:	330c      	adds	r3, #12
 800f586:	2204      	movs	r2, #4
 800f588:	4619      	mov	r1, r3
 800f58a:	69f8      	ldr	r0, [r7, #28]
 800f58c:	f7fe fcd0 	bl	800df30 <csumup>
 800f590:	61f8      	str	r0, [r7, #28]
    cs = csumup(cs, &ip->dst, sizeof(ip->dst));
 800f592:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f594:	3310      	adds	r3, #16
 800f596:	2204      	movs	r2, #4
 800f598:	4619      	mov	r1, r3
 800f59a:	69f8      	ldr	r0, [r7, #28]
 800f59c:	f7fe fcc8 	bl	800df30 <csumup>
 800f5a0:	61f8      	str	r0, [r7, #28]
    cs = csumup(cs, pseudo, sizeof(pseudo));
 800f5a2:	f107 0310 	add.w	r3, r7, #16
 800f5a6:	2204      	movs	r2, #4
 800f5a8:	4619      	mov	r1, r3
 800f5aa:	69f8      	ldr	r0, [r7, #28]
 800f5ac:	f7fe fcc0 	bl	800df30 <csumup>
 800f5b0:	61f8      	str	r0, [r7, #28]
    tcp->csum = csumfin(cs);
 800f5b2:	69f8      	ldr	r0, [r7, #28]
 800f5b4:	f7fe fce7 	bl	800df86 <csumfin>
 800f5b8:	4603      	mov	r3, r0
 800f5ba:	461a      	mov	r2, r3
 800f5bc:	6a3b      	ldr	r3, [r7, #32]
 800f5be:	821a      	strh	r2, [r3, #16]
  }
  MG_VERBOSE(("TCP %M:%hu -> %M:%hu fl %x len %u", mg_print_ip4, &ip->src,
 800f5c0:	4b21      	ldr	r3, [pc, #132]	@ (800f648 <tx_tcp+0x1d0>)
 800f5c2:	681b      	ldr	r3, [r3, #0]
 800f5c4:	2b03      	cmp	r3, #3
 800f5c6:	dd2c      	ble.n	800f622 <tx_tcp+0x1aa>
 800f5c8:	4b20      	ldr	r3, [pc, #128]	@ (800f64c <tx_tcp+0x1d4>)
 800f5ca:	f241 2299 	movw	r2, #4761	@ 0x1299
 800f5ce:	4920      	ldr	r1, [pc, #128]	@ (800f650 <tx_tcp+0x1d8>)
 800f5d0:	2004      	movs	r0, #4
 800f5d2:	f7fd fdeb 	bl	800d1ac <mg_log_prefix>
 800f5d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f5d8:	f103 050c 	add.w	r5, r3, #12
 800f5dc:	6a3b      	ldr	r3, [r7, #32]
 800f5de:	881b      	ldrh	r3, [r3, #0]
 800f5e0:	b29b      	uxth	r3, r3
 800f5e2:	4618      	mov	r0, r3
 800f5e4:	f011 fd9d 	bl	8021122 <mg_ntohs>
 800f5e8:	4603      	mov	r3, r0
 800f5ea:	461e      	mov	r6, r3
 800f5ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f5ee:	f103 0410 	add.w	r4, r3, #16
 800f5f2:	6a3b      	ldr	r3, [r7, #32]
 800f5f4:	885b      	ldrh	r3, [r3, #2]
 800f5f6:	b29b      	uxth	r3, r3
 800f5f8:	4618      	mov	r0, r3
 800f5fa:	f011 fd92 	bl	8021122 <mg_ntohs>
 800f5fe:	4603      	mov	r3, r0
 800f600:	461a      	mov	r2, r3
 800f602:	6a3b      	ldr	r3, [r7, #32]
 800f604:	7b5b      	ldrb	r3, [r3, #13]
 800f606:	4619      	mov	r1, r3
 800f608:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f60a:	9304      	str	r3, [sp, #16]
 800f60c:	9103      	str	r1, [sp, #12]
 800f60e:	9202      	str	r2, [sp, #8]
 800f610:	9401      	str	r4, [sp, #4]
 800f612:	4b10      	ldr	r3, [pc, #64]	@ (800f654 <tx_tcp+0x1dc>)
 800f614:	9300      	str	r3, [sp, #0]
 800f616:	4633      	mov	r3, r6
 800f618:	462a      	mov	r2, r5
 800f61a:	490e      	ldr	r1, [pc, #56]	@ (800f654 <tx_tcp+0x1dc>)
 800f61c:	480e      	ldr	r0, [pc, #56]	@ (800f658 <tx_tcp+0x1e0>)
 800f61e:	f7fd fe15 	bl	800d24c <mg_log>
              mg_ntohs(tcp->sport), mg_print_ip4, &ip->dst,
              mg_ntohs(tcp->dport), tcp->flags, len));
  return ether_output(ifp, PDIFF(ifp->tx.buf, tcp + 1) + len);
 800f622:	6a3b      	ldr	r3, [r7, #32]
 800f624:	f103 0214 	add.w	r2, r3, #20
 800f628:	68fb      	ldr	r3, [r7, #12]
 800f62a:	695b      	ldr	r3, [r3, #20]
 800f62c:	1ad3      	subs	r3, r2, r3
 800f62e:	461a      	mov	r2, r3
 800f630:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f632:	4413      	add	r3, r2
 800f634:	4619      	mov	r1, r3
 800f636:	68f8      	ldr	r0, [r7, #12]
 800f638:	f7fe fd38 	bl	800e0ac <ether_output>
 800f63c:	4603      	mov	r3, r0
}
 800f63e:	4618      	mov	r0, r3
 800f640:	372c      	adds	r7, #44	@ 0x2c
 800f642:	46bd      	mov	sp, r7
 800f644:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f646:	bf00      	nop
 800f648:	20000258 	.word	0x20000258
 800f64c:	080288c0 	.word	0x080288c0
 800f650:	08025140 	.word	0x08025140
 800f654:	080123b9 	.word	0x080123b9
 800f658:	080264b0 	.word	0x080264b0

0800f65c <tx_tcp_ctrlresp>:

static size_t tx_tcp_ctrlresp(struct mg_tcpip_if *ifp, struct pkt *pkt,
                              uint8_t flags, uint32_t seqno) {
 800f65c:	b5b0      	push	{r4, r5, r7, lr}
 800f65e:	b08c      	sub	sp, #48	@ 0x30
 800f660:	af06      	add	r7, sp, #24
 800f662:	60f8      	str	r0, [r7, #12]
 800f664:	60b9      	str	r1, [r7, #8]
 800f666:	603b      	str	r3, [r7, #0]
 800f668:	4613      	mov	r3, r2
 800f66a:	71fb      	strb	r3, [r7, #7]
  uint32_t ackno = mg_htonl(mg_ntohl(pkt->tcp->seq) + (uint32_t) pkt->pay.len +
 800f66c:	68bb      	ldr	r3, [r7, #8]
 800f66e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f670:	685b      	ldr	r3, [r3, #4]
 800f672:	4618      	mov	r0, r3
 800f674:	f011 fd6c 	bl	8021150 <mg_ntohl>
 800f678:	4602      	mov	r2, r0
 800f67a:	68bb      	ldr	r3, [r7, #8]
 800f67c:	68db      	ldr	r3, [r3, #12]
 800f67e:	4413      	add	r3, r2
 800f680:	68ba      	ldr	r2, [r7, #8]
 800f682:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800f684:	7b52      	ldrb	r2, [r2, #13]
 800f686:	f002 0203 	and.w	r2, r2, #3
 800f68a:	2a00      	cmp	r2, #0
 800f68c:	d001      	beq.n	800f692 <tx_tcp_ctrlresp+0x36>
 800f68e:	2201      	movs	r2, #1
 800f690:	e000      	b.n	800f694 <tx_tcp_ctrlresp+0x38>
 800f692:	2200      	movs	r2, #0
 800f694:	4413      	add	r3, r2
 800f696:	4618      	mov	r0, r3
 800f698:	f011 fd5a 	bl	8021150 <mg_ntohl>
 800f69c:	6178      	str	r0, [r7, #20]
                            ((pkt->tcp->flags & (TH_SYN | TH_FIN)) ? 1 : 0));
  return tx_tcp(ifp, pkt->eth->src, pkt->ip->src, flags, pkt->tcp->dport,
 800f69e:	68bb      	ldr	r3, [r7, #8]
 800f6a0:	691b      	ldr	r3, [r3, #16]
 800f6a2:	1d98      	adds	r0, r3, #6
 800f6a4:	68bb      	ldr	r3, [r7, #8]
 800f6a6:	69db      	ldr	r3, [r3, #28]
 800f6a8:	68dc      	ldr	r4, [r3, #12]
 800f6aa:	68bb      	ldr	r3, [r7, #8]
 800f6ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f6ae:	885b      	ldrh	r3, [r3, #2]
 800f6b0:	b29b      	uxth	r3, r3
                pkt->tcp->sport, seqno, ackno, NULL, 0);
 800f6b2:	68ba      	ldr	r2, [r7, #8]
 800f6b4:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
  return tx_tcp(ifp, pkt->eth->src, pkt->ip->src, flags, pkt->tcp->dport,
 800f6b6:	8812      	ldrh	r2, [r2, #0]
 800f6b8:	b292      	uxth	r2, r2
 800f6ba:	79fd      	ldrb	r5, [r7, #7]
 800f6bc:	2100      	movs	r1, #0
 800f6be:	9105      	str	r1, [sp, #20]
 800f6c0:	2100      	movs	r1, #0
 800f6c2:	9104      	str	r1, [sp, #16]
 800f6c4:	6979      	ldr	r1, [r7, #20]
 800f6c6:	9103      	str	r1, [sp, #12]
 800f6c8:	6839      	ldr	r1, [r7, #0]
 800f6ca:	9102      	str	r1, [sp, #8]
 800f6cc:	9201      	str	r2, [sp, #4]
 800f6ce:	9300      	str	r3, [sp, #0]
 800f6d0:	462b      	mov	r3, r5
 800f6d2:	4622      	mov	r2, r4
 800f6d4:	4601      	mov	r1, r0
 800f6d6:	68f8      	ldr	r0, [r7, #12]
 800f6d8:	f7ff fece 	bl	800f478 <tx_tcp>
 800f6dc:	4603      	mov	r3, r0
}
 800f6de:	4618      	mov	r0, r3
 800f6e0:	3718      	adds	r7, #24
 800f6e2:	46bd      	mov	sp, r7
 800f6e4:	bdb0      	pop	{r4, r5, r7, pc}

0800f6e6 <tx_tcp_rst>:

static size_t tx_tcp_rst(struct mg_tcpip_if *ifp, struct pkt *pkt, bool toack) {
 800f6e6:	b580      	push	{r7, lr}
 800f6e8:	b084      	sub	sp, #16
 800f6ea:	af00      	add	r7, sp, #0
 800f6ec:	60f8      	str	r0, [r7, #12]
 800f6ee:	60b9      	str	r1, [r7, #8]
 800f6f0:	4613      	mov	r3, r2
 800f6f2:	71fb      	strb	r3, [r7, #7]
  return tx_tcp_ctrlresp(ifp, pkt, toack ? TH_RST : (TH_RST | TH_ACK),
 800f6f4:	79fb      	ldrb	r3, [r7, #7]
 800f6f6:	2b00      	cmp	r3, #0
 800f6f8:	d001      	beq.n	800f6fe <tx_tcp_rst+0x18>
 800f6fa:	2204      	movs	r2, #4
 800f6fc:	e000      	b.n	800f700 <tx_tcp_rst+0x1a>
 800f6fe:	2214      	movs	r2, #20
 800f700:	79fb      	ldrb	r3, [r7, #7]
 800f702:	2b00      	cmp	r3, #0
 800f704:	d003      	beq.n	800f70e <tx_tcp_rst+0x28>
                         toack ? pkt->tcp->ack : 0);
 800f706:	68bb      	ldr	r3, [r7, #8]
 800f708:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
  return tx_tcp_ctrlresp(ifp, pkt, toack ? TH_RST : (TH_RST | TH_ACK),
 800f70a:	689b      	ldr	r3, [r3, #8]
 800f70c:	e000      	b.n	800f710 <tx_tcp_rst+0x2a>
 800f70e:	2300      	movs	r3, #0
 800f710:	68b9      	ldr	r1, [r7, #8]
 800f712:	68f8      	ldr	r0, [r7, #12]
 800f714:	f7ff ffa2 	bl	800f65c <tx_tcp_ctrlresp>
 800f718:	4603      	mov	r3, r0
}
 800f71a:	4618      	mov	r0, r3
 800f71c:	3710      	adds	r7, #16
 800f71e:	46bd      	mov	sp, r7
 800f720:	bd80      	pop	{r7, pc}
	...

0800f724 <accept_conn>:

static struct mg_connection *accept_conn(struct mg_connection *lsn,
                                         struct pkt *pkt, uint16_t mss) {
 800f724:	b5b0      	push	{r4, r5, r7, lr}
 800f726:	b086      	sub	sp, #24
 800f728:	af00      	add	r7, sp, #0
 800f72a:	60f8      	str	r0, [r7, #12]
 800f72c:	60b9      	str	r1, [r7, #8]
 800f72e:	4613      	mov	r3, r2
 800f730:	80fb      	strh	r3, [r7, #6]
  struct mg_connection *c = mg_alloc_conn(lsn->mgr);
 800f732:	68fb      	ldr	r3, [r7, #12]
 800f734:	685b      	ldr	r3, [r3, #4]
 800f736:	4618      	mov	r0, r3
 800f738:	f7fe f921 	bl	800d97e <mg_alloc_conn>
 800f73c:	6178      	str	r0, [r7, #20]
  struct connstate *s;
  if (c == NULL) {
 800f73e:	697b      	ldr	r3, [r7, #20]
 800f740:	2b00      	cmp	r3, #0
 800f742:	d10f      	bne.n	800f764 <accept_conn+0x40>
    MG_ERROR(("OOM"));
 800f744:	4b60      	ldr	r3, [pc, #384]	@ (800f8c8 <accept_conn+0x1a4>)
 800f746:	681b      	ldr	r3, [r3, #0]
 800f748:	2b00      	cmp	r3, #0
 800f74a:	dd09      	ble.n	800f760 <accept_conn+0x3c>
 800f74c:	4b5f      	ldr	r3, [pc, #380]	@ (800f8cc <accept_conn+0x1a8>)
 800f74e:	f241 22b1 	movw	r2, #4785	@ 0x12b1
 800f752:	495f      	ldr	r1, [pc, #380]	@ (800f8d0 <accept_conn+0x1ac>)
 800f754:	2001      	movs	r0, #1
 800f756:	f7fd fd29 	bl	800d1ac <mg_log_prefix>
 800f75a:	485e      	ldr	r0, [pc, #376]	@ (800f8d4 <accept_conn+0x1b0>)
 800f75c:	f7fd fd76 	bl	800d24c <mg_log>
    return NULL;
 800f760:	2300      	movs	r3, #0
 800f762:	e0ad      	b.n	800f8c0 <accept_conn+0x19c>
  }
  s = (struct connstate *) (c + 1);
 800f764:	697b      	ldr	r3, [r7, #20]
 800f766:	33b8      	adds	r3, #184	@ 0xb8
 800f768:	613b      	str	r3, [r7, #16]
  s->dmss = mss;  // from options in client SYN
 800f76a:	693b      	ldr	r3, [r7, #16]
 800f76c:	88fa      	ldrh	r2, [r7, #6]
 800f76e:	831a      	strh	r2, [r3, #24]
  s->seq = mg_ntohl(pkt->tcp->ack), s->ack = mg_ntohl(pkt->tcp->seq);
 800f770:	68bb      	ldr	r3, [r7, #8]
 800f772:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f774:	689b      	ldr	r3, [r3, #8]
 800f776:	4618      	mov	r0, r3
 800f778:	f011 fcea 	bl	8021150 <mg_ntohl>
 800f77c:	4602      	mov	r2, r0
 800f77e:	693b      	ldr	r3, [r7, #16]
 800f780:	601a      	str	r2, [r3, #0]
 800f782:	68bb      	ldr	r3, [r7, #8]
 800f784:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f786:	685b      	ldr	r3, [r3, #4]
 800f788:	4618      	mov	r0, r3
 800f78a:	f011 fce1 	bl	8021150 <mg_ntohl>
 800f78e:	4602      	mov	r2, r0
 800f790:	693b      	ldr	r3, [r7, #16]
 800f792:	605a      	str	r2, [r3, #4]
  memcpy(s->mac, pkt->eth->src, sizeof(s->mac));
 800f794:	693b      	ldr	r3, [r7, #16]
 800f796:	f103 001a 	add.w	r0, r3, #26
 800f79a:	68bb      	ldr	r3, [r7, #8]
 800f79c:	691b      	ldr	r3, [r3, #16]
 800f79e:	3306      	adds	r3, #6
 800f7a0:	2206      	movs	r2, #6
 800f7a2:	4619      	mov	r1, r3
 800f7a4:	f014 ffef 	bl	8024786 <memcpy>
  settmout(c, MIP_TTYPE_KEEPALIVE);
 800f7a8:	2100      	movs	r1, #0
 800f7aa:	6978      	ldr	r0, [r7, #20]
 800f7ac:	f7fe fc1a 	bl	800dfe4 <settmout>
  memcpy(c->rem.ip, &pkt->ip->src, sizeof(uint32_t));
 800f7b0:	697b      	ldr	r3, [r7, #20]
 800f7b2:	3320      	adds	r3, #32
 800f7b4:	68ba      	ldr	r2, [r7, #8]
 800f7b6:	69d2      	ldr	r2, [r2, #28]
 800f7b8:	320c      	adds	r2, #12
 800f7ba:	6812      	ldr	r2, [r2, #0]
 800f7bc:	601a      	str	r2, [r3, #0]
  c->rem.port = pkt->tcp->sport;
 800f7be:	68bb      	ldr	r3, [r7, #8]
 800f7c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f7c2:	881b      	ldrh	r3, [r3, #0]
 800f7c4:	b29a      	uxth	r2, r3
 800f7c6:	697b      	ldr	r3, [r7, #20]
 800f7c8:	861a      	strh	r2, [r3, #48]	@ 0x30
  MG_DEBUG(("%lu accepted %M", c->id, mg_print_ip_port, &c->rem));
 800f7ca:	4b3f      	ldr	r3, [pc, #252]	@ (800f8c8 <accept_conn+0x1a4>)
 800f7cc:	681b      	ldr	r3, [r3, #0]
 800f7ce:	2b02      	cmp	r3, #2
 800f7d0:	dd0e      	ble.n	800f7f0 <accept_conn+0xcc>
 800f7d2:	4b3e      	ldr	r3, [pc, #248]	@ (800f8cc <accept_conn+0x1a8>)
 800f7d4:	f241 22bb 	movw	r2, #4795	@ 0x12bb
 800f7d8:	493d      	ldr	r1, [pc, #244]	@ (800f8d0 <accept_conn+0x1ac>)
 800f7da:	2003      	movs	r0, #3
 800f7dc:	f7fd fce6 	bl	800d1ac <mg_log_prefix>
 800f7e0:	697b      	ldr	r3, [r7, #20]
 800f7e2:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 800f7e4:	697b      	ldr	r3, [r7, #20]
 800f7e6:	3320      	adds	r3, #32
 800f7e8:	4a3b      	ldr	r2, [pc, #236]	@ (800f8d8 <accept_conn+0x1b4>)
 800f7ea:	483c      	ldr	r0, [pc, #240]	@ (800f8dc <accept_conn+0x1b8>)
 800f7ec:	f7fd fd2e 	bl	800d24c <mg_log>
  LIST_ADD_HEAD(struct mg_connection, &lsn->mgr->conns, c);
 800f7f0:	68fb      	ldr	r3, [r7, #12]
 800f7f2:	685b      	ldr	r3, [r3, #4]
 800f7f4:	681a      	ldr	r2, [r3, #0]
 800f7f6:	697b      	ldr	r3, [r7, #20]
 800f7f8:	601a      	str	r2, [r3, #0]
 800f7fa:	68fb      	ldr	r3, [r7, #12]
 800f7fc:	685b      	ldr	r3, [r3, #4]
 800f7fe:	697a      	ldr	r2, [r7, #20]
 800f800:	601a      	str	r2, [r3, #0]
  c->is_accepted = 1;
 800f802:	697a      	ldr	r2, [r7, #20]
 800f804:	f892 30b4 	ldrb.w	r3, [r2, #180]	@ 0xb4
 800f808:	f043 0304 	orr.w	r3, r3, #4
 800f80c:	f882 30b4 	strb.w	r3, [r2, #180]	@ 0xb4
  c->is_hexdumping = lsn->is_hexdumping;
 800f810:	68fb      	ldr	r3, [r7, #12]
 800f812:	f893 30b5 	ldrb.w	r3, [r3, #181]	@ 0xb5
 800f816:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800f81a:	b2d9      	uxtb	r1, r3
 800f81c:	697a      	ldr	r2, [r7, #20]
 800f81e:	f892 30b5 	ldrb.w	r3, [r2, #181]	@ 0xb5
 800f822:	f361 03c3 	bfi	r3, r1, #3, #1
 800f826:	f882 30b5 	strb.w	r3, [r2, #181]	@ 0xb5
  c->pfn = lsn->pfn;
 800f82a:	68fb      	ldr	r3, [r7, #12]
 800f82c:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 800f830:	697b      	ldr	r3, [r7, #20]
 800f832:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  c->loc = lsn->loc;
 800f836:	697a      	ldr	r2, [r7, #20]
 800f838:	68fb      	ldr	r3, [r7, #12]
 800f83a:	f102 0408 	add.w	r4, r2, #8
 800f83e:	f103 0508 	add.w	r5, r3, #8
 800f842:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800f844:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800f846:	e895 0003 	ldmia.w	r5, {r0, r1}
 800f84a:	e884 0003 	stmia.w	r4, {r0, r1}
  c->pfn_data = lsn->pfn_data;
 800f84e:	68fb      	ldr	r3, [r7, #12]
 800f850:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 800f854:	697b      	ldr	r3, [r7, #20]
 800f856:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  c->fn = lsn->fn;
 800f85a:	68fb      	ldr	r3, [r7, #12]
 800f85c:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 800f860:	697b      	ldr	r3, [r7, #20]
 800f862:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  c->fn_data = lsn->fn_data;
 800f866:	68fb      	ldr	r3, [r7, #12]
 800f868:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 800f86c:	697b      	ldr	r3, [r7, #20]
 800f86e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  c->is_tls = lsn->is_tls;
 800f872:	68fb      	ldr	r3, [r7, #12]
 800f874:	f893 30b4 	ldrb.w	r3, [r3, #180]	@ 0xb4
 800f878:	f3c3 1380 	ubfx	r3, r3, #6, #1
 800f87c:	b2d9      	uxtb	r1, r3
 800f87e:	697a      	ldr	r2, [r7, #20]
 800f880:	f892 30b4 	ldrb.w	r3, [r2, #180]	@ 0xb4
 800f884:	f361 1386 	bfi	r3, r1, #6, #1
 800f888:	f882 30b4 	strb.w	r3, [r2, #180]	@ 0xb4
  mg_call(c, MG_EV_OPEN, NULL);
 800f88c:	2200      	movs	r2, #0
 800f88e:	2101      	movs	r1, #1
 800f890:	6978      	ldr	r0, [r7, #20]
 800f892:	f7f8 facd 	bl	8007e30 <mg_call>
  mg_call(c, MG_EV_ACCEPT, NULL);
 800f896:	2200      	movs	r2, #0
 800f898:	2105      	movs	r1, #5
 800f89a:	6978      	ldr	r0, [r7, #20]
 800f89c:	f7f8 fac8 	bl	8007e30 <mg_call>
  if (!c->is_tls_hs) c->is_tls = 0;  // user did not call mg_tls_init()
 800f8a0:	697b      	ldr	r3, [r7, #20]
 800f8a2:	f893 30b4 	ldrb.w	r3, [r3, #180]	@ 0xb4
 800f8a6:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800f8aa:	b2db      	uxtb	r3, r3
 800f8ac:	2b00      	cmp	r3, #0
 800f8ae:	d106      	bne.n	800f8be <accept_conn+0x19a>
 800f8b0:	697a      	ldr	r2, [r7, #20]
 800f8b2:	f892 30b4 	ldrb.w	r3, [r2, #180]	@ 0xb4
 800f8b6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800f8ba:	f882 30b4 	strb.w	r3, [r2, #180]	@ 0xb4
  return c;
 800f8be:	697b      	ldr	r3, [r7, #20]
}
 800f8c0:	4618      	mov	r0, r3
 800f8c2:	3718      	adds	r7, #24
 800f8c4:	46bd      	mov	sp, r7
 800f8c6:	bdb0      	pop	{r4, r5, r7, pc}
 800f8c8:	20000258 	.word	0x20000258
 800f8cc:	080288c8 	.word	0x080288c8
 800f8d0:	08025140 	.word	0x08025140
 800f8d4:	080260c0 	.word	0x080260c0
 800f8d8:	0801245d 	.word	0x0801245d
 800f8dc:	080264d4 	.word	0x080264d4

0800f8e0 <trim_len>:

static size_t trim_len(struct mg_connection *c, size_t len) {
 800f8e0:	b580      	push	{r7, lr}
 800f8e2:	b08a      	sub	sp, #40	@ 0x28
 800f8e4:	af00      	add	r7, sp, #0
 800f8e6:	6078      	str	r0, [r7, #4]
 800f8e8:	6039      	str	r1, [r7, #0]
  struct mg_tcpip_if *ifp = c->mgr->ifp;
 800f8ea:	687b      	ldr	r3, [r7, #4]
 800f8ec:	685b      	ldr	r3, [r3, #4]
 800f8ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f8f0:	627b      	str	r3, [r7, #36]	@ 0x24
  size_t eth_h_len = 14, ip_max_h_len = 24, tcp_max_h_len = 60, udp_h_len = 8;
 800f8f2:	230e      	movs	r3, #14
 800f8f4:	623b      	str	r3, [r7, #32]
 800f8f6:	2318      	movs	r3, #24
 800f8f8:	61fb      	str	r3, [r7, #28]
 800f8fa:	233c      	movs	r3, #60	@ 0x3c
 800f8fc:	61bb      	str	r3, [r7, #24]
 800f8fe:	2308      	movs	r3, #8
 800f900:	617b      	str	r3, [r7, #20]
  size_t max_headers_len =
      eth_h_len + ip_max_h_len + (c->is_udp ? udp_h_len : tcp_max_h_len);
 800f902:	6a3a      	ldr	r2, [r7, #32]
 800f904:	69fb      	ldr	r3, [r7, #28]
 800f906:	441a      	add	r2, r3
 800f908:	687b      	ldr	r3, [r7, #4]
 800f90a:	f893 30b5 	ldrb.w	r3, [r3, #181]	@ 0xb5
 800f90e:	f003 0301 	and.w	r3, r3, #1
 800f912:	b2db      	uxtb	r3, r3
 800f914:	2b00      	cmp	r3, #0
 800f916:	d001      	beq.n	800f91c <trim_len+0x3c>
 800f918:	697b      	ldr	r3, [r7, #20]
 800f91a:	e000      	b.n	800f91e <trim_len+0x3e>
 800f91c:	69bb      	ldr	r3, [r7, #24]
  size_t max_headers_len =
 800f91e:	4413      	add	r3, r2
 800f920:	613b      	str	r3, [r7, #16]
  size_t min_mtu = c->is_udp ? 68 /* RFC-791 */ : max_headers_len - eth_h_len;
 800f922:	687b      	ldr	r3, [r7, #4]
 800f924:	f893 30b5 	ldrb.w	r3, [r3, #181]	@ 0xb5
 800f928:	f003 0301 	and.w	r3, r3, #1
 800f92c:	b2db      	uxtb	r3, r3
 800f92e:	2b00      	cmp	r3, #0
 800f930:	d103      	bne.n	800f93a <trim_len+0x5a>
 800f932:	693a      	ldr	r2, [r7, #16]
 800f934:	6a3b      	ldr	r3, [r7, #32]
 800f936:	1ad3      	subs	r3, r2, r3
 800f938:	e000      	b.n	800f93c <trim_len+0x5c>
 800f93a:	2344      	movs	r3, #68	@ 0x44
 800f93c:	60fb      	str	r3, [r7, #12]

  // If the frame exceeds the available buffer, trim the length
  if (len + max_headers_len > ifp->tx.len) {
 800f93e:	683a      	ldr	r2, [r7, #0]
 800f940:	693b      	ldr	r3, [r7, #16]
 800f942:	441a      	add	r2, r3
 800f944:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f946:	699b      	ldr	r3, [r3, #24]
 800f948:	429a      	cmp	r2, r3
 800f94a:	d904      	bls.n	800f956 <trim_len+0x76>
    len = ifp->tx.len - max_headers_len;
 800f94c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f94e:	699a      	ldr	r2, [r3, #24]
 800f950:	693b      	ldr	r3, [r7, #16]
 800f952:	1ad3      	subs	r3, r2, r3
 800f954:	603b      	str	r3, [r7, #0]
  }
  // Ensure the MTU isn't lower than the minimum allowed value
  if (ifp->mtu < min_mtu) {
 800f956:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f958:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800f95c:	461a      	mov	r2, r3
 800f95e:	68fb      	ldr	r3, [r7, #12]
 800f960:	4293      	cmp	r3, r2
 800f962:	d913      	bls.n	800f98c <trim_len+0xac>
    MG_ERROR(("MTU is lower than minimum, capping to %lu", min_mtu));
 800f964:	4b20      	ldr	r3, [pc, #128]	@ (800f9e8 <trim_len+0x108>)
 800f966:	681b      	ldr	r3, [r3, #0]
 800f968:	2b00      	cmp	r3, #0
 800f96a:	dd0a      	ble.n	800f982 <trim_len+0xa2>
 800f96c:	4b1f      	ldr	r3, [pc, #124]	@ (800f9ec <trim_len+0x10c>)
 800f96e:	f241 22d8 	movw	r2, #4824	@ 0x12d8
 800f972:	491f      	ldr	r1, [pc, #124]	@ (800f9f0 <trim_len+0x110>)
 800f974:	2001      	movs	r0, #1
 800f976:	f7fd fc19 	bl	800d1ac <mg_log_prefix>
 800f97a:	68f9      	ldr	r1, [r7, #12]
 800f97c:	481d      	ldr	r0, [pc, #116]	@ (800f9f4 <trim_len+0x114>)
 800f97e:	f7fd fc65 	bl	800d24c <mg_log>
    ifp->mtu = (uint16_t) min_mtu;
 800f982:	68fb      	ldr	r3, [r7, #12]
 800f984:	b29a      	uxth	r2, r3
 800f986:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f988:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  }
  // If the total packet size exceeds the MTU, trim the length
  if (len + max_headers_len - eth_h_len > ifp->mtu) {
 800f98c:	683a      	ldr	r2, [r7, #0]
 800f98e:	693b      	ldr	r3, [r7, #16]
 800f990:	441a      	add	r2, r3
 800f992:	6a3b      	ldr	r3, [r7, #32]
 800f994:	1ad3      	subs	r3, r2, r3
 800f996:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800f998:	f8b2 205a 	ldrh.w	r2, [r2, #90]	@ 0x5a
 800f99c:	4293      	cmp	r3, r2
 800f99e:	d91e      	bls.n	800f9de <trim_len+0xfe>
    len = ifp->mtu - max_headers_len + eth_h_len;
 800f9a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f9a2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800f9a6:	461a      	mov	r2, r3
 800f9a8:	693b      	ldr	r3, [r7, #16]
 800f9aa:	1ad3      	subs	r3, r2, r3
 800f9ac:	6a3a      	ldr	r2, [r7, #32]
 800f9ae:	4413      	add	r3, r2
 800f9b0:	603b      	str	r3, [r7, #0]
    if (c->is_udp) {
 800f9b2:	687b      	ldr	r3, [r7, #4]
 800f9b4:	f893 30b5 	ldrb.w	r3, [r3, #181]	@ 0xb5
 800f9b8:	f003 0301 	and.w	r3, r3, #1
 800f9bc:	b2db      	uxtb	r3, r3
 800f9be:	2b00      	cmp	r3, #0
 800f9c0:	d00d      	beq.n	800f9de <trim_len+0xfe>
      MG_ERROR(("UDP datagram exceeds MTU. Truncating it."));
 800f9c2:	4b09      	ldr	r3, [pc, #36]	@ (800f9e8 <trim_len+0x108>)
 800f9c4:	681b      	ldr	r3, [r3, #0]
 800f9c6:	2b00      	cmp	r3, #0
 800f9c8:	dd09      	ble.n	800f9de <trim_len+0xfe>
 800f9ca:	4b08      	ldr	r3, [pc, #32]	@ (800f9ec <trim_len+0x10c>)
 800f9cc:	f241 22df 	movw	r2, #4831	@ 0x12df
 800f9d0:	4907      	ldr	r1, [pc, #28]	@ (800f9f0 <trim_len+0x110>)
 800f9d2:	2001      	movs	r0, #1
 800f9d4:	f7fd fbea 	bl	800d1ac <mg_log_prefix>
 800f9d8:	4807      	ldr	r0, [pc, #28]	@ (800f9f8 <trim_len+0x118>)
 800f9da:	f7fd fc37 	bl	800d24c <mg_log>
    }
  }

  return len;
 800f9de:	683b      	ldr	r3, [r7, #0]
}
 800f9e0:	4618      	mov	r0, r3
 800f9e2:	3728      	adds	r7, #40	@ 0x28
 800f9e4:	46bd      	mov	sp, r7
 800f9e6:	bd80      	pop	{r7, pc}
 800f9e8:	20000258 	.word	0x20000258
 800f9ec:	080288d4 	.word	0x080288d4
 800f9f0:	08025140 	.word	0x08025140
 800f9f4:	080264e4 	.word	0x080264e4
 800f9f8:	08026510 	.word	0x08026510

0800f9fc <mg_io_send>:

long mg_io_send(struct mg_connection *c, const void *buf, size_t len) {
 800f9fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f9fe:	b08f      	sub	sp, #60	@ 0x3c
 800fa00:	af06      	add	r7, sp, #24
 800fa02:	60f8      	str	r0, [r7, #12]
 800fa04:	60b9      	str	r1, [r7, #8]
 800fa06:	607a      	str	r2, [r7, #4]
  struct mg_tcpip_if *ifp = c->mgr->ifp;
 800fa08:	68fb      	ldr	r3, [r7, #12]
 800fa0a:	685b      	ldr	r3, [r3, #4]
 800fa0c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fa0e:	61fb      	str	r3, [r7, #28]
  struct connstate *s = (struct connstate *) (c + 1);
 800fa10:	68fb      	ldr	r3, [r7, #12]
 800fa12:	33b8      	adds	r3, #184	@ 0xb8
 800fa14:	61bb      	str	r3, [r7, #24]
  uint32_t dst_ip = c->rem.ip4;
 800fa16:	68fb      	ldr	r3, [r7, #12]
 800fa18:	6a1b      	ldr	r3, [r3, #32]
 800fa1a:	617b      	str	r3, [r7, #20]
  len = trim_len(c, len);
 800fa1c:	6879      	ldr	r1, [r7, #4]
 800fa1e:	68f8      	ldr	r0, [r7, #12]
 800fa20:	f7ff ff5e 	bl	800f8e0 <trim_len>
 800fa24:	6078      	str	r0, [r7, #4]
  if (c->is_udp) {
 800fa26:	68fb      	ldr	r3, [r7, #12]
 800fa28:	f893 30b5 	ldrb.w	r3, [r3, #181]	@ 0xb5
 800fa2c:	f003 0301 	and.w	r3, r3, #1
 800fa30:	b2db      	uxtb	r3, r3
 800fa32:	2b00      	cmp	r3, #0
 800fa34:	d01d      	beq.n	800fa72 <mg_io_send+0x76>
    if (!tx_udp(ifp, s->mac, ifp->ip, c->loc.port, dst_ip, c->rem.port, buf,
 800fa36:	69bb      	ldr	r3, [r7, #24]
 800fa38:	f103 011a 	add.w	r1, r3, #26
 800fa3c:	69fb      	ldr	r3, [r7, #28]
 800fa3e:	6898      	ldr	r0, [r3, #8]
 800fa40:	68fb      	ldr	r3, [r7, #12]
 800fa42:	8b1c      	ldrh	r4, [r3, #24]
 800fa44:	68fb      	ldr	r3, [r7, #12]
 800fa46:	8e1b      	ldrh	r3, [r3, #48]	@ 0x30
 800fa48:	687a      	ldr	r2, [r7, #4]
 800fa4a:	9203      	str	r2, [sp, #12]
 800fa4c:	68ba      	ldr	r2, [r7, #8]
 800fa4e:	9202      	str	r2, [sp, #8]
 800fa50:	9301      	str	r3, [sp, #4]
 800fa52:	697b      	ldr	r3, [r7, #20]
 800fa54:	9300      	str	r3, [sp, #0]
 800fa56:	4623      	mov	r3, r4
 800fa58:	4602      	mov	r2, r0
 800fa5a:	69f8      	ldr	r0, [r7, #28]
 800fa5c:	f7fe fc8d 	bl	800e37a <tx_udp>
 800fa60:	4603      	mov	r3, r0
 800fa62:	f083 0301 	eor.w	r3, r3, #1
 800fa66:	b2db      	uxtb	r3, r3
 800fa68:	2b00      	cmp	r3, #0
 800fa6a:	d04a      	beq.n	800fb02 <mg_io_send+0x106>
                len))
      return MG_IO_WAIT;
 800fa6c:	f06f 0301 	mvn.w	r3, #1
 800fa70:	e048      	b.n	800fb04 <mg_io_send+0x108>
  } else {  // TCP, cap to peer's MSS
    size_t sent;
    if (len > s->dmss) len = s->dmss;  // RFC-6691: reduce if sending opts
 800fa72:	69bb      	ldr	r3, [r7, #24]
 800fa74:	8b1b      	ldrh	r3, [r3, #24]
 800fa76:	461a      	mov	r2, r3
 800fa78:	687b      	ldr	r3, [r7, #4]
 800fa7a:	4293      	cmp	r3, r2
 800fa7c:	d902      	bls.n	800fa84 <mg_io_send+0x88>
 800fa7e:	69bb      	ldr	r3, [r7, #24]
 800fa80:	8b1b      	ldrh	r3, [r3, #24]
 800fa82:	607b      	str	r3, [r7, #4]
    sent = tx_tcp(ifp, s->mac, dst_ip, TH_PUSH | TH_ACK, c->loc.port,
 800fa84:	69bb      	ldr	r3, [r7, #24]
 800fa86:	f103 061a 	add.w	r6, r3, #26
 800fa8a:	68fb      	ldr	r3, [r7, #12]
 800fa8c:	8b1c      	ldrh	r4, [r3, #24]
 800fa8e:	68fb      	ldr	r3, [r7, #12]
 800fa90:	8e1d      	ldrh	r5, [r3, #48]	@ 0x30
 800fa92:	69bb      	ldr	r3, [r7, #24]
 800fa94:	681b      	ldr	r3, [r3, #0]
 800fa96:	4618      	mov	r0, r3
 800fa98:	f011 fb5a 	bl	8021150 <mg_ntohl>
 800fa9c:	6038      	str	r0, [r7, #0]
 800fa9e:	69bb      	ldr	r3, [r7, #24]
 800faa0:	685b      	ldr	r3, [r3, #4]
 800faa2:	4618      	mov	r0, r3
 800faa4:	f011 fb54 	bl	8021150 <mg_ntohl>
 800faa8:	4602      	mov	r2, r0
 800faaa:	687b      	ldr	r3, [r7, #4]
 800faac:	9305      	str	r3, [sp, #20]
 800faae:	68bb      	ldr	r3, [r7, #8]
 800fab0:	9304      	str	r3, [sp, #16]
 800fab2:	9203      	str	r2, [sp, #12]
 800fab4:	683b      	ldr	r3, [r7, #0]
 800fab6:	9302      	str	r3, [sp, #8]
 800fab8:	9501      	str	r5, [sp, #4]
 800faba:	9400      	str	r4, [sp, #0]
 800fabc:	2318      	movs	r3, #24
 800fabe:	697a      	ldr	r2, [r7, #20]
 800fac0:	4631      	mov	r1, r6
 800fac2:	69f8      	ldr	r0, [r7, #28]
 800fac4:	f7ff fcd8 	bl	800f478 <tx_tcp>
 800fac8:	6138      	str	r0, [r7, #16]
                  c->rem.port, mg_htonl(s->seq), mg_htonl(s->ack), buf, len);
    if (sent == 0) {
 800faca:	693b      	ldr	r3, [r7, #16]
 800facc:	2b00      	cmp	r3, #0
 800face:	d102      	bne.n	800fad6 <mg_io_send+0xda>
      return MG_IO_WAIT;
 800fad0:	f06f 0301 	mvn.w	r3, #1
 800fad4:	e016      	b.n	800fb04 <mg_io_send+0x108>
    } else if (sent == (size_t) -1) {
 800fad6:	693b      	ldr	r3, [r7, #16]
 800fad8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fadc:	d102      	bne.n	800fae4 <mg_io_send+0xe8>
      return MG_IO_ERR;
 800fade:	f04f 33ff 	mov.w	r3, #4294967295
 800fae2:	e00f      	b.n	800fb04 <mg_io_send+0x108>
    } else {
      s->seq += (uint32_t) len;
 800fae4:	69bb      	ldr	r3, [r7, #24]
 800fae6:	681a      	ldr	r2, [r3, #0]
 800fae8:	687b      	ldr	r3, [r7, #4]
 800faea:	441a      	add	r2, r3
 800faec:	69bb      	ldr	r3, [r7, #24]
 800faee:	601a      	str	r2, [r3, #0]
      if (s->ttype == MIP_TTYPE_ACK) settmout(c, MIP_TTYPE_KEEPALIVE);
 800faf0:	69bb      	ldr	r3, [r7, #24]
 800faf2:	f893 3020 	ldrb.w	r3, [r3, #32]
 800faf6:	2b01      	cmp	r3, #1
 800faf8:	d103      	bne.n	800fb02 <mg_io_send+0x106>
 800fafa:	2100      	movs	r1, #0
 800fafc:	68f8      	ldr	r0, [r7, #12]
 800fafe:	f7fe fa71 	bl	800dfe4 <settmout>
    }
  }
  return (long) len;
 800fb02:	687b      	ldr	r3, [r7, #4]
}
 800fb04:	4618      	mov	r0, r3
 800fb06:	3724      	adds	r7, #36	@ 0x24
 800fb08:	46bd      	mov	sp, r7
 800fb0a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800fb0c <handle_tls_recv>:

static void handle_tls_recv(struct mg_connection *c) {
 800fb0c:	b580      	push	{r7, lr}
 800fb0e:	b086      	sub	sp, #24
 800fb10:	af00      	add	r7, sp, #0
 800fb12:	6078      	str	r0, [r7, #4]
  size_t avail = mg_tls_pending(c);
 800fb14:	6878      	ldr	r0, [r7, #4]
 800fb16:	f00a fe7b 	bl	801a810 <mg_tls_pending>
 800fb1a:	6178      	str	r0, [r7, #20]
  size_t min = avail > MG_MAX_RECV_SIZE ? MG_MAX_RECV_SIZE : avail;
 800fb1c:	697b      	ldr	r3, [r7, #20]
 800fb1e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800fb22:	bf28      	it	cs
 800fb24:	f44f 1340 	movcs.w	r3, #3145728	@ 0x300000
 800fb28:	613b      	str	r3, [r7, #16]
  struct mg_iobuf *io = &c->recv;
 800fb2a:	687b      	ldr	r3, [r7, #4]
 800fb2c:	3340      	adds	r3, #64	@ 0x40
 800fb2e:	60fb      	str	r3, [r7, #12]
  if (io->size - io->len < min && !mg_iobuf_resize(io, io->len + min)) {
 800fb30:	68fb      	ldr	r3, [r7, #12]
 800fb32:	685a      	ldr	r2, [r3, #4]
 800fb34:	68fb      	ldr	r3, [r7, #12]
 800fb36:	689b      	ldr	r3, [r3, #8]
 800fb38:	1ad3      	subs	r3, r2, r3
 800fb3a:	693a      	ldr	r2, [r7, #16]
 800fb3c:	429a      	cmp	r2, r3
 800fb3e:	d90f      	bls.n	800fb60 <handle_tls_recv+0x54>
 800fb40:	68fb      	ldr	r3, [r7, #12]
 800fb42:	689a      	ldr	r2, [r3, #8]
 800fb44:	693b      	ldr	r3, [r7, #16]
 800fb46:	4413      	add	r3, r2
 800fb48:	4619      	mov	r1, r3
 800fb4a:	68f8      	ldr	r0, [r7, #12]
 800fb4c:	f7fc fb80 	bl	800c250 <mg_iobuf_resize>
 800fb50:	4603      	mov	r3, r0
 800fb52:	2b00      	cmp	r3, #0
 800fb54:	d104      	bne.n	800fb60 <handle_tls_recv+0x54>
    mg_error(c, "oom");
 800fb56:	491c      	ldr	r1, [pc, #112]	@ (800fbc8 <handle_tls_recv+0xbc>)
 800fb58:	6878      	ldr	r0, [r7, #4]
 800fb5a:	f7f8 f98b 	bl	8007e74 <mg_error>
      // Decrypted successfully - trigger MG_EV_READ
      io->len += (size_t) n;
      mg_call(c, MG_EV_READ, &n);
    }  // else n < 0: outstanding data to be moved to c->recv
  }
}
 800fb5e:	e02f      	b.n	800fbc0 <handle_tls_recv+0xb4>
    long n = mg_tls_recv(c, io->buf != NULL ? &io->buf[io->len] : io->buf,
 800fb60:	68fb      	ldr	r3, [r7, #12]
 800fb62:	681b      	ldr	r3, [r3, #0]
 800fb64:	2b00      	cmp	r3, #0
 800fb66:	d005      	beq.n	800fb74 <handle_tls_recv+0x68>
 800fb68:	68fb      	ldr	r3, [r7, #12]
 800fb6a:	681a      	ldr	r2, [r3, #0]
 800fb6c:	68fb      	ldr	r3, [r7, #12]
 800fb6e:	689b      	ldr	r3, [r3, #8]
 800fb70:	4413      	add	r3, r2
 800fb72:	e001      	b.n	800fb78 <handle_tls_recv+0x6c>
 800fb74:	68fb      	ldr	r3, [r7, #12]
 800fb76:	681b      	ldr	r3, [r3, #0]
                         io->size - io->len);
 800fb78:	68fa      	ldr	r2, [r7, #12]
 800fb7a:	6851      	ldr	r1, [r2, #4]
 800fb7c:	68fa      	ldr	r2, [r7, #12]
 800fb7e:	6892      	ldr	r2, [r2, #8]
    long n = mg_tls_recv(c, io->buf != NULL ? &io->buf[io->len] : io->buf,
 800fb80:	1a8a      	subs	r2, r1, r2
 800fb82:	4619      	mov	r1, r3
 800fb84:	6878      	ldr	r0, [r7, #4]
 800fb86:	f00a fdef 	bl	801a768 <mg_tls_recv>
 800fb8a:	4603      	mov	r3, r0
 800fb8c:	60bb      	str	r3, [r7, #8]
    if (n == MG_IO_ERR) {
 800fb8e:	68bb      	ldr	r3, [r7, #8]
 800fb90:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fb94:	d104      	bne.n	800fba0 <handle_tls_recv+0x94>
      mg_error(c, "TLS recv error");
 800fb96:	490d      	ldr	r1, [pc, #52]	@ (800fbcc <handle_tls_recv+0xc0>)
 800fb98:	6878      	ldr	r0, [r7, #4]
 800fb9a:	f7f8 f96b 	bl	8007e74 <mg_error>
}
 800fb9e:	e00f      	b.n	800fbc0 <handle_tls_recv+0xb4>
    } else if (n > 0) {
 800fba0:	68bb      	ldr	r3, [r7, #8]
 800fba2:	2b00      	cmp	r3, #0
 800fba4:	dd0c      	ble.n	800fbc0 <handle_tls_recv+0xb4>
      io->len += (size_t) n;
 800fba6:	68fb      	ldr	r3, [r7, #12]
 800fba8:	689b      	ldr	r3, [r3, #8]
 800fbaa:	68ba      	ldr	r2, [r7, #8]
 800fbac:	441a      	add	r2, r3
 800fbae:	68fb      	ldr	r3, [r7, #12]
 800fbb0:	609a      	str	r2, [r3, #8]
      mg_call(c, MG_EV_READ, &n);
 800fbb2:	f107 0308 	add.w	r3, r7, #8
 800fbb6:	461a      	mov	r2, r3
 800fbb8:	2107      	movs	r1, #7
 800fbba:	6878      	ldr	r0, [r7, #4]
 800fbbc:	f7f8 f938 	bl	8007e30 <mg_call>
}
 800fbc0:	bf00      	nop
 800fbc2:	3718      	adds	r7, #24
 800fbc4:	46bd      	mov	sp, r7
 800fbc6:	bd80      	pop	{r7, pc}
 800fbc8:	080264ac 	.word	0x080264ac
 800fbcc:	0802653c 	.word	0x0802653c

0800fbd0 <read_conn>:

static void read_conn(struct mg_connection *c, struct pkt *pkt) {
 800fbd0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fbd4:	b090      	sub	sp, #64	@ 0x40
 800fbd6:	af06      	add	r7, sp, #24
 800fbd8:	60f8      	str	r0, [r7, #12]
 800fbda:	60b9      	str	r1, [r7, #8]
  struct connstate *s = (struct connstate *) (c + 1);
 800fbdc:	68fb      	ldr	r3, [r7, #12]
 800fbde:	33b8      	adds	r3, #184	@ 0xb8
 800fbe0:	623b      	str	r3, [r7, #32]
  struct mg_iobuf *io = c->is_tls ? &c->rtls : &c->recv;
 800fbe2:	68fb      	ldr	r3, [r7, #12]
 800fbe4:	f893 30b4 	ldrb.w	r3, [r3, #180]	@ 0xb4
 800fbe8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800fbec:	b2db      	uxtb	r3, r3
 800fbee:	2b00      	cmp	r3, #0
 800fbf0:	d002      	beq.n	800fbf8 <read_conn+0x28>
 800fbf2:	68fb      	ldr	r3, [r7, #12]
 800fbf4:	3370      	adds	r3, #112	@ 0x70
 800fbf6:	e001      	b.n	800fbfc <read_conn+0x2c>
 800fbf8:	68fb      	ldr	r3, [r7, #12]
 800fbfa:	3340      	adds	r3, #64	@ 0x40
 800fbfc:	61fb      	str	r3, [r7, #28]
  uint32_t seq = mg_ntohl(pkt->tcp->seq);
 800fbfe:	68bb      	ldr	r3, [r7, #8]
 800fc00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fc02:	685b      	ldr	r3, [r3, #4]
 800fc04:	4618      	mov	r0, r3
 800fc06:	f011 faa3 	bl	8021150 <mg_ntohl>
 800fc0a:	61b8      	str	r0, [r7, #24]
  uint32_t rem_ip = c->rem.ip4;
 800fc0c:	68fb      	ldr	r3, [r7, #12]
 800fc0e:	6a1b      	ldr	r3, [r3, #32]
 800fc10:	617b      	str	r3, [r7, #20]
  if (pkt->tcp->flags & TH_FIN) {
 800fc12:	68bb      	ldr	r3, [r7, #8]
 800fc14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fc16:	7b5b      	ldrb	r3, [r3, #13]
 800fc18:	f003 0301 	and.w	r3, r3, #1
 800fc1c:	2b00      	cmp	r3, #0
 800fc1e:	f000 80c6 	beq.w	800fdae <read_conn+0x1de>
    uint8_t flags = TH_ACK;
 800fc22:	2310      	movs	r3, #16
 800fc24:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (mg_ntohl(pkt->tcp->seq) != s->ack) {
 800fc28:	68bb      	ldr	r3, [r7, #8]
 800fc2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fc2c:	685b      	ldr	r3, [r3, #4]
 800fc2e:	4618      	mov	r0, r3
 800fc30:	f011 fa8e 	bl	8021150 <mg_ntohl>
 800fc34:	4602      	mov	r2, r0
 800fc36:	6a3b      	ldr	r3, [r7, #32]
 800fc38:	685b      	ldr	r3, [r3, #4]
 800fc3a:	429a      	cmp	r2, r3
 800fc3c:	d03d      	beq.n	800fcba <read_conn+0xea>
      MG_VERBOSE(("ignoring FIN, %x != %x", mg_ntohl(pkt->tcp->seq), s->ack));
 800fc3e:	4b9c      	ldr	r3, [pc, #624]	@ (800feb0 <read_conn+0x2e0>)
 800fc40:	681b      	ldr	r3, [r3, #0]
 800fc42:	2b03      	cmp	r3, #3
 800fc44:	dd13      	ble.n	800fc6e <read_conn+0x9e>
 800fc46:	4b9b      	ldr	r3, [pc, #620]	@ (800feb4 <read_conn+0x2e4>)
 800fc48:	f241 321c 	movw	r2, #4892	@ 0x131c
 800fc4c:	499a      	ldr	r1, [pc, #616]	@ (800feb8 <read_conn+0x2e8>)
 800fc4e:	2004      	movs	r0, #4
 800fc50:	f7fd faac 	bl	800d1ac <mg_log_prefix>
 800fc54:	68bb      	ldr	r3, [r7, #8]
 800fc56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fc58:	685b      	ldr	r3, [r3, #4]
 800fc5a:	4618      	mov	r0, r3
 800fc5c:	f011 fa78 	bl	8021150 <mg_ntohl>
 800fc60:	4601      	mov	r1, r0
 800fc62:	6a3b      	ldr	r3, [r7, #32]
 800fc64:	685b      	ldr	r3, [r3, #4]
 800fc66:	461a      	mov	r2, r3
 800fc68:	4894      	ldr	r0, [pc, #592]	@ (800febc <read_conn+0x2ec>)
 800fc6a:	f7fd faef 	bl	800d24c <mg_log>
      tx_tcp(c->mgr->ifp, s->mac, rem_ip, TH_ACK, c->loc.port, c->rem.port,
 800fc6e:	68fb      	ldr	r3, [r7, #12]
 800fc70:	685b      	ldr	r3, [r3, #4]
 800fc72:	6b9e      	ldr	r6, [r3, #56]	@ 0x38
 800fc74:	6a3b      	ldr	r3, [r7, #32]
 800fc76:	f103 081a 	add.w	r8, r3, #26
 800fc7a:	68fb      	ldr	r3, [r7, #12]
 800fc7c:	8b1c      	ldrh	r4, [r3, #24]
 800fc7e:	68fb      	ldr	r3, [r7, #12]
 800fc80:	8e1d      	ldrh	r5, [r3, #48]	@ 0x30
 800fc82:	6a3b      	ldr	r3, [r7, #32]
 800fc84:	681b      	ldr	r3, [r3, #0]
 800fc86:	4618      	mov	r0, r3
 800fc88:	f011 fa62 	bl	8021150 <mg_ntohl>
 800fc8c:	6078      	str	r0, [r7, #4]
 800fc8e:	6a3b      	ldr	r3, [r7, #32]
 800fc90:	685b      	ldr	r3, [r3, #4]
 800fc92:	4618      	mov	r0, r3
 800fc94:	f011 fa5c 	bl	8021150 <mg_ntohl>
 800fc98:	4603      	mov	r3, r0
 800fc9a:	2200      	movs	r2, #0
 800fc9c:	9205      	str	r2, [sp, #20]
 800fc9e:	4a88      	ldr	r2, [pc, #544]	@ (800fec0 <read_conn+0x2f0>)
 800fca0:	9204      	str	r2, [sp, #16]
 800fca2:	9303      	str	r3, [sp, #12]
 800fca4:	687b      	ldr	r3, [r7, #4]
 800fca6:	9302      	str	r3, [sp, #8]
 800fca8:	9501      	str	r5, [sp, #4]
 800fcaa:	9400      	str	r4, [sp, #0]
 800fcac:	2310      	movs	r3, #16
 800fcae:	697a      	ldr	r2, [r7, #20]
 800fcb0:	4641      	mov	r1, r8
 800fcb2:	4630      	mov	r0, r6
 800fcb4:	f7ff fbe0 	bl	800f478 <tx_tcp>
             mg_htonl(s->seq), mg_htonl(s->ack), "", 0);
      return;
 800fcb8:	e223      	b.n	8010102 <read_conn+0x532>
    }
    // If we initiated the closure, we reply with ACK upon receiving FIN
    // If we didn't initiate it, we reply with FIN as part of the normal TCP
    // closure process
    s->ack = (uint32_t) (mg_htonl(pkt->tcp->seq) + pkt->pay.len + 1);
 800fcba:	68bb      	ldr	r3, [r7, #8]
 800fcbc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fcbe:	685b      	ldr	r3, [r3, #4]
 800fcc0:	4618      	mov	r0, r3
 800fcc2:	f011 fa45 	bl	8021150 <mg_ntohl>
 800fcc6:	4602      	mov	r2, r0
 800fcc8:	68bb      	ldr	r3, [r7, #8]
 800fcca:	68db      	ldr	r3, [r3, #12]
 800fccc:	4413      	add	r3, r2
 800fcce:	1c5a      	adds	r2, r3, #1
 800fcd0:	6a3b      	ldr	r3, [r7, #32]
 800fcd2:	605a      	str	r2, [r3, #4]
    s->fin_rcvd = true;
 800fcd4:	6a3b      	ldr	r3, [r7, #32]
 800fcd6:	2201      	movs	r2, #1
 800fcd8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    if (c->is_draining && s->ttype == MIP_TTYPE_FIN) {
 800fcdc:	68fb      	ldr	r3, [r7, #12]
 800fcde:	f893 30b5 	ldrb.w	r3, [r3, #181]	@ 0xb5
 800fce2:	f003 0310 	and.w	r3, r3, #16
 800fce6:	b2db      	uxtb	r3, r3
 800fce8:	2b00      	cmp	r3, #0
 800fcea:	d023      	beq.n	800fd34 <read_conn+0x164>
 800fcec:	6a3b      	ldr	r3, [r7, #32]
 800fcee:	f893 3020 	ldrb.w	r3, [r3, #32]
 800fcf2:	2b04      	cmp	r3, #4
 800fcf4:	d11e      	bne.n	800fd34 <read_conn+0x164>
      if (s->seq == mg_htonl(pkt->tcp->ack)) {  // Simultaneous closure ?
 800fcf6:	6a3b      	ldr	r3, [r7, #32]
 800fcf8:	681c      	ldr	r4, [r3, #0]
 800fcfa:	68bb      	ldr	r3, [r7, #8]
 800fcfc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fcfe:	689b      	ldr	r3, [r3, #8]
 800fd00:	4618      	mov	r0, r3
 800fd02:	f011 fa25 	bl	8021150 <mg_ntohl>
 800fd06:	4603      	mov	r3, r0
 800fd08:	429c      	cmp	r4, r3
 800fd0a:	d105      	bne.n	800fd18 <read_conn+0x148>
        s->seq++;                               // Yes. Increment our SEQ
 800fd0c:	6a3b      	ldr	r3, [r7, #32]
 800fd0e:	681b      	ldr	r3, [r3, #0]
 800fd10:	1c5a      	adds	r2, r3, #1
 800fd12:	6a3b      	ldr	r3, [r7, #32]
 800fd14:	601a      	str	r2, [r3, #0]
 800fd16:	e008      	b.n	800fd2a <read_conn+0x15a>
      } else {                                  // Otherwise,
        s->seq = mg_htonl(pkt->tcp->ack);       // Set to peer's ACK
 800fd18:	68bb      	ldr	r3, [r7, #8]
 800fd1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fd1c:	689b      	ldr	r3, [r3, #8]
 800fd1e:	4618      	mov	r0, r3
 800fd20:	f011 fa16 	bl	8021150 <mg_ntohl>
 800fd24:	4602      	mov	r2, r0
 800fd26:	6a3b      	ldr	r3, [r7, #32]
 800fd28:	601a      	str	r2, [r3, #0]
      }
      s->twclosure = true;
 800fd2a:	6a3b      	ldr	r3, [r7, #32]
 800fd2c:	2201      	movs	r2, #1
 800fd2e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 800fd32:	e010      	b.n	800fd56 <read_conn+0x186>
    } else {
      flags |= TH_FIN;
 800fd34:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800fd38:	f043 0301 	orr.w	r3, r3, #1
 800fd3c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      c->is_draining = 1;
 800fd40:	68fa      	ldr	r2, [r7, #12]
 800fd42:	f892 30b5 	ldrb.w	r3, [r2, #181]	@ 0xb5
 800fd46:	f043 0310 	orr.w	r3, r3, #16
 800fd4a:	f882 30b5 	strb.w	r3, [r2, #181]	@ 0xb5
      settmout(c, MIP_TTYPE_FIN);
 800fd4e:	2104      	movs	r1, #4
 800fd50:	68f8      	ldr	r0, [r7, #12]
 800fd52:	f7fe f947 	bl	800dfe4 <settmout>
    }
    tx_tcp(c->mgr->ifp, s->mac, rem_ip, flags, c->loc.port, c->rem.port,
 800fd56:	68fb      	ldr	r3, [r7, #12]
 800fd58:	685b      	ldr	r3, [r3, #4]
 800fd5a:	6b9e      	ldr	r6, [r3, #56]	@ 0x38
 800fd5c:	6a3b      	ldr	r3, [r7, #32]
 800fd5e:	f103 081a 	add.w	r8, r3, #26
 800fd62:	68fb      	ldr	r3, [r7, #12]
 800fd64:	8b1c      	ldrh	r4, [r3, #24]
 800fd66:	68fb      	ldr	r3, [r7, #12]
 800fd68:	8e1d      	ldrh	r5, [r3, #48]	@ 0x30
 800fd6a:	6a3b      	ldr	r3, [r7, #32]
 800fd6c:	681b      	ldr	r3, [r3, #0]
 800fd6e:	4618      	mov	r0, r3
 800fd70:	f011 f9ee 	bl	8021150 <mg_ntohl>
 800fd74:	6078      	str	r0, [r7, #4]
 800fd76:	6a3b      	ldr	r3, [r7, #32]
 800fd78:	685b      	ldr	r3, [r3, #4]
 800fd7a:	4618      	mov	r0, r3
 800fd7c:	f011 f9e8 	bl	8021150 <mg_ntohl>
 800fd80:	4602      	mov	r2, r0
 800fd82:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800fd86:	2100      	movs	r1, #0
 800fd88:	9105      	str	r1, [sp, #20]
 800fd8a:	494d      	ldr	r1, [pc, #308]	@ (800fec0 <read_conn+0x2f0>)
 800fd8c:	9104      	str	r1, [sp, #16]
 800fd8e:	9203      	str	r2, [sp, #12]
 800fd90:	687a      	ldr	r2, [r7, #4]
 800fd92:	9202      	str	r2, [sp, #8]
 800fd94:	9501      	str	r5, [sp, #4]
 800fd96:	9400      	str	r4, [sp, #0]
 800fd98:	697a      	ldr	r2, [r7, #20]
 800fd9a:	4641      	mov	r1, r8
 800fd9c:	4630      	mov	r0, r6
 800fd9e:	f7ff fb6b 	bl	800f478 <tx_tcp>
           mg_htonl(s->seq), mg_htonl(s->ack), "", 0);
    if (pkt->pay.len == 0) return;  // if no data, we're done
 800fda2:	68bb      	ldr	r3, [r7, #8]
 800fda4:	68db      	ldr	r3, [r3, #12]
 800fda6:	2b00      	cmp	r3, #0
 800fda8:	f040 80e2 	bne.w	800ff70 <read_conn+0x3a0>
 800fdac:	e1a9      	b.n	8010102 <read_conn+0x532>
  } else if (pkt->pay.len <= 1 && mg_ntohl(pkt->tcp->seq) == s->ack - 1) {
 800fdae:	68bb      	ldr	r3, [r7, #8]
 800fdb0:	68db      	ldr	r3, [r3, #12]
 800fdb2:	2b01      	cmp	r3, #1
 800fdb4:	d842      	bhi.n	800fe3c <read_conn+0x26c>
 800fdb6:	68bb      	ldr	r3, [r7, #8]
 800fdb8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fdba:	685b      	ldr	r3, [r3, #4]
 800fdbc:	4618      	mov	r0, r3
 800fdbe:	f011 f9c7 	bl	8021150 <mg_ntohl>
 800fdc2:	4602      	mov	r2, r0
 800fdc4:	6a3b      	ldr	r3, [r7, #32]
 800fdc6:	685b      	ldr	r3, [r3, #4]
 800fdc8:	3b01      	subs	r3, #1
 800fdca:	429a      	cmp	r2, r3
 800fdcc:	d136      	bne.n	800fe3c <read_conn+0x26c>
    // Keep-Alive (RFC-9293 3.8.4, allow erroneous implementations)
    MG_VERBOSE(("%lu keepalive ACK", c->id));
 800fdce:	4b38      	ldr	r3, [pc, #224]	@ (800feb0 <read_conn+0x2e0>)
 800fdd0:	681b      	ldr	r3, [r3, #0]
 800fdd2:	2b03      	cmp	r3, #3
 800fdd4:	dd0c      	ble.n	800fdf0 <read_conn+0x220>
 800fdd6:	4b37      	ldr	r3, [pc, #220]	@ (800feb4 <read_conn+0x2e4>)
 800fdd8:	f241 3237 	movw	r2, #4919	@ 0x1337
 800fddc:	4936      	ldr	r1, [pc, #216]	@ (800feb8 <read_conn+0x2e8>)
 800fdde:	2004      	movs	r0, #4
 800fde0:	f7fd f9e4 	bl	800d1ac <mg_log_prefix>
 800fde4:	68fb      	ldr	r3, [r7, #12]
 800fde6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800fde8:	4619      	mov	r1, r3
 800fdea:	4836      	ldr	r0, [pc, #216]	@ (800fec4 <read_conn+0x2f4>)
 800fdec:	f7fd fa2e 	bl	800d24c <mg_log>
    tx_tcp(c->mgr->ifp, s->mac, rem_ip, TH_ACK, c->loc.port, c->rem.port,
 800fdf0:	68fb      	ldr	r3, [r7, #12]
 800fdf2:	685b      	ldr	r3, [r3, #4]
 800fdf4:	6b9e      	ldr	r6, [r3, #56]	@ 0x38
 800fdf6:	6a3b      	ldr	r3, [r7, #32]
 800fdf8:	f103 081a 	add.w	r8, r3, #26
 800fdfc:	68fb      	ldr	r3, [r7, #12]
 800fdfe:	8b1c      	ldrh	r4, [r3, #24]
 800fe00:	68fb      	ldr	r3, [r7, #12]
 800fe02:	8e1d      	ldrh	r5, [r3, #48]	@ 0x30
 800fe04:	6a3b      	ldr	r3, [r7, #32]
 800fe06:	681b      	ldr	r3, [r3, #0]
 800fe08:	4618      	mov	r0, r3
 800fe0a:	f011 f9a1 	bl	8021150 <mg_ntohl>
 800fe0e:	6078      	str	r0, [r7, #4]
 800fe10:	6a3b      	ldr	r3, [r7, #32]
 800fe12:	685b      	ldr	r3, [r3, #4]
 800fe14:	4618      	mov	r0, r3
 800fe16:	f011 f99b 	bl	8021150 <mg_ntohl>
 800fe1a:	4603      	mov	r3, r0
 800fe1c:	2200      	movs	r2, #0
 800fe1e:	9205      	str	r2, [sp, #20]
 800fe20:	2200      	movs	r2, #0
 800fe22:	9204      	str	r2, [sp, #16]
 800fe24:	9303      	str	r3, [sp, #12]
 800fe26:	687b      	ldr	r3, [r7, #4]
 800fe28:	9302      	str	r3, [sp, #8]
 800fe2a:	9501      	str	r5, [sp, #4]
 800fe2c:	9400      	str	r4, [sp, #0]
 800fe2e:	2310      	movs	r3, #16
 800fe30:	697a      	ldr	r2, [r7, #20]
 800fe32:	4641      	mov	r1, r8
 800fe34:	4630      	mov	r0, r6
 800fe36:	f7ff fb1f 	bl	800f478 <tx_tcp>
           mg_htonl(s->seq), mg_htonl(s->ack), NULL, 0);
    return;                        // no data to process
 800fe3a:	e162      	b.n	8010102 <read_conn+0x532>
  } else if (pkt->pay.len == 0) {  // this is an ACK
 800fe3c:	68bb      	ldr	r3, [r7, #8]
 800fe3e:	68db      	ldr	r3, [r3, #12]
 800fe40:	2b00      	cmp	r3, #0
 800fe42:	d110      	bne.n	800fe66 <read_conn+0x296>
    if (s->fin_rcvd && s->ttype == MIP_TTYPE_FIN) s->twclosure = true;
 800fe44:	6a3b      	ldr	r3, [r7, #32]
 800fe46:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800fe4a:	2b00      	cmp	r3, #0
 800fe4c:	f000 8156 	beq.w	80100fc <read_conn+0x52c>
 800fe50:	6a3b      	ldr	r3, [r7, #32]
 800fe52:	f893 3020 	ldrb.w	r3, [r3, #32]
 800fe56:	2b04      	cmp	r3, #4
 800fe58:	f040 8150 	bne.w	80100fc <read_conn+0x52c>
 800fe5c:	6a3b      	ldr	r3, [r7, #32]
 800fe5e:	2201      	movs	r2, #1
 800fe60:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    return;  // no data to process
 800fe64:	e14a      	b.n	80100fc <read_conn+0x52c>
  } else if (seq != s->ack) {
 800fe66:	6a3b      	ldr	r3, [r7, #32]
 800fe68:	685b      	ldr	r3, [r3, #4]
 800fe6a:	69ba      	ldr	r2, [r7, #24]
 800fe6c:	429a      	cmp	r2, r3
 800fe6e:	d065      	beq.n	800ff3c <read_conn+0x36c>
    uint32_t ack = (uint32_t) (mg_htonl(pkt->tcp->seq) + pkt->pay.len);
 800fe70:	68bb      	ldr	r3, [r7, #8]
 800fe72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fe74:	685b      	ldr	r3, [r3, #4]
 800fe76:	4618      	mov	r0, r3
 800fe78:	f011 f96a 	bl	8021150 <mg_ntohl>
 800fe7c:	4602      	mov	r2, r0
 800fe7e:	68bb      	ldr	r3, [r7, #8]
 800fe80:	68db      	ldr	r3, [r3, #12]
 800fe82:	4413      	add	r3, r2
 800fe84:	613b      	str	r3, [r7, #16]
    if (s->ack == ack) {
 800fe86:	6a3b      	ldr	r3, [r7, #32]
 800fe88:	685b      	ldr	r3, [r3, #4]
 800fe8a:	693a      	ldr	r2, [r7, #16]
 800fe8c:	429a      	cmp	r2, r3
 800fe8e:	d11d      	bne.n	800fecc <read_conn+0x2fc>
      MG_VERBOSE(("ignoring duplicate pkt"));
 800fe90:	4b07      	ldr	r3, [pc, #28]	@ (800feb0 <read_conn+0x2e0>)
 800fe92:	681b      	ldr	r3, [r3, #0]
 800fe94:	2b03      	cmp	r3, #3
 800fe96:	f340 8133 	ble.w	8010100 <read_conn+0x530>
 800fe9a:	4b06      	ldr	r3, [pc, #24]	@ (800feb4 <read_conn+0x2e4>)
 800fe9c:	f241 3241 	movw	r2, #4929	@ 0x1341
 800fea0:	4905      	ldr	r1, [pc, #20]	@ (800feb8 <read_conn+0x2e8>)
 800fea2:	2004      	movs	r0, #4
 800fea4:	f7fd f982 	bl	800d1ac <mg_log_prefix>
 800fea8:	4807      	ldr	r0, [pc, #28]	@ (800fec8 <read_conn+0x2f8>)
 800feaa:	f7fd f9cf 	bl	800d24c <mg_log>
    } else {
      MG_VERBOSE(("SEQ != ACK: %x %x %x", seq, s->ack, ack));
      tx_tcp(c->mgr->ifp, s->mac, rem_ip, TH_ACK, c->loc.port, c->rem.port,
             mg_htonl(s->seq), mg_htonl(s->ack), "", 0);
    }
    return;  // drop it
 800feae:	e127      	b.n	8010100 <read_conn+0x530>
 800feb0:	20000258 	.word	0x20000258
 800feb4:	080288e0 	.word	0x080288e0
 800feb8:	08025140 	.word	0x08025140
 800febc:	0802654c 	.word	0x0802654c
 800fec0:	08025980 	.word	0x08025980
 800fec4:	08026564 	.word	0x08026564
 800fec8:	08026578 	.word	0x08026578
      MG_VERBOSE(("SEQ != ACK: %x %x %x", seq, s->ack, ack));
 800fecc:	4b8f      	ldr	r3, [pc, #572]	@ (801010c <read_conn+0x53c>)
 800fece:	681b      	ldr	r3, [r3, #0]
 800fed0:	2b03      	cmp	r3, #3
 800fed2:	dd0d      	ble.n	800fef0 <read_conn+0x320>
 800fed4:	4b8e      	ldr	r3, [pc, #568]	@ (8010110 <read_conn+0x540>)
 800fed6:	f241 3243 	movw	r2, #4931	@ 0x1343
 800feda:	498e      	ldr	r1, [pc, #568]	@ (8010114 <read_conn+0x544>)
 800fedc:	2004      	movs	r0, #4
 800fede:	f7fd f965 	bl	800d1ac <mg_log_prefix>
 800fee2:	6a3b      	ldr	r3, [r7, #32]
 800fee4:	685a      	ldr	r2, [r3, #4]
 800fee6:	693b      	ldr	r3, [r7, #16]
 800fee8:	69b9      	ldr	r1, [r7, #24]
 800feea:	488b      	ldr	r0, [pc, #556]	@ (8010118 <read_conn+0x548>)
 800feec:	f7fd f9ae 	bl	800d24c <mg_log>
      tx_tcp(c->mgr->ifp, s->mac, rem_ip, TH_ACK, c->loc.port, c->rem.port,
 800fef0:	68fb      	ldr	r3, [r7, #12]
 800fef2:	685b      	ldr	r3, [r3, #4]
 800fef4:	6b9e      	ldr	r6, [r3, #56]	@ 0x38
 800fef6:	6a3b      	ldr	r3, [r7, #32]
 800fef8:	f103 081a 	add.w	r8, r3, #26
 800fefc:	68fb      	ldr	r3, [r7, #12]
 800fefe:	8b1c      	ldrh	r4, [r3, #24]
 800ff00:	68fb      	ldr	r3, [r7, #12]
 800ff02:	8e1d      	ldrh	r5, [r3, #48]	@ 0x30
 800ff04:	6a3b      	ldr	r3, [r7, #32]
 800ff06:	681b      	ldr	r3, [r3, #0]
 800ff08:	4618      	mov	r0, r3
 800ff0a:	f011 f921 	bl	8021150 <mg_ntohl>
 800ff0e:	6078      	str	r0, [r7, #4]
 800ff10:	6a3b      	ldr	r3, [r7, #32]
 800ff12:	685b      	ldr	r3, [r3, #4]
 800ff14:	4618      	mov	r0, r3
 800ff16:	f011 f91b 	bl	8021150 <mg_ntohl>
 800ff1a:	4603      	mov	r3, r0
 800ff1c:	2200      	movs	r2, #0
 800ff1e:	9205      	str	r2, [sp, #20]
 800ff20:	4a7e      	ldr	r2, [pc, #504]	@ (801011c <read_conn+0x54c>)
 800ff22:	9204      	str	r2, [sp, #16]
 800ff24:	9303      	str	r3, [sp, #12]
 800ff26:	687b      	ldr	r3, [r7, #4]
 800ff28:	9302      	str	r3, [sp, #8]
 800ff2a:	9501      	str	r5, [sp, #4]
 800ff2c:	9400      	str	r4, [sp, #0]
 800ff2e:	2310      	movs	r3, #16
 800ff30:	697a      	ldr	r2, [r7, #20]
 800ff32:	4641      	mov	r1, r8
 800ff34:	4630      	mov	r0, r6
 800ff36:	f7ff fa9f 	bl	800f478 <tx_tcp>
    return;  // drop it
 800ff3a:	e0e1      	b.n	8010100 <read_conn+0x530>
  } else if (io->size - io->len < pkt->pay.len &&
 800ff3c:	69fb      	ldr	r3, [r7, #28]
 800ff3e:	685a      	ldr	r2, [r3, #4]
 800ff40:	69fb      	ldr	r3, [r7, #28]
 800ff42:	689b      	ldr	r3, [r3, #8]
 800ff44:	1ad2      	subs	r2, r2, r3
 800ff46:	68bb      	ldr	r3, [r7, #8]
 800ff48:	68db      	ldr	r3, [r3, #12]
 800ff4a:	429a      	cmp	r2, r3
 800ff4c:	d210      	bcs.n	800ff70 <read_conn+0x3a0>
             !mg_iobuf_resize(io, io->len + pkt->pay.len)) {
 800ff4e:	69fb      	ldr	r3, [r7, #28]
 800ff50:	689a      	ldr	r2, [r3, #8]
 800ff52:	68bb      	ldr	r3, [r7, #8]
 800ff54:	68db      	ldr	r3, [r3, #12]
 800ff56:	4413      	add	r3, r2
 800ff58:	4619      	mov	r1, r3
 800ff5a:	69f8      	ldr	r0, [r7, #28]
 800ff5c:	f7fc f978 	bl	800c250 <mg_iobuf_resize>
 800ff60:	4603      	mov	r3, r0
  } else if (io->size - io->len < pkt->pay.len &&
 800ff62:	2b00      	cmp	r3, #0
 800ff64:	d104      	bne.n	800ff70 <read_conn+0x3a0>
    mg_error(c, "oom");
 800ff66:	496e      	ldr	r1, [pc, #440]	@ (8010120 <read_conn+0x550>)
 800ff68:	68f8      	ldr	r0, [r7, #12]
 800ff6a:	f7f7 ff83 	bl	8007e74 <mg_error>
    return;  // drop it
 800ff6e:	e0c8      	b.n	8010102 <read_conn+0x532>
  // Copy TCP payload into the IO buffer. If the connection is plain text,
  // we copy to c->recv. If the connection is TLS, this data is encrypted,
  // therefore we copy that encrypted data to the c->rtls iobuffer instead,
  // and then call mg_tls_recv() to decrypt it. NOTE: mg_tls_recv() will
  // call back mg_io_recv() which grabs raw data from c->rtls
  memcpy(&io->buf[io->len], pkt->pay.buf, pkt->pay.len);
 800ff70:	69fb      	ldr	r3, [r7, #28]
 800ff72:	681a      	ldr	r2, [r3, #0]
 800ff74:	69fb      	ldr	r3, [r7, #28]
 800ff76:	689b      	ldr	r3, [r3, #8]
 800ff78:	18d0      	adds	r0, r2, r3
 800ff7a:	68bb      	ldr	r3, [r7, #8]
 800ff7c:	6899      	ldr	r1, [r3, #8]
 800ff7e:	68bb      	ldr	r3, [r7, #8]
 800ff80:	68db      	ldr	r3, [r3, #12]
 800ff82:	461a      	mov	r2, r3
 800ff84:	f014 fbff 	bl	8024786 <memcpy>
  io->len += pkt->pay.len;
 800ff88:	69fb      	ldr	r3, [r7, #28]
 800ff8a:	689a      	ldr	r2, [r3, #8]
 800ff8c:	68bb      	ldr	r3, [r7, #8]
 800ff8e:	68db      	ldr	r3, [r3, #12]
 800ff90:	441a      	add	r2, r3
 800ff92:	69fb      	ldr	r3, [r7, #28]
 800ff94:	609a      	str	r2, [r3, #8]
  MG_VERBOSE(("%lu SEQ %x -> %x", c->id, mg_htonl(pkt->tcp->seq), s->ack));
 800ff96:	4b5d      	ldr	r3, [pc, #372]	@ (801010c <read_conn+0x53c>)
 800ff98:	681b      	ldr	r3, [r3, #0]
 800ff9a:	2b03      	cmp	r3, #3
 800ff9c:	dd15      	ble.n	800ffca <read_conn+0x3fa>
 800ff9e:	4b5c      	ldr	r3, [pc, #368]	@ (8010110 <read_conn+0x540>)
 800ffa0:	f241 3254 	movw	r2, #4948	@ 0x1354
 800ffa4:	495b      	ldr	r1, [pc, #364]	@ (8010114 <read_conn+0x544>)
 800ffa6:	2004      	movs	r0, #4
 800ffa8:	f7fd f900 	bl	800d1ac <mg_log_prefix>
 800ffac:	68fb      	ldr	r3, [r7, #12]
 800ffae:	6bdc      	ldr	r4, [r3, #60]	@ 0x3c
 800ffb0:	68bb      	ldr	r3, [r7, #8]
 800ffb2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ffb4:	685b      	ldr	r3, [r3, #4]
 800ffb6:	4618      	mov	r0, r3
 800ffb8:	f011 f8ca 	bl	8021150 <mg_ntohl>
 800ffbc:	4602      	mov	r2, r0
 800ffbe:	6a3b      	ldr	r3, [r7, #32]
 800ffc0:	685b      	ldr	r3, [r3, #4]
 800ffc2:	4621      	mov	r1, r4
 800ffc4:	4857      	ldr	r0, [pc, #348]	@ (8010124 <read_conn+0x554>)
 800ffc6:	f7fd f941 	bl	800d24c <mg_log>
  // Advance ACK counter
  s->ack = (uint32_t) (mg_htonl(pkt->tcp->seq) + pkt->pay.len);
 800ffca:	68bb      	ldr	r3, [r7, #8]
 800ffcc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ffce:	685b      	ldr	r3, [r3, #4]
 800ffd0:	4618      	mov	r0, r3
 800ffd2:	f011 f8bd 	bl	8021150 <mg_ntohl>
 800ffd6:	4602      	mov	r2, r0
 800ffd8:	68bb      	ldr	r3, [r7, #8]
 800ffda:	68db      	ldr	r3, [r3, #12]
 800ffdc:	441a      	add	r2, r3
 800ffde:	6a3b      	ldr	r3, [r7, #32]
 800ffe0:	605a      	str	r2, [r3, #4]
  s->unacked += pkt->pay.len;
 800ffe2:	6a3b      	ldr	r3, [r7, #32]
 800ffe4:	695a      	ldr	r2, [r3, #20]
 800ffe6:	68bb      	ldr	r3, [r7, #8]
 800ffe8:	68db      	ldr	r3, [r3, #12]
 800ffea:	441a      	add	r2, r3
 800ffec:	6a3b      	ldr	r3, [r7, #32]
 800ffee:	615a      	str	r2, [r3, #20]
  // size_t diff = s->acked <= s->ack ? s->ack - s->acked : s->ack;
  if (s->unacked > MIP_TCP_WIN / 2 && s->acked != s->ack) {
 800fff0:	6a3b      	ldr	r3, [r7, #32]
 800fff2:	695b      	ldr	r3, [r3, #20]
 800fff4:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 800fff8:	4293      	cmp	r3, r2
 800fffa:	d94e      	bls.n	801009a <read_conn+0x4ca>
 800fffc:	6a3b      	ldr	r3, [r7, #32]
 800fffe:	691a      	ldr	r2, [r3, #16]
 8010000:	6a3b      	ldr	r3, [r7, #32]
 8010002:	685b      	ldr	r3, [r3, #4]
 8010004:	429a      	cmp	r2, r3
 8010006:	d048      	beq.n	801009a <read_conn+0x4ca>
    // Send ACK immediately
    MG_VERBOSE(("%lu imm ACK %lu", c->id, s->acked));
 8010008:	4b40      	ldr	r3, [pc, #256]	@ (801010c <read_conn+0x53c>)
 801000a:	681b      	ldr	r3, [r3, #0]
 801000c:	2b03      	cmp	r3, #3
 801000e:	dd0e      	ble.n	801002e <read_conn+0x45e>
 8010010:	4b3f      	ldr	r3, [pc, #252]	@ (8010110 <read_conn+0x540>)
 8010012:	f241 325b 	movw	r2, #4955	@ 0x135b
 8010016:	493f      	ldr	r1, [pc, #252]	@ (8010114 <read_conn+0x544>)
 8010018:	2004      	movs	r0, #4
 801001a:	f7fd f8c7 	bl	800d1ac <mg_log_prefix>
 801001e:	68fb      	ldr	r3, [r7, #12]
 8010020:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 8010022:	6a3b      	ldr	r3, [r7, #32]
 8010024:	691b      	ldr	r3, [r3, #16]
 8010026:	461a      	mov	r2, r3
 8010028:	483f      	ldr	r0, [pc, #252]	@ (8010128 <read_conn+0x558>)
 801002a:	f7fd f90f 	bl	800d24c <mg_log>
    tx_tcp(c->mgr->ifp, s->mac, rem_ip, TH_ACK, c->loc.port, c->rem.port,
 801002e:	68fb      	ldr	r3, [r7, #12]
 8010030:	685b      	ldr	r3, [r3, #4]
 8010032:	6b9e      	ldr	r6, [r3, #56]	@ 0x38
 8010034:	6a3b      	ldr	r3, [r7, #32]
 8010036:	f103 081a 	add.w	r8, r3, #26
 801003a:	68fb      	ldr	r3, [r7, #12]
 801003c:	8b1c      	ldrh	r4, [r3, #24]
 801003e:	68fb      	ldr	r3, [r7, #12]
 8010040:	8e1d      	ldrh	r5, [r3, #48]	@ 0x30
 8010042:	6a3b      	ldr	r3, [r7, #32]
 8010044:	681b      	ldr	r3, [r3, #0]
 8010046:	4618      	mov	r0, r3
 8010048:	f011 f882 	bl	8021150 <mg_ntohl>
 801004c:	6078      	str	r0, [r7, #4]
 801004e:	6a3b      	ldr	r3, [r7, #32]
 8010050:	685b      	ldr	r3, [r3, #4]
 8010052:	4618      	mov	r0, r3
 8010054:	f011 f87c 	bl	8021150 <mg_ntohl>
 8010058:	4603      	mov	r3, r0
 801005a:	2200      	movs	r2, #0
 801005c:	9205      	str	r2, [sp, #20]
 801005e:	2200      	movs	r2, #0
 8010060:	9204      	str	r2, [sp, #16]
 8010062:	9303      	str	r3, [sp, #12]
 8010064:	687b      	ldr	r3, [r7, #4]
 8010066:	9302      	str	r3, [sp, #8]
 8010068:	9501      	str	r5, [sp, #4]
 801006a:	9400      	str	r4, [sp, #0]
 801006c:	2310      	movs	r3, #16
 801006e:	697a      	ldr	r2, [r7, #20]
 8010070:	4641      	mov	r1, r8
 8010072:	4630      	mov	r0, r6
 8010074:	f7ff fa00 	bl	800f478 <tx_tcp>
           mg_htonl(s->seq), mg_htonl(s->ack), NULL, 0);
    s->unacked = 0;
 8010078:	6a3b      	ldr	r3, [r7, #32]
 801007a:	2200      	movs	r2, #0
 801007c:	615a      	str	r2, [r3, #20]
    s->acked = s->ack;
 801007e:	6a3b      	ldr	r3, [r7, #32]
 8010080:	685a      	ldr	r2, [r3, #4]
 8010082:	6a3b      	ldr	r3, [r7, #32]
 8010084:	611a      	str	r2, [r3, #16]
    if (s->ttype != MIP_TTYPE_KEEPALIVE) settmout(c, MIP_TTYPE_KEEPALIVE);
 8010086:	6a3b      	ldr	r3, [r7, #32]
 8010088:	f893 3020 	ldrb.w	r3, [r3, #32]
 801008c:	2b00      	cmp	r3, #0
 801008e:	d00d      	beq.n	80100ac <read_conn+0x4dc>
 8010090:	2100      	movs	r1, #0
 8010092:	68f8      	ldr	r0, [r7, #12]
 8010094:	f7fd ffa6 	bl	800dfe4 <settmout>
 8010098:	e008      	b.n	80100ac <read_conn+0x4dc>
  } else {
    // if not already running, setup a timer to send an ACK later
    if (s->ttype != MIP_TTYPE_ACK) settmout(c, MIP_TTYPE_ACK);
 801009a:	6a3b      	ldr	r3, [r7, #32]
 801009c:	f893 3020 	ldrb.w	r3, [r3, #32]
 80100a0:	2b01      	cmp	r3, #1
 80100a2:	d003      	beq.n	80100ac <read_conn+0x4dc>
 80100a4:	2101      	movs	r1, #1
 80100a6:	68f8      	ldr	r0, [r7, #12]
 80100a8:	f7fd ff9c 	bl	800dfe4 <settmout>
  }
  if (c->is_tls && c->is_tls_hs) {
 80100ac:	68fb      	ldr	r3, [r7, #12]
 80100ae:	f893 30b4 	ldrb.w	r3, [r3, #180]	@ 0xb4
 80100b2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80100b6:	b2db      	uxtb	r3, r3
 80100b8:	2b00      	cmp	r3, #0
 80100ba:	d00b      	beq.n	80100d4 <read_conn+0x504>
 80100bc:	68fb      	ldr	r3, [r7, #12]
 80100be:	f893 30b4 	ldrb.w	r3, [r3, #180]	@ 0xb4
 80100c2:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 80100c6:	b2db      	uxtb	r3, r3
 80100c8:	2b00      	cmp	r3, #0
 80100ca:	d003      	beq.n	80100d4 <read_conn+0x504>
    mg_tls_handshake(c);
 80100cc:	68f8      	ldr	r0, [r7, #12]
 80100ce:	f00a f81f 	bl	801a110 <mg_tls_handshake>
 80100d2:	e016      	b.n	8010102 <read_conn+0x532>
  } else if (c->is_tls) {
 80100d4:	68fb      	ldr	r3, [r7, #12]
 80100d6:	f893 30b4 	ldrb.w	r3, [r3, #180]	@ 0xb4
 80100da:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80100de:	b2db      	uxtb	r3, r3
 80100e0:	2b00      	cmp	r3, #0
 80100e2:	d003      	beq.n	80100ec <read_conn+0x51c>
    handle_tls_recv(c);
 80100e4:	68f8      	ldr	r0, [r7, #12]
 80100e6:	f7ff fd11 	bl	800fb0c <handle_tls_recv>
 80100ea:	e00a      	b.n	8010102 <read_conn+0x532>
  } else {
    // Plain text connection, data is already in c->recv, trigger MG_EV_READ
    mg_call(c, MG_EV_READ, &pkt->pay.len);
 80100ec:	68bb      	ldr	r3, [r7, #8]
 80100ee:	330c      	adds	r3, #12
 80100f0:	461a      	mov	r2, r3
 80100f2:	2107      	movs	r1, #7
 80100f4:	68f8      	ldr	r0, [r7, #12]
 80100f6:	f7f7 fe9b 	bl	8007e30 <mg_call>
 80100fa:	e002      	b.n	8010102 <read_conn+0x532>
    return;  // no data to process
 80100fc:	bf00      	nop
 80100fe:	e000      	b.n	8010102 <read_conn+0x532>
    return;  // drop it
 8010100:	bf00      	nop
  }
}
 8010102:	3728      	adds	r7, #40	@ 0x28
 8010104:	46bd      	mov	sp, r7
 8010106:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801010a:	bf00      	nop
 801010c:	20000258 	.word	0x20000258
 8010110:	080288e0 	.word	0x080288e0
 8010114:	08025140 	.word	0x08025140
 8010118:	08026590 	.word	0x08026590
 801011c:	08025980 	.word	0x08025980
 8010120:	080264ac 	.word	0x080264ac
 8010124:	080265a8 	.word	0x080265a8
 8010128:	080265bc 	.word	0x080265bc

0801012c <backlog_insert>:
  uint16_t port, mss;  // use port=0 for available entries
  uint8_t age;
};

static int backlog_insert(struct mg_connection *c, uint16_t port,
                          uint16_t mss) {
 801012c:	b480      	push	{r7}
 801012e:	b085      	sub	sp, #20
 8010130:	af00      	add	r7, sp, #0
 8010132:	6078      	str	r0, [r7, #4]
 8010134:	460b      	mov	r3, r1
 8010136:	807b      	strh	r3, [r7, #2]
 8010138:	4613      	mov	r3, r2
 801013a:	803b      	strh	r3, [r7, #0]
  struct mg_backlog *p = (struct mg_backlog *) c->data;
 801013c:	687b      	ldr	r3, [r7, #4]
 801013e:	3390      	adds	r3, #144	@ 0x90
 8010140:	60bb      	str	r3, [r7, #8]
  size_t i;
  for (i = 0; i < sizeof(c->data) / sizeof(*p); i++) {
 8010142:	2300      	movs	r3, #0
 8010144:	60fb      	str	r3, [r7, #12]
 8010146:	e02e      	b.n	80101a6 <backlog_insert+0x7a>
    if (p[i].port != 0) continue;
 8010148:	68fa      	ldr	r2, [r7, #12]
 801014a:	4613      	mov	r3, r2
 801014c:	005b      	lsls	r3, r3, #1
 801014e:	4413      	add	r3, r2
 8010150:	005b      	lsls	r3, r3, #1
 8010152:	461a      	mov	r2, r3
 8010154:	68bb      	ldr	r3, [r7, #8]
 8010156:	4413      	add	r3, r2
 8010158:	881b      	ldrh	r3, [r3, #0]
 801015a:	2b00      	cmp	r3, #0
 801015c:	d11f      	bne.n	801019e <backlog_insert+0x72>
    p[i].age = 2;  // remove after two calls, average 1.5 call rate
 801015e:	68fa      	ldr	r2, [r7, #12]
 8010160:	4613      	mov	r3, r2
 8010162:	005b      	lsls	r3, r3, #1
 8010164:	4413      	add	r3, r2
 8010166:	005b      	lsls	r3, r3, #1
 8010168:	461a      	mov	r2, r3
 801016a:	68bb      	ldr	r3, [r7, #8]
 801016c:	4413      	add	r3, r2
 801016e:	2202      	movs	r2, #2
 8010170:	711a      	strb	r2, [r3, #4]
    p[i].port = port, p[i].mss = mss;
 8010172:	68fa      	ldr	r2, [r7, #12]
 8010174:	4613      	mov	r3, r2
 8010176:	005b      	lsls	r3, r3, #1
 8010178:	4413      	add	r3, r2
 801017a:	005b      	lsls	r3, r3, #1
 801017c:	461a      	mov	r2, r3
 801017e:	68bb      	ldr	r3, [r7, #8]
 8010180:	4413      	add	r3, r2
 8010182:	887a      	ldrh	r2, [r7, #2]
 8010184:	801a      	strh	r2, [r3, #0]
 8010186:	68fa      	ldr	r2, [r7, #12]
 8010188:	4613      	mov	r3, r2
 801018a:	005b      	lsls	r3, r3, #1
 801018c:	4413      	add	r3, r2
 801018e:	005b      	lsls	r3, r3, #1
 8010190:	461a      	mov	r2, r3
 8010192:	68bb      	ldr	r3, [r7, #8]
 8010194:	4413      	add	r3, r2
 8010196:	883a      	ldrh	r2, [r7, #0]
 8010198:	805a      	strh	r2, [r3, #2]
    return (int) i;
 801019a:	68fb      	ldr	r3, [r7, #12]
 801019c:	e008      	b.n	80101b0 <backlog_insert+0x84>
    if (p[i].port != 0) continue;
 801019e:	bf00      	nop
  for (i = 0; i < sizeof(c->data) / sizeof(*p); i++) {
 80101a0:	68fb      	ldr	r3, [r7, #12]
 80101a2:	3301      	adds	r3, #1
 80101a4:	60fb      	str	r3, [r7, #12]
 80101a6:	68fb      	ldr	r3, [r7, #12]
 80101a8:	2b04      	cmp	r3, #4
 80101aa:	d9cd      	bls.n	8010148 <backlog_insert+0x1c>
  }
  return -1;
 80101ac:	f04f 33ff 	mov.w	r3, #4294967295
}
 80101b0:	4618      	mov	r0, r3
 80101b2:	3714      	adds	r7, #20
 80101b4:	46bd      	mov	sp, r7
 80101b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101ba:	4770      	bx	lr

080101bc <backlog_retrieve>:

static struct mg_backlog *backlog_retrieve(struct mg_connection *c,
                                           uint16_t key, uint16_t port) {
 80101bc:	b480      	push	{r7}
 80101be:	b085      	sub	sp, #20
 80101c0:	af00      	add	r7, sp, #0
 80101c2:	6078      	str	r0, [r7, #4]
 80101c4:	460b      	mov	r3, r1
 80101c6:	807b      	strh	r3, [r7, #2]
 80101c8:	4613      	mov	r3, r2
 80101ca:	803b      	strh	r3, [r7, #0]
  struct mg_backlog *p = (struct mg_backlog *) c->data;
 80101cc:	687b      	ldr	r3, [r7, #4]
 80101ce:	3390      	adds	r3, #144	@ 0x90
 80101d0:	60fb      	str	r3, [r7, #12]
  if (key >= sizeof(c->data) / sizeof(*p)) return NULL;
 80101d2:	887b      	ldrh	r3, [r7, #2]
 80101d4:	2b04      	cmp	r3, #4
 80101d6:	d901      	bls.n	80101dc <backlog_retrieve+0x20>
 80101d8:	2300      	movs	r3, #0
 80101da:	e017      	b.n	801020c <backlog_retrieve+0x50>
  if (p[key].port != port) return NULL;
 80101dc:	887a      	ldrh	r2, [r7, #2]
 80101de:	4613      	mov	r3, r2
 80101e0:	005b      	lsls	r3, r3, #1
 80101e2:	4413      	add	r3, r2
 80101e4:	005b      	lsls	r3, r3, #1
 80101e6:	461a      	mov	r2, r3
 80101e8:	68fb      	ldr	r3, [r7, #12]
 80101ea:	4413      	add	r3, r2
 80101ec:	881b      	ldrh	r3, [r3, #0]
 80101ee:	883a      	ldrh	r2, [r7, #0]
 80101f0:	429a      	cmp	r2, r3
 80101f2:	d001      	beq.n	80101f8 <backlog_retrieve+0x3c>
 80101f4:	2300      	movs	r3, #0
 80101f6:	e009      	b.n	801020c <backlog_retrieve+0x50>
  p += key;
 80101f8:	887a      	ldrh	r2, [r7, #2]
 80101fa:	4613      	mov	r3, r2
 80101fc:	005b      	lsls	r3, r3, #1
 80101fe:	4413      	add	r3, r2
 8010200:	005b      	lsls	r3, r3, #1
 8010202:	461a      	mov	r2, r3
 8010204:	68fb      	ldr	r3, [r7, #12]
 8010206:	4413      	add	r3, r2
 8010208:	60fb      	str	r3, [r7, #12]
  return p;
 801020a:	68fb      	ldr	r3, [r7, #12]
}
 801020c:	4618      	mov	r0, r3
 801020e:	3714      	adds	r7, #20
 8010210:	46bd      	mov	sp, r7
 8010212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010216:	4770      	bx	lr

08010218 <backlog_remove>:

static void backlog_remove(struct mg_connection *c, uint16_t key) {
 8010218:	b480      	push	{r7}
 801021a:	b085      	sub	sp, #20
 801021c:	af00      	add	r7, sp, #0
 801021e:	6078      	str	r0, [r7, #4]
 8010220:	460b      	mov	r3, r1
 8010222:	807b      	strh	r3, [r7, #2]
  struct mg_backlog *p = (struct mg_backlog *) c->data;
 8010224:	687b      	ldr	r3, [r7, #4]
 8010226:	3390      	adds	r3, #144	@ 0x90
 8010228:	60fb      	str	r3, [r7, #12]
  p[key].port = 0;
 801022a:	887a      	ldrh	r2, [r7, #2]
 801022c:	4613      	mov	r3, r2
 801022e:	005b      	lsls	r3, r3, #1
 8010230:	4413      	add	r3, r2
 8010232:	005b      	lsls	r3, r3, #1
 8010234:	461a      	mov	r2, r3
 8010236:	68fb      	ldr	r3, [r7, #12]
 8010238:	4413      	add	r3, r2
 801023a:	2200      	movs	r2, #0
 801023c:	801a      	strh	r2, [r3, #0]
}
 801023e:	bf00      	nop
 8010240:	3714      	adds	r7, #20
 8010242:	46bd      	mov	sp, r7
 8010244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010248:	4770      	bx	lr

0801024a <backlog_maintain>:

static void backlog_maintain(struct mg_connection *c) {
 801024a:	b480      	push	{r7}
 801024c:	b085      	sub	sp, #20
 801024e:	af00      	add	r7, sp, #0
 8010250:	6078      	str	r0, [r7, #4]
  struct mg_backlog *p = (struct mg_backlog *) c->data;
 8010252:	687b      	ldr	r3, [r7, #4]
 8010254:	3390      	adds	r3, #144	@ 0x90
 8010256:	60bb      	str	r3, [r7, #8]
  size_t i;  // dec age and remove those where it reaches 0
  for (i = 0; i < sizeof(c->data) / sizeof(*p); i++) {
 8010258:	2300      	movs	r3, #0
 801025a:	60fb      	str	r3, [r7, #12]
 801025c:	e03b      	b.n	80102d6 <backlog_maintain+0x8c>
    if (p[i].port == 0) continue;
 801025e:	68fa      	ldr	r2, [r7, #12]
 8010260:	4613      	mov	r3, r2
 8010262:	005b      	lsls	r3, r3, #1
 8010264:	4413      	add	r3, r2
 8010266:	005b      	lsls	r3, r3, #1
 8010268:	461a      	mov	r2, r3
 801026a:	68bb      	ldr	r3, [r7, #8]
 801026c:	4413      	add	r3, r2
 801026e:	881b      	ldrh	r3, [r3, #0]
 8010270:	2b00      	cmp	r3, #0
 8010272:	d02c      	beq.n	80102ce <backlog_maintain+0x84>
    if (p[i].age != 0) --p[i].age;
 8010274:	68fa      	ldr	r2, [r7, #12]
 8010276:	4613      	mov	r3, r2
 8010278:	005b      	lsls	r3, r3, #1
 801027a:	4413      	add	r3, r2
 801027c:	005b      	lsls	r3, r3, #1
 801027e:	461a      	mov	r2, r3
 8010280:	68bb      	ldr	r3, [r7, #8]
 8010282:	4413      	add	r3, r2
 8010284:	791b      	ldrb	r3, [r3, #4]
 8010286:	2b00      	cmp	r3, #0
 8010288:	d00b      	beq.n	80102a2 <backlog_maintain+0x58>
 801028a:	68fa      	ldr	r2, [r7, #12]
 801028c:	4613      	mov	r3, r2
 801028e:	005b      	lsls	r3, r3, #1
 8010290:	4413      	add	r3, r2
 8010292:	005b      	lsls	r3, r3, #1
 8010294:	461a      	mov	r2, r3
 8010296:	68bb      	ldr	r3, [r7, #8]
 8010298:	4413      	add	r3, r2
 801029a:	791a      	ldrb	r2, [r3, #4]
 801029c:	3a01      	subs	r2, #1
 801029e:	b2d2      	uxtb	r2, r2
 80102a0:	711a      	strb	r2, [r3, #4]
    if (p[i].age == 0) p[i].port = 0;
 80102a2:	68fa      	ldr	r2, [r7, #12]
 80102a4:	4613      	mov	r3, r2
 80102a6:	005b      	lsls	r3, r3, #1
 80102a8:	4413      	add	r3, r2
 80102aa:	005b      	lsls	r3, r3, #1
 80102ac:	461a      	mov	r2, r3
 80102ae:	68bb      	ldr	r3, [r7, #8]
 80102b0:	4413      	add	r3, r2
 80102b2:	791b      	ldrb	r3, [r3, #4]
 80102b4:	2b00      	cmp	r3, #0
 80102b6:	d10b      	bne.n	80102d0 <backlog_maintain+0x86>
 80102b8:	68fa      	ldr	r2, [r7, #12]
 80102ba:	4613      	mov	r3, r2
 80102bc:	005b      	lsls	r3, r3, #1
 80102be:	4413      	add	r3, r2
 80102c0:	005b      	lsls	r3, r3, #1
 80102c2:	461a      	mov	r2, r3
 80102c4:	68bb      	ldr	r3, [r7, #8]
 80102c6:	4413      	add	r3, r2
 80102c8:	2200      	movs	r2, #0
 80102ca:	801a      	strh	r2, [r3, #0]
 80102cc:	e000      	b.n	80102d0 <backlog_maintain+0x86>
    if (p[i].port == 0) continue;
 80102ce:	bf00      	nop
  for (i = 0; i < sizeof(c->data) / sizeof(*p); i++) {
 80102d0:	68fb      	ldr	r3, [r7, #12]
 80102d2:	3301      	adds	r3, #1
 80102d4:	60fb      	str	r3, [r7, #12]
 80102d6:	68fb      	ldr	r3, [r7, #12]
 80102d8:	2b04      	cmp	r3, #4
 80102da:	d9c0      	bls.n	801025e <backlog_maintain+0x14>
  }
}
 80102dc:	bf00      	nop
 80102de:	bf00      	nop
 80102e0:	3714      	adds	r7, #20
 80102e2:	46bd      	mov	sp, r7
 80102e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102e8:	4770      	bx	lr

080102ea <backlog_poll>:

static void backlog_poll(struct mg_mgr *mgr) {
 80102ea:	b580      	push	{r7, lr}
 80102ec:	b084      	sub	sp, #16
 80102ee:	af00      	add	r7, sp, #0
 80102f0:	6078      	str	r0, [r7, #4]
  struct mg_connection *c = NULL;
 80102f2:	2300      	movs	r3, #0
 80102f4:	60fb      	str	r3, [r7, #12]
  for (c = mgr->conns; c != NULL; c = c->next) {
 80102f6:	687b      	ldr	r3, [r7, #4]
 80102f8:	681b      	ldr	r3, [r3, #0]
 80102fa:	60fb      	str	r3, [r7, #12]
 80102fc:	e015      	b.n	801032a <backlog_poll+0x40>
    if (!c->is_udp && c->is_listening) backlog_maintain(c);
 80102fe:	68fb      	ldr	r3, [r7, #12]
 8010300:	f893 30b5 	ldrb.w	r3, [r3, #181]	@ 0xb5
 8010304:	f003 0301 	and.w	r3, r3, #1
 8010308:	b2db      	uxtb	r3, r3
 801030a:	2b00      	cmp	r3, #0
 801030c:	d10a      	bne.n	8010324 <backlog_poll+0x3a>
 801030e:	68fb      	ldr	r3, [r7, #12]
 8010310:	f893 30b4 	ldrb.w	r3, [r3, #180]	@ 0xb4
 8010314:	f003 0301 	and.w	r3, r3, #1
 8010318:	b2db      	uxtb	r3, r3
 801031a:	2b00      	cmp	r3, #0
 801031c:	d002      	beq.n	8010324 <backlog_poll+0x3a>
 801031e:	68f8      	ldr	r0, [r7, #12]
 8010320:	f7ff ff93 	bl	801024a <backlog_maintain>
  for (c = mgr->conns; c != NULL; c = c->next) {
 8010324:	68fb      	ldr	r3, [r7, #12]
 8010326:	681b      	ldr	r3, [r3, #0]
 8010328:	60fb      	str	r3, [r7, #12]
 801032a:	68fb      	ldr	r3, [r7, #12]
 801032c:	2b00      	cmp	r3, #0
 801032e:	d1e6      	bne.n	80102fe <backlog_poll+0x14>
  }
}
 8010330:	bf00      	nop
 8010332:	bf00      	nop
 8010334:	3710      	adds	r7, #16
 8010336:	46bd      	mov	sp, r7
 8010338:	bd80      	pop	{r7, pc}
	...

0801033c <handle_opt>:

// process options (MSS)
static void handle_opt(struct connstate *s, struct tcp *tcp) {
 801033c:	b580      	push	{r7, lr}
 801033e:	b086      	sub	sp, #24
 8010340:	af00      	add	r7, sp, #0
 8010342:	6078      	str	r0, [r7, #4]
 8010344:	6039      	str	r1, [r7, #0]
  uint8_t *opts = (uint8_t *) (tcp + 1);
 8010346:	683b      	ldr	r3, [r7, #0]
 8010348:	3314      	adds	r3, #20
 801034a:	617b      	str	r3, [r7, #20]
  int len = 4 * ((int) (tcp->off >> 4) - ((int) sizeof(*tcp) / 4));
 801034c:	683b      	ldr	r3, [r7, #0]
 801034e:	7b1b      	ldrb	r3, [r3, #12]
 8010350:	091b      	lsrs	r3, r3, #4
 8010352:	b2db      	uxtb	r3, r3
 8010354:	3b05      	subs	r3, #5
 8010356:	009b      	lsls	r3, r3, #2
 8010358:	613b      	str	r3, [r7, #16]
  s->dmss = 536;     // assume default, RFC-9293 3.7.1
 801035a:	687b      	ldr	r3, [r7, #4]
 801035c:	f44f 7206 	mov.w	r2, #536	@ 0x218
 8010360:	831a      	strh	r2, [r3, #24]
  while (len > 0) {  // RFC-9293 3.1 3.2
 8010362:	e038      	b.n	80103d6 <handle_opt+0x9a>
    uint8_t kind = opts[0], optlen = 1;
 8010364:	697b      	ldr	r3, [r7, #20]
 8010366:	781b      	ldrb	r3, [r3, #0]
 8010368:	73bb      	strb	r3, [r7, #14]
 801036a:	2301      	movs	r3, #1
 801036c:	73fb      	strb	r3, [r7, #15]
    if (kind != 1) {         // No-Operation
 801036e:	7bbb      	ldrb	r3, [r7, #14]
 8010370:	2b01      	cmp	r3, #1
 8010372:	d017      	beq.n	80103a4 <handle_opt+0x68>
      if (kind == 0) break;  // End of Option List
 8010374:	7bbb      	ldrb	r3, [r7, #14]
 8010376:	2b00      	cmp	r3, #0
 8010378:	d031      	beq.n	80103de <handle_opt+0xa2>
      optlen = opts[1];
 801037a:	697b      	ldr	r3, [r7, #20]
 801037c:	785b      	ldrb	r3, [r3, #1]
 801037e:	73fb      	strb	r3, [r7, #15]
      if (kind == 2 && optlen == 4)  // set received MSS
 8010380:	7bbb      	ldrb	r3, [r7, #14]
 8010382:	2b02      	cmp	r3, #2
 8010384:	d10e      	bne.n	80103a4 <handle_opt+0x68>
 8010386:	7bfb      	ldrb	r3, [r7, #15]
 8010388:	2b04      	cmp	r3, #4
 801038a:	d10b      	bne.n	80103a4 <handle_opt+0x68>
        s->dmss = (uint16_t) (((uint16_t) opts[2] << 8) + opts[3]);
 801038c:	697b      	ldr	r3, [r7, #20]
 801038e:	3302      	adds	r3, #2
 8010390:	781b      	ldrb	r3, [r3, #0]
 8010392:	021b      	lsls	r3, r3, #8
 8010394:	b29b      	uxth	r3, r3
 8010396:	697a      	ldr	r2, [r7, #20]
 8010398:	3203      	adds	r2, #3
 801039a:	7812      	ldrb	r2, [r2, #0]
 801039c:	4413      	add	r3, r2
 801039e:	b29a      	uxth	r2, r3
 80103a0:	687b      	ldr	r3, [r7, #4]
 80103a2:	831a      	strh	r2, [r3, #24]
    }
    MG_VERBOSE(("kind: %u, optlen: %u, len: %d\n", kind, optlen, len));
 80103a4:	4b10      	ldr	r3, [pc, #64]	@ (80103e8 <handle_opt+0xac>)
 80103a6:	681b      	ldr	r3, [r3, #0]
 80103a8:	2b03      	cmp	r3, #3
 80103aa:	dd0c      	ble.n	80103c6 <handle_opt+0x8a>
 80103ac:	4b0f      	ldr	r3, [pc, #60]	@ (80103ec <handle_opt+0xb0>)
 80103ae:	f241 32ae 	movw	r2, #5038	@ 0x13ae
 80103b2:	490f      	ldr	r1, [pc, #60]	@ (80103f0 <handle_opt+0xb4>)
 80103b4:	2004      	movs	r0, #4
 80103b6:	f7fc fef9 	bl	800d1ac <mg_log_prefix>
 80103ba:	7bb9      	ldrb	r1, [r7, #14]
 80103bc:	7bfa      	ldrb	r2, [r7, #15]
 80103be:	693b      	ldr	r3, [r7, #16]
 80103c0:	480c      	ldr	r0, [pc, #48]	@ (80103f4 <handle_opt+0xb8>)
 80103c2:	f7fc ff43 	bl	800d24c <mg_log>
    opts += optlen;
 80103c6:	7bfb      	ldrb	r3, [r7, #15]
 80103c8:	697a      	ldr	r2, [r7, #20]
 80103ca:	4413      	add	r3, r2
 80103cc:	617b      	str	r3, [r7, #20]
    len -= optlen;
 80103ce:	7bfb      	ldrb	r3, [r7, #15]
 80103d0:	693a      	ldr	r2, [r7, #16]
 80103d2:	1ad3      	subs	r3, r2, r3
 80103d4:	613b      	str	r3, [r7, #16]
  while (len > 0) {  // RFC-9293 3.1 3.2
 80103d6:	693b      	ldr	r3, [r7, #16]
 80103d8:	2b00      	cmp	r3, #0
 80103da:	dcc3      	bgt.n	8010364 <handle_opt+0x28>
  }
}
 80103dc:	e000      	b.n	80103e0 <handle_opt+0xa4>
      if (kind == 0) break;  // End of Option List
 80103de:	bf00      	nop
}
 80103e0:	bf00      	nop
 80103e2:	3718      	adds	r7, #24
 80103e4:	46bd      	mov	sp, r7
 80103e6:	bd80      	pop	{r7, pc}
 80103e8:	20000258 	.word	0x20000258
 80103ec:	080288ec 	.word	0x080288ec
 80103f0:	08025140 	.word	0x08025140
 80103f4:	080265cc 	.word	0x080265cc

080103f8 <rx_tcp>:

static void rx_tcp(struct mg_tcpip_if *ifp, struct pkt *pkt) {
 80103f8:	b590      	push	{r4, r7, lr}
 80103fa:	b097      	sub	sp, #92	@ 0x5c
 80103fc:	af00      	add	r7, sp, #0
 80103fe:	6078      	str	r0, [r7, #4]
 8010400:	6039      	str	r1, [r7, #0]
  struct mg_connection *c = getpeer(ifp->mgr, pkt, false);
 8010402:	687b      	ldr	r3, [r7, #4]
 8010404:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010406:	2200      	movs	r2, #0
 8010408:	6839      	ldr	r1, [r7, #0]
 801040a:	4618      	mov	r0, r3
 801040c:	f7fe f9fc 	bl	800e808 <getpeer>
 8010410:	6538      	str	r0, [r7, #80]	@ 0x50
  struct connstate *s = c == NULL ? NULL : (struct connstate *) (c + 1);
 8010412:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8010414:	2b00      	cmp	r3, #0
 8010416:	d002      	beq.n	801041e <rx_tcp+0x26>
 8010418:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801041a:	33b8      	adds	r3, #184	@ 0xb8
 801041c:	e000      	b.n	8010420 <rx_tcp+0x28>
 801041e:	2300      	movs	r3, #0
 8010420:	64fb      	str	r3, [r7, #76]	@ 0x4c
  // Order is VERY important; RFC-9293 3.5.2
  // - check clients (Group 1) and established connections (Group 3)
  if (c != NULL && c->is_connecting && pkt->tcp->flags == (TH_SYN | TH_ACK)) {
 8010422:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8010424:	2b00      	cmp	r3, #0
 8010426:	d059      	beq.n	80104dc <rx_tcp+0xe4>
 8010428:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801042a:	f893 30b4 	ldrb.w	r3, [r3, #180]	@ 0xb4
 801042e:	f003 0320 	and.w	r3, r3, #32
 8010432:	b2db      	uxtb	r3, r3
 8010434:	2b00      	cmp	r3, #0
 8010436:	d051      	beq.n	80104dc <rx_tcp+0xe4>
 8010438:	683b      	ldr	r3, [r7, #0]
 801043a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801043c:	7b5b      	ldrb	r3, [r3, #13]
 801043e:	2b12      	cmp	r3, #18
 8010440:	d14c      	bne.n	80104dc <rx_tcp+0xe4>
    // client got a server connection accept
    handle_opt(s, pkt->tcp);  // process options (MSS)
 8010442:	683b      	ldr	r3, [r7, #0]
 8010444:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010446:	4619      	mov	r1, r3
 8010448:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 801044a:	f7ff ff77 	bl	801033c <handle_opt>
    s->seq = mg_ntohl(pkt->tcp->ack), s->ack = mg_ntohl(pkt->tcp->seq) + 1;
 801044e:	683b      	ldr	r3, [r7, #0]
 8010450:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010452:	689b      	ldr	r3, [r3, #8]
 8010454:	4618      	mov	r0, r3
 8010456:	f010 fe7b 	bl	8021150 <mg_ntohl>
 801045a:	4602      	mov	r2, r0
 801045c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801045e:	601a      	str	r2, [r3, #0]
 8010460:	683b      	ldr	r3, [r7, #0]
 8010462:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010464:	685b      	ldr	r3, [r3, #4]
 8010466:	4618      	mov	r0, r3
 8010468:	f010 fe72 	bl	8021150 <mg_ntohl>
 801046c:	4603      	mov	r3, r0
 801046e:	1c5a      	adds	r2, r3, #1
 8010470:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010472:	605a      	str	r2, [r3, #4]
    tx_tcp_ctrlresp(ifp, pkt, TH_ACK, pkt->tcp->ack);
 8010474:	683b      	ldr	r3, [r7, #0]
 8010476:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010478:	689b      	ldr	r3, [r3, #8]
 801047a:	2210      	movs	r2, #16
 801047c:	6839      	ldr	r1, [r7, #0]
 801047e:	6878      	ldr	r0, [r7, #4]
 8010480:	f7ff f8ec 	bl	800f65c <tx_tcp_ctrlresp>
    c->is_connecting = 0;  // Client connected
 8010484:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8010486:	f892 30b4 	ldrb.w	r3, [r2, #180]	@ 0xb4
 801048a:	f023 0320 	bic.w	r3, r3, #32
 801048e:	f882 30b4 	strb.w	r3, [r2, #180]	@ 0xb4
    settmout(c, MIP_TTYPE_KEEPALIVE);
 8010492:	2100      	movs	r1, #0
 8010494:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 8010496:	f7fd fda5 	bl	800dfe4 <settmout>
    mg_call(c, MG_EV_CONNECT, NULL);  // Let user know
 801049a:	2200      	movs	r2, #0
 801049c:	2104      	movs	r1, #4
 801049e:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 80104a0:	f7f7 fcc6 	bl	8007e30 <mg_call>
    if (c->is_tls_hs) mg_tls_handshake(c);
 80104a4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80104a6:	f893 30b4 	ldrb.w	r3, [r3, #180]	@ 0xb4
 80104aa:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 80104ae:	b2db      	uxtb	r3, r3
 80104b0:	2b00      	cmp	r3, #0
 80104b2:	d002      	beq.n	80104ba <rx_tcp+0xc2>
 80104b4:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 80104b6:	f009 fe2b 	bl	801a110 <mg_tls_handshake>
    if (!c->is_tls_hs) c->is_tls = 0;  // user did not call mg_tls_init()
 80104ba:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80104bc:	f893 30b4 	ldrb.w	r3, [r3, #180]	@ 0xb4
 80104c0:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 80104c4:	b2db      	uxtb	r3, r3
 80104c6:	2b00      	cmp	r3, #0
 80104c8:	f040 8108 	bne.w	80106dc <rx_tcp+0x2e4>
 80104cc:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80104ce:	f892 30b4 	ldrb.w	r3, [r2, #180]	@ 0xb4
 80104d2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80104d6:	f882 30b4 	strb.w	r3, [r2, #180]	@ 0xb4
 80104da:	e0ff      	b.n	80106dc <rx_tcp+0x2e4>
  } else if (c != NULL && c->is_connecting && pkt->tcp->flags != TH_ACK) {
 80104dc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80104de:	2b00      	cmp	r3, #0
 80104e0:	d011      	beq.n	8010506 <rx_tcp+0x10e>
 80104e2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80104e4:	f893 30b4 	ldrb.w	r3, [r3, #180]	@ 0xb4
 80104e8:	f003 0320 	and.w	r3, r3, #32
 80104ec:	b2db      	uxtb	r3, r3
 80104ee:	2b00      	cmp	r3, #0
 80104f0:	d009      	beq.n	8010506 <rx_tcp+0x10e>
 80104f2:	683b      	ldr	r3, [r7, #0]
 80104f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80104f6:	7b5b      	ldrb	r3, [r3, #13]
 80104f8:	2b10      	cmp	r3, #16
 80104fa:	d004      	beq.n	8010506 <rx_tcp+0x10e>
    mg_error(c, "connection refused");
 80104fc:	4979      	ldr	r1, [pc, #484]	@ (80106e4 <rx_tcp+0x2ec>)
 80104fe:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 8010500:	f7f7 fcb8 	bl	8007e74 <mg_error>
 8010504:	e0ea      	b.n	80106dc <rx_tcp+0x2e4>
  } else if (c != NULL && pkt->tcp->flags & TH_RST) {
 8010506:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8010508:	2b00      	cmp	r3, #0
 801050a:	d00b      	beq.n	8010524 <rx_tcp+0x12c>
 801050c:	683b      	ldr	r3, [r7, #0]
 801050e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010510:	7b5b      	ldrb	r3, [r3, #13]
 8010512:	f003 0304 	and.w	r3, r3, #4
 8010516:	2b00      	cmp	r3, #0
 8010518:	d004      	beq.n	8010524 <rx_tcp+0x12c>
    // TODO(): validate RST is within window (and optional with proper ACK)
    mg_error(c, "peer RST");  // RFC-1122 4.2.2.13
 801051a:	4973      	ldr	r1, [pc, #460]	@ (80106e8 <rx_tcp+0x2f0>)
 801051c:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 801051e:	f7f7 fca9 	bl	8007e74 <mg_error>
 8010522:	e0db      	b.n	80106dc <rx_tcp+0x2e4>
  } else if (c != NULL) {
 8010524:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8010526:	2b00      	cmp	r3, #0
 8010528:	d011      	beq.n	801054e <rx_tcp+0x156>
    // process segment
    s->tmiss = 0;                         // Reset missed keep-alive counter
 801052a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801052c:	2200      	movs	r2, #0
 801052e:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    if (s->ttype == MIP_TTYPE_KEEPALIVE)  // Advance keep-alive timer
 8010532:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010534:	f893 3020 	ldrb.w	r3, [r3, #32]
 8010538:	2b00      	cmp	r3, #0
 801053a:	d103      	bne.n	8010544 <rx_tcp+0x14c>
      settmout(c,
 801053c:	2100      	movs	r1, #0
 801053e:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 8010540:	f7fd fd50 	bl	800dfe4 <settmout>
               MIP_TTYPE_KEEPALIVE);  // unless a former ACK timeout is pending
    read_conn(c, pkt);  // Override timer with ACK timeout if needed
 8010544:	6839      	ldr	r1, [r7, #0]
 8010546:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 8010548:	f7ff fb42 	bl	800fbd0 <read_conn>
 801054c:	e0c6      	b.n	80106dc <rx_tcp+0x2e4>
  } else
    // - we don't listen on that port; RFC-9293 3.5.2 Group 1
    // - check listening connections; RFC-9293 3.5.2 Group 2
    if ((c = getpeer(ifp->mgr, pkt, true)) == NULL) {
 801054e:	687b      	ldr	r3, [r7, #4]
 8010550:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010552:	2201      	movs	r2, #1
 8010554:	6839      	ldr	r1, [r7, #0]
 8010556:	4618      	mov	r0, r3
 8010558:	f7fe f956 	bl	800e808 <getpeer>
 801055c:	6538      	str	r0, [r7, #80]	@ 0x50
 801055e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8010560:	2b00      	cmp	r3, #0
 8010562:	d117      	bne.n	8010594 <rx_tcp+0x19c>
      // not listening on that port
      if (!(pkt->tcp->flags & TH_RST)) {
 8010564:	683b      	ldr	r3, [r7, #0]
 8010566:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010568:	7b5b      	ldrb	r3, [r3, #13]
 801056a:	f003 0304 	and.w	r3, r3, #4
 801056e:	2b00      	cmp	r3, #0
 8010570:	f040 80b4 	bne.w	80106dc <rx_tcp+0x2e4>
        tx_tcp_rst(ifp, pkt, pkt->tcp->flags & TH_ACK);
 8010574:	683b      	ldr	r3, [r7, #0]
 8010576:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010578:	7b5b      	ldrb	r3, [r3, #13]
 801057a:	f003 0310 	and.w	r3, r3, #16
 801057e:	2b00      	cmp	r3, #0
 8010580:	bf14      	ite	ne
 8010582:	2301      	movne	r3, #1
 8010584:	2300      	moveq	r3, #0
 8010586:	b2db      	uxtb	r3, r3
 8010588:	461a      	mov	r2, r3
 801058a:	6839      	ldr	r1, [r7, #0]
 801058c:	6878      	ldr	r0, [r7, #4]
 801058e:	f7ff f8aa 	bl	800f6e6 <tx_tcp_rst>
 8010592:	e0a3      	b.n	80106dc <rx_tcp+0x2e4>
      }  // else silently discard
    } else if (pkt->tcp->flags == TH_SYN) {
 8010594:	683b      	ldr	r3, [r7, #0]
 8010596:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010598:	7b5b      	ldrb	r3, [r3, #13]
 801059a:	2b02      	cmp	r3, #2
 801059c:	d132      	bne.n	8010604 <rx_tcp+0x20c>
      // listener receives a connection request
      struct connstate cs;  // At this point, s = NULL, there is no connection
      int key;
      uint32_t isn;
      if (pkt->tcp->sport != 0) {
 801059e:	683b      	ldr	r3, [r7, #0]
 80105a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80105a2:	881b      	ldrh	r3, [r3, #0]
 80105a4:	b29b      	uxth	r3, r3
 80105a6:	2b00      	cmp	r3, #0
 80105a8:	f000 8098 	beq.w	80106dc <rx_tcp+0x2e4>
        handle_opt(&cs, pkt->tcp);  // process options (MSS)
 80105ac:	683b      	ldr	r3, [r7, #0]
 80105ae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80105b0:	f107 0308 	add.w	r3, r7, #8
 80105b4:	4611      	mov	r1, r2
 80105b6:	4618      	mov	r0, r3
 80105b8:	f7ff fec0 	bl	801033c <handle_opt>
        key = backlog_insert(c, pkt->tcp->sport,
 80105bc:	683b      	ldr	r3, [r7, #0]
 80105be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80105c0:	881b      	ldrh	r3, [r3, #0]
 80105c2:	b29b      	uxth	r3, r3
 80105c4:	8c3a      	ldrh	r2, [r7, #32]
 80105c6:	4619      	mov	r1, r3
 80105c8:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 80105ca:	f7ff fdaf 	bl	801012c <backlog_insert>
 80105ce:	6478      	str	r0, [r7, #68]	@ 0x44
                             cs.dmss);  // backlog options (MSS)
        if (key < 0) return;  // no room in backlog, discard SYN, client retries
 80105d0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80105d2:	2b00      	cmp	r3, #0
 80105d4:	f2c0 8081 	blt.w	80106da <rx_tcp+0x2e2>
        // Use peer's src port and bl key as ISN, to later identify the
        // handshake
        isn = (mg_htonl(((uint32_t) key << 16) | mg_ntohs(pkt->tcp->sport)));
 80105d8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80105da:	041c      	lsls	r4, r3, #16
 80105dc:	683b      	ldr	r3, [r7, #0]
 80105de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80105e0:	881b      	ldrh	r3, [r3, #0]
 80105e2:	b29b      	uxth	r3, r3
 80105e4:	4618      	mov	r0, r3
 80105e6:	f010 fd9c 	bl	8021122 <mg_ntohs>
 80105ea:	4603      	mov	r3, r0
 80105ec:	4323      	orrs	r3, r4
 80105ee:	4618      	mov	r0, r3
 80105f0:	f010 fdae 	bl	8021150 <mg_ntohl>
 80105f4:	6438      	str	r0, [r7, #64]	@ 0x40
        tx_tcp_ctrlresp(ifp, pkt, TH_SYN | TH_ACK, isn);
 80105f6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80105f8:	2212      	movs	r2, #18
 80105fa:	6839      	ldr	r1, [r7, #0]
 80105fc:	6878      	ldr	r0, [r7, #4]
 80105fe:	f7ff f82d 	bl	800f65c <tx_tcp_ctrlresp>
 8010602:	e06b      	b.n	80106dc <rx_tcp+0x2e4>
      }  // what should we do when port=0 ? Linux takes port 0 as any other
         // port
    } else if (pkt->tcp->flags == TH_ACK) {
 8010604:	683b      	ldr	r3, [r7, #0]
 8010606:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010608:	7b5b      	ldrb	r3, [r3, #13]
 801060a:	2b10      	cmp	r3, #16
 801060c:	d144      	bne.n	8010698 <rx_tcp+0x2a0>
      // listener receives an ACK
      struct mg_backlog *b = NULL;
 801060e:	2300      	movs	r3, #0
 8010610:	657b      	str	r3, [r7, #84]	@ 0x54
      if ((uint16_t) (mg_htonl(pkt->tcp->ack) - 1) ==
 8010612:	683b      	ldr	r3, [r7, #0]
 8010614:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010616:	689b      	ldr	r3, [r3, #8]
 8010618:	4618      	mov	r0, r3
 801061a:	f010 fd99 	bl	8021150 <mg_ntohl>
 801061e:	4603      	mov	r3, r0
 8010620:	b29b      	uxth	r3, r3
 8010622:	3b01      	subs	r3, #1
 8010624:	b29c      	uxth	r4, r3
          mg_htons(pkt->tcp->sport)) {
 8010626:	683b      	ldr	r3, [r7, #0]
 8010628:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801062a:	881b      	ldrh	r3, [r3, #0]
 801062c:	b29b      	uxth	r3, r3
 801062e:	4618      	mov	r0, r3
 8010630:	f010 fd77 	bl	8021122 <mg_ntohs>
 8010634:	4603      	mov	r3, r0
      if ((uint16_t) (mg_htonl(pkt->tcp->ack) - 1) ==
 8010636:	429c      	cmp	r4, r3
 8010638:	d125      	bne.n	8010686 <rx_tcp+0x28e>
        uint16_t key = (uint16_t) ((mg_htonl(pkt->tcp->ack) - 1) >> 16);
 801063a:	683b      	ldr	r3, [r7, #0]
 801063c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801063e:	689b      	ldr	r3, [r3, #8]
 8010640:	4618      	mov	r0, r3
 8010642:	f010 fd85 	bl	8021150 <mg_ntohl>
 8010646:	4603      	mov	r3, r0
 8010648:	3b01      	subs	r3, #1
 801064a:	0c1b      	lsrs	r3, r3, #16
 801064c:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
        b = backlog_retrieve(c, key, pkt->tcp->sport);
 8010650:	683b      	ldr	r3, [r7, #0]
 8010652:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010654:	881b      	ldrh	r3, [r3, #0]
 8010656:	b29a      	uxth	r2, r3
 8010658:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 801065c:	4619      	mov	r1, r3
 801065e:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 8010660:	f7ff fdac 	bl	80101bc <backlog_retrieve>
 8010664:	6578      	str	r0, [r7, #84]	@ 0x54
        if (b != NULL) {                // ACK is a response to a SYN+ACK
 8010666:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8010668:	2b00      	cmp	r3, #0
 801066a:	d00c      	beq.n	8010686 <rx_tcp+0x28e>
          accept_conn(c, pkt, b->mss);  // pass options
 801066c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801066e:	885b      	ldrh	r3, [r3, #2]
 8010670:	461a      	mov	r2, r3
 8010672:	6839      	ldr	r1, [r7, #0]
 8010674:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 8010676:	f7ff f855 	bl	800f724 <accept_conn>
          backlog_remove(c, key);
 801067a:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 801067e:	4619      	mov	r1, r3
 8010680:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 8010682:	f7ff fdc9 	bl	8010218 <backlog_remove>
        }  // else not an actual match, reset
      }
      if (b == NULL) tx_tcp_rst(ifp, pkt, true);
 8010686:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8010688:	2b00      	cmp	r3, #0
 801068a:	d127      	bne.n	80106dc <rx_tcp+0x2e4>
 801068c:	2201      	movs	r2, #1
 801068e:	6839      	ldr	r1, [r7, #0]
 8010690:	6878      	ldr	r0, [r7, #4]
 8010692:	f7ff f828 	bl	800f6e6 <tx_tcp_rst>
 8010696:	e021      	b.n	80106dc <rx_tcp+0x2e4>
    } else if (pkt->tcp->flags & TH_RST) {
 8010698:	683b      	ldr	r3, [r7, #0]
 801069a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801069c:	7b5b      	ldrb	r3, [r3, #13]
 801069e:	f003 0304 	and.w	r3, r3, #4
 80106a2:	2b00      	cmp	r3, #0
 80106a4:	d11a      	bne.n	80106dc <rx_tcp+0x2e4>
      // silently discard
    } else if (pkt->tcp->flags & TH_ACK) {  // ACK + something else != RST
 80106a6:	683b      	ldr	r3, [r7, #0]
 80106a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80106aa:	7b5b      	ldrb	r3, [r3, #13]
 80106ac:	f003 0310 	and.w	r3, r3, #16
 80106b0:	2b00      	cmp	r3, #0
 80106b2:	d005      	beq.n	80106c0 <rx_tcp+0x2c8>
      tx_tcp_rst(ifp, pkt, true);
 80106b4:	2201      	movs	r2, #1
 80106b6:	6839      	ldr	r1, [r7, #0]
 80106b8:	6878      	ldr	r0, [r7, #4]
 80106ba:	f7ff f814 	bl	800f6e6 <tx_tcp_rst>
 80106be:	e00d      	b.n	80106dc <rx_tcp+0x2e4>
    } else if (pkt->tcp->flags & TH_SYN) {  // SYN + something else != ACK
 80106c0:	683b      	ldr	r3, [r7, #0]
 80106c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80106c4:	7b5b      	ldrb	r3, [r3, #13]
 80106c6:	f003 0302 	and.w	r3, r3, #2
 80106ca:	2b00      	cmp	r3, #0
 80106cc:	d006      	beq.n	80106dc <rx_tcp+0x2e4>
      tx_tcp_rst(ifp, pkt, false);
 80106ce:	2200      	movs	r2, #0
 80106d0:	6839      	ldr	r1, [r7, #0]
 80106d2:	6878      	ldr	r0, [r7, #4]
 80106d4:	f7ff f807 	bl	800f6e6 <tx_tcp_rst>
 80106d8:	e000      	b.n	80106dc <rx_tcp+0x2e4>
        if (key < 0) return;  // no room in backlog, discard SYN, client retries
 80106da:	bf00      	nop
    }  // else  silently discard
}
 80106dc:	375c      	adds	r7, #92	@ 0x5c
 80106de:	46bd      	mov	sp, r7
 80106e0:	bd90      	pop	{r4, r7, pc}
 80106e2:	bf00      	nop
 80106e4:	080265ec 	.word	0x080265ec
 80106e8:	08026600 	.word	0x08026600

080106ec <rx_ip>:

static void rx_ip(struct mg_tcpip_if *ifp, struct pkt *pkt) {
 80106ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80106ee:	b08b      	sub	sp, #44	@ 0x2c
 80106f0:	af04      	add	r7, sp, #16
 80106f2:	6078      	str	r0, [r7, #4]
 80106f4:	6039      	str	r1, [r7, #0]
  uint8_t ihl;
  uint16_t frag, len;
  if (pkt->pay.len < sizeof(*pkt->ip)) return;  // Truncated
 80106f6:	683b      	ldr	r3, [r7, #0]
 80106f8:	68db      	ldr	r3, [r3, #12]
 80106fa:	2b13      	cmp	r3, #19
 80106fc:	f240 81be 	bls.w	8010a7c <rx_ip+0x390>
  if ((pkt->ip->ver >> 4) != 4) return;         // Not IP
 8010700:	683b      	ldr	r3, [r7, #0]
 8010702:	69db      	ldr	r3, [r3, #28]
 8010704:	781b      	ldrb	r3, [r3, #0]
 8010706:	091b      	lsrs	r3, r3, #4
 8010708:	b2db      	uxtb	r3, r3
 801070a:	2b04      	cmp	r3, #4
 801070c:	f040 81b8 	bne.w	8010a80 <rx_ip+0x394>
  ihl = pkt->ip->ver & 0x0F;
 8010710:	683b      	ldr	r3, [r7, #0]
 8010712:	69db      	ldr	r3, [r3, #28]
 8010714:	781b      	ldrb	r3, [r3, #0]
 8010716:	f003 030f 	and.w	r3, r3, #15
 801071a:	75fb      	strb	r3, [r7, #23]
  if (ihl < 5) return;                     // bad IHL
 801071c:	7dfb      	ldrb	r3, [r7, #23]
 801071e:	2b04      	cmp	r3, #4
 8010720:	f240 81b0 	bls.w	8010a84 <rx_ip+0x398>
  if (pkt->pay.len < (uint16_t)(ihl * 4)) return;    // Truncated / malformed
 8010724:	683b      	ldr	r3, [r7, #0]
 8010726:	68db      	ldr	r3, [r3, #12]
 8010728:	7dfa      	ldrb	r2, [r7, #23]
 801072a:	b292      	uxth	r2, r2
 801072c:	0092      	lsls	r2, r2, #2
 801072e:	b292      	uxth	r2, r2
 8010730:	4293      	cmp	r3, r2
 8010732:	f0c0 81a9 	bcc.w	8010a88 <rx_ip+0x39c>
  // There can be link padding, take length from IP header
  len = mg_ntohs(pkt->ip->len); // IP datagram length
 8010736:	683b      	ldr	r3, [r7, #0]
 8010738:	69db      	ldr	r3, [r3, #28]
 801073a:	885b      	ldrh	r3, [r3, #2]
 801073c:	b29b      	uxth	r3, r3
 801073e:	4618      	mov	r0, r3
 8010740:	f010 fcef 	bl	8021122 <mg_ntohs>
 8010744:	4603      	mov	r3, r0
 8010746:	82bb      	strh	r3, [r7, #20]
  if (len < (ihl * 4) || len > pkt->pay.len) return; // malformed
 8010748:	8aba      	ldrh	r2, [r7, #20]
 801074a:	7dfb      	ldrb	r3, [r7, #23]
 801074c:	009b      	lsls	r3, r3, #2
 801074e:	429a      	cmp	r2, r3
 8010750:	f2c0 819c 	blt.w	8010a8c <rx_ip+0x3a0>
 8010754:	8aba      	ldrh	r2, [r7, #20]
 8010756:	683b      	ldr	r3, [r7, #0]
 8010758:	68db      	ldr	r3, [r3, #12]
 801075a:	429a      	cmp	r2, r3
 801075c:	f200 8196 	bhi.w	8010a8c <rx_ip+0x3a0>
  pkt->pay.len = len; // strip padding
 8010760:	8aba      	ldrh	r2, [r7, #20]
 8010762:	683b      	ldr	r3, [r7, #0]
 8010764:	60da      	str	r2, [r3, #12]
  mkpay(pkt, (uint32_t *) pkt->ip + ihl);  // account for opts
 8010766:	683b      	ldr	r3, [r7, #0]
 8010768:	69da      	ldr	r2, [r3, #28]
 801076a:	7dfb      	ldrb	r3, [r7, #23]
 801076c:	009b      	lsls	r3, r3, #2
 801076e:	4413      	add	r3, r2
 8010770:	4619      	mov	r1, r3
 8010772:	6838      	ldr	r0, [r7, #0]
 8010774:	f7fd fbbe 	bl	800def4 <mkpay>
  frag = mg_ntohs(pkt->ip->frag);
 8010778:	683b      	ldr	r3, [r7, #0]
 801077a:	69db      	ldr	r3, [r3, #28]
 801077c:	88db      	ldrh	r3, [r3, #6]
 801077e:	b29b      	uxth	r3, r3
 8010780:	4618      	mov	r0, r3
 8010782:	f010 fcce 	bl	8021122 <mg_ntohs>
 8010786:	4603      	mov	r3, r0
 8010788:	827b      	strh	r3, [r7, #18]
  if (frag & IP_MORE_FRAGS_MSK || frag & IP_FRAG_OFFSET_MSK) {
 801078a:	8a7b      	ldrh	r3, [r7, #18]
 801078c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8010790:	2b00      	cmp	r3, #0
 8010792:	d104      	bne.n	801079e <rx_ip+0xb2>
 8010794:	8a7b      	ldrh	r3, [r7, #18]
 8010796:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801079a:	2b00      	cmp	r3, #0
 801079c:	d022      	beq.n	80107e4 <rx_ip+0xf8>
    struct mg_connection *c;
    if (pkt->ip->proto == 17) pkt->udp = (struct udp *) (pkt->pay.buf);
 801079e:	683b      	ldr	r3, [r7, #0]
 80107a0:	69db      	ldr	r3, [r3, #28]
 80107a2:	7a5b      	ldrb	r3, [r3, #9]
 80107a4:	2b11      	cmp	r3, #17
 80107a6:	d103      	bne.n	80107b0 <rx_ip+0xc4>
 80107a8:	683b      	ldr	r3, [r7, #0]
 80107aa:	689a      	ldr	r2, [r3, #8]
 80107ac:	683b      	ldr	r3, [r7, #0]
 80107ae:	631a      	str	r2, [r3, #48]	@ 0x30
    if (pkt->ip->proto == 6) pkt->tcp = (struct tcp *) (pkt->pay.buf);
 80107b0:	683b      	ldr	r3, [r7, #0]
 80107b2:	69db      	ldr	r3, [r3, #28]
 80107b4:	7a5b      	ldrb	r3, [r3, #9]
 80107b6:	2b06      	cmp	r3, #6
 80107b8:	d103      	bne.n	80107c2 <rx_ip+0xd6>
 80107ba:	683b      	ldr	r3, [r7, #0]
 80107bc:	689a      	ldr	r2, [r3, #8]
 80107be:	683b      	ldr	r3, [r7, #0]
 80107c0:	62da      	str	r2, [r3, #44]	@ 0x2c
    c = getpeer(ifp->mgr, pkt, false);
 80107c2:	687b      	ldr	r3, [r7, #4]
 80107c4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80107c6:	2200      	movs	r2, #0
 80107c8:	6839      	ldr	r1, [r7, #0]
 80107ca:	4618      	mov	r0, r3
 80107cc:	f7fe f81c 	bl	800e808 <getpeer>
 80107d0:	60f8      	str	r0, [r7, #12]
    if (c) mg_error(c, "Received fragmented packet");
 80107d2:	68fb      	ldr	r3, [r7, #12]
 80107d4:	2b00      	cmp	r3, #0
 80107d6:	f000 815b 	beq.w	8010a90 <rx_ip+0x3a4>
 80107da:	4990      	ldr	r1, [pc, #576]	@ (8010a1c <rx_ip+0x330>)
 80107dc:	68f8      	ldr	r0, [r7, #12]
 80107de:	f7f7 fb49 	bl	8007e74 <mg_error>
  if (frag & IP_MORE_FRAGS_MSK || frag & IP_FRAG_OFFSET_MSK) {
 80107e2:	e155      	b.n	8010a90 <rx_ip+0x3a4>
  } else if (pkt->ip->proto == 1) {
 80107e4:	683b      	ldr	r3, [r7, #0]
 80107e6:	69db      	ldr	r3, [r3, #28]
 80107e8:	7a5b      	ldrb	r3, [r3, #9]
 80107ea:	2b01      	cmp	r3, #1
 80107ec:	d114      	bne.n	8010818 <rx_ip+0x12c>
    pkt->icmp = (struct icmp *) (pkt->pay.buf);
 80107ee:	683b      	ldr	r3, [r7, #0]
 80107f0:	689a      	ldr	r2, [r3, #8]
 80107f2:	683b      	ldr	r3, [r7, #0]
 80107f4:	625a      	str	r2, [r3, #36]	@ 0x24
    if (pkt->pay.len < sizeof(*pkt->icmp)) return;
 80107f6:	683b      	ldr	r3, [r7, #0]
 80107f8:	68db      	ldr	r3, [r3, #12]
 80107fa:	2b03      	cmp	r3, #3
 80107fc:	f240 814a 	bls.w	8010a94 <rx_ip+0x3a8>
    mkpay(pkt, pkt->icmp + 1);
 8010800:	683b      	ldr	r3, [r7, #0]
 8010802:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010804:	3304      	adds	r3, #4
 8010806:	4619      	mov	r1, r3
 8010808:	6838      	ldr	r0, [r7, #0]
 801080a:	f7fd fb73 	bl	800def4 <mkpay>
    rx_icmp(ifp, pkt);
 801080e:	6839      	ldr	r1, [r7, #0]
 8010810:	6878      	ldr	r0, [r7, #4]
 8010812:	f7fe f981 	bl	800eb18 <rx_icmp>
 8010816:	e146      	b.n	8010aa6 <rx_ip+0x3ba>
  } else if (pkt->ip->proto == 17) {
 8010818:	683b      	ldr	r3, [r7, #0]
 801081a:	69db      	ldr	r3, [r3, #28]
 801081c:	7a5b      	ldrb	r3, [r3, #9]
 801081e:	2b11      	cmp	r3, #17
 8010820:	f040 809f 	bne.w	8010962 <rx_ip+0x276>
    pkt->udp = (struct udp *) (pkt->pay.buf);
 8010824:	683b      	ldr	r3, [r7, #0]
 8010826:	689a      	ldr	r2, [r3, #8]
 8010828:	683b      	ldr	r3, [r7, #0]
 801082a:	631a      	str	r2, [r3, #48]	@ 0x30
    if (pkt->pay.len < sizeof(*pkt->udp)) return; // truncated
 801082c:	683b      	ldr	r3, [r7, #0]
 801082e:	68db      	ldr	r3, [r3, #12]
 8010830:	2b07      	cmp	r3, #7
 8010832:	f240 8131 	bls.w	8010a98 <rx_ip+0x3ac>
    // Take length from UDP header
    len = mg_ntohs(pkt->udp->len); // UDP datagram length
 8010836:	683b      	ldr	r3, [r7, #0]
 8010838:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801083a:	889b      	ldrh	r3, [r3, #4]
 801083c:	b29b      	uxth	r3, r3
 801083e:	4618      	mov	r0, r3
 8010840:	f010 fc6f 	bl	8021122 <mg_ntohs>
 8010844:	4603      	mov	r3, r0
 8010846:	82bb      	strh	r3, [r7, #20]
    if (len < sizeof(*pkt->udp) || len > pkt->pay.len) return; // malformed
 8010848:	8abb      	ldrh	r3, [r7, #20]
 801084a:	2b07      	cmp	r3, #7
 801084c:	f240 8126 	bls.w	8010a9c <rx_ip+0x3b0>
 8010850:	8aba      	ldrh	r2, [r7, #20]
 8010852:	683b      	ldr	r3, [r7, #0]
 8010854:	68db      	ldr	r3, [r3, #12]
 8010856:	429a      	cmp	r2, r3
 8010858:	f200 8120 	bhi.w	8010a9c <rx_ip+0x3b0>
    pkt->pay.len = len; // strip excess data
 801085c:	8aba      	ldrh	r2, [r7, #20]
 801085e:	683b      	ldr	r3, [r7, #0]
 8010860:	60da      	str	r2, [r3, #12]
    mkpay(pkt, pkt->udp + 1);
 8010862:	683b      	ldr	r3, [r7, #0]
 8010864:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010866:	3308      	adds	r3, #8
 8010868:	4619      	mov	r1, r3
 801086a:	6838      	ldr	r0, [r7, #0]
 801086c:	f7fd fb42 	bl	800def4 <mkpay>
    MG_VERBOSE(("UDP %M:%hu -> %M:%hu len %u", mg_print_ip4, &pkt->ip->src,
 8010870:	4b6b      	ldr	r3, [pc, #428]	@ (8010a20 <rx_ip+0x334>)
 8010872:	681b      	ldr	r3, [r3, #0]
 8010874:	2b03      	cmp	r3, #3
 8010876:	dd2d      	ble.n	80108d4 <rx_ip+0x1e8>
 8010878:	4b6a      	ldr	r3, [pc, #424]	@ (8010a24 <rx_ip+0x338>)
 801087a:	f241 421e 	movw	r2, #5150	@ 0x141e
 801087e:	496a      	ldr	r1, [pc, #424]	@ (8010a28 <rx_ip+0x33c>)
 8010880:	2004      	movs	r0, #4
 8010882:	f7fc fc93 	bl	800d1ac <mg_log_prefix>
 8010886:	683b      	ldr	r3, [r7, #0]
 8010888:	69db      	ldr	r3, [r3, #28]
 801088a:	f103 050c 	add.w	r5, r3, #12
 801088e:	683b      	ldr	r3, [r7, #0]
 8010890:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010892:	881b      	ldrh	r3, [r3, #0]
 8010894:	b29b      	uxth	r3, r3
 8010896:	4618      	mov	r0, r3
 8010898:	f010 fc43 	bl	8021122 <mg_ntohs>
 801089c:	4603      	mov	r3, r0
 801089e:	461e      	mov	r6, r3
 80108a0:	683b      	ldr	r3, [r7, #0]
 80108a2:	69db      	ldr	r3, [r3, #28]
 80108a4:	f103 0410 	add.w	r4, r3, #16
 80108a8:	683b      	ldr	r3, [r7, #0]
 80108aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80108ac:	885b      	ldrh	r3, [r3, #2]
 80108ae:	b29b      	uxth	r3, r3
 80108b0:	4618      	mov	r0, r3
 80108b2:	f010 fc36 	bl	8021122 <mg_ntohs>
 80108b6:	4603      	mov	r3, r0
 80108b8:	461a      	mov	r2, r3
 80108ba:	683b      	ldr	r3, [r7, #0]
 80108bc:	68db      	ldr	r3, [r3, #12]
 80108be:	9303      	str	r3, [sp, #12]
 80108c0:	9202      	str	r2, [sp, #8]
 80108c2:	9401      	str	r4, [sp, #4]
 80108c4:	4b59      	ldr	r3, [pc, #356]	@ (8010a2c <rx_ip+0x340>)
 80108c6:	9300      	str	r3, [sp, #0]
 80108c8:	4633      	mov	r3, r6
 80108ca:	462a      	mov	r2, r5
 80108cc:	4957      	ldr	r1, [pc, #348]	@ (8010a2c <rx_ip+0x340>)
 80108ce:	4858      	ldr	r0, [pc, #352]	@ (8010a30 <rx_ip+0x344>)
 80108d0:	f7fc fcbc 	bl	800d24c <mg_log>
                mg_ntohs(pkt->udp->sport), mg_print_ip4, &pkt->ip->dst,
                mg_ntohs(pkt->udp->dport), (int) pkt->pay.len));
    if (ifp->enable_dhcp_client && pkt->udp->dport == mg_htons(68)) {
 80108d4:	687b      	ldr	r3, [r7, #4]
 80108d6:	7f1b      	ldrb	r3, [r3, #28]
 80108d8:	2b00      	cmp	r3, #0
 80108da:	d01c      	beq.n	8010916 <rx_ip+0x22a>
 80108dc:	683b      	ldr	r3, [r7, #0]
 80108de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80108e0:	885b      	ldrh	r3, [r3, #2]
 80108e2:	b29c      	uxth	r4, r3
 80108e4:	2044      	movs	r0, #68	@ 0x44
 80108e6:	f010 fc1c 	bl	8021122 <mg_ntohs>
 80108ea:	4603      	mov	r3, r0
 80108ec:	429c      	cmp	r4, r3
 80108ee:	d112      	bne.n	8010916 <rx_ip+0x22a>
      pkt->dhcp = (struct dhcp *) (pkt->udp + 1);
 80108f0:	683b      	ldr	r3, [r7, #0]
 80108f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80108f4:	f103 0208 	add.w	r2, r3, #8
 80108f8:	683b      	ldr	r3, [r7, #0]
 80108fa:	635a      	str	r2, [r3, #52]	@ 0x34
      mkpay(pkt, pkt->dhcp + 1);
 80108fc:	683b      	ldr	r3, [r7, #0]
 80108fe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010900:	f503 7390 	add.w	r3, r3, #288	@ 0x120
 8010904:	4619      	mov	r1, r3
 8010906:	6838      	ldr	r0, [r7, #0]
 8010908:	f7fd faf4 	bl	800def4 <mkpay>
      rx_dhcp_client(ifp, pkt);
 801090c:	6839      	ldr	r1, [r7, #0]
 801090e:	6878      	ldr	r0, [r7, #4]
 8010910:	f7fe f95e 	bl	800ebd0 <rx_dhcp_client>
 8010914:	e0c7      	b.n	8010aa6 <rx_ip+0x3ba>
    } else if (ifp->enable_dhcp_server && pkt->udp->dport == mg_htons(67)) {
 8010916:	687b      	ldr	r3, [r7, #4]
 8010918:	7f5b      	ldrb	r3, [r3, #29]
 801091a:	2b00      	cmp	r3, #0
 801091c:	d01c      	beq.n	8010958 <rx_ip+0x26c>
 801091e:	683b      	ldr	r3, [r7, #0]
 8010920:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010922:	885b      	ldrh	r3, [r3, #2]
 8010924:	b29c      	uxth	r4, r3
 8010926:	2043      	movs	r0, #67	@ 0x43
 8010928:	f010 fbfb 	bl	8021122 <mg_ntohs>
 801092c:	4603      	mov	r3, r0
 801092e:	429c      	cmp	r4, r3
 8010930:	d112      	bne.n	8010958 <rx_ip+0x26c>
      pkt->dhcp = (struct dhcp *) (pkt->udp + 1);
 8010932:	683b      	ldr	r3, [r7, #0]
 8010934:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010936:	f103 0208 	add.w	r2, r3, #8
 801093a:	683b      	ldr	r3, [r7, #0]
 801093c:	635a      	str	r2, [r3, #52]	@ 0x34
      mkpay(pkt, pkt->dhcp + 1);
 801093e:	683b      	ldr	r3, [r7, #0]
 8010940:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010942:	f503 7390 	add.w	r3, r3, #288	@ 0x120
 8010946:	4619      	mov	r1, r3
 8010948:	6838      	ldr	r0, [r7, #0]
 801094a:	f7fd fad3 	bl	800def4 <mkpay>
      rx_dhcp_server(ifp, pkt);
 801094e:	6839      	ldr	r1, [r7, #0]
 8010950:	6878      	ldr	r0, [r7, #4]
 8010952:	f7fe fb2d 	bl	800efb0 <rx_dhcp_server>
 8010956:	e0a6      	b.n	8010aa6 <rx_ip+0x3ba>
    } else if (!rx_udp(ifp, pkt)) {
 8010958:	6839      	ldr	r1, [r7, #0]
 801095a:	6878      	ldr	r0, [r7, #4]
 801095c:	f7fe fd16 	bl	800f38c <rx_udp>
 8010960:	e0a1      	b.n	8010aa6 <rx_ip+0x3ba>
      // Should send ICMP Destination Unreachable for unicasts, but keep silent
    }
  } else if (pkt->ip->proto == 6) {
 8010962:	683b      	ldr	r3, [r7, #0]
 8010964:	69db      	ldr	r3, [r3, #28]
 8010966:	7a5b      	ldrb	r3, [r3, #9]
 8010968:	2b06      	cmp	r3, #6
 801096a:	d165      	bne.n	8010a38 <rx_ip+0x34c>
    uint8_t off;
    pkt->tcp = (struct tcp *) (pkt->pay.buf);
 801096c:	683b      	ldr	r3, [r7, #0]
 801096e:	689a      	ldr	r2, [r3, #8]
 8010970:	683b      	ldr	r3, [r7, #0]
 8010972:	62da      	str	r2, [r3, #44]	@ 0x2c
    if (pkt->pay.len < sizeof(*pkt->tcp)) return;
 8010974:	683b      	ldr	r3, [r7, #0]
 8010976:	68db      	ldr	r3, [r3, #12]
 8010978:	2b13      	cmp	r3, #19
 801097a:	f240 8091 	bls.w	8010aa0 <rx_ip+0x3b4>
    off = pkt->tcp->off >> 4;  // account for opts
 801097e:	683b      	ldr	r3, [r7, #0]
 8010980:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010982:	7b1b      	ldrb	r3, [r3, #12]
 8010984:	091b      	lsrs	r3, r3, #4
 8010986:	747b      	strb	r3, [r7, #17]
    if (pkt->pay.len < (uint16_t)(4 * off)) return;
 8010988:	683b      	ldr	r3, [r7, #0]
 801098a:	68db      	ldr	r3, [r3, #12]
 801098c:	7c7a      	ldrb	r2, [r7, #17]
 801098e:	b292      	uxth	r2, r2
 8010990:	0092      	lsls	r2, r2, #2
 8010992:	b292      	uxth	r2, r2
 8010994:	4293      	cmp	r3, r2
 8010996:	f0c0 8085 	bcc.w	8010aa4 <rx_ip+0x3b8>
    mkpay(pkt, (uint32_t *) pkt->tcp + off);
 801099a:	683b      	ldr	r3, [r7, #0]
 801099c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801099e:	7c7b      	ldrb	r3, [r7, #17]
 80109a0:	009b      	lsls	r3, r3, #2
 80109a2:	4413      	add	r3, r2
 80109a4:	4619      	mov	r1, r3
 80109a6:	6838      	ldr	r0, [r7, #0]
 80109a8:	f7fd faa4 	bl	800def4 <mkpay>
    MG_VERBOSE(("TCP %M:%hu -> %M:%hu len %u", mg_print_ip4, &pkt->ip->src,
 80109ac:	4b1c      	ldr	r3, [pc, #112]	@ (8010a20 <rx_ip+0x334>)
 80109ae:	681b      	ldr	r3, [r3, #0]
 80109b0:	2b03      	cmp	r3, #3
 80109b2:	dd2d      	ble.n	8010a10 <rx_ip+0x324>
 80109b4:	4b1b      	ldr	r3, [pc, #108]	@ (8010a24 <rx_ip+0x338>)
 80109b6:	f241 4233 	movw	r2, #5171	@ 0x1433
 80109ba:	491b      	ldr	r1, [pc, #108]	@ (8010a28 <rx_ip+0x33c>)
 80109bc:	2004      	movs	r0, #4
 80109be:	f7fc fbf5 	bl	800d1ac <mg_log_prefix>
 80109c2:	683b      	ldr	r3, [r7, #0]
 80109c4:	69db      	ldr	r3, [r3, #28]
 80109c6:	f103 050c 	add.w	r5, r3, #12
 80109ca:	683b      	ldr	r3, [r7, #0]
 80109cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80109ce:	881b      	ldrh	r3, [r3, #0]
 80109d0:	b29b      	uxth	r3, r3
 80109d2:	4618      	mov	r0, r3
 80109d4:	f010 fba5 	bl	8021122 <mg_ntohs>
 80109d8:	4603      	mov	r3, r0
 80109da:	461e      	mov	r6, r3
 80109dc:	683b      	ldr	r3, [r7, #0]
 80109de:	69db      	ldr	r3, [r3, #28]
 80109e0:	f103 0410 	add.w	r4, r3, #16
 80109e4:	683b      	ldr	r3, [r7, #0]
 80109e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80109e8:	885b      	ldrh	r3, [r3, #2]
 80109ea:	b29b      	uxth	r3, r3
 80109ec:	4618      	mov	r0, r3
 80109ee:	f010 fb98 	bl	8021122 <mg_ntohs>
 80109f2:	4603      	mov	r3, r0
 80109f4:	461a      	mov	r2, r3
 80109f6:	683b      	ldr	r3, [r7, #0]
 80109f8:	68db      	ldr	r3, [r3, #12]
 80109fa:	9303      	str	r3, [sp, #12]
 80109fc:	9202      	str	r2, [sp, #8]
 80109fe:	9401      	str	r4, [sp, #4]
 8010a00:	4b0a      	ldr	r3, [pc, #40]	@ (8010a2c <rx_ip+0x340>)
 8010a02:	9300      	str	r3, [sp, #0]
 8010a04:	4633      	mov	r3, r6
 8010a06:	462a      	mov	r2, r5
 8010a08:	4908      	ldr	r1, [pc, #32]	@ (8010a2c <rx_ip+0x340>)
 8010a0a:	480a      	ldr	r0, [pc, #40]	@ (8010a34 <rx_ip+0x348>)
 8010a0c:	f7fc fc1e 	bl	800d24c <mg_log>
                mg_ntohs(pkt->tcp->sport), mg_print_ip4, &pkt->ip->dst,
                mg_ntohs(pkt->tcp->dport), (int) pkt->pay.len));
    rx_tcp(ifp, pkt);
 8010a10:	6839      	ldr	r1, [r7, #0]
 8010a12:	6878      	ldr	r0, [r7, #4]
 8010a14:	f7ff fcf0 	bl	80103f8 <rx_tcp>
 8010a18:	e045      	b.n	8010aa6 <rx_ip+0x3ba>
 8010a1a:	bf00      	nop
 8010a1c:	0802660c 	.word	0x0802660c
 8010a20:	20000258 	.word	0x20000258
 8010a24:	080288f8 	.word	0x080288f8
 8010a28:	08025140 	.word	0x08025140
 8010a2c:	080123b9 	.word	0x080123b9
 8010a30:	08026628 	.word	0x08026628
 8010a34:	08026644 	.word	0x08026644
  } else {
    MG_DEBUG(("Unknown IP proto %x", (int) pkt->ip->proto));
 8010a38:	4b1c      	ldr	r3, [pc, #112]	@ (8010aac <rx_ip+0x3c0>)
 8010a3a:	681b      	ldr	r3, [r3, #0]
 8010a3c:	2b02      	cmp	r3, #2
 8010a3e:	dd0d      	ble.n	8010a5c <rx_ip+0x370>
 8010a40:	4b1b      	ldr	r3, [pc, #108]	@ (8010ab0 <rx_ip+0x3c4>)
 8010a42:	f241 4238 	movw	r2, #5176	@ 0x1438
 8010a46:	491b      	ldr	r1, [pc, #108]	@ (8010ab4 <rx_ip+0x3c8>)
 8010a48:	2003      	movs	r0, #3
 8010a4a:	f7fc fbaf 	bl	800d1ac <mg_log_prefix>
 8010a4e:	683b      	ldr	r3, [r7, #0]
 8010a50:	69db      	ldr	r3, [r3, #28]
 8010a52:	7a5b      	ldrb	r3, [r3, #9]
 8010a54:	4619      	mov	r1, r3
 8010a56:	4818      	ldr	r0, [pc, #96]	@ (8010ab8 <rx_ip+0x3cc>)
 8010a58:	f7fc fbf8 	bl	800d24c <mg_log>
    if (mg_log_level >= MG_LL_VERBOSE)
 8010a5c:	4b13      	ldr	r3, [pc, #76]	@ (8010aac <rx_ip+0x3c0>)
 8010a5e:	681b      	ldr	r3, [r3, #0]
 8010a60:	2b03      	cmp	r3, #3
 8010a62:	dd20      	ble.n	8010aa6 <rx_ip+0x3ba>
      mg_hexdump(pkt->ip, pkt->pay.len >= 32 ? 32 : pkt->pay.len);
 8010a64:	683b      	ldr	r3, [r7, #0]
 8010a66:	69da      	ldr	r2, [r3, #28]
 8010a68:	683b      	ldr	r3, [r7, #0]
 8010a6a:	68db      	ldr	r3, [r3, #12]
 8010a6c:	2b20      	cmp	r3, #32
 8010a6e:	bf28      	it	cs
 8010a70:	2320      	movcs	r3, #32
 8010a72:	4619      	mov	r1, r3
 8010a74:	4610      	mov	r0, r2
 8010a76:	f7fc fc1f 	bl	800d2b8 <mg_hexdump>
 8010a7a:	e014      	b.n	8010aa6 <rx_ip+0x3ba>
  if (pkt->pay.len < sizeof(*pkt->ip)) return;  // Truncated
 8010a7c:	bf00      	nop
 8010a7e:	e012      	b.n	8010aa6 <rx_ip+0x3ba>
  if ((pkt->ip->ver >> 4) != 4) return;         // Not IP
 8010a80:	bf00      	nop
 8010a82:	e010      	b.n	8010aa6 <rx_ip+0x3ba>
  if (ihl < 5) return;                     // bad IHL
 8010a84:	bf00      	nop
 8010a86:	e00e      	b.n	8010aa6 <rx_ip+0x3ba>
  if (pkt->pay.len < (uint16_t)(ihl * 4)) return;    // Truncated / malformed
 8010a88:	bf00      	nop
 8010a8a:	e00c      	b.n	8010aa6 <rx_ip+0x3ba>
  if (len < (ihl * 4) || len > pkt->pay.len) return; // malformed
 8010a8c:	bf00      	nop
 8010a8e:	e00a      	b.n	8010aa6 <rx_ip+0x3ba>
  if (frag & IP_MORE_FRAGS_MSK || frag & IP_FRAG_OFFSET_MSK) {
 8010a90:	bf00      	nop
 8010a92:	e008      	b.n	8010aa6 <rx_ip+0x3ba>
    if (pkt->pay.len < sizeof(*pkt->icmp)) return;
 8010a94:	bf00      	nop
 8010a96:	e006      	b.n	8010aa6 <rx_ip+0x3ba>
    if (pkt->pay.len < sizeof(*pkt->udp)) return; // truncated
 8010a98:	bf00      	nop
 8010a9a:	e004      	b.n	8010aa6 <rx_ip+0x3ba>
    if (len < sizeof(*pkt->udp) || len > pkt->pay.len) return; // malformed
 8010a9c:	bf00      	nop
 8010a9e:	e002      	b.n	8010aa6 <rx_ip+0x3ba>
    if (pkt->pay.len < sizeof(*pkt->tcp)) return;
 8010aa0:	bf00      	nop
 8010aa2:	e000      	b.n	8010aa6 <rx_ip+0x3ba>
    if (pkt->pay.len < (uint16_t)(4 * off)) return;
 8010aa4:	bf00      	nop
  }
}
 8010aa6:	371c      	adds	r7, #28
 8010aa8:	46bd      	mov	sp, r7
 8010aaa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010aac:	20000258 	.word	0x20000258
 8010ab0:	080288f8 	.word	0x080288f8
 8010ab4:	08025140 	.word	0x08025140
 8010ab8:	08026660 	.word	0x08026660

08010abc <rx_ip6>:

static void rx_ip6(struct mg_tcpip_if *ifp, struct pkt *pkt) {
 8010abc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010abe:	b08b      	sub	sp, #44	@ 0x2c
 8010ac0:	af04      	add	r7, sp, #16
 8010ac2:	6078      	str	r0, [r7, #4]
 8010ac4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0;
 8010ac6:	2300      	movs	r3, #0
 8010ac8:	82fb      	strh	r3, [r7, #22]
  uint8_t next, *nhdr;
  bool loop = true;
 8010aca:	2301      	movs	r3, #1
 8010acc:	73fb      	strb	r3, [r7, #15]
  if (pkt->pay.len < sizeof(*pkt->ip6)) return;  // Truncated
 8010ace:	683b      	ldr	r3, [r7, #0]
 8010ad0:	68db      	ldr	r3, [r3, #12]
 8010ad2:	2b27      	cmp	r3, #39	@ 0x27
 8010ad4:	f240 81e1 	bls.w	8010e9a <rx_ip6+0x3de>
  if ((pkt->ip6->ver >> 4) != 0x6) return;       // Not IPv6
 8010ad8:	683b      	ldr	r3, [r7, #0]
 8010ada:	6a1b      	ldr	r3, [r3, #32]
 8010adc:	781b      	ldrb	r3, [r3, #0]
 8010ade:	091b      	lsrs	r3, r3, #4
 8010ae0:	b2db      	uxtb	r3, r3
 8010ae2:	2b06      	cmp	r3, #6
 8010ae4:	f040 81db 	bne.w	8010e9e <rx_ip6+0x3e2>
  next = pkt->ip6->next;
 8010ae8:	683b      	ldr	r3, [r7, #0]
 8010aea:	6a1b      	ldr	r3, [r3, #32]
 8010aec:	799b      	ldrb	r3, [r3, #6]
 8010aee:	757b      	strb	r3, [r7, #21]
  nhdr = (uint8_t *) (pkt->ip6 + 1);
 8010af0:	683b      	ldr	r3, [r7, #0]
 8010af2:	6a1b      	ldr	r3, [r3, #32]
 8010af4:	3328      	adds	r3, #40	@ 0x28
 8010af6:	613b      	str	r3, [r7, #16]
  while (loop) {
 8010af8:	e07d      	b.n	8010bf6 <rx_ip6+0x13a>
    switch (next) {
 8010afa:	7d7b      	ldrb	r3, [r7, #21]
 8010afc:	2b00      	cmp	r3, #0
 8010afe:	d02f      	beq.n	8010b60 <rx_ip6+0xa4>
 8010b00:	2b00      	cmp	r3, #0
 8010b02:	db75      	blt.n	8010bf0 <rx_ip6+0x134>
 8010b04:	2b3c      	cmp	r3, #60	@ 0x3c
 8010b06:	dc73      	bgt.n	8010bf0 <rx_ip6+0x134>
 8010b08:	2b2b      	cmp	r3, #43	@ 0x2b
 8010b0a:	db71      	blt.n	8010bf0 <rx_ip6+0x134>
 8010b0c:	3b2b      	subs	r3, #43	@ 0x2b
 8010b0e:	2b11      	cmp	r3, #17
 8010b10:	d86e      	bhi.n	8010bf0 <rx_ip6+0x134>
 8010b12:	a201      	add	r2, pc, #4	@ (adr r2, 8010b18 <rx_ip6+0x5c>)
 8010b14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010b18:	08010b61 	.word	0x08010b61
 8010b1c:	08010baf 	.word	0x08010baf
 8010b20:	08010bf1 	.word	0x08010bf1
 8010b24:	08010bf1 	.word	0x08010bf1
 8010b28:	08010bf1 	.word	0x08010bf1
 8010b2c:	08010bf1 	.word	0x08010bf1
 8010b30:	08010bf1 	.word	0x08010bf1
 8010b34:	08010bf1 	.word	0x08010bf1
 8010b38:	08010b61 	.word	0x08010b61
 8010b3c:	08010bf1 	.word	0x08010bf1
 8010b40:	08010bf1 	.word	0x08010bf1
 8010b44:	08010bf1 	.word	0x08010bf1
 8010b48:	08010bf1 	.word	0x08010bf1
 8010b4c:	08010bf1 	.word	0x08010bf1
 8010b50:	08010bf1 	.word	0x08010bf1
 8010b54:	08010bf1 	.word	0x08010bf1
 8010b58:	08010ea3 	.word	0x08010ea3
 8010b5c:	08010b61 	.word	0x08010b61
      case 0:   // Hop-by-Hop 4.3
      case 43:  // Routing 4.4
      case 60:  // Destination Options 4.6
      case 51:  // Authentication RFC-4302
        MG_INFO(("IPv6 extension header %d", (int) next));
 8010b60:	4b8a      	ldr	r3, [pc, #552]	@ (8010d8c <rx_ip6+0x2d0>)
 8010b62:	681b      	ldr	r3, [r3, #0]
 8010b64:	2b01      	cmp	r3, #1
 8010b66:	dd0b      	ble.n	8010b80 <rx_ip6+0xc4>
 8010b68:	4b89      	ldr	r3, [pc, #548]	@ (8010d90 <rx_ip6+0x2d4>)
 8010b6a:	f241 424c 	movw	r2, #5196	@ 0x144c
 8010b6e:	4989      	ldr	r1, [pc, #548]	@ (8010d94 <rx_ip6+0x2d8>)
 8010b70:	2002      	movs	r0, #2
 8010b72:	f7fc fb1b 	bl	800d1ac <mg_log_prefix>
 8010b76:	7d7b      	ldrb	r3, [r7, #21]
 8010b78:	4619      	mov	r1, r3
 8010b7a:	4887      	ldr	r0, [pc, #540]	@ (8010d98 <rx_ip6+0x2dc>)
 8010b7c:	f7fc fb66 	bl	800d24c <mg_log>
        next = nhdr[0];
 8010b80:	693b      	ldr	r3, [r7, #16]
 8010b82:	781b      	ldrb	r3, [r3, #0]
 8010b84:	757b      	strb	r3, [r7, #21]
        len += (uint16_t)(8 * (nhdr[1] + 1));
 8010b86:	693b      	ldr	r3, [r7, #16]
 8010b88:	3301      	adds	r3, #1
 8010b8a:	781b      	ldrb	r3, [r3, #0]
 8010b8c:	3301      	adds	r3, #1
 8010b8e:	b29b      	uxth	r3, r3
 8010b90:	00db      	lsls	r3, r3, #3
 8010b92:	b29a      	uxth	r2, r3
 8010b94:	8afb      	ldrh	r3, [r7, #22]
 8010b96:	4413      	add	r3, r2
 8010b98:	82fb      	strh	r3, [r7, #22]
        nhdr += 8 * (nhdr[1] + 1);
 8010b9a:	693b      	ldr	r3, [r7, #16]
 8010b9c:	3301      	adds	r3, #1
 8010b9e:	781b      	ldrb	r3, [r3, #0]
 8010ba0:	3301      	adds	r3, #1
 8010ba2:	00db      	lsls	r3, r3, #3
 8010ba4:	461a      	mov	r2, r3
 8010ba6:	693b      	ldr	r3, [r7, #16]
 8010ba8:	4413      	add	r3, r2
 8010baa:	613b      	str	r3, [r7, #16]
        break;
 8010bac:	e023      	b.n	8010bf6 <rx_ip6+0x13a>
      case 44:  // Fragment 4.5
      {
        struct mg_connection *c;
        if (nhdr[0] == 17) pkt->udp = (struct udp *) (pkt->pay.buf);
 8010bae:	693b      	ldr	r3, [r7, #16]
 8010bb0:	781b      	ldrb	r3, [r3, #0]
 8010bb2:	2b11      	cmp	r3, #17
 8010bb4:	d103      	bne.n	8010bbe <rx_ip6+0x102>
 8010bb6:	683b      	ldr	r3, [r7, #0]
 8010bb8:	689a      	ldr	r2, [r3, #8]
 8010bba:	683b      	ldr	r3, [r7, #0]
 8010bbc:	631a      	str	r2, [r3, #48]	@ 0x30
        if (nhdr[0] == 6) pkt->tcp = (struct tcp *) (pkt->pay.buf);
 8010bbe:	693b      	ldr	r3, [r7, #16]
 8010bc0:	781b      	ldrb	r3, [r3, #0]
 8010bc2:	2b06      	cmp	r3, #6
 8010bc4:	d103      	bne.n	8010bce <rx_ip6+0x112>
 8010bc6:	683b      	ldr	r3, [r7, #0]
 8010bc8:	689a      	ldr	r2, [r3, #8]
 8010bca:	683b      	ldr	r3, [r7, #0]
 8010bcc:	62da      	str	r2, [r3, #44]	@ 0x2c
        c = getpeer(ifp->mgr, pkt, false);
 8010bce:	687b      	ldr	r3, [r7, #4]
 8010bd0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010bd2:	2200      	movs	r2, #0
 8010bd4:	6839      	ldr	r1, [r7, #0]
 8010bd6:	4618      	mov	r0, r3
 8010bd8:	f7fd fe16 	bl	800e808 <getpeer>
 8010bdc:	60b8      	str	r0, [r7, #8]
        if (c) mg_error(c, "Received fragmented packet");
 8010bde:	68bb      	ldr	r3, [r7, #8]
 8010be0:	2b00      	cmp	r3, #0
 8010be2:	f000 8160 	beq.w	8010ea6 <rx_ip6+0x3ea>
 8010be6:	496d      	ldr	r1, [pc, #436]	@ (8010d9c <rx_ip6+0x2e0>)
 8010be8:	68b8      	ldr	r0, [r7, #8]
 8010bea:	f7f7 f943 	bl	8007e74 <mg_error>
      }
        return;
 8010bee:	e15a      	b.n	8010ea6 <rx_ip6+0x3ea>
      case 59:  // No Next Header 4.7
        return;
      case 50:  // IPsec ESP RFC-4303, unsupported
      default:
        loop = false;
 8010bf0:	2300      	movs	r3, #0
 8010bf2:	73fb      	strb	r3, [r7, #15]
        break;
 8010bf4:	bf00      	nop
  while (loop) {
 8010bf6:	7bfb      	ldrb	r3, [r7, #15]
 8010bf8:	2b00      	cmp	r3, #0
 8010bfa:	f47f af7e 	bne.w	8010afa <rx_ip6+0x3e>
    }
  }
  // There can be link padding, take payload length from IPv6 header - options
  pkt->pay.buf = (char *) nhdr;
 8010bfe:	683b      	ldr	r3, [r7, #0]
 8010c00:	693a      	ldr	r2, [r7, #16]
 8010c02:	609a      	str	r2, [r3, #8]
  pkt->pay.len = mg_ntohs(pkt->ip6->plen) - len;
 8010c04:	683b      	ldr	r3, [r7, #0]
 8010c06:	6a1b      	ldr	r3, [r3, #32]
 8010c08:	889b      	ldrh	r3, [r3, #4]
 8010c0a:	b29b      	uxth	r3, r3
 8010c0c:	4618      	mov	r0, r3
 8010c0e:	f010 fa88 	bl	8021122 <mg_ntohs>
 8010c12:	4603      	mov	r3, r0
 8010c14:	461a      	mov	r2, r3
 8010c16:	8afb      	ldrh	r3, [r7, #22]
 8010c18:	1ad3      	subs	r3, r2, r3
 8010c1a:	461a      	mov	r2, r3
 8010c1c:	683b      	ldr	r3, [r7, #0]
 8010c1e:	60da      	str	r2, [r3, #12]
  if (next == 58) {
 8010c20:	7d7b      	ldrb	r3, [r7, #21]
 8010c22:	2b3a      	cmp	r3, #58	@ 0x3a
 8010c24:	d12d      	bne.n	8010c82 <rx_ip6+0x1c6>
    pkt->icmp6 = (struct icmp6 *) (pkt->pay.buf);
 8010c26:	683b      	ldr	r3, [r7, #0]
 8010c28:	689a      	ldr	r2, [r3, #8]
 8010c2a:	683b      	ldr	r3, [r7, #0]
 8010c2c:	629a      	str	r2, [r3, #40]	@ 0x28
    if (pkt->pay.len < sizeof(*pkt->icmp6)) return;
 8010c2e:	683b      	ldr	r3, [r7, #0]
 8010c30:	68db      	ldr	r3, [r3, #12]
 8010c32:	2b03      	cmp	r3, #3
 8010c34:	f240 8139 	bls.w	8010eaa <rx_ip6+0x3ee>
    mkpay(pkt, pkt->icmp6 + 1);
 8010c38:	683b      	ldr	r3, [r7, #0]
 8010c3a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010c3c:	3304      	adds	r3, #4
 8010c3e:	4619      	mov	r1, r3
 8010c40:	6838      	ldr	r0, [r7, #0]
 8010c42:	f7fd f957 	bl	800def4 <mkpay>
    MG_DEBUG(("ICMPv6 %M -> %M len %u", mg_print_ip6, &pkt->ip6->src,
 8010c46:	4b51      	ldr	r3, [pc, #324]	@ (8010d8c <rx_ip6+0x2d0>)
 8010c48:	681b      	ldr	r3, [r3, #0]
 8010c4a:	2b02      	cmp	r3, #2
 8010c4c:	f340 8134 	ble.w	8010eb8 <rx_ip6+0x3fc>
 8010c50:	4b4f      	ldr	r3, [pc, #316]	@ (8010d90 <rx_ip6+0x2d4>)
 8010c52:	f241 4269 	movw	r2, #5225	@ 0x1469
 8010c56:	494f      	ldr	r1, [pc, #316]	@ (8010d94 <rx_ip6+0x2d8>)
 8010c58:	2003      	movs	r0, #3
 8010c5a:	f7fc faa7 	bl	800d1ac <mg_log_prefix>
 8010c5e:	683b      	ldr	r3, [r7, #0]
 8010c60:	6a1b      	ldr	r3, [r3, #32]
 8010c62:	f103 0108 	add.w	r1, r3, #8
 8010c66:	683b      	ldr	r3, [r7, #0]
 8010c68:	6a1b      	ldr	r3, [r3, #32]
 8010c6a:	3318      	adds	r3, #24
 8010c6c:	683a      	ldr	r2, [r7, #0]
 8010c6e:	68d2      	ldr	r2, [r2, #12]
 8010c70:	9201      	str	r2, [sp, #4]
 8010c72:	9300      	str	r3, [sp, #0]
 8010c74:	4b4a      	ldr	r3, [pc, #296]	@ (8010da0 <rx_ip6+0x2e4>)
 8010c76:	460a      	mov	r2, r1
 8010c78:	4949      	ldr	r1, [pc, #292]	@ (8010da0 <rx_ip6+0x2e4>)
 8010c7a:	484a      	ldr	r0, [pc, #296]	@ (8010da4 <rx_ip6+0x2e8>)
 8010c7c:	f7fc fae6 	bl	800d24c <mg_log>
 8010c80:	e11a      	b.n	8010eb8 <rx_ip6+0x3fc>
              mg_print_ip6, &pkt->ip6->dst, (int) pkt->pay.len));
    // rx_icmp6(ifp, pkt);
  } else if (next == 17) {
 8010c82:	7d7b      	ldrb	r3, [r7, #21]
 8010c84:	2b11      	cmp	r3, #17
 8010c86:	f040 8091 	bne.w	8010dac <rx_ip6+0x2f0>
    pkt->udp = (struct udp *) (pkt->pay.buf);
 8010c8a:	683b      	ldr	r3, [r7, #0]
 8010c8c:	689a      	ldr	r2, [r3, #8]
 8010c8e:	683b      	ldr	r3, [r7, #0]
 8010c90:	631a      	str	r2, [r3, #48]	@ 0x30
    if (pkt->pay.len < sizeof(*pkt->udp)) return;
 8010c92:	683b      	ldr	r3, [r7, #0]
 8010c94:	68db      	ldr	r3, [r3, #12]
 8010c96:	2b07      	cmp	r3, #7
 8010c98:	f240 8109 	bls.w	8010eae <rx_ip6+0x3f2>
    mkpay(pkt, pkt->udp + 1);
 8010c9c:	683b      	ldr	r3, [r7, #0]
 8010c9e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010ca0:	3308      	adds	r3, #8
 8010ca2:	4619      	mov	r1, r3
 8010ca4:	6838      	ldr	r0, [r7, #0]
 8010ca6:	f7fd f925 	bl	800def4 <mkpay>
    MG_DEBUG(("UDP %M:%hu -> %M:%hu len %u", mg_print_ip6, &pkt->ip6->src,
 8010caa:	4b38      	ldr	r3, [pc, #224]	@ (8010d8c <rx_ip6+0x2d0>)
 8010cac:	681b      	ldr	r3, [r3, #0]
 8010cae:	2b02      	cmp	r3, #2
 8010cb0:	dd2d      	ble.n	8010d0e <rx_ip6+0x252>
 8010cb2:	4b37      	ldr	r3, [pc, #220]	@ (8010d90 <rx_ip6+0x2d4>)
 8010cb4:	f241 4270 	movw	r2, #5232	@ 0x1470
 8010cb8:	4936      	ldr	r1, [pc, #216]	@ (8010d94 <rx_ip6+0x2d8>)
 8010cba:	2003      	movs	r0, #3
 8010cbc:	f7fc fa76 	bl	800d1ac <mg_log_prefix>
 8010cc0:	683b      	ldr	r3, [r7, #0]
 8010cc2:	6a1b      	ldr	r3, [r3, #32]
 8010cc4:	f103 0508 	add.w	r5, r3, #8
 8010cc8:	683b      	ldr	r3, [r7, #0]
 8010cca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010ccc:	881b      	ldrh	r3, [r3, #0]
 8010cce:	b29b      	uxth	r3, r3
 8010cd0:	4618      	mov	r0, r3
 8010cd2:	f010 fa26 	bl	8021122 <mg_ntohs>
 8010cd6:	4603      	mov	r3, r0
 8010cd8:	461e      	mov	r6, r3
 8010cda:	683b      	ldr	r3, [r7, #0]
 8010cdc:	6a1b      	ldr	r3, [r3, #32]
 8010cde:	f103 0418 	add.w	r4, r3, #24
 8010ce2:	683b      	ldr	r3, [r7, #0]
 8010ce4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010ce6:	885b      	ldrh	r3, [r3, #2]
 8010ce8:	b29b      	uxth	r3, r3
 8010cea:	4618      	mov	r0, r3
 8010cec:	f010 fa19 	bl	8021122 <mg_ntohs>
 8010cf0:	4603      	mov	r3, r0
 8010cf2:	461a      	mov	r2, r3
 8010cf4:	683b      	ldr	r3, [r7, #0]
 8010cf6:	68db      	ldr	r3, [r3, #12]
 8010cf8:	9303      	str	r3, [sp, #12]
 8010cfa:	9202      	str	r2, [sp, #8]
 8010cfc:	9401      	str	r4, [sp, #4]
 8010cfe:	4b28      	ldr	r3, [pc, #160]	@ (8010da0 <rx_ip6+0x2e4>)
 8010d00:	9300      	str	r3, [sp, #0]
 8010d02:	4633      	mov	r3, r6
 8010d04:	462a      	mov	r2, r5
 8010d06:	4926      	ldr	r1, [pc, #152]	@ (8010da0 <rx_ip6+0x2e4>)
 8010d08:	4827      	ldr	r0, [pc, #156]	@ (8010da8 <rx_ip6+0x2ec>)
 8010d0a:	f7fc fa9f 	bl	800d24c <mg_log>
              mg_ntohs(pkt->udp->sport), mg_print_ip6, &pkt->ip6->dst,
              mg_ntohs(pkt->udp->dport), (int) pkt->pay.len));
    if (ifp->enable_dhcp_client && pkt->udp->dport == mg_htons(546)) {
 8010d0e:	687b      	ldr	r3, [r7, #4]
 8010d10:	7f1b      	ldrb	r3, [r3, #28]
 8010d12:	2b00      	cmp	r3, #0
 8010d14:	d018      	beq.n	8010d48 <rx_ip6+0x28c>
 8010d16:	683b      	ldr	r3, [r7, #0]
 8010d18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010d1a:	885b      	ldrh	r3, [r3, #2]
 8010d1c:	b29c      	uxth	r4, r3
 8010d1e:	f240 2022 	movw	r0, #546	@ 0x222
 8010d22:	f010 f9fe 	bl	8021122 <mg_ntohs>
 8010d26:	4603      	mov	r3, r0
 8010d28:	429c      	cmp	r4, r3
 8010d2a:	d10d      	bne.n	8010d48 <rx_ip6+0x28c>
      pkt->dhcp6 = (struct dhcp6 *) (pkt->udp + 1);
 8010d2c:	683b      	ldr	r3, [r7, #0]
 8010d2e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010d30:	f103 0208 	add.w	r2, r3, #8
 8010d34:	683b      	ldr	r3, [r7, #0]
 8010d36:	639a      	str	r2, [r3, #56]	@ 0x38
      mkpay(pkt, pkt->dhcp6 + 1);
 8010d38:	683b      	ldr	r3, [r7, #0]
 8010d3a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010d3c:	3334      	adds	r3, #52	@ 0x34
 8010d3e:	4619      	mov	r1, r3
 8010d40:	6838      	ldr	r0, [r7, #0]
 8010d42:	f7fd f8d7 	bl	800def4 <mkpay>
 8010d46:	e0b7      	b.n	8010eb8 <rx_ip6+0x3fc>
      // rx_dhcp6_client(ifp, pkt);
    } else if (ifp->enable_dhcp_server && pkt->udp->dport == mg_htons(547)) {
 8010d48:	687b      	ldr	r3, [r7, #4]
 8010d4a:	7f5b      	ldrb	r3, [r3, #29]
 8010d4c:	2b00      	cmp	r3, #0
 8010d4e:	d018      	beq.n	8010d82 <rx_ip6+0x2c6>
 8010d50:	683b      	ldr	r3, [r7, #0]
 8010d52:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010d54:	885b      	ldrh	r3, [r3, #2]
 8010d56:	b29c      	uxth	r4, r3
 8010d58:	f240 2023 	movw	r0, #547	@ 0x223
 8010d5c:	f010 f9e1 	bl	8021122 <mg_ntohs>
 8010d60:	4603      	mov	r3, r0
 8010d62:	429c      	cmp	r4, r3
 8010d64:	d10d      	bne.n	8010d82 <rx_ip6+0x2c6>
      pkt->dhcp6 = (struct dhcp6 *) (pkt->udp + 1);
 8010d66:	683b      	ldr	r3, [r7, #0]
 8010d68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010d6a:	f103 0208 	add.w	r2, r3, #8
 8010d6e:	683b      	ldr	r3, [r7, #0]
 8010d70:	639a      	str	r2, [r3, #56]	@ 0x38
      mkpay(pkt, pkt->dhcp6 + 1);
 8010d72:	683b      	ldr	r3, [r7, #0]
 8010d74:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010d76:	3334      	adds	r3, #52	@ 0x34
 8010d78:	4619      	mov	r1, r3
 8010d7a:	6838      	ldr	r0, [r7, #0]
 8010d7c:	f7fd f8ba 	bl	800def4 <mkpay>
 8010d80:	e09a      	b.n	8010eb8 <rx_ip6+0x3fc>
      // rx_dhcp6_server(ifp, pkt);
    } else if (!rx_udp(ifp, pkt)) {
 8010d82:	6839      	ldr	r1, [r7, #0]
 8010d84:	6878      	ldr	r0, [r7, #4]
 8010d86:	f7fe fb01 	bl	800f38c <rx_udp>
 8010d8a:	e095      	b.n	8010eb8 <rx_ip6+0x3fc>
 8010d8c:	20000258 	.word	0x20000258
 8010d90:	08028900 	.word	0x08028900
 8010d94:	08025140 	.word	0x08025140
 8010d98:	08026674 	.word	0x08026674
 8010d9c:	0802660c 	.word	0x0802660c
 8010da0:	080123e7 	.word	0x080123e7
 8010da4:	08026690 	.word	0x08026690
 8010da8:	08026628 	.word	0x08026628
      // Should send ICMPv6 Destination Unreachable for unicasts, keep silent
    }
  } else if (next == 6) {
 8010dac:	7d7b      	ldrb	r3, [r7, #21]
 8010dae:	2b06      	cmp	r3, #6
 8010db0:	d153      	bne.n	8010e5a <rx_ip6+0x39e>
    uint8_t off;
    pkt->tcp = (struct tcp *) (pkt->pay.buf);
 8010db2:	683b      	ldr	r3, [r7, #0]
 8010db4:	689a      	ldr	r2, [r3, #8]
 8010db6:	683b      	ldr	r3, [r7, #0]
 8010db8:	62da      	str	r2, [r3, #44]	@ 0x2c
    if (pkt->pay.len < sizeof(*pkt->tcp)) return;
 8010dba:	683b      	ldr	r3, [r7, #0]
 8010dbc:	68db      	ldr	r3, [r3, #12]
 8010dbe:	2b13      	cmp	r3, #19
 8010dc0:	d977      	bls.n	8010eb2 <rx_ip6+0x3f6>
    off = pkt->tcp->off >> 4;  // account for opts
 8010dc2:	683b      	ldr	r3, [r7, #0]
 8010dc4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010dc6:	7b1b      	ldrb	r3, [r3, #12]
 8010dc8:	091b      	lsrs	r3, r3, #4
 8010dca:	73bb      	strb	r3, [r7, #14]
    if (pkt->pay.len < sizeof(*pkt->tcp) + 4 * off) return;
 8010dcc:	683b      	ldr	r3, [r7, #0]
 8010dce:	68da      	ldr	r2, [r3, #12]
 8010dd0:	7bbb      	ldrb	r3, [r7, #14]
 8010dd2:	009b      	lsls	r3, r3, #2
 8010dd4:	3314      	adds	r3, #20
 8010dd6:	429a      	cmp	r2, r3
 8010dd8:	d36d      	bcc.n	8010eb6 <rx_ip6+0x3fa>
    mkpay(pkt, (uint32_t *) pkt->tcp + off);
 8010dda:	683b      	ldr	r3, [r7, #0]
 8010ddc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010dde:	7bbb      	ldrb	r3, [r7, #14]
 8010de0:	009b      	lsls	r3, r3, #2
 8010de2:	4413      	add	r3, r2
 8010de4:	4619      	mov	r1, r3
 8010de6:	6838      	ldr	r0, [r7, #0]
 8010de8:	f7fd f884 	bl	800def4 <mkpay>
    MG_DEBUG(("TCP %M:%hu -> %M:%hu len %u", mg_print_ip6, &pkt->ip6->src,
 8010dec:	4b34      	ldr	r3, [pc, #208]	@ (8010ec0 <rx_ip6+0x404>)
 8010dee:	681b      	ldr	r3, [r3, #0]
 8010df0:	2b02      	cmp	r3, #2
 8010df2:	dd2d      	ble.n	8010e50 <rx_ip6+0x394>
 8010df4:	4b33      	ldr	r3, [pc, #204]	@ (8010ec4 <rx_ip6+0x408>)
 8010df6:	f241 4285 	movw	r2, #5253	@ 0x1485
 8010dfa:	4933      	ldr	r1, [pc, #204]	@ (8010ec8 <rx_ip6+0x40c>)
 8010dfc:	2003      	movs	r0, #3
 8010dfe:	f7fc f9d5 	bl	800d1ac <mg_log_prefix>
 8010e02:	683b      	ldr	r3, [r7, #0]
 8010e04:	6a1b      	ldr	r3, [r3, #32]
 8010e06:	f103 0508 	add.w	r5, r3, #8
 8010e0a:	683b      	ldr	r3, [r7, #0]
 8010e0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010e0e:	881b      	ldrh	r3, [r3, #0]
 8010e10:	b29b      	uxth	r3, r3
 8010e12:	4618      	mov	r0, r3
 8010e14:	f010 f985 	bl	8021122 <mg_ntohs>
 8010e18:	4603      	mov	r3, r0
 8010e1a:	461e      	mov	r6, r3
 8010e1c:	683b      	ldr	r3, [r7, #0]
 8010e1e:	6a1b      	ldr	r3, [r3, #32]
 8010e20:	f103 0418 	add.w	r4, r3, #24
 8010e24:	683b      	ldr	r3, [r7, #0]
 8010e26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010e28:	885b      	ldrh	r3, [r3, #2]
 8010e2a:	b29b      	uxth	r3, r3
 8010e2c:	4618      	mov	r0, r3
 8010e2e:	f010 f978 	bl	8021122 <mg_ntohs>
 8010e32:	4603      	mov	r3, r0
 8010e34:	461a      	mov	r2, r3
 8010e36:	683b      	ldr	r3, [r7, #0]
 8010e38:	68db      	ldr	r3, [r3, #12]
 8010e3a:	9303      	str	r3, [sp, #12]
 8010e3c:	9202      	str	r2, [sp, #8]
 8010e3e:	9401      	str	r4, [sp, #4]
 8010e40:	4b22      	ldr	r3, [pc, #136]	@ (8010ecc <rx_ip6+0x410>)
 8010e42:	9300      	str	r3, [sp, #0]
 8010e44:	4633      	mov	r3, r6
 8010e46:	462a      	mov	r2, r5
 8010e48:	4920      	ldr	r1, [pc, #128]	@ (8010ecc <rx_ip6+0x410>)
 8010e4a:	4821      	ldr	r0, [pc, #132]	@ (8010ed0 <rx_ip6+0x414>)
 8010e4c:	f7fc f9fe 	bl	800d24c <mg_log>
              mg_ntohs(pkt->tcp->sport), mg_print_ip6, &pkt->ip6->dst,
              mg_ntohs(pkt->tcp->dport), (int) pkt->pay.len));
    rx_tcp(ifp, pkt);
 8010e50:	6839      	ldr	r1, [r7, #0]
 8010e52:	6878      	ldr	r0, [r7, #4]
 8010e54:	f7ff fad0 	bl	80103f8 <rx_tcp>
 8010e58:	e02e      	b.n	8010eb8 <rx_ip6+0x3fc>
  } else {
    MG_DEBUG(("Unknown IPv6 next hdr %x", (int) next));
 8010e5a:	4b19      	ldr	r3, [pc, #100]	@ (8010ec0 <rx_ip6+0x404>)
 8010e5c:	681b      	ldr	r3, [r3, #0]
 8010e5e:	2b02      	cmp	r3, #2
 8010e60:	dd0b      	ble.n	8010e7a <rx_ip6+0x3be>
 8010e62:	4b18      	ldr	r3, [pc, #96]	@ (8010ec4 <rx_ip6+0x408>)
 8010e64:	f241 428a 	movw	r2, #5258	@ 0x148a
 8010e68:	4917      	ldr	r1, [pc, #92]	@ (8010ec8 <rx_ip6+0x40c>)
 8010e6a:	2003      	movs	r0, #3
 8010e6c:	f7fc f99e 	bl	800d1ac <mg_log_prefix>
 8010e70:	7d7b      	ldrb	r3, [r7, #21]
 8010e72:	4619      	mov	r1, r3
 8010e74:	4817      	ldr	r0, [pc, #92]	@ (8010ed4 <rx_ip6+0x418>)
 8010e76:	f7fc f9e9 	bl	800d24c <mg_log>
    if (mg_log_level >= MG_LL_VERBOSE)
 8010e7a:	4b11      	ldr	r3, [pc, #68]	@ (8010ec0 <rx_ip6+0x404>)
 8010e7c:	681b      	ldr	r3, [r3, #0]
 8010e7e:	2b03      	cmp	r3, #3
 8010e80:	dd1a      	ble.n	8010eb8 <rx_ip6+0x3fc>
      mg_hexdump(pkt->ip6, pkt->pay.len >= 32 ? 32 : pkt->pay.len);
 8010e82:	683b      	ldr	r3, [r7, #0]
 8010e84:	6a1a      	ldr	r2, [r3, #32]
 8010e86:	683b      	ldr	r3, [r7, #0]
 8010e88:	68db      	ldr	r3, [r3, #12]
 8010e8a:	2b20      	cmp	r3, #32
 8010e8c:	bf28      	it	cs
 8010e8e:	2320      	movcs	r3, #32
 8010e90:	4619      	mov	r1, r3
 8010e92:	4610      	mov	r0, r2
 8010e94:	f7fc fa10 	bl	800d2b8 <mg_hexdump>
 8010e98:	e00e      	b.n	8010eb8 <rx_ip6+0x3fc>
  if (pkt->pay.len < sizeof(*pkt->ip6)) return;  // Truncated
 8010e9a:	bf00      	nop
 8010e9c:	e00c      	b.n	8010eb8 <rx_ip6+0x3fc>
  if ((pkt->ip6->ver >> 4) != 0x6) return;       // Not IPv6
 8010e9e:	bf00      	nop
 8010ea0:	e00a      	b.n	8010eb8 <rx_ip6+0x3fc>
        return;
 8010ea2:	bf00      	nop
 8010ea4:	e008      	b.n	8010eb8 <rx_ip6+0x3fc>
        return;
 8010ea6:	bf00      	nop
 8010ea8:	e006      	b.n	8010eb8 <rx_ip6+0x3fc>
    if (pkt->pay.len < sizeof(*pkt->icmp6)) return;
 8010eaa:	bf00      	nop
 8010eac:	e004      	b.n	8010eb8 <rx_ip6+0x3fc>
    if (pkt->pay.len < sizeof(*pkt->udp)) return;
 8010eae:	bf00      	nop
 8010eb0:	e002      	b.n	8010eb8 <rx_ip6+0x3fc>
    if (pkt->pay.len < sizeof(*pkt->tcp)) return;
 8010eb2:	bf00      	nop
 8010eb4:	e000      	b.n	8010eb8 <rx_ip6+0x3fc>
    if (pkt->pay.len < sizeof(*pkt->tcp) + 4 * off) return;
 8010eb6:	bf00      	nop
  }
}
 8010eb8:	371c      	adds	r7, #28
 8010eba:	46bd      	mov	sp, r7
 8010ebc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010ebe:	bf00      	nop
 8010ec0:	20000258 	.word	0x20000258
 8010ec4:	08028900 	.word	0x08028900
 8010ec8:	08025140 	.word	0x08025140
 8010ecc:	080123e7 	.word	0x080123e7
 8010ed0:	08026644 	.word	0x08026644
 8010ed4:	080266a8 	.word	0x080266a8

08010ed8 <mg_tcpip_rx>:

static void mg_tcpip_rx(struct mg_tcpip_if *ifp, void *buf, size_t len) {
 8010ed8:	b590      	push	{r4, r7, lr}
 8010eda:	b095      	sub	sp, #84	@ 0x54
 8010edc:	af00      	add	r7, sp, #0
 8010ede:	60f8      	str	r0, [r7, #12]
 8010ee0:	60b9      	str	r1, [r7, #8]
 8010ee2:	607a      	str	r2, [r7, #4]
  struct pkt pkt;
  memset(&pkt, 0, sizeof(pkt));
 8010ee4:	f107 0314 	add.w	r3, r7, #20
 8010ee8:	223c      	movs	r2, #60	@ 0x3c
 8010eea:	2100      	movs	r1, #0
 8010eec:	4618      	mov	r0, r3
 8010eee:	f013 facd 	bl	802448c <memset>
  pkt.pay.buf = pkt.raw.buf = (char *) buf;
 8010ef2:	68bb      	ldr	r3, [r7, #8]
 8010ef4:	617b      	str	r3, [r7, #20]
 8010ef6:	697b      	ldr	r3, [r7, #20]
 8010ef8:	61fb      	str	r3, [r7, #28]
  pkt.pay.len = pkt.raw.len = len; // payload = raw
 8010efa:	687b      	ldr	r3, [r7, #4]
 8010efc:	61bb      	str	r3, [r7, #24]
 8010efe:	69bb      	ldr	r3, [r7, #24]
 8010f00:	623b      	str	r3, [r7, #32]
  pkt.eth = (struct eth *) buf;   // Ethernet = raw
 8010f02:	68bb      	ldr	r3, [r7, #8]
 8010f04:	627b      	str	r3, [r7, #36]	@ 0x24
  if (pkt.raw.len < sizeof(*pkt.eth)) return;  // Truncated - runt?
 8010f06:	69bb      	ldr	r3, [r7, #24]
 8010f08:	2b0d      	cmp	r3, #13
 8010f0a:	f240 80a9 	bls.w	8011060 <mg_tcpip_rx+0x188>
  if (ifp->enable_mac_check &&
 8010f0e:	68fb      	ldr	r3, [r7, #12]
 8010f10:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 8010f14:	2b00      	cmp	r3, #0
 8010f16:	d013      	beq.n	8010f40 <mg_tcpip_rx+0x68>
      memcmp(pkt.eth->dst, ifp->mac, sizeof(pkt.eth->dst)) != 0 &&
 8010f18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010f1a:	4618      	mov	r0, r3
 8010f1c:	68fb      	ldr	r3, [r7, #12]
 8010f1e:	2206      	movs	r2, #6
 8010f20:	4619      	mov	r1, r3
 8010f22:	f013 fa89 	bl	8024438 <memcmp>
 8010f26:	4603      	mov	r3, r0
  if (ifp->enable_mac_check &&
 8010f28:	2b00      	cmp	r3, #0
 8010f2a:	d009      	beq.n	8010f40 <mg_tcpip_rx+0x68>
      memcmp(pkt.eth->dst, broadcast, sizeof(pkt.eth->dst)) != 0)
 8010f2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010f2e:	2206      	movs	r2, #6
 8010f30:	4950      	ldr	r1, [pc, #320]	@ (8011074 <mg_tcpip_rx+0x19c>)
 8010f32:	4618      	mov	r0, r3
 8010f34:	f013 fa80 	bl	8024438 <memcmp>
 8010f38:	4603      	mov	r3, r0
      memcmp(pkt.eth->dst, ifp->mac, sizeof(pkt.eth->dst)) != 0 &&
 8010f3a:	2b00      	cmp	r3, #0
 8010f3c:	f040 8092 	bne.w	8011064 <mg_tcpip_rx+0x18c>
    return;
  if (ifp->enable_crc32_check && len > 4) {
 8010f40:	68fb      	ldr	r3, [r7, #12]
 8010f42:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8010f46:	2b00      	cmp	r3, #0
 8010f48:	d01b      	beq.n	8010f82 <mg_tcpip_rx+0xaa>
 8010f4a:	687b      	ldr	r3, [r7, #4]
 8010f4c:	2b04      	cmp	r3, #4
 8010f4e:	d918      	bls.n	8010f82 <mg_tcpip_rx+0xaa>
    uint32_t crc;
    len -= 4;  // TODO(scaprile): check on bigendian
 8010f50:	687b      	ldr	r3, [r7, #4]
 8010f52:	3b04      	subs	r3, #4
 8010f54:	607b      	str	r3, [r7, #4]
    crc = mg_crc32(0, (const char *) buf, len);
 8010f56:	687a      	ldr	r2, [r7, #4]
 8010f58:	68b9      	ldr	r1, [r7, #8]
 8010f5a:	2000      	movs	r0, #0
 8010f5c:	f010 f854 	bl	8021008 <mg_crc32>
 8010f60:	4603      	mov	r3, r0
 8010f62:	613b      	str	r3, [r7, #16]
    if (memcmp((void *) ((size_t) buf + len), &crc, sizeof(crc))) return;
 8010f64:	68ba      	ldr	r2, [r7, #8]
 8010f66:	687b      	ldr	r3, [r7, #4]
 8010f68:	4413      	add	r3, r2
 8010f6a:	4618      	mov	r0, r3
 8010f6c:	f107 0310 	add.w	r3, r7, #16
 8010f70:	2204      	movs	r2, #4
 8010f72:	4619      	mov	r1, r3
 8010f74:	f013 fa60 	bl	8024438 <memcmp>
 8010f78:	4603      	mov	r3, r0
 8010f7a:	2b00      	cmp	r3, #0
 8010f7c:	d174      	bne.n	8011068 <mg_tcpip_rx+0x190>
    pkt.pay.len = len;
 8010f7e:	687b      	ldr	r3, [r7, #4]
 8010f80:	623b      	str	r3, [r7, #32]
  }
  mkpay(&pkt, pkt.eth + 1);
 8010f82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010f84:	f103 020e 	add.w	r2, r3, #14
 8010f88:	f107 0314 	add.w	r3, r7, #20
 8010f8c:	4611      	mov	r1, r2
 8010f8e:	4618      	mov	r0, r3
 8010f90:	f7fc ffb0 	bl	800def4 <mkpay>
  if (pkt.eth->type == mg_htons(0x806)) {
 8010f94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010f96:	899b      	ldrh	r3, [r3, #12]
 8010f98:	b29c      	uxth	r4, r3
 8010f9a:	f640 0006 	movw	r0, #2054	@ 0x806
 8010f9e:	f010 f8c0 	bl	8021122 <mg_ntohs>
 8010fa2:	4603      	mov	r3, r0
 8010fa4:	429c      	cmp	r4, r3
 8010fa6:	d112      	bne.n	8010fce <mg_tcpip_rx+0xf6>
    pkt.arp = (struct arp *) (pkt.pay.buf);
 8010fa8:	69fb      	ldr	r3, [r7, #28]
 8010faa:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if (pkt.pay.len < sizeof(*pkt.arp)) return; // Truncated
 8010fac:	6a3b      	ldr	r3, [r7, #32]
 8010fae:	2b1b      	cmp	r3, #27
 8010fb0:	d95c      	bls.n	801106c <mg_tcpip_rx+0x194>
    mg_tcpip_call(ifp, MG_TCPIP_EV_ARP, &pkt.raw);
 8010fb2:	f107 0314 	add.w	r3, r7, #20
 8010fb6:	461a      	mov	r2, r3
 8010fb8:	2103      	movs	r1, #3
 8010fba:	68f8      	ldr	r0, [r7, #12]
 8010fbc:	f7fc ff7c 	bl	800deb8 <mg_tcpip_call>
    rx_arp(ifp, &pkt);
 8010fc0:	f107 0314 	add.w	r3, r7, #20
 8010fc4:	4619      	mov	r1, r3
 8010fc6:	68f8      	ldr	r0, [r7, #12]
 8010fc8:	f7fd fc94 	bl	800e8f4 <rx_arp>
 8010fcc:	e04f      	b.n	801106e <mg_tcpip_rx+0x196>
  } else if (pkt.eth->type == mg_htons(0x86dd)) {
 8010fce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010fd0:	899b      	ldrh	r3, [r3, #12]
 8010fd2:	b29c      	uxth	r4, r3
 8010fd4:	f248 60dd 	movw	r0, #34525	@ 0x86dd
 8010fd8:	f010 f8a3 	bl	8021122 <mg_ntohs>
 8010fdc:	4603      	mov	r3, r0
 8010fde:	429c      	cmp	r4, r3
 8010fe0:	d108      	bne.n	8010ff4 <mg_tcpip_rx+0x11c>
    pkt.ip6 = (struct ip6 *) (pkt.pay.buf);
 8010fe2:	69fb      	ldr	r3, [r7, #28]
 8010fe4:	637b      	str	r3, [r7, #52]	@ 0x34
    rx_ip6(ifp, &pkt);
 8010fe6:	f107 0314 	add.w	r3, r7, #20
 8010fea:	4619      	mov	r1, r3
 8010fec:	68f8      	ldr	r0, [r7, #12]
 8010fee:	f7ff fd65 	bl	8010abc <rx_ip6>
 8010ff2:	e03c      	b.n	801106e <mg_tcpip_rx+0x196>
  } else if (pkt.eth->type == mg_htons(0x800)) {
 8010ff4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010ff6:	899b      	ldrh	r3, [r3, #12]
 8010ff8:	b29c      	uxth	r4, r3
 8010ffa:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8010ffe:	f010 f890 	bl	8021122 <mg_ntohs>
 8011002:	4603      	mov	r3, r0
 8011004:	429c      	cmp	r4, r3
 8011006:	d108      	bne.n	801101a <mg_tcpip_rx+0x142>
    pkt.ip = (struct ip *) (pkt.pay.buf);
 8011008:	69fb      	ldr	r3, [r7, #28]
 801100a:	633b      	str	r3, [r7, #48]	@ 0x30
    rx_ip(ifp, &pkt);
 801100c:	f107 0314 	add.w	r3, r7, #20
 8011010:	4619      	mov	r1, r3
 8011012:	68f8      	ldr	r0, [r7, #12]
 8011014:	f7ff fb6a 	bl	80106ec <rx_ip>
 8011018:	e029      	b.n	801106e <mg_tcpip_rx+0x196>
  } else {
    MG_DEBUG(("Unknown eth type %x", mg_htons(pkt.eth->type)));
 801101a:	4b17      	ldr	r3, [pc, #92]	@ (8011078 <mg_tcpip_rx+0x1a0>)
 801101c:	681b      	ldr	r3, [r3, #0]
 801101e:	2b02      	cmp	r3, #2
 8011020:	dd11      	ble.n	8011046 <mg_tcpip_rx+0x16e>
 8011022:	4b16      	ldr	r3, [pc, #88]	@ (801107c <mg_tcpip_rx+0x1a4>)
 8011024:	f241 42af 	movw	r2, #5295	@ 0x14af
 8011028:	4915      	ldr	r1, [pc, #84]	@ (8011080 <mg_tcpip_rx+0x1a8>)
 801102a:	2003      	movs	r0, #3
 801102c:	f7fc f8be 	bl	800d1ac <mg_log_prefix>
 8011030:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011032:	899b      	ldrh	r3, [r3, #12]
 8011034:	b29b      	uxth	r3, r3
 8011036:	4618      	mov	r0, r3
 8011038:	f010 f873 	bl	8021122 <mg_ntohs>
 801103c:	4603      	mov	r3, r0
 801103e:	4619      	mov	r1, r3
 8011040:	4810      	ldr	r0, [pc, #64]	@ (8011084 <mg_tcpip_rx+0x1ac>)
 8011042:	f7fc f903 	bl	800d24c <mg_log>
    if (mg_log_level >= MG_LL_VERBOSE) mg_hexdump(buf, len >= 32 ? 32 : len);
 8011046:	4b0c      	ldr	r3, [pc, #48]	@ (8011078 <mg_tcpip_rx+0x1a0>)
 8011048:	681b      	ldr	r3, [r3, #0]
 801104a:	2b03      	cmp	r3, #3
 801104c:	dd0f      	ble.n	801106e <mg_tcpip_rx+0x196>
 801104e:	687b      	ldr	r3, [r7, #4]
 8011050:	2b20      	cmp	r3, #32
 8011052:	bf28      	it	cs
 8011054:	2320      	movcs	r3, #32
 8011056:	4619      	mov	r1, r3
 8011058:	68b8      	ldr	r0, [r7, #8]
 801105a:	f7fc f92d 	bl	800d2b8 <mg_hexdump>
 801105e:	e006      	b.n	801106e <mg_tcpip_rx+0x196>
  if (pkt.raw.len < sizeof(*pkt.eth)) return;  // Truncated - runt?
 8011060:	bf00      	nop
 8011062:	e004      	b.n	801106e <mg_tcpip_rx+0x196>
    return;
 8011064:	bf00      	nop
 8011066:	e002      	b.n	801106e <mg_tcpip_rx+0x196>
    if (memcmp((void *) ((size_t) buf + len), &crc, sizeof(crc))) return;
 8011068:	bf00      	nop
 801106a:	e000      	b.n	801106e <mg_tcpip_rx+0x196>
    if (pkt.pay.len < sizeof(*pkt.arp)) return; // Truncated
 801106c:	bf00      	nop
  }
}
 801106e:	3754      	adds	r7, #84	@ 0x54
 8011070:	46bd      	mov	sp, r7
 8011072:	bd90      	pop	{r4, r7, pc}
 8011074:	0802834c 	.word	0x0802834c
 8011078:	20000258 	.word	0x20000258
 801107c:	08028908 	.word	0x08028908
 8011080:	08025140 	.word	0x08025140
 8011084:	080266c4 	.word	0x080266c4

08011088 <mg_tcpip_poll>:

static void mg_tcpip_poll(struct mg_tcpip_if *ifp, uint64_t now) {
 8011088:	b5f0      	push	{r4, r5, r6, r7, lr}
 801108a:	b093      	sub	sp, #76	@ 0x4c
 801108c:	af06      	add	r7, sp, #24
 801108e:	60f8      	str	r0, [r7, #12]
 8011090:	e9c7 2300 	strd	r2, r3, [r7]
  struct mg_connection *c;
  bool expired_1000ms = mg_timer_expired(&ifp->timer_1000ms, 1000, now);
 8011094:	68fb      	ldr	r3, [r7, #12]
 8011096:	f103 0170 	add.w	r1, r3, #112	@ 0x70
 801109a:	e9d7 2300 	ldrd	r2, r3, [r7]
 801109e:	e9cd 2300 	strd	r2, r3, [sp]
 80110a2:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80110a6:	f04f 0300 	mov.w	r3, #0
 80110aa:	4608      	mov	r0, r1
 80110ac:	f005 f91e 	bl	80162ec <mg_timer_expired>
 80110b0:	4603      	mov	r3, r0
 80110b2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
  ifp->now = now;
 80110b6:	68f9      	ldr	r1, [r7, #12]
 80110b8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80110bc:	e9c1 231a 	strd	r2, r3, [r1, #104]	@ 0x68

  if (expired_1000ms) {
 80110c0:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80110c4:	2b00      	cmp	r3, #0
 80110c6:	d004      	beq.n	80110d2 <mg_tcpip_poll+0x4a>
    const char *names[] = {"down", "up", "req", "ip", "ready"};
    MG_INFO(("Status: %s, IP: %M, rx:%u, tx:%u, dr:%u, er:%u",
             names[ifp->state], mg_print_ip4, &ifp->ip, ifp->nrecv, ifp->nsent,
             ifp->ndrop, ifp->nerr));
#endif
    backlog_poll(ifp->mgr);
 80110c8:	68fb      	ldr	r3, [r7, #12]
 80110ca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80110cc:	4618      	mov	r0, r3
 80110ce:	f7ff f90c 	bl	80102ea <backlog_poll>
  }
  // Handle gw ARP request timeout, order is important
  if (expired_1000ms && ifp->state == MG_TCPIP_STATE_IP) {
 80110d2:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80110d6:	2b00      	cmp	r3, #0
 80110d8:	d00b      	beq.n	80110f2 <mg_tcpip_poll+0x6a>
 80110da:	68fb      	ldr	r3, [r7, #12]
 80110dc:	f893 3094 	ldrb.w	r3, [r3, #148]	@ 0x94
 80110e0:	2b03      	cmp	r3, #3
 80110e2:	d106      	bne.n	80110f2 <mg_tcpip_poll+0x6a>
    ifp->state = MG_TCPIP_STATE_READY;  // keep best-effort MAC
 80110e4:	68fb      	ldr	r3, [r7, #12]
 80110e6:	2204      	movs	r2, #4
 80110e8:	f883 2094 	strb.w	r2, [r3, #148]	@ 0x94
    onstatechange(ifp);
 80110ec:	68f8      	ldr	r0, [r7, #12]
 80110ee:	f7fd f863 	bl	800e1b8 <onstatechange>
  }
  // poll driver
  if (ifp->driver->poll) {
 80110f2:	68fb      	ldr	r3, [r7, #12]
 80110f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80110f6:	68db      	ldr	r3, [r3, #12]
 80110f8:	2b00      	cmp	r3, #0
 80110fa:	d075      	beq.n	80111e8 <mg_tcpip_poll+0x160>
    bool up = ifp->driver->poll(ifp, expired_1000ms);
 80110fc:	68fb      	ldr	r3, [r7, #12]
 80110fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011100:	68db      	ldr	r3, [r3, #12]
 8011102:	f897 202b 	ldrb.w	r2, [r7, #43]	@ 0x2b
 8011106:	4611      	mov	r1, r2
 8011108:	68f8      	ldr	r0, [r7, #12]
 801110a:	4798      	blx	r3
 801110c:	4603      	mov	r3, r0
 801110e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
    // Handle physical interface up/down status
    if (expired_1000ms) {
 8011112:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8011116:	2b00      	cmp	r3, #0
 8011118:	d066      	beq.n	80111e8 <mg_tcpip_poll+0x160>
      bool current = ifp->state != MG_TCPIP_STATE_DOWN;
 801111a:	68fb      	ldr	r3, [r7, #12]
 801111c:	f893 3094 	ldrb.w	r3, [r3, #148]	@ 0x94
 8011120:	2b00      	cmp	r3, #0
 8011122:	bf14      	ite	ne
 8011124:	2301      	movne	r3, #1
 8011126:	2300      	moveq	r3, #0
 8011128:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
      if (!up && ifp->enable_dhcp_client) ifp->ip = 0;
 801112c:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8011130:	f083 0301 	eor.w	r3, r3, #1
 8011134:	b2db      	uxtb	r3, r3
 8011136:	2b00      	cmp	r3, #0
 8011138:	d006      	beq.n	8011148 <mg_tcpip_poll+0xc0>
 801113a:	68fb      	ldr	r3, [r7, #12]
 801113c:	7f1b      	ldrb	r3, [r3, #28]
 801113e:	2b00      	cmp	r3, #0
 8011140:	d002      	beq.n	8011148 <mg_tcpip_poll+0xc0>
 8011142:	68fb      	ldr	r3, [r7, #12]
 8011144:	2200      	movs	r2, #0
 8011146:	609a      	str	r2, [r3, #8]
      if (up != current) {  // link state has changed
 8011148:	f897 202a 	ldrb.w	r2, [r7, #42]	@ 0x2a
 801114c:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8011150:	429a      	cmp	r2, r3
 8011152:	d01a      	beq.n	801118a <mg_tcpip_poll+0x102>
        ifp->state = up == false ? MG_TCPIP_STATE_DOWN
 8011154:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8011158:	f083 0301 	eor.w	r3, r3, #1
 801115c:	b2db      	uxtb	r3, r3
 801115e:	2b00      	cmp	r3, #0
 8011160:	d001      	beq.n	8011166 <mg_tcpip_poll+0xde>
 8011162:	2300      	movs	r3, #0
 8011164:	e00a      	b.n	801117c <mg_tcpip_poll+0xf4>
                     : ifp->enable_dhcp_client || ifp->ip == 0
 8011166:	68fb      	ldr	r3, [r7, #12]
 8011168:	7f1b      	ldrb	r3, [r3, #28]
        ifp->state = up == false ? MG_TCPIP_STATE_DOWN
 801116a:	2b00      	cmp	r3, #0
 801116c:	d103      	bne.n	8011176 <mg_tcpip_poll+0xee>
                     : ifp->enable_dhcp_client || ifp->ip == 0
 801116e:	68fb      	ldr	r3, [r7, #12]
 8011170:	689b      	ldr	r3, [r3, #8]
 8011172:	2b00      	cmp	r3, #0
 8011174:	d101      	bne.n	801117a <mg_tcpip_poll+0xf2>
        ifp->state = up == false ? MG_TCPIP_STATE_DOWN
 8011176:	2301      	movs	r3, #1
 8011178:	e000      	b.n	801117c <mg_tcpip_poll+0xf4>
 801117a:	2303      	movs	r3, #3
 801117c:	68fa      	ldr	r2, [r7, #12]
 801117e:	f882 3094 	strb.w	r3, [r2, #148]	@ 0x94
                         ? MG_TCPIP_STATE_UP
                         : MG_TCPIP_STATE_IP;
        onstatechange(ifp);
 8011182:	68f8      	ldr	r0, [r7, #12]
 8011184:	f7fd f818 	bl	800e1b8 <onstatechange>
 8011188:	e016      	b.n	80111b8 <mg_tcpip_poll+0x130>
      } else if (!ifp->enable_dhcp_client && ifp->state == MG_TCPIP_STATE_UP &&
 801118a:	68fb      	ldr	r3, [r7, #12]
 801118c:	7f1b      	ldrb	r3, [r3, #28]
 801118e:	f083 0301 	eor.w	r3, r3, #1
 8011192:	b2db      	uxtb	r3, r3
 8011194:	2b00      	cmp	r3, #0
 8011196:	d00f      	beq.n	80111b8 <mg_tcpip_poll+0x130>
 8011198:	68fb      	ldr	r3, [r7, #12]
 801119a:	f893 3094 	ldrb.w	r3, [r3, #148]	@ 0x94
 801119e:	2b01      	cmp	r3, #1
 80111a0:	d10a      	bne.n	80111b8 <mg_tcpip_poll+0x130>
                 ifp->ip) {
 80111a2:	68fb      	ldr	r3, [r7, #12]
 80111a4:	689b      	ldr	r3, [r3, #8]
      } else if (!ifp->enable_dhcp_client && ifp->state == MG_TCPIP_STATE_UP &&
 80111a6:	2b00      	cmp	r3, #0
 80111a8:	d006      	beq.n	80111b8 <mg_tcpip_poll+0x130>
        ifp->state = MG_TCPIP_STATE_IP;  // ifp->fn has set an IP
 80111aa:	68fb      	ldr	r3, [r7, #12]
 80111ac:	2203      	movs	r2, #3
 80111ae:	f883 2094 	strb.w	r2, [r3, #148]	@ 0x94
        onstatechange(ifp);
 80111b2:	68f8      	ldr	r0, [r7, #12]
 80111b4:	f7fd f800 	bl	800e1b8 <onstatechange>
      }
      if (ifp->state == MG_TCPIP_STATE_DOWN) MG_ERROR(("Network is down"));
 80111b8:	68fb      	ldr	r3, [r7, #12]
 80111ba:	f893 3094 	ldrb.w	r3, [r3, #148]	@ 0x94
 80111be:	2b00      	cmp	r3, #0
 80111c0:	d10d      	bne.n	80111de <mg_tcpip_poll+0x156>
 80111c2:	4ba4      	ldr	r3, [pc, #656]	@ (8011454 <mg_tcpip_poll+0x3cc>)
 80111c4:	681b      	ldr	r3, [r3, #0]
 80111c6:	2b00      	cmp	r3, #0
 80111c8:	dd09      	ble.n	80111de <mg_tcpip_poll+0x156>
 80111ca:	4ba3      	ldr	r3, [pc, #652]	@ (8011458 <mg_tcpip_poll+0x3d0>)
 80111cc:	f241 42d9 	movw	r2, #5337	@ 0x14d9
 80111d0:	49a2      	ldr	r1, [pc, #648]	@ (801145c <mg_tcpip_poll+0x3d4>)
 80111d2:	2001      	movs	r0, #1
 80111d4:	f7fb ffea 	bl	800d1ac <mg_log_prefix>
 80111d8:	48a1      	ldr	r0, [pc, #644]	@ (8011460 <mg_tcpip_poll+0x3d8>)
 80111da:	f7fc f837 	bl	800d24c <mg_log>
      mg_tcpip_call(ifp, MG_TCPIP_EV_TIMER_1S, NULL);
 80111de:	2200      	movs	r2, #0
 80111e0:	2104      	movs	r1, #4
 80111e2:	68f8      	ldr	r0, [r7, #12]
 80111e4:	f7fc fe68 	bl	800deb8 <mg_tcpip_call>
    }
  }
  if (ifp->state == MG_TCPIP_STATE_DOWN) return;
 80111e8:	68fb      	ldr	r3, [r7, #12]
 80111ea:	f893 3094 	ldrb.w	r3, [r3, #148]	@ 0x94
 80111ee:	2b00      	cmp	r3, #0
 80111f0:	f000 81a2 	beq.w	8011538 <mg_tcpip_poll+0x4b0>

  // DHCP RFC-2131 (4.4)
  if (ifp->enable_dhcp_client && expired_1000ms) {
 80111f4:	68fb      	ldr	r3, [r7, #12]
 80111f6:	7f1b      	ldrb	r3, [r3, #28]
 80111f8:	2b00      	cmp	r3, #0
 80111fa:	d055      	beq.n	80112a8 <mg_tcpip_poll+0x220>
 80111fc:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8011200:	2b00      	cmp	r3, #0
 8011202:	d051      	beq.n	80112a8 <mg_tcpip_poll+0x220>
    if (ifp->state == MG_TCPIP_STATE_UP) {
 8011204:	68fb      	ldr	r3, [r7, #12]
 8011206:	f893 3094 	ldrb.w	r3, [r3, #148]	@ 0x94
 801120a:	2b01      	cmp	r3, #1
 801120c:	d103      	bne.n	8011216 <mg_tcpip_poll+0x18e>
      tx_dhcp_discover(ifp);  // INIT (4.4.1)
 801120e:	68f8      	ldr	r0, [r7, #12]
 8011210:	f7fd fabe 	bl	800e790 <tx_dhcp_discover>
 8011214:	e048      	b.n	80112a8 <mg_tcpip_poll+0x220>
    } else if (ifp->state == MG_TCPIP_STATE_READY &&
 8011216:	68fb      	ldr	r3, [r7, #12]
 8011218:	f893 3094 	ldrb.w	r3, [r3, #148]	@ 0x94
 801121c:	2b04      	cmp	r3, #4
 801121e:	d143      	bne.n	80112a8 <mg_tcpip_poll+0x220>
               ifp->lease_expire > 0) {  // BOUND / RENEWING / REBINDING
 8011220:	68fb      	ldr	r3, [r7, #12]
 8011222:	e9d3 231e 	ldrd	r2, r3, [r3, #120]	@ 0x78
    } else if (ifp->state == MG_TCPIP_STATE_READY &&
 8011226:	4313      	orrs	r3, r2
 8011228:	d03e      	beq.n	80112a8 <mg_tcpip_poll+0x220>
      if (ifp->now >= ifp->lease_expire) {
 801122a:	68fb      	ldr	r3, [r7, #12]
 801122c:	e9d3 011a 	ldrd	r0, r1, [r3, #104]	@ 0x68
 8011230:	68fb      	ldr	r3, [r7, #12]
 8011232:	e9d3 231e 	ldrd	r2, r3, [r3, #120]	@ 0x78
 8011236:	4290      	cmp	r0, r2
 8011238:	eb71 0303 	sbcs.w	r3, r1, r3
 801123c:	d30a      	bcc.n	8011254 <mg_tcpip_poll+0x1cc>
        ifp->state = MG_TCPIP_STATE_UP, ifp->ip = 0;  // expired, release IP
 801123e:	68fb      	ldr	r3, [r7, #12]
 8011240:	2201      	movs	r2, #1
 8011242:	f883 2094 	strb.w	r2, [r3, #148]	@ 0x94
 8011246:	68fb      	ldr	r3, [r7, #12]
 8011248:	2200      	movs	r2, #0
 801124a:	609a      	str	r2, [r3, #8]
        onstatechange(ifp);
 801124c:	68f8      	ldr	r0, [r7, #12]
 801124e:	f7fc ffb3 	bl	800e1b8 <onstatechange>
 8011252:	e029      	b.n	80112a8 <mg_tcpip_poll+0x220>
      } else if (ifp->now + 30UL * 60UL * 1000UL > ifp->lease_expire &&
 8011254:	68fb      	ldr	r3, [r7, #12]
 8011256:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	@ 0x68
 801125a:	4982      	ldr	r1, [pc, #520]	@ (8011464 <mg_tcpip_poll+0x3dc>)
 801125c:	1854      	adds	r4, r2, r1
 801125e:	f143 0500 	adc.w	r5, r3, #0
 8011262:	68fb      	ldr	r3, [r7, #12]
 8011264:	e9d3 231e 	ldrd	r2, r3, [r3, #120]	@ 0x78
 8011268:	42a2      	cmp	r2, r4
 801126a:	41ab      	sbcs	r3, r5
 801126c:	d21c      	bcs.n	80112a8 <mg_tcpip_poll+0x220>
                 ((ifp->now / 1000) % 60) == 0) {
 801126e:	68fb      	ldr	r3, [r7, #12]
 8011270:	e9d3 011a 	ldrd	r0, r1, [r3, #104]	@ 0x68
 8011274:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8011278:	f04f 0300 	mov.w	r3, #0
 801127c:	f7ef f848 	bl	8000310 <__aeabi_uldivmod>
 8011280:	4602      	mov	r2, r0
 8011282:	460b      	mov	r3, r1
 8011284:	4610      	mov	r0, r2
 8011286:	4619      	mov	r1, r3
 8011288:	f04f 023c 	mov.w	r2, #60	@ 0x3c
 801128c:	f04f 0300 	mov.w	r3, #0
 8011290:	f7ef f83e 	bl	8000310 <__aeabi_uldivmod>
      } else if (ifp->now + 30UL * 60UL * 1000UL > ifp->lease_expire &&
 8011294:	4313      	orrs	r3, r2
 8011296:	d107      	bne.n	80112a8 <mg_tcpip_poll+0x220>
        // hack: 30 min before deadline, try to rebind (4.3.6) every min
        tx_dhcp_request_re(ifp, (uint8_t *) broadcast, ifp->ip, 0xffffffff);
 8011298:	68fb      	ldr	r3, [r7, #12]
 801129a:	689a      	ldr	r2, [r3, #8]
 801129c:	f04f 33ff 	mov.w	r3, #4294967295
 80112a0:	4971      	ldr	r1, [pc, #452]	@ (8011468 <mg_tcpip_poll+0x3e0>)
 80112a2:	68f8      	ldr	r0, [r7, #12]
 80112a4:	f7fd fa42 	bl	800e72c <tx_dhcp_request_re>
      }  // TODO(): Handle T1 (RENEWING) and T2 (REBINDING) (4.4.5)
    }
  }

  // Read data from the network
  if (ifp->driver->rx != NULL) {  // Simple polling driver, returns one frame
 80112a8:	68fb      	ldr	r3, [r7, #12]
 80112aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80112ac:	689b      	ldr	r3, [r3, #8]
 80112ae:	2b00      	cmp	r3, #0
 80112b0:	d01b      	beq.n	80112ea <mg_tcpip_poll+0x262>
    size_t len =
        ifp->driver->rx(ifp->recv_queue.buf, ifp->recv_queue.size, ifp);
 80112b2:	68fb      	ldr	r3, [r7, #12]
 80112b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80112b6:	689b      	ldr	r3, [r3, #8]
 80112b8:	68fa      	ldr	r2, [r7, #12]
 80112ba:	6b90      	ldr	r0, [r2, #56]	@ 0x38
 80112bc:	68fa      	ldr	r2, [r7, #12]
 80112be:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 80112c0:	68fa      	ldr	r2, [r7, #12]
 80112c2:	4798      	blx	r3
 80112c4:	6238      	str	r0, [r7, #32]
    if (len > 0) {
 80112c6:	6a3b      	ldr	r3, [r7, #32]
 80112c8:	2b00      	cmp	r3, #0
 80112ca:	d026      	beq.n	801131a <mg_tcpip_poll+0x292>
      ifp->nrecv++;
 80112cc:	68fb      	ldr	r3, [r7, #12]
 80112ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80112d2:	1c5a      	adds	r2, r3, #1
 80112d4:	68fb      	ldr	r3, [r7, #12]
 80112d6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      mg_tcpip_rx(ifp, ifp->recv_queue.buf, len);
 80112da:	68fb      	ldr	r3, [r7, #12]
 80112dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80112de:	6a3a      	ldr	r2, [r7, #32]
 80112e0:	4619      	mov	r1, r3
 80112e2:	68f8      	ldr	r0, [r7, #12]
 80112e4:	f7ff fdf8 	bl	8010ed8 <mg_tcpip_rx>
 80112e8:	e017      	b.n	801131a <mg_tcpip_poll+0x292>
    }
  } else {  // Complex poll / Interrupt-based driver. Queues recvd frames
    char *buf;
    size_t len = mg_queue_next(&ifp->recv_queue, &buf);
 80112ea:	68fb      	ldr	r3, [r7, #12]
 80112ec:	3338      	adds	r3, #56	@ 0x38
 80112ee:	f107 0214 	add.w	r2, r7, #20
 80112f2:	4611      	mov	r1, r2
 80112f4:	4618      	mov	r0, r3
 80112f6:	f001 faa3 	bl	8012840 <mg_queue_next>
 80112fa:	6278      	str	r0, [r7, #36]	@ 0x24
    if (len > 0) {
 80112fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80112fe:	2b00      	cmp	r3, #0
 8011300:	d00b      	beq.n	801131a <mg_tcpip_poll+0x292>
      mg_tcpip_rx(ifp, buf, len);
 8011302:	697b      	ldr	r3, [r7, #20]
 8011304:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8011306:	4619      	mov	r1, r3
 8011308:	68f8      	ldr	r0, [r7, #12]
 801130a:	f7ff fde5 	bl	8010ed8 <mg_tcpip_rx>
      mg_queue_del(&ifp->recv_queue, len);
 801130e:	68fb      	ldr	r3, [r7, #12]
 8011310:	3338      	adds	r3, #56	@ 0x38
 8011312:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8011314:	4618      	mov	r0, r3
 8011316:	f001 fb11 	bl	801293c <mg_queue_del>
    }
  }

  // Process timeouts
  for (c = ifp->mgr->conns; c != NULL; c = c->next) {
 801131a:	68fb      	ldr	r3, [r7, #12]
 801131c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801131e:	681b      	ldr	r3, [r3, #0]
 8011320:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8011322:	e104      	b.n	801152e <mg_tcpip_poll+0x4a6>
    struct connstate *s = (struct connstate *) (c + 1);
 8011324:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011326:	33b8      	adds	r3, #184	@ 0xb8
 8011328:	61fb      	str	r3, [r7, #28]
    uint32_t rem_ip;
    if ((c->is_udp && !c->is_arplooking) || c->is_listening || c->is_resolving)
 801132a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801132c:	f893 30b5 	ldrb.w	r3, [r3, #181]	@ 0xb5
 8011330:	f003 0301 	and.w	r3, r3, #1
 8011334:	b2db      	uxtb	r3, r3
 8011336:	2b00      	cmp	r3, #0
 8011338:	d008      	beq.n	801134c <mg_tcpip_poll+0x2c4>
 801133a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801133c:	f893 30b4 	ldrb.w	r3, [r3, #180]	@ 0xb4
 8011340:	f003 0310 	and.w	r3, r3, #16
 8011344:	b2db      	uxtb	r3, r3
 8011346:	2b00      	cmp	r3, #0
 8011348:	f000 80eb 	beq.w	8011522 <mg_tcpip_poll+0x49a>
 801134c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801134e:	f893 30b4 	ldrb.w	r3, [r3, #180]	@ 0xb4
 8011352:	f003 0301 	and.w	r3, r3, #1
 8011356:	b2db      	uxtb	r3, r3
 8011358:	2b00      	cmp	r3, #0
 801135a:	f040 80e2 	bne.w	8011522 <mg_tcpip_poll+0x49a>
 801135e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011360:	f893 30b4 	ldrb.w	r3, [r3, #180]	@ 0xb4
 8011364:	f003 0308 	and.w	r3, r3, #8
 8011368:	b2db      	uxtb	r3, r3
 801136a:	2b00      	cmp	r3, #0
 801136c:	f040 80d9 	bne.w	8011522 <mg_tcpip_poll+0x49a>
      continue;
    rem_ip = c->rem.ip4;
 8011370:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011372:	6a1b      	ldr	r3, [r3, #32]
 8011374:	61bb      	str	r3, [r7, #24]
    if (ifp->now > s->timer) {
 8011376:	68fb      	ldr	r3, [r7, #12]
 8011378:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	@ 0x68
 801137c:	69f9      	ldr	r1, [r7, #28]
 801137e:	e9d1 0102 	ldrd	r0, r1, [r1, #8]
 8011382:	4290      	cmp	r0, r2
 8011384:	eb71 0303 	sbcs.w	r3, r1, r3
 8011388:	f080 80ce 	bcs.w	8011528 <mg_tcpip_poll+0x4a0>
      if (s->ttype == MIP_TTYPE_ARP) {
 801138c:	69fb      	ldr	r3, [r7, #28]
 801138e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8011392:	2b02      	cmp	r3, #2
 8011394:	d104      	bne.n	80113a0 <mg_tcpip_poll+0x318>
        mg_error(c, "ARP timeout");
 8011396:	4935      	ldr	r1, [pc, #212]	@ (801146c <mg_tcpip_poll+0x3e4>)
 8011398:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 801139a:	f7f6 fd6b 	bl	8007e74 <mg_error>
 801139e:	e0bb      	b.n	8011518 <mg_tcpip_poll+0x490>
      } else if (c->is_udp) {
 80113a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80113a2:	f893 30b5 	ldrb.w	r3, [r3, #181]	@ 0xb5
 80113a6:	f003 0301 	and.w	r3, r3, #1
 80113aa:	b2db      	uxtb	r3, r3
 80113ac:	2b00      	cmp	r3, #0
 80113ae:	f040 80ba 	bne.w	8011526 <mg_tcpip_poll+0x49e>
        continue;
      } else if (s->ttype == MIP_TTYPE_ACK && s->acked != s->ack) {
 80113b2:	69fb      	ldr	r3, [r7, #28]
 80113b4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80113b8:	2b01      	cmp	r3, #1
 80113ba:	d140      	bne.n	801143e <mg_tcpip_poll+0x3b6>
 80113bc:	69fb      	ldr	r3, [r7, #28]
 80113be:	691a      	ldr	r2, [r3, #16]
 80113c0:	69fb      	ldr	r3, [r7, #28]
 80113c2:	685b      	ldr	r3, [r3, #4]
 80113c4:	429a      	cmp	r2, r3
 80113c6:	d03a      	beq.n	801143e <mg_tcpip_poll+0x3b6>
        MG_VERBOSE(("%lu ack %x %x", c->id, s->seq, s->ack));
 80113c8:	4b22      	ldr	r3, [pc, #136]	@ (8011454 <mg_tcpip_poll+0x3cc>)
 80113ca:	681b      	ldr	r3, [r3, #0]
 80113cc:	2b03      	cmp	r3, #3
 80113ce:	dd0f      	ble.n	80113f0 <mg_tcpip_poll+0x368>
 80113d0:	4b21      	ldr	r3, [pc, #132]	@ (8011458 <mg_tcpip_poll+0x3d0>)
 80113d2:	f241 520e 	movw	r2, #5390	@ 0x150e
 80113d6:	4921      	ldr	r1, [pc, #132]	@ (801145c <mg_tcpip_poll+0x3d4>)
 80113d8:	2004      	movs	r0, #4
 80113da:	f7fb fee7 	bl	800d1ac <mg_log_prefix>
 80113de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80113e0:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 80113e2:	69fb      	ldr	r3, [r7, #28]
 80113e4:	681a      	ldr	r2, [r3, #0]
 80113e6:	69fb      	ldr	r3, [r7, #28]
 80113e8:	685b      	ldr	r3, [r3, #4]
 80113ea:	4821      	ldr	r0, [pc, #132]	@ (8011470 <mg_tcpip_poll+0x3e8>)
 80113ec:	f7fb ff2e 	bl	800d24c <mg_log>
        tx_tcp(ifp, s->mac, rem_ip, TH_ACK, c->loc.port, c->rem.port,
 80113f0:	69fb      	ldr	r3, [r7, #28]
 80113f2:	f103 061a 	add.w	r6, r3, #26
 80113f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80113f8:	8b1c      	ldrh	r4, [r3, #24]
 80113fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80113fc:	8e1d      	ldrh	r5, [r3, #48]	@ 0x30
 80113fe:	69fb      	ldr	r3, [r7, #28]
 8011400:	681b      	ldr	r3, [r3, #0]
 8011402:	4618      	mov	r0, r3
 8011404:	f00f fea4 	bl	8021150 <mg_ntohl>
 8011408:	60b8      	str	r0, [r7, #8]
 801140a:	69fb      	ldr	r3, [r7, #28]
 801140c:	685b      	ldr	r3, [r3, #4]
 801140e:	4618      	mov	r0, r3
 8011410:	f00f fe9e 	bl	8021150 <mg_ntohl>
 8011414:	4603      	mov	r3, r0
 8011416:	2200      	movs	r2, #0
 8011418:	9205      	str	r2, [sp, #20]
 801141a:	2200      	movs	r2, #0
 801141c:	9204      	str	r2, [sp, #16]
 801141e:	9303      	str	r3, [sp, #12]
 8011420:	68bb      	ldr	r3, [r7, #8]
 8011422:	9302      	str	r3, [sp, #8]
 8011424:	9501      	str	r5, [sp, #4]
 8011426:	9400      	str	r4, [sp, #0]
 8011428:	2310      	movs	r3, #16
 801142a:	69ba      	ldr	r2, [r7, #24]
 801142c:	4631      	mov	r1, r6
 801142e:	68f8      	ldr	r0, [r7, #12]
 8011430:	f7fe f822 	bl	800f478 <tx_tcp>
               mg_htonl(s->seq), mg_htonl(s->ack), NULL, 0);
        s->acked = s->ack;
 8011434:	69fb      	ldr	r3, [r7, #28]
 8011436:	685a      	ldr	r2, [r3, #4]
 8011438:	69fb      	ldr	r3, [r7, #28]
 801143a:	611a      	str	r2, [r3, #16]
 801143c:	e06c      	b.n	8011518 <mg_tcpip_poll+0x490>
      } else if (s->ttype == MIP_TTYPE_SYN) {
 801143e:	69fb      	ldr	r3, [r7, #28]
 8011440:	f893 3020 	ldrb.w	r3, [r3, #32]
 8011444:	2b03      	cmp	r3, #3
 8011446:	d117      	bne.n	8011478 <mg_tcpip_poll+0x3f0>
        mg_error(c, "Connection timeout");
 8011448:	490a      	ldr	r1, [pc, #40]	@ (8011474 <mg_tcpip_poll+0x3ec>)
 801144a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 801144c:	f7f6 fd12 	bl	8007e74 <mg_error>
 8011450:	e062      	b.n	8011518 <mg_tcpip_poll+0x490>
 8011452:	bf00      	nop
 8011454:	20000258 	.word	0x20000258
 8011458:	08028914 	.word	0x08028914
 801145c:	08025140 	.word	0x08025140
 8011460:	080266d8 	.word	0x080266d8
 8011464:	001b7740 	.word	0x001b7740
 8011468:	0802834c 	.word	0x0802834c
 801146c:	080266e8 	.word	0x080266e8
 8011470:	080266f4 	.word	0x080266f4
 8011474:	08026704 	.word	0x08026704
      } else if (s->ttype == MIP_TTYPE_FIN) {
 8011478:	69fb      	ldr	r3, [r7, #28]
 801147a:	f893 3020 	ldrb.w	r3, [r3, #32]
 801147e:	2b04      	cmp	r3, #4
 8011480:	d107      	bne.n	8011492 <mg_tcpip_poll+0x40a>
        c->is_closing = 1;
 8011482:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8011484:	f892 30b5 	ldrb.w	r3, [r2, #181]	@ 0xb5
 8011488:	f043 0320 	orr.w	r3, r3, #32
 801148c:	f882 30b5 	strb.w	r3, [r2, #181]	@ 0xb5
        continue;
 8011490:	e04a      	b.n	8011528 <mg_tcpip_poll+0x4a0>
      } else {
        if (s->tmiss++ > 2) {
 8011492:	69fb      	ldr	r3, [r7, #28]
 8011494:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8011498:	1c5a      	adds	r2, r3, #1
 801149a:	b2d1      	uxtb	r1, r2
 801149c:	69fa      	ldr	r2, [r7, #28]
 801149e:	f882 1021 	strb.w	r1, [r2, #33]	@ 0x21
 80114a2:	2b02      	cmp	r3, #2
 80114a4:	d904      	bls.n	80114b0 <mg_tcpip_poll+0x428>
          mg_error(c, "keepalive");
 80114a6:	4926      	ldr	r1, [pc, #152]	@ (8011540 <mg_tcpip_poll+0x4b8>)
 80114a8:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80114aa:	f7f6 fce3 	bl	8007e74 <mg_error>
 80114ae:	e033      	b.n	8011518 <mg_tcpip_poll+0x490>
        } else {
          MG_VERBOSE(("%lu keepalive", c->id));
 80114b0:	4b24      	ldr	r3, [pc, #144]	@ (8011544 <mg_tcpip_poll+0x4bc>)
 80114b2:	681b      	ldr	r3, [r3, #0]
 80114b4:	2b03      	cmp	r3, #3
 80114b6:	dd0c      	ble.n	80114d2 <mg_tcpip_poll+0x44a>
 80114b8:	4b23      	ldr	r3, [pc, #140]	@ (8011548 <mg_tcpip_poll+0x4c0>)
 80114ba:	f241 521b 	movw	r2, #5403	@ 0x151b
 80114be:	4923      	ldr	r1, [pc, #140]	@ (801154c <mg_tcpip_poll+0x4c4>)
 80114c0:	2004      	movs	r0, #4
 80114c2:	f7fb fe73 	bl	800d1ac <mg_log_prefix>
 80114c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80114c8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80114ca:	4619      	mov	r1, r3
 80114cc:	4820      	ldr	r0, [pc, #128]	@ (8011550 <mg_tcpip_poll+0x4c8>)
 80114ce:	f7fb febd 	bl	800d24c <mg_log>
          tx_tcp(ifp, s->mac, rem_ip, TH_ACK, c->loc.port, c->rem.port,
 80114d2:	69fb      	ldr	r3, [r7, #28]
 80114d4:	f103 061a 	add.w	r6, r3, #26
 80114d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80114da:	8b1c      	ldrh	r4, [r3, #24]
 80114dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80114de:	8e1d      	ldrh	r5, [r3, #48]	@ 0x30
                 mg_htonl(s->seq - 1), mg_htonl(s->ack), NULL, 0);
 80114e0:	69fb      	ldr	r3, [r7, #28]
 80114e2:	681b      	ldr	r3, [r3, #0]
          tx_tcp(ifp, s->mac, rem_ip, TH_ACK, c->loc.port, c->rem.port,
 80114e4:	3b01      	subs	r3, #1
 80114e6:	4618      	mov	r0, r3
 80114e8:	f00f fe32 	bl	8021150 <mg_ntohl>
 80114ec:	60b8      	str	r0, [r7, #8]
 80114ee:	69fb      	ldr	r3, [r7, #28]
 80114f0:	685b      	ldr	r3, [r3, #4]
 80114f2:	4618      	mov	r0, r3
 80114f4:	f00f fe2c 	bl	8021150 <mg_ntohl>
 80114f8:	4603      	mov	r3, r0
 80114fa:	2200      	movs	r2, #0
 80114fc:	9205      	str	r2, [sp, #20]
 80114fe:	2200      	movs	r2, #0
 8011500:	9204      	str	r2, [sp, #16]
 8011502:	9303      	str	r3, [sp, #12]
 8011504:	68bb      	ldr	r3, [r7, #8]
 8011506:	9302      	str	r3, [sp, #8]
 8011508:	9501      	str	r5, [sp, #4]
 801150a:	9400      	str	r4, [sp, #0]
 801150c:	2310      	movs	r3, #16
 801150e:	69ba      	ldr	r2, [r7, #24]
 8011510:	4631      	mov	r1, r6
 8011512:	68f8      	ldr	r0, [r7, #12]
 8011514:	f7fd ffb0 	bl	800f478 <tx_tcp>
        }
      }

      settmout(c, MIP_TTYPE_KEEPALIVE);
 8011518:	2100      	movs	r1, #0
 801151a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 801151c:	f7fc fd62 	bl	800dfe4 <settmout>
 8011520:	e002      	b.n	8011528 <mg_tcpip_poll+0x4a0>
      continue;
 8011522:	bf00      	nop
 8011524:	e000      	b.n	8011528 <mg_tcpip_poll+0x4a0>
        continue;
 8011526:	bf00      	nop
  for (c = ifp->mgr->conns; c != NULL; c = c->next) {
 8011528:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801152a:	681b      	ldr	r3, [r3, #0]
 801152c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801152e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011530:	2b00      	cmp	r3, #0
 8011532:	f47f aef7 	bne.w	8011324 <mg_tcpip_poll+0x29c>
 8011536:	e000      	b.n	801153a <mg_tcpip_poll+0x4b2>
  if (ifp->state == MG_TCPIP_STATE_DOWN) return;
 8011538:	bf00      	nop
    }
  }
}
 801153a:	3734      	adds	r7, #52	@ 0x34
 801153c:	46bd      	mov	sp, r7
 801153e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011540:	08026718 	.word	0x08026718
 8011544:	20000258 	.word	0x20000258
 8011548:	08028914 	.word	0x08028914
 801154c:	08025140 	.word	0x08025140
 8011550:	08026724 	.word	0x08026724

08011554 <mg_tcpip_qwrite>:

// This function executes in interrupt context, thus it should copy data
// somewhere fast. Note that newlib's malloc is not thread safe, thus use
// our lock-free queue with preallocated buffer to copy data and return asap
void mg_tcpip_qwrite(void *buf, size_t len, struct mg_tcpip_if *ifp) {
 8011554:	b580      	push	{r7, lr}
 8011556:	b086      	sub	sp, #24
 8011558:	af00      	add	r7, sp, #0
 801155a:	60f8      	str	r0, [r7, #12]
 801155c:	60b9      	str	r1, [r7, #8]
 801155e:	607a      	str	r2, [r7, #4]
  char *p;
  if (mg_queue_book(&ifp->recv_queue, &p, len) >= len) {
 8011560:	687b      	ldr	r3, [r7, #4]
 8011562:	3338      	adds	r3, #56	@ 0x38
 8011564:	f107 0114 	add.w	r1, r7, #20
 8011568:	68ba      	ldr	r2, [r7, #8]
 801156a:	4618      	mov	r0, r3
 801156c:	f001 f910 	bl	8012790 <mg_queue_book>
 8011570:	4602      	mov	r2, r0
 8011572:	68bb      	ldr	r3, [r7, #8]
 8011574:	4293      	cmp	r3, r2
 8011576:	d813      	bhi.n	80115a0 <mg_tcpip_qwrite+0x4c>
    memcpy(p, buf, len);
 8011578:	697b      	ldr	r3, [r7, #20]
 801157a:	68ba      	ldr	r2, [r7, #8]
 801157c:	68f9      	ldr	r1, [r7, #12]
 801157e:	4618      	mov	r0, r3
 8011580:	f013 f901 	bl	8024786 <memcpy>
    mg_queue_add(&ifp->recv_queue, len);
 8011584:	687b      	ldr	r3, [r7, #4]
 8011586:	3338      	adds	r3, #56	@ 0x38
 8011588:	68b9      	ldr	r1, [r7, #8]
 801158a:	4618      	mov	r0, r3
 801158c:	f001 f99e 	bl	80128cc <mg_queue_add>
    ifp->nrecv++;
 8011590:	687b      	ldr	r3, [r7, #4]
 8011592:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8011596:	1c5a      	adds	r2, r3, #1
 8011598:	687b      	ldr	r3, [r7, #4]
 801159a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  } else {
    ifp->ndrop++;
  }
}
 801159e:	e006      	b.n	80115ae <mg_tcpip_qwrite+0x5a>
    ifp->ndrop++;
 80115a0:	687b      	ldr	r3, [r7, #4]
 80115a2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80115a6:	1c5a      	adds	r2, r3, #1
 80115a8:	687b      	ldr	r3, [r7, #4]
 80115aa:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
}
 80115ae:	bf00      	nop
 80115b0:	3718      	adds	r7, #24
 80115b2:	46bd      	mov	sp, r7
 80115b4:	bd80      	pop	{r7, pc}
	...

080115b8 <mg_tcpip_init>:

void mg_tcpip_init(struct mg_mgr *mgr, struct mg_tcpip_if *ifp) {
 80115b8:	b580      	push	{r7, lr}
 80115ba:	b084      	sub	sp, #16
 80115bc:	af00      	add	r7, sp, #0
 80115be:	6078      	str	r0, [r7, #4]
 80115c0:	6039      	str	r1, [r7, #0]
  // If MAC address is not set, make a random one
  if (ifp->mac[0] == 0 && ifp->mac[1] == 0 && ifp->mac[2] == 0 &&
 80115c2:	683b      	ldr	r3, [r7, #0]
 80115c4:	781b      	ldrb	r3, [r3, #0]
 80115c6:	2b00      	cmp	r3, #0
 80115c8:	d12d      	bne.n	8011626 <mg_tcpip_init+0x6e>
 80115ca:	683b      	ldr	r3, [r7, #0]
 80115cc:	785b      	ldrb	r3, [r3, #1]
 80115ce:	2b00      	cmp	r3, #0
 80115d0:	d129      	bne.n	8011626 <mg_tcpip_init+0x6e>
 80115d2:	683b      	ldr	r3, [r7, #0]
 80115d4:	789b      	ldrb	r3, [r3, #2]
 80115d6:	2b00      	cmp	r3, #0
 80115d8:	d125      	bne.n	8011626 <mg_tcpip_init+0x6e>
      ifp->mac[3] == 0 && ifp->mac[4] == 0 && ifp->mac[5] == 0) {
 80115da:	683b      	ldr	r3, [r7, #0]
 80115dc:	78db      	ldrb	r3, [r3, #3]
  if (ifp->mac[0] == 0 && ifp->mac[1] == 0 && ifp->mac[2] == 0 &&
 80115de:	2b00      	cmp	r3, #0
 80115e0:	d121      	bne.n	8011626 <mg_tcpip_init+0x6e>
      ifp->mac[3] == 0 && ifp->mac[4] == 0 && ifp->mac[5] == 0) {
 80115e2:	683b      	ldr	r3, [r7, #0]
 80115e4:	791b      	ldrb	r3, [r3, #4]
 80115e6:	2b00      	cmp	r3, #0
 80115e8:	d11d      	bne.n	8011626 <mg_tcpip_init+0x6e>
 80115ea:	683b      	ldr	r3, [r7, #0]
 80115ec:	795b      	ldrb	r3, [r3, #5]
 80115ee:	2b00      	cmp	r3, #0
 80115f0:	d119      	bne.n	8011626 <mg_tcpip_init+0x6e>
    ifp->mac[0] = 0x02;  // Locally administered, unicast
 80115f2:	683b      	ldr	r3, [r7, #0]
 80115f4:	2202      	movs	r2, #2
 80115f6:	701a      	strb	r2, [r3, #0]
    mg_random(&ifp->mac[1], sizeof(ifp->mac) - 1);
 80115f8:	683b      	ldr	r3, [r7, #0]
 80115fa:	3301      	adds	r3, #1
 80115fc:	2105      	movs	r1, #5
 80115fe:	4618      	mov	r0, r3
 8011600:	f7ef f87a 	bl	80006f8 <mg_random>
    MG_INFO(("MAC not set. Generated random: %M", mg_print_mac, ifp->mac));
 8011604:	4b58      	ldr	r3, [pc, #352]	@ (8011768 <mg_tcpip_init+0x1b0>)
 8011606:	681b      	ldr	r3, [r3, #0]
 8011608:	2b01      	cmp	r3, #1
 801160a:	dd0c      	ble.n	8011626 <mg_tcpip_init+0x6e>
 801160c:	4b57      	ldr	r3, [pc, #348]	@ (801176c <mg_tcpip_init+0x1b4>)
 801160e:	f241 523a 	movw	r2, #5434	@ 0x153a
 8011612:	4957      	ldr	r1, [pc, #348]	@ (8011770 <mg_tcpip_init+0x1b8>)
 8011614:	2002      	movs	r0, #2
 8011616:	f7fb fdc9 	bl	800d1ac <mg_log_prefix>
 801161a:	683b      	ldr	r3, [r7, #0]
 801161c:	461a      	mov	r2, r3
 801161e:	4955      	ldr	r1, [pc, #340]	@ (8011774 <mg_tcpip_init+0x1bc>)
 8011620:	4855      	ldr	r0, [pc, #340]	@ (8011778 <mg_tcpip_init+0x1c0>)
 8011622:	f7fb fe13 	bl	800d24c <mg_log>
  }

  // If DHCP name is not set, use "mip"
  if (ifp->dhcp_name[0] == '\0') {
 8011626:	683b      	ldr	r3, [r7, #0]
 8011628:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 801162c:	2b00      	cmp	r3, #0
 801162e:	d106      	bne.n	801163e <mg_tcpip_init+0x86>
    memcpy(ifp->dhcp_name, "mip", 4);
 8011630:	683b      	ldr	r3, [r7, #0]
 8011632:	3348      	adds	r3, #72	@ 0x48
 8011634:	2204      	movs	r2, #4
 8011636:	4951      	ldr	r1, [pc, #324]	@ (801177c <mg_tcpip_init+0x1c4>)
 8011638:	4618      	mov	r0, r3
 801163a:	f013 f8a4 	bl	8024786 <memcpy>
  }
  ifp->dhcp_name[sizeof(ifp->dhcp_name) - 1] = '\0';  // Just in case
 801163e:	683b      	ldr	r3, [r7, #0]
 8011640:	2200      	movs	r2, #0
 8011642:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59

  if (ifp->driver->init && !ifp->driver->init(ifp)) {
 8011646:	683b      	ldr	r3, [r7, #0]
 8011648:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801164a:	681b      	ldr	r3, [r3, #0]
 801164c:	2b00      	cmp	r3, #0
 801164e:	d019      	beq.n	8011684 <mg_tcpip_init+0xcc>
 8011650:	683b      	ldr	r3, [r7, #0]
 8011652:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011654:	681b      	ldr	r3, [r3, #0]
 8011656:	6838      	ldr	r0, [r7, #0]
 8011658:	4798      	blx	r3
 801165a:	4603      	mov	r3, r0
 801165c:	f083 0301 	eor.w	r3, r3, #1
 8011660:	b2db      	uxtb	r3, r3
 8011662:	2b00      	cmp	r3, #0
 8011664:	d00e      	beq.n	8011684 <mg_tcpip_init+0xcc>
    MG_ERROR(("driver init failed"));
 8011666:	4b40      	ldr	r3, [pc, #256]	@ (8011768 <mg_tcpip_init+0x1b0>)
 8011668:	681b      	ldr	r3, [r3, #0]
 801166a:	2b00      	cmp	r3, #0
 801166c:	dd78      	ble.n	8011760 <mg_tcpip_init+0x1a8>
 801166e:	4b3f      	ldr	r3, [pc, #252]	@ (801176c <mg_tcpip_init+0x1b4>)
 8011670:	f241 5244 	movw	r2, #5444	@ 0x1544
 8011674:	493e      	ldr	r1, [pc, #248]	@ (8011770 <mg_tcpip_init+0x1b8>)
 8011676:	2001      	movs	r0, #1
 8011678:	f7fb fd98 	bl	800d1ac <mg_log_prefix>
 801167c:	4840      	ldr	r0, [pc, #256]	@ (8011780 <mg_tcpip_init+0x1c8>)
 801167e:	f7fb fde5 	bl	800d24c <mg_log>
 8011682:	e06d      	b.n	8011760 <mg_tcpip_init+0x1a8>
  } else {
    size_t framesize = 1540;
 8011684:	f240 6304 	movw	r3, #1540	@ 0x604
 8011688:	60fb      	str	r3, [r7, #12]
    ifp->tx.buf = (char *) mg_calloc(1, framesize), ifp->tx.len = framesize;
 801168a:	68f9      	ldr	r1, [r7, #12]
 801168c:	2001      	movs	r0, #1
 801168e:	f7f5 fbc0 	bl	8006e12 <mg_calloc>
 8011692:	4602      	mov	r2, r0
 8011694:	683b      	ldr	r3, [r7, #0]
 8011696:	615a      	str	r2, [r3, #20]
 8011698:	683b      	ldr	r3, [r7, #0]
 801169a:	68fa      	ldr	r2, [r7, #12]
 801169c:	619a      	str	r2, [r3, #24]
    if (ifp->recv_queue.size == 0)
 801169e:	683b      	ldr	r3, [r7, #0]
 80116a0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80116a2:	2b00      	cmp	r3, #0
 80116a4:	d10a      	bne.n	80116bc <mg_tcpip_init+0x104>
      ifp->recv_queue.size = ifp->driver->rx ? framesize : 8192;
 80116a6:	683b      	ldr	r3, [r7, #0]
 80116a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80116aa:	689b      	ldr	r3, [r3, #8]
 80116ac:	2b00      	cmp	r3, #0
 80116ae:	d001      	beq.n	80116b4 <mg_tcpip_init+0xfc>
 80116b0:	68fb      	ldr	r3, [r7, #12]
 80116b2:	e001      	b.n	80116b8 <mg_tcpip_init+0x100>
 80116b4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80116b8:	683a      	ldr	r2, [r7, #0]
 80116ba:	63d3      	str	r3, [r2, #60]	@ 0x3c
    ifp->recv_queue.buf = (char *) mg_calloc(1, ifp->recv_queue.size);
 80116bc:	683b      	ldr	r3, [r7, #0]
 80116be:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80116c0:	4619      	mov	r1, r3
 80116c2:	2001      	movs	r0, #1
 80116c4:	f7f5 fba5 	bl	8006e12 <mg_calloc>
 80116c8:	4602      	mov	r2, r0
 80116ca:	683b      	ldr	r3, [r7, #0]
 80116cc:	639a      	str	r2, [r3, #56]	@ 0x38
    ifp->timer_1000ms = mg_millis();
 80116ce:	f00f fd1b 	bl	8021108 <mg_millis>
 80116d2:	4602      	mov	r2, r0
 80116d4:	460b      	mov	r3, r1
 80116d6:	6839      	ldr	r1, [r7, #0]
 80116d8:	e9c1 231c 	strd	r2, r3, [r1, #112]	@ 0x70
    mgr->ifp = ifp;
 80116dc:	687b      	ldr	r3, [r7, #4]
 80116de:	683a      	ldr	r2, [r7, #0]
 80116e0:	639a      	str	r2, [r3, #56]	@ 0x38
    ifp->mgr = mgr;
 80116e2:	683b      	ldr	r3, [r7, #0]
 80116e4:	687a      	ldr	r2, [r7, #4]
 80116e6:	635a      	str	r2, [r3, #52]	@ 0x34
    ifp->mtu = MG_TCPIP_MTU_DEFAULT;
 80116e8:	683b      	ldr	r3, [r7, #0]
 80116ea:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 80116ee:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
    mgr->extraconnsize = sizeof(struct connstate);
 80116f2:	687b      	ldr	r3, [r7, #4]
 80116f4:	2238      	movs	r2, #56	@ 0x38
 80116f6:	63da      	str	r2, [r3, #60]	@ 0x3c
    if (ifp->ip == 0) ifp->enable_dhcp_client = true;
 80116f8:	683b      	ldr	r3, [r7, #0]
 80116fa:	689b      	ldr	r3, [r3, #8]
 80116fc:	2b00      	cmp	r3, #0
 80116fe:	d102      	bne.n	8011706 <mg_tcpip_init+0x14e>
 8011700:	683b      	ldr	r3, [r7, #0]
 8011702:	2201      	movs	r2, #1
 8011704:	771a      	strb	r2, [r3, #28]
    memset(ifp->gwmac, 255, sizeof(ifp->gwmac));  // Set best-effort to bcast
 8011706:	683b      	ldr	r3, [r7, #0]
 8011708:	335c      	adds	r3, #92	@ 0x5c
 801170a:	2206      	movs	r2, #6
 801170c:	21ff      	movs	r1, #255	@ 0xff
 801170e:	4618      	mov	r0, r3
 8011710:	f012 febc 	bl	802448c <memset>
    mg_random(&ifp->eport, sizeof(ifp->eport));   // Random from 0 to 65535
 8011714:	683b      	ldr	r3, [r7, #0]
 8011716:	3380      	adds	r3, #128	@ 0x80
 8011718:	2102      	movs	r1, #2
 801171a:	4618      	mov	r0, r3
 801171c:	f7ee ffec 	bl	80006f8 <mg_random>
    ifp->eport |= MG_EPHEMERAL_PORT_BASE;         // Random from
 8011720:	683b      	ldr	r3, [r7, #0]
 8011722:	f8b3 2080 	ldrh.w	r2, [r3, #128]	@ 0x80
 8011726:	4b17      	ldr	r3, [pc, #92]	@ (8011784 <mg_tcpip_init+0x1cc>)
 8011728:	4313      	orrs	r3, r2
 801172a:	b29a      	uxth	r2, r3
 801172c:	683b      	ldr	r3, [r7, #0]
 801172e:	f8a3 2080 	strh.w	r2, [r3, #128]	@ 0x80
                                           // MG_EPHEMERAL_PORT_BASE to 65535
    if (ifp->tx.buf == NULL || ifp->recv_queue.buf == NULL) MG_ERROR(("OOM"));
 8011732:	683b      	ldr	r3, [r7, #0]
 8011734:	695b      	ldr	r3, [r3, #20]
 8011736:	2b00      	cmp	r3, #0
 8011738:	d003      	beq.n	8011742 <mg_tcpip_init+0x18a>
 801173a:	683b      	ldr	r3, [r7, #0]
 801173c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801173e:	2b00      	cmp	r3, #0
 8011740:	d10e      	bne.n	8011760 <mg_tcpip_init+0x1a8>
 8011742:	4b09      	ldr	r3, [pc, #36]	@ (8011768 <mg_tcpip_init+0x1b0>)
 8011744:	681b      	ldr	r3, [r3, #0]
 8011746:	2b00      	cmp	r3, #0
 8011748:	dd0a      	ble.n	8011760 <mg_tcpip_init+0x1a8>
 801174a:	4b08      	ldr	r3, [pc, #32]	@ (801176c <mg_tcpip_init+0x1b4>)
 801174c:	f241 5255 	movw	r2, #5461	@ 0x1555
 8011750:	4907      	ldr	r1, [pc, #28]	@ (8011770 <mg_tcpip_init+0x1b8>)
 8011752:	2001      	movs	r0, #1
 8011754:	f7fb fd2a 	bl	800d1ac <mg_log_prefix>
 8011758:	480b      	ldr	r0, [pc, #44]	@ (8011788 <mg_tcpip_init+0x1d0>)
 801175a:	f7fb fd77 	bl	800d24c <mg_log>
  }
}
 801175e:	e7ff      	b.n	8011760 <mg_tcpip_init+0x1a8>
 8011760:	bf00      	nop
 8011762:	3710      	adds	r7, #16
 8011764:	46bd      	mov	sp, r7
 8011766:	bd80      	pop	{r7, pc}
 8011768:	20000258 	.word	0x20000258
 801176c:	08028924 	.word	0x08028924
 8011770:	08025140 	.word	0x08025140
 8011774:	080124a9 	.word	0x080124a9
 8011778:	08026734 	.word	0x08026734
 801177c:	08026758 	.word	0x08026758
 8011780:	0802675c 	.word	0x0802675c
 8011784:	ffff8000 	.word	0xffff8000
 8011788:	080260c0 	.word	0x080260c0

0801178c <send_syn>:
  mg_free(ifp->recv_queue.buf);
  mg_free(ifp->tx.buf);
  mg_free(ifp->dns4_url);
}

static void send_syn(struct mg_connection *c) {
 801178c:	b590      	push	{r4, r7, lr}
 801178e:	b08d      	sub	sp, #52	@ 0x34
 8011790:	af06      	add	r7, sp, #24
 8011792:	6078      	str	r0, [r7, #4]
  struct connstate *s = (struct connstate *) (c + 1);
 8011794:	687b      	ldr	r3, [r7, #4]
 8011796:	33b8      	adds	r3, #184	@ 0xb8
 8011798:	617b      	str	r3, [r7, #20]
  uint32_t isn = mg_htonl((uint32_t) mg_ntohs(c->loc.port));
 801179a:	687b      	ldr	r3, [r7, #4]
 801179c:	8b1b      	ldrh	r3, [r3, #24]
 801179e:	4618      	mov	r0, r3
 80117a0:	f00f fcbf 	bl	8021122 <mg_ntohs>
 80117a4:	4603      	mov	r3, r0
 80117a6:	4618      	mov	r0, r3
 80117a8:	f00f fcd2 	bl	8021150 <mg_ntohl>
 80117ac:	6138      	str	r0, [r7, #16]
  uint32_t rem_ip = c->rem.ip4;
 80117ae:	687b      	ldr	r3, [r7, #4]
 80117b0:	6a1b      	ldr	r3, [r3, #32]
 80117b2:	60fb      	str	r3, [r7, #12]
  tx_tcp(c->mgr->ifp, s->mac, rem_ip, TH_SYN, c->loc.port, c->rem.port, isn, 0,
 80117b4:	687b      	ldr	r3, [r7, #4]
 80117b6:	685b      	ldr	r3, [r3, #4]
 80117b8:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 80117ba:	697b      	ldr	r3, [r7, #20]
 80117bc:	f103 041a 	add.w	r4, r3, #26
 80117c0:	687b      	ldr	r3, [r7, #4]
 80117c2:	8b1b      	ldrh	r3, [r3, #24]
 80117c4:	687a      	ldr	r2, [r7, #4]
 80117c6:	8e12      	ldrh	r2, [r2, #48]	@ 0x30
 80117c8:	2100      	movs	r1, #0
 80117ca:	9105      	str	r1, [sp, #20]
 80117cc:	2100      	movs	r1, #0
 80117ce:	9104      	str	r1, [sp, #16]
 80117d0:	2100      	movs	r1, #0
 80117d2:	9103      	str	r1, [sp, #12]
 80117d4:	6939      	ldr	r1, [r7, #16]
 80117d6:	9102      	str	r1, [sp, #8]
 80117d8:	9201      	str	r2, [sp, #4]
 80117da:	9300      	str	r3, [sp, #0]
 80117dc:	2302      	movs	r3, #2
 80117de:	68fa      	ldr	r2, [r7, #12]
 80117e0:	4621      	mov	r1, r4
 80117e2:	f7fd fe49 	bl	800f478 <tx_tcp>
         NULL, 0);
}
 80117e6:	bf00      	nop
 80117e8:	371c      	adds	r7, #28
 80117ea:	46bd      	mov	sp, r7
 80117ec:	bd90      	pop	{r4, r7, pc}

080117ee <mac_resolved>:

static void mac_resolved(struct mg_connection *c) {
 80117ee:	b580      	push	{r7, lr}
 80117f0:	b082      	sub	sp, #8
 80117f2:	af00      	add	r7, sp, #0
 80117f4:	6078      	str	r0, [r7, #4]
  if (c->is_udp) {
 80117f6:	687b      	ldr	r3, [r7, #4]
 80117f8:	f893 30b5 	ldrb.w	r3, [r3, #181]	@ 0xb5
 80117fc:	f003 0301 	and.w	r3, r3, #1
 8011800:	b2db      	uxtb	r3, r3
 8011802:	2b00      	cmp	r3, #0
 8011804:	d00c      	beq.n	8011820 <mac_resolved+0x32>
    c->is_connecting = 0;
 8011806:	687a      	ldr	r2, [r7, #4]
 8011808:	f892 30b4 	ldrb.w	r3, [r2, #180]	@ 0xb4
 801180c:	f023 0320 	bic.w	r3, r3, #32
 8011810:	f882 30b4 	strb.w	r3, [r2, #180]	@ 0xb4
    mg_call(c, MG_EV_CONNECT, NULL);
 8011814:	2200      	movs	r2, #0
 8011816:	2104      	movs	r1, #4
 8011818:	6878      	ldr	r0, [r7, #4]
 801181a:	f7f6 fb09 	bl	8007e30 <mg_call>
  } else {
    send_syn(c);
    settmout(c, MIP_TTYPE_SYN);
  }
}
 801181e:	e006      	b.n	801182e <mac_resolved+0x40>
    send_syn(c);
 8011820:	6878      	ldr	r0, [r7, #4]
 8011822:	f7ff ffb3 	bl	801178c <send_syn>
    settmout(c, MIP_TTYPE_SYN);
 8011826:	2103      	movs	r1, #3
 8011828:	6878      	ldr	r0, [r7, #4]
 801182a:	f7fc fbdb 	bl	800dfe4 <settmout>
}
 801182e:	bf00      	nop
 8011830:	3708      	adds	r7, #8
 8011832:	46bd      	mov	sp, r7
 8011834:	bd80      	pop	{r7, pc}
	...

08011838 <ip4_mcastmac>:

static void ip4_mcastmac(uint8_t *mac, uint32_t *ip) {
 8011838:	b580      	push	{r7, lr}
 801183a:	b084      	sub	sp, #16
 801183c:	af00      	add	r7, sp, #0
 801183e:	6078      	str	r0, [r7, #4]
 8011840:	6039      	str	r1, [r7, #0]
  uint8_t mcastp[3] = {0x01, 0x00, 0x5E};  // multicast group MAC
 8011842:	4a13      	ldr	r2, [pc, #76]	@ (8011890 <ip4_mcastmac+0x58>)
 8011844:	f107 030c 	add.w	r3, r7, #12
 8011848:	6812      	ldr	r2, [r2, #0]
 801184a:	4611      	mov	r1, r2
 801184c:	8019      	strh	r1, [r3, #0]
 801184e:	3302      	adds	r3, #2
 8011850:	0c12      	lsrs	r2, r2, #16
 8011852:	701a      	strb	r2, [r3, #0]
  memcpy(mac, mcastp, 3);
 8011854:	687b      	ldr	r3, [r7, #4]
 8011856:	461a      	mov	r2, r3
 8011858:	f107 030c 	add.w	r3, r7, #12
 801185c:	8819      	ldrh	r1, [r3, #0]
 801185e:	789b      	ldrb	r3, [r3, #2]
 8011860:	8011      	strh	r1, [r2, #0]
 8011862:	7093      	strb	r3, [r2, #2]
  memcpy(mac + 3, ((uint8_t *) ip) + 1, 3);  // 23 LSb
 8011864:	687b      	ldr	r3, [r7, #4]
 8011866:	1cd8      	adds	r0, r3, #3
 8011868:	683b      	ldr	r3, [r7, #0]
 801186a:	3301      	adds	r3, #1
 801186c:	2203      	movs	r2, #3
 801186e:	4619      	mov	r1, r3
 8011870:	f012 ff89 	bl	8024786 <memcpy>
  mac[3] &= 0x7F;
 8011874:	687b      	ldr	r3, [r7, #4]
 8011876:	3303      	adds	r3, #3
 8011878:	781a      	ldrb	r2, [r3, #0]
 801187a:	687b      	ldr	r3, [r7, #4]
 801187c:	3303      	adds	r3, #3
 801187e:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8011882:	b2d2      	uxtb	r2, r2
 8011884:	701a      	strb	r2, [r3, #0]
}
 8011886:	bf00      	nop
 8011888:	3710      	adds	r7, #16
 801188a:	46bd      	mov	sp, r7
 801188c:	bd80      	pop	{r7, pc}
 801188e:	bf00      	nop
 8011890:	08026770 	.word	0x08026770

08011894 <mg_connect_resolved>:

void mg_connect_resolved(struct mg_connection *c) {
 8011894:	b580      	push	{r7, lr}
 8011896:	b08a      	sub	sp, #40	@ 0x28
 8011898:	af02      	add	r7, sp, #8
 801189a:	6078      	str	r0, [r7, #4]
  struct mg_tcpip_if *ifp = c->mgr->ifp;
 801189c:	687b      	ldr	r3, [r7, #4]
 801189e:	685b      	ldr	r3, [r3, #4]
 80118a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80118a2:	61fb      	str	r3, [r7, #28]
  uint32_t rem_ip = c->rem.ip4;
 80118a4:	687b      	ldr	r3, [r7, #4]
 80118a6:	6a1b      	ldr	r3, [r3, #32]
 80118a8:	60fb      	str	r3, [r7, #12]
  c->is_resolving = 0;
 80118aa:	687a      	ldr	r2, [r7, #4]
 80118ac:	f892 30b4 	ldrb.w	r3, [r2, #180]	@ 0xb4
 80118b0:	f023 0308 	bic.w	r3, r3, #8
 80118b4:	f882 30b4 	strb.w	r3, [r2, #180]	@ 0xb4
  if (ifp->eport < MG_EPHEMERAL_PORT_BASE) ifp->eport = MG_EPHEMERAL_PORT_BASE;
 80118b8:	69fb      	ldr	r3, [r7, #28]
 80118ba:	f8b3 3080 	ldrh.w	r3, [r3, #128]	@ 0x80
 80118be:	b21b      	sxth	r3, r3
 80118c0:	2b00      	cmp	r3, #0
 80118c2:	db04      	blt.n	80118ce <mg_connect_resolved+0x3a>
 80118c4:	69fb      	ldr	r3, [r7, #28]
 80118c6:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80118ca:	f8a3 2080 	strh.w	r2, [r3, #128]	@ 0x80
  c->loc.ip4 = ifp->ip;
 80118ce:	69fb      	ldr	r3, [r7, #28]
 80118d0:	689a      	ldr	r2, [r3, #8]
 80118d2:	687b      	ldr	r3, [r7, #4]
 80118d4:	609a      	str	r2, [r3, #8]
  c->loc.port = mg_htons(ifp->eport++);
 80118d6:	69fb      	ldr	r3, [r7, #28]
 80118d8:	f8b3 3080 	ldrh.w	r3, [r3, #128]	@ 0x80
 80118dc:	1c5a      	adds	r2, r3, #1
 80118de:	b291      	uxth	r1, r2
 80118e0:	69fa      	ldr	r2, [r7, #28]
 80118e2:	f8a2 1080 	strh.w	r1, [r2, #128]	@ 0x80
 80118e6:	4618      	mov	r0, r3
 80118e8:	f00f fc1b 	bl	8021122 <mg_ntohs>
 80118ec:	4603      	mov	r3, r0
 80118ee:	461a      	mov	r2, r3
 80118f0:	687b      	ldr	r3, [r7, #4]
 80118f2:	831a      	strh	r2, [r3, #24]
  MG_DEBUG(("%lu %M -> %M", c->id, mg_print_ip_port, &c->loc, mg_print_ip_port,
 80118f4:	4b53      	ldr	r3, [pc, #332]	@ (8011a44 <mg_connect_resolved+0x1b0>)
 80118f6:	681b      	ldr	r3, [r3, #0]
 80118f8:	2b02      	cmp	r3, #2
 80118fa:	dd15      	ble.n	8011928 <mg_connect_resolved+0x94>
 80118fc:	4b52      	ldr	r3, [pc, #328]	@ (8011a48 <mg_connect_resolved+0x1b4>)
 80118fe:	f241 527f 	movw	r2, #5503	@ 0x157f
 8011902:	4952      	ldr	r1, [pc, #328]	@ (8011a4c <mg_connect_resolved+0x1b8>)
 8011904:	2003      	movs	r0, #3
 8011906:	f7fb fc51 	bl	800d1ac <mg_log_prefix>
 801190a:	687b      	ldr	r3, [r7, #4]
 801190c:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 801190e:	687b      	ldr	r3, [r7, #4]
 8011910:	f103 0208 	add.w	r2, r3, #8
 8011914:	687b      	ldr	r3, [r7, #4]
 8011916:	3320      	adds	r3, #32
 8011918:	9301      	str	r3, [sp, #4]
 801191a:	4b4d      	ldr	r3, [pc, #308]	@ (8011a50 <mg_connect_resolved+0x1bc>)
 801191c:	9300      	str	r3, [sp, #0]
 801191e:	4613      	mov	r3, r2
 8011920:	4a4b      	ldr	r2, [pc, #300]	@ (8011a50 <mg_connect_resolved+0x1bc>)
 8011922:	484c      	ldr	r0, [pc, #304]	@ (8011a54 <mg_connect_resolved+0x1c0>)
 8011924:	f7fb fc92 	bl	800d24c <mg_log>
            &c->rem));
  mg_call(c, MG_EV_RESOLVE, NULL);
 8011928:	2200      	movs	r2, #0
 801192a:	2103      	movs	r1, #3
 801192c:	6878      	ldr	r0, [r7, #4]
 801192e:	f7f6 fa7f 	bl	8007e30 <mg_call>
  c->is_connecting = 1;
 8011932:	687a      	ldr	r2, [r7, #4]
 8011934:	f892 30b4 	ldrb.w	r3, [r2, #180]	@ 0xb4
 8011938:	f043 0320 	orr.w	r3, r3, #32
 801193c:	f882 30b4 	strb.w	r3, [r2, #180]	@ 0xb4
  if (c->is_udp && (rem_ip == 0xffffffff || rem_ip == (ifp->ip | ~ifp->mask))) {
 8011940:	687b      	ldr	r3, [r7, #4]
 8011942:	f893 30b5 	ldrb.w	r3, [r3, #181]	@ 0xb5
 8011946:	f003 0301 	and.w	r3, r3, #1
 801194a:	b2db      	uxtb	r3, r3
 801194c:	2b00      	cmp	r3, #0
 801194e:	d01a      	beq.n	8011986 <mg_connect_resolved+0xf2>
 8011950:	68fb      	ldr	r3, [r7, #12]
 8011952:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011956:	d008      	beq.n	801196a <mg_connect_resolved+0xd6>
 8011958:	69fb      	ldr	r3, [r7, #28]
 801195a:	689a      	ldr	r2, [r3, #8]
 801195c:	69fb      	ldr	r3, [r7, #28]
 801195e:	68db      	ldr	r3, [r3, #12]
 8011960:	43db      	mvns	r3, r3
 8011962:	431a      	orrs	r2, r3
 8011964:	68fb      	ldr	r3, [r7, #12]
 8011966:	429a      	cmp	r2, r3
 8011968:	d10d      	bne.n	8011986 <mg_connect_resolved+0xf2>
    struct connstate *s = (struct connstate *) (c + 1);
 801196a:	687b      	ldr	r3, [r7, #4]
 801196c:	33b8      	adds	r3, #184	@ 0xb8
 801196e:	61bb      	str	r3, [r7, #24]
    memset(s->mac, 0xFF, sizeof(s->mac));  // global or local broadcast
 8011970:	69bb      	ldr	r3, [r7, #24]
 8011972:	331a      	adds	r3, #26
 8011974:	2206      	movs	r2, #6
 8011976:	21ff      	movs	r1, #255	@ 0xff
 8011978:	4618      	mov	r0, r3
 801197a:	f012 fd87 	bl	802448c <memset>
    mac_resolved(c);
 801197e:	6878      	ldr	r0, [r7, #4]
 8011980:	f7ff ff35 	bl	80117ee <mac_resolved>
  if (c->is_udp && (rem_ip == 0xffffffff || rem_ip == (ifp->ip | ~ifp->mask))) {
 8011984:	e05a      	b.n	8011a3c <mg_connect_resolved+0x1a8>
  } else if (ifp->ip && ((rem_ip & ifp->mask) == (ifp->ip & ifp->mask)) &&
 8011986:	69fb      	ldr	r3, [r7, #28]
 8011988:	689b      	ldr	r3, [r3, #8]
 801198a:	2b00      	cmp	r3, #0
 801198c:	d030      	beq.n	80119f0 <mg_connect_resolved+0x15c>
 801198e:	69fb      	ldr	r3, [r7, #28]
 8011990:	689a      	ldr	r2, [r3, #8]
 8011992:	68fb      	ldr	r3, [r7, #12]
 8011994:	405a      	eors	r2, r3
 8011996:	69fb      	ldr	r3, [r7, #28]
 8011998:	68db      	ldr	r3, [r3, #12]
 801199a:	4013      	ands	r3, r2
 801199c:	2b00      	cmp	r3, #0
 801199e:	d127      	bne.n	80119f0 <mg_connect_resolved+0x15c>
             rem_ip != ifp->gw) {  // skip if gw (onstatechange -> READY -> ARP)
 80119a0:	69fb      	ldr	r3, [r7, #28]
 80119a2:	691a      	ldr	r2, [r3, #16]
 80119a4:	68fb      	ldr	r3, [r7, #12]
  } else if (ifp->ip && ((rem_ip & ifp->mask) == (ifp->ip & ifp->mask)) &&
 80119a6:	429a      	cmp	r2, r3
 80119a8:	d022      	beq.n	80119f0 <mg_connect_resolved+0x15c>
    // If we're in the same LAN, fire an ARP lookup.
    MG_DEBUG(("%lu ARP lookup...", c->id));
 80119aa:	4b26      	ldr	r3, [pc, #152]	@ (8011a44 <mg_connect_resolved+0x1b0>)
 80119ac:	681b      	ldr	r3, [r3, #0]
 80119ae:	2b02      	cmp	r3, #2
 80119b0:	dd0c      	ble.n	80119cc <mg_connect_resolved+0x138>
 80119b2:	4b25      	ldr	r3, [pc, #148]	@ (8011a48 <mg_connect_resolved+0x1b4>)
 80119b4:	f241 528a 	movw	r2, #5514	@ 0x158a
 80119b8:	4924      	ldr	r1, [pc, #144]	@ (8011a4c <mg_connect_resolved+0x1b8>)
 80119ba:	2003      	movs	r0, #3
 80119bc:	f7fb fbf6 	bl	800d1ac <mg_log_prefix>
 80119c0:	687b      	ldr	r3, [r7, #4]
 80119c2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80119c4:	4619      	mov	r1, r3
 80119c6:	4824      	ldr	r0, [pc, #144]	@ (8011a58 <mg_connect_resolved+0x1c4>)
 80119c8:	f7fb fc40 	bl	800d24c <mg_log>
    mg_tcpip_arp_request(ifp, rem_ip, NULL);
 80119cc:	68fb      	ldr	r3, [r7, #12]
 80119ce:	2200      	movs	r2, #0
 80119d0:	4619      	mov	r1, r3
 80119d2:	69f8      	ldr	r0, [r7, #28]
 80119d4:	f7fc fb88 	bl	800e0e8 <mg_tcpip_arp_request>
    settmout(c, MIP_TTYPE_ARP);
 80119d8:	2102      	movs	r1, #2
 80119da:	6878      	ldr	r0, [r7, #4]
 80119dc:	f7fc fb02 	bl	800dfe4 <settmout>
    c->is_arplooking = 1;
 80119e0:	687a      	ldr	r2, [r7, #4]
 80119e2:	f892 30b4 	ldrb.w	r3, [r2, #180]	@ 0xb4
 80119e6:	f043 0310 	orr.w	r3, r3, #16
 80119ea:	f882 30b4 	strb.w	r3, [r2, #180]	@ 0xb4
 80119ee:	e025      	b.n	8011a3c <mg_connect_resolved+0x1a8>
  } else if ((*((uint8_t *) &rem_ip) & 0xE0) == 0xE0) {
 80119f0:	f107 030c 	add.w	r3, r7, #12
 80119f4:	781b      	ldrb	r3, [r3, #0]
 80119f6:	f003 03e0 	and.w	r3, r3, #224	@ 0xe0
 80119fa:	2be0      	cmp	r3, #224	@ 0xe0
 80119fc:	d10e      	bne.n	8011a1c <mg_connect_resolved+0x188>
    struct connstate *s = (struct connstate *) (c + 1);  // 224 to 239, E0 to EF
 80119fe:	687b      	ldr	r3, [r7, #4]
 8011a00:	33b8      	adds	r3, #184	@ 0xb8
 8011a02:	613b      	str	r3, [r7, #16]
    ip4_mcastmac(s->mac, &rem_ip);                       // multicast group
 8011a04:	693b      	ldr	r3, [r7, #16]
 8011a06:	331a      	adds	r3, #26
 8011a08:	f107 020c 	add.w	r2, r7, #12
 8011a0c:	4611      	mov	r1, r2
 8011a0e:	4618      	mov	r0, r3
 8011a10:	f7ff ff12 	bl	8011838 <ip4_mcastmac>
    mac_resolved(c);
 8011a14:	6878      	ldr	r0, [r7, #4]
 8011a16:	f7ff feea 	bl	80117ee <mac_resolved>
  } else {
    struct connstate *s = (struct connstate *) (c + 1);
    memcpy(s->mac, ifp->gwmac, sizeof(ifp->gwmac));
    mac_resolved(c);
  }
}
 8011a1a:	e00f      	b.n	8011a3c <mg_connect_resolved+0x1a8>
    struct connstate *s = (struct connstate *) (c + 1);
 8011a1c:	687b      	ldr	r3, [r7, #4]
 8011a1e:	33b8      	adds	r3, #184	@ 0xb8
 8011a20:	617b      	str	r3, [r7, #20]
    memcpy(s->mac, ifp->gwmac, sizeof(ifp->gwmac));
 8011a22:	697b      	ldr	r3, [r7, #20]
 8011a24:	f103 001a 	add.w	r0, r3, #26
 8011a28:	69fb      	ldr	r3, [r7, #28]
 8011a2a:	335c      	adds	r3, #92	@ 0x5c
 8011a2c:	2206      	movs	r2, #6
 8011a2e:	4619      	mov	r1, r3
 8011a30:	f012 fea9 	bl	8024786 <memcpy>
    mac_resolved(c);
 8011a34:	6878      	ldr	r0, [r7, #4]
 8011a36:	f7ff feda 	bl	80117ee <mac_resolved>
}
 8011a3a:	e7ff      	b.n	8011a3c <mg_connect_resolved+0x1a8>
 8011a3c:	bf00      	nop
 8011a3e:	3720      	adds	r7, #32
 8011a40:	46bd      	mov	sp, r7
 8011a42:	bd80      	pop	{r7, pc}
 8011a44:	20000258 	.word	0x20000258
 8011a48:	08028934 	.word	0x08028934
 8011a4c:	08025140 	.word	0x08025140
 8011a50:	0801245d 	.word	0x0801245d
 8011a54:	08026774 	.word	0x08026774
 8011a58:	08026784 	.word	0x08026784

08011a5c <mg_open_listener>:

bool mg_open_listener(struct mg_connection *c, const char *url) {
 8011a5c:	b580      	push	{r7, lr}
 8011a5e:	b084      	sub	sp, #16
 8011a60:	af00      	add	r7, sp, #0
 8011a62:	6078      	str	r0, [r7, #4]
 8011a64:	6039      	str	r1, [r7, #0]
  c->loc.port = mg_htons(mg_url_port(url));
 8011a66:	6838      	ldr	r0, [r7, #0]
 8011a68:	f00f fa50 	bl	8020f0c <mg_url_port>
 8011a6c:	4603      	mov	r3, r0
 8011a6e:	4618      	mov	r0, r3
 8011a70:	f00f fb57 	bl	8021122 <mg_ntohs>
 8011a74:	4603      	mov	r3, r0
 8011a76:	461a      	mov	r2, r3
 8011a78:	687b      	ldr	r3, [r7, #4]
 8011a7a:	831a      	strh	r2, [r3, #24]
  if (!mg_aton(mg_url_host(url), &c->loc)) {
 8011a7c:	f107 0308 	add.w	r3, r7, #8
 8011a80:	6839      	ldr	r1, [r7, #0]
 8011a82:	4618      	mov	r0, r3
 8011a84:	f00f fa0f 	bl	8020ea6 <mg_url_host>
 8011a88:	687b      	ldr	r3, [r7, #4]
 8011a8a:	3308      	adds	r3, #8
 8011a8c:	461a      	mov	r2, r3
 8011a8e:	f107 0308 	add.w	r3, r7, #8
 8011a92:	e893 0003 	ldmia.w	r3, {r0, r1}
 8011a96:	f7fb ff38 	bl	800d90a <mg_aton>
 8011a9a:	4603      	mov	r3, r0
 8011a9c:	f083 0301 	eor.w	r3, r3, #1
 8011aa0:	b2db      	uxtb	r3, r3
 8011aa2:	2b00      	cmp	r3, #0
 8011aa4:	d010      	beq.n	8011ac8 <mg_open_listener+0x6c>
    MG_ERROR(("invalid listening URL: %s", url));
 8011aa6:	4b0b      	ldr	r3, [pc, #44]	@ (8011ad4 <mg_open_listener+0x78>)
 8011aa8:	681b      	ldr	r3, [r3, #0]
 8011aaa:	2b00      	cmp	r3, #0
 8011aac:	dd0a      	ble.n	8011ac4 <mg_open_listener+0x68>
 8011aae:	4b0a      	ldr	r3, [pc, #40]	@ (8011ad8 <mg_open_listener+0x7c>)
 8011ab0:	f241 529c 	movw	r2, #5532	@ 0x159c
 8011ab4:	4909      	ldr	r1, [pc, #36]	@ (8011adc <mg_open_listener+0x80>)
 8011ab6:	2001      	movs	r0, #1
 8011ab8:	f7fb fb78 	bl	800d1ac <mg_log_prefix>
 8011abc:	6839      	ldr	r1, [r7, #0]
 8011abe:	4808      	ldr	r0, [pc, #32]	@ (8011ae0 <mg_open_listener+0x84>)
 8011ac0:	f7fb fbc4 	bl	800d24c <mg_log>
    return false;
 8011ac4:	2300      	movs	r3, #0
 8011ac6:	e000      	b.n	8011aca <mg_open_listener+0x6e>
  }
  return true;
 8011ac8:	2301      	movs	r3, #1
}
 8011aca:	4618      	mov	r0, r3
 8011acc:	3710      	adds	r7, #16
 8011ace:	46bd      	mov	sp, r7
 8011ad0:	bd80      	pop	{r7, pc}
 8011ad2:	bf00      	nop
 8011ad4:	20000258 	.word	0x20000258
 8011ad8:	08028948 	.word	0x08028948
 8011adc:	08025140 	.word	0x08025140
 8011ae0:	08026798 	.word	0x08026798

08011ae4 <write_conn>:

static void write_conn(struct mg_connection *c) {
 8011ae4:	b580      	push	{r7, lr}
 8011ae6:	b084      	sub	sp, #16
 8011ae8:	af00      	add	r7, sp, #0
 8011aea:	6078      	str	r0, [r7, #4]
  long len = c->is_tls ? mg_tls_send(c, c->send.buf, c->send.len)
 8011aec:	687b      	ldr	r3, [r7, #4]
 8011aee:	f893 30b4 	ldrb.w	r3, [r3, #180]	@ 0xb4
 8011af2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8011af6:	b2db      	uxtb	r3, r3
                       : mg_io_send(c, c->send.buf, c->send.len);
 8011af8:	2b00      	cmp	r3, #0
 8011afa:	d009      	beq.n	8011b10 <write_conn+0x2c>
  long len = c->is_tls ? mg_tls_send(c, c->send.buf, c->send.len)
 8011afc:	687b      	ldr	r3, [r7, #4]
 8011afe:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8011b00:	687b      	ldr	r3, [r7, #4]
 8011b02:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8011b04:	461a      	mov	r2, r3
 8011b06:	6878      	ldr	r0, [r7, #4]
 8011b08:	f008 fd8a 	bl	801a620 <mg_tls_send>
 8011b0c:	4603      	mov	r3, r0
 8011b0e:	e008      	b.n	8011b22 <write_conn+0x3e>
                       : mg_io_send(c, c->send.buf, c->send.len);
 8011b10:	687b      	ldr	r3, [r7, #4]
 8011b12:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8011b14:	687b      	ldr	r3, [r7, #4]
 8011b16:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8011b18:	461a      	mov	r2, r3
 8011b1a:	6878      	ldr	r0, [r7, #4]
 8011b1c:	f7fd ff6e 	bl	800f9fc <mg_io_send>
 8011b20:	4603      	mov	r3, r0
  long len = c->is_tls ? mg_tls_send(c, c->send.buf, c->send.len)
 8011b22:	60fb      	str	r3, [r7, #12]
  if (len == MG_IO_ERR) {
 8011b24:	68fb      	ldr	r3, [r7, #12]
 8011b26:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011b2a:	d104      	bne.n	8011b36 <write_conn+0x52>
    mg_error(c, "tx err");
 8011b2c:	490c      	ldr	r1, [pc, #48]	@ (8011b60 <write_conn+0x7c>)
 8011b2e:	6878      	ldr	r0, [r7, #4]
 8011b30:	f7f6 f9a0 	bl	8007e74 <mg_error>
  } else if (len > 0) {
    mg_iobuf_del(&c->send, 0, (size_t) len);
    mg_call(c, MG_EV_WRITE, &len);
  }
}
 8011b34:	e010      	b.n	8011b58 <write_conn+0x74>
  } else if (len > 0) {
 8011b36:	68fb      	ldr	r3, [r7, #12]
 8011b38:	2b00      	cmp	r3, #0
 8011b3a:	dd0d      	ble.n	8011b58 <write_conn+0x74>
    mg_iobuf_del(&c->send, 0, (size_t) len);
 8011b3c:	687b      	ldr	r3, [r7, #4]
 8011b3e:	3350      	adds	r3, #80	@ 0x50
 8011b40:	68fa      	ldr	r2, [r7, #12]
 8011b42:	2100      	movs	r1, #0
 8011b44:	4618      	mov	r0, r3
 8011b46:	f7fa fc63 	bl	800c410 <mg_iobuf_del>
    mg_call(c, MG_EV_WRITE, &len);
 8011b4a:	f107 030c 	add.w	r3, r7, #12
 8011b4e:	461a      	mov	r2, r3
 8011b50:	2108      	movs	r1, #8
 8011b52:	6878      	ldr	r0, [r7, #4]
 8011b54:	f7f6 f96c 	bl	8007e30 <mg_call>
}
 8011b58:	bf00      	nop
 8011b5a:	3710      	adds	r7, #16
 8011b5c:	46bd      	mov	sp, r7
 8011b5e:	bd80      	pop	{r7, pc}
 8011b60:	080267b4 	.word	0x080267b4

08011b64 <init_closure>:

static void init_closure(struct mg_connection *c) {
 8011b64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011b68:	b08a      	sub	sp, #40	@ 0x28
 8011b6a:	af06      	add	r7, sp, #24
 8011b6c:	6078      	str	r0, [r7, #4]
  struct connstate *s = (struct connstate *) (c + 1);
 8011b6e:	687b      	ldr	r3, [r7, #4]
 8011b70:	33b8      	adds	r3, #184	@ 0xb8
 8011b72:	60fb      	str	r3, [r7, #12]
  if (c->is_udp == false && c->is_listening == false &&
 8011b74:	687b      	ldr	r3, [r7, #4]
 8011b76:	f893 30b5 	ldrb.w	r3, [r3, #181]	@ 0xb5
 8011b7a:	f003 0301 	and.w	r3, r3, #1
 8011b7e:	b2db      	uxtb	r3, r3
 8011b80:	2b00      	cmp	r3, #0
 8011b82:	d13b      	bne.n	8011bfc <init_closure+0x98>
 8011b84:	687b      	ldr	r3, [r7, #4]
 8011b86:	f893 30b4 	ldrb.w	r3, [r3, #180]	@ 0xb4
 8011b8a:	f003 0301 	and.w	r3, r3, #1
 8011b8e:	b2db      	uxtb	r3, r3
 8011b90:	2b00      	cmp	r3, #0
 8011b92:	d133      	bne.n	8011bfc <init_closure+0x98>
      c->is_connecting == false) {  // For TCP conns,
 8011b94:	687b      	ldr	r3, [r7, #4]
 8011b96:	f893 30b4 	ldrb.w	r3, [r3, #180]	@ 0xb4
 8011b9a:	f003 0320 	and.w	r3, r3, #32
 8011b9e:	b2db      	uxtb	r3, r3
  if (c->is_udp == false && c->is_listening == false &&
 8011ba0:	2b00      	cmp	r3, #0
 8011ba2:	d12b      	bne.n	8011bfc <init_closure+0x98>
  uint32_t rem_ip = c->rem.ip4;
 8011ba4:	687b      	ldr	r3, [r7, #4]
 8011ba6:	6a1b      	ldr	r3, [r3, #32]
 8011ba8:	60bb      	str	r3, [r7, #8]
    tx_tcp(c->mgr->ifp, s->mac, rem_ip, TH_FIN | TH_ACK, c->loc.port,
 8011baa:	687b      	ldr	r3, [r7, #4]
 8011bac:	685b      	ldr	r3, [r3, #4]
 8011bae:	6b9e      	ldr	r6, [r3, #56]	@ 0x38
 8011bb0:	68fb      	ldr	r3, [r7, #12]
 8011bb2:	f103 081a 	add.w	r8, r3, #26
 8011bb6:	687b      	ldr	r3, [r7, #4]
 8011bb8:	8b1c      	ldrh	r4, [r3, #24]
 8011bba:	687b      	ldr	r3, [r7, #4]
 8011bbc:	8e1d      	ldrh	r5, [r3, #48]	@ 0x30
 8011bbe:	68fb      	ldr	r3, [r7, #12]
 8011bc0:	681b      	ldr	r3, [r3, #0]
 8011bc2:	4618      	mov	r0, r3
 8011bc4:	f00f fac4 	bl	8021150 <mg_ntohl>
 8011bc8:	6038      	str	r0, [r7, #0]
 8011bca:	68fb      	ldr	r3, [r7, #12]
 8011bcc:	685b      	ldr	r3, [r3, #4]
 8011bce:	4618      	mov	r0, r3
 8011bd0:	f00f fabe 	bl	8021150 <mg_ntohl>
 8011bd4:	4603      	mov	r3, r0
 8011bd6:	2200      	movs	r2, #0
 8011bd8:	9205      	str	r2, [sp, #20]
 8011bda:	2200      	movs	r2, #0
 8011bdc:	9204      	str	r2, [sp, #16]
 8011bde:	9303      	str	r3, [sp, #12]
 8011be0:	683b      	ldr	r3, [r7, #0]
 8011be2:	9302      	str	r3, [sp, #8]
 8011be4:	9501      	str	r5, [sp, #4]
 8011be6:	9400      	str	r4, [sp, #0]
 8011be8:	2311      	movs	r3, #17
 8011bea:	68ba      	ldr	r2, [r7, #8]
 8011bec:	4641      	mov	r1, r8
 8011bee:	4630      	mov	r0, r6
 8011bf0:	f7fd fc42 	bl	800f478 <tx_tcp>
           c->rem.port, mg_htonl(s->seq), mg_htonl(s->ack), NULL, 0);
    settmout(c, MIP_TTYPE_FIN);
 8011bf4:	2104      	movs	r1, #4
 8011bf6:	6878      	ldr	r0, [r7, #4]
 8011bf8:	f7fc f9f4 	bl	800dfe4 <settmout>
  }
}
 8011bfc:	bf00      	nop
 8011bfe:	3710      	adds	r7, #16
 8011c00:	46bd      	mov	sp, r7
 8011c02:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08011c06 <close_conn>:

static void close_conn(struct mg_connection *c) {
 8011c06:	b580      	push	{r7, lr}
 8011c08:	b084      	sub	sp, #16
 8011c0a:	af00      	add	r7, sp, #0
 8011c0c:	6078      	str	r0, [r7, #4]
  struct connstate *s = (struct connstate *) (c + 1);
 8011c0e:	687b      	ldr	r3, [r7, #4]
 8011c10:	33b8      	adds	r3, #184	@ 0xb8
 8011c12:	60fb      	str	r3, [r7, #12]
  mg_iobuf_free(&s->raw);  // For TLS connections, release raw data
 8011c14:	68fb      	ldr	r3, [r7, #12]
 8011c16:	3324      	adds	r3, #36	@ 0x24
 8011c18:	4618      	mov	r0, r3
 8011c1a:	f7fa fc44 	bl	800c4a6 <mg_iobuf_free>
  mg_close_conn(c);
 8011c1e:	6878      	ldr	r0, [r7, #4]
 8011c20:	f7fb feda 	bl	800d9d8 <mg_close_conn>
}
 8011c24:	bf00      	nop
 8011c26:	3710      	adds	r7, #16
 8011c28:	46bd      	mov	sp, r7
 8011c2a:	bd80      	pop	{r7, pc}

08011c2c <can_write>:

static bool can_write(struct mg_connection *c) {
 8011c2c:	b480      	push	{r7}
 8011c2e:	b083      	sub	sp, #12
 8011c30:	af00      	add	r7, sp, #0
 8011c32:	6078      	str	r0, [r7, #4]
  return c->is_connecting == 0 && c->is_resolving == 0 && c->send.len > 0 &&
 8011c34:	687b      	ldr	r3, [r7, #4]
 8011c36:	f893 30b4 	ldrb.w	r3, [r3, #180]	@ 0xb4
 8011c3a:	f003 0320 	and.w	r3, r3, #32
 8011c3e:	b2db      	uxtb	r3, r3
         c->is_tls_hs == 0 && c->is_arplooking == 0;
 8011c40:	2b00      	cmp	r3, #0
 8011c42:	d11d      	bne.n	8011c80 <can_write+0x54>
  return c->is_connecting == 0 && c->is_resolving == 0 && c->send.len > 0 &&
 8011c44:	687b      	ldr	r3, [r7, #4]
 8011c46:	f893 30b4 	ldrb.w	r3, [r3, #180]	@ 0xb4
 8011c4a:	f003 0308 	and.w	r3, r3, #8
 8011c4e:	b2db      	uxtb	r3, r3
 8011c50:	2b00      	cmp	r3, #0
 8011c52:	d115      	bne.n	8011c80 <can_write+0x54>
 8011c54:	687b      	ldr	r3, [r7, #4]
 8011c56:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8011c58:	2b00      	cmp	r3, #0
 8011c5a:	d011      	beq.n	8011c80 <can_write+0x54>
         c->is_tls_hs == 0 && c->is_arplooking == 0;
 8011c5c:	687b      	ldr	r3, [r7, #4]
 8011c5e:	f893 30b4 	ldrb.w	r3, [r3, #180]	@ 0xb4
 8011c62:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8011c66:	b2db      	uxtb	r3, r3
  return c->is_connecting == 0 && c->is_resolving == 0 && c->send.len > 0 &&
 8011c68:	2b00      	cmp	r3, #0
 8011c6a:	d109      	bne.n	8011c80 <can_write+0x54>
         c->is_tls_hs == 0 && c->is_arplooking == 0;
 8011c6c:	687b      	ldr	r3, [r7, #4]
 8011c6e:	f893 30b4 	ldrb.w	r3, [r3, #180]	@ 0xb4
 8011c72:	f003 0310 	and.w	r3, r3, #16
 8011c76:	b2db      	uxtb	r3, r3
 8011c78:	2b00      	cmp	r3, #0
 8011c7a:	d101      	bne.n	8011c80 <can_write+0x54>
 8011c7c:	2301      	movs	r3, #1
 8011c7e:	e000      	b.n	8011c82 <can_write+0x56>
 8011c80:	2300      	movs	r3, #0
 8011c82:	f003 0301 	and.w	r3, r3, #1
 8011c86:	b2db      	uxtb	r3, r3
}
 8011c88:	4618      	mov	r0, r3
 8011c8a:	370c      	adds	r7, #12
 8011c8c:	46bd      	mov	sp, r7
 8011c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c92:	4770      	bx	lr

08011c94 <mg_mgr_poll>:

void mg_mgr_poll(struct mg_mgr *mgr, int ms) {
 8011c94:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8011c98:	b091      	sub	sp, #68	@ 0x44
 8011c9a:	af06      	add	r7, sp, #24
 8011c9c:	60f8      	str	r0, [r7, #12]
 8011c9e:	60b9      	str	r1, [r7, #8]
  struct mg_connection *c, *tmp;
  uint64_t now = mg_millis();
 8011ca0:	f00f fa32 	bl	8021108 <mg_millis>
 8011ca4:	4602      	mov	r2, r0
 8011ca6:	460b      	mov	r3, r1
 8011ca8:	e9c7 2304 	strd	r2, r3, [r7, #16]
  mg_timer_poll(&mgr->timers, now);
 8011cac:	68fb      	ldr	r3, [r7, #12]
 8011cae:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8011cb2:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8011cb6:	4608      	mov	r0, r1
 8011cb8:	f004 fb7c 	bl	80163b4 <mg_timer_poll>
  if (mgr->ifp == NULL || mgr->ifp->driver == NULL) return;
 8011cbc:	68fb      	ldr	r3, [r7, #12]
 8011cbe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011cc0:	2b00      	cmp	r3, #0
 8011cc2:	f000 810f 	beq.w	8011ee4 <mg_mgr_poll+0x250>
 8011cc6:	68fb      	ldr	r3, [r7, #12]
 8011cc8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011cca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011ccc:	2b00      	cmp	r3, #0
 8011cce:	f000 8109 	beq.w	8011ee4 <mg_mgr_poll+0x250>
  mg_tcpip_poll(mgr->ifp, now);
 8011cd2:	68fb      	ldr	r3, [r7, #12]
 8011cd4:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 8011cd6:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8011cda:	4608      	mov	r0, r1
 8011cdc:	f7ff f9d4 	bl	8011088 <mg_tcpip_poll>
  for (c = mgr->conns; c != NULL; c = tmp) {
 8011ce0:	68fb      	ldr	r3, [r7, #12]
 8011ce2:	681b      	ldr	r3, [r3, #0]
 8011ce4:	627b      	str	r3, [r7, #36]	@ 0x24
 8011ce6:	e0f8      	b.n	8011eda <mg_mgr_poll+0x246>
    struct connstate *s = (struct connstate *) (c + 1);
 8011ce8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011cea:	33b8      	adds	r3, #184	@ 0xb8
 8011cec:	623b      	str	r3, [r7, #32]
    bool is_tls = c->is_tls && !c->is_resolving && !c->is_arplooking &&
 8011cee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011cf0:	f893 30b4 	ldrb.w	r3, [r3, #180]	@ 0xb4
 8011cf4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8011cf8:	b2db      	uxtb	r3, r3
                  !c->is_listening && !c->is_connecting;
 8011cfa:	2b00      	cmp	r3, #0
 8011cfc:	d021      	beq.n	8011d42 <mg_mgr_poll+0xae>
    bool is_tls = c->is_tls && !c->is_resolving && !c->is_arplooking &&
 8011cfe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011d00:	f893 30b4 	ldrb.w	r3, [r3, #180]	@ 0xb4
 8011d04:	f003 0308 	and.w	r3, r3, #8
 8011d08:	b2db      	uxtb	r3, r3
 8011d0a:	2b00      	cmp	r3, #0
 8011d0c:	d119      	bne.n	8011d42 <mg_mgr_poll+0xae>
 8011d0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011d10:	f893 30b4 	ldrb.w	r3, [r3, #180]	@ 0xb4
 8011d14:	f003 0310 	and.w	r3, r3, #16
 8011d18:	b2db      	uxtb	r3, r3
 8011d1a:	2b00      	cmp	r3, #0
 8011d1c:	d111      	bne.n	8011d42 <mg_mgr_poll+0xae>
                  !c->is_listening && !c->is_connecting;
 8011d1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011d20:	f893 30b4 	ldrb.w	r3, [r3, #180]	@ 0xb4
 8011d24:	f003 0301 	and.w	r3, r3, #1
 8011d28:	b2db      	uxtb	r3, r3
    bool is_tls = c->is_tls && !c->is_resolving && !c->is_arplooking &&
 8011d2a:	2b00      	cmp	r3, #0
 8011d2c:	d109      	bne.n	8011d42 <mg_mgr_poll+0xae>
                  !c->is_listening && !c->is_connecting;
 8011d2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011d30:	f893 30b4 	ldrb.w	r3, [r3, #180]	@ 0xb4
 8011d34:	f003 0320 	and.w	r3, r3, #32
 8011d38:	b2db      	uxtb	r3, r3
 8011d3a:	2b00      	cmp	r3, #0
 8011d3c:	d101      	bne.n	8011d42 <mg_mgr_poll+0xae>
 8011d3e:	2301      	movs	r3, #1
 8011d40:	e000      	b.n	8011d44 <mg_mgr_poll+0xb0>
 8011d42:	2300      	movs	r3, #0
    bool is_tls = c->is_tls && !c->is_resolving && !c->is_arplooking &&
 8011d44:	77fb      	strb	r3, [r7, #31]
 8011d46:	7ffb      	ldrb	r3, [r7, #31]
 8011d48:	f003 0301 	and.w	r3, r3, #1
 8011d4c:	77fb      	strb	r3, [r7, #31]
    tmp = c->next;
 8011d4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011d50:	681b      	ldr	r3, [r3, #0]
 8011d52:	61bb      	str	r3, [r7, #24]
    mg_call(c, MG_EV_POLL, &now);
 8011d54:	f107 0310 	add.w	r3, r7, #16
 8011d58:	461a      	mov	r2, r3
 8011d5a:	2102      	movs	r1, #2
 8011d5c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8011d5e:	f7f6 f867 	bl	8007e30 <mg_call>
    MG_VERBOSE(("%lu .. %c%c%c%c%c %lu %lu", c->id, c->is_tls ? 'T' : 't',
 8011d62:	4b63      	ldr	r3, [pc, #396]	@ (8011ef0 <mg_mgr_poll+0x25c>)
 8011d64:	681b      	ldr	r3, [r3, #0]
 8011d66:	2b03      	cmp	r3, #3
 8011d68:	dd55      	ble.n	8011e16 <mg_mgr_poll+0x182>
 8011d6a:	4b62      	ldr	r3, [pc, #392]	@ (8011ef4 <mg_mgr_poll+0x260>)
 8011d6c:	f241 52cf 	movw	r2, #5583	@ 0x15cf
 8011d70:	4961      	ldr	r1, [pc, #388]	@ (8011ef8 <mg_mgr_poll+0x264>)
 8011d72:	2004      	movs	r0, #4
 8011d74:	f7fb fa1a 	bl	800d1ac <mg_log_prefix>
 8011d78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011d7a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8011d7c:	607b      	str	r3, [r7, #4]
 8011d7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011d80:	f893 30b4 	ldrb.w	r3, [r3, #180]	@ 0xb4
 8011d84:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8011d88:	b2db      	uxtb	r3, r3
 8011d8a:	2b00      	cmp	r3, #0
 8011d8c:	d002      	beq.n	8011d94 <mg_mgr_poll+0x100>
 8011d8e:	f04f 0854 	mov.w	r8, #84	@ 0x54
 8011d92:	e001      	b.n	8011d98 <mg_mgr_poll+0x104>
 8011d94:	f04f 0874 	mov.w	r8, #116	@ 0x74
 8011d98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011d9a:	f893 30b4 	ldrb.w	r3, [r3, #180]	@ 0xb4
 8011d9e:	f003 0320 	and.w	r3, r3, #32
 8011da2:	b2db      	uxtb	r3, r3
 8011da4:	2b00      	cmp	r3, #0
 8011da6:	d002      	beq.n	8011dae <mg_mgr_poll+0x11a>
 8011da8:	f04f 0943 	mov.w	r9, #67	@ 0x43
 8011dac:	e001      	b.n	8011db2 <mg_mgr_poll+0x11e>
 8011dae:	f04f 0963 	mov.w	r9, #99	@ 0x63
 8011db2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011db4:	f893 30b4 	ldrb.w	r3, [r3, #180]	@ 0xb4
 8011db8:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8011dbc:	b2db      	uxtb	r3, r3
 8011dbe:	2b00      	cmp	r3, #0
 8011dc0:	d001      	beq.n	8011dc6 <mg_mgr_poll+0x132>
 8011dc2:	2448      	movs	r4, #72	@ 0x48
 8011dc4:	e000      	b.n	8011dc8 <mg_mgr_poll+0x134>
 8011dc6:	2468      	movs	r4, #104	@ 0x68
 8011dc8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011dca:	f893 30b4 	ldrb.w	r3, [r3, #180]	@ 0xb4
 8011dce:	f003 0308 	and.w	r3, r3, #8
 8011dd2:	b2db      	uxtb	r3, r3
 8011dd4:	2b00      	cmp	r3, #0
 8011dd6:	d001      	beq.n	8011ddc <mg_mgr_poll+0x148>
 8011dd8:	2552      	movs	r5, #82	@ 0x52
 8011dda:	e000      	b.n	8011dde <mg_mgr_poll+0x14a>
 8011ddc:	2572      	movs	r5, #114	@ 0x72
 8011dde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011de0:	f893 30b5 	ldrb.w	r3, [r3, #181]	@ 0xb5
 8011de4:	f003 0320 	and.w	r3, r3, #32
 8011de8:	b2db      	uxtb	r3, r3
 8011dea:	2b00      	cmp	r3, #0
 8011dec:	d001      	beq.n	8011df2 <mg_mgr_poll+0x15e>
 8011dee:	2643      	movs	r6, #67	@ 0x43
 8011df0:	e000      	b.n	8011df4 <mg_mgr_poll+0x160>
 8011df2:	2663      	movs	r6, #99	@ 0x63
 8011df4:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8011df6:	f008 fd0b 	bl	801a810 <mg_tls_pending>
 8011dfa:	4602      	mov	r2, r0
 8011dfc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011dfe:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8011e00:	9304      	str	r3, [sp, #16]
 8011e02:	9203      	str	r2, [sp, #12]
 8011e04:	9602      	str	r6, [sp, #8]
 8011e06:	9501      	str	r5, [sp, #4]
 8011e08:	9400      	str	r4, [sp, #0]
 8011e0a:	464b      	mov	r3, r9
 8011e0c:	4642      	mov	r2, r8
 8011e0e:	6879      	ldr	r1, [r7, #4]
 8011e10:	483a      	ldr	r0, [pc, #232]	@ (8011efc <mg_mgr_poll+0x268>)
 8011e12:	f7fb fa1b 	bl	800d24c <mg_log>
                c->is_connecting ? 'C' : 'c', c->is_tls_hs ? 'H' : 'h',
                c->is_resolving ? 'R' : 'r', c->is_closing ? 'C' : 'c',
                mg_tls_pending(c), c->rtls.len));
    // order is important, TLS conn close with > 1 record in buffer (below)
    if (is_tls && (c->rtls.len > 0 || mg_tls_pending(c) > 0))
 8011e16:	7ffb      	ldrb	r3, [r7, #31]
 8011e18:	2b00      	cmp	r3, #0
 8011e1a:	d00c      	beq.n	8011e36 <mg_mgr_poll+0x1a2>
 8011e1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011e1e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8011e20:	2b00      	cmp	r3, #0
 8011e22:	d105      	bne.n	8011e30 <mg_mgr_poll+0x19c>
 8011e24:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8011e26:	f008 fcf3 	bl	801a810 <mg_tls_pending>
 8011e2a:	4603      	mov	r3, r0
 8011e2c:	2b00      	cmp	r3, #0
 8011e2e:	d002      	beq.n	8011e36 <mg_mgr_poll+0x1a2>
      handle_tls_recv(c);
 8011e30:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8011e32:	f7fd fe6b 	bl	800fb0c <handle_tls_recv>
    if (can_write(c)) write_conn(c);
 8011e36:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8011e38:	f7ff fef8 	bl	8011c2c <can_write>
 8011e3c:	4603      	mov	r3, r0
 8011e3e:	2b00      	cmp	r3, #0
 8011e40:	d002      	beq.n	8011e48 <mg_mgr_poll+0x1b4>
 8011e42:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8011e44:	f7ff fe4e 	bl	8011ae4 <write_conn>
    if (is_tls && c->send.len == 0) mg_tls_flush(c);
 8011e48:	7ffb      	ldrb	r3, [r7, #31]
 8011e4a:	2b00      	cmp	r3, #0
 8011e4c:	d006      	beq.n	8011e5c <mg_mgr_poll+0x1c8>
 8011e4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011e50:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8011e52:	2b00      	cmp	r3, #0
 8011e54:	d102      	bne.n	8011e5c <mg_mgr_poll+0x1c8>
 8011e56:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8011e58:	f008 fcef 	bl	801a83a <mg_tls_flush>
    if (c->is_draining && c->send.len == 0 && s->ttype != MIP_TTYPE_FIN)
 8011e5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011e5e:	f893 30b5 	ldrb.w	r3, [r3, #181]	@ 0xb5
 8011e62:	f003 0310 	and.w	r3, r3, #16
 8011e66:	b2db      	uxtb	r3, r3
 8011e68:	2b00      	cmp	r3, #0
 8011e6a:	d00b      	beq.n	8011e84 <mg_mgr_poll+0x1f0>
 8011e6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011e6e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8011e70:	2b00      	cmp	r3, #0
 8011e72:	d107      	bne.n	8011e84 <mg_mgr_poll+0x1f0>
 8011e74:	6a3b      	ldr	r3, [r7, #32]
 8011e76:	f893 3020 	ldrb.w	r3, [r3, #32]
 8011e7a:	2b04      	cmp	r3, #4
 8011e7c:	d002      	beq.n	8011e84 <mg_mgr_poll+0x1f0>
      init_closure(c);
 8011e7e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8011e80:	f7ff fe70 	bl	8011b64 <init_closure>
    // For non-TLS, close immediately upon completing the 3-way closure
    // For TLS, handle any pending data (above) until MIP_TTYPE_FIN expires
    if (s->twclosure &&
 8011e84:	6a3b      	ldr	r3, [r7, #32]
 8011e86:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8011e8a:	2b00      	cmp	r3, #0
 8011e8c:	d018      	beq.n	8011ec0 <mg_mgr_poll+0x22c>
        (!c->is_tls || (c->rtls.len == 0 && mg_tls_pending(c) == 0)))
 8011e8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011e90:	f893 30b4 	ldrb.w	r3, [r3, #180]	@ 0xb4
 8011e94:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8011e98:	b2db      	uxtb	r3, r3
    if (s->twclosure &&
 8011e9a:	2b00      	cmp	r3, #0
 8011e9c:	d009      	beq.n	8011eb2 <mg_mgr_poll+0x21e>
        (!c->is_tls || (c->rtls.len == 0 && mg_tls_pending(c) == 0)))
 8011e9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011ea0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8011ea2:	2b00      	cmp	r3, #0
 8011ea4:	d10c      	bne.n	8011ec0 <mg_mgr_poll+0x22c>
 8011ea6:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8011ea8:	f008 fcb2 	bl	801a810 <mg_tls_pending>
 8011eac:	4603      	mov	r3, r0
 8011eae:	2b00      	cmp	r3, #0
 8011eb0:	d106      	bne.n	8011ec0 <mg_mgr_poll+0x22c>
      c->is_closing = 1;
 8011eb2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8011eb4:	f892 30b5 	ldrb.w	r3, [r2, #181]	@ 0xb5
 8011eb8:	f043 0320 	orr.w	r3, r3, #32
 8011ebc:	f882 30b5 	strb.w	r3, [r2, #181]	@ 0xb5
    if (c->is_closing) close_conn(c);
 8011ec0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011ec2:	f893 30b5 	ldrb.w	r3, [r3, #181]	@ 0xb5
 8011ec6:	f003 0320 	and.w	r3, r3, #32
 8011eca:	b2db      	uxtb	r3, r3
 8011ecc:	2b00      	cmp	r3, #0
 8011ece:	d002      	beq.n	8011ed6 <mg_mgr_poll+0x242>
 8011ed0:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8011ed2:	f7ff fe98 	bl	8011c06 <close_conn>
  for (c = mgr->conns; c != NULL; c = tmp) {
 8011ed6:	69bb      	ldr	r3, [r7, #24]
 8011ed8:	627b      	str	r3, [r7, #36]	@ 0x24
 8011eda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011edc:	2b00      	cmp	r3, #0
 8011ede:	f47f af03 	bne.w	8011ce8 <mg_mgr_poll+0x54>
 8011ee2:	e000      	b.n	8011ee6 <mg_mgr_poll+0x252>
  if (mgr->ifp == NULL || mgr->ifp->driver == NULL) return;
 8011ee4:	bf00      	nop
  }
  (void) ms;
}
 8011ee6:	372c      	adds	r7, #44	@ 0x2c
 8011ee8:	46bd      	mov	sp, r7
 8011eea:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011eee:	bf00      	nop
 8011ef0:	20000258 	.word	0x20000258
 8011ef4:	0802895c 	.word	0x0802895c
 8011ef8:	08025140 	.word	0x08025140
 8011efc:	080267bc 	.word	0x080267bc

08011f00 <mg_send>:

bool mg_send(struct mg_connection *c, const void *buf, size_t len) {
 8011f00:	b590      	push	{r4, r7, lr}
 8011f02:	b08d      	sub	sp, #52	@ 0x34
 8011f04:	af04      	add	r7, sp, #16
 8011f06:	60f8      	str	r0, [r7, #12]
 8011f08:	60b9      	str	r1, [r7, #8]
 8011f0a:	607a      	str	r2, [r7, #4]
  struct mg_tcpip_if *ifp = c->mgr->ifp;
 8011f0c:	68fb      	ldr	r3, [r7, #12]
 8011f0e:	685b      	ldr	r3, [r3, #4]
 8011f10:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011f12:	61bb      	str	r3, [r7, #24]
  bool res = false;
 8011f14:	2300      	movs	r3, #0
 8011f16:	77fb      	strb	r3, [r7, #31]
  uint32_t rem_ip = c->rem.ip4;
 8011f18:	68fb      	ldr	r3, [r7, #12]
 8011f1a:	6a1b      	ldr	r3, [r3, #32]
 8011f1c:	617b      	str	r3, [r7, #20]
  if (ifp->ip == 0 || ifp->state != MG_TCPIP_STATE_READY) {
 8011f1e:	69bb      	ldr	r3, [r7, #24]
 8011f20:	689b      	ldr	r3, [r3, #8]
 8011f22:	2b00      	cmp	r3, #0
 8011f24:	d004      	beq.n	8011f30 <mg_send+0x30>
 8011f26:	69bb      	ldr	r3, [r7, #24]
 8011f28:	f893 3094 	ldrb.w	r3, [r3, #148]	@ 0x94
 8011f2c:	2b04      	cmp	r3, #4
 8011f2e:	d004      	beq.n	8011f3a <mg_send+0x3a>
    mg_error(c, "net down");
 8011f30:	4933      	ldr	r1, [pc, #204]	@ (8012000 <mg_send+0x100>)
 8011f32:	68f8      	ldr	r0, [r7, #12]
 8011f34:	f7f5 ff9e 	bl	8007e74 <mg_error>
 8011f38:	e05d      	b.n	8011ff6 <mg_send+0xf6>
  } else if (c->is_udp && (c->is_arplooking || c->is_resolving)) {
 8011f3a:	68fb      	ldr	r3, [r7, #12]
 8011f3c:	f893 30b5 	ldrb.w	r3, [r3, #181]	@ 0xb5
 8011f40:	f003 0301 	and.w	r3, r3, #1
 8011f44:	b2db      	uxtb	r3, r3
 8011f46:	2b00      	cmp	r3, #0
 8011f48:	d01e      	beq.n	8011f88 <mg_send+0x88>
 8011f4a:	68fb      	ldr	r3, [r7, #12]
 8011f4c:	f893 30b4 	ldrb.w	r3, [r3, #180]	@ 0xb4
 8011f50:	f003 0310 	and.w	r3, r3, #16
 8011f54:	b2db      	uxtb	r3, r3
 8011f56:	2b00      	cmp	r3, #0
 8011f58:	d107      	bne.n	8011f6a <mg_send+0x6a>
 8011f5a:	68fb      	ldr	r3, [r7, #12]
 8011f5c:	f893 30b4 	ldrb.w	r3, [r3, #180]	@ 0xb4
 8011f60:	f003 0308 	and.w	r3, r3, #8
 8011f64:	b2db      	uxtb	r3, r3
 8011f66:	2b00      	cmp	r3, #0
 8011f68:	d00e      	beq.n	8011f88 <mg_send+0x88>
    // Fail to send, no target MAC or IP
    MG_VERBOSE(("still resolving..."));
 8011f6a:	4b26      	ldr	r3, [pc, #152]	@ (8012004 <mg_send+0x104>)
 8011f6c:	681b      	ldr	r3, [r3, #0]
 8011f6e:	2b03      	cmp	r3, #3
 8011f70:	dd41      	ble.n	8011ff6 <mg_send+0xf6>
 8011f72:	4b25      	ldr	r3, [pc, #148]	@ (8012008 <mg_send+0x108>)
 8011f74:	f241 52ec 	movw	r2, #5612	@ 0x15ec
 8011f78:	4924      	ldr	r1, [pc, #144]	@ (801200c <mg_send+0x10c>)
 8011f7a:	2004      	movs	r0, #4
 8011f7c:	f7fb f916 	bl	800d1ac <mg_log_prefix>
 8011f80:	4823      	ldr	r0, [pc, #140]	@ (8012010 <mg_send+0x110>)
 8011f82:	f7fb f963 	bl	800d24c <mg_log>
 8011f86:	e036      	b.n	8011ff6 <mg_send+0xf6>
  } else if (c->is_udp) {
 8011f88:	68fb      	ldr	r3, [r7, #12]
 8011f8a:	f893 30b5 	ldrb.w	r3, [r3, #181]	@ 0xb5
 8011f8e:	f003 0301 	and.w	r3, r3, #1
 8011f92:	b2db      	uxtb	r3, r3
 8011f94:	2b00      	cmp	r3, #0
 8011f96:	d01f      	beq.n	8011fd8 <mg_send+0xd8>
    struct connstate *s = (struct connstate *) (c + 1);
 8011f98:	68fb      	ldr	r3, [r7, #12]
 8011f9a:	33b8      	adds	r3, #184	@ 0xb8
 8011f9c:	613b      	str	r3, [r7, #16]
    len = trim_len(c, len);  // Trimming length if necessary
 8011f9e:	6879      	ldr	r1, [r7, #4]
 8011fa0:	68f8      	ldr	r0, [r7, #12]
 8011fa2:	f7fd fc9d 	bl	800f8e0 <trim_len>
 8011fa6:	6078      	str	r0, [r7, #4]
    res = tx_udp(ifp, s->mac, ifp->ip, c->loc.port, rem_ip, c->rem.port, buf,
 8011fa8:	693b      	ldr	r3, [r7, #16]
 8011faa:	f103 011a 	add.w	r1, r3, #26
 8011fae:	69bb      	ldr	r3, [r7, #24]
 8011fb0:	6898      	ldr	r0, [r3, #8]
 8011fb2:	68fb      	ldr	r3, [r7, #12]
 8011fb4:	8b1c      	ldrh	r4, [r3, #24]
 8011fb6:	68fb      	ldr	r3, [r7, #12]
 8011fb8:	8e1b      	ldrh	r3, [r3, #48]	@ 0x30
 8011fba:	687a      	ldr	r2, [r7, #4]
 8011fbc:	9203      	str	r2, [sp, #12]
 8011fbe:	68ba      	ldr	r2, [r7, #8]
 8011fc0:	9202      	str	r2, [sp, #8]
 8011fc2:	9301      	str	r3, [sp, #4]
 8011fc4:	697b      	ldr	r3, [r7, #20]
 8011fc6:	9300      	str	r3, [sp, #0]
 8011fc8:	4623      	mov	r3, r4
 8011fca:	4602      	mov	r2, r0
 8011fcc:	69b8      	ldr	r0, [r7, #24]
 8011fce:	f7fc f9d4 	bl	800e37a <tx_udp>
 8011fd2:	4603      	mov	r3, r0
 8011fd4:	77fb      	strb	r3, [r7, #31]
 8011fd6:	e00e      	b.n	8011ff6 <mg_send+0xf6>
                 len);
  } else {
    res = mg_iobuf_add(&c->send, c->send.len, buf, len);
 8011fd8:	68fb      	ldr	r3, [r7, #12]
 8011fda:	f103 0050 	add.w	r0, r3, #80	@ 0x50
 8011fde:	68fb      	ldr	r3, [r7, #12]
 8011fe0:	6d99      	ldr	r1, [r3, #88]	@ 0x58
 8011fe2:	687b      	ldr	r3, [r7, #4]
 8011fe4:	68ba      	ldr	r2, [r7, #8]
 8011fe6:	f7fa f9c1 	bl	800c36c <mg_iobuf_add>
 8011fea:	4603      	mov	r3, r0
 8011fec:	2b00      	cmp	r3, #0
 8011fee:	bf14      	ite	ne
 8011ff0:	2301      	movne	r3, #1
 8011ff2:	2300      	moveq	r3, #0
 8011ff4:	77fb      	strb	r3, [r7, #31]
  }
  return res;
 8011ff6:	7ffb      	ldrb	r3, [r7, #31]
}
 8011ff8:	4618      	mov	r0, r3
 8011ffa:	3724      	adds	r7, #36	@ 0x24
 8011ffc:	46bd      	mov	sp, r7
 8011ffe:	bd90      	pop	{r4, r7, pc}
 8012000:	080267d8 	.word	0x080267d8
 8012004:	20000258 	.word	0x20000258
 8012008:	08028968 	.word	0x08028968
 801200c:	08025140 	.word	0x08025140
 8012010:	080267e4 	.word	0x080267e4

08012014 <setdns4>:
  c->mgr->ifp->update_mac_hash_table = true;  // mark dirty
}

bool mg_dnsc_init(struct mg_mgr *mgr, struct mg_dns *dnsc);

static void setdns4(struct mg_tcpip_if *ifp, uint32_t *ip) {
 8012014:	b580      	push	{r7, lr}
 8012016:	b084      	sub	sp, #16
 8012018:	af00      	add	r7, sp, #0
 801201a:	6078      	str	r0, [r7, #4]
 801201c:	6039      	str	r1, [r7, #0]
  struct mg_dns *dnsc;
  mg_free(ifp->dns4_url);
 801201e:	687b      	ldr	r3, [r7, #4]
 8012020:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8012022:	4618      	mov	r0, r3
 8012024:	f7f4 feea 	bl	8006dfc <mg_free>
  ifp->dns4_url = mg_mprintf("udp://%M:53", mg_print_ip4, ip);
 8012028:	683a      	ldr	r2, [r7, #0]
 801202a:	4926      	ldr	r1, [pc, #152]	@ (80120c4 <setdns4+0xb0>)
 801202c:	4826      	ldr	r0, [pc, #152]	@ (80120c8 <setdns4+0xb4>)
 801202e:	f000 f91d 	bl	801226c <mg_mprintf>
 8012032:	4602      	mov	r2, r0
 8012034:	687b      	ldr	r3, [r7, #4]
 8012036:	665a      	str	r2, [r3, #100]	@ 0x64
  dnsc = &ifp->mgr->dns4;
 8012038:	687b      	ldr	r3, [r7, #4]
 801203a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801203c:	3304      	adds	r3, #4
 801203e:	60fb      	str	r3, [r7, #12]
  dnsc->url = (const char *) ifp->dns4_url;
 8012040:	687b      	ldr	r3, [r7, #4]
 8012042:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8012044:	68fb      	ldr	r3, [r7, #12]
 8012046:	601a      	str	r2, [r3, #0]
  MG_DEBUG(("Set DNS URL to %s", dnsc->url));
 8012048:	4b20      	ldr	r3, [pc, #128]	@ (80120cc <setdns4+0xb8>)
 801204a:	681b      	ldr	r3, [r3, #0]
 801204c:	2b02      	cmp	r3, #2
 801204e:	dd0c      	ble.n	801206a <setdns4+0x56>
 8012050:	4b1f      	ldr	r3, [pc, #124]	@ (80120d0 <setdns4+0xbc>)
 8012052:	f241 6207 	movw	r2, #5639	@ 0x1607
 8012056:	491f      	ldr	r1, [pc, #124]	@ (80120d4 <setdns4+0xc0>)
 8012058:	2003      	movs	r0, #3
 801205a:	f7fb f8a7 	bl	800d1ac <mg_log_prefix>
 801205e:	68fb      	ldr	r3, [r7, #12]
 8012060:	681b      	ldr	r3, [r3, #0]
 8012062:	4619      	mov	r1, r3
 8012064:	481c      	ldr	r0, [pc, #112]	@ (80120d8 <setdns4+0xc4>)
 8012066:	f7fb f8f1 	bl	800d24c <mg_log>
  if (ifp->mgr->use_dns6) return;
 801206a:	687b      	ldr	r3, [r7, #4]
 801206c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801206e:	7e1b      	ldrb	r3, [r3, #24]
 8012070:	2b00      	cmp	r3, #0
 8012072:	d123      	bne.n	80120bc <setdns4+0xa8>
  if (dnsc->c != NULL) mg_close_conn(dnsc->c);
 8012074:	68fb      	ldr	r3, [r7, #12]
 8012076:	685b      	ldr	r3, [r3, #4]
 8012078:	2b00      	cmp	r3, #0
 801207a:	d004      	beq.n	8012086 <setdns4+0x72>
 801207c:	68fb      	ldr	r3, [r7, #12]
 801207e:	685b      	ldr	r3, [r3, #4]
 8012080:	4618      	mov	r0, r3
 8012082:	f7fb fca9 	bl	800d9d8 <mg_close_conn>
  if (!mg_dnsc_init(ifp->mgr, dnsc))  // create DNS connection
 8012086:	687b      	ldr	r3, [r7, #4]
 8012088:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801208a:	68f9      	ldr	r1, [r7, #12]
 801208c:	4618      	mov	r0, r3
 801208e:	f7f5 fdbb 	bl	8007c08 <mg_dnsc_init>
 8012092:	4603      	mov	r3, r0
 8012094:	f083 0301 	eor.w	r3, r3, #1
 8012098:	b2db      	uxtb	r3, r3
 801209a:	2b00      	cmp	r3, #0
 801209c:	d00f      	beq.n	80120be <setdns4+0xaa>
    MG_ERROR(("DNS connection creation failed"));
 801209e:	4b0b      	ldr	r3, [pc, #44]	@ (80120cc <setdns4+0xb8>)
 80120a0:	681b      	ldr	r3, [r3, #0]
 80120a2:	2b00      	cmp	r3, #0
 80120a4:	dd0b      	ble.n	80120be <setdns4+0xaa>
 80120a6:	4b0a      	ldr	r3, [pc, #40]	@ (80120d0 <setdns4+0xbc>)
 80120a8:	f241 620b 	movw	r2, #5643	@ 0x160b
 80120ac:	4909      	ldr	r1, [pc, #36]	@ (80120d4 <setdns4+0xc0>)
 80120ae:	2001      	movs	r0, #1
 80120b0:	f7fb f87c 	bl	800d1ac <mg_log_prefix>
 80120b4:	4809      	ldr	r0, [pc, #36]	@ (80120dc <setdns4+0xc8>)
 80120b6:	f7fb f8c9 	bl	800d24c <mg_log>
 80120ba:	e000      	b.n	80120be <setdns4+0xaa>
  if (ifp->mgr->use_dns6) return;
 80120bc:	bf00      	nop
}
 80120be:	3710      	adds	r7, #16
 80120c0:	46bd      	mov	sp, r7
 80120c2:	bd80      	pop	{r7, pc}
 80120c4:	080123b9 	.word	0x080123b9
 80120c8:	080267f8 	.word	0x080267f8
 80120cc:	20000258 	.word	0x20000258
 80120d0:	08028970 	.word	0x08028970
 80120d4:	08025140 	.word	0x08025140
 80120d8:	08026804 	.word	0x08026804
 80120dc:	08026818 	.word	0x08026818

080120e0 <mg_pfn_iobuf_private>:
  mg_queue_add(q, len);
  va_end(ap2);
  return len;
}

static void mg_pfn_iobuf_private(char ch, void *param, bool expand) {
 80120e0:	b580      	push	{r7, lr}
 80120e2:	b084      	sub	sp, #16
 80120e4:	af00      	add	r7, sp, #0
 80120e6:	4603      	mov	r3, r0
 80120e8:	6039      	str	r1, [r7, #0]
 80120ea:	71fb      	strb	r3, [r7, #7]
 80120ec:	4613      	mov	r3, r2
 80120ee:	71bb      	strb	r3, [r7, #6]
  struct mg_iobuf *io = (struct mg_iobuf *) param;
 80120f0:	683b      	ldr	r3, [r7, #0]
 80120f2:	60fb      	str	r3, [r7, #12]
  if (expand && io->len + 2 > io->size) mg_iobuf_resize(io, io->len + 2);
 80120f4:	79bb      	ldrb	r3, [r7, #6]
 80120f6:	2b00      	cmp	r3, #0
 80120f8:	d00d      	beq.n	8012116 <mg_pfn_iobuf_private+0x36>
 80120fa:	68fb      	ldr	r3, [r7, #12]
 80120fc:	689b      	ldr	r3, [r3, #8]
 80120fe:	1c9a      	adds	r2, r3, #2
 8012100:	68fb      	ldr	r3, [r7, #12]
 8012102:	685b      	ldr	r3, [r3, #4]
 8012104:	429a      	cmp	r2, r3
 8012106:	d906      	bls.n	8012116 <mg_pfn_iobuf_private+0x36>
 8012108:	68fb      	ldr	r3, [r7, #12]
 801210a:	689b      	ldr	r3, [r3, #8]
 801210c:	3302      	adds	r3, #2
 801210e:	4619      	mov	r1, r3
 8012110:	68f8      	ldr	r0, [r7, #12]
 8012112:	f7fa f89d 	bl	800c250 <mg_iobuf_resize>
  if (io->len + 2 <= io->size) {
 8012116:	68fb      	ldr	r3, [r7, #12]
 8012118:	689b      	ldr	r3, [r3, #8]
 801211a:	1c9a      	adds	r2, r3, #2
 801211c:	68fb      	ldr	r3, [r7, #12]
 801211e:	685b      	ldr	r3, [r3, #4]
 8012120:	429a      	cmp	r2, r3
 8012122:	d811      	bhi.n	8012148 <mg_pfn_iobuf_private+0x68>
    io->buf[io->len++] = (uint8_t) ch;
 8012124:	68fb      	ldr	r3, [r7, #12]
 8012126:	681a      	ldr	r2, [r3, #0]
 8012128:	68fb      	ldr	r3, [r7, #12]
 801212a:	689b      	ldr	r3, [r3, #8]
 801212c:	1c58      	adds	r0, r3, #1
 801212e:	68f9      	ldr	r1, [r7, #12]
 8012130:	6088      	str	r0, [r1, #8]
 8012132:	4413      	add	r3, r2
 8012134:	79fa      	ldrb	r2, [r7, #7]
 8012136:	701a      	strb	r2, [r3, #0]
    io->buf[io->len] = 0;
 8012138:	68fb      	ldr	r3, [r7, #12]
 801213a:	681a      	ldr	r2, [r3, #0]
 801213c:	68fb      	ldr	r3, [r7, #12]
 801213e:	689b      	ldr	r3, [r3, #8]
 8012140:	4413      	add	r3, r2
 8012142:	2200      	movs	r2, #0
 8012144:	701a      	strb	r2, [r3, #0]
  } else if (io->len < io->size) {
    io->buf[io->len++] = 0;  // Guarantee to 0-terminate
  }
}
 8012146:	e00f      	b.n	8012168 <mg_pfn_iobuf_private+0x88>
  } else if (io->len < io->size) {
 8012148:	68fb      	ldr	r3, [r7, #12]
 801214a:	689a      	ldr	r2, [r3, #8]
 801214c:	68fb      	ldr	r3, [r7, #12]
 801214e:	685b      	ldr	r3, [r3, #4]
 8012150:	429a      	cmp	r2, r3
 8012152:	d209      	bcs.n	8012168 <mg_pfn_iobuf_private+0x88>
    io->buf[io->len++] = 0;  // Guarantee to 0-terminate
 8012154:	68fb      	ldr	r3, [r7, #12]
 8012156:	681a      	ldr	r2, [r3, #0]
 8012158:	68fb      	ldr	r3, [r7, #12]
 801215a:	689b      	ldr	r3, [r3, #8]
 801215c:	1c58      	adds	r0, r3, #1
 801215e:	68f9      	ldr	r1, [r7, #12]
 8012160:	6088      	str	r0, [r1, #8]
 8012162:	4413      	add	r3, r2
 8012164:	2200      	movs	r2, #0
 8012166:	701a      	strb	r2, [r3, #0]
}
 8012168:	bf00      	nop
 801216a:	3710      	adds	r7, #16
 801216c:	46bd      	mov	sp, r7
 801216e:	bd80      	pop	{r7, pc}

08012170 <mg_putchar_iobuf_static>:

static void mg_putchar_iobuf_static(char ch, void *param) {
 8012170:	b580      	push	{r7, lr}
 8012172:	b082      	sub	sp, #8
 8012174:	af00      	add	r7, sp, #0
 8012176:	4603      	mov	r3, r0
 8012178:	6039      	str	r1, [r7, #0]
 801217a:	71fb      	strb	r3, [r7, #7]
  mg_pfn_iobuf_private(ch, param, false);
 801217c:	79fb      	ldrb	r3, [r7, #7]
 801217e:	2200      	movs	r2, #0
 8012180:	6839      	ldr	r1, [r7, #0]
 8012182:	4618      	mov	r0, r3
 8012184:	f7ff ffac 	bl	80120e0 <mg_pfn_iobuf_private>
}
 8012188:	bf00      	nop
 801218a:	3708      	adds	r7, #8
 801218c:	46bd      	mov	sp, r7
 801218e:	bd80      	pop	{r7, pc}

08012190 <mg_pfn_iobuf>:

void mg_pfn_iobuf(char ch, void *param) {
 8012190:	b580      	push	{r7, lr}
 8012192:	b082      	sub	sp, #8
 8012194:	af00      	add	r7, sp, #0
 8012196:	4603      	mov	r3, r0
 8012198:	6039      	str	r1, [r7, #0]
 801219a:	71fb      	strb	r3, [r7, #7]
  mg_pfn_iobuf_private(ch, param, true);
 801219c:	79fb      	ldrb	r3, [r7, #7]
 801219e:	2201      	movs	r2, #1
 80121a0:	6839      	ldr	r1, [r7, #0]
 80121a2:	4618      	mov	r0, r3
 80121a4:	f7ff ff9c 	bl	80120e0 <mg_pfn_iobuf_private>
}
 80121a8:	bf00      	nop
 80121aa:	3708      	adds	r7, #8
 80121ac:	46bd      	mov	sp, r7
 80121ae:	bd80      	pop	{r7, pc}

080121b0 <mg_vsnprintf>:

size_t mg_vsnprintf(char *buf, size_t len, const char *fmt, va_list *ap) {
 80121b0:	b580      	push	{r7, lr}
 80121b2:	b08a      	sub	sp, #40	@ 0x28
 80121b4:	af00      	add	r7, sp, #0
 80121b6:	60f8      	str	r0, [r7, #12]
 80121b8:	60b9      	str	r1, [r7, #8]
 80121ba:	607a      	str	r2, [r7, #4]
 80121bc:	603b      	str	r3, [r7, #0]
  struct mg_iobuf io = {(uint8_t *) buf, len, 0, 0};
 80121be:	68fb      	ldr	r3, [r7, #12]
 80121c0:	617b      	str	r3, [r7, #20]
 80121c2:	68bb      	ldr	r3, [r7, #8]
 80121c4:	61bb      	str	r3, [r7, #24]
 80121c6:	2300      	movs	r3, #0
 80121c8:	61fb      	str	r3, [r7, #28]
 80121ca:	2300      	movs	r3, #0
 80121cc:	623b      	str	r3, [r7, #32]
  size_t n = mg_vxprintf(mg_putchar_iobuf_static, &io, fmt, ap);
 80121ce:	f107 0114 	add.w	r1, r7, #20
 80121d2:	683b      	ldr	r3, [r7, #0]
 80121d4:	687a      	ldr	r2, [r7, #4]
 80121d6:	4809      	ldr	r0, [pc, #36]	@ (80121fc <mg_vsnprintf+0x4c>)
 80121d8:	f7f6 fb1e 	bl	8008818 <mg_vxprintf>
 80121dc:	6278      	str	r0, [r7, #36]	@ 0x24
  if (n < len) buf[n] = '\0';
 80121de:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80121e0:	68bb      	ldr	r3, [r7, #8]
 80121e2:	429a      	cmp	r2, r3
 80121e4:	d204      	bcs.n	80121f0 <mg_vsnprintf+0x40>
 80121e6:	68fa      	ldr	r2, [r7, #12]
 80121e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80121ea:	4413      	add	r3, r2
 80121ec:	2200      	movs	r2, #0
 80121ee:	701a      	strb	r2, [r3, #0]
  return n;
 80121f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80121f2:	4618      	mov	r0, r3
 80121f4:	3728      	adds	r7, #40	@ 0x28
 80121f6:	46bd      	mov	sp, r7
 80121f8:	bd80      	pop	{r7, pc}
 80121fa:	bf00      	nop
 80121fc:	08012171 	.word	0x08012171

08012200 <mg_snprintf>:

size_t mg_snprintf(char *buf, size_t len, const char *fmt, ...) {
 8012200:	b40c      	push	{r2, r3}
 8012202:	b580      	push	{r7, lr}
 8012204:	b084      	sub	sp, #16
 8012206:	af00      	add	r7, sp, #0
 8012208:	6078      	str	r0, [r7, #4]
 801220a:	6039      	str	r1, [r7, #0]
  va_list ap;
  size_t n;
  va_start(ap, fmt);
 801220c:	f107 031c 	add.w	r3, r7, #28
 8012210:	60bb      	str	r3, [r7, #8]
  n = mg_vsnprintf(buf, len, fmt, &ap);
 8012212:	f107 0308 	add.w	r3, r7, #8
 8012216:	69ba      	ldr	r2, [r7, #24]
 8012218:	6839      	ldr	r1, [r7, #0]
 801221a:	6878      	ldr	r0, [r7, #4]
 801221c:	f7ff ffc8 	bl	80121b0 <mg_vsnprintf>
 8012220:	60f8      	str	r0, [r7, #12]
  va_end(ap);
  return n;
 8012222:	68fb      	ldr	r3, [r7, #12]
}
 8012224:	4618      	mov	r0, r3
 8012226:	3710      	adds	r7, #16
 8012228:	46bd      	mov	sp, r7
 801222a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 801222e:	b002      	add	sp, #8
 8012230:	4770      	bx	lr
	...

08012234 <mg_vmprintf>:

char *mg_vmprintf(const char *fmt, va_list *ap) {
 8012234:	b580      	push	{r7, lr}
 8012236:	b086      	sub	sp, #24
 8012238:	af00      	add	r7, sp, #0
 801223a:	6078      	str	r0, [r7, #4]
 801223c:	6039      	str	r1, [r7, #0]
  struct mg_iobuf io = {0, 0, 0, 256};
 801223e:	2300      	movs	r3, #0
 8012240:	60bb      	str	r3, [r7, #8]
 8012242:	2300      	movs	r3, #0
 8012244:	60fb      	str	r3, [r7, #12]
 8012246:	2300      	movs	r3, #0
 8012248:	613b      	str	r3, [r7, #16]
 801224a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 801224e:	617b      	str	r3, [r7, #20]
  mg_vxprintf(mg_pfn_iobuf, &io, fmt, ap);
 8012250:	f107 0108 	add.w	r1, r7, #8
 8012254:	683b      	ldr	r3, [r7, #0]
 8012256:	687a      	ldr	r2, [r7, #4]
 8012258:	4803      	ldr	r0, [pc, #12]	@ (8012268 <mg_vmprintf+0x34>)
 801225a:	f7f6 fadd 	bl	8008818 <mg_vxprintf>
  return (char *) io.buf;
 801225e:	68bb      	ldr	r3, [r7, #8]
}
 8012260:	4618      	mov	r0, r3
 8012262:	3718      	adds	r7, #24
 8012264:	46bd      	mov	sp, r7
 8012266:	bd80      	pop	{r7, pc}
 8012268:	08012191 	.word	0x08012191

0801226c <mg_mprintf>:

char *mg_mprintf(const char *fmt, ...) {
 801226c:	b40f      	push	{r0, r1, r2, r3}
 801226e:	b580      	push	{r7, lr}
 8012270:	b082      	sub	sp, #8
 8012272:	af00      	add	r7, sp, #0
  char *s;
  va_list ap;
  va_start(ap, fmt);
 8012274:	f107 0314 	add.w	r3, r7, #20
 8012278:	603b      	str	r3, [r7, #0]
  s = mg_vmprintf(fmt, &ap);
 801227a:	463b      	mov	r3, r7
 801227c:	4619      	mov	r1, r3
 801227e:	6938      	ldr	r0, [r7, #16]
 8012280:	f7ff ffd8 	bl	8012234 <mg_vmprintf>
 8012284:	6078      	str	r0, [r7, #4]
  va_end(ap);
  return s;
 8012286:	687b      	ldr	r3, [r7, #4]
}
 8012288:	4618      	mov	r0, r3
 801228a:	3708      	adds	r7, #8
 801228c:	46bd      	mov	sp, r7
 801228e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8012292:	b004      	add	sp, #16
 8012294:	4770      	bx	lr

08012296 <mg_pfn_stdout>:

void mg_pfn_stdout(char c, void *param) {
 8012296:	b580      	push	{r7, lr}
 8012298:	b082      	sub	sp, #8
 801229a:	af00      	add	r7, sp, #0
 801229c:	4603      	mov	r3, r0
 801229e:	6039      	str	r1, [r7, #0]
 80122a0:	71fb      	strb	r3, [r7, #7]
  putchar(c);
 80122a2:	79fb      	ldrb	r3, [r7, #7]
 80122a4:	4618      	mov	r0, r3
 80122a6:	f011 ff89 	bl	80241bc <putchar>
  (void) param;
}
 80122aa:	bf00      	nop
 80122ac:	3708      	adds	r7, #8
 80122ae:	46bd      	mov	sp, r7
 80122b0:	bd80      	pop	{r7, pc}
	...

080122b4 <print_ip4>:

static size_t print_ip4(void (*out)(char, void *), void *arg, uint8_t *p) {
 80122b4:	b580      	push	{r7, lr}
 80122b6:	b088      	sub	sp, #32
 80122b8:	af04      	add	r7, sp, #16
 80122ba:	60f8      	str	r0, [r7, #12]
 80122bc:	60b9      	str	r1, [r7, #8]
 80122be:	607a      	str	r2, [r7, #4]
  return mg_xprintf(out, arg, "%d.%d.%d.%d", p[0], p[1], p[2], p[3]);
 80122c0:	687b      	ldr	r3, [r7, #4]
 80122c2:	781b      	ldrb	r3, [r3, #0]
 80122c4:	4618      	mov	r0, r3
 80122c6:	687b      	ldr	r3, [r7, #4]
 80122c8:	3301      	adds	r3, #1
 80122ca:	781b      	ldrb	r3, [r3, #0]
 80122cc:	461a      	mov	r2, r3
 80122ce:	687b      	ldr	r3, [r7, #4]
 80122d0:	3302      	adds	r3, #2
 80122d2:	781b      	ldrb	r3, [r3, #0]
 80122d4:	4619      	mov	r1, r3
 80122d6:	687b      	ldr	r3, [r7, #4]
 80122d8:	3303      	adds	r3, #3
 80122da:	781b      	ldrb	r3, [r3, #0]
 80122dc:	9302      	str	r3, [sp, #8]
 80122de:	9101      	str	r1, [sp, #4]
 80122e0:	9200      	str	r2, [sp, #0]
 80122e2:	4603      	mov	r3, r0
 80122e4:	4a04      	ldr	r2, [pc, #16]	@ (80122f8 <print_ip4+0x44>)
 80122e6:	68b9      	ldr	r1, [r7, #8]
 80122e8:	68f8      	ldr	r0, [r7, #12]
 80122ea:	f7f6 fa7a 	bl	80087e2 <mg_xprintf>
 80122ee:	4603      	mov	r3, r0
}
 80122f0:	4618      	mov	r0, r3
 80122f2:	3710      	adds	r7, #16
 80122f4:	46bd      	mov	sp, r7
 80122f6:	bd80      	pop	{r7, pc}
 80122f8:	08026930 	.word	0x08026930

080122fc <print_ip6>:

static size_t print_ip6(void (*out)(char, void *), void *arg, uint16_t *p) {
 80122fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012300:	b08e      	sub	sp, #56	@ 0x38
 8012302:	af08      	add	r7, sp, #32
 8012304:	6178      	str	r0, [r7, #20]
 8012306:	6139      	str	r1, [r7, #16]
 8012308:	60fa      	str	r2, [r7, #12]
  return mg_xprintf(out, arg, "[%x:%x:%x:%x:%x:%x:%x:%x]", mg_ntohs(p[0]),
 801230a:	68fb      	ldr	r3, [r7, #12]
 801230c:	881b      	ldrh	r3, [r3, #0]
 801230e:	4618      	mov	r0, r3
 8012310:	f00e ff07 	bl	8021122 <mg_ntohs>
 8012314:	4603      	mov	r3, r0
 8012316:	4698      	mov	r8, r3
                    mg_ntohs(p[1]), mg_ntohs(p[2]), mg_ntohs(p[3]),
 8012318:	68fb      	ldr	r3, [r7, #12]
 801231a:	3302      	adds	r3, #2
 801231c:	881b      	ldrh	r3, [r3, #0]
 801231e:	4618      	mov	r0, r3
 8012320:	f00e feff 	bl	8021122 <mg_ntohs>
 8012324:	4603      	mov	r3, r0
  return mg_xprintf(out, arg, "[%x:%x:%x:%x:%x:%x:%x:%x]", mg_ntohs(p[0]),
 8012326:	461c      	mov	r4, r3
                    mg_ntohs(p[1]), mg_ntohs(p[2]), mg_ntohs(p[3]),
 8012328:	68fb      	ldr	r3, [r7, #12]
 801232a:	3304      	adds	r3, #4
 801232c:	881b      	ldrh	r3, [r3, #0]
 801232e:	4618      	mov	r0, r3
 8012330:	f00e fef7 	bl	8021122 <mg_ntohs>
 8012334:	4603      	mov	r3, r0
  return mg_xprintf(out, arg, "[%x:%x:%x:%x:%x:%x:%x:%x]", mg_ntohs(p[0]),
 8012336:	461d      	mov	r5, r3
                    mg_ntohs(p[1]), mg_ntohs(p[2]), mg_ntohs(p[3]),
 8012338:	68fb      	ldr	r3, [r7, #12]
 801233a:	3306      	adds	r3, #6
 801233c:	881b      	ldrh	r3, [r3, #0]
 801233e:	4618      	mov	r0, r3
 8012340:	f00e feef 	bl	8021122 <mg_ntohs>
 8012344:	4603      	mov	r3, r0
  return mg_xprintf(out, arg, "[%x:%x:%x:%x:%x:%x:%x:%x]", mg_ntohs(p[0]),
 8012346:	461e      	mov	r6, r3
                    mg_ntohs(p[4]), mg_ntohs(p[5]), mg_ntohs(p[6]),
 8012348:	68fb      	ldr	r3, [r7, #12]
 801234a:	3308      	adds	r3, #8
 801234c:	881b      	ldrh	r3, [r3, #0]
 801234e:	4618      	mov	r0, r3
 8012350:	f00e fee7 	bl	8021122 <mg_ntohs>
 8012354:	4603      	mov	r3, r0
  return mg_xprintf(out, arg, "[%x:%x:%x:%x:%x:%x:%x:%x]", mg_ntohs(p[0]),
 8012356:	60bb      	str	r3, [r7, #8]
                    mg_ntohs(p[4]), mg_ntohs(p[5]), mg_ntohs(p[6]),
 8012358:	68fb      	ldr	r3, [r7, #12]
 801235a:	330a      	adds	r3, #10
 801235c:	881b      	ldrh	r3, [r3, #0]
 801235e:	4618      	mov	r0, r3
 8012360:	f00e fedf 	bl	8021122 <mg_ntohs>
 8012364:	4603      	mov	r3, r0
  return mg_xprintf(out, arg, "[%x:%x:%x:%x:%x:%x:%x:%x]", mg_ntohs(p[0]),
 8012366:	607b      	str	r3, [r7, #4]
                    mg_ntohs(p[4]), mg_ntohs(p[5]), mg_ntohs(p[6]),
 8012368:	68fb      	ldr	r3, [r7, #12]
 801236a:	330c      	adds	r3, #12
 801236c:	881b      	ldrh	r3, [r3, #0]
 801236e:	4618      	mov	r0, r3
 8012370:	f00e fed7 	bl	8021122 <mg_ntohs>
 8012374:	4603      	mov	r3, r0
  return mg_xprintf(out, arg, "[%x:%x:%x:%x:%x:%x:%x:%x]", mg_ntohs(p[0]),
 8012376:	603b      	str	r3, [r7, #0]
                    mg_ntohs(p[7]));
 8012378:	68fb      	ldr	r3, [r7, #12]
 801237a:	330e      	adds	r3, #14
 801237c:	881b      	ldrh	r3, [r3, #0]
 801237e:	4618      	mov	r0, r3
 8012380:	f00e fecf 	bl	8021122 <mg_ntohs>
 8012384:	4603      	mov	r3, r0
  return mg_xprintf(out, arg, "[%x:%x:%x:%x:%x:%x:%x:%x]", mg_ntohs(p[0]),
 8012386:	9306      	str	r3, [sp, #24]
 8012388:	683a      	ldr	r2, [r7, #0]
 801238a:	9205      	str	r2, [sp, #20]
 801238c:	687a      	ldr	r2, [r7, #4]
 801238e:	9204      	str	r2, [sp, #16]
 8012390:	68bb      	ldr	r3, [r7, #8]
 8012392:	9303      	str	r3, [sp, #12]
 8012394:	9602      	str	r6, [sp, #8]
 8012396:	9501      	str	r5, [sp, #4]
 8012398:	9400      	str	r4, [sp, #0]
 801239a:	4643      	mov	r3, r8
 801239c:	4a05      	ldr	r2, [pc, #20]	@ (80123b4 <print_ip6+0xb8>)
 801239e:	6939      	ldr	r1, [r7, #16]
 80123a0:	6978      	ldr	r0, [r7, #20]
 80123a2:	f7f6 fa1e 	bl	80087e2 <mg_xprintf>
 80123a6:	4603      	mov	r3, r0
}
 80123a8:	4618      	mov	r0, r3
 80123aa:	3718      	adds	r7, #24
 80123ac:	46bd      	mov	sp, r7
 80123ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80123b2:	bf00      	nop
 80123b4:	0802693c 	.word	0x0802693c

080123b8 <mg_print_ip4>:

size_t mg_print_ip4(void (*out)(char, void *), void *arg, va_list *ap) {
 80123b8:	b580      	push	{r7, lr}
 80123ba:	b086      	sub	sp, #24
 80123bc:	af00      	add	r7, sp, #0
 80123be:	60f8      	str	r0, [r7, #12]
 80123c0:	60b9      	str	r1, [r7, #8]
 80123c2:	607a      	str	r2, [r7, #4]
  uint8_t *p = va_arg(*ap, uint8_t *);
 80123c4:	687b      	ldr	r3, [r7, #4]
 80123c6:	681b      	ldr	r3, [r3, #0]
 80123c8:	1d19      	adds	r1, r3, #4
 80123ca:	687a      	ldr	r2, [r7, #4]
 80123cc:	6011      	str	r1, [r2, #0]
 80123ce:	681b      	ldr	r3, [r3, #0]
 80123d0:	617b      	str	r3, [r7, #20]
  return print_ip4(out, arg, p);
 80123d2:	697a      	ldr	r2, [r7, #20]
 80123d4:	68b9      	ldr	r1, [r7, #8]
 80123d6:	68f8      	ldr	r0, [r7, #12]
 80123d8:	f7ff ff6c 	bl	80122b4 <print_ip4>
 80123dc:	4603      	mov	r3, r0
}
 80123de:	4618      	mov	r0, r3
 80123e0:	3718      	adds	r7, #24
 80123e2:	46bd      	mov	sp, r7
 80123e4:	bd80      	pop	{r7, pc}

080123e6 <mg_print_ip6>:

size_t mg_print_ip6(void (*out)(char, void *), void *arg, va_list *ap) {
 80123e6:	b580      	push	{r7, lr}
 80123e8:	b086      	sub	sp, #24
 80123ea:	af00      	add	r7, sp, #0
 80123ec:	60f8      	str	r0, [r7, #12]
 80123ee:	60b9      	str	r1, [r7, #8]
 80123f0:	607a      	str	r2, [r7, #4]
  uint16_t *p = va_arg(*ap, uint16_t *);
 80123f2:	687b      	ldr	r3, [r7, #4]
 80123f4:	681b      	ldr	r3, [r3, #0]
 80123f6:	1d19      	adds	r1, r3, #4
 80123f8:	687a      	ldr	r2, [r7, #4]
 80123fa:	6011      	str	r1, [r2, #0]
 80123fc:	681b      	ldr	r3, [r3, #0]
 80123fe:	617b      	str	r3, [r7, #20]
  return print_ip6(out, arg, p);
 8012400:	697a      	ldr	r2, [r7, #20]
 8012402:	68b9      	ldr	r1, [r7, #8]
 8012404:	68f8      	ldr	r0, [r7, #12]
 8012406:	f7ff ff79 	bl	80122fc <print_ip6>
 801240a:	4603      	mov	r3, r0
}
 801240c:	4618      	mov	r0, r3
 801240e:	3718      	adds	r7, #24
 8012410:	46bd      	mov	sp, r7
 8012412:	bd80      	pop	{r7, pc}

08012414 <mg_print_ip>:

size_t mg_print_ip(void (*out)(char, void *), void *arg, va_list *ap) {
 8012414:	b580      	push	{r7, lr}
 8012416:	b086      	sub	sp, #24
 8012418:	af00      	add	r7, sp, #0
 801241a:	60f8      	str	r0, [r7, #12]
 801241c:	60b9      	str	r1, [r7, #8]
 801241e:	607a      	str	r2, [r7, #4]
  struct mg_addr *addr = va_arg(*ap, struct mg_addr *);
 8012420:	687b      	ldr	r3, [r7, #4]
 8012422:	681b      	ldr	r3, [r3, #0]
 8012424:	1d19      	adds	r1, r3, #4
 8012426:	687a      	ldr	r2, [r7, #4]
 8012428:	6011      	str	r1, [r2, #0]
 801242a:	681b      	ldr	r3, [r3, #0]
 801242c:	617b      	str	r3, [r7, #20]
  if (addr->is_ip6) return print_ip6(out, arg, (uint16_t *) addr->ip);
 801242e:	697b      	ldr	r3, [r7, #20]
 8012430:	7cdb      	ldrb	r3, [r3, #19]
 8012432:	2b00      	cmp	r3, #0
 8012434:	d007      	beq.n	8012446 <mg_print_ip+0x32>
 8012436:	697b      	ldr	r3, [r7, #20]
 8012438:	461a      	mov	r2, r3
 801243a:	68b9      	ldr	r1, [r7, #8]
 801243c:	68f8      	ldr	r0, [r7, #12]
 801243e:	f7ff ff5d 	bl	80122fc <print_ip6>
 8012442:	4603      	mov	r3, r0
 8012444:	e006      	b.n	8012454 <mg_print_ip+0x40>
  return print_ip4(out, arg, (uint8_t *) &addr->ip);
 8012446:	697b      	ldr	r3, [r7, #20]
 8012448:	461a      	mov	r2, r3
 801244a:	68b9      	ldr	r1, [r7, #8]
 801244c:	68f8      	ldr	r0, [r7, #12]
 801244e:	f7ff ff31 	bl	80122b4 <print_ip4>
 8012452:	4603      	mov	r3, r0
}
 8012454:	4618      	mov	r0, r3
 8012456:	3718      	adds	r7, #24
 8012458:	46bd      	mov	sp, r7
 801245a:	bd80      	pop	{r7, pc}

0801245c <mg_print_ip_port>:

size_t mg_print_ip_port(void (*out)(char, void *), void *arg, va_list *ap) {
 801245c:	b580      	push	{r7, lr}
 801245e:	b088      	sub	sp, #32
 8012460:	af02      	add	r7, sp, #8
 8012462:	60f8      	str	r0, [r7, #12]
 8012464:	60b9      	str	r1, [r7, #8]
 8012466:	607a      	str	r2, [r7, #4]
  struct mg_addr *a = va_arg(*ap, struct mg_addr *);
 8012468:	687b      	ldr	r3, [r7, #4]
 801246a:	681b      	ldr	r3, [r3, #0]
 801246c:	1d19      	adds	r1, r3, #4
 801246e:	687a      	ldr	r2, [r7, #4]
 8012470:	6011      	str	r1, [r2, #0]
 8012472:	681b      	ldr	r3, [r3, #0]
 8012474:	617b      	str	r3, [r7, #20]
  return mg_xprintf(out, arg, "%M:%hu", mg_print_ip, a, mg_ntohs(a->port));
 8012476:	697b      	ldr	r3, [r7, #20]
 8012478:	8a1b      	ldrh	r3, [r3, #16]
 801247a:	4618      	mov	r0, r3
 801247c:	f00e fe51 	bl	8021122 <mg_ntohs>
 8012480:	4603      	mov	r3, r0
 8012482:	9301      	str	r3, [sp, #4]
 8012484:	697b      	ldr	r3, [r7, #20]
 8012486:	9300      	str	r3, [sp, #0]
 8012488:	4b05      	ldr	r3, [pc, #20]	@ (80124a0 <mg_print_ip_port+0x44>)
 801248a:	4a06      	ldr	r2, [pc, #24]	@ (80124a4 <mg_print_ip_port+0x48>)
 801248c:	68b9      	ldr	r1, [r7, #8]
 801248e:	68f8      	ldr	r0, [r7, #12]
 8012490:	f7f6 f9a7 	bl	80087e2 <mg_xprintf>
 8012494:	4603      	mov	r3, r0
}
 8012496:	4618      	mov	r0, r3
 8012498:	3718      	adds	r7, #24
 801249a:	46bd      	mov	sp, r7
 801249c:	bd80      	pop	{r7, pc}
 801249e:	bf00      	nop
 80124a0:	08012415 	.word	0x08012415
 80124a4:	08026958 	.word	0x08026958

080124a8 <mg_print_mac>:

size_t mg_print_mac(void (*out)(char, void *), void *arg, va_list *ap) {
 80124a8:	b5b0      	push	{r4, r5, r7, lr}
 80124aa:	b08c      	sub	sp, #48	@ 0x30
 80124ac:	af06      	add	r7, sp, #24
 80124ae:	60f8      	str	r0, [r7, #12]
 80124b0:	60b9      	str	r1, [r7, #8]
 80124b2:	607a      	str	r2, [r7, #4]
  uint8_t *p = va_arg(*ap, uint8_t *);
 80124b4:	687b      	ldr	r3, [r7, #4]
 80124b6:	681b      	ldr	r3, [r3, #0]
 80124b8:	1d19      	adds	r1, r3, #4
 80124ba:	687a      	ldr	r2, [r7, #4]
 80124bc:	6011      	str	r1, [r2, #0]
 80124be:	681b      	ldr	r3, [r3, #0]
 80124c0:	617b      	str	r3, [r7, #20]
  return mg_xprintf(out, arg, "%02x:%02x:%02x:%02x:%02x:%02x", p[0], p[1], p[2],
 80124c2:	697b      	ldr	r3, [r7, #20]
 80124c4:	781b      	ldrb	r3, [r3, #0]
 80124c6:	461d      	mov	r5, r3
 80124c8:	697b      	ldr	r3, [r7, #20]
 80124ca:	3301      	adds	r3, #1
 80124cc:	781b      	ldrb	r3, [r3, #0]
 80124ce:	461a      	mov	r2, r3
 80124d0:	697b      	ldr	r3, [r7, #20]
 80124d2:	3302      	adds	r3, #2
 80124d4:	781b      	ldrb	r3, [r3, #0]
 80124d6:	4619      	mov	r1, r3
                    p[3], p[4], p[5]);
 80124d8:	697b      	ldr	r3, [r7, #20]
 80124da:	3303      	adds	r3, #3
 80124dc:	781b      	ldrb	r3, [r3, #0]
  return mg_xprintf(out, arg, "%02x:%02x:%02x:%02x:%02x:%02x", p[0], p[1], p[2],
 80124de:	4618      	mov	r0, r3
                    p[3], p[4], p[5]);
 80124e0:	697b      	ldr	r3, [r7, #20]
 80124e2:	3304      	adds	r3, #4
 80124e4:	781b      	ldrb	r3, [r3, #0]
  return mg_xprintf(out, arg, "%02x:%02x:%02x:%02x:%02x:%02x", p[0], p[1], p[2],
 80124e6:	461c      	mov	r4, r3
                    p[3], p[4], p[5]);
 80124e8:	697b      	ldr	r3, [r7, #20]
 80124ea:	3305      	adds	r3, #5
 80124ec:	781b      	ldrb	r3, [r3, #0]
  return mg_xprintf(out, arg, "%02x:%02x:%02x:%02x:%02x:%02x", p[0], p[1], p[2],
 80124ee:	9304      	str	r3, [sp, #16]
 80124f0:	9403      	str	r4, [sp, #12]
 80124f2:	9002      	str	r0, [sp, #8]
 80124f4:	9101      	str	r1, [sp, #4]
 80124f6:	9200      	str	r2, [sp, #0]
 80124f8:	462b      	mov	r3, r5
 80124fa:	4a05      	ldr	r2, [pc, #20]	@ (8012510 <mg_print_mac+0x68>)
 80124fc:	68b9      	ldr	r1, [r7, #8]
 80124fe:	68f8      	ldr	r0, [r7, #12]
 8012500:	f7f6 f96f 	bl	80087e2 <mg_xprintf>
 8012504:	4603      	mov	r3, r0
}
 8012506:	4618      	mov	r0, r3
 8012508:	3718      	adds	r7, #24
 801250a:	46bd      	mov	sp, r7
 801250c:	bdb0      	pop	{r4, r5, r7, pc}
 801250e:	bf00      	nop
 8012510:	08026960 	.word	0x08026960

08012514 <mg_esc>:

static char mg_esc(int c, bool esc) {
 8012514:	b480      	push	{r7}
 8012516:	b087      	sub	sp, #28
 8012518:	af00      	add	r7, sp, #0
 801251a:	6078      	str	r0, [r7, #4]
 801251c:	460b      	mov	r3, r1
 801251e:	70fb      	strb	r3, [r7, #3]
  const char *p, *esc1 = "\b\f\n\r\t\\\"", *esc2 = "bfnrt\\\"";
 8012520:	4b19      	ldr	r3, [pc, #100]	@ (8012588 <mg_esc+0x74>)
 8012522:	613b      	str	r3, [r7, #16]
 8012524:	4b19      	ldr	r3, [pc, #100]	@ (801258c <mg_esc+0x78>)
 8012526:	60fb      	str	r3, [r7, #12]
  for (p = esc ? esc1 : esc2; *p != '\0'; p++) {
 8012528:	78fb      	ldrb	r3, [r7, #3]
 801252a:	2b00      	cmp	r3, #0
 801252c:	d001      	beq.n	8012532 <mg_esc+0x1e>
 801252e:	693b      	ldr	r3, [r7, #16]
 8012530:	e000      	b.n	8012534 <mg_esc+0x20>
 8012532:	68fb      	ldr	r3, [r7, #12]
 8012534:	617b      	str	r3, [r7, #20]
 8012536:	e01b      	b.n	8012570 <mg_esc+0x5c>
    if (*p == c) return esc ? esc2[p - esc1] : esc1[p - esc2];
 8012538:	697b      	ldr	r3, [r7, #20]
 801253a:	781b      	ldrb	r3, [r3, #0]
 801253c:	461a      	mov	r2, r3
 801253e:	687b      	ldr	r3, [r7, #4]
 8012540:	4293      	cmp	r3, r2
 8012542:	d112      	bne.n	801256a <mg_esc+0x56>
 8012544:	78fb      	ldrb	r3, [r7, #3]
 8012546:	2b00      	cmp	r3, #0
 8012548:	d007      	beq.n	801255a <mg_esc+0x46>
 801254a:	697a      	ldr	r2, [r7, #20]
 801254c:	693b      	ldr	r3, [r7, #16]
 801254e:	1ad3      	subs	r3, r2, r3
 8012550:	461a      	mov	r2, r3
 8012552:	68fb      	ldr	r3, [r7, #12]
 8012554:	4413      	add	r3, r2
 8012556:	781b      	ldrb	r3, [r3, #0]
 8012558:	e00f      	b.n	801257a <mg_esc+0x66>
 801255a:	697a      	ldr	r2, [r7, #20]
 801255c:	68fb      	ldr	r3, [r7, #12]
 801255e:	1ad3      	subs	r3, r2, r3
 8012560:	461a      	mov	r2, r3
 8012562:	693b      	ldr	r3, [r7, #16]
 8012564:	4413      	add	r3, r2
 8012566:	781b      	ldrb	r3, [r3, #0]
 8012568:	e007      	b.n	801257a <mg_esc+0x66>
  for (p = esc ? esc1 : esc2; *p != '\0'; p++) {
 801256a:	697b      	ldr	r3, [r7, #20]
 801256c:	3301      	adds	r3, #1
 801256e:	617b      	str	r3, [r7, #20]
 8012570:	697b      	ldr	r3, [r7, #20]
 8012572:	781b      	ldrb	r3, [r3, #0]
 8012574:	2b00      	cmp	r3, #0
 8012576:	d1df      	bne.n	8012538 <mg_esc+0x24>
  }
  return 0;
 8012578:	2300      	movs	r3, #0
}
 801257a:	4618      	mov	r0, r3
 801257c:	371c      	adds	r7, #28
 801257e:	46bd      	mov	sp, r7
 8012580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012584:	4770      	bx	lr
 8012586:	bf00      	nop
 8012588:	08025fb0 	.word	0x08025fb0
 801258c:	08025fb8 	.word	0x08025fb8

08012590 <mg_escape>:

static char mg_escape(int c) {
 8012590:	b580      	push	{r7, lr}
 8012592:	b082      	sub	sp, #8
 8012594:	af00      	add	r7, sp, #0
 8012596:	6078      	str	r0, [r7, #4]
  return mg_esc(c, true);
 8012598:	2101      	movs	r1, #1
 801259a:	6878      	ldr	r0, [r7, #4]
 801259c:	f7ff ffba 	bl	8012514 <mg_esc>
 80125a0:	4603      	mov	r3, r0
}
 80125a2:	4618      	mov	r0, r3
 80125a4:	3708      	adds	r7, #8
 80125a6:	46bd      	mov	sp, r7
 80125a8:	bd80      	pop	{r7, pc}

080125aa <qcpy>:

static size_t qcpy(void (*out)(char, void *), void *ptr, char *buf,
                   size_t len) {
 80125aa:	b580      	push	{r7, lr}
 80125ac:	b088      	sub	sp, #32
 80125ae:	af00      	add	r7, sp, #0
 80125b0:	60f8      	str	r0, [r7, #12]
 80125b2:	60b9      	str	r1, [r7, #8]
 80125b4:	607a      	str	r2, [r7, #4]
 80125b6:	603b      	str	r3, [r7, #0]
  size_t i = 0, extra = 0;
 80125b8:	2300      	movs	r3, #0
 80125ba:	61fb      	str	r3, [r7, #28]
 80125bc:	2300      	movs	r3, #0
 80125be:	61bb      	str	r3, [r7, #24]
  for (i = 0; i < len && buf[i] != '\0'; i++) {
 80125c0:	2300      	movs	r3, #0
 80125c2:	61fb      	str	r3, [r7, #28]
 80125c4:	e023      	b.n	801260e <qcpy+0x64>
    char c = mg_escape(buf[i]);
 80125c6:	687a      	ldr	r2, [r7, #4]
 80125c8:	69fb      	ldr	r3, [r7, #28]
 80125ca:	4413      	add	r3, r2
 80125cc:	781b      	ldrb	r3, [r3, #0]
 80125ce:	4618      	mov	r0, r3
 80125d0:	f7ff ffde 	bl	8012590 <mg_escape>
 80125d4:	4603      	mov	r3, r0
 80125d6:	75fb      	strb	r3, [r7, #23]
    if (c) {
 80125d8:	7dfb      	ldrb	r3, [r7, #23]
 80125da:	2b00      	cmp	r3, #0
 80125dc:	d00c      	beq.n	80125f8 <qcpy+0x4e>
      out('\\', ptr), out(c, ptr), extra++;
 80125de:	68fb      	ldr	r3, [r7, #12]
 80125e0:	68b9      	ldr	r1, [r7, #8]
 80125e2:	205c      	movs	r0, #92	@ 0x5c
 80125e4:	4798      	blx	r3
 80125e6:	7dfa      	ldrb	r2, [r7, #23]
 80125e8:	68fb      	ldr	r3, [r7, #12]
 80125ea:	68b9      	ldr	r1, [r7, #8]
 80125ec:	4610      	mov	r0, r2
 80125ee:	4798      	blx	r3
 80125f0:	69bb      	ldr	r3, [r7, #24]
 80125f2:	3301      	adds	r3, #1
 80125f4:	61bb      	str	r3, [r7, #24]
 80125f6:	e007      	b.n	8012608 <qcpy+0x5e>
    } else {
      out(buf[i], ptr);
 80125f8:	687a      	ldr	r2, [r7, #4]
 80125fa:	69fb      	ldr	r3, [r7, #28]
 80125fc:	4413      	add	r3, r2
 80125fe:	781a      	ldrb	r2, [r3, #0]
 8012600:	68fb      	ldr	r3, [r7, #12]
 8012602:	68b9      	ldr	r1, [r7, #8]
 8012604:	4610      	mov	r0, r2
 8012606:	4798      	blx	r3
  for (i = 0; i < len && buf[i] != '\0'; i++) {
 8012608:	69fb      	ldr	r3, [r7, #28]
 801260a:	3301      	adds	r3, #1
 801260c:	61fb      	str	r3, [r7, #28]
 801260e:	69fa      	ldr	r2, [r7, #28]
 8012610:	683b      	ldr	r3, [r7, #0]
 8012612:	429a      	cmp	r2, r3
 8012614:	d205      	bcs.n	8012622 <qcpy+0x78>
 8012616:	687a      	ldr	r2, [r7, #4]
 8012618:	69fb      	ldr	r3, [r7, #28]
 801261a:	4413      	add	r3, r2
 801261c:	781b      	ldrb	r3, [r3, #0]
 801261e:	2b00      	cmp	r3, #0
 8012620:	d1d1      	bne.n	80125c6 <qcpy+0x1c>
    }
  }
  return i + extra;
 8012622:	69fa      	ldr	r2, [r7, #28]
 8012624:	69bb      	ldr	r3, [r7, #24]
 8012626:	4413      	add	r3, r2
}
 8012628:	4618      	mov	r0, r3
 801262a:	3720      	adds	r7, #32
 801262c:	46bd      	mov	sp, r7
 801262e:	bd80      	pop	{r7, pc}

08012630 <mg_print_hex>:
    n += j;
  }
  return n;
}

size_t mg_print_hex(void (*out)(char, void *), void *arg, va_list *ap) {
 8012630:	b580      	push	{r7, lr}
 8012632:	b088      	sub	sp, #32
 8012634:	af00      	add	r7, sp, #0
 8012636:	60f8      	str	r0, [r7, #12]
 8012638:	60b9      	str	r1, [r7, #8]
 801263a:	607a      	str	r2, [r7, #4]
  size_t bl = (size_t) va_arg(*ap, int);
 801263c:	687b      	ldr	r3, [r7, #4]
 801263e:	681b      	ldr	r3, [r3, #0]
 8012640:	1d19      	adds	r1, r3, #4
 8012642:	687a      	ldr	r2, [r7, #4]
 8012644:	6011      	str	r1, [r2, #0]
 8012646:	681b      	ldr	r3, [r3, #0]
 8012648:	61bb      	str	r3, [r7, #24]
  uint8_t *p = va_arg(*ap, uint8_t *);
 801264a:	687b      	ldr	r3, [r7, #4]
 801264c:	681b      	ldr	r3, [r3, #0]
 801264e:	1d19      	adds	r1, r3, #4
 8012650:	687a      	ldr	r2, [r7, #4]
 8012652:	6011      	str	r1, [r2, #0]
 8012654:	681b      	ldr	r3, [r3, #0]
 8012656:	617b      	str	r3, [r7, #20]
  const char *hex = "0123456789abcdef";
 8012658:	4b16      	ldr	r3, [pc, #88]	@ (80126b4 <mg_print_hex+0x84>)
 801265a:	613b      	str	r3, [r7, #16]
  size_t j;
  for (j = 0; j < bl; j++) {
 801265c:	2300      	movs	r3, #0
 801265e:	61fb      	str	r3, [r7, #28]
 8012660:	e01e      	b.n	80126a0 <mg_print_hex+0x70>
    out(hex[(p[j] >> 4) & 0x0F], arg);
 8012662:	697a      	ldr	r2, [r7, #20]
 8012664:	69fb      	ldr	r3, [r7, #28]
 8012666:	4413      	add	r3, r2
 8012668:	781b      	ldrb	r3, [r3, #0]
 801266a:	091b      	lsrs	r3, r3, #4
 801266c:	b2db      	uxtb	r3, r3
 801266e:	f003 030f 	and.w	r3, r3, #15
 8012672:	693a      	ldr	r2, [r7, #16]
 8012674:	4413      	add	r3, r2
 8012676:	781a      	ldrb	r2, [r3, #0]
 8012678:	68fb      	ldr	r3, [r7, #12]
 801267a:	68b9      	ldr	r1, [r7, #8]
 801267c:	4610      	mov	r0, r2
 801267e:	4798      	blx	r3
    out(hex[p[j] & 0x0F], arg);
 8012680:	697a      	ldr	r2, [r7, #20]
 8012682:	69fb      	ldr	r3, [r7, #28]
 8012684:	4413      	add	r3, r2
 8012686:	781b      	ldrb	r3, [r3, #0]
 8012688:	f003 030f 	and.w	r3, r3, #15
 801268c:	693a      	ldr	r2, [r7, #16]
 801268e:	4413      	add	r3, r2
 8012690:	781a      	ldrb	r2, [r3, #0]
 8012692:	68fb      	ldr	r3, [r7, #12]
 8012694:	68b9      	ldr	r1, [r7, #8]
 8012696:	4610      	mov	r0, r2
 8012698:	4798      	blx	r3
  for (j = 0; j < bl; j++) {
 801269a:	69fb      	ldr	r3, [r7, #28]
 801269c:	3301      	adds	r3, #1
 801269e:	61fb      	str	r3, [r7, #28]
 80126a0:	69fa      	ldr	r2, [r7, #28]
 80126a2:	69bb      	ldr	r3, [r7, #24]
 80126a4:	429a      	cmp	r2, r3
 80126a6:	d3dc      	bcc.n	8012662 <mg_print_hex+0x32>
  }
  return 2 * bl;
 80126a8:	69bb      	ldr	r3, [r7, #24]
 80126aa:	005b      	lsls	r3, r3, #1
}
 80126ac:	4618      	mov	r0, r3
 80126ae:	3720      	adds	r7, #32
 80126b0:	46bd      	mov	sp, r7
 80126b2:	bd80      	pop	{r7, pc}
 80126b4:	08025428 	.word	0x08025428

080126b8 <mg_print_esc>:
  size_t len = (size_t) va_arg(*ap, int);
  uint8_t *buf = va_arg(*ap, uint8_t *);
  return bcpy(out, arg, buf, len);
}

size_t mg_print_esc(void (*out)(char, void *), void *arg, va_list *ap) {
 80126b8:	b580      	push	{r7, lr}
 80126ba:	b086      	sub	sp, #24
 80126bc:	af00      	add	r7, sp, #0
 80126be:	60f8      	str	r0, [r7, #12]
 80126c0:	60b9      	str	r1, [r7, #8]
 80126c2:	607a      	str	r2, [r7, #4]
  size_t len = (size_t) va_arg(*ap, int);
 80126c4:	687b      	ldr	r3, [r7, #4]
 80126c6:	681b      	ldr	r3, [r3, #0]
 80126c8:	1d19      	adds	r1, r3, #4
 80126ca:	687a      	ldr	r2, [r7, #4]
 80126cc:	6011      	str	r1, [r2, #0]
 80126ce:	681b      	ldr	r3, [r3, #0]
 80126d0:	617b      	str	r3, [r7, #20]
  char *p = va_arg(*ap, char *);
 80126d2:	687b      	ldr	r3, [r7, #4]
 80126d4:	681b      	ldr	r3, [r3, #0]
 80126d6:	1d19      	adds	r1, r3, #4
 80126d8:	687a      	ldr	r2, [r7, #4]
 80126da:	6011      	str	r1, [r2, #0]
 80126dc:	681b      	ldr	r3, [r3, #0]
 80126de:	613b      	str	r3, [r7, #16]
  if (len == 0) len = p == NULL ? 0 : strlen(p);
 80126e0:	697b      	ldr	r3, [r7, #20]
 80126e2:	2b00      	cmp	r3, #0
 80126e4:	d109      	bne.n	80126fa <mg_print_esc+0x42>
 80126e6:	693b      	ldr	r3, [r7, #16]
 80126e8:	2b00      	cmp	r3, #0
 80126ea:	d004      	beq.n	80126f6 <mg_print_esc+0x3e>
 80126ec:	6938      	ldr	r0, [r7, #16]
 80126ee:	f7ed fe07 	bl	8000300 <strlen>
 80126f2:	4603      	mov	r3, r0
 80126f4:	e000      	b.n	80126f8 <mg_print_esc+0x40>
 80126f6:	2300      	movs	r3, #0
 80126f8:	617b      	str	r3, [r7, #20]
  return qcpy(out, arg, p, len);
 80126fa:	697b      	ldr	r3, [r7, #20]
 80126fc:	693a      	ldr	r2, [r7, #16]
 80126fe:	68b9      	ldr	r1, [r7, #8]
 8012700:	68f8      	ldr	r0, [r7, #12]
 8012702:	f7ff ff52 	bl	80125aa <qcpy>
 8012706:	4603      	mov	r3, r0
}
 8012708:	4618      	mov	r0, r3
 801270a:	3718      	adds	r7, #24
 801270c:	46bd      	mov	sp, r7
 801270e:	bd80      	pop	{r7, pc}

08012710 <mg_queue_read_len>:
  q->size = size;
  q->buf = buf;
  q->head = q->tail = 0;
}

static size_t mg_queue_read_len(struct mg_queue *q) {
 8012710:	b580      	push	{r7, lr}
 8012712:	b084      	sub	sp, #16
 8012714:	af00      	add	r7, sp, #0
 8012716:	6078      	str	r0, [r7, #4]
  uint32_t n = 0;
 8012718:	2300      	movs	r3, #0
 801271a:	60fb      	str	r3, [r7, #12]
  MG_MEMORY_BARRIER();
 801271c:	f3bf 8f5b 	dmb	ish
  memcpy(&n, q->buf + q->tail, sizeof(n));
 8012720:	687b      	ldr	r3, [r7, #4]
 8012722:	681a      	ldr	r2, [r3, #0]
 8012724:	687b      	ldr	r3, [r7, #4]
 8012726:	689b      	ldr	r3, [r3, #8]
 8012728:	4413      	add	r3, r2
 801272a:	681b      	ldr	r3, [r3, #0]
 801272c:	60fb      	str	r3, [r7, #12]
  assert(q->tail + n + sizeof(n) <= q->size);
 801272e:	687b      	ldr	r3, [r7, #4]
 8012730:	689a      	ldr	r2, [r3, #8]
 8012732:	68fb      	ldr	r3, [r7, #12]
 8012734:	4413      	add	r3, r2
 8012736:	1d1a      	adds	r2, r3, #4
 8012738:	687b      	ldr	r3, [r7, #4]
 801273a:	685b      	ldr	r3, [r3, #4]
 801273c:	429a      	cmp	r2, r3
 801273e:	d906      	bls.n	801274e <mg_queue_read_len+0x3e>
 8012740:	4b05      	ldr	r3, [pc, #20]	@ (8012758 <mg_queue_read_len+0x48>)
 8012742:	4a06      	ldr	r2, [pc, #24]	@ (801275c <mg_queue_read_len+0x4c>)
 8012744:	f641 715d 	movw	r1, #8029	@ 0x1f5d
 8012748:	4805      	ldr	r0, [pc, #20]	@ (8012760 <mg_queue_read_len+0x50>)
 801274a:	f011 faa3 	bl	8023c94 <__assert_func>
  return n;
 801274e:	68fb      	ldr	r3, [r7, #12]
}
 8012750:	4618      	mov	r0, r3
 8012752:	3710      	adds	r7, #16
 8012754:	46bd      	mov	sp, r7
 8012756:	bd80      	pop	{r7, pc}
 8012758:	080269c4 	.word	0x080269c4
 801275c:	08028978 	.word	0x08028978
 8012760:	08025140 	.word	0x08025140

08012764 <mg_queue_write_len>:

static void mg_queue_write_len(struct mg_queue *q, size_t len) {
 8012764:	b480      	push	{r7}
 8012766:	b085      	sub	sp, #20
 8012768:	af00      	add	r7, sp, #0
 801276a:	6078      	str	r0, [r7, #4]
 801276c:	6039      	str	r1, [r7, #0]
  uint32_t n = (uint32_t) len;
 801276e:	683b      	ldr	r3, [r7, #0]
 8012770:	60fb      	str	r3, [r7, #12]
  memcpy(q->buf + q->head, &n, sizeof(n));
 8012772:	687b      	ldr	r3, [r7, #4]
 8012774:	681a      	ldr	r2, [r3, #0]
 8012776:	687b      	ldr	r3, [r7, #4]
 8012778:	68db      	ldr	r3, [r3, #12]
 801277a:	4413      	add	r3, r2
 801277c:	68fa      	ldr	r2, [r7, #12]
 801277e:	601a      	str	r2, [r3, #0]
  MG_MEMORY_BARRIER();
 8012780:	f3bf 8f5b 	dmb	ish
}
 8012784:	bf00      	nop
 8012786:	3714      	adds	r7, #20
 8012788:	46bd      	mov	sp, r7
 801278a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801278e:	4770      	bx	lr

08012790 <mg_queue_book>:

size_t mg_queue_book(struct mg_queue *q, char **buf, size_t len) {
 8012790:	b580      	push	{r7, lr}
 8012792:	b086      	sub	sp, #24
 8012794:	af00      	add	r7, sp, #0
 8012796:	60f8      	str	r0, [r7, #12]
 8012798:	60b9      	str	r1, [r7, #8]
 801279a:	607a      	str	r2, [r7, #4]
  size_t space = 0, hs = sizeof(uint32_t) * 2;  // *2 is for the 0 marker
 801279c:	2300      	movs	r3, #0
 801279e:	617b      	str	r3, [r7, #20]
 80127a0:	2308      	movs	r3, #8
 80127a2:	613b      	str	r3, [r7, #16]
  if (q->head >= q->tail && q->head + len + hs <= q->size) {
 80127a4:	68fb      	ldr	r3, [r7, #12]
 80127a6:	68da      	ldr	r2, [r3, #12]
 80127a8:	68fb      	ldr	r3, [r7, #12]
 80127aa:	689b      	ldr	r3, [r3, #8]
 80127ac:	429a      	cmp	r2, r3
 80127ae:	d312      	bcc.n	80127d6 <mg_queue_book+0x46>
 80127b0:	68fb      	ldr	r3, [r7, #12]
 80127b2:	68da      	ldr	r2, [r3, #12]
 80127b4:	687b      	ldr	r3, [r7, #4]
 80127b6:	441a      	add	r2, r3
 80127b8:	693b      	ldr	r3, [r7, #16]
 80127ba:	441a      	add	r2, r3
 80127bc:	68fb      	ldr	r3, [r7, #12]
 80127be:	685b      	ldr	r3, [r3, #4]
 80127c0:	429a      	cmp	r2, r3
 80127c2:	d808      	bhi.n	80127d6 <mg_queue_book+0x46>
    space = q->size - q->head - hs;  // There is enough space
 80127c4:	68fb      	ldr	r3, [r7, #12]
 80127c6:	685a      	ldr	r2, [r3, #4]
 80127c8:	68fb      	ldr	r3, [r7, #12]
 80127ca:	68db      	ldr	r3, [r3, #12]
 80127cc:	1ad2      	subs	r2, r2, r3
 80127ce:	693b      	ldr	r3, [r7, #16]
 80127d0:	1ad3      	subs	r3, r2, r3
 80127d2:	617b      	str	r3, [r7, #20]
 80127d4:	e011      	b.n	80127fa <mg_queue_book+0x6a>
  } else if (q->head >= q->tail && q->tail > hs) {
 80127d6:	68fb      	ldr	r3, [r7, #12]
 80127d8:	68da      	ldr	r2, [r3, #12]
 80127da:	68fb      	ldr	r3, [r7, #12]
 80127dc:	689b      	ldr	r3, [r3, #8]
 80127de:	429a      	cmp	r2, r3
 80127e0:	d30b      	bcc.n	80127fa <mg_queue_book+0x6a>
 80127e2:	68fb      	ldr	r3, [r7, #12]
 80127e4:	689b      	ldr	r3, [r3, #8]
 80127e6:	693a      	ldr	r2, [r7, #16]
 80127e8:	429a      	cmp	r2, r3
 80127ea:	d206      	bcs.n	80127fa <mg_queue_book+0x6a>
    mg_queue_write_len(q, 0);  // Not enough space ahead
 80127ec:	2100      	movs	r1, #0
 80127ee:	68f8      	ldr	r0, [r7, #12]
 80127f0:	f7ff ffb8 	bl	8012764 <mg_queue_write_len>
    q->head = 0;               // Wrap head to the beginning
 80127f4:	68fb      	ldr	r3, [r7, #12]
 80127f6:	2200      	movs	r2, #0
 80127f8:	60da      	str	r2, [r3, #12]
  }
  if (q->head + hs + len < q->tail) space = q->tail - q->head - hs;
 80127fa:	68fb      	ldr	r3, [r7, #12]
 80127fc:	68da      	ldr	r2, [r3, #12]
 80127fe:	693b      	ldr	r3, [r7, #16]
 8012800:	441a      	add	r2, r3
 8012802:	687b      	ldr	r3, [r7, #4]
 8012804:	441a      	add	r2, r3
 8012806:	68fb      	ldr	r3, [r7, #12]
 8012808:	689b      	ldr	r3, [r3, #8]
 801280a:	429a      	cmp	r2, r3
 801280c:	d207      	bcs.n	801281e <mg_queue_book+0x8e>
 801280e:	68fb      	ldr	r3, [r7, #12]
 8012810:	689a      	ldr	r2, [r3, #8]
 8012812:	68fb      	ldr	r3, [r7, #12]
 8012814:	68db      	ldr	r3, [r3, #12]
 8012816:	1ad2      	subs	r2, r2, r3
 8012818:	693b      	ldr	r3, [r7, #16]
 801281a:	1ad3      	subs	r3, r2, r3
 801281c:	617b      	str	r3, [r7, #20]
  if (buf != NULL) *buf = q->buf + q->head + sizeof(uint32_t);
 801281e:	68bb      	ldr	r3, [r7, #8]
 8012820:	2b00      	cmp	r3, #0
 8012822:	d007      	beq.n	8012834 <mg_queue_book+0xa4>
 8012824:	68fb      	ldr	r3, [r7, #12]
 8012826:	681a      	ldr	r2, [r3, #0]
 8012828:	68fb      	ldr	r3, [r7, #12]
 801282a:	68db      	ldr	r3, [r3, #12]
 801282c:	3304      	adds	r3, #4
 801282e:	441a      	add	r2, r3
 8012830:	68bb      	ldr	r3, [r7, #8]
 8012832:	601a      	str	r2, [r3, #0]
  return space;
 8012834:	697b      	ldr	r3, [r7, #20]
}
 8012836:	4618      	mov	r0, r3
 8012838:	3718      	adds	r7, #24
 801283a:	46bd      	mov	sp, r7
 801283c:	bd80      	pop	{r7, pc}
	...

08012840 <mg_queue_next>:

size_t mg_queue_next(struct mg_queue *q, char **buf) {
 8012840:	b580      	push	{r7, lr}
 8012842:	b084      	sub	sp, #16
 8012844:	af00      	add	r7, sp, #0
 8012846:	6078      	str	r0, [r7, #4]
 8012848:	6039      	str	r1, [r7, #0]
  size_t len = 0;
 801284a:	2300      	movs	r3, #0
 801284c:	60fb      	str	r3, [r7, #12]
  if (q->tail != q->head) {
 801284e:	687b      	ldr	r3, [r7, #4]
 8012850:	689a      	ldr	r2, [r3, #8]
 8012852:	687b      	ldr	r3, [r7, #4]
 8012854:	68db      	ldr	r3, [r3, #12]
 8012856:	429a      	cmp	r2, r3
 8012858:	d013      	beq.n	8012882 <mg_queue_next+0x42>
    len = mg_queue_read_len(q);
 801285a:	6878      	ldr	r0, [r7, #4]
 801285c:	f7ff ff58 	bl	8012710 <mg_queue_read_len>
 8012860:	60f8      	str	r0, [r7, #12]
    if (len == 0) {  // Zero (head wrapped) ?
 8012862:	68fb      	ldr	r3, [r7, #12]
 8012864:	2b00      	cmp	r3, #0
 8012866:	d10c      	bne.n	8012882 <mg_queue_next+0x42>
      q->tail = 0;   // Reset tail to the start
 8012868:	687b      	ldr	r3, [r7, #4]
 801286a:	2200      	movs	r2, #0
 801286c:	609a      	str	r2, [r3, #8]
      if (q->head > q->tail) len = mg_queue_read_len(q);  // Read again
 801286e:	687b      	ldr	r3, [r7, #4]
 8012870:	68da      	ldr	r2, [r3, #12]
 8012872:	687b      	ldr	r3, [r7, #4]
 8012874:	689b      	ldr	r3, [r3, #8]
 8012876:	429a      	cmp	r2, r3
 8012878:	d903      	bls.n	8012882 <mg_queue_next+0x42>
 801287a:	6878      	ldr	r0, [r7, #4]
 801287c:	f7ff ff48 	bl	8012710 <mg_queue_read_len>
 8012880:	60f8      	str	r0, [r7, #12]
    }
  }
  if (buf != NULL) *buf = q->buf + q->tail + sizeof(uint32_t);
 8012882:	683b      	ldr	r3, [r7, #0]
 8012884:	2b00      	cmp	r3, #0
 8012886:	d007      	beq.n	8012898 <mg_queue_next+0x58>
 8012888:	687b      	ldr	r3, [r7, #4]
 801288a:	681a      	ldr	r2, [r3, #0]
 801288c:	687b      	ldr	r3, [r7, #4]
 801288e:	689b      	ldr	r3, [r3, #8]
 8012890:	3304      	adds	r3, #4
 8012892:	441a      	add	r2, r3
 8012894:	683b      	ldr	r3, [r7, #0]
 8012896:	601a      	str	r2, [r3, #0]
  assert(q->tail + len <= q->size);
 8012898:	687b      	ldr	r3, [r7, #4]
 801289a:	689a      	ldr	r2, [r3, #8]
 801289c:	68fb      	ldr	r3, [r7, #12]
 801289e:	441a      	add	r2, r3
 80128a0:	687b      	ldr	r3, [r7, #4]
 80128a2:	685b      	ldr	r3, [r3, #4]
 80128a4:	429a      	cmp	r2, r3
 80128a6:	d906      	bls.n	80128b6 <mg_queue_next+0x76>
 80128a8:	4b05      	ldr	r3, [pc, #20]	@ (80128c0 <mg_queue_next+0x80>)
 80128aa:	4a06      	ldr	r2, [pc, #24]	@ (80128c4 <mg_queue_next+0x84>)
 80128ac:	f641 717e 	movw	r1, #8062	@ 0x1f7e
 80128b0:	4805      	ldr	r0, [pc, #20]	@ (80128c8 <mg_queue_next+0x88>)
 80128b2:	f011 f9ef 	bl	8023c94 <__assert_func>
  return len;
 80128b6:	68fb      	ldr	r3, [r7, #12]
}
 80128b8:	4618      	mov	r0, r3
 80128ba:	3710      	adds	r7, #16
 80128bc:	46bd      	mov	sp, r7
 80128be:	bd80      	pop	{r7, pc}
 80128c0:	080269e8 	.word	0x080269e8
 80128c4:	0802898c 	.word	0x0802898c
 80128c8:	08025140 	.word	0x08025140

080128cc <mg_queue_add>:

void mg_queue_add(struct mg_queue *q, size_t len) {
 80128cc:	b580      	push	{r7, lr}
 80128ce:	b082      	sub	sp, #8
 80128d0:	af00      	add	r7, sp, #0
 80128d2:	6078      	str	r0, [r7, #4]
 80128d4:	6039      	str	r1, [r7, #0]
  assert(len > 0);
 80128d6:	683b      	ldr	r3, [r7, #0]
 80128d8:	2b00      	cmp	r3, #0
 80128da:	d106      	bne.n	80128ea <mg_queue_add+0x1e>
 80128dc:	4b13      	ldr	r3, [pc, #76]	@ (801292c <mg_queue_add+0x60>)
 80128de:	4a14      	ldr	r2, [pc, #80]	@ (8012930 <mg_queue_add+0x64>)
 80128e0:	f641 7183 	movw	r1, #8067	@ 0x1f83
 80128e4:	4813      	ldr	r0, [pc, #76]	@ (8012934 <mg_queue_add+0x68>)
 80128e6:	f011 f9d5 	bl	8023c94 <__assert_func>
  mg_queue_write_len(q, len);
 80128ea:	6839      	ldr	r1, [r7, #0]
 80128ec:	6878      	ldr	r0, [r7, #4]
 80128ee:	f7ff ff39 	bl	8012764 <mg_queue_write_len>
  assert(q->head + sizeof(uint32_t) * 2 + len <= q->size);
 80128f2:	687b      	ldr	r3, [r7, #4]
 80128f4:	68da      	ldr	r2, [r3, #12]
 80128f6:	683b      	ldr	r3, [r7, #0]
 80128f8:	4413      	add	r3, r2
 80128fa:	f103 0208 	add.w	r2, r3, #8
 80128fe:	687b      	ldr	r3, [r7, #4]
 8012900:	685b      	ldr	r3, [r3, #4]
 8012902:	429a      	cmp	r2, r3
 8012904:	d906      	bls.n	8012914 <mg_queue_add+0x48>
 8012906:	4b0c      	ldr	r3, [pc, #48]	@ (8012938 <mg_queue_add+0x6c>)
 8012908:	4a09      	ldr	r2, [pc, #36]	@ (8012930 <mg_queue_add+0x64>)
 801290a:	f641 7185 	movw	r1, #8069	@ 0x1f85
 801290e:	4809      	ldr	r0, [pc, #36]	@ (8012934 <mg_queue_add+0x68>)
 8012910:	f011 f9c0 	bl	8023c94 <__assert_func>
  q->head += len + sizeof(uint32_t);
 8012914:	687b      	ldr	r3, [r7, #4]
 8012916:	68da      	ldr	r2, [r3, #12]
 8012918:	683b      	ldr	r3, [r7, #0]
 801291a:	4413      	add	r3, r2
 801291c:	1d1a      	adds	r2, r3, #4
 801291e:	687b      	ldr	r3, [r7, #4]
 8012920:	60da      	str	r2, [r3, #12]
}
 8012922:	bf00      	nop
 8012924:	3708      	adds	r7, #8
 8012926:	46bd      	mov	sp, r7
 8012928:	bd80      	pop	{r7, pc}
 801292a:	bf00      	nop
 801292c:	08026a04 	.word	0x08026a04
 8012930:	0802899c 	.word	0x0802899c
 8012934:	08025140 	.word	0x08025140
 8012938:	08026a0c 	.word	0x08026a0c

0801293c <mg_queue_del>:

void mg_queue_del(struct mg_queue *q, size_t len) {
 801293c:	b580      	push	{r7, lr}
 801293e:	b082      	sub	sp, #8
 8012940:	af00      	add	r7, sp, #0
 8012942:	6078      	str	r0, [r7, #4]
 8012944:	6039      	str	r1, [r7, #0]
  q->tail += len + sizeof(uint32_t);
 8012946:	687b      	ldr	r3, [r7, #4]
 8012948:	689a      	ldr	r2, [r3, #8]
 801294a:	683b      	ldr	r3, [r7, #0]
 801294c:	4413      	add	r3, r2
 801294e:	1d1a      	adds	r2, r3, #4
 8012950:	687b      	ldr	r3, [r7, #4]
 8012952:	609a      	str	r2, [r3, #8]
  assert(q->tail + sizeof(uint32_t) <= q->size);
 8012954:	687b      	ldr	r3, [r7, #4]
 8012956:	689b      	ldr	r3, [r3, #8]
 8012958:	1d1a      	adds	r2, r3, #4
 801295a:	687b      	ldr	r3, [r7, #4]
 801295c:	685b      	ldr	r3, [r3, #4]
 801295e:	429a      	cmp	r2, r3
 8012960:	d906      	bls.n	8012970 <mg_queue_del+0x34>
 8012962:	4b05      	ldr	r3, [pc, #20]	@ (8012978 <mg_queue_del+0x3c>)
 8012964:	4a05      	ldr	r2, [pc, #20]	@ (801297c <mg_queue_del+0x40>)
 8012966:	f641 718b 	movw	r1, #8075	@ 0x1f8b
 801296a:	4805      	ldr	r0, [pc, #20]	@ (8012980 <mg_queue_del+0x44>)
 801296c:	f011 f992 	bl	8023c94 <__assert_func>
}
 8012970:	bf00      	nop
 8012972:	3708      	adds	r7, #8
 8012974:	46bd      	mov	sp, r7
 8012976:	bd80      	pop	{r7, pc}
 8012978:	08026a3c 	.word	0x08026a3c
 801297c:	080289ac 	.word	0x080289ac
 8012980:	08025140 	.word	0x08025140

08012984 <blk0>:
  uint32_t l[16];
};

#define rol(value, bits) (((value) << (bits)) | ((value) >> (32 - (bits))))

static uint32_t blk0(union char64long16 *block, int i) {
 8012984:	b480      	push	{r7}
 8012986:	b083      	sub	sp, #12
 8012988:	af00      	add	r7, sp, #0
 801298a:	6078      	str	r0, [r7, #4]
 801298c:	6039      	str	r1, [r7, #0]
  if (MG_BIG_ENDIAN) {
 801298e:	4b12      	ldr	r3, [pc, #72]	@ (80129d8 <blk0+0x54>)
 8012990:	881b      	ldrh	r3, [r3, #0]
 8012992:	2bff      	cmp	r3, #255	@ 0xff
 8012994:	d915      	bls.n	80129c2 <blk0+0x3e>
  } else {
    block->l[i] = (rol(block->l[i], 24) & 0xFF00FF00) |
 8012996:	687b      	ldr	r3, [r7, #4]
 8012998:	683a      	ldr	r2, [r7, #0]
 801299a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801299e:	ea4f 2333 	mov.w	r3, r3, ror #8
 80129a2:	f003 22ff 	and.w	r2, r3, #4278255360	@ 0xff00ff00
                  (rol(block->l[i], 8) & 0x00FF00FF);
 80129a6:	687b      	ldr	r3, [r7, #4]
 80129a8:	6839      	ldr	r1, [r7, #0]
 80129aa:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80129ae:	ea4f 6333 	mov.w	r3, r3, ror #24
 80129b2:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
    block->l[i] = (rol(block->l[i], 24) & 0xFF00FF00) |
 80129b6:	ea42 0103 	orr.w	r1, r2, r3
 80129ba:	687b      	ldr	r3, [r7, #4]
 80129bc:	683a      	ldr	r2, [r7, #0]
 80129be:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }
  return block->l[i];
 80129c2:	687b      	ldr	r3, [r7, #4]
 80129c4:	683a      	ldr	r2, [r7, #0]
 80129c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
}
 80129ca:	4618      	mov	r0, r3
 80129cc:	370c      	adds	r7, #12
 80129ce:	46bd      	mov	sp, r7
 80129d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80129d4:	4770      	bx	lr
 80129d6:	bf00      	nop
 80129d8:	08025ff8 	.word	0x08025ff8

080129dc <mg_sha1_transform>:
#define R4(v, w, x, y, z, i)                          \
  z += (w ^ x ^ y) + blk(i) + 0xCA62C1D6 + rol(v, 5); \
  w = rol(w, 30);

static void mg_sha1_transform(uint32_t state[5],
                              const unsigned char *buffer) {
 80129dc:	b590      	push	{r4, r7, lr}
 80129de:	b099      	sub	sp, #100	@ 0x64
 80129e0:	af00      	add	r7, sp, #0
 80129e2:	6078      	str	r0, [r7, #4]
 80129e4:	6039      	str	r1, [r7, #0]
  uint32_t a, b, c, d, e;
  union char64long16 block[1];

  memcpy(block, buffer, 64);
 80129e6:	f107 030c 	add.w	r3, r7, #12
 80129ea:	2240      	movs	r2, #64	@ 0x40
 80129ec:	6839      	ldr	r1, [r7, #0]
 80129ee:	4618      	mov	r0, r3
 80129f0:	f011 fec9 	bl	8024786 <memcpy>
  a = state[0];
 80129f4:	687b      	ldr	r3, [r7, #4]
 80129f6:	681b      	ldr	r3, [r3, #0]
 80129f8:	65fb      	str	r3, [r7, #92]	@ 0x5c
  b = state[1];
 80129fa:	687b      	ldr	r3, [r7, #4]
 80129fc:	685b      	ldr	r3, [r3, #4]
 80129fe:	65bb      	str	r3, [r7, #88]	@ 0x58
  c = state[2];
 8012a00:	687b      	ldr	r3, [r7, #4]
 8012a02:	689b      	ldr	r3, [r3, #8]
 8012a04:	657b      	str	r3, [r7, #84]	@ 0x54
  d = state[3];
 8012a06:	687b      	ldr	r3, [r7, #4]
 8012a08:	68db      	ldr	r3, [r3, #12]
 8012a0a:	653b      	str	r3, [r7, #80]	@ 0x50
  e = state[4];
 8012a0c:	687b      	ldr	r3, [r7, #4]
 8012a0e:	691b      	ldr	r3, [r3, #16]
 8012a10:	64fb      	str	r3, [r7, #76]	@ 0x4c
  R0(a, b, c, d, e, 0);
 8012a12:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8012a14:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8012a16:	405a      	eors	r2, r3
 8012a18:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8012a1a:	401a      	ands	r2, r3
 8012a1c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8012a1e:	ea82 0403 	eor.w	r4, r2, r3
 8012a22:	f107 030c 	add.w	r3, r7, #12
 8012a26:	2100      	movs	r1, #0
 8012a28:	4618      	mov	r0, r3
 8012a2a:	f7ff ffab 	bl	8012984 <blk0>
 8012a2e:	4603      	mov	r3, r0
 8012a30:	18e2      	adds	r2, r4, r3
 8012a32:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8012a34:	ea4f 63f3 	mov.w	r3, r3, ror #27
 8012a38:	441a      	add	r2, r3
 8012a3a:	4bbd      	ldr	r3, [pc, #756]	@ (8012d30 <mg_sha1_transform+0x354>)
 8012a3c:	4413      	add	r3, r2
 8012a3e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8012a40:	4413      	add	r3, r2
 8012a42:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8012a44:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8012a46:	ea4f 03b3 	mov.w	r3, r3, ror #2
 8012a4a:	65bb      	str	r3, [r7, #88]	@ 0x58
  R0(e, a, b, c, d, 1);
 8012a4c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8012a4e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8012a50:	405a      	eors	r2, r3
 8012a52:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8012a54:	401a      	ands	r2, r3
 8012a56:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8012a58:	ea82 0403 	eor.w	r4, r2, r3
 8012a5c:	f107 030c 	add.w	r3, r7, #12
 8012a60:	2101      	movs	r1, #1
 8012a62:	4618      	mov	r0, r3
 8012a64:	f7ff ff8e 	bl	8012984 <blk0>
 8012a68:	4603      	mov	r3, r0
 8012a6a:	18e2      	adds	r2, r4, r3
 8012a6c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8012a6e:	ea4f 63f3 	mov.w	r3, r3, ror #27
 8012a72:	441a      	add	r2, r3
 8012a74:	4bae      	ldr	r3, [pc, #696]	@ (8012d30 <mg_sha1_transform+0x354>)
 8012a76:	4413      	add	r3, r2
 8012a78:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8012a7a:	4413      	add	r3, r2
 8012a7c:	653b      	str	r3, [r7, #80]	@ 0x50
 8012a7e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8012a80:	ea4f 03b3 	mov.w	r3, r3, ror #2
 8012a84:	65fb      	str	r3, [r7, #92]	@ 0x5c
  R0(d, e, a, b, c, 2);
 8012a86:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8012a88:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8012a8a:	405a      	eors	r2, r3
 8012a8c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8012a8e:	401a      	ands	r2, r3
 8012a90:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8012a92:	ea82 0403 	eor.w	r4, r2, r3
 8012a96:	f107 030c 	add.w	r3, r7, #12
 8012a9a:	2102      	movs	r1, #2
 8012a9c:	4618      	mov	r0, r3
 8012a9e:	f7ff ff71 	bl	8012984 <blk0>
 8012aa2:	4603      	mov	r3, r0
 8012aa4:	18e2      	adds	r2, r4, r3
 8012aa6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8012aa8:	ea4f 63f3 	mov.w	r3, r3, ror #27
 8012aac:	441a      	add	r2, r3
 8012aae:	4ba0      	ldr	r3, [pc, #640]	@ (8012d30 <mg_sha1_transform+0x354>)
 8012ab0:	4413      	add	r3, r2
 8012ab2:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8012ab4:	4413      	add	r3, r2
 8012ab6:	657b      	str	r3, [r7, #84]	@ 0x54
 8012ab8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8012aba:	ea4f 03b3 	mov.w	r3, r3, ror #2
 8012abe:	64fb      	str	r3, [r7, #76]	@ 0x4c
  R0(c, d, e, a, b, 3);
 8012ac0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8012ac2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8012ac4:	405a      	eors	r2, r3
 8012ac6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8012ac8:	401a      	ands	r2, r3
 8012aca:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8012acc:	ea82 0403 	eor.w	r4, r2, r3
 8012ad0:	f107 030c 	add.w	r3, r7, #12
 8012ad4:	2103      	movs	r1, #3
 8012ad6:	4618      	mov	r0, r3
 8012ad8:	f7ff ff54 	bl	8012984 <blk0>
 8012adc:	4603      	mov	r3, r0
 8012ade:	18e2      	adds	r2, r4, r3
 8012ae0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8012ae2:	ea4f 63f3 	mov.w	r3, r3, ror #27
 8012ae6:	441a      	add	r2, r3
 8012ae8:	4b91      	ldr	r3, [pc, #580]	@ (8012d30 <mg_sha1_transform+0x354>)
 8012aea:	4413      	add	r3, r2
 8012aec:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8012aee:	4413      	add	r3, r2
 8012af0:	65bb      	str	r3, [r7, #88]	@ 0x58
 8012af2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8012af4:	ea4f 03b3 	mov.w	r3, r3, ror #2
 8012af8:	653b      	str	r3, [r7, #80]	@ 0x50
  R0(b, c, d, e, a, 4);
 8012afa:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8012afc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8012afe:	405a      	eors	r2, r3
 8012b00:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8012b02:	401a      	ands	r2, r3
 8012b04:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8012b06:	ea82 0403 	eor.w	r4, r2, r3
 8012b0a:	f107 030c 	add.w	r3, r7, #12
 8012b0e:	2104      	movs	r1, #4
 8012b10:	4618      	mov	r0, r3
 8012b12:	f7ff ff37 	bl	8012984 <blk0>
 8012b16:	4603      	mov	r3, r0
 8012b18:	18e2      	adds	r2, r4, r3
 8012b1a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8012b1c:	ea4f 63f3 	mov.w	r3, r3, ror #27
 8012b20:	441a      	add	r2, r3
 8012b22:	4b83      	ldr	r3, [pc, #524]	@ (8012d30 <mg_sha1_transform+0x354>)
 8012b24:	4413      	add	r3, r2
 8012b26:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8012b28:	4413      	add	r3, r2
 8012b2a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8012b2c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8012b2e:	ea4f 03b3 	mov.w	r3, r3, ror #2
 8012b32:	657b      	str	r3, [r7, #84]	@ 0x54
  R0(a, b, c, d, e, 5);
 8012b34:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8012b36:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8012b38:	405a      	eors	r2, r3
 8012b3a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8012b3c:	401a      	ands	r2, r3
 8012b3e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8012b40:	ea82 0403 	eor.w	r4, r2, r3
 8012b44:	f107 030c 	add.w	r3, r7, #12
 8012b48:	2105      	movs	r1, #5
 8012b4a:	4618      	mov	r0, r3
 8012b4c:	f7ff ff1a 	bl	8012984 <blk0>
 8012b50:	4603      	mov	r3, r0
 8012b52:	18e2      	adds	r2, r4, r3
 8012b54:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8012b56:	ea4f 63f3 	mov.w	r3, r3, ror #27
 8012b5a:	441a      	add	r2, r3
 8012b5c:	4b74      	ldr	r3, [pc, #464]	@ (8012d30 <mg_sha1_transform+0x354>)
 8012b5e:	4413      	add	r3, r2
 8012b60:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8012b62:	4413      	add	r3, r2
 8012b64:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8012b66:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8012b68:	ea4f 03b3 	mov.w	r3, r3, ror #2
 8012b6c:	65bb      	str	r3, [r7, #88]	@ 0x58
  R0(e, a, b, c, d, 6);
 8012b6e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8012b70:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8012b72:	405a      	eors	r2, r3
 8012b74:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8012b76:	401a      	ands	r2, r3
 8012b78:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8012b7a:	ea82 0403 	eor.w	r4, r2, r3
 8012b7e:	f107 030c 	add.w	r3, r7, #12
 8012b82:	2106      	movs	r1, #6
 8012b84:	4618      	mov	r0, r3
 8012b86:	f7ff fefd 	bl	8012984 <blk0>
 8012b8a:	4603      	mov	r3, r0
 8012b8c:	18e2      	adds	r2, r4, r3
 8012b8e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8012b90:	ea4f 63f3 	mov.w	r3, r3, ror #27
 8012b94:	441a      	add	r2, r3
 8012b96:	4b66      	ldr	r3, [pc, #408]	@ (8012d30 <mg_sha1_transform+0x354>)
 8012b98:	4413      	add	r3, r2
 8012b9a:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8012b9c:	4413      	add	r3, r2
 8012b9e:	653b      	str	r3, [r7, #80]	@ 0x50
 8012ba0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8012ba2:	ea4f 03b3 	mov.w	r3, r3, ror #2
 8012ba6:	65fb      	str	r3, [r7, #92]	@ 0x5c
  R0(d, e, a, b, c, 7);
 8012ba8:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8012baa:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8012bac:	405a      	eors	r2, r3
 8012bae:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8012bb0:	401a      	ands	r2, r3
 8012bb2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8012bb4:	ea82 0403 	eor.w	r4, r2, r3
 8012bb8:	f107 030c 	add.w	r3, r7, #12
 8012bbc:	2107      	movs	r1, #7
 8012bbe:	4618      	mov	r0, r3
 8012bc0:	f7ff fee0 	bl	8012984 <blk0>
 8012bc4:	4603      	mov	r3, r0
 8012bc6:	18e2      	adds	r2, r4, r3
 8012bc8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8012bca:	ea4f 63f3 	mov.w	r3, r3, ror #27
 8012bce:	441a      	add	r2, r3
 8012bd0:	4b57      	ldr	r3, [pc, #348]	@ (8012d30 <mg_sha1_transform+0x354>)
 8012bd2:	4413      	add	r3, r2
 8012bd4:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8012bd6:	4413      	add	r3, r2
 8012bd8:	657b      	str	r3, [r7, #84]	@ 0x54
 8012bda:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8012bdc:	ea4f 03b3 	mov.w	r3, r3, ror #2
 8012be0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  R0(c, d, e, a, b, 8);
 8012be2:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8012be4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8012be6:	405a      	eors	r2, r3
 8012be8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8012bea:	401a      	ands	r2, r3
 8012bec:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8012bee:	ea82 0403 	eor.w	r4, r2, r3
 8012bf2:	f107 030c 	add.w	r3, r7, #12
 8012bf6:	2108      	movs	r1, #8
 8012bf8:	4618      	mov	r0, r3
 8012bfa:	f7ff fec3 	bl	8012984 <blk0>
 8012bfe:	4603      	mov	r3, r0
 8012c00:	18e2      	adds	r2, r4, r3
 8012c02:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8012c04:	ea4f 63f3 	mov.w	r3, r3, ror #27
 8012c08:	441a      	add	r2, r3
 8012c0a:	4b49      	ldr	r3, [pc, #292]	@ (8012d30 <mg_sha1_transform+0x354>)
 8012c0c:	4413      	add	r3, r2
 8012c0e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8012c10:	4413      	add	r3, r2
 8012c12:	65bb      	str	r3, [r7, #88]	@ 0x58
 8012c14:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8012c16:	ea4f 03b3 	mov.w	r3, r3, ror #2
 8012c1a:	653b      	str	r3, [r7, #80]	@ 0x50
  R0(b, c, d, e, a, 9);
 8012c1c:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8012c1e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8012c20:	405a      	eors	r2, r3
 8012c22:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8012c24:	401a      	ands	r2, r3
 8012c26:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8012c28:	ea82 0403 	eor.w	r4, r2, r3
 8012c2c:	f107 030c 	add.w	r3, r7, #12
 8012c30:	2109      	movs	r1, #9
 8012c32:	4618      	mov	r0, r3
 8012c34:	f7ff fea6 	bl	8012984 <blk0>
 8012c38:	4603      	mov	r3, r0
 8012c3a:	18e2      	adds	r2, r4, r3
 8012c3c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8012c3e:	ea4f 63f3 	mov.w	r3, r3, ror #27
 8012c42:	441a      	add	r2, r3
 8012c44:	4b3a      	ldr	r3, [pc, #232]	@ (8012d30 <mg_sha1_transform+0x354>)
 8012c46:	4413      	add	r3, r2
 8012c48:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8012c4a:	4413      	add	r3, r2
 8012c4c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8012c4e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8012c50:	ea4f 03b3 	mov.w	r3, r3, ror #2
 8012c54:	657b      	str	r3, [r7, #84]	@ 0x54
  R0(a, b, c, d, e, 10);
 8012c56:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8012c58:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8012c5a:	405a      	eors	r2, r3
 8012c5c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8012c5e:	401a      	ands	r2, r3
 8012c60:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8012c62:	ea82 0403 	eor.w	r4, r2, r3
 8012c66:	f107 030c 	add.w	r3, r7, #12
 8012c6a:	210a      	movs	r1, #10
 8012c6c:	4618      	mov	r0, r3
 8012c6e:	f7ff fe89 	bl	8012984 <blk0>
 8012c72:	4603      	mov	r3, r0
 8012c74:	18e2      	adds	r2, r4, r3
 8012c76:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8012c78:	ea4f 63f3 	mov.w	r3, r3, ror #27
 8012c7c:	441a      	add	r2, r3
 8012c7e:	4b2c      	ldr	r3, [pc, #176]	@ (8012d30 <mg_sha1_transform+0x354>)
 8012c80:	4413      	add	r3, r2
 8012c82:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8012c84:	4413      	add	r3, r2
 8012c86:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8012c88:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8012c8a:	ea4f 03b3 	mov.w	r3, r3, ror #2
 8012c8e:	65bb      	str	r3, [r7, #88]	@ 0x58
  R0(e, a, b, c, d, 11);
 8012c90:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8012c92:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8012c94:	405a      	eors	r2, r3
 8012c96:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8012c98:	401a      	ands	r2, r3
 8012c9a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8012c9c:	ea82 0403 	eor.w	r4, r2, r3
 8012ca0:	f107 030c 	add.w	r3, r7, #12
 8012ca4:	210b      	movs	r1, #11
 8012ca6:	4618      	mov	r0, r3
 8012ca8:	f7ff fe6c 	bl	8012984 <blk0>
 8012cac:	4603      	mov	r3, r0
 8012cae:	18e2      	adds	r2, r4, r3
 8012cb0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8012cb2:	ea4f 63f3 	mov.w	r3, r3, ror #27
 8012cb6:	441a      	add	r2, r3
 8012cb8:	4b1d      	ldr	r3, [pc, #116]	@ (8012d30 <mg_sha1_transform+0x354>)
 8012cba:	4413      	add	r3, r2
 8012cbc:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8012cbe:	4413      	add	r3, r2
 8012cc0:	653b      	str	r3, [r7, #80]	@ 0x50
 8012cc2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8012cc4:	ea4f 03b3 	mov.w	r3, r3, ror #2
 8012cc8:	65fb      	str	r3, [r7, #92]	@ 0x5c
  R0(d, e, a, b, c, 12);
 8012cca:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8012ccc:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8012cce:	405a      	eors	r2, r3
 8012cd0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8012cd2:	401a      	ands	r2, r3
 8012cd4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8012cd6:	ea82 0403 	eor.w	r4, r2, r3
 8012cda:	f107 030c 	add.w	r3, r7, #12
 8012cde:	210c      	movs	r1, #12
 8012ce0:	4618      	mov	r0, r3
 8012ce2:	f7ff fe4f 	bl	8012984 <blk0>
 8012ce6:	4603      	mov	r3, r0
 8012ce8:	18e2      	adds	r2, r4, r3
 8012cea:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8012cec:	ea4f 63f3 	mov.w	r3, r3, ror #27
 8012cf0:	441a      	add	r2, r3
 8012cf2:	4b0f      	ldr	r3, [pc, #60]	@ (8012d30 <mg_sha1_transform+0x354>)
 8012cf4:	4413      	add	r3, r2
 8012cf6:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8012cf8:	4413      	add	r3, r2
 8012cfa:	657b      	str	r3, [r7, #84]	@ 0x54
 8012cfc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8012cfe:	ea4f 03b3 	mov.w	r3, r3, ror #2
 8012d02:	64fb      	str	r3, [r7, #76]	@ 0x4c
  R0(c, d, e, a, b, 13);
 8012d04:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8012d06:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8012d08:	405a      	eors	r2, r3
 8012d0a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8012d0c:	401a      	ands	r2, r3
 8012d0e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8012d10:	ea82 0403 	eor.w	r4, r2, r3
 8012d14:	f107 030c 	add.w	r3, r7, #12
 8012d18:	210d      	movs	r1, #13
 8012d1a:	4618      	mov	r0, r3
 8012d1c:	f7ff fe32 	bl	8012984 <blk0>
 8012d20:	4603      	mov	r3, r0
 8012d22:	18e2      	adds	r2, r4, r3
 8012d24:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8012d26:	ea4f 63f3 	mov.w	r3, r3, ror #27
 8012d2a:	441a      	add	r2, r3
 8012d2c:	e002      	b.n	8012d34 <mg_sha1_transform+0x358>
 8012d2e:	bf00      	nop
 8012d30:	5a827999 	.word	0x5a827999
 8012d34:	4bac      	ldr	r3, [pc, #688]	@ (8012fe8 <mg_sha1_transform+0x60c>)
 8012d36:	4413      	add	r3, r2
 8012d38:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8012d3a:	4413      	add	r3, r2
 8012d3c:	65bb      	str	r3, [r7, #88]	@ 0x58
 8012d3e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8012d40:	ea4f 03b3 	mov.w	r3, r3, ror #2
 8012d44:	653b      	str	r3, [r7, #80]	@ 0x50
  R0(b, c, d, e, a, 14);
 8012d46:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8012d48:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8012d4a:	405a      	eors	r2, r3
 8012d4c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8012d4e:	401a      	ands	r2, r3
 8012d50:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8012d52:	ea82 0403 	eor.w	r4, r2, r3
 8012d56:	f107 030c 	add.w	r3, r7, #12
 8012d5a:	210e      	movs	r1, #14
 8012d5c:	4618      	mov	r0, r3
 8012d5e:	f7ff fe11 	bl	8012984 <blk0>
 8012d62:	4603      	mov	r3, r0
 8012d64:	18e2      	adds	r2, r4, r3
 8012d66:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8012d68:	ea4f 63f3 	mov.w	r3, r3, ror #27
 8012d6c:	441a      	add	r2, r3
 8012d6e:	4b9e      	ldr	r3, [pc, #632]	@ (8012fe8 <mg_sha1_transform+0x60c>)
 8012d70:	4413      	add	r3, r2
 8012d72:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8012d74:	4413      	add	r3, r2
 8012d76:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8012d78:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8012d7a:	ea4f 03b3 	mov.w	r3, r3, ror #2
 8012d7e:	657b      	str	r3, [r7, #84]	@ 0x54
  R0(a, b, c, d, e, 15);
 8012d80:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8012d82:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8012d84:	405a      	eors	r2, r3
 8012d86:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8012d88:	401a      	ands	r2, r3
 8012d8a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8012d8c:	ea82 0403 	eor.w	r4, r2, r3
 8012d90:	f107 030c 	add.w	r3, r7, #12
 8012d94:	210f      	movs	r1, #15
 8012d96:	4618      	mov	r0, r3
 8012d98:	f7ff fdf4 	bl	8012984 <blk0>
 8012d9c:	4603      	mov	r3, r0
 8012d9e:	18e2      	adds	r2, r4, r3
 8012da0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8012da2:	ea4f 63f3 	mov.w	r3, r3, ror #27
 8012da6:	441a      	add	r2, r3
 8012da8:	4b8f      	ldr	r3, [pc, #572]	@ (8012fe8 <mg_sha1_transform+0x60c>)
 8012daa:	4413      	add	r3, r2
 8012dac:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8012dae:	4413      	add	r3, r2
 8012db0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8012db2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8012db4:	ea4f 03b3 	mov.w	r3, r3, ror #2
 8012db8:	65bb      	str	r3, [r7, #88]	@ 0x58
  R1(e, a, b, c, d, 16);
 8012dba:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8012dbc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8012dbe:	405a      	eors	r2, r3
 8012dc0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8012dc2:	401a      	ands	r2, r3
 8012dc4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8012dc6:	405a      	eors	r2, r3
 8012dc8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8012dca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012dcc:	4059      	eors	r1, r3
 8012dce:	697b      	ldr	r3, [r7, #20]
 8012dd0:	4059      	eors	r1, r3
 8012dd2:	68fb      	ldr	r3, [r7, #12]
 8012dd4:	404b      	eors	r3, r1
 8012dd6:	ea4f 73f3 	mov.w	r3, r3, ror #31
 8012dda:	60fb      	str	r3, [r7, #12]
 8012ddc:	68fb      	ldr	r3, [r7, #12]
 8012dde:	441a      	add	r2, r3
 8012de0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8012de2:	ea4f 63f3 	mov.w	r3, r3, ror #27
 8012de6:	441a      	add	r2, r3
 8012de8:	4b7f      	ldr	r3, [pc, #508]	@ (8012fe8 <mg_sha1_transform+0x60c>)
 8012dea:	4413      	add	r3, r2
 8012dec:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8012dee:	4413      	add	r3, r2
 8012df0:	653b      	str	r3, [r7, #80]	@ 0x50
 8012df2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8012df4:	ea4f 03b3 	mov.w	r3, r3, ror #2
 8012df8:	65fb      	str	r3, [r7, #92]	@ 0x5c
  R1(d, e, a, b, c, 17);
 8012dfa:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8012dfc:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8012dfe:	405a      	eors	r2, r3
 8012e00:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8012e02:	401a      	ands	r2, r3
 8012e04:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8012e06:	405a      	eors	r2, r3
 8012e08:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8012e0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012e0c:	4059      	eors	r1, r3
 8012e0e:	69bb      	ldr	r3, [r7, #24]
 8012e10:	4059      	eors	r1, r3
 8012e12:	693b      	ldr	r3, [r7, #16]
 8012e14:	404b      	eors	r3, r1
 8012e16:	ea4f 73f3 	mov.w	r3, r3, ror #31
 8012e1a:	613b      	str	r3, [r7, #16]
 8012e1c:	693b      	ldr	r3, [r7, #16]
 8012e1e:	441a      	add	r2, r3
 8012e20:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8012e22:	ea4f 63f3 	mov.w	r3, r3, ror #27
 8012e26:	441a      	add	r2, r3
 8012e28:	4b6f      	ldr	r3, [pc, #444]	@ (8012fe8 <mg_sha1_transform+0x60c>)
 8012e2a:	4413      	add	r3, r2
 8012e2c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8012e2e:	4413      	add	r3, r2
 8012e30:	657b      	str	r3, [r7, #84]	@ 0x54
 8012e32:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8012e34:	ea4f 03b3 	mov.w	r3, r3, ror #2
 8012e38:	64fb      	str	r3, [r7, #76]	@ 0x4c
  R1(c, d, e, a, b, 18);
 8012e3a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8012e3c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8012e3e:	405a      	eors	r2, r3
 8012e40:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8012e42:	401a      	ands	r2, r3
 8012e44:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8012e46:	405a      	eors	r2, r3
 8012e48:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8012e4a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8012e4c:	4059      	eors	r1, r3
 8012e4e:	69fb      	ldr	r3, [r7, #28]
 8012e50:	4059      	eors	r1, r3
 8012e52:	697b      	ldr	r3, [r7, #20]
 8012e54:	404b      	eors	r3, r1
 8012e56:	ea4f 73f3 	mov.w	r3, r3, ror #31
 8012e5a:	617b      	str	r3, [r7, #20]
 8012e5c:	697b      	ldr	r3, [r7, #20]
 8012e5e:	441a      	add	r2, r3
 8012e60:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8012e62:	ea4f 63f3 	mov.w	r3, r3, ror #27
 8012e66:	441a      	add	r2, r3
 8012e68:	4b5f      	ldr	r3, [pc, #380]	@ (8012fe8 <mg_sha1_transform+0x60c>)
 8012e6a:	4413      	add	r3, r2
 8012e6c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8012e6e:	4413      	add	r3, r2
 8012e70:	65bb      	str	r3, [r7, #88]	@ 0x58
 8012e72:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8012e74:	ea4f 03b3 	mov.w	r3, r3, ror #2
 8012e78:	653b      	str	r3, [r7, #80]	@ 0x50
  R1(b, c, d, e, a, 19);
 8012e7a:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8012e7c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8012e7e:	405a      	eors	r2, r3
 8012e80:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8012e82:	401a      	ands	r2, r3
 8012e84:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8012e86:	405a      	eors	r2, r3
 8012e88:	68f9      	ldr	r1, [r7, #12]
 8012e8a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012e8c:	4059      	eors	r1, r3
 8012e8e:	6a3b      	ldr	r3, [r7, #32]
 8012e90:	4059      	eors	r1, r3
 8012e92:	69bb      	ldr	r3, [r7, #24]
 8012e94:	404b      	eors	r3, r1
 8012e96:	ea4f 73f3 	mov.w	r3, r3, ror #31
 8012e9a:	61bb      	str	r3, [r7, #24]
 8012e9c:	69bb      	ldr	r3, [r7, #24]
 8012e9e:	441a      	add	r2, r3
 8012ea0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8012ea2:	ea4f 63f3 	mov.w	r3, r3, ror #27
 8012ea6:	441a      	add	r2, r3
 8012ea8:	4b4f      	ldr	r3, [pc, #316]	@ (8012fe8 <mg_sha1_transform+0x60c>)
 8012eaa:	4413      	add	r3, r2
 8012eac:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8012eae:	4413      	add	r3, r2
 8012eb0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8012eb2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8012eb4:	ea4f 03b3 	mov.w	r3, r3, ror #2
 8012eb8:	657b      	str	r3, [r7, #84]	@ 0x54
  R2(a, b, c, d, e, 20);
 8012eba:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8012ebc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8012ebe:	405a      	eors	r2, r3
 8012ec0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8012ec2:	405a      	eors	r2, r3
 8012ec4:	6939      	ldr	r1, [r7, #16]
 8012ec6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8012ec8:	4059      	eors	r1, r3
 8012eca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012ecc:	4059      	eors	r1, r3
 8012ece:	69fb      	ldr	r3, [r7, #28]
 8012ed0:	404b      	eors	r3, r1
 8012ed2:	ea4f 73f3 	mov.w	r3, r3, ror #31
 8012ed6:	61fb      	str	r3, [r7, #28]
 8012ed8:	69fb      	ldr	r3, [r7, #28]
 8012eda:	441a      	add	r2, r3
 8012edc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8012ede:	ea4f 63f3 	mov.w	r3, r3, ror #27
 8012ee2:	441a      	add	r2, r3
 8012ee4:	4b41      	ldr	r3, [pc, #260]	@ (8012fec <mg_sha1_transform+0x610>)
 8012ee6:	4413      	add	r3, r2
 8012ee8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8012eea:	4413      	add	r3, r2
 8012eec:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8012eee:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8012ef0:	ea4f 03b3 	mov.w	r3, r3, ror #2
 8012ef4:	65bb      	str	r3, [r7, #88]	@ 0x58
  R2(e, a, b, c, d, 21);
 8012ef6:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8012ef8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8012efa:	405a      	eors	r2, r3
 8012efc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8012efe:	405a      	eors	r2, r3
 8012f00:	6979      	ldr	r1, [r7, #20]
 8012f02:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8012f04:	4059      	eors	r1, r3
 8012f06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012f08:	4059      	eors	r1, r3
 8012f0a:	6a3b      	ldr	r3, [r7, #32]
 8012f0c:	404b      	eors	r3, r1
 8012f0e:	ea4f 73f3 	mov.w	r3, r3, ror #31
 8012f12:	623b      	str	r3, [r7, #32]
 8012f14:	6a3b      	ldr	r3, [r7, #32]
 8012f16:	441a      	add	r2, r3
 8012f18:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8012f1a:	ea4f 63f3 	mov.w	r3, r3, ror #27
 8012f1e:	441a      	add	r2, r3
 8012f20:	4b32      	ldr	r3, [pc, #200]	@ (8012fec <mg_sha1_transform+0x610>)
 8012f22:	4413      	add	r3, r2
 8012f24:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8012f26:	4413      	add	r3, r2
 8012f28:	653b      	str	r3, [r7, #80]	@ 0x50
 8012f2a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8012f2c:	ea4f 03b3 	mov.w	r3, r3, ror #2
 8012f30:	65fb      	str	r3, [r7, #92]	@ 0x5c
  R2(d, e, a, b, c, 22);
 8012f32:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8012f34:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8012f36:	405a      	eors	r2, r3
 8012f38:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8012f3a:	405a      	eors	r2, r3
 8012f3c:	69b9      	ldr	r1, [r7, #24]
 8012f3e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8012f40:	4059      	eors	r1, r3
 8012f42:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012f44:	4059      	eors	r1, r3
 8012f46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012f48:	404b      	eors	r3, r1
 8012f4a:	ea4f 73f3 	mov.w	r3, r3, ror #31
 8012f4e:	627b      	str	r3, [r7, #36]	@ 0x24
 8012f50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012f52:	441a      	add	r2, r3
 8012f54:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8012f56:	ea4f 63f3 	mov.w	r3, r3, ror #27
 8012f5a:	441a      	add	r2, r3
 8012f5c:	4b23      	ldr	r3, [pc, #140]	@ (8012fec <mg_sha1_transform+0x610>)
 8012f5e:	4413      	add	r3, r2
 8012f60:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8012f62:	4413      	add	r3, r2
 8012f64:	657b      	str	r3, [r7, #84]	@ 0x54
 8012f66:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8012f68:	ea4f 03b3 	mov.w	r3, r3, ror #2
 8012f6c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  R2(c, d, e, a, b, 23);
 8012f6e:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8012f70:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8012f72:	405a      	eors	r2, r3
 8012f74:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8012f76:	405a      	eors	r2, r3
 8012f78:	69f9      	ldr	r1, [r7, #28]
 8012f7a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8012f7c:	4059      	eors	r1, r3
 8012f7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012f80:	4059      	eors	r1, r3
 8012f82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012f84:	404b      	eors	r3, r1
 8012f86:	ea4f 73f3 	mov.w	r3, r3, ror #31
 8012f8a:	62bb      	str	r3, [r7, #40]	@ 0x28
 8012f8c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012f8e:	441a      	add	r2, r3
 8012f90:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8012f92:	ea4f 63f3 	mov.w	r3, r3, ror #27
 8012f96:	441a      	add	r2, r3
 8012f98:	4b14      	ldr	r3, [pc, #80]	@ (8012fec <mg_sha1_transform+0x610>)
 8012f9a:	4413      	add	r3, r2
 8012f9c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8012f9e:	4413      	add	r3, r2
 8012fa0:	65bb      	str	r3, [r7, #88]	@ 0x58
 8012fa2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8012fa4:	ea4f 03b3 	mov.w	r3, r3, ror #2
 8012fa8:	653b      	str	r3, [r7, #80]	@ 0x50
  R2(b, c, d, e, a, 24);
 8012faa:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8012fac:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8012fae:	405a      	eors	r2, r3
 8012fb0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8012fb2:	405a      	eors	r2, r3
 8012fb4:	6a39      	ldr	r1, [r7, #32]
 8012fb6:	68fb      	ldr	r3, [r7, #12]
 8012fb8:	4059      	eors	r1, r3
 8012fba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8012fbc:	4059      	eors	r1, r3
 8012fbe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012fc0:	404b      	eors	r3, r1
 8012fc2:	ea4f 73f3 	mov.w	r3, r3, ror #31
 8012fc6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8012fc8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012fca:	441a      	add	r2, r3
 8012fcc:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8012fce:	ea4f 63f3 	mov.w	r3, r3, ror #27
 8012fd2:	441a      	add	r2, r3
 8012fd4:	4b05      	ldr	r3, [pc, #20]	@ (8012fec <mg_sha1_transform+0x610>)
 8012fd6:	4413      	add	r3, r2
 8012fd8:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8012fda:	4413      	add	r3, r2
 8012fdc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8012fde:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8012fe0:	ea4f 03b3 	mov.w	r3, r3, ror #2
 8012fe4:	e004      	b.n	8012ff0 <mg_sha1_transform+0x614>
 8012fe6:	bf00      	nop
 8012fe8:	5a827999 	.word	0x5a827999
 8012fec:	6ed9eba1 	.word	0x6ed9eba1
 8012ff0:	657b      	str	r3, [r7, #84]	@ 0x54
  R2(a, b, c, d, e, 25);
 8012ff2:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8012ff4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8012ff6:	405a      	eors	r2, r3
 8012ff8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8012ffa:	405a      	eors	r2, r3
 8012ffc:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8012ffe:	693b      	ldr	r3, [r7, #16]
 8013000:	4059      	eors	r1, r3
 8013002:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013004:	4059      	eors	r1, r3
 8013006:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013008:	404b      	eors	r3, r1
 801300a:	ea4f 73f3 	mov.w	r3, r3, ror #31
 801300e:	633b      	str	r3, [r7, #48]	@ 0x30
 8013010:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013012:	441a      	add	r2, r3
 8013014:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8013016:	ea4f 63f3 	mov.w	r3, r3, ror #27
 801301a:	441a      	add	r2, r3
 801301c:	4ba9      	ldr	r3, [pc, #676]	@ (80132c4 <mg_sha1_transform+0x8e8>)
 801301e:	4413      	add	r3, r2
 8013020:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8013022:	4413      	add	r3, r2
 8013024:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8013026:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8013028:	ea4f 03b3 	mov.w	r3, r3, ror #2
 801302c:	65bb      	str	r3, [r7, #88]	@ 0x58
  R2(e, a, b, c, d, 26);
 801302e:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8013030:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8013032:	405a      	eors	r2, r3
 8013034:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013036:	405a      	eors	r2, r3
 8013038:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 801303a:	697b      	ldr	r3, [r7, #20]
 801303c:	4059      	eors	r1, r3
 801303e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8013040:	4059      	eors	r1, r3
 8013042:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013044:	404b      	eors	r3, r1
 8013046:	ea4f 73f3 	mov.w	r3, r3, ror #31
 801304a:	637b      	str	r3, [r7, #52]	@ 0x34
 801304c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801304e:	441a      	add	r2, r3
 8013050:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8013052:	ea4f 63f3 	mov.w	r3, r3, ror #27
 8013056:	441a      	add	r2, r3
 8013058:	4b9a      	ldr	r3, [pc, #616]	@ (80132c4 <mg_sha1_transform+0x8e8>)
 801305a:	4413      	add	r3, r2
 801305c:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 801305e:	4413      	add	r3, r2
 8013060:	653b      	str	r3, [r7, #80]	@ 0x50
 8013062:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8013064:	ea4f 03b3 	mov.w	r3, r3, ror #2
 8013068:	65fb      	str	r3, [r7, #92]	@ 0x5c
  R2(d, e, a, b, c, 27);
 801306a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 801306c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801306e:	405a      	eors	r2, r3
 8013070:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8013072:	405a      	eors	r2, r3
 8013074:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8013076:	69bb      	ldr	r3, [r7, #24]
 8013078:	4059      	eors	r1, r3
 801307a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801307c:	4059      	eors	r1, r3
 801307e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013080:	404b      	eors	r3, r1
 8013082:	ea4f 73f3 	mov.w	r3, r3, ror #31
 8013086:	63bb      	str	r3, [r7, #56]	@ 0x38
 8013088:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801308a:	441a      	add	r2, r3
 801308c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801308e:	ea4f 63f3 	mov.w	r3, r3, ror #27
 8013092:	441a      	add	r2, r3
 8013094:	4b8b      	ldr	r3, [pc, #556]	@ (80132c4 <mg_sha1_transform+0x8e8>)
 8013096:	4413      	add	r3, r2
 8013098:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 801309a:	4413      	add	r3, r2
 801309c:	657b      	str	r3, [r7, #84]	@ 0x54
 801309e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80130a0:	ea4f 03b3 	mov.w	r3, r3, ror #2
 80130a4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  R2(c, d, e, a, b, 28);
 80130a6:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80130a8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80130aa:	405a      	eors	r2, r3
 80130ac:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80130ae:	405a      	eors	r2, r3
 80130b0:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80130b2:	69fb      	ldr	r3, [r7, #28]
 80130b4:	4059      	eors	r1, r3
 80130b6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80130b8:	4059      	eors	r1, r3
 80130ba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80130bc:	404b      	eors	r3, r1
 80130be:	ea4f 73f3 	mov.w	r3, r3, ror #31
 80130c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80130c4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80130c6:	441a      	add	r2, r3
 80130c8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80130ca:	ea4f 63f3 	mov.w	r3, r3, ror #27
 80130ce:	441a      	add	r2, r3
 80130d0:	4b7c      	ldr	r3, [pc, #496]	@ (80132c4 <mg_sha1_transform+0x8e8>)
 80130d2:	4413      	add	r3, r2
 80130d4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80130d6:	4413      	add	r3, r2
 80130d8:	65bb      	str	r3, [r7, #88]	@ 0x58
 80130da:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80130dc:	ea4f 03b3 	mov.w	r3, r3, ror #2
 80130e0:	653b      	str	r3, [r7, #80]	@ 0x50
  R2(b, c, d, e, a, 29);
 80130e2:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80130e4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80130e6:	405a      	eors	r2, r3
 80130e8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80130ea:	405a      	eors	r2, r3
 80130ec:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80130ee:	6a3b      	ldr	r3, [r7, #32]
 80130f0:	4059      	eors	r1, r3
 80130f2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80130f4:	4059      	eors	r1, r3
 80130f6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80130f8:	404b      	eors	r3, r1
 80130fa:	ea4f 73f3 	mov.w	r3, r3, ror #31
 80130fe:	643b      	str	r3, [r7, #64]	@ 0x40
 8013100:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8013102:	441a      	add	r2, r3
 8013104:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8013106:	ea4f 63f3 	mov.w	r3, r3, ror #27
 801310a:	441a      	add	r2, r3
 801310c:	4b6d      	ldr	r3, [pc, #436]	@ (80132c4 <mg_sha1_transform+0x8e8>)
 801310e:	4413      	add	r3, r2
 8013110:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8013112:	4413      	add	r3, r2
 8013114:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8013116:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013118:	ea4f 03b3 	mov.w	r3, r3, ror #2
 801311c:	657b      	str	r3, [r7, #84]	@ 0x54
  R2(a, b, c, d, e, 30);
 801311e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8013120:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013122:	405a      	eors	r2, r3
 8013124:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8013126:	405a      	eors	r2, r3
 8013128:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 801312a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801312c:	4059      	eors	r1, r3
 801312e:	68fb      	ldr	r3, [r7, #12]
 8013130:	4059      	eors	r1, r3
 8013132:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8013134:	404b      	eors	r3, r1
 8013136:	ea4f 73f3 	mov.w	r3, r3, ror #31
 801313a:	647b      	str	r3, [r7, #68]	@ 0x44
 801313c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801313e:	441a      	add	r2, r3
 8013140:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8013142:	ea4f 63f3 	mov.w	r3, r3, ror #27
 8013146:	441a      	add	r2, r3
 8013148:	4b5e      	ldr	r3, [pc, #376]	@ (80132c4 <mg_sha1_transform+0x8e8>)
 801314a:	4413      	add	r3, r2
 801314c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 801314e:	4413      	add	r3, r2
 8013150:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8013152:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8013154:	ea4f 03b3 	mov.w	r3, r3, ror #2
 8013158:	65bb      	str	r3, [r7, #88]	@ 0x58
  R2(e, a, b, c, d, 31);
 801315a:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 801315c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801315e:	405a      	eors	r2, r3
 8013160:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013162:	405a      	eors	r2, r3
 8013164:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8013166:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013168:	4059      	eors	r1, r3
 801316a:	693b      	ldr	r3, [r7, #16]
 801316c:	4059      	eors	r1, r3
 801316e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8013170:	404b      	eors	r3, r1
 8013172:	ea4f 73f3 	mov.w	r3, r3, ror #31
 8013176:	64bb      	str	r3, [r7, #72]	@ 0x48
 8013178:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801317a:	441a      	add	r2, r3
 801317c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801317e:	ea4f 63f3 	mov.w	r3, r3, ror #27
 8013182:	441a      	add	r2, r3
 8013184:	4b4f      	ldr	r3, [pc, #316]	@ (80132c4 <mg_sha1_transform+0x8e8>)
 8013186:	4413      	add	r3, r2
 8013188:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 801318a:	4413      	add	r3, r2
 801318c:	653b      	str	r3, [r7, #80]	@ 0x50
 801318e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8013190:	ea4f 03b3 	mov.w	r3, r3, ror #2
 8013194:	65fb      	str	r3, [r7, #92]	@ 0x5c
  R2(d, e, a, b, c, 32);
 8013196:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8013198:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801319a:	405a      	eors	r2, r3
 801319c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801319e:	405a      	eors	r2, r3
 80131a0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80131a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80131a4:	4059      	eors	r1, r3
 80131a6:	697b      	ldr	r3, [r7, #20]
 80131a8:	4059      	eors	r1, r3
 80131aa:	68fb      	ldr	r3, [r7, #12]
 80131ac:	404b      	eors	r3, r1
 80131ae:	ea4f 73f3 	mov.w	r3, r3, ror #31
 80131b2:	60fb      	str	r3, [r7, #12]
 80131b4:	68fb      	ldr	r3, [r7, #12]
 80131b6:	441a      	add	r2, r3
 80131b8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80131ba:	ea4f 63f3 	mov.w	r3, r3, ror #27
 80131be:	441a      	add	r2, r3
 80131c0:	4b40      	ldr	r3, [pc, #256]	@ (80132c4 <mg_sha1_transform+0x8e8>)
 80131c2:	4413      	add	r3, r2
 80131c4:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80131c6:	4413      	add	r3, r2
 80131c8:	657b      	str	r3, [r7, #84]	@ 0x54
 80131ca:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80131cc:	ea4f 03b3 	mov.w	r3, r3, ror #2
 80131d0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  R2(c, d, e, a, b, 33);
 80131d2:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80131d4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80131d6:	405a      	eors	r2, r3
 80131d8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80131da:	405a      	eors	r2, r3
 80131dc:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80131de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80131e0:	4059      	eors	r1, r3
 80131e2:	69bb      	ldr	r3, [r7, #24]
 80131e4:	4059      	eors	r1, r3
 80131e6:	693b      	ldr	r3, [r7, #16]
 80131e8:	404b      	eors	r3, r1
 80131ea:	ea4f 73f3 	mov.w	r3, r3, ror #31
 80131ee:	613b      	str	r3, [r7, #16]
 80131f0:	693b      	ldr	r3, [r7, #16]
 80131f2:	441a      	add	r2, r3
 80131f4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80131f6:	ea4f 63f3 	mov.w	r3, r3, ror #27
 80131fa:	441a      	add	r2, r3
 80131fc:	4b31      	ldr	r3, [pc, #196]	@ (80132c4 <mg_sha1_transform+0x8e8>)
 80131fe:	4413      	add	r3, r2
 8013200:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8013202:	4413      	add	r3, r2
 8013204:	65bb      	str	r3, [r7, #88]	@ 0x58
 8013206:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8013208:	ea4f 03b3 	mov.w	r3, r3, ror #2
 801320c:	653b      	str	r3, [r7, #80]	@ 0x50
  R2(b, c, d, e, a, 34);
 801320e:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8013210:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8013212:	405a      	eors	r2, r3
 8013214:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8013216:	405a      	eors	r2, r3
 8013218:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 801321a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801321c:	4059      	eors	r1, r3
 801321e:	69fb      	ldr	r3, [r7, #28]
 8013220:	4059      	eors	r1, r3
 8013222:	697b      	ldr	r3, [r7, #20]
 8013224:	404b      	eors	r3, r1
 8013226:	ea4f 73f3 	mov.w	r3, r3, ror #31
 801322a:	617b      	str	r3, [r7, #20]
 801322c:	697b      	ldr	r3, [r7, #20]
 801322e:	441a      	add	r2, r3
 8013230:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8013232:	ea4f 63f3 	mov.w	r3, r3, ror #27
 8013236:	441a      	add	r2, r3
 8013238:	4b22      	ldr	r3, [pc, #136]	@ (80132c4 <mg_sha1_transform+0x8e8>)
 801323a:	4413      	add	r3, r2
 801323c:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 801323e:	4413      	add	r3, r2
 8013240:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8013242:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013244:	ea4f 03b3 	mov.w	r3, r3, ror #2
 8013248:	657b      	str	r3, [r7, #84]	@ 0x54
  R2(a, b, c, d, e, 35);
 801324a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 801324c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801324e:	405a      	eors	r2, r3
 8013250:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8013252:	405a      	eors	r2, r3
 8013254:	68f9      	ldr	r1, [r7, #12]
 8013256:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013258:	4059      	eors	r1, r3
 801325a:	6a3b      	ldr	r3, [r7, #32]
 801325c:	4059      	eors	r1, r3
 801325e:	69bb      	ldr	r3, [r7, #24]
 8013260:	404b      	eors	r3, r1
 8013262:	ea4f 73f3 	mov.w	r3, r3, ror #31
 8013266:	61bb      	str	r3, [r7, #24]
 8013268:	69bb      	ldr	r3, [r7, #24]
 801326a:	441a      	add	r2, r3
 801326c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801326e:	ea4f 63f3 	mov.w	r3, r3, ror #27
 8013272:	441a      	add	r2, r3
 8013274:	4b13      	ldr	r3, [pc, #76]	@ (80132c4 <mg_sha1_transform+0x8e8>)
 8013276:	4413      	add	r3, r2
 8013278:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 801327a:	4413      	add	r3, r2
 801327c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 801327e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8013280:	ea4f 03b3 	mov.w	r3, r3, ror #2
 8013284:	65bb      	str	r3, [r7, #88]	@ 0x58
  R2(e, a, b, c, d, 36);
 8013286:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8013288:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801328a:	405a      	eors	r2, r3
 801328c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801328e:	405a      	eors	r2, r3
 8013290:	6939      	ldr	r1, [r7, #16]
 8013292:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8013294:	4059      	eors	r1, r3
 8013296:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013298:	4059      	eors	r1, r3
 801329a:	69fb      	ldr	r3, [r7, #28]
 801329c:	404b      	eors	r3, r1
 801329e:	ea4f 73f3 	mov.w	r3, r3, ror #31
 80132a2:	61fb      	str	r3, [r7, #28]
 80132a4:	69fb      	ldr	r3, [r7, #28]
 80132a6:	441a      	add	r2, r3
 80132a8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80132aa:	ea4f 63f3 	mov.w	r3, r3, ror #27
 80132ae:	441a      	add	r2, r3
 80132b0:	4b04      	ldr	r3, [pc, #16]	@ (80132c4 <mg_sha1_transform+0x8e8>)
 80132b2:	4413      	add	r3, r2
 80132b4:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80132b6:	4413      	add	r3, r2
 80132b8:	653b      	str	r3, [r7, #80]	@ 0x50
 80132ba:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80132bc:	ea4f 03b3 	mov.w	r3, r3, ror #2
 80132c0:	e002      	b.n	80132c8 <mg_sha1_transform+0x8ec>
 80132c2:	bf00      	nop
 80132c4:	6ed9eba1 	.word	0x6ed9eba1
 80132c8:	65fb      	str	r3, [r7, #92]	@ 0x5c
  R2(d, e, a, b, c, 37);
 80132ca:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80132cc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80132ce:	405a      	eors	r2, r3
 80132d0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80132d2:	405a      	eors	r2, r3
 80132d4:	6979      	ldr	r1, [r7, #20]
 80132d6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80132d8:	4059      	eors	r1, r3
 80132da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80132dc:	4059      	eors	r1, r3
 80132de:	6a3b      	ldr	r3, [r7, #32]
 80132e0:	404b      	eors	r3, r1
 80132e2:	ea4f 73f3 	mov.w	r3, r3, ror #31
 80132e6:	623b      	str	r3, [r7, #32]
 80132e8:	6a3b      	ldr	r3, [r7, #32]
 80132ea:	441a      	add	r2, r3
 80132ec:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80132ee:	ea4f 63f3 	mov.w	r3, r3, ror #27
 80132f2:	441a      	add	r2, r3
 80132f4:	4ba9      	ldr	r3, [pc, #676]	@ (801359c <mg_sha1_transform+0xbc0>)
 80132f6:	4413      	add	r3, r2
 80132f8:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80132fa:	4413      	add	r3, r2
 80132fc:	657b      	str	r3, [r7, #84]	@ 0x54
 80132fe:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8013300:	ea4f 03b3 	mov.w	r3, r3, ror #2
 8013304:	64fb      	str	r3, [r7, #76]	@ 0x4c
  R2(c, d, e, a, b, 38);
 8013306:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8013308:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801330a:	405a      	eors	r2, r3
 801330c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801330e:	405a      	eors	r2, r3
 8013310:	69b9      	ldr	r1, [r7, #24]
 8013312:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8013314:	4059      	eors	r1, r3
 8013316:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013318:	4059      	eors	r1, r3
 801331a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801331c:	404b      	eors	r3, r1
 801331e:	ea4f 73f3 	mov.w	r3, r3, ror #31
 8013322:	627b      	str	r3, [r7, #36]	@ 0x24
 8013324:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013326:	441a      	add	r2, r3
 8013328:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801332a:	ea4f 63f3 	mov.w	r3, r3, ror #27
 801332e:	441a      	add	r2, r3
 8013330:	4b9a      	ldr	r3, [pc, #616]	@ (801359c <mg_sha1_transform+0xbc0>)
 8013332:	4413      	add	r3, r2
 8013334:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8013336:	4413      	add	r3, r2
 8013338:	65bb      	str	r3, [r7, #88]	@ 0x58
 801333a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801333c:	ea4f 03b3 	mov.w	r3, r3, ror #2
 8013340:	653b      	str	r3, [r7, #80]	@ 0x50
  R2(b, c, d, e, a, 39);
 8013342:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8013344:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8013346:	405a      	eors	r2, r3
 8013348:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801334a:	405a      	eors	r2, r3
 801334c:	69f9      	ldr	r1, [r7, #28]
 801334e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8013350:	4059      	eors	r1, r3
 8013352:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013354:	4059      	eors	r1, r3
 8013356:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013358:	404b      	eors	r3, r1
 801335a:	ea4f 73f3 	mov.w	r3, r3, ror #31
 801335e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8013360:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013362:	441a      	add	r2, r3
 8013364:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8013366:	ea4f 63f3 	mov.w	r3, r3, ror #27
 801336a:	441a      	add	r2, r3
 801336c:	4b8b      	ldr	r3, [pc, #556]	@ (801359c <mg_sha1_transform+0xbc0>)
 801336e:	4413      	add	r3, r2
 8013370:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8013372:	4413      	add	r3, r2
 8013374:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8013376:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013378:	ea4f 03b3 	mov.w	r3, r3, ror #2
 801337c:	657b      	str	r3, [r7, #84]	@ 0x54
  R3(a, b, c, d, e, 40);
 801337e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8013380:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013382:	431a      	orrs	r2, r3
 8013384:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8013386:	401a      	ands	r2, r3
 8013388:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 801338a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801338c:	400b      	ands	r3, r1
 801338e:	431a      	orrs	r2, r3
 8013390:	6a39      	ldr	r1, [r7, #32]
 8013392:	68fb      	ldr	r3, [r7, #12]
 8013394:	4059      	eors	r1, r3
 8013396:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013398:	4059      	eors	r1, r3
 801339a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801339c:	404b      	eors	r3, r1
 801339e:	ea4f 73f3 	mov.w	r3, r3, ror #31
 80133a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80133a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80133a6:	441a      	add	r2, r3
 80133a8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80133aa:	ea4f 63f3 	mov.w	r3, r3, ror #27
 80133ae:	441a      	add	r2, r3
 80133b0:	4b7b      	ldr	r3, [pc, #492]	@ (80135a0 <mg_sha1_transform+0xbc4>)
 80133b2:	4413      	add	r3, r2
 80133b4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80133b6:	4413      	add	r3, r2
 80133b8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80133ba:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80133bc:	ea4f 03b3 	mov.w	r3, r3, ror #2
 80133c0:	65bb      	str	r3, [r7, #88]	@ 0x58
  R3(e, a, b, c, d, 41);
 80133c2:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80133c4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80133c6:	431a      	orrs	r2, r3
 80133c8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80133ca:	401a      	ands	r2, r3
 80133cc:	6df9      	ldr	r1, [r7, #92]	@ 0x5c
 80133ce:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80133d0:	400b      	ands	r3, r1
 80133d2:	431a      	orrs	r2, r3
 80133d4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80133d6:	693b      	ldr	r3, [r7, #16]
 80133d8:	4059      	eors	r1, r3
 80133da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80133dc:	4059      	eors	r1, r3
 80133de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80133e0:	404b      	eors	r3, r1
 80133e2:	ea4f 73f3 	mov.w	r3, r3, ror #31
 80133e6:	633b      	str	r3, [r7, #48]	@ 0x30
 80133e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80133ea:	441a      	add	r2, r3
 80133ec:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80133ee:	ea4f 63f3 	mov.w	r3, r3, ror #27
 80133f2:	441a      	add	r2, r3
 80133f4:	4b6a      	ldr	r3, [pc, #424]	@ (80135a0 <mg_sha1_transform+0xbc4>)
 80133f6:	4413      	add	r3, r2
 80133f8:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80133fa:	4413      	add	r3, r2
 80133fc:	653b      	str	r3, [r7, #80]	@ 0x50
 80133fe:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8013400:	ea4f 03b3 	mov.w	r3, r3, ror #2
 8013404:	65fb      	str	r3, [r7, #92]	@ 0x5c
  R3(d, e, a, b, c, 42);
 8013406:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8013408:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801340a:	431a      	orrs	r2, r3
 801340c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801340e:	401a      	ands	r2, r3
 8013410:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8013412:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8013414:	400b      	ands	r3, r1
 8013416:	431a      	orrs	r2, r3
 8013418:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 801341a:	697b      	ldr	r3, [r7, #20]
 801341c:	4059      	eors	r1, r3
 801341e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8013420:	4059      	eors	r1, r3
 8013422:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013424:	404b      	eors	r3, r1
 8013426:	ea4f 73f3 	mov.w	r3, r3, ror #31
 801342a:	637b      	str	r3, [r7, #52]	@ 0x34
 801342c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801342e:	441a      	add	r2, r3
 8013430:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8013432:	ea4f 63f3 	mov.w	r3, r3, ror #27
 8013436:	441a      	add	r2, r3
 8013438:	4b59      	ldr	r3, [pc, #356]	@ (80135a0 <mg_sha1_transform+0xbc4>)
 801343a:	4413      	add	r3, r2
 801343c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 801343e:	4413      	add	r3, r2
 8013440:	657b      	str	r3, [r7, #84]	@ 0x54
 8013442:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8013444:	ea4f 03b3 	mov.w	r3, r3, ror #2
 8013448:	64fb      	str	r3, [r7, #76]	@ 0x4c
  R3(c, d, e, a, b, 43);
 801344a:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 801344c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801344e:	431a      	orrs	r2, r3
 8013450:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8013452:	401a      	ands	r2, r3
 8013454:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8013456:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8013458:	400b      	ands	r3, r1
 801345a:	431a      	orrs	r2, r3
 801345c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 801345e:	69bb      	ldr	r3, [r7, #24]
 8013460:	4059      	eors	r1, r3
 8013462:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8013464:	4059      	eors	r1, r3
 8013466:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013468:	404b      	eors	r3, r1
 801346a:	ea4f 73f3 	mov.w	r3, r3, ror #31
 801346e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8013470:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013472:	441a      	add	r2, r3
 8013474:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013476:	ea4f 63f3 	mov.w	r3, r3, ror #27
 801347a:	441a      	add	r2, r3
 801347c:	4b48      	ldr	r3, [pc, #288]	@ (80135a0 <mg_sha1_transform+0xbc4>)
 801347e:	4413      	add	r3, r2
 8013480:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8013482:	4413      	add	r3, r2
 8013484:	65bb      	str	r3, [r7, #88]	@ 0x58
 8013486:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8013488:	ea4f 03b3 	mov.w	r3, r3, ror #2
 801348c:	653b      	str	r3, [r7, #80]	@ 0x50
  R3(b, c, d, e, a, 44);
 801348e:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8013490:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8013492:	431a      	orrs	r2, r3
 8013494:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8013496:	401a      	ands	r2, r3
 8013498:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 801349a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801349c:	400b      	ands	r3, r1
 801349e:	431a      	orrs	r2, r3
 80134a0:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80134a2:	69fb      	ldr	r3, [r7, #28]
 80134a4:	4059      	eors	r1, r3
 80134a6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80134a8:	4059      	eors	r1, r3
 80134aa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80134ac:	404b      	eors	r3, r1
 80134ae:	ea4f 73f3 	mov.w	r3, r3, ror #31
 80134b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80134b4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80134b6:	441a      	add	r2, r3
 80134b8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80134ba:	ea4f 63f3 	mov.w	r3, r3, ror #27
 80134be:	441a      	add	r2, r3
 80134c0:	4b37      	ldr	r3, [pc, #220]	@ (80135a0 <mg_sha1_transform+0xbc4>)
 80134c2:	4413      	add	r3, r2
 80134c4:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80134c6:	4413      	add	r3, r2
 80134c8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80134ca:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80134cc:	ea4f 03b3 	mov.w	r3, r3, ror #2
 80134d0:	657b      	str	r3, [r7, #84]	@ 0x54
  R3(a, b, c, d, e, 45);
 80134d2:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80134d4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80134d6:	431a      	orrs	r2, r3
 80134d8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80134da:	401a      	ands	r2, r3
 80134dc:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 80134de:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80134e0:	400b      	ands	r3, r1
 80134e2:	431a      	orrs	r2, r3
 80134e4:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80134e6:	6a3b      	ldr	r3, [r7, #32]
 80134e8:	4059      	eors	r1, r3
 80134ea:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80134ec:	4059      	eors	r1, r3
 80134ee:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80134f0:	404b      	eors	r3, r1
 80134f2:	ea4f 73f3 	mov.w	r3, r3, ror #31
 80134f6:	643b      	str	r3, [r7, #64]	@ 0x40
 80134f8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80134fa:	441a      	add	r2, r3
 80134fc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80134fe:	ea4f 63f3 	mov.w	r3, r3, ror #27
 8013502:	441a      	add	r2, r3
 8013504:	4b26      	ldr	r3, [pc, #152]	@ (80135a0 <mg_sha1_transform+0xbc4>)
 8013506:	4413      	add	r3, r2
 8013508:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 801350a:	4413      	add	r3, r2
 801350c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 801350e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8013510:	ea4f 03b3 	mov.w	r3, r3, ror #2
 8013514:	65bb      	str	r3, [r7, #88]	@ 0x58
  R3(e, a, b, c, d, 46);
 8013516:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8013518:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801351a:	431a      	orrs	r2, r3
 801351c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801351e:	401a      	ands	r2, r3
 8013520:	6df9      	ldr	r1, [r7, #92]	@ 0x5c
 8013522:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8013524:	400b      	ands	r3, r1
 8013526:	431a      	orrs	r2, r3
 8013528:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 801352a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801352c:	4059      	eors	r1, r3
 801352e:	68fb      	ldr	r3, [r7, #12]
 8013530:	4059      	eors	r1, r3
 8013532:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8013534:	404b      	eors	r3, r1
 8013536:	ea4f 73f3 	mov.w	r3, r3, ror #31
 801353a:	647b      	str	r3, [r7, #68]	@ 0x44
 801353c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801353e:	441a      	add	r2, r3
 8013540:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8013542:	ea4f 63f3 	mov.w	r3, r3, ror #27
 8013546:	441a      	add	r2, r3
 8013548:	4b15      	ldr	r3, [pc, #84]	@ (80135a0 <mg_sha1_transform+0xbc4>)
 801354a:	4413      	add	r3, r2
 801354c:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 801354e:	4413      	add	r3, r2
 8013550:	653b      	str	r3, [r7, #80]	@ 0x50
 8013552:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8013554:	ea4f 03b3 	mov.w	r3, r3, ror #2
 8013558:	65fb      	str	r3, [r7, #92]	@ 0x5c
  R3(d, e, a, b, c, 47);
 801355a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 801355c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801355e:	431a      	orrs	r2, r3
 8013560:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8013562:	401a      	ands	r2, r3
 8013564:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8013566:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8013568:	400b      	ands	r3, r1
 801356a:	431a      	orrs	r2, r3
 801356c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 801356e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013570:	4059      	eors	r1, r3
 8013572:	693b      	ldr	r3, [r7, #16]
 8013574:	4059      	eors	r1, r3
 8013576:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8013578:	404b      	eors	r3, r1
 801357a:	ea4f 73f3 	mov.w	r3, r3, ror #31
 801357e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8013580:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8013582:	441a      	add	r2, r3
 8013584:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8013586:	ea4f 63f3 	mov.w	r3, r3, ror #27
 801358a:	441a      	add	r2, r3
 801358c:	4b04      	ldr	r3, [pc, #16]	@ (80135a0 <mg_sha1_transform+0xbc4>)
 801358e:	4413      	add	r3, r2
 8013590:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8013592:	4413      	add	r3, r2
 8013594:	657b      	str	r3, [r7, #84]	@ 0x54
 8013596:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8013598:	e004      	b.n	80135a4 <mg_sha1_transform+0xbc8>
 801359a:	bf00      	nop
 801359c:	6ed9eba1 	.word	0x6ed9eba1
 80135a0:	8f1bbcdc 	.word	0x8f1bbcdc
 80135a4:	ea4f 03b3 	mov.w	r3, r3, ror #2
 80135a8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  R3(c, d, e, a, b, 48);
 80135aa:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80135ac:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80135ae:	431a      	orrs	r2, r3
 80135b0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80135b2:	401a      	ands	r2, r3
 80135b4:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80135b6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80135b8:	400b      	ands	r3, r1
 80135ba:	431a      	orrs	r2, r3
 80135bc:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80135be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80135c0:	4059      	eors	r1, r3
 80135c2:	697b      	ldr	r3, [r7, #20]
 80135c4:	4059      	eors	r1, r3
 80135c6:	68fb      	ldr	r3, [r7, #12]
 80135c8:	404b      	eors	r3, r1
 80135ca:	ea4f 73f3 	mov.w	r3, r3, ror #31
 80135ce:	60fb      	str	r3, [r7, #12]
 80135d0:	68fb      	ldr	r3, [r7, #12]
 80135d2:	441a      	add	r2, r3
 80135d4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80135d6:	ea4f 63f3 	mov.w	r3, r3, ror #27
 80135da:	441a      	add	r2, r3
 80135dc:	4ba8      	ldr	r3, [pc, #672]	@ (8013880 <mg_sha1_transform+0xea4>)
 80135de:	4413      	add	r3, r2
 80135e0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80135e2:	4413      	add	r3, r2
 80135e4:	65bb      	str	r3, [r7, #88]	@ 0x58
 80135e6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80135e8:	ea4f 03b3 	mov.w	r3, r3, ror #2
 80135ec:	653b      	str	r3, [r7, #80]	@ 0x50
  R3(b, c, d, e, a, 49);
 80135ee:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80135f0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80135f2:	431a      	orrs	r2, r3
 80135f4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80135f6:	401a      	ands	r2, r3
 80135f8:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80135fa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80135fc:	400b      	ands	r3, r1
 80135fe:	431a      	orrs	r2, r3
 8013600:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8013602:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013604:	4059      	eors	r1, r3
 8013606:	69bb      	ldr	r3, [r7, #24]
 8013608:	4059      	eors	r1, r3
 801360a:	693b      	ldr	r3, [r7, #16]
 801360c:	404b      	eors	r3, r1
 801360e:	ea4f 73f3 	mov.w	r3, r3, ror #31
 8013612:	613b      	str	r3, [r7, #16]
 8013614:	693b      	ldr	r3, [r7, #16]
 8013616:	441a      	add	r2, r3
 8013618:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801361a:	ea4f 63f3 	mov.w	r3, r3, ror #27
 801361e:	441a      	add	r2, r3
 8013620:	4b97      	ldr	r3, [pc, #604]	@ (8013880 <mg_sha1_transform+0xea4>)
 8013622:	4413      	add	r3, r2
 8013624:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8013626:	4413      	add	r3, r2
 8013628:	65fb      	str	r3, [r7, #92]	@ 0x5c
 801362a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801362c:	ea4f 03b3 	mov.w	r3, r3, ror #2
 8013630:	657b      	str	r3, [r7, #84]	@ 0x54
  R3(a, b, c, d, e, 50);
 8013632:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8013634:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013636:	431a      	orrs	r2, r3
 8013638:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801363a:	401a      	ands	r2, r3
 801363c:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 801363e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013640:	400b      	ands	r3, r1
 8013642:	431a      	orrs	r2, r3
 8013644:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8013646:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013648:	4059      	eors	r1, r3
 801364a:	69fb      	ldr	r3, [r7, #28]
 801364c:	4059      	eors	r1, r3
 801364e:	697b      	ldr	r3, [r7, #20]
 8013650:	404b      	eors	r3, r1
 8013652:	ea4f 73f3 	mov.w	r3, r3, ror #31
 8013656:	617b      	str	r3, [r7, #20]
 8013658:	697b      	ldr	r3, [r7, #20]
 801365a:	441a      	add	r2, r3
 801365c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801365e:	ea4f 63f3 	mov.w	r3, r3, ror #27
 8013662:	441a      	add	r2, r3
 8013664:	4b86      	ldr	r3, [pc, #536]	@ (8013880 <mg_sha1_transform+0xea4>)
 8013666:	4413      	add	r3, r2
 8013668:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 801366a:	4413      	add	r3, r2
 801366c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 801366e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8013670:	ea4f 03b3 	mov.w	r3, r3, ror #2
 8013674:	65bb      	str	r3, [r7, #88]	@ 0x58
  R3(e, a, b, c, d, 51);
 8013676:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8013678:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801367a:	431a      	orrs	r2, r3
 801367c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801367e:	401a      	ands	r2, r3
 8013680:	6df9      	ldr	r1, [r7, #92]	@ 0x5c
 8013682:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8013684:	400b      	ands	r3, r1
 8013686:	431a      	orrs	r2, r3
 8013688:	68f9      	ldr	r1, [r7, #12]
 801368a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801368c:	4059      	eors	r1, r3
 801368e:	6a3b      	ldr	r3, [r7, #32]
 8013690:	4059      	eors	r1, r3
 8013692:	69bb      	ldr	r3, [r7, #24]
 8013694:	404b      	eors	r3, r1
 8013696:	ea4f 73f3 	mov.w	r3, r3, ror #31
 801369a:	61bb      	str	r3, [r7, #24]
 801369c:	69bb      	ldr	r3, [r7, #24]
 801369e:	441a      	add	r2, r3
 80136a0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80136a2:	ea4f 63f3 	mov.w	r3, r3, ror #27
 80136a6:	441a      	add	r2, r3
 80136a8:	4b75      	ldr	r3, [pc, #468]	@ (8013880 <mg_sha1_transform+0xea4>)
 80136aa:	4413      	add	r3, r2
 80136ac:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80136ae:	4413      	add	r3, r2
 80136b0:	653b      	str	r3, [r7, #80]	@ 0x50
 80136b2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80136b4:	ea4f 03b3 	mov.w	r3, r3, ror #2
 80136b8:	65fb      	str	r3, [r7, #92]	@ 0x5c
  R3(d, e, a, b, c, 52);
 80136ba:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80136bc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80136be:	431a      	orrs	r2, r3
 80136c0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80136c2:	401a      	ands	r2, r3
 80136c4:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 80136c6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80136c8:	400b      	ands	r3, r1
 80136ca:	431a      	orrs	r2, r3
 80136cc:	6939      	ldr	r1, [r7, #16]
 80136ce:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80136d0:	4059      	eors	r1, r3
 80136d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80136d4:	4059      	eors	r1, r3
 80136d6:	69fb      	ldr	r3, [r7, #28]
 80136d8:	404b      	eors	r3, r1
 80136da:	ea4f 73f3 	mov.w	r3, r3, ror #31
 80136de:	61fb      	str	r3, [r7, #28]
 80136e0:	69fb      	ldr	r3, [r7, #28]
 80136e2:	441a      	add	r2, r3
 80136e4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80136e6:	ea4f 63f3 	mov.w	r3, r3, ror #27
 80136ea:	441a      	add	r2, r3
 80136ec:	4b64      	ldr	r3, [pc, #400]	@ (8013880 <mg_sha1_transform+0xea4>)
 80136ee:	4413      	add	r3, r2
 80136f0:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80136f2:	4413      	add	r3, r2
 80136f4:	657b      	str	r3, [r7, #84]	@ 0x54
 80136f6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80136f8:	ea4f 03b3 	mov.w	r3, r3, ror #2
 80136fc:	64fb      	str	r3, [r7, #76]	@ 0x4c
  R3(c, d, e, a, b, 53);
 80136fe:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8013700:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8013702:	431a      	orrs	r2, r3
 8013704:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8013706:	401a      	ands	r2, r3
 8013708:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 801370a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801370c:	400b      	ands	r3, r1
 801370e:	431a      	orrs	r2, r3
 8013710:	6979      	ldr	r1, [r7, #20]
 8013712:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8013714:	4059      	eors	r1, r3
 8013716:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013718:	4059      	eors	r1, r3
 801371a:	6a3b      	ldr	r3, [r7, #32]
 801371c:	404b      	eors	r3, r1
 801371e:	ea4f 73f3 	mov.w	r3, r3, ror #31
 8013722:	623b      	str	r3, [r7, #32]
 8013724:	6a3b      	ldr	r3, [r7, #32]
 8013726:	441a      	add	r2, r3
 8013728:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801372a:	ea4f 63f3 	mov.w	r3, r3, ror #27
 801372e:	441a      	add	r2, r3
 8013730:	4b53      	ldr	r3, [pc, #332]	@ (8013880 <mg_sha1_transform+0xea4>)
 8013732:	4413      	add	r3, r2
 8013734:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8013736:	4413      	add	r3, r2
 8013738:	65bb      	str	r3, [r7, #88]	@ 0x58
 801373a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801373c:	ea4f 03b3 	mov.w	r3, r3, ror #2
 8013740:	653b      	str	r3, [r7, #80]	@ 0x50
  R3(b, c, d, e, a, 54);
 8013742:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8013744:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8013746:	431a      	orrs	r2, r3
 8013748:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801374a:	401a      	ands	r2, r3
 801374c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 801374e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8013750:	400b      	ands	r3, r1
 8013752:	431a      	orrs	r2, r3
 8013754:	69b9      	ldr	r1, [r7, #24]
 8013756:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8013758:	4059      	eors	r1, r3
 801375a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801375c:	4059      	eors	r1, r3
 801375e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013760:	404b      	eors	r3, r1
 8013762:	ea4f 73f3 	mov.w	r3, r3, ror #31
 8013766:	627b      	str	r3, [r7, #36]	@ 0x24
 8013768:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801376a:	441a      	add	r2, r3
 801376c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801376e:	ea4f 63f3 	mov.w	r3, r3, ror #27
 8013772:	441a      	add	r2, r3
 8013774:	4b42      	ldr	r3, [pc, #264]	@ (8013880 <mg_sha1_transform+0xea4>)
 8013776:	4413      	add	r3, r2
 8013778:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 801377a:	4413      	add	r3, r2
 801377c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 801377e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013780:	ea4f 03b3 	mov.w	r3, r3, ror #2
 8013784:	657b      	str	r3, [r7, #84]	@ 0x54
  R3(a, b, c, d, e, 55);
 8013786:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8013788:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801378a:	431a      	orrs	r2, r3
 801378c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801378e:	401a      	ands	r2, r3
 8013790:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8013792:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013794:	400b      	ands	r3, r1
 8013796:	431a      	orrs	r2, r3
 8013798:	69f9      	ldr	r1, [r7, #28]
 801379a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801379c:	4059      	eors	r1, r3
 801379e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80137a0:	4059      	eors	r1, r3
 80137a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80137a4:	404b      	eors	r3, r1
 80137a6:	ea4f 73f3 	mov.w	r3, r3, ror #31
 80137aa:	62bb      	str	r3, [r7, #40]	@ 0x28
 80137ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80137ae:	441a      	add	r2, r3
 80137b0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80137b2:	ea4f 63f3 	mov.w	r3, r3, ror #27
 80137b6:	441a      	add	r2, r3
 80137b8:	4b31      	ldr	r3, [pc, #196]	@ (8013880 <mg_sha1_transform+0xea4>)
 80137ba:	4413      	add	r3, r2
 80137bc:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80137be:	4413      	add	r3, r2
 80137c0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80137c2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80137c4:	ea4f 03b3 	mov.w	r3, r3, ror #2
 80137c8:	65bb      	str	r3, [r7, #88]	@ 0x58
  R3(e, a, b, c, d, 56);
 80137ca:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80137cc:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80137ce:	431a      	orrs	r2, r3
 80137d0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80137d2:	401a      	ands	r2, r3
 80137d4:	6df9      	ldr	r1, [r7, #92]	@ 0x5c
 80137d6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80137d8:	400b      	ands	r3, r1
 80137da:	431a      	orrs	r2, r3
 80137dc:	6a39      	ldr	r1, [r7, #32]
 80137de:	68fb      	ldr	r3, [r7, #12]
 80137e0:	4059      	eors	r1, r3
 80137e2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80137e4:	4059      	eors	r1, r3
 80137e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80137e8:	404b      	eors	r3, r1
 80137ea:	ea4f 73f3 	mov.w	r3, r3, ror #31
 80137ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80137f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80137f2:	441a      	add	r2, r3
 80137f4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80137f6:	ea4f 63f3 	mov.w	r3, r3, ror #27
 80137fa:	441a      	add	r2, r3
 80137fc:	4b20      	ldr	r3, [pc, #128]	@ (8013880 <mg_sha1_transform+0xea4>)
 80137fe:	4413      	add	r3, r2
 8013800:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8013802:	4413      	add	r3, r2
 8013804:	653b      	str	r3, [r7, #80]	@ 0x50
 8013806:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8013808:	ea4f 03b3 	mov.w	r3, r3, ror #2
 801380c:	65fb      	str	r3, [r7, #92]	@ 0x5c
  R3(d, e, a, b, c, 57);
 801380e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8013810:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8013812:	431a      	orrs	r2, r3
 8013814:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8013816:	401a      	ands	r2, r3
 8013818:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 801381a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801381c:	400b      	ands	r3, r1
 801381e:	431a      	orrs	r2, r3
 8013820:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8013822:	693b      	ldr	r3, [r7, #16]
 8013824:	4059      	eors	r1, r3
 8013826:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013828:	4059      	eors	r1, r3
 801382a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801382c:	404b      	eors	r3, r1
 801382e:	ea4f 73f3 	mov.w	r3, r3, ror #31
 8013832:	633b      	str	r3, [r7, #48]	@ 0x30
 8013834:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013836:	441a      	add	r2, r3
 8013838:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801383a:	ea4f 63f3 	mov.w	r3, r3, ror #27
 801383e:	441a      	add	r2, r3
 8013840:	4b0f      	ldr	r3, [pc, #60]	@ (8013880 <mg_sha1_transform+0xea4>)
 8013842:	4413      	add	r3, r2
 8013844:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8013846:	4413      	add	r3, r2
 8013848:	657b      	str	r3, [r7, #84]	@ 0x54
 801384a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801384c:	ea4f 03b3 	mov.w	r3, r3, ror #2
 8013850:	64fb      	str	r3, [r7, #76]	@ 0x4c
  R3(c, d, e, a, b, 58);
 8013852:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8013854:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8013856:	431a      	orrs	r2, r3
 8013858:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801385a:	401a      	ands	r2, r3
 801385c:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 801385e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8013860:	400b      	ands	r3, r1
 8013862:	431a      	orrs	r2, r3
 8013864:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8013866:	697b      	ldr	r3, [r7, #20]
 8013868:	4059      	eors	r1, r3
 801386a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801386c:	4059      	eors	r1, r3
 801386e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013870:	404b      	eors	r3, r1
 8013872:	ea4f 73f3 	mov.w	r3, r3, ror #31
 8013876:	637b      	str	r3, [r7, #52]	@ 0x34
 8013878:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801387a:	441a      	add	r2, r3
 801387c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801387e:	e001      	b.n	8013884 <mg_sha1_transform+0xea8>
 8013880:	8f1bbcdc 	.word	0x8f1bbcdc
 8013884:	ea4f 63f3 	mov.w	r3, r3, ror #27
 8013888:	441a      	add	r2, r3
 801388a:	4ba9      	ldr	r3, [pc, #676]	@ (8013b30 <mg_sha1_transform+0x1154>)
 801388c:	4413      	add	r3, r2
 801388e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8013890:	4413      	add	r3, r2
 8013892:	65bb      	str	r3, [r7, #88]	@ 0x58
 8013894:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8013896:	ea4f 03b3 	mov.w	r3, r3, ror #2
 801389a:	653b      	str	r3, [r7, #80]	@ 0x50
  R3(b, c, d, e, a, 59);
 801389c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 801389e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80138a0:	431a      	orrs	r2, r3
 80138a2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80138a4:	401a      	ands	r2, r3
 80138a6:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80138a8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80138aa:	400b      	ands	r3, r1
 80138ac:	431a      	orrs	r2, r3
 80138ae:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80138b0:	69bb      	ldr	r3, [r7, #24]
 80138b2:	4059      	eors	r1, r3
 80138b4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80138b6:	4059      	eors	r1, r3
 80138b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80138ba:	404b      	eors	r3, r1
 80138bc:	ea4f 73f3 	mov.w	r3, r3, ror #31
 80138c0:	63bb      	str	r3, [r7, #56]	@ 0x38
 80138c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80138c4:	441a      	add	r2, r3
 80138c6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80138c8:	ea4f 63f3 	mov.w	r3, r3, ror #27
 80138cc:	441a      	add	r2, r3
 80138ce:	4b98      	ldr	r3, [pc, #608]	@ (8013b30 <mg_sha1_transform+0x1154>)
 80138d0:	4413      	add	r3, r2
 80138d2:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80138d4:	4413      	add	r3, r2
 80138d6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80138d8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80138da:	ea4f 03b3 	mov.w	r3, r3, ror #2
 80138de:	657b      	str	r3, [r7, #84]	@ 0x54
  R4(a, b, c, d, e, 60);
 80138e0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80138e2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80138e4:	405a      	eors	r2, r3
 80138e6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80138e8:	405a      	eors	r2, r3
 80138ea:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80138ec:	69fb      	ldr	r3, [r7, #28]
 80138ee:	4059      	eors	r1, r3
 80138f0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80138f2:	4059      	eors	r1, r3
 80138f4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80138f6:	404b      	eors	r3, r1
 80138f8:	ea4f 73f3 	mov.w	r3, r3, ror #31
 80138fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80138fe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8013900:	441a      	add	r2, r3
 8013902:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8013904:	ea4f 63f3 	mov.w	r3, r3, ror #27
 8013908:	441a      	add	r2, r3
 801390a:	4b8a      	ldr	r3, [pc, #552]	@ (8013b34 <mg_sha1_transform+0x1158>)
 801390c:	4413      	add	r3, r2
 801390e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8013910:	4413      	add	r3, r2
 8013912:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8013914:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8013916:	ea4f 03b3 	mov.w	r3, r3, ror #2
 801391a:	65bb      	str	r3, [r7, #88]	@ 0x58
  R4(e, a, b, c, d, 61);
 801391c:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 801391e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8013920:	405a      	eors	r2, r3
 8013922:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013924:	405a      	eors	r2, r3
 8013926:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8013928:	6a3b      	ldr	r3, [r7, #32]
 801392a:	4059      	eors	r1, r3
 801392c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801392e:	4059      	eors	r1, r3
 8013930:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8013932:	404b      	eors	r3, r1
 8013934:	ea4f 73f3 	mov.w	r3, r3, ror #31
 8013938:	643b      	str	r3, [r7, #64]	@ 0x40
 801393a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801393c:	441a      	add	r2, r3
 801393e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8013940:	ea4f 63f3 	mov.w	r3, r3, ror #27
 8013944:	441a      	add	r2, r3
 8013946:	4b7b      	ldr	r3, [pc, #492]	@ (8013b34 <mg_sha1_transform+0x1158>)
 8013948:	4413      	add	r3, r2
 801394a:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 801394c:	4413      	add	r3, r2
 801394e:	653b      	str	r3, [r7, #80]	@ 0x50
 8013950:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8013952:	ea4f 03b3 	mov.w	r3, r3, ror #2
 8013956:	65fb      	str	r3, [r7, #92]	@ 0x5c
  R4(d, e, a, b, c, 62);
 8013958:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 801395a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801395c:	405a      	eors	r2, r3
 801395e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8013960:	405a      	eors	r2, r3
 8013962:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8013964:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013966:	4059      	eors	r1, r3
 8013968:	68fb      	ldr	r3, [r7, #12]
 801396a:	4059      	eors	r1, r3
 801396c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801396e:	404b      	eors	r3, r1
 8013970:	ea4f 73f3 	mov.w	r3, r3, ror #31
 8013974:	647b      	str	r3, [r7, #68]	@ 0x44
 8013976:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8013978:	441a      	add	r2, r3
 801397a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801397c:	ea4f 63f3 	mov.w	r3, r3, ror #27
 8013980:	441a      	add	r2, r3
 8013982:	4b6c      	ldr	r3, [pc, #432]	@ (8013b34 <mg_sha1_transform+0x1158>)
 8013984:	4413      	add	r3, r2
 8013986:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8013988:	4413      	add	r3, r2
 801398a:	657b      	str	r3, [r7, #84]	@ 0x54
 801398c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801398e:	ea4f 03b3 	mov.w	r3, r3, ror #2
 8013992:	64fb      	str	r3, [r7, #76]	@ 0x4c
  R4(c, d, e, a, b, 63);
 8013994:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8013996:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8013998:	405a      	eors	r2, r3
 801399a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801399c:	405a      	eors	r2, r3
 801399e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80139a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80139a2:	4059      	eors	r1, r3
 80139a4:	693b      	ldr	r3, [r7, #16]
 80139a6:	4059      	eors	r1, r3
 80139a8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80139aa:	404b      	eors	r3, r1
 80139ac:	ea4f 73f3 	mov.w	r3, r3, ror #31
 80139b0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80139b2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80139b4:	441a      	add	r2, r3
 80139b6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80139b8:	ea4f 63f3 	mov.w	r3, r3, ror #27
 80139bc:	441a      	add	r2, r3
 80139be:	4b5d      	ldr	r3, [pc, #372]	@ (8013b34 <mg_sha1_transform+0x1158>)
 80139c0:	4413      	add	r3, r2
 80139c2:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80139c4:	4413      	add	r3, r2
 80139c6:	65bb      	str	r3, [r7, #88]	@ 0x58
 80139c8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80139ca:	ea4f 03b3 	mov.w	r3, r3, ror #2
 80139ce:	653b      	str	r3, [r7, #80]	@ 0x50
  R4(b, c, d, e, a, 64);
 80139d0:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80139d2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80139d4:	405a      	eors	r2, r3
 80139d6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80139d8:	405a      	eors	r2, r3
 80139da:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80139dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80139de:	4059      	eors	r1, r3
 80139e0:	697b      	ldr	r3, [r7, #20]
 80139e2:	4059      	eors	r1, r3
 80139e4:	68fb      	ldr	r3, [r7, #12]
 80139e6:	404b      	eors	r3, r1
 80139e8:	ea4f 73f3 	mov.w	r3, r3, ror #31
 80139ec:	60fb      	str	r3, [r7, #12]
 80139ee:	68fb      	ldr	r3, [r7, #12]
 80139f0:	441a      	add	r2, r3
 80139f2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80139f4:	ea4f 63f3 	mov.w	r3, r3, ror #27
 80139f8:	441a      	add	r2, r3
 80139fa:	4b4e      	ldr	r3, [pc, #312]	@ (8013b34 <mg_sha1_transform+0x1158>)
 80139fc:	4413      	add	r3, r2
 80139fe:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8013a00:	4413      	add	r3, r2
 8013a02:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8013a04:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013a06:	ea4f 03b3 	mov.w	r3, r3, ror #2
 8013a0a:	657b      	str	r3, [r7, #84]	@ 0x54
  R4(a, b, c, d, e, 65);
 8013a0c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8013a0e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013a10:	405a      	eors	r2, r3
 8013a12:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8013a14:	405a      	eors	r2, r3
 8013a16:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8013a18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013a1a:	4059      	eors	r1, r3
 8013a1c:	69bb      	ldr	r3, [r7, #24]
 8013a1e:	4059      	eors	r1, r3
 8013a20:	693b      	ldr	r3, [r7, #16]
 8013a22:	404b      	eors	r3, r1
 8013a24:	ea4f 73f3 	mov.w	r3, r3, ror #31
 8013a28:	613b      	str	r3, [r7, #16]
 8013a2a:	693b      	ldr	r3, [r7, #16]
 8013a2c:	441a      	add	r2, r3
 8013a2e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8013a30:	ea4f 63f3 	mov.w	r3, r3, ror #27
 8013a34:	441a      	add	r2, r3
 8013a36:	4b3f      	ldr	r3, [pc, #252]	@ (8013b34 <mg_sha1_transform+0x1158>)
 8013a38:	4413      	add	r3, r2
 8013a3a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8013a3c:	4413      	add	r3, r2
 8013a3e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8013a40:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8013a42:	ea4f 03b3 	mov.w	r3, r3, ror #2
 8013a46:	65bb      	str	r3, [r7, #88]	@ 0x58
  R4(e, a, b, c, d, 66);
 8013a48:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8013a4a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8013a4c:	405a      	eors	r2, r3
 8013a4e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013a50:	405a      	eors	r2, r3
 8013a52:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8013a54:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013a56:	4059      	eors	r1, r3
 8013a58:	69fb      	ldr	r3, [r7, #28]
 8013a5a:	4059      	eors	r1, r3
 8013a5c:	697b      	ldr	r3, [r7, #20]
 8013a5e:	404b      	eors	r3, r1
 8013a60:	ea4f 73f3 	mov.w	r3, r3, ror #31
 8013a64:	617b      	str	r3, [r7, #20]
 8013a66:	697b      	ldr	r3, [r7, #20]
 8013a68:	441a      	add	r2, r3
 8013a6a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8013a6c:	ea4f 63f3 	mov.w	r3, r3, ror #27
 8013a70:	441a      	add	r2, r3
 8013a72:	4b30      	ldr	r3, [pc, #192]	@ (8013b34 <mg_sha1_transform+0x1158>)
 8013a74:	4413      	add	r3, r2
 8013a76:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8013a78:	4413      	add	r3, r2
 8013a7a:	653b      	str	r3, [r7, #80]	@ 0x50
 8013a7c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8013a7e:	ea4f 03b3 	mov.w	r3, r3, ror #2
 8013a82:	65fb      	str	r3, [r7, #92]	@ 0x5c
  R4(d, e, a, b, c, 67);
 8013a84:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8013a86:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8013a88:	405a      	eors	r2, r3
 8013a8a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8013a8c:	405a      	eors	r2, r3
 8013a8e:	68f9      	ldr	r1, [r7, #12]
 8013a90:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013a92:	4059      	eors	r1, r3
 8013a94:	6a3b      	ldr	r3, [r7, #32]
 8013a96:	4059      	eors	r1, r3
 8013a98:	69bb      	ldr	r3, [r7, #24]
 8013a9a:	404b      	eors	r3, r1
 8013a9c:	ea4f 73f3 	mov.w	r3, r3, ror #31
 8013aa0:	61bb      	str	r3, [r7, #24]
 8013aa2:	69bb      	ldr	r3, [r7, #24]
 8013aa4:	441a      	add	r2, r3
 8013aa6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8013aa8:	ea4f 63f3 	mov.w	r3, r3, ror #27
 8013aac:	441a      	add	r2, r3
 8013aae:	4b21      	ldr	r3, [pc, #132]	@ (8013b34 <mg_sha1_transform+0x1158>)
 8013ab0:	4413      	add	r3, r2
 8013ab2:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8013ab4:	4413      	add	r3, r2
 8013ab6:	657b      	str	r3, [r7, #84]	@ 0x54
 8013ab8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8013aba:	ea4f 03b3 	mov.w	r3, r3, ror #2
 8013abe:	64fb      	str	r3, [r7, #76]	@ 0x4c
  R4(c, d, e, a, b, 68);
 8013ac0:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8013ac2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8013ac4:	405a      	eors	r2, r3
 8013ac6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8013ac8:	405a      	eors	r2, r3
 8013aca:	6939      	ldr	r1, [r7, #16]
 8013acc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8013ace:	4059      	eors	r1, r3
 8013ad0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013ad2:	4059      	eors	r1, r3
 8013ad4:	69fb      	ldr	r3, [r7, #28]
 8013ad6:	404b      	eors	r3, r1
 8013ad8:	ea4f 73f3 	mov.w	r3, r3, ror #31
 8013adc:	61fb      	str	r3, [r7, #28]
 8013ade:	69fb      	ldr	r3, [r7, #28]
 8013ae0:	441a      	add	r2, r3
 8013ae2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013ae4:	ea4f 63f3 	mov.w	r3, r3, ror #27
 8013ae8:	441a      	add	r2, r3
 8013aea:	4b12      	ldr	r3, [pc, #72]	@ (8013b34 <mg_sha1_transform+0x1158>)
 8013aec:	4413      	add	r3, r2
 8013aee:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8013af0:	4413      	add	r3, r2
 8013af2:	65bb      	str	r3, [r7, #88]	@ 0x58
 8013af4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8013af6:	ea4f 03b3 	mov.w	r3, r3, ror #2
 8013afa:	653b      	str	r3, [r7, #80]	@ 0x50
  R4(b, c, d, e, a, 69);
 8013afc:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8013afe:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8013b00:	405a      	eors	r2, r3
 8013b02:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8013b04:	405a      	eors	r2, r3
 8013b06:	6979      	ldr	r1, [r7, #20]
 8013b08:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8013b0a:	4059      	eors	r1, r3
 8013b0c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013b0e:	4059      	eors	r1, r3
 8013b10:	6a3b      	ldr	r3, [r7, #32]
 8013b12:	404b      	eors	r3, r1
 8013b14:	ea4f 73f3 	mov.w	r3, r3, ror #31
 8013b18:	623b      	str	r3, [r7, #32]
 8013b1a:	6a3b      	ldr	r3, [r7, #32]
 8013b1c:	441a      	add	r2, r3
 8013b1e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8013b20:	ea4f 63f3 	mov.w	r3, r3, ror #27
 8013b24:	441a      	add	r2, r3
 8013b26:	4b03      	ldr	r3, [pc, #12]	@ (8013b34 <mg_sha1_transform+0x1158>)
 8013b28:	4413      	add	r3, r2
 8013b2a:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8013b2c:	4413      	add	r3, r2
 8013b2e:	e003      	b.n	8013b38 <mg_sha1_transform+0x115c>
 8013b30:	8f1bbcdc 	.word	0x8f1bbcdc
 8013b34:	ca62c1d6 	.word	0xca62c1d6
 8013b38:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8013b3a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013b3c:	ea4f 03b3 	mov.w	r3, r3, ror #2
 8013b40:	657b      	str	r3, [r7, #84]	@ 0x54
  R4(a, b, c, d, e, 70);
 8013b42:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8013b44:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013b46:	405a      	eors	r2, r3
 8013b48:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8013b4a:	405a      	eors	r2, r3
 8013b4c:	69b9      	ldr	r1, [r7, #24]
 8013b4e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8013b50:	4059      	eors	r1, r3
 8013b52:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013b54:	4059      	eors	r1, r3
 8013b56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013b58:	404b      	eors	r3, r1
 8013b5a:	ea4f 73f3 	mov.w	r3, r3, ror #31
 8013b5e:	627b      	str	r3, [r7, #36]	@ 0x24
 8013b60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013b62:	441a      	add	r2, r3
 8013b64:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8013b66:	ea4f 63f3 	mov.w	r3, r3, ror #27
 8013b6a:	441a      	add	r2, r3
 8013b6c:	4ba7      	ldr	r3, [pc, #668]	@ (8013e0c <mg_sha1_transform+0x1430>)
 8013b6e:	4413      	add	r3, r2
 8013b70:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8013b72:	4413      	add	r3, r2
 8013b74:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8013b76:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8013b78:	ea4f 03b3 	mov.w	r3, r3, ror #2
 8013b7c:	65bb      	str	r3, [r7, #88]	@ 0x58
  R4(e, a, b, c, d, 71);
 8013b7e:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8013b80:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8013b82:	405a      	eors	r2, r3
 8013b84:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013b86:	405a      	eors	r2, r3
 8013b88:	69f9      	ldr	r1, [r7, #28]
 8013b8a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8013b8c:	4059      	eors	r1, r3
 8013b8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013b90:	4059      	eors	r1, r3
 8013b92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013b94:	404b      	eors	r3, r1
 8013b96:	ea4f 73f3 	mov.w	r3, r3, ror #31
 8013b9a:	62bb      	str	r3, [r7, #40]	@ 0x28
 8013b9c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013b9e:	441a      	add	r2, r3
 8013ba0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8013ba2:	ea4f 63f3 	mov.w	r3, r3, ror #27
 8013ba6:	441a      	add	r2, r3
 8013ba8:	4b98      	ldr	r3, [pc, #608]	@ (8013e0c <mg_sha1_transform+0x1430>)
 8013baa:	4413      	add	r3, r2
 8013bac:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8013bae:	4413      	add	r3, r2
 8013bb0:	653b      	str	r3, [r7, #80]	@ 0x50
 8013bb2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8013bb4:	ea4f 03b3 	mov.w	r3, r3, ror #2
 8013bb8:	65fb      	str	r3, [r7, #92]	@ 0x5c
  R4(d, e, a, b, c, 72);
 8013bba:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8013bbc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8013bbe:	405a      	eors	r2, r3
 8013bc0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8013bc2:	405a      	eors	r2, r3
 8013bc4:	6a39      	ldr	r1, [r7, #32]
 8013bc6:	68fb      	ldr	r3, [r7, #12]
 8013bc8:	4059      	eors	r1, r3
 8013bca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013bcc:	4059      	eors	r1, r3
 8013bce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013bd0:	404b      	eors	r3, r1
 8013bd2:	ea4f 73f3 	mov.w	r3, r3, ror #31
 8013bd6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8013bd8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013bda:	441a      	add	r2, r3
 8013bdc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8013bde:	ea4f 63f3 	mov.w	r3, r3, ror #27
 8013be2:	441a      	add	r2, r3
 8013be4:	4b89      	ldr	r3, [pc, #548]	@ (8013e0c <mg_sha1_transform+0x1430>)
 8013be6:	4413      	add	r3, r2
 8013be8:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8013bea:	4413      	add	r3, r2
 8013bec:	657b      	str	r3, [r7, #84]	@ 0x54
 8013bee:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8013bf0:	ea4f 03b3 	mov.w	r3, r3, ror #2
 8013bf4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  R4(c, d, e, a, b, 73);
 8013bf6:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8013bf8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8013bfa:	405a      	eors	r2, r3
 8013bfc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8013bfe:	405a      	eors	r2, r3
 8013c00:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8013c02:	693b      	ldr	r3, [r7, #16]
 8013c04:	4059      	eors	r1, r3
 8013c06:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013c08:	4059      	eors	r1, r3
 8013c0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013c0c:	404b      	eors	r3, r1
 8013c0e:	ea4f 73f3 	mov.w	r3, r3, ror #31
 8013c12:	633b      	str	r3, [r7, #48]	@ 0x30
 8013c14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013c16:	441a      	add	r2, r3
 8013c18:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013c1a:	ea4f 63f3 	mov.w	r3, r3, ror #27
 8013c1e:	441a      	add	r2, r3
 8013c20:	4b7a      	ldr	r3, [pc, #488]	@ (8013e0c <mg_sha1_transform+0x1430>)
 8013c22:	4413      	add	r3, r2
 8013c24:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8013c26:	4413      	add	r3, r2
 8013c28:	65bb      	str	r3, [r7, #88]	@ 0x58
 8013c2a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8013c2c:	ea4f 03b3 	mov.w	r3, r3, ror #2
 8013c30:	653b      	str	r3, [r7, #80]	@ 0x50
  R4(b, c, d, e, a, 74);
 8013c32:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8013c34:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8013c36:	405a      	eors	r2, r3
 8013c38:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8013c3a:	405a      	eors	r2, r3
 8013c3c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8013c3e:	697b      	ldr	r3, [r7, #20]
 8013c40:	4059      	eors	r1, r3
 8013c42:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8013c44:	4059      	eors	r1, r3
 8013c46:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013c48:	404b      	eors	r3, r1
 8013c4a:	ea4f 73f3 	mov.w	r3, r3, ror #31
 8013c4e:	637b      	str	r3, [r7, #52]	@ 0x34
 8013c50:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013c52:	441a      	add	r2, r3
 8013c54:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8013c56:	ea4f 63f3 	mov.w	r3, r3, ror #27
 8013c5a:	441a      	add	r2, r3
 8013c5c:	4b6b      	ldr	r3, [pc, #428]	@ (8013e0c <mg_sha1_transform+0x1430>)
 8013c5e:	4413      	add	r3, r2
 8013c60:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8013c62:	4413      	add	r3, r2
 8013c64:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8013c66:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013c68:	ea4f 03b3 	mov.w	r3, r3, ror #2
 8013c6c:	657b      	str	r3, [r7, #84]	@ 0x54
  R4(a, b, c, d, e, 75);
 8013c6e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8013c70:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013c72:	405a      	eors	r2, r3
 8013c74:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8013c76:	405a      	eors	r2, r3
 8013c78:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8013c7a:	69bb      	ldr	r3, [r7, #24]
 8013c7c:	4059      	eors	r1, r3
 8013c7e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8013c80:	4059      	eors	r1, r3
 8013c82:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013c84:	404b      	eors	r3, r1
 8013c86:	ea4f 73f3 	mov.w	r3, r3, ror #31
 8013c8a:	63bb      	str	r3, [r7, #56]	@ 0x38
 8013c8c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013c8e:	441a      	add	r2, r3
 8013c90:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8013c92:	ea4f 63f3 	mov.w	r3, r3, ror #27
 8013c96:	441a      	add	r2, r3
 8013c98:	4b5c      	ldr	r3, [pc, #368]	@ (8013e0c <mg_sha1_transform+0x1430>)
 8013c9a:	4413      	add	r3, r2
 8013c9c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8013c9e:	4413      	add	r3, r2
 8013ca0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8013ca2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8013ca4:	ea4f 03b3 	mov.w	r3, r3, ror #2
 8013ca8:	65bb      	str	r3, [r7, #88]	@ 0x58
  R4(e, a, b, c, d, 76);
 8013caa:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8013cac:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8013cae:	405a      	eors	r2, r3
 8013cb0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013cb2:	405a      	eors	r2, r3
 8013cb4:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8013cb6:	69fb      	ldr	r3, [r7, #28]
 8013cb8:	4059      	eors	r1, r3
 8013cba:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8013cbc:	4059      	eors	r1, r3
 8013cbe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8013cc0:	404b      	eors	r3, r1
 8013cc2:	ea4f 73f3 	mov.w	r3, r3, ror #31
 8013cc6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8013cc8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8013cca:	441a      	add	r2, r3
 8013ccc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8013cce:	ea4f 63f3 	mov.w	r3, r3, ror #27
 8013cd2:	441a      	add	r2, r3
 8013cd4:	4b4d      	ldr	r3, [pc, #308]	@ (8013e0c <mg_sha1_transform+0x1430>)
 8013cd6:	4413      	add	r3, r2
 8013cd8:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8013cda:	4413      	add	r3, r2
 8013cdc:	653b      	str	r3, [r7, #80]	@ 0x50
 8013cde:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8013ce0:	ea4f 03b3 	mov.w	r3, r3, ror #2
 8013ce4:	65fb      	str	r3, [r7, #92]	@ 0x5c
  R4(d, e, a, b, c, 77);
 8013ce6:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8013ce8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8013cea:	405a      	eors	r2, r3
 8013cec:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8013cee:	405a      	eors	r2, r3
 8013cf0:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8013cf2:	6a3b      	ldr	r3, [r7, #32]
 8013cf4:	4059      	eors	r1, r3
 8013cf6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8013cf8:	4059      	eors	r1, r3
 8013cfa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8013cfc:	404b      	eors	r3, r1
 8013cfe:	ea4f 73f3 	mov.w	r3, r3, ror #31
 8013d02:	643b      	str	r3, [r7, #64]	@ 0x40
 8013d04:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8013d06:	441a      	add	r2, r3
 8013d08:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8013d0a:	ea4f 63f3 	mov.w	r3, r3, ror #27
 8013d0e:	441a      	add	r2, r3
 8013d10:	4b3e      	ldr	r3, [pc, #248]	@ (8013e0c <mg_sha1_transform+0x1430>)
 8013d12:	4413      	add	r3, r2
 8013d14:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8013d16:	4413      	add	r3, r2
 8013d18:	657b      	str	r3, [r7, #84]	@ 0x54
 8013d1a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8013d1c:	ea4f 03b3 	mov.w	r3, r3, ror #2
 8013d20:	64fb      	str	r3, [r7, #76]	@ 0x4c
  R4(c, d, e, a, b, 78);
 8013d22:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8013d24:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8013d26:	405a      	eors	r2, r3
 8013d28:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8013d2a:	405a      	eors	r2, r3
 8013d2c:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8013d2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013d30:	4059      	eors	r1, r3
 8013d32:	68fb      	ldr	r3, [r7, #12]
 8013d34:	4059      	eors	r1, r3
 8013d36:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8013d38:	404b      	eors	r3, r1
 8013d3a:	ea4f 73f3 	mov.w	r3, r3, ror #31
 8013d3e:	647b      	str	r3, [r7, #68]	@ 0x44
 8013d40:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8013d42:	441a      	add	r2, r3
 8013d44:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013d46:	ea4f 63f3 	mov.w	r3, r3, ror #27
 8013d4a:	441a      	add	r2, r3
 8013d4c:	4b2f      	ldr	r3, [pc, #188]	@ (8013e0c <mg_sha1_transform+0x1430>)
 8013d4e:	4413      	add	r3, r2
 8013d50:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8013d52:	4413      	add	r3, r2
 8013d54:	65bb      	str	r3, [r7, #88]	@ 0x58
 8013d56:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8013d58:	ea4f 03b3 	mov.w	r3, r3, ror #2
 8013d5c:	653b      	str	r3, [r7, #80]	@ 0x50
  R4(b, c, d, e, a, 79);
 8013d5e:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8013d60:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8013d62:	405a      	eors	r2, r3
 8013d64:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8013d66:	405a      	eors	r2, r3
 8013d68:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8013d6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013d6c:	4059      	eors	r1, r3
 8013d6e:	693b      	ldr	r3, [r7, #16]
 8013d70:	4059      	eors	r1, r3
 8013d72:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8013d74:	404b      	eors	r3, r1
 8013d76:	ea4f 73f3 	mov.w	r3, r3, ror #31
 8013d7a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8013d7c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8013d7e:	441a      	add	r2, r3
 8013d80:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8013d82:	ea4f 63f3 	mov.w	r3, r3, ror #27
 8013d86:	441a      	add	r2, r3
 8013d88:	4b20      	ldr	r3, [pc, #128]	@ (8013e0c <mg_sha1_transform+0x1430>)
 8013d8a:	4413      	add	r3, r2
 8013d8c:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8013d8e:	4413      	add	r3, r2
 8013d90:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8013d92:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013d94:	ea4f 03b3 	mov.w	r3, r3, ror #2
 8013d98:	657b      	str	r3, [r7, #84]	@ 0x54
  state[0] += a;
 8013d9a:	687b      	ldr	r3, [r7, #4]
 8013d9c:	681a      	ldr	r2, [r3, #0]
 8013d9e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8013da0:	441a      	add	r2, r3
 8013da2:	687b      	ldr	r3, [r7, #4]
 8013da4:	601a      	str	r2, [r3, #0]
  state[1] += b;
 8013da6:	687b      	ldr	r3, [r7, #4]
 8013da8:	3304      	adds	r3, #4
 8013daa:	6819      	ldr	r1, [r3, #0]
 8013dac:	687b      	ldr	r3, [r7, #4]
 8013dae:	3304      	adds	r3, #4
 8013db0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8013db2:	440a      	add	r2, r1
 8013db4:	601a      	str	r2, [r3, #0]
  state[2] += c;
 8013db6:	687b      	ldr	r3, [r7, #4]
 8013db8:	3308      	adds	r3, #8
 8013dba:	6819      	ldr	r1, [r3, #0]
 8013dbc:	687b      	ldr	r3, [r7, #4]
 8013dbe:	3308      	adds	r3, #8
 8013dc0:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8013dc2:	440a      	add	r2, r1
 8013dc4:	601a      	str	r2, [r3, #0]
  state[3] += d;
 8013dc6:	687b      	ldr	r3, [r7, #4]
 8013dc8:	330c      	adds	r3, #12
 8013dca:	6819      	ldr	r1, [r3, #0]
 8013dcc:	687b      	ldr	r3, [r7, #4]
 8013dce:	330c      	adds	r3, #12
 8013dd0:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8013dd2:	440a      	add	r2, r1
 8013dd4:	601a      	str	r2, [r3, #0]
  state[4] += e;
 8013dd6:	687b      	ldr	r3, [r7, #4]
 8013dd8:	3310      	adds	r3, #16
 8013dda:	6819      	ldr	r1, [r3, #0]
 8013ddc:	687b      	ldr	r3, [r7, #4]
 8013dde:	3310      	adds	r3, #16
 8013de0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8013de2:	440a      	add	r2, r1
 8013de4:	601a      	str	r2, [r3, #0]
  /* Erase working structures. The order of operations is important,
   * used to ensure that compiler doesn't optimize those out. */
  memset(block, 0, sizeof(block));
 8013de6:	f107 030c 	add.w	r3, r7, #12
 8013dea:	2240      	movs	r2, #64	@ 0x40
 8013dec:	2100      	movs	r1, #0
 8013dee:	4618      	mov	r0, r3
 8013df0:	f010 fb4c 	bl	802448c <memset>
  a = b = c = d = e = 0;
 8013df4:	2300      	movs	r3, #0
 8013df6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8013df8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8013dfa:	653b      	str	r3, [r7, #80]	@ 0x50
 8013dfc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8013dfe:	657b      	str	r3, [r7, #84]	@ 0x54
 8013e00:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013e02:	65bb      	str	r3, [r7, #88]	@ 0x58
 8013e04:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8013e06:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8013e08:	e002      	b.n	8013e10 <mg_sha1_transform+0x1434>
 8013e0a:	bf00      	nop
 8013e0c:	ca62c1d6 	.word	0xca62c1d6
  (void) a;
  (void) b;
  (void) c;
  (void) d;
  (void) e;
}
 8013e10:	bf00      	nop
 8013e12:	3764      	adds	r7, #100	@ 0x64
 8013e14:	46bd      	mov	sp, r7
 8013e16:	bd90      	pop	{r4, r7, pc}

08013e18 <mg_sha1_init>:

void mg_sha1_init(mg_sha1_ctx *context) {
 8013e18:	b480      	push	{r7}
 8013e1a:	b083      	sub	sp, #12
 8013e1c:	af00      	add	r7, sp, #0
 8013e1e:	6078      	str	r0, [r7, #4]
  context->state[0] = 0x67452301;
 8013e20:	687b      	ldr	r3, [r7, #4]
 8013e22:	4a0d      	ldr	r2, [pc, #52]	@ (8013e58 <mg_sha1_init+0x40>)
 8013e24:	601a      	str	r2, [r3, #0]
  context->state[1] = 0xEFCDAB89;
 8013e26:	687b      	ldr	r3, [r7, #4]
 8013e28:	4a0c      	ldr	r2, [pc, #48]	@ (8013e5c <mg_sha1_init+0x44>)
 8013e2a:	605a      	str	r2, [r3, #4]
  context->state[2] = 0x98BADCFE;
 8013e2c:	687b      	ldr	r3, [r7, #4]
 8013e2e:	4a0c      	ldr	r2, [pc, #48]	@ (8013e60 <mg_sha1_init+0x48>)
 8013e30:	609a      	str	r2, [r3, #8]
  context->state[3] = 0x10325476;
 8013e32:	687b      	ldr	r3, [r7, #4]
 8013e34:	4a0b      	ldr	r2, [pc, #44]	@ (8013e64 <mg_sha1_init+0x4c>)
 8013e36:	60da      	str	r2, [r3, #12]
  context->state[4] = 0xC3D2E1F0;
 8013e38:	687b      	ldr	r3, [r7, #4]
 8013e3a:	4a0b      	ldr	r2, [pc, #44]	@ (8013e68 <mg_sha1_init+0x50>)
 8013e3c:	611a      	str	r2, [r3, #16]
  context->count[0] = context->count[1] = 0;
 8013e3e:	687b      	ldr	r3, [r7, #4]
 8013e40:	2200      	movs	r2, #0
 8013e42:	619a      	str	r2, [r3, #24]
 8013e44:	687b      	ldr	r3, [r7, #4]
 8013e46:	699a      	ldr	r2, [r3, #24]
 8013e48:	687b      	ldr	r3, [r7, #4]
 8013e4a:	615a      	str	r2, [r3, #20]
}
 8013e4c:	bf00      	nop
 8013e4e:	370c      	adds	r7, #12
 8013e50:	46bd      	mov	sp, r7
 8013e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e56:	4770      	bx	lr
 8013e58:	67452301 	.word	0x67452301
 8013e5c:	efcdab89 	.word	0xefcdab89
 8013e60:	98badcfe 	.word	0x98badcfe
 8013e64:	10325476 	.word	0x10325476
 8013e68:	c3d2e1f0 	.word	0xc3d2e1f0

08013e6c <mg_sha1_update>:

void mg_sha1_update(mg_sha1_ctx *context, const unsigned char *data,
                    size_t len) {
 8013e6c:	b580      	push	{r7, lr}
 8013e6e:	b086      	sub	sp, #24
 8013e70:	af00      	add	r7, sp, #0
 8013e72:	60f8      	str	r0, [r7, #12]
 8013e74:	60b9      	str	r1, [r7, #8]
 8013e76:	607a      	str	r2, [r7, #4]
  size_t i, j;

  j = context->count[0];
 8013e78:	68fb      	ldr	r3, [r7, #12]
 8013e7a:	695b      	ldr	r3, [r3, #20]
 8013e7c:	613b      	str	r3, [r7, #16]
  if ((context->count[0] += (uint32_t) len << 3) < j) context->count[1]++;
 8013e7e:	68fb      	ldr	r3, [r7, #12]
 8013e80:	695a      	ldr	r2, [r3, #20]
 8013e82:	687b      	ldr	r3, [r7, #4]
 8013e84:	00db      	lsls	r3, r3, #3
 8013e86:	441a      	add	r2, r3
 8013e88:	68fb      	ldr	r3, [r7, #12]
 8013e8a:	615a      	str	r2, [r3, #20]
 8013e8c:	68fb      	ldr	r3, [r7, #12]
 8013e8e:	695b      	ldr	r3, [r3, #20]
 8013e90:	693a      	ldr	r2, [r7, #16]
 8013e92:	429a      	cmp	r2, r3
 8013e94:	d904      	bls.n	8013ea0 <mg_sha1_update+0x34>
 8013e96:	68fb      	ldr	r3, [r7, #12]
 8013e98:	699b      	ldr	r3, [r3, #24]
 8013e9a:	1c5a      	adds	r2, r3, #1
 8013e9c:	68fb      	ldr	r3, [r7, #12]
 8013e9e:	619a      	str	r2, [r3, #24]
  context->count[1] += (uint32_t) (len >> 29);
 8013ea0:	68fb      	ldr	r3, [r7, #12]
 8013ea2:	699a      	ldr	r2, [r3, #24]
 8013ea4:	687b      	ldr	r3, [r7, #4]
 8013ea6:	0f5b      	lsrs	r3, r3, #29
 8013ea8:	441a      	add	r2, r3
 8013eaa:	68fb      	ldr	r3, [r7, #12]
 8013eac:	619a      	str	r2, [r3, #24]
  j = (j >> 3) & 63;
 8013eae:	693b      	ldr	r3, [r7, #16]
 8013eb0:	08db      	lsrs	r3, r3, #3
 8013eb2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8013eb6:	613b      	str	r3, [r7, #16]
  if ((j + len) > 63) {
 8013eb8:	693a      	ldr	r2, [r7, #16]
 8013eba:	687b      	ldr	r3, [r7, #4]
 8013ebc:	4413      	add	r3, r2
 8013ebe:	2b3f      	cmp	r3, #63	@ 0x3f
 8013ec0:	d926      	bls.n	8013f10 <mg_sha1_update+0xa4>
    memcpy(&context->buffer[j], data, (i = 64 - j));
 8013ec2:	693b      	ldr	r3, [r7, #16]
 8013ec4:	3318      	adds	r3, #24
 8013ec6:	68fa      	ldr	r2, [r7, #12]
 8013ec8:	4413      	add	r3, r2
 8013eca:	1d18      	adds	r0, r3, #4
 8013ecc:	693b      	ldr	r3, [r7, #16]
 8013ece:	f1c3 0340 	rsb	r3, r3, #64	@ 0x40
 8013ed2:	617b      	str	r3, [r7, #20]
 8013ed4:	697a      	ldr	r2, [r7, #20]
 8013ed6:	68b9      	ldr	r1, [r7, #8]
 8013ed8:	f010 fc55 	bl	8024786 <memcpy>
    mg_sha1_transform(context->state, context->buffer);
 8013edc:	68fa      	ldr	r2, [r7, #12]
 8013ede:	68fb      	ldr	r3, [r7, #12]
 8013ee0:	331c      	adds	r3, #28
 8013ee2:	4619      	mov	r1, r3
 8013ee4:	4610      	mov	r0, r2
 8013ee6:	f7fe fd79 	bl	80129dc <mg_sha1_transform>
    for (; i + 63 < len; i += 64) {
 8013eea:	e009      	b.n	8013f00 <mg_sha1_update+0x94>
      mg_sha1_transform(context->state, &data[i]);
 8013eec:	68f8      	ldr	r0, [r7, #12]
 8013eee:	68ba      	ldr	r2, [r7, #8]
 8013ef0:	697b      	ldr	r3, [r7, #20]
 8013ef2:	4413      	add	r3, r2
 8013ef4:	4619      	mov	r1, r3
 8013ef6:	f7fe fd71 	bl	80129dc <mg_sha1_transform>
    for (; i + 63 < len; i += 64) {
 8013efa:	697b      	ldr	r3, [r7, #20]
 8013efc:	3340      	adds	r3, #64	@ 0x40
 8013efe:	617b      	str	r3, [r7, #20]
 8013f00:	697b      	ldr	r3, [r7, #20]
 8013f02:	333f      	adds	r3, #63	@ 0x3f
 8013f04:	687a      	ldr	r2, [r7, #4]
 8013f06:	429a      	cmp	r2, r3
 8013f08:	d8f0      	bhi.n	8013eec <mg_sha1_update+0x80>
    }
    j = 0;
 8013f0a:	2300      	movs	r3, #0
 8013f0c:	613b      	str	r3, [r7, #16]
 8013f0e:	e001      	b.n	8013f14 <mg_sha1_update+0xa8>
  } else
    i = 0;
 8013f10:	2300      	movs	r3, #0
 8013f12:	617b      	str	r3, [r7, #20]
  memcpy(&context->buffer[j], &data[i], len - i);
 8013f14:	693b      	ldr	r3, [r7, #16]
 8013f16:	3318      	adds	r3, #24
 8013f18:	68fa      	ldr	r2, [r7, #12]
 8013f1a:	4413      	add	r3, r2
 8013f1c:	1d18      	adds	r0, r3, #4
 8013f1e:	68ba      	ldr	r2, [r7, #8]
 8013f20:	697b      	ldr	r3, [r7, #20]
 8013f22:	18d1      	adds	r1, r2, r3
 8013f24:	687a      	ldr	r2, [r7, #4]
 8013f26:	697b      	ldr	r3, [r7, #20]
 8013f28:	1ad3      	subs	r3, r2, r3
 8013f2a:	461a      	mov	r2, r3
 8013f2c:	f010 fc2b 	bl	8024786 <memcpy>
}
 8013f30:	bf00      	nop
 8013f32:	3718      	adds	r7, #24
 8013f34:	46bd      	mov	sp, r7
 8013f36:	bd80      	pop	{r7, pc}

08013f38 <mg_sha1_final>:

void mg_sha1_final(unsigned char digest[20], mg_sha1_ctx *context) {
 8013f38:	b580      	push	{r7, lr}
 8013f3a:	b086      	sub	sp, #24
 8013f3c:	af00      	add	r7, sp, #0
 8013f3e:	6078      	str	r0, [r7, #4]
 8013f40:	6039      	str	r1, [r7, #0]
  unsigned i;
  unsigned char finalcount[8], c;

  for (i = 0; i < 8; i++) {
 8013f42:	2300      	movs	r3, #0
 8013f44:	617b      	str	r3, [r7, #20]
 8013f46:	e01b      	b.n	8013f80 <mg_sha1_final+0x48>
    finalcount[i] = (unsigned char) ((context->count[(i >= 4 ? 0 : 1)] >>
 8013f48:	697b      	ldr	r3, [r7, #20]
 8013f4a:	2b03      	cmp	r3, #3
 8013f4c:	bf94      	ite	ls
 8013f4e:	2301      	movls	r3, #1
 8013f50:	2300      	movhi	r3, #0
 8013f52:	b2db      	uxtb	r3, r3
 8013f54:	683a      	ldr	r2, [r7, #0]
 8013f56:	3304      	adds	r3, #4
 8013f58:	009b      	lsls	r3, r3, #2
 8013f5a:	4413      	add	r3, r2
 8013f5c:	685a      	ldr	r2, [r3, #4]
                                      ((3 - (i & 3)) * 8)) &
 8013f5e:	697b      	ldr	r3, [r7, #20]
 8013f60:	43db      	mvns	r3, r3
 8013f62:	f003 0303 	and.w	r3, r3, #3
 8013f66:	00db      	lsls	r3, r3, #3
    finalcount[i] = (unsigned char) ((context->count[(i >= 4 ? 0 : 1)] >>
 8013f68:	fa22 f303 	lsr.w	r3, r2, r3
 8013f6c:	b2d9      	uxtb	r1, r3
 8013f6e:	f107 020c 	add.w	r2, r7, #12
 8013f72:	697b      	ldr	r3, [r7, #20]
 8013f74:	4413      	add	r3, r2
 8013f76:	460a      	mov	r2, r1
 8013f78:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < 8; i++) {
 8013f7a:	697b      	ldr	r3, [r7, #20]
 8013f7c:	3301      	adds	r3, #1
 8013f7e:	617b      	str	r3, [r7, #20]
 8013f80:	697b      	ldr	r3, [r7, #20]
 8013f82:	2b07      	cmp	r3, #7
 8013f84:	d9e0      	bls.n	8013f48 <mg_sha1_final+0x10>
                                     255);
  }
  c = 0200;
 8013f86:	2380      	movs	r3, #128	@ 0x80
 8013f88:	72fb      	strb	r3, [r7, #11]
  mg_sha1_update(context, &c, 1);
 8013f8a:	f107 030b 	add.w	r3, r7, #11
 8013f8e:	2201      	movs	r2, #1
 8013f90:	4619      	mov	r1, r3
 8013f92:	6838      	ldr	r0, [r7, #0]
 8013f94:	f7ff ff6a 	bl	8013e6c <mg_sha1_update>
  while ((context->count[0] & 504) != 448) {
 8013f98:	e008      	b.n	8013fac <mg_sha1_final+0x74>
    c = 0000;
 8013f9a:	2300      	movs	r3, #0
 8013f9c:	72fb      	strb	r3, [r7, #11]
    mg_sha1_update(context, &c, 1);
 8013f9e:	f107 030b 	add.w	r3, r7, #11
 8013fa2:	2201      	movs	r2, #1
 8013fa4:	4619      	mov	r1, r3
 8013fa6:	6838      	ldr	r0, [r7, #0]
 8013fa8:	f7ff ff60 	bl	8013e6c <mg_sha1_update>
  while ((context->count[0] & 504) != 448) {
 8013fac:	683b      	ldr	r3, [r7, #0]
 8013fae:	695b      	ldr	r3, [r3, #20]
 8013fb0:	f403 73fc 	and.w	r3, r3, #504	@ 0x1f8
 8013fb4:	f5b3 7fe0 	cmp.w	r3, #448	@ 0x1c0
 8013fb8:	d1ef      	bne.n	8013f9a <mg_sha1_final+0x62>
  }
  mg_sha1_update(context, finalcount, 8);
 8013fba:	f107 030c 	add.w	r3, r7, #12
 8013fbe:	2208      	movs	r2, #8
 8013fc0:	4619      	mov	r1, r3
 8013fc2:	6838      	ldr	r0, [r7, #0]
 8013fc4:	f7ff ff52 	bl	8013e6c <mg_sha1_update>
  for (i = 0; i < 20; i++) {
 8013fc8:	2300      	movs	r3, #0
 8013fca:	617b      	str	r3, [r7, #20]
 8013fcc:	e013      	b.n	8013ff6 <mg_sha1_final+0xbe>
    digest[i] =
        (unsigned char) ((context->state[i >> 2] >> ((3 - (i & 3)) * 8)) & 255);
 8013fce:	697b      	ldr	r3, [r7, #20]
 8013fd0:	089a      	lsrs	r2, r3, #2
 8013fd2:	683b      	ldr	r3, [r7, #0]
 8013fd4:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8013fd8:	697b      	ldr	r3, [r7, #20]
 8013fda:	43db      	mvns	r3, r3
 8013fdc:	f003 0303 	and.w	r3, r3, #3
 8013fe0:	00db      	lsls	r3, r3, #3
 8013fe2:	fa22 f103 	lsr.w	r1, r2, r3
    digest[i] =
 8013fe6:	687a      	ldr	r2, [r7, #4]
 8013fe8:	697b      	ldr	r3, [r7, #20]
 8013fea:	4413      	add	r3, r2
        (unsigned char) ((context->state[i >> 2] >> ((3 - (i & 3)) * 8)) & 255);
 8013fec:	b2ca      	uxtb	r2, r1
    digest[i] =
 8013fee:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < 20; i++) {
 8013ff0:	697b      	ldr	r3, [r7, #20]
 8013ff2:	3301      	adds	r3, #1
 8013ff4:	617b      	str	r3, [r7, #20]
 8013ff6:	697b      	ldr	r3, [r7, #20]
 8013ff8:	2b13      	cmp	r3, #19
 8013ffa:	d9e8      	bls.n	8013fce <mg_sha1_final+0x96>
  }
  memset(context, '\0', sizeof(*context));
 8013ffc:	225c      	movs	r2, #92	@ 0x5c
 8013ffe:	2100      	movs	r1, #0
 8014000:	6838      	ldr	r0, [r7, #0]
 8014002:	f010 fa43 	bl	802448c <memset>
  memset(&finalcount, '\0', sizeof(finalcount));
 8014006:	f107 030c 	add.w	r3, r7, #12
 801400a:	2208      	movs	r2, #8
 801400c:	2100      	movs	r1, #0
 801400e:	4618      	mov	r0, r3
 8014010:	f010 fa3c 	bl	802448c <memset>
}
 8014014:	bf00      	nop
 8014016:	3718      	adds	r7, #24
 8014018:	46bd      	mov	sp, r7
 801401a:	bd80      	pop	{r7, pc}

0801401c <mg_sha256_init>:
    0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,
    0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a,
    0x5b9cca4f, 0x682e6ff3, 0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208,
    0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2};

void mg_sha256_init(mg_sha256_ctx *ctx) {
 801401c:	b480      	push	{r7}
 801401e:	b083      	sub	sp, #12
 8014020:	af00      	add	r7, sp, #0
 8014022:	6078      	str	r0, [r7, #4]
  ctx->len = 0;
 8014024:	687b      	ldr	r3, [r7, #4]
 8014026:	2200      	movs	r2, #0
 8014028:	629a      	str	r2, [r3, #40]	@ 0x28
  ctx->bits = 0;
 801402a:	6879      	ldr	r1, [r7, #4]
 801402c:	f04f 0200 	mov.w	r2, #0
 8014030:	f04f 0300 	mov.w	r3, #0
 8014034:	e9c1 2308 	strd	r2, r3, [r1, #32]
  ctx->state[0] = 0x6a09e667;
 8014038:	687b      	ldr	r3, [r7, #4]
 801403a:	4a0e      	ldr	r2, [pc, #56]	@ (8014074 <mg_sha256_init+0x58>)
 801403c:	601a      	str	r2, [r3, #0]
  ctx->state[1] = 0xbb67ae85;
 801403e:	687b      	ldr	r3, [r7, #4]
 8014040:	4a0d      	ldr	r2, [pc, #52]	@ (8014078 <mg_sha256_init+0x5c>)
 8014042:	605a      	str	r2, [r3, #4]
  ctx->state[2] = 0x3c6ef372;
 8014044:	687b      	ldr	r3, [r7, #4]
 8014046:	4a0d      	ldr	r2, [pc, #52]	@ (801407c <mg_sha256_init+0x60>)
 8014048:	609a      	str	r2, [r3, #8]
  ctx->state[3] = 0xa54ff53a;
 801404a:	687b      	ldr	r3, [r7, #4]
 801404c:	4a0c      	ldr	r2, [pc, #48]	@ (8014080 <mg_sha256_init+0x64>)
 801404e:	60da      	str	r2, [r3, #12]
  ctx->state[4] = 0x510e527f;
 8014050:	687b      	ldr	r3, [r7, #4]
 8014052:	4a0c      	ldr	r2, [pc, #48]	@ (8014084 <mg_sha256_init+0x68>)
 8014054:	611a      	str	r2, [r3, #16]
  ctx->state[5] = 0x9b05688c;
 8014056:	687b      	ldr	r3, [r7, #4]
 8014058:	4a0b      	ldr	r2, [pc, #44]	@ (8014088 <mg_sha256_init+0x6c>)
 801405a:	615a      	str	r2, [r3, #20]
  ctx->state[6] = 0x1f83d9ab;
 801405c:	687b      	ldr	r3, [r7, #4]
 801405e:	4a0b      	ldr	r2, [pc, #44]	@ (801408c <mg_sha256_init+0x70>)
 8014060:	619a      	str	r2, [r3, #24]
  ctx->state[7] = 0x5be0cd19;
 8014062:	687b      	ldr	r3, [r7, #4]
 8014064:	4a0a      	ldr	r2, [pc, #40]	@ (8014090 <mg_sha256_init+0x74>)
 8014066:	61da      	str	r2, [r3, #28]
}
 8014068:	bf00      	nop
 801406a:	370c      	adds	r7, #12
 801406c:	46bd      	mov	sp, r7
 801406e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014072:	4770      	bx	lr
 8014074:	6a09e667 	.word	0x6a09e667
 8014078:	bb67ae85 	.word	0xbb67ae85
 801407c:	3c6ef372 	.word	0x3c6ef372
 8014080:	a54ff53a 	.word	0xa54ff53a
 8014084:	510e527f 	.word	0x510e527f
 8014088:	9b05688c 	.word	0x9b05688c
 801408c:	1f83d9ab 	.word	0x1f83d9ab
 8014090:	5be0cd19 	.word	0x5be0cd19

08014094 <mg_sha256_chunk>:

static void mg_sha256_chunk(mg_sha256_ctx *ctx) {
 8014094:	b480      	push	{r7}
 8014096:	b0cf      	sub	sp, #316	@ 0x13c
 8014098:	af00      	add	r7, sp, #0
 801409a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 801409e:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 80140a2:	6018      	str	r0, [r3, #0]
  int i, j;
  uint32_t a, b, c, d, e, f, g, h;
  uint32_t m[64];
  for (i = 0, j = 0; i < 16; ++i, j += 4)
 80140a4:	2300      	movs	r3, #0
 80140a6:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
 80140aa:	2300      	movs	r3, #0
 80140ac:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 80140b0:	e043      	b.n	801413a <mg_sha256_chunk+0xa6>
    m[i] = (uint32_t) (((uint32_t) ctx->buffer[j] << 24) |
 80140b2:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80140b6:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 80140ba:	681a      	ldr	r2, [r3, #0]
 80140bc:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80140c0:	4413      	add	r3, r2
 80140c2:	332c      	adds	r3, #44	@ 0x2c
 80140c4:	781b      	ldrb	r3, [r3, #0]
 80140c6:	061a      	lsls	r2, r3, #24
                       ((uint32_t) ctx->buffer[j + 1] << 16) |
 80140c8:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80140cc:	3301      	adds	r3, #1
 80140ce:	f507 719c 	add.w	r1, r7, #312	@ 0x138
 80140d2:	f5a1 719a 	sub.w	r1, r1, #308	@ 0x134
 80140d6:	6809      	ldr	r1, [r1, #0]
 80140d8:	440b      	add	r3, r1
 80140da:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 80140de:	041b      	lsls	r3, r3, #16
    m[i] = (uint32_t) (((uint32_t) ctx->buffer[j] << 24) |
 80140e0:	431a      	orrs	r2, r3
                       ((uint32_t) ctx->buffer[j + 2] << 8) |
 80140e2:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80140e6:	3302      	adds	r3, #2
 80140e8:	f507 719c 	add.w	r1, r7, #312	@ 0x138
 80140ec:	f5a1 719a 	sub.w	r1, r1, #308	@ 0x134
 80140f0:	6809      	ldr	r1, [r1, #0]
 80140f2:	440b      	add	r3, r1
 80140f4:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 80140f8:	021b      	lsls	r3, r3, #8
                       ((uint32_t) ctx->buffer[j + 1] << 16) |
 80140fa:	4313      	orrs	r3, r2
                       ((uint32_t) ctx->buffer[j + 3]));
 80140fc:	f8d7 2130 	ldr.w	r2, [r7, #304]	@ 0x130
 8014100:	3203      	adds	r2, #3
 8014102:	f507 719c 	add.w	r1, r7, #312	@ 0x138
 8014106:	f5a1 719a 	sub.w	r1, r1, #308	@ 0x134
 801410a:	6809      	ldr	r1, [r1, #0]
 801410c:	440a      	add	r2, r1
 801410e:	f892 202c 	ldrb.w	r2, [r2, #44]	@ 0x2c
    m[i] = (uint32_t) (((uint32_t) ctx->buffer[j] << 24) |
 8014112:	ea43 0102 	orr.w	r1, r3, r2
 8014116:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 801411a:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 801411e:	f8d7 2134 	ldr.w	r2, [r7, #308]	@ 0x134
 8014122:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0, j = 0; i < 16; ++i, j += 4)
 8014126:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 801412a:	3301      	adds	r3, #1
 801412c:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
 8014130:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8014134:	3304      	adds	r3, #4
 8014136:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 801413a:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 801413e:	2b0f      	cmp	r3, #15
 8014140:	ddb7      	ble.n	80140b2 <mg_sha256_chunk+0x1e>
  for (; i < 64; ++i)
 8014142:	e069      	b.n	8014218 <mg_sha256_chunk+0x184>
    m[i] = sig1(m[i - 2]) + m[i - 7] + sig0(m[i - 15]) + m[i - 16];
 8014144:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8014148:	1e9a      	subs	r2, r3, #2
 801414a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 801414e:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8014152:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014156:	ea4f 4273 	mov.w	r2, r3, ror #17
 801415a:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 801415e:	1e99      	subs	r1, r3, #2
 8014160:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8014164:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8014168:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801416c:	ea4f 43f3 	mov.w	r3, r3, ror #19
 8014170:	405a      	eors	r2, r3
 8014172:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8014176:	1e99      	subs	r1, r3, #2
 8014178:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 801417c:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8014180:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8014184:	0a9b      	lsrs	r3, r3, #10
 8014186:	405a      	eors	r2, r3
 8014188:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 801418c:	1fd9      	subs	r1, r3, #7
 801418e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8014192:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8014196:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801419a:	441a      	add	r2, r3
 801419c:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80141a0:	f1a3 010f 	sub.w	r1, r3, #15
 80141a4:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80141a8:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 80141ac:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80141b0:	ea4f 11f3 	mov.w	r1, r3, ror #7
 80141b4:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80141b8:	f1a3 000f 	sub.w	r0, r3, #15
 80141bc:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80141c0:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 80141c4:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 80141c8:	ea4f 43b3 	mov.w	r3, r3, ror #18
 80141cc:	4059      	eors	r1, r3
 80141ce:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80141d2:	f1a3 000f 	sub.w	r0, r3, #15
 80141d6:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80141da:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 80141de:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 80141e2:	08db      	lsrs	r3, r3, #3
 80141e4:	404b      	eors	r3, r1
 80141e6:	441a      	add	r2, r3
 80141e8:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80141ec:	f1a3 0110 	sub.w	r1, r3, #16
 80141f0:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80141f4:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 80141f8:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80141fc:	18d1      	adds	r1, r2, r3
 80141fe:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8014202:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8014206:	f8d7 2134 	ldr.w	r2, [r7, #308]	@ 0x134
 801420a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (; i < 64; ++i)
 801420e:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8014212:	3301      	adds	r3, #1
 8014214:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
 8014218:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 801421c:	2b3f      	cmp	r3, #63	@ 0x3f
 801421e:	dd91      	ble.n	8014144 <mg_sha256_chunk+0xb0>

  a = ctx->state[0];
 8014220:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8014224:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8014228:	681b      	ldr	r3, [r3, #0]
 801422a:	681b      	ldr	r3, [r3, #0]
 801422c:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  b = ctx->state[1];
 8014230:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8014234:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8014238:	681b      	ldr	r3, [r3, #0]
 801423a:	685b      	ldr	r3, [r3, #4]
 801423c:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  c = ctx->state[2];
 8014240:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8014244:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8014248:	681b      	ldr	r3, [r3, #0]
 801424a:	689b      	ldr	r3, [r3, #8]
 801424c:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  d = ctx->state[3];
 8014250:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8014254:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8014258:	681b      	ldr	r3, [r3, #0]
 801425a:	68db      	ldr	r3, [r3, #12]
 801425c:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  e = ctx->state[4];
 8014260:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8014264:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8014268:	681b      	ldr	r3, [r3, #0]
 801426a:	691b      	ldr	r3, [r3, #16]
 801426c:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  f = ctx->state[5];
 8014270:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8014274:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8014278:	681b      	ldr	r3, [r3, #0]
 801427a:	695b      	ldr	r3, [r3, #20]
 801427c:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  g = ctx->state[6];
 8014280:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8014284:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8014288:	681b      	ldr	r3, [r3, #0]
 801428a:	699b      	ldr	r3, [r3, #24]
 801428c:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
  h = ctx->state[7];
 8014290:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8014294:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8014298:	681b      	ldr	r3, [r3, #0]
 801429a:	69db      	ldr	r3, [r3, #28]
 801429c:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110

  for (i = 0; i < 64; ++i) {
 80142a0:	2300      	movs	r3, #0
 80142a2:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
 80142a6:	e078      	b.n	801439a <mg_sha256_chunk+0x306>
    uint32_t t1 = h + ep1(e) + ch(e, f, g) + mg_sha256_k[i] + m[i];
 80142a8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80142ac:	ea4f 12b3 	mov.w	r2, r3, ror #6
 80142b0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80142b4:	ea4f 23f3 	mov.w	r3, r3, ror #11
 80142b8:	405a      	eors	r2, r3
 80142ba:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80142be:	ea4f 6373 	mov.w	r3, r3, ror #25
 80142c2:	405a      	eors	r2, r3
 80142c4:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 80142c8:	441a      	add	r2, r3
 80142ca:	f8d7 111c 	ldr.w	r1, [r7, #284]	@ 0x11c
 80142ce:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 80142d2:	4019      	ands	r1, r3
 80142d4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80142d8:	43d8      	mvns	r0, r3
 80142da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80142de:	4003      	ands	r3, r0
 80142e0:	404b      	eors	r3, r1
 80142e2:	441a      	add	r2, r3
 80142e4:	496e      	ldr	r1, [pc, #440]	@ (80144a0 <mg_sha256_chunk+0x40c>)
 80142e6:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80142ea:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80142ee:	441a      	add	r2, r3
 80142f0:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80142f4:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 80142f8:	f8d7 1134 	ldr.w	r1, [r7, #308]	@ 0x134
 80142fc:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8014300:	4413      	add	r3, r2
 8014302:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    uint32_t t2 = ep0(a) + maj(a, b, c);
 8014306:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 801430a:	ea4f 02b3 	mov.w	r2, r3, ror #2
 801430e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8014312:	ea4f 3373 	mov.w	r3, r3, ror #13
 8014316:	405a      	eors	r2, r3
 8014318:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 801431c:	ea4f 53b3 	mov.w	r3, r3, ror #22
 8014320:	405a      	eors	r2, r3
 8014322:	f8d7 1128 	ldr.w	r1, [r7, #296]	@ 0x128
 8014326:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 801432a:	4059      	eors	r1, r3
 801432c:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8014330:	4019      	ands	r1, r3
 8014332:	f8d7 0128 	ldr.w	r0, [r7, #296]	@ 0x128
 8014336:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 801433a:	4003      	ands	r3, r0
 801433c:	404b      	eors	r3, r1
 801433e:	4413      	add	r3, r2
 8014340:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
    h = g;
 8014344:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8014348:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
    g = f;
 801434c:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8014350:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    f = e;
 8014354:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8014358:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
    e = d + t1;
 801435c:	f8d7 2120 	ldr.w	r2, [r7, #288]	@ 0x120
 8014360:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8014364:	4413      	add	r3, r2
 8014366:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
    d = c;
 801436a:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 801436e:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
    c = b;
 8014372:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8014376:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
    b = a;
 801437a:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 801437e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    a = t1 + t2;
 8014382:	f8d7 210c 	ldr.w	r2, [r7, #268]	@ 0x10c
 8014386:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 801438a:	4413      	add	r3, r2
 801438c:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  for (i = 0; i < 64; ++i) {
 8014390:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8014394:	3301      	adds	r3, #1
 8014396:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
 801439a:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 801439e:	2b3f      	cmp	r3, #63	@ 0x3f
 80143a0:	dd82      	ble.n	80142a8 <mg_sha256_chunk+0x214>
  }

  ctx->state[0] += a;
 80143a2:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80143a6:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 80143aa:	681b      	ldr	r3, [r3, #0]
 80143ac:	681a      	ldr	r2, [r3, #0]
 80143ae:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80143b2:	441a      	add	r2, r3
 80143b4:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80143b8:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 80143bc:	681b      	ldr	r3, [r3, #0]
 80143be:	601a      	str	r2, [r3, #0]
  ctx->state[1] += b;
 80143c0:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80143c4:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 80143c8:	681b      	ldr	r3, [r3, #0]
 80143ca:	685a      	ldr	r2, [r3, #4]
 80143cc:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80143d0:	441a      	add	r2, r3
 80143d2:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80143d6:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 80143da:	681b      	ldr	r3, [r3, #0]
 80143dc:	605a      	str	r2, [r3, #4]
  ctx->state[2] += c;
 80143de:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80143e2:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 80143e6:	681b      	ldr	r3, [r3, #0]
 80143e8:	689a      	ldr	r2, [r3, #8]
 80143ea:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 80143ee:	441a      	add	r2, r3
 80143f0:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80143f4:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 80143f8:	681b      	ldr	r3, [r3, #0]
 80143fa:	609a      	str	r2, [r3, #8]
  ctx->state[3] += d;
 80143fc:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8014400:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8014404:	681b      	ldr	r3, [r3, #0]
 8014406:	68da      	ldr	r2, [r3, #12]
 8014408:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 801440c:	441a      	add	r2, r3
 801440e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8014412:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8014416:	681b      	ldr	r3, [r3, #0]
 8014418:	60da      	str	r2, [r3, #12]
  ctx->state[4] += e;
 801441a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 801441e:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8014422:	681b      	ldr	r3, [r3, #0]
 8014424:	691a      	ldr	r2, [r3, #16]
 8014426:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 801442a:	441a      	add	r2, r3
 801442c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8014430:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8014434:	681b      	ldr	r3, [r3, #0]
 8014436:	611a      	str	r2, [r3, #16]
  ctx->state[5] += f;
 8014438:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 801443c:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8014440:	681b      	ldr	r3, [r3, #0]
 8014442:	695a      	ldr	r2, [r3, #20]
 8014444:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8014448:	441a      	add	r2, r3
 801444a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 801444e:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8014452:	681b      	ldr	r3, [r3, #0]
 8014454:	615a      	str	r2, [r3, #20]
  ctx->state[6] += g;
 8014456:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 801445a:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 801445e:	681b      	ldr	r3, [r3, #0]
 8014460:	699a      	ldr	r2, [r3, #24]
 8014462:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8014466:	441a      	add	r2, r3
 8014468:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 801446c:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8014470:	681b      	ldr	r3, [r3, #0]
 8014472:	619a      	str	r2, [r3, #24]
  ctx->state[7] += h;
 8014474:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8014478:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 801447c:	681b      	ldr	r3, [r3, #0]
 801447e:	69da      	ldr	r2, [r3, #28]
 8014480:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8014484:	441a      	add	r2, r3
 8014486:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 801448a:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 801448e:	681b      	ldr	r3, [r3, #0]
 8014490:	61da      	str	r2, [r3, #28]
}
 8014492:	bf00      	nop
 8014494:	f507 779e 	add.w	r7, r7, #316	@ 0x13c
 8014498:	46bd      	mov	sp, r7
 801449a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801449e:	4770      	bx	lr
 80144a0:	08028354 	.word	0x08028354

080144a4 <mg_sha256_update>:

void mg_sha256_update(mg_sha256_ctx *ctx, const unsigned char *data,
                      size_t len) {
 80144a4:	b5b0      	push	{r4, r5, r7, lr}
 80144a6:	b086      	sub	sp, #24
 80144a8:	af00      	add	r7, sp, #0
 80144aa:	60f8      	str	r0, [r7, #12]
 80144ac:	60b9      	str	r1, [r7, #8]
 80144ae:	607a      	str	r2, [r7, #4]
  size_t i;
  for (i = 0; i < len; i++) {
 80144b0:	2300      	movs	r3, #0
 80144b2:	617b      	str	r3, [r7, #20]
 80144b4:	e026      	b.n	8014504 <mg_sha256_update+0x60>
    ctx->buffer[ctx->len] = data[i];
 80144b6:	68ba      	ldr	r2, [r7, #8]
 80144b8:	697b      	ldr	r3, [r7, #20]
 80144ba:	441a      	add	r2, r3
 80144bc:	68fb      	ldr	r3, [r7, #12]
 80144be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80144c0:	7811      	ldrb	r1, [r2, #0]
 80144c2:	68fa      	ldr	r2, [r7, #12]
 80144c4:	4413      	add	r3, r2
 80144c6:	460a      	mov	r2, r1
 80144c8:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
    if ((++ctx->len) == 64) {
 80144cc:	68fb      	ldr	r3, [r7, #12]
 80144ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80144d0:	1c5a      	adds	r2, r3, #1
 80144d2:	68fb      	ldr	r3, [r7, #12]
 80144d4:	629a      	str	r2, [r3, #40]	@ 0x28
 80144d6:	68fb      	ldr	r3, [r7, #12]
 80144d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80144da:	2b40      	cmp	r3, #64	@ 0x40
 80144dc:	d10f      	bne.n	80144fe <mg_sha256_update+0x5a>
      mg_sha256_chunk(ctx);
 80144de:	68f8      	ldr	r0, [r7, #12]
 80144e0:	f7ff fdd8 	bl	8014094 <mg_sha256_chunk>
      ctx->bits += 512;
 80144e4:	68fb      	ldr	r3, [r7, #12]
 80144e6:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80144ea:	f512 7400 	adds.w	r4, r2, #512	@ 0x200
 80144ee:	f143 0500 	adc.w	r5, r3, #0
 80144f2:	68fb      	ldr	r3, [r7, #12]
 80144f4:	e9c3 4508 	strd	r4, r5, [r3, #32]
      ctx->len = 0;
 80144f8:	68fb      	ldr	r3, [r7, #12]
 80144fa:	2200      	movs	r2, #0
 80144fc:	629a      	str	r2, [r3, #40]	@ 0x28
  for (i = 0; i < len; i++) {
 80144fe:	697b      	ldr	r3, [r7, #20]
 8014500:	3301      	adds	r3, #1
 8014502:	617b      	str	r3, [r7, #20]
 8014504:	697a      	ldr	r2, [r7, #20]
 8014506:	687b      	ldr	r3, [r7, #4]
 8014508:	429a      	cmp	r2, r3
 801450a:	d3d4      	bcc.n	80144b6 <mg_sha256_update+0x12>
    }
  }
}
 801450c:	bf00      	nop
 801450e:	bf00      	nop
 8014510:	3718      	adds	r7, #24
 8014512:	46bd      	mov	sp, r7
 8014514:	bdb0      	pop	{r4, r5, r7, pc}

08014516 <mg_sha256_final>:

// TODO: make final reusable (remove side effects)
void mg_sha256_final(unsigned char digest[32], mg_sha256_ctx *ctx) {
 8014516:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 801451a:	b084      	sub	sp, #16
 801451c:	af00      	add	r7, sp, #0
 801451e:	6078      	str	r0, [r7, #4]
 8014520:	6039      	str	r1, [r7, #0]
  uint32_t i = ctx->len;
 8014522:	683b      	ldr	r3, [r7, #0]
 8014524:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8014526:	60fb      	str	r3, [r7, #12]
  if (i < 56) {
 8014528:	68fb      	ldr	r3, [r7, #12]
 801452a:	2b37      	cmp	r3, #55	@ 0x37
 801452c:	d814      	bhi.n	8014558 <mg_sha256_final+0x42>
    ctx->buffer[i++] = 0x80;
 801452e:	68fb      	ldr	r3, [r7, #12]
 8014530:	1c5a      	adds	r2, r3, #1
 8014532:	60fa      	str	r2, [r7, #12]
 8014534:	683a      	ldr	r2, [r7, #0]
 8014536:	4413      	add	r3, r2
 8014538:	2280      	movs	r2, #128	@ 0x80
 801453a:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
    while (i < 56) {
 801453e:	e007      	b.n	8014550 <mg_sha256_final+0x3a>
      ctx->buffer[i++] = 0x00;
 8014540:	68fb      	ldr	r3, [r7, #12]
 8014542:	1c5a      	adds	r2, r3, #1
 8014544:	60fa      	str	r2, [r7, #12]
 8014546:	683a      	ldr	r2, [r7, #0]
 8014548:	4413      	add	r3, r2
 801454a:	2200      	movs	r2, #0
 801454c:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
    while (i < 56) {
 8014550:	68fb      	ldr	r3, [r7, #12]
 8014552:	2b37      	cmp	r3, #55	@ 0x37
 8014554:	d9f4      	bls.n	8014540 <mg_sha256_final+0x2a>
 8014556:	e01d      	b.n	8014594 <mg_sha256_final+0x7e>
    }
  } else {
    ctx->buffer[i++] = 0x80;
 8014558:	68fb      	ldr	r3, [r7, #12]
 801455a:	1c5a      	adds	r2, r3, #1
 801455c:	60fa      	str	r2, [r7, #12]
 801455e:	683a      	ldr	r2, [r7, #0]
 8014560:	4413      	add	r3, r2
 8014562:	2280      	movs	r2, #128	@ 0x80
 8014564:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
    while (i < 64) {
 8014568:	e007      	b.n	801457a <mg_sha256_final+0x64>
      ctx->buffer[i++] = 0x00;
 801456a:	68fb      	ldr	r3, [r7, #12]
 801456c:	1c5a      	adds	r2, r3, #1
 801456e:	60fa      	str	r2, [r7, #12]
 8014570:	683a      	ldr	r2, [r7, #0]
 8014572:	4413      	add	r3, r2
 8014574:	2200      	movs	r2, #0
 8014576:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
    while (i < 64) {
 801457a:	68fb      	ldr	r3, [r7, #12]
 801457c:	2b3f      	cmp	r3, #63	@ 0x3f
 801457e:	d9f4      	bls.n	801456a <mg_sha256_final+0x54>
    }
    mg_sha256_chunk(ctx);
 8014580:	6838      	ldr	r0, [r7, #0]
 8014582:	f7ff fd87 	bl	8014094 <mg_sha256_chunk>
    memset(ctx->buffer, 0, 56);
 8014586:	683b      	ldr	r3, [r7, #0]
 8014588:	332c      	adds	r3, #44	@ 0x2c
 801458a:	2238      	movs	r2, #56	@ 0x38
 801458c:	2100      	movs	r1, #0
 801458e:	4618      	mov	r0, r3
 8014590:	f00f ff7c 	bl	802448c <memset>
  }

  ctx->bits += ctx->len * 8;
 8014594:	683b      	ldr	r3, [r7, #0]
 8014596:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 801459a:	6839      	ldr	r1, [r7, #0]
 801459c:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 801459e:	00c9      	lsls	r1, r1, #3
 80145a0:	2000      	movs	r0, #0
 80145a2:	460c      	mov	r4, r1
 80145a4:	4605      	mov	r5, r0
 80145a6:	eb12 0804 	adds.w	r8, r2, r4
 80145aa:	eb43 0905 	adc.w	r9, r3, r5
 80145ae:	683b      	ldr	r3, [r7, #0]
 80145b0:	e9c3 8908 	strd	r8, r9, [r3, #32]
  ctx->buffer[63] = (uint8_t) ((ctx->bits) & 0xff);
 80145b4:	683b      	ldr	r3, [r7, #0]
 80145b6:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80145ba:	b2d2      	uxtb	r2, r2
 80145bc:	683b      	ldr	r3, [r7, #0]
 80145be:	f883 206b 	strb.w	r2, [r3, #107]	@ 0x6b
  ctx->buffer[62] = (uint8_t) ((ctx->bits >> 8) & 0xff);
 80145c2:	683b      	ldr	r3, [r7, #0]
 80145c4:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 80145c8:	f04f 0200 	mov.w	r2, #0
 80145cc:	f04f 0300 	mov.w	r3, #0
 80145d0:	0a02      	lsrs	r2, r0, #8
 80145d2:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 80145d6:	0a0b      	lsrs	r3, r1, #8
 80145d8:	b2d2      	uxtb	r2, r2
 80145da:	683b      	ldr	r3, [r7, #0]
 80145dc:	f883 206a 	strb.w	r2, [r3, #106]	@ 0x6a
  ctx->buffer[61] = (uint8_t) ((ctx->bits >> 16) & 0xff);
 80145e0:	683b      	ldr	r3, [r7, #0]
 80145e2:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 80145e6:	f04f 0200 	mov.w	r2, #0
 80145ea:	f04f 0300 	mov.w	r3, #0
 80145ee:	0c02      	lsrs	r2, r0, #16
 80145f0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80145f4:	0c0b      	lsrs	r3, r1, #16
 80145f6:	b2d2      	uxtb	r2, r2
 80145f8:	683b      	ldr	r3, [r7, #0]
 80145fa:	f883 2069 	strb.w	r2, [r3, #105]	@ 0x69
  ctx->buffer[60] = (uint8_t) ((ctx->bits >> 24) & 0xff);
 80145fe:	683b      	ldr	r3, [r7, #0]
 8014600:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 8014604:	f04f 0200 	mov.w	r2, #0
 8014608:	f04f 0300 	mov.w	r3, #0
 801460c:	0e02      	lsrs	r2, r0, #24
 801460e:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8014612:	0e0b      	lsrs	r3, r1, #24
 8014614:	b2d2      	uxtb	r2, r2
 8014616:	683b      	ldr	r3, [r7, #0]
 8014618:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
  ctx->buffer[59] = (uint8_t) ((ctx->bits >> 32) & 0xff);
 801461c:	683b      	ldr	r3, [r7, #0]
 801461e:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 8014622:	f04f 0200 	mov.w	r2, #0
 8014626:	f04f 0300 	mov.w	r3, #0
 801462a:	000a      	movs	r2, r1
 801462c:	2300      	movs	r3, #0
 801462e:	b2d2      	uxtb	r2, r2
 8014630:	683b      	ldr	r3, [r7, #0]
 8014632:	f883 2067 	strb.w	r2, [r3, #103]	@ 0x67
  ctx->buffer[58] = (uint8_t) ((ctx->bits >> 40) & 0xff);
 8014636:	683b      	ldr	r3, [r7, #0]
 8014638:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 801463c:	f04f 0200 	mov.w	r2, #0
 8014640:	f04f 0300 	mov.w	r3, #0
 8014644:	0a0a      	lsrs	r2, r1, #8
 8014646:	2300      	movs	r3, #0
 8014648:	b2d2      	uxtb	r2, r2
 801464a:	683b      	ldr	r3, [r7, #0]
 801464c:	f883 2066 	strb.w	r2, [r3, #102]	@ 0x66
  ctx->buffer[57] = (uint8_t) ((ctx->bits >> 48) & 0xff);
 8014650:	683b      	ldr	r3, [r7, #0]
 8014652:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 8014656:	f04f 0200 	mov.w	r2, #0
 801465a:	f04f 0300 	mov.w	r3, #0
 801465e:	0c0a      	lsrs	r2, r1, #16
 8014660:	2300      	movs	r3, #0
 8014662:	b2d2      	uxtb	r2, r2
 8014664:	683b      	ldr	r3, [r7, #0]
 8014666:	f883 2065 	strb.w	r2, [r3, #101]	@ 0x65
  ctx->buffer[56] = (uint8_t) ((ctx->bits >> 56) & 0xff);
 801466a:	683b      	ldr	r3, [r7, #0]
 801466c:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 8014670:	f04f 0200 	mov.w	r2, #0
 8014674:	f04f 0300 	mov.w	r3, #0
 8014678:	0e0a      	lsrs	r2, r1, #24
 801467a:	2300      	movs	r3, #0
 801467c:	b2d2      	uxtb	r2, r2
 801467e:	683b      	ldr	r3, [r7, #0]
 8014680:	f883 2064 	strb.w	r2, [r3, #100]	@ 0x64
  mg_sha256_chunk(ctx);
 8014684:	6838      	ldr	r0, [r7, #0]
 8014686:	f7ff fd05 	bl	8014094 <mg_sha256_chunk>

  for (i = 0; i < 4; ++i) {
 801468a:	2300      	movs	r3, #0
 801468c:	60fb      	str	r3, [r7, #12]
 801468e:	e071      	b.n	8014774 <mg_sha256_final+0x25e>
    digest[i] = (uint8_t) ((ctx->state[0] >> (24 - i * 8)) & 0xff);
 8014690:	683b      	ldr	r3, [r7, #0]
 8014692:	681a      	ldr	r2, [r3, #0]
 8014694:	68fb      	ldr	r3, [r7, #12]
 8014696:	f1c3 0303 	rsb	r3, r3, #3
 801469a:	00db      	lsls	r3, r3, #3
 801469c:	fa22 f103 	lsr.w	r1, r2, r3
 80146a0:	687a      	ldr	r2, [r7, #4]
 80146a2:	68fb      	ldr	r3, [r7, #12]
 80146a4:	4413      	add	r3, r2
 80146a6:	b2ca      	uxtb	r2, r1
 80146a8:	701a      	strb	r2, [r3, #0]
    digest[i + 4] = (uint8_t) ((ctx->state[1] >> (24 - i * 8)) & 0xff);
 80146aa:	683b      	ldr	r3, [r7, #0]
 80146ac:	685a      	ldr	r2, [r3, #4]
 80146ae:	68fb      	ldr	r3, [r7, #12]
 80146b0:	f1c3 0303 	rsb	r3, r3, #3
 80146b4:	00db      	lsls	r3, r3, #3
 80146b6:	fa22 f103 	lsr.w	r1, r2, r3
 80146ba:	68fb      	ldr	r3, [r7, #12]
 80146bc:	3304      	adds	r3, #4
 80146be:	687a      	ldr	r2, [r7, #4]
 80146c0:	4413      	add	r3, r2
 80146c2:	b2ca      	uxtb	r2, r1
 80146c4:	701a      	strb	r2, [r3, #0]
    digest[i + 8] = (uint8_t) ((ctx->state[2] >> (24 - i * 8)) & 0xff);
 80146c6:	683b      	ldr	r3, [r7, #0]
 80146c8:	689a      	ldr	r2, [r3, #8]
 80146ca:	68fb      	ldr	r3, [r7, #12]
 80146cc:	f1c3 0303 	rsb	r3, r3, #3
 80146d0:	00db      	lsls	r3, r3, #3
 80146d2:	fa22 f103 	lsr.w	r1, r2, r3
 80146d6:	68fb      	ldr	r3, [r7, #12]
 80146d8:	3308      	adds	r3, #8
 80146da:	687a      	ldr	r2, [r7, #4]
 80146dc:	4413      	add	r3, r2
 80146de:	b2ca      	uxtb	r2, r1
 80146e0:	701a      	strb	r2, [r3, #0]
    digest[i + 12] = (uint8_t) ((ctx->state[3] >> (24 - i * 8)) & 0xff);
 80146e2:	683b      	ldr	r3, [r7, #0]
 80146e4:	68da      	ldr	r2, [r3, #12]
 80146e6:	68fb      	ldr	r3, [r7, #12]
 80146e8:	f1c3 0303 	rsb	r3, r3, #3
 80146ec:	00db      	lsls	r3, r3, #3
 80146ee:	fa22 f103 	lsr.w	r1, r2, r3
 80146f2:	68fb      	ldr	r3, [r7, #12]
 80146f4:	330c      	adds	r3, #12
 80146f6:	687a      	ldr	r2, [r7, #4]
 80146f8:	4413      	add	r3, r2
 80146fa:	b2ca      	uxtb	r2, r1
 80146fc:	701a      	strb	r2, [r3, #0]
    digest[i + 16] = (uint8_t) ((ctx->state[4] >> (24 - i * 8)) & 0xff);
 80146fe:	683b      	ldr	r3, [r7, #0]
 8014700:	691a      	ldr	r2, [r3, #16]
 8014702:	68fb      	ldr	r3, [r7, #12]
 8014704:	f1c3 0303 	rsb	r3, r3, #3
 8014708:	00db      	lsls	r3, r3, #3
 801470a:	fa22 f103 	lsr.w	r1, r2, r3
 801470e:	68fb      	ldr	r3, [r7, #12]
 8014710:	3310      	adds	r3, #16
 8014712:	687a      	ldr	r2, [r7, #4]
 8014714:	4413      	add	r3, r2
 8014716:	b2ca      	uxtb	r2, r1
 8014718:	701a      	strb	r2, [r3, #0]
    digest[i + 20] = (uint8_t) ((ctx->state[5] >> (24 - i * 8)) & 0xff);
 801471a:	683b      	ldr	r3, [r7, #0]
 801471c:	695a      	ldr	r2, [r3, #20]
 801471e:	68fb      	ldr	r3, [r7, #12]
 8014720:	f1c3 0303 	rsb	r3, r3, #3
 8014724:	00db      	lsls	r3, r3, #3
 8014726:	fa22 f103 	lsr.w	r1, r2, r3
 801472a:	68fb      	ldr	r3, [r7, #12]
 801472c:	3314      	adds	r3, #20
 801472e:	687a      	ldr	r2, [r7, #4]
 8014730:	4413      	add	r3, r2
 8014732:	b2ca      	uxtb	r2, r1
 8014734:	701a      	strb	r2, [r3, #0]
    digest[i + 24] = (uint8_t) ((ctx->state[6] >> (24 - i * 8)) & 0xff);
 8014736:	683b      	ldr	r3, [r7, #0]
 8014738:	699a      	ldr	r2, [r3, #24]
 801473a:	68fb      	ldr	r3, [r7, #12]
 801473c:	f1c3 0303 	rsb	r3, r3, #3
 8014740:	00db      	lsls	r3, r3, #3
 8014742:	fa22 f103 	lsr.w	r1, r2, r3
 8014746:	68fb      	ldr	r3, [r7, #12]
 8014748:	3318      	adds	r3, #24
 801474a:	687a      	ldr	r2, [r7, #4]
 801474c:	4413      	add	r3, r2
 801474e:	b2ca      	uxtb	r2, r1
 8014750:	701a      	strb	r2, [r3, #0]
    digest[i + 28] = (uint8_t) ((ctx->state[7] >> (24 - i * 8)) & 0xff);
 8014752:	683b      	ldr	r3, [r7, #0]
 8014754:	69da      	ldr	r2, [r3, #28]
 8014756:	68fb      	ldr	r3, [r7, #12]
 8014758:	f1c3 0303 	rsb	r3, r3, #3
 801475c:	00db      	lsls	r3, r3, #3
 801475e:	fa22 f103 	lsr.w	r1, r2, r3
 8014762:	68fb      	ldr	r3, [r7, #12]
 8014764:	331c      	adds	r3, #28
 8014766:	687a      	ldr	r2, [r7, #4]
 8014768:	4413      	add	r3, r2
 801476a:	b2ca      	uxtb	r2, r1
 801476c:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < 4; ++i) {
 801476e:	68fb      	ldr	r3, [r7, #12]
 8014770:	3301      	adds	r3, #1
 8014772:	60fb      	str	r3, [r7, #12]
 8014774:	68fb      	ldr	r3, [r7, #12]
 8014776:	2b03      	cmp	r3, #3
 8014778:	d98a      	bls.n	8014690 <mg_sha256_final+0x17a>
  }
}
 801477a:	bf00      	nop
 801477c:	bf00      	nop
 801477e:	3710      	adds	r7, #16
 8014780:	46bd      	mov	sp, r7
 8014782:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

08014786 <mg_sha256>:

void mg_sha256(uint8_t dst[32], uint8_t *data, size_t datasz) {
 8014786:	b580      	push	{r7, lr}
 8014788:	b0a0      	sub	sp, #128	@ 0x80
 801478a:	af00      	add	r7, sp, #0
 801478c:	60f8      	str	r0, [r7, #12]
 801478e:	60b9      	str	r1, [r7, #8]
 8014790:	607a      	str	r2, [r7, #4]
  mg_sha256_ctx ctx;
  mg_sha256_init(&ctx);
 8014792:	f107 0310 	add.w	r3, r7, #16
 8014796:	4618      	mov	r0, r3
 8014798:	f7ff fc40 	bl	801401c <mg_sha256_init>
  mg_sha256_update(&ctx, data, datasz);
 801479c:	f107 0310 	add.w	r3, r7, #16
 80147a0:	687a      	ldr	r2, [r7, #4]
 80147a2:	68b9      	ldr	r1, [r7, #8]
 80147a4:	4618      	mov	r0, r3
 80147a6:	f7ff fe7d 	bl	80144a4 <mg_sha256_update>
  mg_sha256_final(dst, &ctx);
 80147aa:	f107 0310 	add.w	r3, r7, #16
 80147ae:	4619      	mov	r1, r3
 80147b0:	68f8      	ldr	r0, [r7, #12]
 80147b2:	f7ff feb0 	bl	8014516 <mg_sha256_final>
}
 80147b6:	bf00      	nop
 80147b8:	3780      	adds	r7, #128	@ 0x80
 80147ba:	46bd      	mov	sp, r7
 80147bc:	bd80      	pop	{r7, pc}

080147be <mg_hmac_sha256>:

void mg_hmac_sha256(uint8_t dst[32], uint8_t *key, size_t keysz, uint8_t *data,
                    size_t datasz) {
 80147be:	b590      	push	{r4, r7, lr}
 80147c0:	b0d3      	sub	sp, #332	@ 0x14c
 80147c2:	af00      	add	r7, sp, #0
 80147c4:	f507 74a4 	add.w	r4, r7, #328	@ 0x148
 80147c8:	f5a4 749e 	sub.w	r4, r4, #316	@ 0x13c
 80147cc:	6020      	str	r0, [r4, #0]
 80147ce:	f507 70a4 	add.w	r0, r7, #328	@ 0x148
 80147d2:	f5a0 70a0 	sub.w	r0, r0, #320	@ 0x140
 80147d6:	6001      	str	r1, [r0, #0]
 80147d8:	f507 71a4 	add.w	r1, r7, #328	@ 0x148
 80147dc:	f5a1 71a2 	sub.w	r1, r1, #324	@ 0x144
 80147e0:	600a      	str	r2, [r1, #0]
 80147e2:	f507 72a4 	add.w	r2, r7, #328	@ 0x148
 80147e6:	f5a2 72a4 	sub.w	r2, r2, #328	@ 0x148
 80147ea:	6013      	str	r3, [r2, #0]
  mg_sha256_ctx ctx;
  uint8_t k[64] = {0};
 80147ec:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 80147f0:	2240      	movs	r2, #64	@ 0x40
 80147f2:	2100      	movs	r1, #0
 80147f4:	4618      	mov	r0, r3
 80147f6:	f00f fe49 	bl	802448c <memset>
  uint8_t o_pad[64], i_pad[64];
  unsigned int i;
  memset(i_pad, 0x36, sizeof(i_pad));
 80147fa:	f107 0310 	add.w	r3, r7, #16
 80147fe:	2240      	movs	r2, #64	@ 0x40
 8014800:	2136      	movs	r1, #54	@ 0x36
 8014802:	4618      	mov	r0, r3
 8014804:	f00f fe42 	bl	802448c <memset>
  memset(o_pad, 0x5c, sizeof(o_pad));
 8014808:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 801480c:	2240      	movs	r2, #64	@ 0x40
 801480e:	215c      	movs	r1, #92	@ 0x5c
 8014810:	4618      	mov	r0, r3
 8014812:	f00f fe3b 	bl	802448c <memset>
  if (keysz < 64) {
 8014816:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 801481a:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 801481e:	681b      	ldr	r3, [r3, #0]
 8014820:	2b3f      	cmp	r3, #63	@ 0x3f
 8014822:	d815      	bhi.n	8014850 <mg_hmac_sha256+0x92>
    if (keysz > 0) memmove(k, key, keysz);
 8014824:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8014828:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 801482c:	681b      	ldr	r3, [r3, #0]
 801482e:	2b00      	cmp	r3, #0
 8014830:	d029      	beq.n	8014886 <mg_hmac_sha256+0xc8>
 8014832:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8014836:	f5a3 72a2 	sub.w	r2, r3, #324	@ 0x144
 801483a:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 801483e:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8014842:	f107 0090 	add.w	r0, r7, #144	@ 0x90
 8014846:	6812      	ldr	r2, [r2, #0]
 8014848:	6819      	ldr	r1, [r3, #0]
 801484a:	f00f fe05 	bl	8024458 <memmove>
 801484e:	e01a      	b.n	8014886 <mg_hmac_sha256+0xc8>
  } else {
    mg_sha256_init(&ctx);
 8014850:	f107 03d0 	add.w	r3, r7, #208	@ 0xd0
 8014854:	4618      	mov	r0, r3
 8014856:	f7ff fbe1 	bl	801401c <mg_sha256_init>
    mg_sha256_update(&ctx, key, keysz);
 801485a:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 801485e:	f5a3 72a2 	sub.w	r2, r3, #324	@ 0x144
 8014862:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8014866:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 801486a:	f107 00d0 	add.w	r0, r7, #208	@ 0xd0
 801486e:	6812      	ldr	r2, [r2, #0]
 8014870:	6819      	ldr	r1, [r3, #0]
 8014872:	f7ff fe17 	bl	80144a4 <mg_sha256_update>
    mg_sha256_final(k, &ctx);
 8014876:	f107 02d0 	add.w	r2, r7, #208	@ 0xd0
 801487a:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 801487e:	4611      	mov	r1, r2
 8014880:	4618      	mov	r0, r3
 8014882:	f7ff fe48 	bl	8014516 <mg_sha256_final>
  }
  for (i = 0; i < sizeof(k); i++) {
 8014886:	2300      	movs	r3, #0
 8014888:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144
 801488c:	e032      	b.n	80148f4 <mg_hmac_sha256+0x136>
    i_pad[i] ^= k[i];
 801488e:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8014892:	f5a3 729c 	sub.w	r2, r3, #312	@ 0x138
 8014896:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 801489a:	4413      	add	r3, r2
 801489c:	781a      	ldrb	r2, [r3, #0]
 801489e:	f107 0190 	add.w	r1, r7, #144	@ 0x90
 80148a2:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 80148a6:	440b      	add	r3, r1
 80148a8:	781b      	ldrb	r3, [r3, #0]
 80148aa:	4053      	eors	r3, r2
 80148ac:	b2d9      	uxtb	r1, r3
 80148ae:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 80148b2:	f5a3 729c 	sub.w	r2, r3, #312	@ 0x138
 80148b6:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 80148ba:	4413      	add	r3, r2
 80148bc:	460a      	mov	r2, r1
 80148be:	701a      	strb	r2, [r3, #0]
    o_pad[i] ^= k[i];
 80148c0:	f107 0250 	add.w	r2, r7, #80	@ 0x50
 80148c4:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 80148c8:	4413      	add	r3, r2
 80148ca:	781a      	ldrb	r2, [r3, #0]
 80148cc:	f107 0190 	add.w	r1, r7, #144	@ 0x90
 80148d0:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 80148d4:	440b      	add	r3, r1
 80148d6:	781b      	ldrb	r3, [r3, #0]
 80148d8:	4053      	eors	r3, r2
 80148da:	b2d9      	uxtb	r1, r3
 80148dc:	f107 0250 	add.w	r2, r7, #80	@ 0x50
 80148e0:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 80148e4:	4413      	add	r3, r2
 80148e6:	460a      	mov	r2, r1
 80148e8:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < sizeof(k); i++) {
 80148ea:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 80148ee:	3301      	adds	r3, #1
 80148f0:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144
 80148f4:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 80148f8:	2b3f      	cmp	r3, #63	@ 0x3f
 80148fa:	d9c8      	bls.n	801488e <mg_hmac_sha256+0xd0>
  }
  mg_sha256_init(&ctx);
 80148fc:	f107 03d0 	add.w	r3, r7, #208	@ 0xd0
 8014900:	4618      	mov	r0, r3
 8014902:	f7ff fb8b 	bl	801401c <mg_sha256_init>
  mg_sha256_update(&ctx, i_pad, sizeof(i_pad));
 8014906:	f107 0110 	add.w	r1, r7, #16
 801490a:	f107 03d0 	add.w	r3, r7, #208	@ 0xd0
 801490e:	2240      	movs	r2, #64	@ 0x40
 8014910:	4618      	mov	r0, r3
 8014912:	f7ff fdc7 	bl	80144a4 <mg_sha256_update>
  mg_sha256_update(&ctx, data, datasz);
 8014916:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 801491a:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 801491e:	f107 00d0 	add.w	r0, r7, #208	@ 0xd0
 8014922:	f8d7 2158 	ldr.w	r2, [r7, #344]	@ 0x158
 8014926:	6819      	ldr	r1, [r3, #0]
 8014928:	f7ff fdbc 	bl	80144a4 <mg_sha256_update>
  mg_sha256_final(dst, &ctx);
 801492c:	f107 02d0 	add.w	r2, r7, #208	@ 0xd0
 8014930:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8014934:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8014938:	4611      	mov	r1, r2
 801493a:	6818      	ldr	r0, [r3, #0]
 801493c:	f7ff fdeb 	bl	8014516 <mg_sha256_final>
  mg_sha256_init(&ctx);
 8014940:	f107 03d0 	add.w	r3, r7, #208	@ 0xd0
 8014944:	4618      	mov	r0, r3
 8014946:	f7ff fb69 	bl	801401c <mg_sha256_init>
  mg_sha256_update(&ctx, o_pad, sizeof(o_pad));
 801494a:	f107 0150 	add.w	r1, r7, #80	@ 0x50
 801494e:	f107 03d0 	add.w	r3, r7, #208	@ 0xd0
 8014952:	2240      	movs	r2, #64	@ 0x40
 8014954:	4618      	mov	r0, r3
 8014956:	f7ff fda5 	bl	80144a4 <mg_sha256_update>
  mg_sha256_update(&ctx, dst, 32);
 801495a:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 801495e:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8014962:	f107 00d0 	add.w	r0, r7, #208	@ 0xd0
 8014966:	2220      	movs	r2, #32
 8014968:	6819      	ldr	r1, [r3, #0]
 801496a:	f7ff fd9b 	bl	80144a4 <mg_sha256_update>
  mg_sha256_final(dst, &ctx);
 801496e:	f107 02d0 	add.w	r2, r7, #208	@ 0xd0
 8014972:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8014976:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 801497a:	4611      	mov	r1, r2
 801497c:	6818      	ldr	r0, [r3, #0]
 801497e:	f7ff fdca 	bl	8014516 <mg_sha256_final>
}
 8014982:	bf00      	nop
 8014984:	f507 77a6 	add.w	r7, r7, #332	@ 0x14c
 8014988:	46bd      	mov	sp, r7
 801498a:	bd90      	pop	{r4, r7, pc}

0801498c <mg_sha384_transform>:
    0x0a637dc5a2c898a6, 0x113f9804bef90dae, 0x1b710b35131c471b,
    0x28db77f523047d84, 0x32caab7b40c72493, 0x3c9ebe0a15c9bebc,
    0x431d67c49c100d4c, 0x4cc5d4becb3e42b6, 0x597f299cfc657e2a,
    0x5fcb6fab3ad6faec, 0x6c44198c4a475817};

static void mg_sha384_transform(mg_sha384_ctx *ctx, const uint8_t data[]) {
 801498c:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8014990:	f5ad 6d95 	sub.w	sp, sp, #1192	@ 0x4a8
 8014994:	af00      	add	r7, sp, #0
 8014996:	f507 6395 	add.w	r3, r7, #1192	@ 0x4a8
 801499a:	f5a3 7337 	sub.w	r3, r3, #732	@ 0x2dc
 801499e:	6018      	str	r0, [r3, #0]
 80149a0:	f507 6395 	add.w	r3, r7, #1192	@ 0x4a8
 80149a4:	f5a3 7338 	sub.w	r3, r3, #736	@ 0x2e0
 80149a8:	6019      	str	r1, [r3, #0]
  uint64_t m[80];
  uint64_t a, b, c, d, e, f, g, h;
  int i, j;

  for (i = 0, j = 0; i < 16; ++i, j += 8)
 80149aa:	2300      	movs	r3, #0
 80149ac:	f8c7 3464 	str.w	r3, [r7, #1124]	@ 0x464
 80149b0:	2300      	movs	r3, #0
 80149b2:	f8c7 3460 	str.w	r3, [r7, #1120]	@ 0x460
 80149b6:	e113      	b.n	8014be0 <mg_sha384_transform+0x254>
    m[i] = ((uint64_t) data[j] << 56) | ((uint64_t) data[j + 1] << 48) |
 80149b8:	f8d7 2460 	ldr.w	r2, [r7, #1120]	@ 0x460
 80149bc:	f507 6395 	add.w	r3, r7, #1192	@ 0x4a8
 80149c0:	f5a3 7338 	sub.w	r3, r3, #736	@ 0x2e0
 80149c4:	681b      	ldr	r3, [r3, #0]
 80149c6:	4413      	add	r3, r2
 80149c8:	781b      	ldrb	r3, [r3, #0]
 80149ca:	b2db      	uxtb	r3, r3
 80149cc:	2200      	movs	r2, #0
 80149ce:	f8c7 3198 	str.w	r3, [r7, #408]	@ 0x198
 80149d2:	f8c7 219c 	str.w	r2, [r7, #412]	@ 0x19c
 80149d6:	f04f 0000 	mov.w	r0, #0
 80149da:	f04f 0100 	mov.w	r1, #0
 80149de:	f8d7 3198 	ldr.w	r3, [r7, #408]	@ 0x198
 80149e2:	0619      	lsls	r1, r3, #24
 80149e4:	2000      	movs	r0, #0
 80149e6:	f8d7 3460 	ldr.w	r3, [r7, #1120]	@ 0x460
 80149ea:	1c5a      	adds	r2, r3, #1
 80149ec:	f507 6395 	add.w	r3, r7, #1192	@ 0x4a8
 80149f0:	f5a3 7338 	sub.w	r3, r3, #736	@ 0x2e0
 80149f4:	681b      	ldr	r3, [r3, #0]
 80149f6:	4413      	add	r3, r2
 80149f8:	781b      	ldrb	r3, [r3, #0]
 80149fa:	b2db      	uxtb	r3, r3
 80149fc:	2200      	movs	r2, #0
 80149fe:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
 8014a02:	f8c7 2194 	str.w	r2, [r7, #404]	@ 0x194
 8014a06:	f04f 0200 	mov.w	r2, #0
 8014a0a:	f04f 0300 	mov.w	r3, #0
 8014a0e:	f8d7 6190 	ldr.w	r6, [r7, #400]	@ 0x190
 8014a12:	0433      	lsls	r3, r6, #16
 8014a14:	2200      	movs	r2, #0
 8014a16:	ea40 0602 	orr.w	r6, r0, r2
 8014a1a:	f8c7 61b0 	str.w	r6, [r7, #432]	@ 0x1b0
 8014a1e:	430b      	orrs	r3, r1
 8014a20:	f8c7 31b4 	str.w	r3, [r7, #436]	@ 0x1b4
           ((uint64_t) data[j + 2] << 40) | ((uint64_t) data[j + 3] << 32) |
 8014a24:	f8d7 3460 	ldr.w	r3, [r7, #1120]	@ 0x460
 8014a28:	1c9a      	adds	r2, r3, #2
 8014a2a:	f507 6395 	add.w	r3, r7, #1192	@ 0x4a8
 8014a2e:	f5a3 7338 	sub.w	r3, r3, #736	@ 0x2e0
 8014a32:	681b      	ldr	r3, [r3, #0]
 8014a34:	4413      	add	r3, r2
 8014a36:	781b      	ldrb	r3, [r3, #0]
 8014a38:	b2db      	uxtb	r3, r3
 8014a3a:	2200      	movs	r2, #0
 8014a3c:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
 8014a40:	f8c7 218c 	str.w	r2, [r7, #396]	@ 0x18c
 8014a44:	f04f 0200 	mov.w	r2, #0
 8014a48:	f04f 0300 	mov.w	r3, #0
 8014a4c:	f8d7 1188 	ldr.w	r1, [r7, #392]	@ 0x188
 8014a50:	020b      	lsls	r3, r1, #8
 8014a52:	2200      	movs	r2, #0
    m[i] = ((uint64_t) data[j] << 56) | ((uint64_t) data[j + 1] << 48) |
 8014a54:	f8d7 11b0 	ldr.w	r1, [r7, #432]	@ 0x1b0
 8014a58:	4311      	orrs	r1, r2
 8014a5a:	f8c7 11a8 	str.w	r1, [r7, #424]	@ 0x1a8
 8014a5e:	f8d7 11b4 	ldr.w	r1, [r7, #436]	@ 0x1b4
 8014a62:	430b      	orrs	r3, r1
 8014a64:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
           ((uint64_t) data[j + 2] << 40) | ((uint64_t) data[j + 3] << 32) |
 8014a68:	f8d7 3460 	ldr.w	r3, [r7, #1120]	@ 0x460
 8014a6c:	1cda      	adds	r2, r3, #3
 8014a6e:	f507 6395 	add.w	r3, r7, #1192	@ 0x4a8
 8014a72:	f5a3 7338 	sub.w	r3, r3, #736	@ 0x2e0
 8014a76:	681b      	ldr	r3, [r3, #0]
 8014a78:	4413      	add	r3, r2
 8014a7a:	781b      	ldrb	r3, [r3, #0]
 8014a7c:	b2db      	uxtb	r3, r3
 8014a7e:	2200      	movs	r2, #0
 8014a80:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 8014a84:	f8c7 2184 	str.w	r2, [r7, #388]	@ 0x184
 8014a88:	f04f 0200 	mov.w	r2, #0
 8014a8c:	f04f 0300 	mov.w	r3, #0
 8014a90:	f8d7 1180 	ldr.w	r1, [r7, #384]	@ 0x180
 8014a94:	000b      	movs	r3, r1
 8014a96:	2200      	movs	r2, #0
 8014a98:	f8d7 11a8 	ldr.w	r1, [r7, #424]	@ 0x1a8
 8014a9c:	4311      	orrs	r1, r2
 8014a9e:	f8c7 11a0 	str.w	r1, [r7, #416]	@ 0x1a0
 8014aa2:	f8d7 11ac 	ldr.w	r1, [r7, #428]	@ 0x1ac
 8014aa6:	430b      	orrs	r3, r1
 8014aa8:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
           ((uint64_t) data[j + 4] << 24) | ((uint64_t) data[j + 5] << 16) |
 8014aac:	f8d7 3460 	ldr.w	r3, [r7, #1120]	@ 0x460
 8014ab0:	1d1a      	adds	r2, r3, #4
 8014ab2:	f507 6395 	add.w	r3, r7, #1192	@ 0x4a8
 8014ab6:	f5a3 7338 	sub.w	r3, r3, #736	@ 0x2e0
 8014aba:	681b      	ldr	r3, [r3, #0]
 8014abc:	4413      	add	r3, r2
 8014abe:	781b      	ldrb	r3, [r3, #0]
 8014ac0:	b2db      	uxtb	r3, r3
 8014ac2:	2200      	movs	r2, #0
 8014ac4:	f8c7 3178 	str.w	r3, [r7, #376]	@ 0x178
 8014ac8:	f8c7 217c 	str.w	r2, [r7, #380]	@ 0x17c
 8014acc:	e9d7 125e 	ldrd	r1, r2, [r7, #376]	@ 0x178
 8014ad0:	460b      	mov	r3, r1
 8014ad2:	0a1b      	lsrs	r3, r3, #8
 8014ad4:	f8c7 3174 	str.w	r3, [r7, #372]	@ 0x174
 8014ad8:	460b      	mov	r3, r1
 8014ada:	061b      	lsls	r3, r3, #24
 8014adc:	f8c7 3170 	str.w	r3, [r7, #368]	@ 0x170
           ((uint64_t) data[j + 2] << 40) | ((uint64_t) data[j + 3] << 32) |
 8014ae0:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 8014ae4:	e9d7 015c 	ldrd	r0, r1, [r7, #368]	@ 0x170
 8014ae8:	4602      	mov	r2, r0
 8014aea:	ea43 0a02 	orr.w	sl, r3, r2
 8014aee:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 8014af2:	460a      	mov	r2, r1
 8014af4:	ea43 0b02 	orr.w	fp, r3, r2
           ((uint64_t) data[j + 4] << 24) | ((uint64_t) data[j + 5] << 16) |
 8014af8:	f8d7 3460 	ldr.w	r3, [r7, #1120]	@ 0x460
 8014afc:	1d5a      	adds	r2, r3, #5
 8014afe:	f507 6395 	add.w	r3, r7, #1192	@ 0x4a8
 8014b02:	f5a3 7338 	sub.w	r3, r3, #736	@ 0x2e0
 8014b06:	681b      	ldr	r3, [r3, #0]
 8014b08:	4413      	add	r3, r2
 8014b0a:	781b      	ldrb	r3, [r3, #0]
 8014b0c:	b2db      	uxtb	r3, r3
 8014b0e:	2200      	movs	r2, #0
 8014b10:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 8014b14:	f8c7 21c4 	str.w	r2, [r7, #452]	@ 0x1c4
 8014b18:	f04f 0200 	mov.w	r2, #0
 8014b1c:	f04f 0300 	mov.w	r3, #0
 8014b20:	f8d7 11c4 	ldr.w	r1, [r7, #452]	@ 0x1c4
 8014b24:	040b      	lsls	r3, r1, #16
 8014b26:	f8d7 11c0 	ldr.w	r1, [r7, #448]	@ 0x1c0
 8014b2a:	ea43 4311 	orr.w	r3, r3, r1, lsr #16
 8014b2e:	f8d7 11c0 	ldr.w	r1, [r7, #448]	@ 0x1c0
 8014b32:	040a      	lsls	r2, r1, #16
 8014b34:	ea4a 0802 	orr.w	r8, sl, r2
 8014b38:	ea4b 0903 	orr.w	r9, fp, r3
           ((uint64_t) data[j + 6] << 8) | ((uint64_t) data[j + 7]);
 8014b3c:	f8d7 3460 	ldr.w	r3, [r7, #1120]	@ 0x460
 8014b40:	1d9a      	adds	r2, r3, #6
 8014b42:	f507 6395 	add.w	r3, r7, #1192	@ 0x4a8
 8014b46:	f5a3 7338 	sub.w	r3, r3, #736	@ 0x2e0
 8014b4a:	681b      	ldr	r3, [r3, #0]
 8014b4c:	4413      	add	r3, r2
 8014b4e:	781b      	ldrb	r3, [r3, #0]
 8014b50:	b2db      	uxtb	r3, r3
 8014b52:	2200      	movs	r2, #0
 8014b54:	f8c7 31b8 	str.w	r3, [r7, #440]	@ 0x1b8
 8014b58:	f8c7 21bc 	str.w	r2, [r7, #444]	@ 0x1bc
 8014b5c:	f04f 0200 	mov.w	r2, #0
 8014b60:	f04f 0300 	mov.w	r3, #0
 8014b64:	f8d7 11bc 	ldr.w	r1, [r7, #444]	@ 0x1bc
 8014b68:	020b      	lsls	r3, r1, #8
 8014b6a:	f8d7 11b8 	ldr.w	r1, [r7, #440]	@ 0x1b8
 8014b6e:	ea43 6311 	orr.w	r3, r3, r1, lsr #24
 8014b72:	f8d7 11b8 	ldr.w	r1, [r7, #440]	@ 0x1b8
 8014b76:	020a      	lsls	r2, r1, #8
           ((uint64_t) data[j + 4] << 24) | ((uint64_t) data[j + 5] << 16) |
 8014b78:	ea48 0402 	orr.w	r4, r8, r2
 8014b7c:	ea49 0503 	orr.w	r5, r9, r3
           ((uint64_t) data[j + 6] << 8) | ((uint64_t) data[j + 7]);
 8014b80:	f8d7 3460 	ldr.w	r3, [r7, #1120]	@ 0x460
 8014b84:	1dda      	adds	r2, r3, #7
 8014b86:	f507 6395 	add.w	r3, r7, #1192	@ 0x4a8
 8014b8a:	f5a3 7338 	sub.w	r3, r3, #736	@ 0x2e0
 8014b8e:	681b      	ldr	r3, [r3, #0]
 8014b90:	4413      	add	r3, r2
 8014b92:	781b      	ldrb	r3, [r3, #0]
 8014b94:	b2db      	uxtb	r3, r3
 8014b96:	2200      	movs	r2, #0
 8014b98:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
 8014b9c:	f8c7 216c 	str.w	r2, [r7, #364]	@ 0x16c
 8014ba0:	e9d7 125a 	ldrd	r1, r2, [r7, #360]	@ 0x168
 8014ba4:	460b      	mov	r3, r1
 8014ba6:	4323      	orrs	r3, r4
 8014ba8:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
 8014bac:	4613      	mov	r3, r2
 8014bae:	432b      	orrs	r3, r5
 8014bb0:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
    m[i] = ((uint64_t) data[j] << 56) | ((uint64_t) data[j + 1] << 48) |
 8014bb4:	f507 6395 	add.w	r3, r7, #1192	@ 0x4a8
 8014bb8:	f5a3 7236 	sub.w	r2, r3, #728	@ 0x2d8
 8014bbc:	f8d7 3464 	ldr.w	r3, [r7, #1124]	@ 0x464
 8014bc0:	00db      	lsls	r3, r3, #3
 8014bc2:	4413      	add	r3, r2
 8014bc4:	e9d7 1258 	ldrd	r1, r2, [r7, #352]	@ 0x160
 8014bc8:	e9c3 1200 	strd	r1, r2, [r3]
  for (i = 0, j = 0; i < 16; ++i, j += 8)
 8014bcc:	f8d7 3464 	ldr.w	r3, [r7, #1124]	@ 0x464
 8014bd0:	3301      	adds	r3, #1
 8014bd2:	f8c7 3464 	str.w	r3, [r7, #1124]	@ 0x464
 8014bd6:	f8d7 3460 	ldr.w	r3, [r7, #1120]	@ 0x460
 8014bda:	3308      	adds	r3, #8
 8014bdc:	f8c7 3460 	str.w	r3, [r7, #1120]	@ 0x460
 8014be0:	f8d7 3464 	ldr.w	r3, [r7, #1124]	@ 0x464
 8014be4:	2b0f      	cmp	r3, #15
 8014be6:	f77f aee7 	ble.w	80149b8 <mg_sha384_transform+0x2c>
  for (; i < 80; ++i)
 8014bea:	e0f8      	b.n	8014dde <mg_sha384_transform+0x452>
    m[i] = sig164(m[i - 2]) + m[i - 7] + sig064(m[i - 15]) + m[i - 16];
 8014bec:	f8d7 3464 	ldr.w	r3, [r7, #1124]	@ 0x464
 8014bf0:	1e99      	subs	r1, r3, #2
 8014bf2:	f507 6395 	add.w	r3, r7, #1192	@ 0x4a8
 8014bf6:	f5a3 7236 	sub.w	r2, r3, #728	@ 0x2d8
 8014bfa:	00cb      	lsls	r3, r1, #3
 8014bfc:	4413      	add	r3, r2
 8014bfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014c02:	0358      	lsls	r0, r3, #13
 8014c04:	0cd1      	lsrs	r1, r2, #19
 8014c06:	4301      	orrs	r1, r0
 8014c08:	f8c7 1158 	str.w	r1, [r7, #344]	@ 0x158
 8014c0c:	0351      	lsls	r1, r2, #13
 8014c0e:	0cdb      	lsrs	r3, r3, #19
 8014c10:	430b      	orrs	r3, r1
 8014c12:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
 8014c16:	f8d7 3464 	ldr.w	r3, [r7, #1124]	@ 0x464
 8014c1a:	1e99      	subs	r1, r3, #2
 8014c1c:	f507 6395 	add.w	r3, r7, #1192	@ 0x4a8
 8014c20:	f5a3 7236 	sub.w	r2, r3, #728	@ 0x2d8
 8014c24:	00cb      	lsls	r3, r1, #3
 8014c26:	4413      	add	r3, r2
 8014c28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014c2c:	0f50      	lsrs	r0, r2, #29
 8014c2e:	00d9      	lsls	r1, r3, #3
 8014c30:	4301      	orrs	r1, r0
 8014c32:	f8c7 1154 	str.w	r1, [r7, #340]	@ 0x154
 8014c36:	0f59      	lsrs	r1, r3, #29
 8014c38:	00d3      	lsls	r3, r2, #3
 8014c3a:	430b      	orrs	r3, r1
 8014c3c:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 8014c40:	e9d7 4556 	ldrd	r4, r5, [r7, #344]	@ 0x158
 8014c44:	4623      	mov	r3, r4
 8014c46:	e9d7 0154 	ldrd	r0, r1, [r7, #336]	@ 0x150
 8014c4a:	4602      	mov	r2, r0
 8014c4c:	4053      	eors	r3, r2
 8014c4e:	f8c7 3148 	str.w	r3, [r7, #328]	@ 0x148
 8014c52:	462b      	mov	r3, r5
 8014c54:	460a      	mov	r2, r1
 8014c56:	4053      	eors	r3, r2
 8014c58:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
 8014c5c:	f8d7 3464 	ldr.w	r3, [r7, #1124]	@ 0x464
 8014c60:	1e99      	subs	r1, r3, #2
 8014c62:	f507 6395 	add.w	r3, r7, #1192	@ 0x4a8
 8014c66:	f5a3 7236 	sub.w	r2, r3, #728	@ 0x2d8
 8014c6a:	00cb      	lsls	r3, r1, #3
 8014c6c:	4413      	add	r3, r2
 8014c6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014c72:	f04f 0000 	mov.w	r0, #0
 8014c76:	f04f 0100 	mov.w	r1, #0
 8014c7a:	0990      	lsrs	r0, r2, #6
 8014c7c:	ea40 6083 	orr.w	r0, r0, r3, lsl #26
 8014c80:	0999      	lsrs	r1, r3, #6
 8014c82:	e9d7 4552 	ldrd	r4, r5, [r7, #328]	@ 0x148
 8014c86:	4623      	mov	r3, r4
 8014c88:	4043      	eors	r3, r0
 8014c8a:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
 8014c8e:	462b      	mov	r3, r5
 8014c90:	404b      	eors	r3, r1
 8014c92:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144
 8014c96:	f8d7 3464 	ldr.w	r3, [r7, #1124]	@ 0x464
 8014c9a:	1fd9      	subs	r1, r3, #7
 8014c9c:	f507 6395 	add.w	r3, r7, #1192	@ 0x4a8
 8014ca0:	f5a3 7236 	sub.w	r2, r3, #728	@ 0x2d8
 8014ca4:	00cb      	lsls	r3, r1, #3
 8014ca6:	4413      	add	r3, r2
 8014ca8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014cac:	e9d7 4550 	ldrd	r4, r5, [r7, #320]	@ 0x140
 8014cb0:	4621      	mov	r1, r4
 8014cb2:	1889      	adds	r1, r1, r2
 8014cb4:	f8c7 1138 	str.w	r1, [r7, #312]	@ 0x138
 8014cb8:	4629      	mov	r1, r5
 8014cba:	eb41 0303 	adc.w	r3, r1, r3
 8014cbe:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
 8014cc2:	f8d7 3464 	ldr.w	r3, [r7, #1124]	@ 0x464
 8014cc6:	f1a3 010f 	sub.w	r1, r3, #15
 8014cca:	f507 6395 	add.w	r3, r7, #1192	@ 0x4a8
 8014cce:	f5a3 7236 	sub.w	r2, r3, #728	@ 0x2d8
 8014cd2:	00cb      	lsls	r3, r1, #3
 8014cd4:	4413      	add	r3, r2
 8014cd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014cda:	07d8      	lsls	r0, r3, #31
 8014cdc:	0851      	lsrs	r1, r2, #1
 8014cde:	4301      	orrs	r1, r0
 8014ce0:	f8c7 1130 	str.w	r1, [r7, #304]	@ 0x130
 8014ce4:	07d1      	lsls	r1, r2, #31
 8014ce6:	085b      	lsrs	r3, r3, #1
 8014ce8:	430b      	orrs	r3, r1
 8014cea:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
 8014cee:	f8d7 3464 	ldr.w	r3, [r7, #1124]	@ 0x464
 8014cf2:	f1a3 010f 	sub.w	r1, r3, #15
 8014cf6:	f507 6395 	add.w	r3, r7, #1192	@ 0x4a8
 8014cfa:	f5a3 7236 	sub.w	r2, r3, #728	@ 0x2d8
 8014cfe:	00cb      	lsls	r3, r1, #3
 8014d00:	4413      	add	r3, r2
 8014d02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014d06:	0618      	lsls	r0, r3, #24
 8014d08:	0a11      	lsrs	r1, r2, #8
 8014d0a:	4301      	orrs	r1, r0
 8014d0c:	f8c7 1128 	str.w	r1, [r7, #296]	@ 0x128
 8014d10:	0611      	lsls	r1, r2, #24
 8014d12:	0a1b      	lsrs	r3, r3, #8
 8014d14:	430b      	orrs	r3, r1
 8014d16:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 8014d1a:	e9d7 454c 	ldrd	r4, r5, [r7, #304]	@ 0x130
 8014d1e:	4623      	mov	r3, r4
 8014d20:	e9d7 014a 	ldrd	r0, r1, [r7, #296]	@ 0x128
 8014d24:	4602      	mov	r2, r0
 8014d26:	4053      	eors	r3, r2
 8014d28:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 8014d2c:	462b      	mov	r3, r5
 8014d2e:	460a      	mov	r2, r1
 8014d30:	4053      	eors	r3, r2
 8014d32:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 8014d36:	f8d7 3464 	ldr.w	r3, [r7, #1124]	@ 0x464
 8014d3a:	f1a3 010f 	sub.w	r1, r3, #15
 8014d3e:	f507 6395 	add.w	r3, r7, #1192	@ 0x4a8
 8014d42:	f5a3 7236 	sub.w	r2, r3, #728	@ 0x2d8
 8014d46:	00cb      	lsls	r3, r1, #3
 8014d48:	4413      	add	r3, r2
 8014d4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014d4e:	f04f 0000 	mov.w	r0, #0
 8014d52:	f04f 0100 	mov.w	r1, #0
 8014d56:	09d0      	lsrs	r0, r2, #7
 8014d58:	ea40 6043 	orr.w	r0, r0, r3, lsl #25
 8014d5c:	09d9      	lsrs	r1, r3, #7
 8014d5e:	e9d7 4548 	ldrd	r4, r5, [r7, #288]	@ 0x120
 8014d62:	4623      	mov	r3, r4
 8014d64:	4043      	eors	r3, r0
 8014d66:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
 8014d6a:	462b      	mov	r3, r5
 8014d6c:	404b      	eors	r3, r1
 8014d6e:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 8014d72:	e9d7 454e 	ldrd	r4, r5, [r7, #312]	@ 0x138
 8014d76:	4623      	mov	r3, r4
 8014d78:	e9d7 0146 	ldrd	r0, r1, [r7, #280]	@ 0x118
 8014d7c:	4602      	mov	r2, r0
 8014d7e:	189b      	adds	r3, r3, r2
 8014d80:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
 8014d84:	462b      	mov	r3, r5
 8014d86:	460a      	mov	r2, r1
 8014d88:	4153      	adcs	r3, r2
 8014d8a:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
 8014d8e:	f8d7 3464 	ldr.w	r3, [r7, #1124]	@ 0x464
 8014d92:	f1a3 0110 	sub.w	r1, r3, #16
 8014d96:	f507 6395 	add.w	r3, r7, #1192	@ 0x4a8
 8014d9a:	f5a3 7236 	sub.w	r2, r3, #728	@ 0x2d8
 8014d9e:	00cb      	lsls	r3, r1, #3
 8014da0:	4413      	add	r3, r2
 8014da2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014da6:	e9d7 4544 	ldrd	r4, r5, [r7, #272]	@ 0x110
 8014daa:	4621      	mov	r1, r4
 8014dac:	1889      	adds	r1, r1, r2
 8014dae:	f8c7 1108 	str.w	r1, [r7, #264]	@ 0x108
 8014db2:	4629      	mov	r1, r5
 8014db4:	eb41 0303 	adc.w	r3, r1, r3
 8014db8:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8014dbc:	f507 6395 	add.w	r3, r7, #1192	@ 0x4a8
 8014dc0:	f5a3 7236 	sub.w	r2, r3, #728	@ 0x2d8
 8014dc4:	f8d7 3464 	ldr.w	r3, [r7, #1124]	@ 0x464
 8014dc8:	00db      	lsls	r3, r3, #3
 8014dca:	4413      	add	r3, r2
 8014dcc:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8014dd0:	e9c3 1200 	strd	r1, r2, [r3]
  for (; i < 80; ++i)
 8014dd4:	f8d7 3464 	ldr.w	r3, [r7, #1124]	@ 0x464
 8014dd8:	3301      	adds	r3, #1
 8014dda:	f8c7 3464 	str.w	r3, [r7, #1124]	@ 0x464
 8014dde:	f8d7 3464 	ldr.w	r3, [r7, #1124]	@ 0x464
 8014de2:	2b4f      	cmp	r3, #79	@ 0x4f
 8014de4:	f77f af02 	ble.w	8014bec <mg_sha384_transform+0x260>

  a = ctx->state[0];
 8014de8:	f507 6395 	add.w	r3, r7, #1192	@ 0x4a8
 8014dec:	f5a3 7337 	sub.w	r3, r3, #732	@ 0x2dc
 8014df0:	681b      	ldr	r3, [r3, #0]
 8014df2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014df6:	f507 6194 	add.w	r1, r7, #1184	@ 0x4a0
 8014dfa:	e9c1 2300 	strd	r2, r3, [r1]
  b = ctx->state[1];
 8014dfe:	f507 6395 	add.w	r3, r7, #1192	@ 0x4a8
 8014e02:	f5a3 7337 	sub.w	r3, r3, #732	@ 0x2dc
 8014e06:	681b      	ldr	r3, [r3, #0]
 8014e08:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8014e0c:	f507 6193 	add.w	r1, r7, #1176	@ 0x498
 8014e10:	e9c1 2300 	strd	r2, r3, [r1]
  c = ctx->state[2];
 8014e14:	f507 6395 	add.w	r3, r7, #1192	@ 0x4a8
 8014e18:	f5a3 7337 	sub.w	r3, r3, #732	@ 0x2dc
 8014e1c:	681b      	ldr	r3, [r3, #0]
 8014e1e:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8014e22:	f507 6192 	add.w	r1, r7, #1168	@ 0x490
 8014e26:	e9c1 2300 	strd	r2, r3, [r1]
  d = ctx->state[3];
 8014e2a:	f507 6395 	add.w	r3, r7, #1192	@ 0x4a8
 8014e2e:	f5a3 7337 	sub.w	r3, r3, #732	@ 0x2dc
 8014e32:	681b      	ldr	r3, [r3, #0]
 8014e34:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8014e38:	f507 6191 	add.w	r1, r7, #1160	@ 0x488
 8014e3c:	e9c1 2300 	strd	r2, r3, [r1]
  e = ctx->state[4];
 8014e40:	f507 6395 	add.w	r3, r7, #1192	@ 0x4a8
 8014e44:	f5a3 7337 	sub.w	r3, r3, #732	@ 0x2dc
 8014e48:	681b      	ldr	r3, [r3, #0]
 8014e4a:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8014e4e:	f507 6190 	add.w	r1, r7, #1152	@ 0x480
 8014e52:	e9c1 2300 	strd	r2, r3, [r1]
  f = ctx->state[5];
 8014e56:	f507 6395 	add.w	r3, r7, #1192	@ 0x4a8
 8014e5a:	f5a3 7337 	sub.w	r3, r3, #732	@ 0x2dc
 8014e5e:	681b      	ldr	r3, [r3, #0]
 8014e60:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
 8014e64:	f507 618f 	add.w	r1, r7, #1144	@ 0x478
 8014e68:	e9c1 2300 	strd	r2, r3, [r1]
  g = ctx->state[6];
 8014e6c:	f507 6395 	add.w	r3, r7, #1192	@ 0x4a8
 8014e70:	f5a3 7337 	sub.w	r3, r3, #732	@ 0x2dc
 8014e74:	681b      	ldr	r3, [r3, #0]
 8014e76:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 8014e7a:	f507 618e 	add.w	r1, r7, #1136	@ 0x470
 8014e7e:	e9c1 2300 	strd	r2, r3, [r1]
  h = ctx->state[7];
 8014e82:	f507 6395 	add.w	r3, r7, #1192	@ 0x4a8
 8014e86:	f5a3 7337 	sub.w	r3, r3, #732	@ 0x2dc
 8014e8a:	681b      	ldr	r3, [r3, #0]
 8014e8c:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8014e90:	f507 618d 	add.w	r1, r7, #1128	@ 0x468
 8014e94:	e9c1 2300 	strd	r2, r3, [r1]

  for (i = 0; i < 80; ++i) {
 8014e98:	2300      	movs	r3, #0
 8014e9a:	f8c7 3464 	str.w	r3, [r7, #1124]	@ 0x464
 8014e9e:	e1c3      	b.n	8015228 <mg_sha384_transform+0x89c>
    uint64_t t1 = h + ep164(e) + ch(e, f, g) + mg_sha256_k2[i] + m[i];
 8014ea0:	f8d7 3484 	ldr.w	r3, [r7, #1156]	@ 0x484
 8014ea4:	049a      	lsls	r2, r3, #18
 8014ea6:	f8d7 3480 	ldr.w	r3, [r7, #1152]	@ 0x480
 8014eaa:	0b9b      	lsrs	r3, r3, #14
 8014eac:	4313      	orrs	r3, r2
 8014eae:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8014eb2:	f8d7 3480 	ldr.w	r3, [r7, #1152]	@ 0x480
 8014eb6:	049a      	lsls	r2, r3, #18
 8014eb8:	f8d7 3484 	ldr.w	r3, [r7, #1156]	@ 0x484
 8014ebc:	0b9b      	lsrs	r3, r3, #14
 8014ebe:	4313      	orrs	r3, r2
 8014ec0:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8014ec4:	f8d7 3484 	ldr.w	r3, [r7, #1156]	@ 0x484
 8014ec8:	039a      	lsls	r2, r3, #14
 8014eca:	f8d7 3480 	ldr.w	r3, [r7, #1152]	@ 0x480
 8014ece:	0c9b      	lsrs	r3, r3, #18
 8014ed0:	4313      	orrs	r3, r2
 8014ed2:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8014ed6:	f8d7 3480 	ldr.w	r3, [r7, #1152]	@ 0x480
 8014eda:	039a      	lsls	r2, r3, #14
 8014edc:	f8d7 3484 	ldr.w	r3, [r7, #1156]	@ 0x484
 8014ee0:	0c9b      	lsrs	r3, r3, #18
 8014ee2:	4313      	orrs	r3, r2
 8014ee4:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8014ee8:	e9d7 4540 	ldrd	r4, r5, [r7, #256]	@ 0x100
 8014eec:	4623      	mov	r3, r4
 8014eee:	e9d7 013e 	ldrd	r0, r1, [r7, #248]	@ 0xf8
 8014ef2:	4602      	mov	r2, r0
 8014ef4:	4053      	eors	r3, r2
 8014ef6:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8014efa:	462b      	mov	r3, r5
 8014efc:	460a      	mov	r2, r1
 8014efe:	4053      	eors	r3, r2
 8014f00:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8014f04:	f8d7 3480 	ldr.w	r3, [r7, #1152]	@ 0x480
 8014f08:	0a5a      	lsrs	r2, r3, #9
 8014f0a:	f8d7 3484 	ldr.w	r3, [r7, #1156]	@ 0x484
 8014f0e:	05db      	lsls	r3, r3, #23
 8014f10:	4313      	orrs	r3, r2
 8014f12:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8014f16:	f8d7 3484 	ldr.w	r3, [r7, #1156]	@ 0x484
 8014f1a:	0a5a      	lsrs	r2, r3, #9
 8014f1c:	f8d7 3480 	ldr.w	r3, [r7, #1152]	@ 0x480
 8014f20:	05db      	lsls	r3, r3, #23
 8014f22:	4313      	orrs	r3, r2
 8014f24:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8014f28:	e9d7 453c 	ldrd	r4, r5, [r7, #240]	@ 0xf0
 8014f2c:	4623      	mov	r3, r4
 8014f2e:	e9d7 013a 	ldrd	r0, r1, [r7, #232]	@ 0xe8
 8014f32:	4602      	mov	r2, r0
 8014f34:	4053      	eors	r3, r2
 8014f36:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8014f3a:	462b      	mov	r3, r5
 8014f3c:	460a      	mov	r2, r1
 8014f3e:	4053      	eors	r3, r2
 8014f40:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8014f44:	f507 638d 	add.w	r3, r7, #1128	@ 0x468
 8014f48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014f4c:	e9d7 4538 	ldrd	r4, r5, [r7, #224]	@ 0xe0
 8014f50:	4621      	mov	r1, r4
 8014f52:	1889      	adds	r1, r1, r2
 8014f54:	f8c7 10d8 	str.w	r1, [r7, #216]	@ 0xd8
 8014f58:	4629      	mov	r1, r5
 8014f5a:	eb41 0303 	adc.w	r3, r1, r3
 8014f5e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8014f62:	f507 6390 	add.w	r3, r7, #1152	@ 0x480
 8014f66:	e9d3 0100 	ldrd	r0, r1, [r3]
 8014f6a:	f507 638f 	add.w	r3, r7, #1144	@ 0x478
 8014f6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014f72:	ea00 0402 	and.w	r4, r0, r2
 8014f76:	f8c7 40d0 	str.w	r4, [r7, #208]	@ 0xd0
 8014f7a:	400b      	ands	r3, r1
 8014f7c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8014f80:	f507 6390 	add.w	r3, r7, #1152	@ 0x480
 8014f84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014f88:	43d1      	mvns	r1, r2
 8014f8a:	f8c7 10c8 	str.w	r1, [r7, #200]	@ 0xc8
 8014f8e:	43db      	mvns	r3, r3
 8014f90:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8014f94:	f507 638e 	add.w	r3, r7, #1136	@ 0x470
 8014f98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014f9c:	e9d7 4532 	ldrd	r4, r5, [r7, #200]	@ 0xc8
 8014fa0:	4621      	mov	r1, r4
 8014fa2:	4011      	ands	r1, r2
 8014fa4:	f8c7 10c0 	str.w	r1, [r7, #192]	@ 0xc0
 8014fa8:	4629      	mov	r1, r5
 8014faa:	400b      	ands	r3, r1
 8014fac:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8014fb0:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	@ 0xd0
 8014fb4:	4623      	mov	r3, r4
 8014fb6:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	@ 0xc0
 8014fba:	4602      	mov	r2, r0
 8014fbc:	4053      	eors	r3, r2
 8014fbe:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8014fc2:	462b      	mov	r3, r5
 8014fc4:	460a      	mov	r2, r1
 8014fc6:	4053      	eors	r3, r2
 8014fc8:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8014fcc:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	@ 0xd8
 8014fd0:	4623      	mov	r3, r4
 8014fd2:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	@ 0xb8
 8014fd6:	4602      	mov	r2, r0
 8014fd8:	189b      	adds	r3, r3, r2
 8014fda:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8014fde:	462b      	mov	r3, r5
 8014fe0:	460a      	mov	r2, r1
 8014fe2:	4153      	adcs	r3, r2
 8014fe4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8014fe8:	4a8e      	ldr	r2, [pc, #568]	@ (8015224 <mg_sha384_transform+0x898>)
 8014fea:	f8d7 3464 	ldr.w	r3, [r7, #1124]	@ 0x464
 8014fee:	00db      	lsls	r3, r3, #3
 8014ff0:	4413      	add	r3, r2
 8014ff2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014ff6:	e9d7 452c 	ldrd	r4, r5, [r7, #176]	@ 0xb0
 8014ffa:	4621      	mov	r1, r4
 8014ffc:	1889      	adds	r1, r1, r2
 8014ffe:	f8c7 10a8 	str.w	r1, [r7, #168]	@ 0xa8
 8015002:	4629      	mov	r1, r5
 8015004:	eb41 0303 	adc.w	r3, r1, r3
 8015008:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 801500c:	f507 6395 	add.w	r3, r7, #1192	@ 0x4a8
 8015010:	f5a3 7236 	sub.w	r2, r3, #728	@ 0x2d8
 8015014:	f8d7 3464 	ldr.w	r3, [r7, #1124]	@ 0x464
 8015018:	00db      	lsls	r3, r3, #3
 801501a:	4413      	add	r3, r2
 801501c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015020:	e9d7 452a 	ldrd	r4, r5, [r7, #168]	@ 0xa8
 8015024:	4621      	mov	r1, r4
 8015026:	1889      	adds	r1, r1, r2
 8015028:	61b9      	str	r1, [r7, #24]
 801502a:	4629      	mov	r1, r5
 801502c:	eb41 0303 	adc.w	r3, r1, r3
 8015030:	61fb      	str	r3, [r7, #28]
 8015032:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8015036:	f507 628b 	add.w	r2, r7, #1112	@ 0x458
 801503a:	e9c2 3400 	strd	r3, r4, [r2]
    uint64_t t2 = ep064(a) + maj(a, b, c);
 801503e:	f8d7 34a4 	ldr.w	r3, [r7, #1188]	@ 0x4a4
 8015042:	011a      	lsls	r2, r3, #4
 8015044:	f8d7 34a0 	ldr.w	r3, [r7, #1184]	@ 0x4a0
 8015048:	0f1b      	lsrs	r3, r3, #28
 801504a:	4313      	orrs	r3, r2
 801504c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8015050:	f8d7 34a0 	ldr.w	r3, [r7, #1184]	@ 0x4a0
 8015054:	011a      	lsls	r2, r3, #4
 8015056:	f8d7 34a4 	ldr.w	r3, [r7, #1188]	@ 0x4a4
 801505a:	0f1b      	lsrs	r3, r3, #28
 801505c:	4313      	orrs	r3, r2
 801505e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8015062:	f8d7 34a0 	ldr.w	r3, [r7, #1184]	@ 0x4a0
 8015066:	089a      	lsrs	r2, r3, #2
 8015068:	f8d7 34a4 	ldr.w	r3, [r7, #1188]	@ 0x4a4
 801506c:	079b      	lsls	r3, r3, #30
 801506e:	4313      	orrs	r3, r2
 8015070:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8015074:	f8d7 34a4 	ldr.w	r3, [r7, #1188]	@ 0x4a4
 8015078:	089a      	lsrs	r2, r3, #2
 801507a:	f8d7 34a0 	ldr.w	r3, [r7, #1184]	@ 0x4a0
 801507e:	079b      	lsls	r3, r3, #30
 8015080:	4313      	orrs	r3, r2
 8015082:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8015086:	e9d7 4528 	ldrd	r4, r5, [r7, #160]	@ 0xa0
 801508a:	4623      	mov	r3, r4
 801508c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8015090:	4602      	mov	r2, r0
 8015092:	4053      	eors	r3, r2
 8015094:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8015098:	462b      	mov	r3, r5
 801509a:	460a      	mov	r2, r1
 801509c:	4053      	eors	r3, r2
 801509e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80150a2:	f8d7 34a0 	ldr.w	r3, [r7, #1184]	@ 0x4a0
 80150a6:	09da      	lsrs	r2, r3, #7
 80150a8:	f8d7 34a4 	ldr.w	r3, [r7, #1188]	@ 0x4a4
 80150ac:	065b      	lsls	r3, r3, #25
 80150ae:	4313      	orrs	r3, r2
 80150b0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80150b4:	f8d7 34a4 	ldr.w	r3, [r7, #1188]	@ 0x4a4
 80150b8:	09da      	lsrs	r2, r3, #7
 80150ba:	f8d7 34a0 	ldr.w	r3, [r7, #1184]	@ 0x4a0
 80150be:	065b      	lsls	r3, r3, #25
 80150c0:	4313      	orrs	r3, r2
 80150c2:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80150c6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80150ca:	4623      	mov	r3, r4
 80150cc:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	@ 0x88
 80150d0:	4602      	mov	r2, r0
 80150d2:	4053      	eors	r3, r2
 80150d4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80150d8:	462b      	mov	r3, r5
 80150da:	460a      	mov	r2, r1
 80150dc:	4053      	eors	r3, r2
 80150de:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80150e2:	f507 6393 	add.w	r3, r7, #1176	@ 0x498
 80150e6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80150ea:	f507 6392 	add.w	r3, r7, #1168	@ 0x490
 80150ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80150f2:	ea80 0402 	eor.w	r4, r0, r2
 80150f6:	67bc      	str	r4, [r7, #120]	@ 0x78
 80150f8:	404b      	eors	r3, r1
 80150fa:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80150fc:	f507 6394 	add.w	r3, r7, #1184	@ 0x4a0
 8015100:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015104:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8015108:	4621      	mov	r1, r4
 801510a:	4011      	ands	r1, r2
 801510c:	6739      	str	r1, [r7, #112]	@ 0x70
 801510e:	4629      	mov	r1, r5
 8015110:	400b      	ands	r3, r1
 8015112:	677b      	str	r3, [r7, #116]	@ 0x74
 8015114:	f507 6393 	add.w	r3, r7, #1176	@ 0x498
 8015118:	e9d3 0100 	ldrd	r0, r1, [r3]
 801511c:	f507 6392 	add.w	r3, r7, #1168	@ 0x490
 8015120:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015124:	ea00 0402 	and.w	r4, r0, r2
 8015128:	66bc      	str	r4, [r7, #104]	@ 0x68
 801512a:	400b      	ands	r3, r1
 801512c:	66fb      	str	r3, [r7, #108]	@ 0x6c
 801512e:	e9d7 451c 	ldrd	r4, r5, [r7, #112]	@ 0x70
 8015132:	4623      	mov	r3, r4
 8015134:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8015138:	4602      	mov	r2, r0
 801513a:	4053      	eors	r3, r2
 801513c:	663b      	str	r3, [r7, #96]	@ 0x60
 801513e:	462b      	mov	r3, r5
 8015140:	460a      	mov	r2, r1
 8015142:	4053      	eors	r3, r2
 8015144:	667b      	str	r3, [r7, #100]	@ 0x64
 8015146:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	@ 0x80
 801514a:	4623      	mov	r3, r4
 801514c:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	@ 0x60
 8015150:	4602      	mov	r2, r0
 8015152:	189b      	adds	r3, r3, r2
 8015154:	613b      	str	r3, [r7, #16]
 8015156:	462b      	mov	r3, r5
 8015158:	460a      	mov	r2, r1
 801515a:	4153      	adcs	r3, r2
 801515c:	617b      	str	r3, [r7, #20]
 801515e:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8015162:	f507 628a 	add.w	r2, r7, #1104	@ 0x450
 8015166:	e9c2 3400 	strd	r3, r4, [r2]
    h = g;
 801516a:	f507 638e 	add.w	r3, r7, #1136	@ 0x470
 801516e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015172:	f507 618d 	add.w	r1, r7, #1128	@ 0x468
 8015176:	e9c1 2300 	strd	r2, r3, [r1]
    g = f;
 801517a:	f507 638f 	add.w	r3, r7, #1144	@ 0x478
 801517e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015182:	f507 618e 	add.w	r1, r7, #1136	@ 0x470
 8015186:	e9c1 2300 	strd	r2, r3, [r1]
    f = e;
 801518a:	f507 6390 	add.w	r3, r7, #1152	@ 0x480
 801518e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015192:	f507 618f 	add.w	r1, r7, #1144	@ 0x478
 8015196:	e9c1 2300 	strd	r2, r3, [r1]
    e = d + t1;
 801519a:	f507 6391 	add.w	r3, r7, #1160	@ 0x488
 801519e:	e9d3 0100 	ldrd	r0, r1, [r3]
 80151a2:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 80151a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80151aa:	1884      	adds	r4, r0, r2
 80151ac:	60bc      	str	r4, [r7, #8]
 80151ae:	eb41 0303 	adc.w	r3, r1, r3
 80151b2:	60fb      	str	r3, [r7, #12]
 80151b4:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 80151b8:	f507 6290 	add.w	r2, r7, #1152	@ 0x480
 80151bc:	e9c2 3400 	strd	r3, r4, [r2]
    d = c;
 80151c0:	f507 6392 	add.w	r3, r7, #1168	@ 0x490
 80151c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80151c8:	f507 6191 	add.w	r1, r7, #1160	@ 0x488
 80151cc:	e9c1 2300 	strd	r2, r3, [r1]
    c = b;
 80151d0:	f507 6393 	add.w	r3, r7, #1176	@ 0x498
 80151d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80151d8:	f507 6192 	add.w	r1, r7, #1168	@ 0x490
 80151dc:	e9c1 2300 	strd	r2, r3, [r1]
    b = a;
 80151e0:	f507 6394 	add.w	r3, r7, #1184	@ 0x4a0
 80151e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80151e8:	f507 6193 	add.w	r1, r7, #1176	@ 0x498
 80151ec:	e9c1 2300 	strd	r2, r3, [r1]
    a = t1 + t2;
 80151f0:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 80151f4:	e9d3 0100 	ldrd	r0, r1, [r3]
 80151f8:	f507 638a 	add.w	r3, r7, #1104	@ 0x450
 80151fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015200:	1884      	adds	r4, r0, r2
 8015202:	603c      	str	r4, [r7, #0]
 8015204:	eb41 0303 	adc.w	r3, r1, r3
 8015208:	607b      	str	r3, [r7, #4]
 801520a:	e9d7 3400 	ldrd	r3, r4, [r7]
 801520e:	f507 6294 	add.w	r2, r7, #1184	@ 0x4a0
 8015212:	e9c2 3400 	strd	r3, r4, [r2]
  for (i = 0; i < 80; ++i) {
 8015216:	f8d7 3464 	ldr.w	r3, [r7, #1124]	@ 0x464
 801521a:	3301      	adds	r3, #1
 801521c:	f8c7 3464 	str.w	r3, [r7, #1124]	@ 0x464
 8015220:	e002      	b.n	8015228 <mg_sha384_transform+0x89c>
 8015222:	bf00      	nop
 8015224:	08028458 	.word	0x08028458
 8015228:	f8d7 3464 	ldr.w	r3, [r7, #1124]	@ 0x464
 801522c:	2b4f      	cmp	r3, #79	@ 0x4f
 801522e:	f77f ae37 	ble.w	8014ea0 <mg_sha384_transform+0x514>
  }

  ctx->state[0] += a;
 8015232:	f507 6395 	add.w	r3, r7, #1192	@ 0x4a8
 8015236:	f5a3 7337 	sub.w	r3, r3, #732	@ 0x2dc
 801523a:	681b      	ldr	r3, [r3, #0]
 801523c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8015240:	f507 6394 	add.w	r3, r7, #1184	@ 0x4a0
 8015244:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015248:	1884      	adds	r4, r0, r2
 801524a:	65bc      	str	r4, [r7, #88]	@ 0x58
 801524c:	eb41 0303 	adc.w	r3, r1, r3
 8015250:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8015252:	f507 6395 	add.w	r3, r7, #1192	@ 0x4a8
 8015256:	f5a3 7337 	sub.w	r3, r3, #732	@ 0x2dc
 801525a:	681b      	ldr	r3, [r3, #0]
 801525c:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8015260:	e9c3 1200 	strd	r1, r2, [r3]
  ctx->state[1] += b;
 8015264:	f507 6395 	add.w	r3, r7, #1192	@ 0x4a8
 8015268:	f5a3 7337 	sub.w	r3, r3, #732	@ 0x2dc
 801526c:	681b      	ldr	r3, [r3, #0]
 801526e:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8015272:	f507 6393 	add.w	r3, r7, #1176	@ 0x498
 8015276:	e9d3 2300 	ldrd	r2, r3, [r3]
 801527a:	1884      	adds	r4, r0, r2
 801527c:	653c      	str	r4, [r7, #80]	@ 0x50
 801527e:	eb41 0303 	adc.w	r3, r1, r3
 8015282:	657b      	str	r3, [r7, #84]	@ 0x54
 8015284:	f507 6395 	add.w	r3, r7, #1192	@ 0x4a8
 8015288:	f5a3 7337 	sub.w	r3, r3, #732	@ 0x2dc
 801528c:	681b      	ldr	r3, [r3, #0]
 801528e:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8015292:	e9c3 1202 	strd	r1, r2, [r3, #8]
  ctx->state[2] += c;
 8015296:	f507 6395 	add.w	r3, r7, #1192	@ 0x4a8
 801529a:	f5a3 7337 	sub.w	r3, r3, #732	@ 0x2dc
 801529e:	681b      	ldr	r3, [r3, #0]
 80152a0:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 80152a4:	f507 6392 	add.w	r3, r7, #1168	@ 0x490
 80152a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80152ac:	1884      	adds	r4, r0, r2
 80152ae:	64bc      	str	r4, [r7, #72]	@ 0x48
 80152b0:	eb41 0303 	adc.w	r3, r1, r3
 80152b4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80152b6:	f507 6395 	add.w	r3, r7, #1192	@ 0x4a8
 80152ba:	f5a3 7337 	sub.w	r3, r3, #732	@ 0x2dc
 80152be:	681b      	ldr	r3, [r3, #0]
 80152c0:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 80152c4:	e9c3 1204 	strd	r1, r2, [r3, #16]
  ctx->state[3] += d;
 80152c8:	f507 6395 	add.w	r3, r7, #1192	@ 0x4a8
 80152cc:	f5a3 7337 	sub.w	r3, r3, #732	@ 0x2dc
 80152d0:	681b      	ldr	r3, [r3, #0]
 80152d2:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 80152d6:	f507 6391 	add.w	r3, r7, #1160	@ 0x488
 80152da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80152de:	1884      	adds	r4, r0, r2
 80152e0:	643c      	str	r4, [r7, #64]	@ 0x40
 80152e2:	eb41 0303 	adc.w	r3, r1, r3
 80152e6:	647b      	str	r3, [r7, #68]	@ 0x44
 80152e8:	f507 6395 	add.w	r3, r7, #1192	@ 0x4a8
 80152ec:	f5a3 7337 	sub.w	r3, r3, #732	@ 0x2dc
 80152f0:	681b      	ldr	r3, [r3, #0]
 80152f2:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 80152f6:	e9c3 1206 	strd	r1, r2, [r3, #24]
  ctx->state[4] += e;
 80152fa:	f507 6395 	add.w	r3, r7, #1192	@ 0x4a8
 80152fe:	f5a3 7337 	sub.w	r3, r3, #732	@ 0x2dc
 8015302:	681b      	ldr	r3, [r3, #0]
 8015304:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 8015308:	f507 6390 	add.w	r3, r7, #1152	@ 0x480
 801530c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015310:	1884      	adds	r4, r0, r2
 8015312:	63bc      	str	r4, [r7, #56]	@ 0x38
 8015314:	eb41 0303 	adc.w	r3, r1, r3
 8015318:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801531a:	f507 6395 	add.w	r3, r7, #1192	@ 0x4a8
 801531e:	f5a3 7337 	sub.w	r3, r3, #732	@ 0x2dc
 8015322:	681b      	ldr	r3, [r3, #0]
 8015324:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8015328:	e9c3 1208 	strd	r1, r2, [r3, #32]
  ctx->state[5] += f;
 801532c:	f507 6395 	add.w	r3, r7, #1192	@ 0x4a8
 8015330:	f5a3 7337 	sub.w	r3, r3, #732	@ 0x2dc
 8015334:	681b      	ldr	r3, [r3, #0]
 8015336:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	@ 0x28
 801533a:	f507 638f 	add.w	r3, r7, #1144	@ 0x478
 801533e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015342:	1884      	adds	r4, r0, r2
 8015344:	633c      	str	r4, [r7, #48]	@ 0x30
 8015346:	eb41 0303 	adc.w	r3, r1, r3
 801534a:	637b      	str	r3, [r7, #52]	@ 0x34
 801534c:	f507 6395 	add.w	r3, r7, #1192	@ 0x4a8
 8015350:	f5a3 7337 	sub.w	r3, r3, #732	@ 0x2dc
 8015354:	681b      	ldr	r3, [r3, #0]
 8015356:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 801535a:	e9c3 120a 	strd	r1, r2, [r3, #40]	@ 0x28
  ctx->state[6] += g;
 801535e:	f507 6395 	add.w	r3, r7, #1192	@ 0x4a8
 8015362:	f5a3 7337 	sub.w	r3, r3, #732	@ 0x2dc
 8015366:	681b      	ldr	r3, [r3, #0]
 8015368:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	@ 0x30
 801536c:	f507 638e 	add.w	r3, r7, #1136	@ 0x470
 8015370:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015374:	1884      	adds	r4, r0, r2
 8015376:	62bc      	str	r4, [r7, #40]	@ 0x28
 8015378:	eb41 0303 	adc.w	r3, r1, r3
 801537c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801537e:	f507 6395 	add.w	r3, r7, #1192	@ 0x4a8
 8015382:	f5a3 7337 	sub.w	r3, r3, #732	@ 0x2dc
 8015386:	681b      	ldr	r3, [r3, #0]
 8015388:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 801538c:	e9c3 120c 	strd	r1, r2, [r3, #48]	@ 0x30
  ctx->state[7] += h;
 8015390:	f507 6395 	add.w	r3, r7, #1192	@ 0x4a8
 8015394:	f5a3 7337 	sub.w	r3, r3, #732	@ 0x2dc
 8015398:	681b      	ldr	r3, [r3, #0]
 801539a:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	@ 0x38
 801539e:	f507 638d 	add.w	r3, r7, #1128	@ 0x468
 80153a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80153a6:	1884      	adds	r4, r0, r2
 80153a8:	623c      	str	r4, [r7, #32]
 80153aa:	eb41 0303 	adc.w	r3, r1, r3
 80153ae:	627b      	str	r3, [r7, #36]	@ 0x24
 80153b0:	f507 6395 	add.w	r3, r7, #1192	@ 0x4a8
 80153b4:	f5a3 7337 	sub.w	r3, r3, #732	@ 0x2dc
 80153b8:	681b      	ldr	r3, [r3, #0]
 80153ba:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80153be:	e9c3 120e 	strd	r1, r2, [r3, #56]	@ 0x38
}
 80153c2:	bf00      	nop
 80153c4:	f507 6795 	add.w	r7, r7, #1192	@ 0x4a8
 80153c8:	46bd      	mov	sp, r7
 80153ca:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80153ce:	4770      	bx	lr

080153d0 <mg_sha384_init>:

void mg_sha384_init(mg_sha384_ctx *ctx) {
 80153d0:	b480      	push	{r7}
 80153d2:	b083      	sub	sp, #12
 80153d4:	af00      	add	r7, sp, #0
 80153d6:	6078      	str	r0, [r7, #4]
  ctx->datalen = 0;
 80153d8:	687b      	ldr	r3, [r7, #4]
 80153da:	2200      	movs	r2, #0
 80153dc:	f8c3 20d0 	str.w	r2, [r3, #208]	@ 0xd0
  ctx->bitlen[0] = 0;
 80153e0:	6879      	ldr	r1, [r7, #4]
 80153e2:	f04f 0200 	mov.w	r2, #0
 80153e6:	f04f 0300 	mov.w	r3, #0
 80153ea:	e9c1 2330 	strd	r2, r3, [r1, #192]	@ 0xc0
  ctx->bitlen[1] = 0;
 80153ee:	6879      	ldr	r1, [r7, #4]
 80153f0:	f04f 0200 	mov.w	r2, #0
 80153f4:	f04f 0300 	mov.w	r3, #0
 80153f8:	e9c1 2332 	strd	r2, r3, [r1, #200]	@ 0xc8
  ctx->state[0] = 0xcbbb9d5dc1059ed8;
 80153fc:	6879      	ldr	r1, [r7, #4]
 80153fe:	a31a      	add	r3, pc, #104	@ (adr r3, 8015468 <mg_sha384_init+0x98>)
 8015400:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015404:	e9c1 2300 	strd	r2, r3, [r1]
  ctx->state[1] = 0x629a292a367cd507;
 8015408:	6879      	ldr	r1, [r7, #4]
 801540a:	a319      	add	r3, pc, #100	@ (adr r3, 8015470 <mg_sha384_init+0xa0>)
 801540c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015410:	e9c1 2302 	strd	r2, r3, [r1, #8]
  ctx->state[2] = 0x9159015a3070dd17;
 8015414:	6879      	ldr	r1, [r7, #4]
 8015416:	a318      	add	r3, pc, #96	@ (adr r3, 8015478 <mg_sha384_init+0xa8>)
 8015418:	e9d3 2300 	ldrd	r2, r3, [r3]
 801541c:	e9c1 2304 	strd	r2, r3, [r1, #16]
  ctx->state[3] = 0x152fecd8f70e5939;
 8015420:	6879      	ldr	r1, [r7, #4]
 8015422:	a317      	add	r3, pc, #92	@ (adr r3, 8015480 <mg_sha384_init+0xb0>)
 8015424:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015428:	e9c1 2306 	strd	r2, r3, [r1, #24]
  ctx->state[4] = 0x67332667ffc00b31;
 801542c:	6879      	ldr	r1, [r7, #4]
 801542e:	a316      	add	r3, pc, #88	@ (adr r3, 8015488 <mg_sha384_init+0xb8>)
 8015430:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015434:	e9c1 2308 	strd	r2, r3, [r1, #32]
  ctx->state[5] = 0x8eb44a8768581511;
 8015438:	6879      	ldr	r1, [r7, #4]
 801543a:	a315      	add	r3, pc, #84	@ (adr r3, 8015490 <mg_sha384_init+0xc0>)
 801543c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015440:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
  ctx->state[6] = 0xdb0c2e0d64f98fa7;
 8015444:	6879      	ldr	r1, [r7, #4]
 8015446:	a314      	add	r3, pc, #80	@ (adr r3, 8015498 <mg_sha384_init+0xc8>)
 8015448:	e9d3 2300 	ldrd	r2, r3, [r3]
 801544c:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30
  ctx->state[7] = 0x47b5481dbefa4fa4;
 8015450:	6879      	ldr	r1, [r7, #4]
 8015452:	a313      	add	r3, pc, #76	@ (adr r3, 80154a0 <mg_sha384_init+0xd0>)
 8015454:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015458:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38
}
 801545c:	bf00      	nop
 801545e:	370c      	adds	r7, #12
 8015460:	46bd      	mov	sp, r7
 8015462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015466:	4770      	bx	lr
 8015468:	c1059ed8 	.word	0xc1059ed8
 801546c:	cbbb9d5d 	.word	0xcbbb9d5d
 8015470:	367cd507 	.word	0x367cd507
 8015474:	629a292a 	.word	0x629a292a
 8015478:	3070dd17 	.word	0x3070dd17
 801547c:	9159015a 	.word	0x9159015a
 8015480:	f70e5939 	.word	0xf70e5939
 8015484:	152fecd8 	.word	0x152fecd8
 8015488:	ffc00b31 	.word	0xffc00b31
 801548c:	67332667 	.word	0x67332667
 8015490:	68581511 	.word	0x68581511
 8015494:	8eb44a87 	.word	0x8eb44a87
 8015498:	64f98fa7 	.word	0x64f98fa7
 801549c:	db0c2e0d 	.word	0xdb0c2e0d
 80154a0:	befa4fa4 	.word	0xbefa4fa4
 80154a4:	47b5481d 	.word	0x47b5481d

080154a8 <mg_sha384_update>:

void mg_sha384_update(mg_sha384_ctx *ctx, const uint8_t *data, size_t len) {
 80154a8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80154ac:	b086      	sub	sp, #24
 80154ae:	af00      	add	r7, sp, #0
 80154b0:	60f8      	str	r0, [r7, #12]
 80154b2:	60b9      	str	r1, [r7, #8]
 80154b4:	607a      	str	r2, [r7, #4]
  size_t i;
  for (i = 0; i < len; ++i) {
 80154b6:	2300      	movs	r3, #0
 80154b8:	617b      	str	r3, [r7, #20]
 80154ba:	e040      	b.n	801553e <mg_sha384_update+0x96>
    ctx->buffer[ctx->datalen] = data[i];
 80154bc:	68ba      	ldr	r2, [r7, #8]
 80154be:	697b      	ldr	r3, [r7, #20]
 80154c0:	441a      	add	r2, r3
 80154c2:	68fb      	ldr	r3, [r7, #12]
 80154c4:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 80154c8:	7811      	ldrb	r1, [r2, #0]
 80154ca:	68fa      	ldr	r2, [r7, #12]
 80154cc:	4413      	add	r3, r2
 80154ce:	460a      	mov	r2, r1
 80154d0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    ctx->datalen++;
 80154d4:	68fb      	ldr	r3, [r7, #12]
 80154d6:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 80154da:	1c5a      	adds	r2, r3, #1
 80154dc:	68fb      	ldr	r3, [r7, #12]
 80154de:	f8c3 20d0 	str.w	r2, [r3, #208]	@ 0xd0
    if (ctx->datalen == 128) {
 80154e2:	68fb      	ldr	r3, [r7, #12]
 80154e4:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 80154e8:	2b80      	cmp	r3, #128	@ 0x80
 80154ea:	d125      	bne.n	8015538 <mg_sha384_update+0x90>
      mg_sha384_transform(ctx, ctx->buffer);
 80154ec:	68fb      	ldr	r3, [r7, #12]
 80154ee:	3340      	adds	r3, #64	@ 0x40
 80154f0:	4619      	mov	r1, r3
 80154f2:	68f8      	ldr	r0, [r7, #12]
 80154f4:	f7ff fa4a 	bl	801498c <mg_sha384_transform>
      ctx->bitlen[1] += 1024;
 80154f8:	68fb      	ldr	r3, [r7, #12]
 80154fa:	e9d3 2332 	ldrd	r2, r3, [r3, #200]	@ 0xc8
 80154fe:	f512 6480 	adds.w	r4, r2, #1024	@ 0x400
 8015502:	f143 0500 	adc.w	r5, r3, #0
 8015506:	68fb      	ldr	r3, [r7, #12]
 8015508:	e9c3 4532 	strd	r4, r5, [r3, #200]	@ 0xc8
      if (ctx->bitlen[1] < 1024) ctx->bitlen[0]++;
 801550c:	68fb      	ldr	r3, [r7, #12]
 801550e:	e9d3 2332 	ldrd	r2, r3, [r3, #200]	@ 0xc8
 8015512:	f5b2 6f80 	cmp.w	r2, #1024	@ 0x400
 8015516:	f173 0300 	sbcs.w	r3, r3, #0
 801551a:	d209      	bcs.n	8015530 <mg_sha384_update+0x88>
 801551c:	68fb      	ldr	r3, [r7, #12]
 801551e:	e9d3 2330 	ldrd	r2, r3, [r3, #192]	@ 0xc0
 8015522:	f112 0801 	adds.w	r8, r2, #1
 8015526:	f143 0900 	adc.w	r9, r3, #0
 801552a:	68fb      	ldr	r3, [r7, #12]
 801552c:	e9c3 8930 	strd	r8, r9, [r3, #192]	@ 0xc0
      ctx->datalen = 0;
 8015530:	68fb      	ldr	r3, [r7, #12]
 8015532:	2200      	movs	r2, #0
 8015534:	f8c3 20d0 	str.w	r2, [r3, #208]	@ 0xd0
  for (i = 0; i < len; ++i) {
 8015538:	697b      	ldr	r3, [r7, #20]
 801553a:	3301      	adds	r3, #1
 801553c:	617b      	str	r3, [r7, #20]
 801553e:	697a      	ldr	r2, [r7, #20]
 8015540:	687b      	ldr	r3, [r7, #4]
 8015542:	429a      	cmp	r2, r3
 8015544:	d3ba      	bcc.n	80154bc <mg_sha384_update+0x14>
    }
  }
}
 8015546:	bf00      	nop
 8015548:	bf00      	nop
 801554a:	3718      	adds	r7, #24
 801554c:	46bd      	mov	sp, r7
 801554e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

08015552 <mg_sha384_final>:

void mg_sha384_final(uint8_t hash[48], mg_sha384_ctx *ctx) {
 8015552:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8015556:	b086      	sub	sp, #24
 8015558:	af00      	add	r7, sp, #0
 801555a:	60f8      	str	r0, [r7, #12]
 801555c:	60b9      	str	r1, [r7, #8]
  size_t i = ctx->datalen;
 801555e:	68bb      	ldr	r3, [r7, #8]
 8015560:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 8015564:	617b      	str	r3, [r7, #20]

  if (ctx->datalen < 112) {
 8015566:	68bb      	ldr	r3, [r7, #8]
 8015568:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 801556c:	2b6f      	cmp	r3, #111	@ 0x6f
 801556e:	d814      	bhi.n	801559a <mg_sha384_final+0x48>
    ctx->buffer[i++] = 0x80;
 8015570:	697b      	ldr	r3, [r7, #20]
 8015572:	1c5a      	adds	r2, r3, #1
 8015574:	617a      	str	r2, [r7, #20]
 8015576:	68ba      	ldr	r2, [r7, #8]
 8015578:	4413      	add	r3, r2
 801557a:	2280      	movs	r2, #128	@ 0x80
 801557c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    while (i < 112) ctx->buffer[i++] = 0x00;
 8015580:	e007      	b.n	8015592 <mg_sha384_final+0x40>
 8015582:	697b      	ldr	r3, [r7, #20]
 8015584:	1c5a      	adds	r2, r3, #1
 8015586:	617a      	str	r2, [r7, #20]
 8015588:	68ba      	ldr	r2, [r7, #8]
 801558a:	4413      	add	r3, r2
 801558c:	2200      	movs	r2, #0
 801558e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8015592:	697b      	ldr	r3, [r7, #20]
 8015594:	2b6f      	cmp	r3, #111	@ 0x6f
 8015596:	d9f4      	bls.n	8015582 <mg_sha384_final+0x30>
 8015598:	e020      	b.n	80155dc <mg_sha384_final+0x8a>
  } else {
    ctx->buffer[i++] = 0x80;
 801559a:	697b      	ldr	r3, [r7, #20]
 801559c:	1c5a      	adds	r2, r3, #1
 801559e:	617a      	str	r2, [r7, #20]
 80155a0:	68ba      	ldr	r2, [r7, #8]
 80155a2:	4413      	add	r3, r2
 80155a4:	2280      	movs	r2, #128	@ 0x80
 80155a6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    while (i < 128) ctx->buffer[i++] = 0x00;
 80155aa:	e007      	b.n	80155bc <mg_sha384_final+0x6a>
 80155ac:	697b      	ldr	r3, [r7, #20]
 80155ae:	1c5a      	adds	r2, r3, #1
 80155b0:	617a      	str	r2, [r7, #20]
 80155b2:	68ba      	ldr	r2, [r7, #8]
 80155b4:	4413      	add	r3, r2
 80155b6:	2200      	movs	r2, #0
 80155b8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80155bc:	697b      	ldr	r3, [r7, #20]
 80155be:	2b7f      	cmp	r3, #127	@ 0x7f
 80155c0:	d9f4      	bls.n	80155ac <mg_sha384_final+0x5a>
    mg_sha384_transform(ctx, ctx->buffer);
 80155c2:	68bb      	ldr	r3, [r7, #8]
 80155c4:	3340      	adds	r3, #64	@ 0x40
 80155c6:	4619      	mov	r1, r3
 80155c8:	68b8      	ldr	r0, [r7, #8]
 80155ca:	f7ff f9df 	bl	801498c <mg_sha384_transform>
    memset(ctx->buffer, 0, 112);
 80155ce:	68bb      	ldr	r3, [r7, #8]
 80155d0:	3340      	adds	r3, #64	@ 0x40
 80155d2:	2270      	movs	r2, #112	@ 0x70
 80155d4:	2100      	movs	r1, #0
 80155d6:	4618      	mov	r0, r3
 80155d8:	f00e ff58 	bl	802448c <memset>
  }

  ctx->bitlen[1] += ctx->datalen * 8;
 80155dc:	68bb      	ldr	r3, [r7, #8]
 80155de:	e9d3 2332 	ldrd	r2, r3, [r3, #200]	@ 0xc8
 80155e2:	68b9      	ldr	r1, [r7, #8]
 80155e4:	f8d1 10d0 	ldr.w	r1, [r1, #208]	@ 0xd0
 80155e8:	00c9      	lsls	r1, r1, #3
 80155ea:	2000      	movs	r0, #0
 80155ec:	4688      	mov	r8, r1
 80155ee:	4681      	mov	r9, r0
 80155f0:	eb12 0108 	adds.w	r1, r2, r8
 80155f4:	6039      	str	r1, [r7, #0]
 80155f6:	eb43 0309 	adc.w	r3, r3, r9
 80155fa:	607b      	str	r3, [r7, #4]
 80155fc:	68bb      	ldr	r3, [r7, #8]
 80155fe:	e9d7 1200 	ldrd	r1, r2, [r7]
 8015602:	e9c3 1232 	strd	r1, r2, [r3, #200]	@ 0xc8
  if (ctx->bitlen[1] < ctx->datalen * 8) ctx->bitlen[0]++;
 8015606:	68bb      	ldr	r3, [r7, #8]
 8015608:	e9d3 2332 	ldrd	r2, r3, [r3, #200]	@ 0xc8
 801560c:	68b9      	ldr	r1, [r7, #8]
 801560e:	f8d1 10d0 	ldr.w	r1, [r1, #208]	@ 0xd0
 8015612:	00c9      	lsls	r1, r1, #3
 8015614:	2000      	movs	r0, #0
 8015616:	460c      	mov	r4, r1
 8015618:	4605      	mov	r5, r0
 801561a:	42a2      	cmp	r2, r4
 801561c:	41ab      	sbcs	r3, r5
 801561e:	d209      	bcs.n	8015634 <mg_sha384_final+0xe2>
 8015620:	68bb      	ldr	r3, [r7, #8]
 8015622:	e9d3 2330 	ldrd	r2, r3, [r3, #192]	@ 0xc0
 8015626:	f112 0a01 	adds.w	sl, r2, #1
 801562a:	f143 0b00 	adc.w	fp, r3, #0
 801562e:	68bb      	ldr	r3, [r7, #8]
 8015630:	e9c3 ab30 	strd	sl, fp, [r3, #192]	@ 0xc0
  ctx->buffer[127] = (uint8_t) (ctx->bitlen[1]);
 8015634:	68bb      	ldr	r3, [r7, #8]
 8015636:	e9d3 2332 	ldrd	r2, r3, [r3, #200]	@ 0xc8
 801563a:	b2d2      	uxtb	r2, r2
 801563c:	68bb      	ldr	r3, [r7, #8]
 801563e:	f883 20bf 	strb.w	r2, [r3, #191]	@ 0xbf
  ctx->buffer[126] = (uint8_t) (ctx->bitlen[1] >> 8);
 8015642:	68bb      	ldr	r3, [r7, #8]
 8015644:	e9d3 0132 	ldrd	r0, r1, [r3, #200]	@ 0xc8
 8015648:	f04f 0200 	mov.w	r2, #0
 801564c:	f04f 0300 	mov.w	r3, #0
 8015650:	0a02      	lsrs	r2, r0, #8
 8015652:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8015656:	0a0b      	lsrs	r3, r1, #8
 8015658:	b2d2      	uxtb	r2, r2
 801565a:	68bb      	ldr	r3, [r7, #8]
 801565c:	f883 20be 	strb.w	r2, [r3, #190]	@ 0xbe
  ctx->buffer[125] = (uint8_t) (ctx->bitlen[1] >> 16);
 8015660:	68bb      	ldr	r3, [r7, #8]
 8015662:	e9d3 0132 	ldrd	r0, r1, [r3, #200]	@ 0xc8
 8015666:	f04f 0200 	mov.w	r2, #0
 801566a:	f04f 0300 	mov.w	r3, #0
 801566e:	0c02      	lsrs	r2, r0, #16
 8015670:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8015674:	0c0b      	lsrs	r3, r1, #16
 8015676:	b2d2      	uxtb	r2, r2
 8015678:	68bb      	ldr	r3, [r7, #8]
 801567a:	f883 20bd 	strb.w	r2, [r3, #189]	@ 0xbd
  ctx->buffer[124] = (uint8_t) (ctx->bitlen[1] >> 24);
 801567e:	68bb      	ldr	r3, [r7, #8]
 8015680:	e9d3 0132 	ldrd	r0, r1, [r3, #200]	@ 0xc8
 8015684:	f04f 0200 	mov.w	r2, #0
 8015688:	f04f 0300 	mov.w	r3, #0
 801568c:	0e02      	lsrs	r2, r0, #24
 801568e:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8015692:	0e0b      	lsrs	r3, r1, #24
 8015694:	b2d2      	uxtb	r2, r2
 8015696:	68bb      	ldr	r3, [r7, #8]
 8015698:	f883 20bc 	strb.w	r2, [r3, #188]	@ 0xbc
  ctx->buffer[123] = (uint8_t) (ctx->bitlen[1] >> 32);
 801569c:	68bb      	ldr	r3, [r7, #8]
 801569e:	e9d3 0132 	ldrd	r0, r1, [r3, #200]	@ 0xc8
 80156a2:	f04f 0200 	mov.w	r2, #0
 80156a6:	f04f 0300 	mov.w	r3, #0
 80156aa:	000a      	movs	r2, r1
 80156ac:	2300      	movs	r3, #0
 80156ae:	b2d2      	uxtb	r2, r2
 80156b0:	68bb      	ldr	r3, [r7, #8]
 80156b2:	f883 20bb 	strb.w	r2, [r3, #187]	@ 0xbb
  ctx->buffer[122] = (uint8_t) (ctx->bitlen[1] >> 40);
 80156b6:	68bb      	ldr	r3, [r7, #8]
 80156b8:	e9d3 0132 	ldrd	r0, r1, [r3, #200]	@ 0xc8
 80156bc:	f04f 0200 	mov.w	r2, #0
 80156c0:	f04f 0300 	mov.w	r3, #0
 80156c4:	0a0a      	lsrs	r2, r1, #8
 80156c6:	2300      	movs	r3, #0
 80156c8:	b2d2      	uxtb	r2, r2
 80156ca:	68bb      	ldr	r3, [r7, #8]
 80156cc:	f883 20ba 	strb.w	r2, [r3, #186]	@ 0xba
  ctx->buffer[121] = (uint8_t) (ctx->bitlen[1] >> 48);
 80156d0:	68bb      	ldr	r3, [r7, #8]
 80156d2:	e9d3 0132 	ldrd	r0, r1, [r3, #200]	@ 0xc8
 80156d6:	f04f 0200 	mov.w	r2, #0
 80156da:	f04f 0300 	mov.w	r3, #0
 80156de:	0c0a      	lsrs	r2, r1, #16
 80156e0:	2300      	movs	r3, #0
 80156e2:	b2d2      	uxtb	r2, r2
 80156e4:	68bb      	ldr	r3, [r7, #8]
 80156e6:	f883 20b9 	strb.w	r2, [r3, #185]	@ 0xb9
  ctx->buffer[120] = (uint8_t) (ctx->bitlen[1] >> 56);
 80156ea:	68bb      	ldr	r3, [r7, #8]
 80156ec:	e9d3 0132 	ldrd	r0, r1, [r3, #200]	@ 0xc8
 80156f0:	f04f 0200 	mov.w	r2, #0
 80156f4:	f04f 0300 	mov.w	r3, #0
 80156f8:	0e0a      	lsrs	r2, r1, #24
 80156fa:	2300      	movs	r3, #0
 80156fc:	b2d2      	uxtb	r2, r2
 80156fe:	68bb      	ldr	r3, [r7, #8]
 8015700:	f883 20b8 	strb.w	r2, [r3, #184]	@ 0xb8
  ctx->buffer[119] = (uint8_t) (ctx->bitlen[0]);
 8015704:	68bb      	ldr	r3, [r7, #8]
 8015706:	e9d3 2330 	ldrd	r2, r3, [r3, #192]	@ 0xc0
 801570a:	b2d2      	uxtb	r2, r2
 801570c:	68bb      	ldr	r3, [r7, #8]
 801570e:	f883 20b7 	strb.w	r2, [r3, #183]	@ 0xb7
  ctx->buffer[118] = (uint8_t) (ctx->bitlen[0] >> 8);
 8015712:	68bb      	ldr	r3, [r7, #8]
 8015714:	e9d3 0130 	ldrd	r0, r1, [r3, #192]	@ 0xc0
 8015718:	f04f 0200 	mov.w	r2, #0
 801571c:	f04f 0300 	mov.w	r3, #0
 8015720:	0a02      	lsrs	r2, r0, #8
 8015722:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8015726:	0a0b      	lsrs	r3, r1, #8
 8015728:	b2d2      	uxtb	r2, r2
 801572a:	68bb      	ldr	r3, [r7, #8]
 801572c:	f883 20b6 	strb.w	r2, [r3, #182]	@ 0xb6
  ctx->buffer[117] = (uint8_t) (ctx->bitlen[0] >> 16);
 8015730:	68bb      	ldr	r3, [r7, #8]
 8015732:	e9d3 0130 	ldrd	r0, r1, [r3, #192]	@ 0xc0
 8015736:	f04f 0200 	mov.w	r2, #0
 801573a:	f04f 0300 	mov.w	r3, #0
 801573e:	0c02      	lsrs	r2, r0, #16
 8015740:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8015744:	0c0b      	lsrs	r3, r1, #16
 8015746:	b2d2      	uxtb	r2, r2
 8015748:	68bb      	ldr	r3, [r7, #8]
 801574a:	f883 20b5 	strb.w	r2, [r3, #181]	@ 0xb5
  ctx->buffer[116] = (uint8_t) (ctx->bitlen[0] >> 24);
 801574e:	68bb      	ldr	r3, [r7, #8]
 8015750:	e9d3 0130 	ldrd	r0, r1, [r3, #192]	@ 0xc0
 8015754:	f04f 0200 	mov.w	r2, #0
 8015758:	f04f 0300 	mov.w	r3, #0
 801575c:	0e02      	lsrs	r2, r0, #24
 801575e:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8015762:	0e0b      	lsrs	r3, r1, #24
 8015764:	b2d2      	uxtb	r2, r2
 8015766:	68bb      	ldr	r3, [r7, #8]
 8015768:	f883 20b4 	strb.w	r2, [r3, #180]	@ 0xb4
  ctx->buffer[115] = (uint8_t) (ctx->bitlen[0] >> 32);
 801576c:	68bb      	ldr	r3, [r7, #8]
 801576e:	e9d3 0130 	ldrd	r0, r1, [r3, #192]	@ 0xc0
 8015772:	f04f 0200 	mov.w	r2, #0
 8015776:	f04f 0300 	mov.w	r3, #0
 801577a:	000a      	movs	r2, r1
 801577c:	2300      	movs	r3, #0
 801577e:	b2d2      	uxtb	r2, r2
 8015780:	68bb      	ldr	r3, [r7, #8]
 8015782:	f883 20b3 	strb.w	r2, [r3, #179]	@ 0xb3
  ctx->buffer[114] = (uint8_t) (ctx->bitlen[0] >> 40);
 8015786:	68bb      	ldr	r3, [r7, #8]
 8015788:	e9d3 0130 	ldrd	r0, r1, [r3, #192]	@ 0xc0
 801578c:	f04f 0200 	mov.w	r2, #0
 8015790:	f04f 0300 	mov.w	r3, #0
 8015794:	0a0a      	lsrs	r2, r1, #8
 8015796:	2300      	movs	r3, #0
 8015798:	b2d2      	uxtb	r2, r2
 801579a:	68bb      	ldr	r3, [r7, #8]
 801579c:	f883 20b2 	strb.w	r2, [r3, #178]	@ 0xb2
  ctx->buffer[113] = (uint8_t) (ctx->bitlen[0] >> 48);
 80157a0:	68bb      	ldr	r3, [r7, #8]
 80157a2:	e9d3 0130 	ldrd	r0, r1, [r3, #192]	@ 0xc0
 80157a6:	f04f 0200 	mov.w	r2, #0
 80157aa:	f04f 0300 	mov.w	r3, #0
 80157ae:	0c0a      	lsrs	r2, r1, #16
 80157b0:	2300      	movs	r3, #0
 80157b2:	b2d2      	uxtb	r2, r2
 80157b4:	68bb      	ldr	r3, [r7, #8]
 80157b6:	f883 20b1 	strb.w	r2, [r3, #177]	@ 0xb1
  ctx->buffer[112] = (uint8_t) (ctx->bitlen[0] >> 56);
 80157ba:	68bb      	ldr	r3, [r7, #8]
 80157bc:	e9d3 0130 	ldrd	r0, r1, [r3, #192]	@ 0xc0
 80157c0:	f04f 0200 	mov.w	r2, #0
 80157c4:	f04f 0300 	mov.w	r3, #0
 80157c8:	0e0a      	lsrs	r2, r1, #24
 80157ca:	2300      	movs	r3, #0
 80157cc:	b2d2      	uxtb	r2, r2
 80157ce:	68bb      	ldr	r3, [r7, #8]
 80157d0:	f883 20b0 	strb.w	r2, [r3, #176]	@ 0xb0
  mg_sha384_transform(ctx, ctx->buffer);
 80157d4:	68bb      	ldr	r3, [r7, #8]
 80157d6:	3340      	adds	r3, #64	@ 0x40
 80157d8:	4619      	mov	r1, r3
 80157da:	68b8      	ldr	r0, [r7, #8]
 80157dc:	f7ff f8d6 	bl	801498c <mg_sha384_transform>

  for (i = 0; i < 6; ++i) {
 80157e0:	2300      	movs	r3, #0
 80157e2:	617b      	str	r3, [r7, #20]
 80157e4:	e099      	b.n	801591a <mg_sha384_final+0x3c8>
    hash[i * 8] = (uint8_t) ((ctx->state[i] >> 56) & 0xff);
 80157e6:	68ba      	ldr	r2, [r7, #8]
 80157e8:	697b      	ldr	r3, [r7, #20]
 80157ea:	00db      	lsls	r3, r3, #3
 80157ec:	4413      	add	r3, r2
 80157ee:	e9d3 0100 	ldrd	r0, r1, [r3]
 80157f2:	f04f 0200 	mov.w	r2, #0
 80157f6:	f04f 0300 	mov.w	r3, #0
 80157fa:	0e0a      	lsrs	r2, r1, #24
 80157fc:	2300      	movs	r3, #0
 80157fe:	6979      	ldr	r1, [r7, #20]
 8015800:	00c9      	lsls	r1, r1, #3
 8015802:	68f8      	ldr	r0, [r7, #12]
 8015804:	4401      	add	r1, r0
 8015806:	b2d3      	uxtb	r3, r2
 8015808:	700b      	strb	r3, [r1, #0]
    hash[i * 8 + 1] = (uint8_t) ((ctx->state[i] >> 48) & 0xff);
 801580a:	68ba      	ldr	r2, [r7, #8]
 801580c:	697b      	ldr	r3, [r7, #20]
 801580e:	00db      	lsls	r3, r3, #3
 8015810:	4413      	add	r3, r2
 8015812:	e9d3 0100 	ldrd	r0, r1, [r3]
 8015816:	f04f 0200 	mov.w	r2, #0
 801581a:	f04f 0300 	mov.w	r3, #0
 801581e:	0c0a      	lsrs	r2, r1, #16
 8015820:	2300      	movs	r3, #0
 8015822:	6979      	ldr	r1, [r7, #20]
 8015824:	00c9      	lsls	r1, r1, #3
 8015826:	3101      	adds	r1, #1
 8015828:	68f8      	ldr	r0, [r7, #12]
 801582a:	4401      	add	r1, r0
 801582c:	b2d3      	uxtb	r3, r2
 801582e:	700b      	strb	r3, [r1, #0]
    hash[i * 8 + 2] = (uint8_t) ((ctx->state[i] >> 40) & 0xff);
 8015830:	68ba      	ldr	r2, [r7, #8]
 8015832:	697b      	ldr	r3, [r7, #20]
 8015834:	00db      	lsls	r3, r3, #3
 8015836:	4413      	add	r3, r2
 8015838:	e9d3 0100 	ldrd	r0, r1, [r3]
 801583c:	f04f 0200 	mov.w	r2, #0
 8015840:	f04f 0300 	mov.w	r3, #0
 8015844:	0a0a      	lsrs	r2, r1, #8
 8015846:	2300      	movs	r3, #0
 8015848:	6979      	ldr	r1, [r7, #20]
 801584a:	00c9      	lsls	r1, r1, #3
 801584c:	3102      	adds	r1, #2
 801584e:	68f8      	ldr	r0, [r7, #12]
 8015850:	4401      	add	r1, r0
 8015852:	b2d3      	uxtb	r3, r2
 8015854:	700b      	strb	r3, [r1, #0]
    hash[i * 8 + 3] = (uint8_t) ((ctx->state[i] >> 32) & 0xff);
 8015856:	68ba      	ldr	r2, [r7, #8]
 8015858:	697b      	ldr	r3, [r7, #20]
 801585a:	00db      	lsls	r3, r3, #3
 801585c:	4413      	add	r3, r2
 801585e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8015862:	f04f 0200 	mov.w	r2, #0
 8015866:	f04f 0300 	mov.w	r3, #0
 801586a:	000a      	movs	r2, r1
 801586c:	2300      	movs	r3, #0
 801586e:	6979      	ldr	r1, [r7, #20]
 8015870:	00c9      	lsls	r1, r1, #3
 8015872:	3103      	adds	r1, #3
 8015874:	68f8      	ldr	r0, [r7, #12]
 8015876:	4401      	add	r1, r0
 8015878:	b2d3      	uxtb	r3, r2
 801587a:	700b      	strb	r3, [r1, #0]
    hash[i * 8 + 4] = (uint8_t) ((ctx->state[i] >> 24) & 0xff);
 801587c:	68ba      	ldr	r2, [r7, #8]
 801587e:	697b      	ldr	r3, [r7, #20]
 8015880:	00db      	lsls	r3, r3, #3
 8015882:	4413      	add	r3, r2
 8015884:	e9d3 0100 	ldrd	r0, r1, [r3]
 8015888:	f04f 0200 	mov.w	r2, #0
 801588c:	f04f 0300 	mov.w	r3, #0
 8015890:	0e02      	lsrs	r2, r0, #24
 8015892:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8015896:	0e0b      	lsrs	r3, r1, #24
 8015898:	6979      	ldr	r1, [r7, #20]
 801589a:	00c9      	lsls	r1, r1, #3
 801589c:	3104      	adds	r1, #4
 801589e:	68f8      	ldr	r0, [r7, #12]
 80158a0:	4401      	add	r1, r0
 80158a2:	b2d3      	uxtb	r3, r2
 80158a4:	700b      	strb	r3, [r1, #0]
    hash[i * 8 + 5] = (uint8_t) ((ctx->state[i] >> 16) & 0xff);
 80158a6:	68ba      	ldr	r2, [r7, #8]
 80158a8:	697b      	ldr	r3, [r7, #20]
 80158aa:	00db      	lsls	r3, r3, #3
 80158ac:	4413      	add	r3, r2
 80158ae:	e9d3 0100 	ldrd	r0, r1, [r3]
 80158b2:	f04f 0200 	mov.w	r2, #0
 80158b6:	f04f 0300 	mov.w	r3, #0
 80158ba:	0c02      	lsrs	r2, r0, #16
 80158bc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80158c0:	0c0b      	lsrs	r3, r1, #16
 80158c2:	6979      	ldr	r1, [r7, #20]
 80158c4:	00c9      	lsls	r1, r1, #3
 80158c6:	3105      	adds	r1, #5
 80158c8:	68f8      	ldr	r0, [r7, #12]
 80158ca:	4401      	add	r1, r0
 80158cc:	b2d3      	uxtb	r3, r2
 80158ce:	700b      	strb	r3, [r1, #0]
    hash[i * 8 + 6] = (uint8_t) ((ctx->state[i] >> 8) & 0xff);
 80158d0:	68ba      	ldr	r2, [r7, #8]
 80158d2:	697b      	ldr	r3, [r7, #20]
 80158d4:	00db      	lsls	r3, r3, #3
 80158d6:	4413      	add	r3, r2
 80158d8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80158dc:	f04f 0200 	mov.w	r2, #0
 80158e0:	f04f 0300 	mov.w	r3, #0
 80158e4:	0a02      	lsrs	r2, r0, #8
 80158e6:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 80158ea:	0a0b      	lsrs	r3, r1, #8
 80158ec:	6979      	ldr	r1, [r7, #20]
 80158ee:	00c9      	lsls	r1, r1, #3
 80158f0:	3106      	adds	r1, #6
 80158f2:	68f8      	ldr	r0, [r7, #12]
 80158f4:	4401      	add	r1, r0
 80158f6:	b2d3      	uxtb	r3, r2
 80158f8:	700b      	strb	r3, [r1, #0]
    hash[i * 8 + 7] = (uint8_t) (ctx->state[i] & 0xff);
 80158fa:	68ba      	ldr	r2, [r7, #8]
 80158fc:	697b      	ldr	r3, [r7, #20]
 80158fe:	00db      	lsls	r3, r3, #3
 8015900:	4413      	add	r3, r2
 8015902:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015906:	6979      	ldr	r1, [r7, #20]
 8015908:	00c9      	lsls	r1, r1, #3
 801590a:	3107      	adds	r1, #7
 801590c:	68f8      	ldr	r0, [r7, #12]
 801590e:	4401      	add	r1, r0
 8015910:	b2d3      	uxtb	r3, r2
 8015912:	700b      	strb	r3, [r1, #0]
  for (i = 0; i < 6; ++i) {
 8015914:	697b      	ldr	r3, [r7, #20]
 8015916:	3301      	adds	r3, #1
 8015918:	617b      	str	r3, [r7, #20]
 801591a:	697b      	ldr	r3, [r7, #20]
 801591c:	2b05      	cmp	r3, #5
 801591e:	f67f af62 	bls.w	80157e6 <mg_sha384_final+0x294>
  }
}
 8015922:	bf00      	nop
 8015924:	bf00      	nop
 8015926:	3718      	adds	r7, #24
 8015928:	46bd      	mov	sp, r7
 801592a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0801592e <mg_sha384>:

void mg_sha384(uint8_t dst[48], uint8_t *data, size_t datasz) {
 801592e:	b580      	push	{r7, lr}
 8015930:	b0ba      	sub	sp, #232	@ 0xe8
 8015932:	af00      	add	r7, sp, #0
 8015934:	60f8      	str	r0, [r7, #12]
 8015936:	60b9      	str	r1, [r7, #8]
 8015938:	607a      	str	r2, [r7, #4]
  mg_sha384_ctx ctx;
  mg_sha384_init(&ctx);
 801593a:	f107 0310 	add.w	r3, r7, #16
 801593e:	4618      	mov	r0, r3
 8015940:	f7ff fd46 	bl	80153d0 <mg_sha384_init>
  mg_sha384_update(&ctx, data, datasz);
 8015944:	f107 0310 	add.w	r3, r7, #16
 8015948:	687a      	ldr	r2, [r7, #4]
 801594a:	68b9      	ldr	r1, [r7, #8]
 801594c:	4618      	mov	r0, r3
 801594e:	f7ff fdab 	bl	80154a8 <mg_sha384_update>
  mg_sha384_final(dst, &ctx);
 8015952:	f107 0310 	add.w	r3, r7, #16
 8015956:	4619      	mov	r1, r3
 8015958:	68f8      	ldr	r0, [r7, #12]
 801595a:	f7ff fdfa 	bl	8015552 <mg_sha384_final>
}
 801595e:	bf00      	nop
 8015960:	37e8      	adds	r7, #232	@ 0xe8
 8015962:	46bd      	mov	sp, r7
 8015964:	bd80      	pop	{r7, pc}
	...

08015968 <mg_http_serve_ssi>:
  mg_http_reply(c, 200, headers, "%s", data == NULL ? "" : data);
  mg_free(data);
}
#else
void mg_http_serve_ssi(struct mg_connection *c, const char *root,
                       const char *fullpath) {
 8015968:	b580      	push	{r7, lr}
 801596a:	b084      	sub	sp, #16
 801596c:	af00      	add	r7, sp, #0
 801596e:	60f8      	str	r0, [r7, #12]
 8015970:	60b9      	str	r1, [r7, #8]
 8015972:	607a      	str	r2, [r7, #4]
  mg_http_reply(c, 501, NULL, "SSI not enabled");
 8015974:	4b05      	ldr	r3, [pc, #20]	@ (801598c <mg_http_serve_ssi+0x24>)
 8015976:	2200      	movs	r2, #0
 8015978:	f240 11f5 	movw	r1, #501	@ 0x1f5
 801597c:	68f8      	ldr	r0, [r7, #12]
 801597e:	f7f5 f855 	bl	800aa2c <mg_http_reply>
  (void) root, (void) fullpath;
}
 8015982:	bf00      	nop
 8015984:	3710      	adds	r7, #16
 8015986:	46bd      	mov	sp, r7
 8015988:	bd80      	pop	{r7, pc}
 801598a:	bf00      	nop
 801598c:	08026bc4 	.word	0x08026bc4

08015990 <mg_str_s>:
#line 1 "src/str.c"
#endif



struct mg_str mg_str_s(const char *s) {
 8015990:	b580      	push	{r7, lr}
 8015992:	b084      	sub	sp, #16
 8015994:	af00      	add	r7, sp, #0
 8015996:	6078      	str	r0, [r7, #4]
 8015998:	6039      	str	r1, [r7, #0]
  struct mg_str str = {(char *) s, s == NULL ? 0 : strlen(s)};
 801599a:	683b      	ldr	r3, [r7, #0]
 801599c:	60bb      	str	r3, [r7, #8]
 801599e:	683b      	ldr	r3, [r7, #0]
 80159a0:	2b00      	cmp	r3, #0
 80159a2:	d004      	beq.n	80159ae <mg_str_s+0x1e>
 80159a4:	6838      	ldr	r0, [r7, #0]
 80159a6:	f7ea fcab 	bl	8000300 <strlen>
 80159aa:	4603      	mov	r3, r0
 80159ac:	e000      	b.n	80159b0 <mg_str_s+0x20>
 80159ae:	2300      	movs	r3, #0
 80159b0:	60fb      	str	r3, [r7, #12]
  return str;
 80159b2:	687b      	ldr	r3, [r7, #4]
 80159b4:	461a      	mov	r2, r3
 80159b6:	f107 0308 	add.w	r3, r7, #8
 80159ba:	e893 0003 	ldmia.w	r3, {r0, r1}
 80159be:	e882 0003 	stmia.w	r2, {r0, r1}
}
 80159c2:	6878      	ldr	r0, [r7, #4]
 80159c4:	3710      	adds	r7, #16
 80159c6:	46bd      	mov	sp, r7
 80159c8:	bd80      	pop	{r7, pc}

080159ca <mg_str_n>:

struct mg_str mg_str_n(const char *s, size_t n) {
 80159ca:	b480      	push	{r7}
 80159cc:	b087      	sub	sp, #28
 80159ce:	af00      	add	r7, sp, #0
 80159d0:	60f8      	str	r0, [r7, #12]
 80159d2:	60b9      	str	r1, [r7, #8]
 80159d4:	607a      	str	r2, [r7, #4]
  struct mg_str str = {(char *) s, n};
 80159d6:	68bb      	ldr	r3, [r7, #8]
 80159d8:	613b      	str	r3, [r7, #16]
 80159da:	687b      	ldr	r3, [r7, #4]
 80159dc:	617b      	str	r3, [r7, #20]
  return str;
 80159de:	68fb      	ldr	r3, [r7, #12]
 80159e0:	461a      	mov	r2, r3
 80159e2:	f107 0310 	add.w	r3, r7, #16
 80159e6:	e893 0003 	ldmia.w	r3, {r0, r1}
 80159ea:	e882 0003 	stmia.w	r2, {r0, r1}
}
 80159ee:	68f8      	ldr	r0, [r7, #12]
 80159f0:	371c      	adds	r7, #28
 80159f2:	46bd      	mov	sp, r7
 80159f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80159f8:	4770      	bx	lr

080159fa <mg_tolc>:

static int mg_tolc(char c) {
 80159fa:	b480      	push	{r7}
 80159fc:	b083      	sub	sp, #12
 80159fe:	af00      	add	r7, sp, #0
 8015a00:	4603      	mov	r3, r0
 8015a02:	71fb      	strb	r3, [r7, #7]
  return (c >= 'A' && c <= 'Z') ? c + 'a' - 'A' : c;
 8015a04:	79fb      	ldrb	r3, [r7, #7]
 8015a06:	2b40      	cmp	r3, #64	@ 0x40
 8015a08:	d905      	bls.n	8015a16 <mg_tolc+0x1c>
 8015a0a:	79fb      	ldrb	r3, [r7, #7]
 8015a0c:	2b5a      	cmp	r3, #90	@ 0x5a
 8015a0e:	d802      	bhi.n	8015a16 <mg_tolc+0x1c>
 8015a10:	79fb      	ldrb	r3, [r7, #7]
 8015a12:	3320      	adds	r3, #32
 8015a14:	e000      	b.n	8015a18 <mg_tolc+0x1e>
 8015a16:	79fb      	ldrb	r3, [r7, #7]
}
 8015a18:	4618      	mov	r0, r3
 8015a1a:	370c      	adds	r7, #12
 8015a1c:	46bd      	mov	sp, r7
 8015a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015a22:	4770      	bx	lr

08015a24 <mg_strdup>:
    diff = c - d;
  } while (diff == 0 && s1[-1] != '\0');
  return diff;
}

struct mg_str mg_strdup(const struct mg_str s) {
 8015a24:	b580      	push	{r7, lr}
 8015a26:	b088      	sub	sp, #32
 8015a28:	af00      	add	r7, sp, #0
 8015a2a:	60f8      	str	r0, [r7, #12]
 8015a2c:	1d3b      	adds	r3, r7, #4
 8015a2e:	e883 0006 	stmia.w	r3, {r1, r2}
  struct mg_str r = {NULL, 0};
 8015a32:	2300      	movs	r3, #0
 8015a34:	617b      	str	r3, [r7, #20]
 8015a36:	2300      	movs	r3, #0
 8015a38:	61bb      	str	r3, [r7, #24]
  if (s.len > 0 && s.buf != NULL) {
 8015a3a:	68bb      	ldr	r3, [r7, #8]
 8015a3c:	2b00      	cmp	r3, #0
 8015a3e:	d01b      	beq.n	8015a78 <mg_strdup+0x54>
 8015a40:	687b      	ldr	r3, [r7, #4]
 8015a42:	2b00      	cmp	r3, #0
 8015a44:	d018      	beq.n	8015a78 <mg_strdup+0x54>
    char *sc = (char *) mg_calloc(1, s.len + 1);
 8015a46:	68bb      	ldr	r3, [r7, #8]
 8015a48:	3301      	adds	r3, #1
 8015a4a:	4619      	mov	r1, r3
 8015a4c:	2001      	movs	r0, #1
 8015a4e:	f7f1 f9e0 	bl	8006e12 <mg_calloc>
 8015a52:	61f8      	str	r0, [r7, #28]
    if (sc != NULL) {
 8015a54:	69fb      	ldr	r3, [r7, #28]
 8015a56:	2b00      	cmp	r3, #0
 8015a58:	d00e      	beq.n	8015a78 <mg_strdup+0x54>
      memcpy(sc, s.buf, s.len);
 8015a5a:	687b      	ldr	r3, [r7, #4]
 8015a5c:	68ba      	ldr	r2, [r7, #8]
 8015a5e:	4619      	mov	r1, r3
 8015a60:	69f8      	ldr	r0, [r7, #28]
 8015a62:	f00e fe90 	bl	8024786 <memcpy>
      sc[s.len] = '\0';
 8015a66:	68bb      	ldr	r3, [r7, #8]
 8015a68:	69fa      	ldr	r2, [r7, #28]
 8015a6a:	4413      	add	r3, r2
 8015a6c:	2200      	movs	r2, #0
 8015a6e:	701a      	strb	r2, [r3, #0]
      r.buf = sc;
 8015a70:	69fb      	ldr	r3, [r7, #28]
 8015a72:	617b      	str	r3, [r7, #20]
      r.len = s.len;
 8015a74:	68bb      	ldr	r3, [r7, #8]
 8015a76:	61bb      	str	r3, [r7, #24]
    }
  }
  return r;
 8015a78:	68fb      	ldr	r3, [r7, #12]
 8015a7a:	461a      	mov	r2, r3
 8015a7c:	f107 0314 	add.w	r3, r7, #20
 8015a80:	e893 0003 	ldmia.w	r3, {r0, r1}
 8015a84:	e882 0003 	stmia.w	r2, {r0, r1}
}
 8015a88:	68f8      	ldr	r0, [r7, #12]
 8015a8a:	3720      	adds	r7, #32
 8015a8c:	46bd      	mov	sp, r7
 8015a8e:	bd80      	pop	{r7, pc}

08015a90 <mg_strcmp>:

int mg_strcmp(const struct mg_str str1, const struct mg_str str2) {
 8015a90:	b490      	push	{r4, r7}
 8015a92:	b088      	sub	sp, #32
 8015a94:	af00      	add	r7, sp, #0
 8015a96:	f107 0408 	add.w	r4, r7, #8
 8015a9a:	e884 0003 	stmia.w	r4, {r0, r1}
 8015a9e:	4639      	mov	r1, r7
 8015aa0:	e881 000c 	stmia.w	r1, {r2, r3}
  size_t i = 0;
 8015aa4:	2300      	movs	r3, #0
 8015aa6:	61fb      	str	r3, [r7, #28]
  while (i < str1.len && i < str2.len) {
 8015aa8:	e019      	b.n	8015ade <mg_strcmp+0x4e>
    int c1 = str1.buf[i];
 8015aaa:	68ba      	ldr	r2, [r7, #8]
 8015aac:	69fb      	ldr	r3, [r7, #28]
 8015aae:	4413      	add	r3, r2
 8015ab0:	781b      	ldrb	r3, [r3, #0]
 8015ab2:	61bb      	str	r3, [r7, #24]
    int c2 = str2.buf[i];
 8015ab4:	683a      	ldr	r2, [r7, #0]
 8015ab6:	69fb      	ldr	r3, [r7, #28]
 8015ab8:	4413      	add	r3, r2
 8015aba:	781b      	ldrb	r3, [r3, #0]
 8015abc:	617b      	str	r3, [r7, #20]
    if (c1 < c2) return -1;
 8015abe:	69ba      	ldr	r2, [r7, #24]
 8015ac0:	697b      	ldr	r3, [r7, #20]
 8015ac2:	429a      	cmp	r2, r3
 8015ac4:	da02      	bge.n	8015acc <mg_strcmp+0x3c>
 8015ac6:	f04f 33ff 	mov.w	r3, #4294967295
 8015aca:	e01e      	b.n	8015b0a <mg_strcmp+0x7a>
    if (c1 > c2) return 1;
 8015acc:	69ba      	ldr	r2, [r7, #24]
 8015ace:	697b      	ldr	r3, [r7, #20]
 8015ad0:	429a      	cmp	r2, r3
 8015ad2:	dd01      	ble.n	8015ad8 <mg_strcmp+0x48>
 8015ad4:	2301      	movs	r3, #1
 8015ad6:	e018      	b.n	8015b0a <mg_strcmp+0x7a>
    i++;
 8015ad8:	69fb      	ldr	r3, [r7, #28]
 8015ada:	3301      	adds	r3, #1
 8015adc:	61fb      	str	r3, [r7, #28]
  while (i < str1.len && i < str2.len) {
 8015ade:	68fb      	ldr	r3, [r7, #12]
 8015ae0:	69fa      	ldr	r2, [r7, #28]
 8015ae2:	429a      	cmp	r2, r3
 8015ae4:	d203      	bcs.n	8015aee <mg_strcmp+0x5e>
 8015ae6:	687b      	ldr	r3, [r7, #4]
 8015ae8:	69fa      	ldr	r2, [r7, #28]
 8015aea:	429a      	cmp	r2, r3
 8015aec:	d3dd      	bcc.n	8015aaa <mg_strcmp+0x1a>
  }
  if (i < str1.len) return 1;
 8015aee:	68fb      	ldr	r3, [r7, #12]
 8015af0:	69fa      	ldr	r2, [r7, #28]
 8015af2:	429a      	cmp	r2, r3
 8015af4:	d201      	bcs.n	8015afa <mg_strcmp+0x6a>
 8015af6:	2301      	movs	r3, #1
 8015af8:	e007      	b.n	8015b0a <mg_strcmp+0x7a>
  if (i < str2.len) return -1;
 8015afa:	687b      	ldr	r3, [r7, #4]
 8015afc:	69fa      	ldr	r2, [r7, #28]
 8015afe:	429a      	cmp	r2, r3
 8015b00:	d202      	bcs.n	8015b08 <mg_strcmp+0x78>
 8015b02:	f04f 33ff 	mov.w	r3, #4294967295
 8015b06:	e000      	b.n	8015b0a <mg_strcmp+0x7a>
  return 0;
 8015b08:	2300      	movs	r3, #0
}
 8015b0a:	4618      	mov	r0, r3
 8015b0c:	3720      	adds	r7, #32
 8015b0e:	46bd      	mov	sp, r7
 8015b10:	bc90      	pop	{r4, r7}
 8015b12:	4770      	bx	lr

08015b14 <mg_strcasecmp>:

int mg_strcasecmp(const struct mg_str str1, const struct mg_str str2) {
 8015b14:	b590      	push	{r4, r7, lr}
 8015b16:	b089      	sub	sp, #36	@ 0x24
 8015b18:	af00      	add	r7, sp, #0
 8015b1a:	f107 0408 	add.w	r4, r7, #8
 8015b1e:	e884 0003 	stmia.w	r4, {r0, r1}
 8015b22:	4639      	mov	r1, r7
 8015b24:	e881 000c 	stmia.w	r1, {r2, r3}
  size_t i = 0;
 8015b28:	2300      	movs	r3, #0
 8015b2a:	61fb      	str	r3, [r7, #28]
  while (i < str1.len && i < str2.len) {
 8015b2c:	e01f      	b.n	8015b6e <mg_strcasecmp+0x5a>
    int c1 = mg_tolc(str1.buf[i]);
 8015b2e:	68ba      	ldr	r2, [r7, #8]
 8015b30:	69fb      	ldr	r3, [r7, #28]
 8015b32:	4413      	add	r3, r2
 8015b34:	781b      	ldrb	r3, [r3, #0]
 8015b36:	4618      	mov	r0, r3
 8015b38:	f7ff ff5f 	bl	80159fa <mg_tolc>
 8015b3c:	61b8      	str	r0, [r7, #24]
    int c2 = mg_tolc(str2.buf[i]);
 8015b3e:	683a      	ldr	r2, [r7, #0]
 8015b40:	69fb      	ldr	r3, [r7, #28]
 8015b42:	4413      	add	r3, r2
 8015b44:	781b      	ldrb	r3, [r3, #0]
 8015b46:	4618      	mov	r0, r3
 8015b48:	f7ff ff57 	bl	80159fa <mg_tolc>
 8015b4c:	6178      	str	r0, [r7, #20]
    if (c1 < c2) return -1;
 8015b4e:	69ba      	ldr	r2, [r7, #24]
 8015b50:	697b      	ldr	r3, [r7, #20]
 8015b52:	429a      	cmp	r2, r3
 8015b54:	da02      	bge.n	8015b5c <mg_strcasecmp+0x48>
 8015b56:	f04f 33ff 	mov.w	r3, #4294967295
 8015b5a:	e01e      	b.n	8015b9a <mg_strcasecmp+0x86>
    if (c1 > c2) return 1;
 8015b5c:	69ba      	ldr	r2, [r7, #24]
 8015b5e:	697b      	ldr	r3, [r7, #20]
 8015b60:	429a      	cmp	r2, r3
 8015b62:	dd01      	ble.n	8015b68 <mg_strcasecmp+0x54>
 8015b64:	2301      	movs	r3, #1
 8015b66:	e018      	b.n	8015b9a <mg_strcasecmp+0x86>
    i++;
 8015b68:	69fb      	ldr	r3, [r7, #28]
 8015b6a:	3301      	adds	r3, #1
 8015b6c:	61fb      	str	r3, [r7, #28]
  while (i < str1.len && i < str2.len) {
 8015b6e:	68fb      	ldr	r3, [r7, #12]
 8015b70:	69fa      	ldr	r2, [r7, #28]
 8015b72:	429a      	cmp	r2, r3
 8015b74:	d203      	bcs.n	8015b7e <mg_strcasecmp+0x6a>
 8015b76:	687b      	ldr	r3, [r7, #4]
 8015b78:	69fa      	ldr	r2, [r7, #28]
 8015b7a:	429a      	cmp	r2, r3
 8015b7c:	d3d7      	bcc.n	8015b2e <mg_strcasecmp+0x1a>
  }
  if (i < str1.len) return 1;
 8015b7e:	68fb      	ldr	r3, [r7, #12]
 8015b80:	69fa      	ldr	r2, [r7, #28]
 8015b82:	429a      	cmp	r2, r3
 8015b84:	d201      	bcs.n	8015b8a <mg_strcasecmp+0x76>
 8015b86:	2301      	movs	r3, #1
 8015b88:	e007      	b.n	8015b9a <mg_strcasecmp+0x86>
  if (i < str2.len) return -1;
 8015b8a:	687b      	ldr	r3, [r7, #4]
 8015b8c:	69fa      	ldr	r2, [r7, #28]
 8015b8e:	429a      	cmp	r2, r3
 8015b90:	d202      	bcs.n	8015b98 <mg_strcasecmp+0x84>
 8015b92:	f04f 33ff 	mov.w	r3, #4294967295
 8015b96:	e000      	b.n	8015b9a <mg_strcasecmp+0x86>
  return 0;
 8015b98:	2300      	movs	r3, #0
}
 8015b9a:	4618      	mov	r0, r3
 8015b9c:	3724      	adds	r7, #36	@ 0x24
 8015b9e:	46bd      	mov	sp, r7
 8015ba0:	bd90      	pop	{r4, r7, pc}

08015ba2 <mg_match>:

bool mg_match(struct mg_str s, struct mg_str p, struct mg_str *caps) {
 8015ba2:	b490      	push	{r4, r7}
 8015ba4:	b088      	sub	sp, #32
 8015ba6:	af00      	add	r7, sp, #0
 8015ba8:	f107 0408 	add.w	r4, r7, #8
 8015bac:	e884 0003 	stmia.w	r4, {r0, r1}
 8015bb0:	4639      	mov	r1, r7
 8015bb2:	e881 000c 	stmia.w	r1, {r2, r3}
  size_t i = 0, j = 0, ni = 0, nj = 0;
 8015bb6:	2300      	movs	r3, #0
 8015bb8:	61fb      	str	r3, [r7, #28]
 8015bba:	2300      	movs	r3, #0
 8015bbc:	61bb      	str	r3, [r7, #24]
 8015bbe:	2300      	movs	r3, #0
 8015bc0:	617b      	str	r3, [r7, #20]
 8015bc2:	2300      	movs	r3, #0
 8015bc4:	613b      	str	r3, [r7, #16]
  if (caps) caps->buf = NULL, caps->len = 0;
 8015bc6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015bc8:	2b00      	cmp	r3, #0
 8015bca:	f000 80ba 	beq.w	8015d42 <mg_match+0x1a0>
 8015bce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015bd0:	2200      	movs	r2, #0
 8015bd2:	601a      	str	r2, [r3, #0]
 8015bd4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015bd6:	2200      	movs	r2, #0
 8015bd8:	605a      	str	r2, [r3, #4]
  while (i < p.len || j < s.len) {
 8015bda:	e0b2      	b.n	8015d42 <mg_match+0x1a0>
    if (i < p.len && j < s.len &&
 8015bdc:	687b      	ldr	r3, [r7, #4]
 8015bde:	69fa      	ldr	r2, [r7, #28]
 8015be0:	429a      	cmp	r2, r3
 8015be2:	d25b      	bcs.n	8015c9c <mg_match+0xfa>
 8015be4:	68fb      	ldr	r3, [r7, #12]
 8015be6:	69ba      	ldr	r2, [r7, #24]
 8015be8:	429a      	cmp	r2, r3
 8015bea:	d257      	bcs.n	8015c9c <mg_match+0xfa>
        (p.buf[i] == '?' ||
 8015bec:	683a      	ldr	r2, [r7, #0]
 8015bee:	69fb      	ldr	r3, [r7, #28]
 8015bf0:	4413      	add	r3, r2
 8015bf2:	781b      	ldrb	r3, [r3, #0]
    if (i < p.len && j < s.len &&
 8015bf4:	2b3f      	cmp	r3, #63	@ 0x3f
 8015bf6:	d015      	beq.n	8015c24 <mg_match+0x82>
         (p.buf[i] != '*' && p.buf[i] != '#' && s.buf[j] == p.buf[i]))) {
 8015bf8:	683a      	ldr	r2, [r7, #0]
 8015bfa:	69fb      	ldr	r3, [r7, #28]
 8015bfc:	4413      	add	r3, r2
 8015bfe:	781b      	ldrb	r3, [r3, #0]
        (p.buf[i] == '?' ||
 8015c00:	2b2a      	cmp	r3, #42	@ 0x2a
 8015c02:	d04b      	beq.n	8015c9c <mg_match+0xfa>
         (p.buf[i] != '*' && p.buf[i] != '#' && s.buf[j] == p.buf[i]))) {
 8015c04:	683a      	ldr	r2, [r7, #0]
 8015c06:	69fb      	ldr	r3, [r7, #28]
 8015c08:	4413      	add	r3, r2
 8015c0a:	781b      	ldrb	r3, [r3, #0]
 8015c0c:	2b23      	cmp	r3, #35	@ 0x23
 8015c0e:	d045      	beq.n	8015c9c <mg_match+0xfa>
 8015c10:	68ba      	ldr	r2, [r7, #8]
 8015c12:	69bb      	ldr	r3, [r7, #24]
 8015c14:	4413      	add	r3, r2
 8015c16:	781a      	ldrb	r2, [r3, #0]
 8015c18:	6839      	ldr	r1, [r7, #0]
 8015c1a:	69fb      	ldr	r3, [r7, #28]
 8015c1c:	440b      	add	r3, r1
 8015c1e:	781b      	ldrb	r3, [r3, #0]
 8015c20:	429a      	cmp	r2, r3
 8015c22:	d13b      	bne.n	8015c9c <mg_match+0xfa>
      if (caps == NULL) {
 8015c24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015c26:	2b00      	cmp	r3, #0
 8015c28:	d031      	beq.n	8015c8e <mg_match+0xec>
      } else if (p.buf[i] == '?') {
 8015c2a:	683a      	ldr	r2, [r7, #0]
 8015c2c:	69fb      	ldr	r3, [r7, #28]
 8015c2e:	4413      	add	r3, r2
 8015c30:	781b      	ldrb	r3, [r3, #0]
 8015c32:	2b3f      	cmp	r3, #63	@ 0x3f
 8015c34:	d111      	bne.n	8015c5a <mg_match+0xb8>
        caps->buf = &s.buf[j], caps->len = 1;     // Finalize `?` cap
 8015c36:	68ba      	ldr	r2, [r7, #8]
 8015c38:	69bb      	ldr	r3, [r7, #24]
 8015c3a:	441a      	add	r2, r3
 8015c3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015c3e:	601a      	str	r2, [r3, #0]
 8015c40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015c42:	2201      	movs	r2, #1
 8015c44:	605a      	str	r2, [r3, #4]
        caps++, caps->buf = NULL, caps->len = 0;  // Init next cap
 8015c46:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015c48:	3308      	adds	r3, #8
 8015c4a:	62bb      	str	r3, [r7, #40]	@ 0x28
 8015c4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015c4e:	2200      	movs	r2, #0
 8015c50:	601a      	str	r2, [r3, #0]
 8015c52:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015c54:	2200      	movs	r2, #0
 8015c56:	605a      	str	r2, [r3, #4]
 8015c58:	e019      	b.n	8015c8e <mg_match+0xec>
      } else if (caps->buf != NULL && caps->len == 0) {
 8015c5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015c5c:	681b      	ldr	r3, [r3, #0]
 8015c5e:	2b00      	cmp	r3, #0
 8015c60:	d015      	beq.n	8015c8e <mg_match+0xec>
 8015c62:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015c64:	685b      	ldr	r3, [r3, #4]
 8015c66:	2b00      	cmp	r3, #0
 8015c68:	d111      	bne.n	8015c8e <mg_match+0xec>
        caps->len = (size_t) (&s.buf[j] - caps->buf);  // Finalize current cap
 8015c6a:	68ba      	ldr	r2, [r7, #8]
 8015c6c:	69bb      	ldr	r3, [r7, #24]
 8015c6e:	441a      	add	r2, r3
 8015c70:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015c72:	681b      	ldr	r3, [r3, #0]
 8015c74:	1ad3      	subs	r3, r2, r3
 8015c76:	461a      	mov	r2, r3
 8015c78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015c7a:	605a      	str	r2, [r3, #4]
        caps++, caps->len = 0, caps->buf = NULL;       // Init next cap
 8015c7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015c7e:	3308      	adds	r3, #8
 8015c80:	62bb      	str	r3, [r7, #40]	@ 0x28
 8015c82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015c84:	2200      	movs	r2, #0
 8015c86:	605a      	str	r2, [r3, #4]
 8015c88:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015c8a:	2200      	movs	r2, #0
 8015c8c:	601a      	str	r2, [r3, #0]
      }
      i++, j++;
 8015c8e:	69fb      	ldr	r3, [r7, #28]
 8015c90:	3301      	adds	r3, #1
 8015c92:	61fb      	str	r3, [r7, #28]
 8015c94:	69bb      	ldr	r3, [r7, #24]
 8015c96:	3301      	adds	r3, #1
 8015c98:	61bb      	str	r3, [r7, #24]
 8015c9a:	e052      	b.n	8015d42 <mg_match+0x1a0>
    } else if (i < p.len && (p.buf[i] == '*' || p.buf[i] == '#')) {
 8015c9c:	687b      	ldr	r3, [r7, #4]
 8015c9e:	69fa      	ldr	r2, [r7, #28]
 8015ca0:	429a      	cmp	r2, r3
 8015ca2:	d222      	bcs.n	8015cea <mg_match+0x148>
 8015ca4:	683a      	ldr	r2, [r7, #0]
 8015ca6:	69fb      	ldr	r3, [r7, #28]
 8015ca8:	4413      	add	r3, r2
 8015caa:	781b      	ldrb	r3, [r3, #0]
 8015cac:	2b2a      	cmp	r3, #42	@ 0x2a
 8015cae:	d005      	beq.n	8015cbc <mg_match+0x11a>
 8015cb0:	683a      	ldr	r2, [r7, #0]
 8015cb2:	69fb      	ldr	r3, [r7, #28]
 8015cb4:	4413      	add	r3, r2
 8015cb6:	781b      	ldrb	r3, [r3, #0]
 8015cb8:	2b23      	cmp	r3, #35	@ 0x23
 8015cba:	d116      	bne.n	8015cea <mg_match+0x148>
      if (caps && !caps->buf) caps->len = 0, caps->buf = &s.buf[j];  // Init cap
 8015cbc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015cbe:	2b00      	cmp	r3, #0
 8015cc0:	d00b      	beq.n	8015cda <mg_match+0x138>
 8015cc2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015cc4:	681b      	ldr	r3, [r3, #0]
 8015cc6:	2b00      	cmp	r3, #0
 8015cc8:	d107      	bne.n	8015cda <mg_match+0x138>
 8015cca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015ccc:	2200      	movs	r2, #0
 8015cce:	605a      	str	r2, [r3, #4]
 8015cd0:	68ba      	ldr	r2, [r7, #8]
 8015cd2:	69bb      	ldr	r3, [r7, #24]
 8015cd4:	441a      	add	r2, r3
 8015cd6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015cd8:	601a      	str	r2, [r3, #0]
      ni = i++, nj = j + 1;
 8015cda:	69fb      	ldr	r3, [r7, #28]
 8015cdc:	1c5a      	adds	r2, r3, #1
 8015cde:	61fa      	str	r2, [r7, #28]
 8015ce0:	617b      	str	r3, [r7, #20]
 8015ce2:	69bb      	ldr	r3, [r7, #24]
 8015ce4:	3301      	adds	r3, #1
 8015ce6:	613b      	str	r3, [r7, #16]
 8015ce8:	e02b      	b.n	8015d42 <mg_match+0x1a0>
    } else if (nj > 0 && nj <= s.len && (p.buf[ni] == '#' || s.buf[j] != '/')) {
 8015cea:	693b      	ldr	r3, [r7, #16]
 8015cec:	2b00      	cmp	r3, #0
 8015cee:	d025      	beq.n	8015d3c <mg_match+0x19a>
 8015cf0:	68fb      	ldr	r3, [r7, #12]
 8015cf2:	693a      	ldr	r2, [r7, #16]
 8015cf4:	429a      	cmp	r2, r3
 8015cf6:	d821      	bhi.n	8015d3c <mg_match+0x19a>
 8015cf8:	683a      	ldr	r2, [r7, #0]
 8015cfa:	697b      	ldr	r3, [r7, #20]
 8015cfc:	4413      	add	r3, r2
 8015cfe:	781b      	ldrb	r3, [r3, #0]
 8015d00:	2b23      	cmp	r3, #35	@ 0x23
 8015d02:	d005      	beq.n	8015d10 <mg_match+0x16e>
 8015d04:	68ba      	ldr	r2, [r7, #8]
 8015d06:	69bb      	ldr	r3, [r7, #24]
 8015d08:	4413      	add	r3, r2
 8015d0a:	781b      	ldrb	r3, [r3, #0]
 8015d0c:	2b2f      	cmp	r3, #47	@ 0x2f
 8015d0e:	d015      	beq.n	8015d3c <mg_match+0x19a>
      i = ni, j = nj;
 8015d10:	697b      	ldr	r3, [r7, #20]
 8015d12:	61fb      	str	r3, [r7, #28]
 8015d14:	693b      	ldr	r3, [r7, #16]
 8015d16:	61bb      	str	r3, [r7, #24]
      if (caps && caps->buf == NULL && caps->len == 0) {
 8015d18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015d1a:	2b00      	cmp	r3, #0
 8015d1c:	d010      	beq.n	8015d40 <mg_match+0x19e>
 8015d1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015d20:	681b      	ldr	r3, [r3, #0]
 8015d22:	2b00      	cmp	r3, #0
 8015d24:	d10c      	bne.n	8015d40 <mg_match+0x19e>
 8015d26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015d28:	685b      	ldr	r3, [r3, #4]
 8015d2a:	2b00      	cmp	r3, #0
 8015d2c:	d108      	bne.n	8015d40 <mg_match+0x19e>
        caps--, caps->len = 0;  // Restart previous cap
 8015d2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015d30:	3b08      	subs	r3, #8
 8015d32:	62bb      	str	r3, [r7, #40]	@ 0x28
 8015d34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015d36:	2200      	movs	r2, #0
 8015d38:	605a      	str	r2, [r3, #4]
      if (caps && caps->buf == NULL && caps->len == 0) {
 8015d3a:	e001      	b.n	8015d40 <mg_match+0x19e>
      }
    } else {
      return false;
 8015d3c:	2300      	movs	r3, #0
 8015d3e:	e01f      	b.n	8015d80 <mg_match+0x1de>
      if (caps && caps->buf == NULL && caps->len == 0) {
 8015d40:	bf00      	nop
  while (i < p.len || j < s.len) {
 8015d42:	687b      	ldr	r3, [r7, #4]
 8015d44:	69fa      	ldr	r2, [r7, #28]
 8015d46:	429a      	cmp	r2, r3
 8015d48:	f4ff af48 	bcc.w	8015bdc <mg_match+0x3a>
 8015d4c:	68fb      	ldr	r3, [r7, #12]
 8015d4e:	69ba      	ldr	r2, [r7, #24]
 8015d50:	429a      	cmp	r2, r3
 8015d52:	f4ff af43 	bcc.w	8015bdc <mg_match+0x3a>
    }
  }
  if (caps && caps->buf && caps->len == 0) {
 8015d56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015d58:	2b00      	cmp	r3, #0
 8015d5a:	d010      	beq.n	8015d7e <mg_match+0x1dc>
 8015d5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015d5e:	681b      	ldr	r3, [r3, #0]
 8015d60:	2b00      	cmp	r3, #0
 8015d62:	d00c      	beq.n	8015d7e <mg_match+0x1dc>
 8015d64:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015d66:	685b      	ldr	r3, [r3, #4]
 8015d68:	2b00      	cmp	r3, #0
 8015d6a:	d108      	bne.n	8015d7e <mg_match+0x1dc>
    caps->len = (size_t) (&s.buf[j] - caps->buf);
 8015d6c:	68ba      	ldr	r2, [r7, #8]
 8015d6e:	69bb      	ldr	r3, [r7, #24]
 8015d70:	441a      	add	r2, r3
 8015d72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015d74:	681b      	ldr	r3, [r3, #0]
 8015d76:	1ad3      	subs	r3, r2, r3
 8015d78:	461a      	mov	r2, r3
 8015d7a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015d7c:	605a      	str	r2, [r3, #4]
  }
  return true;
 8015d7e:	2301      	movs	r3, #1
}
 8015d80:	4618      	mov	r0, r3
 8015d82:	3720      	adds	r7, #32
 8015d84:	46bd      	mov	sp, r7
 8015d86:	bc90      	pop	{r4, r7}
 8015d88:	4770      	bx	lr

08015d8a <mg_span>:

bool mg_span(struct mg_str s, struct mg_str *a, struct mg_str *b, char sep) {
 8015d8a:	b590      	push	{r4, r7, lr}
 8015d8c:	b089      	sub	sp, #36	@ 0x24
 8015d8e:	af00      	add	r7, sp, #0
 8015d90:	f107 0410 	add.w	r4, r7, #16
 8015d94:	e884 0003 	stmia.w	r4, {r0, r1}
 8015d98:	60fa      	str	r2, [r7, #12]
 8015d9a:	60bb      	str	r3, [r7, #8]
  if (s.len == 0 || s.buf == NULL) {
 8015d9c:	697b      	ldr	r3, [r7, #20]
 8015d9e:	2b00      	cmp	r3, #0
 8015da0:	d002      	beq.n	8015da8 <mg_span+0x1e>
 8015da2:	693b      	ldr	r3, [r7, #16]
 8015da4:	2b00      	cmp	r3, #0
 8015da6:	d101      	bne.n	8015dac <mg_span+0x22>
    return false;  // Empty string, nothing to span - fail
 8015da8:	2300      	movs	r3, #0
 8015daa:	e047      	b.n	8015e3c <mg_span+0xb2>
  } else {
    size_t len = 0;
 8015dac:	2300      	movs	r3, #0
 8015dae:	61fb      	str	r3, [r7, #28]
    while (len < s.len && s.buf[len] != sep) len++;  // Find separator
 8015db0:	e002      	b.n	8015db8 <mg_span+0x2e>
 8015db2:	69fb      	ldr	r3, [r7, #28]
 8015db4:	3301      	adds	r3, #1
 8015db6:	61fb      	str	r3, [r7, #28]
 8015db8:	697b      	ldr	r3, [r7, #20]
 8015dba:	69fa      	ldr	r2, [r7, #28]
 8015dbc:	429a      	cmp	r2, r3
 8015dbe:	d207      	bcs.n	8015dd0 <mg_span+0x46>
 8015dc0:	693a      	ldr	r2, [r7, #16]
 8015dc2:	69fb      	ldr	r3, [r7, #28]
 8015dc4:	4413      	add	r3, r2
 8015dc6:	781b      	ldrb	r3, [r3, #0]
 8015dc8:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 8015dcc:	429a      	cmp	r2, r3
 8015dce:	d1f0      	bne.n	8015db2 <mg_span+0x28>
    if (a) *a = mg_str_n(s.buf, len);                // Init a
 8015dd0:	68fb      	ldr	r3, [r7, #12]
 8015dd2:	2b00      	cmp	r3, #0
 8015dd4:	d00c      	beq.n	8015df0 <mg_span+0x66>
 8015dd6:	6939      	ldr	r1, [r7, #16]
 8015dd8:	68fc      	ldr	r4, [r7, #12]
 8015dda:	463b      	mov	r3, r7
 8015ddc:	69fa      	ldr	r2, [r7, #28]
 8015dde:	4618      	mov	r0, r3
 8015de0:	f7ff fdf3 	bl	80159ca <mg_str_n>
 8015de4:	4622      	mov	r2, r4
 8015de6:	463b      	mov	r3, r7
 8015de8:	e893 0003 	ldmia.w	r3, {r0, r1}
 8015dec:	e882 0003 	stmia.w	r2, {r0, r1}
    if (b) *b = mg_str_n(s.buf + len, s.len - len);  // Init b
 8015df0:	68bb      	ldr	r3, [r7, #8]
 8015df2:	2b00      	cmp	r3, #0
 8015df4:	d010      	beq.n	8015e18 <mg_span+0x8e>
 8015df6:	693a      	ldr	r2, [r7, #16]
 8015df8:	69fb      	ldr	r3, [r7, #28]
 8015dfa:	18d1      	adds	r1, r2, r3
 8015dfc:	697a      	ldr	r2, [r7, #20]
 8015dfe:	69fb      	ldr	r3, [r7, #28]
 8015e00:	1ad2      	subs	r2, r2, r3
 8015e02:	68bc      	ldr	r4, [r7, #8]
 8015e04:	463b      	mov	r3, r7
 8015e06:	4618      	mov	r0, r3
 8015e08:	f7ff fddf 	bl	80159ca <mg_str_n>
 8015e0c:	4622      	mov	r2, r4
 8015e0e:	463b      	mov	r3, r7
 8015e10:	e893 0003 	ldmia.w	r3, {r0, r1}
 8015e14:	e882 0003 	stmia.w	r2, {r0, r1}
    if (b && len < s.len) b->buf++, b->len--;        // Skip separator
 8015e18:	68bb      	ldr	r3, [r7, #8]
 8015e1a:	2b00      	cmp	r3, #0
 8015e1c:	d00d      	beq.n	8015e3a <mg_span+0xb0>
 8015e1e:	697b      	ldr	r3, [r7, #20]
 8015e20:	69fa      	ldr	r2, [r7, #28]
 8015e22:	429a      	cmp	r2, r3
 8015e24:	d209      	bcs.n	8015e3a <mg_span+0xb0>
 8015e26:	68bb      	ldr	r3, [r7, #8]
 8015e28:	681b      	ldr	r3, [r3, #0]
 8015e2a:	1c5a      	adds	r2, r3, #1
 8015e2c:	68bb      	ldr	r3, [r7, #8]
 8015e2e:	601a      	str	r2, [r3, #0]
 8015e30:	68bb      	ldr	r3, [r7, #8]
 8015e32:	685b      	ldr	r3, [r3, #4]
 8015e34:	1e5a      	subs	r2, r3, #1
 8015e36:	68bb      	ldr	r3, [r7, #8]
 8015e38:	605a      	str	r2, [r3, #4]
    return true;
 8015e3a:	2301      	movs	r3, #1
  }
}
 8015e3c:	4618      	mov	r0, r3
 8015e3e:	3724      	adds	r7, #36	@ 0x24
 8015e40:	46bd      	mov	sp, r7
 8015e42:	bd90      	pop	{r4, r7, pc}

08015e44 <mg_str_to_num>:

bool mg_str_to_num(struct mg_str str, int base, void *val, size_t val_len) {
 8015e44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015e48:	b0a5      	sub	sp, #148	@ 0x94
 8015e4a:	af00      	add	r7, sp, #0
 8015e4c:	f107 0450 	add.w	r4, r7, #80	@ 0x50
 8015e50:	e884 0003 	stmia.w	r4, {r0, r1}
 8015e54:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8015e56:	64bb      	str	r3, [r7, #72]	@ 0x48
  size_t i = 0, ndigits = 0;
 8015e58:	2300      	movs	r3, #0
 8015e5a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8015e5e:	2300      	movs	r3, #0
 8015e60:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  uint64_t max = val_len == sizeof(uint8_t)    ? 0xFF
                 : val_len == sizeof(uint16_t) ? 0xFFFF
 8015e64:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8015e68:	2b01      	cmp	r3, #1
 8015e6a:	d016      	beq.n	8015e9a <mg_str_to_num+0x56>
                 : val_len == sizeof(uint32_t) ? 0xFFFFFFFF
 8015e6c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8015e70:	2b02      	cmp	r3, #2
 8015e72:	d00d      	beq.n	8015e90 <mg_str_to_num+0x4c>
                                               : (uint64_t) ~0;
 8015e74:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8015e78:	2b04      	cmp	r3, #4
 8015e7a:	d104      	bne.n	8015e86 <mg_str_to_num+0x42>
 8015e7c:	f04f 32ff 	mov.w	r2, #4294967295
 8015e80:	f04f 0300 	mov.w	r3, #0
 8015e84:	e00d      	b.n	8015ea2 <mg_str_to_num+0x5e>
 8015e86:	f04f 32ff 	mov.w	r2, #4294967295
 8015e8a:	f04f 33ff 	mov.w	r3, #4294967295
 8015e8e:	e008      	b.n	8015ea2 <mg_str_to_num+0x5e>
                 : val_len == sizeof(uint32_t) ? 0xFFFFFFFF
 8015e90:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8015e94:	f04f 0300 	mov.w	r3, #0
 8015e98:	e003      	b.n	8015ea2 <mg_str_to_num+0x5e>
                 : val_len == sizeof(uint16_t) ? 0xFFFF
 8015e9a:	f04f 02ff 	mov.w	r2, #255	@ 0xff
 8015e9e:	f04f 0300 	mov.w	r3, #0
  uint64_t max = val_len == sizeof(uint8_t)    ? 0xFF
 8015ea2:	e9c7 231e 	strd	r2, r3, [r7, #120]	@ 0x78
  uint64_t result = 0;
 8015ea6:	f04f 0200 	mov.w	r2, #0
 8015eaa:	f04f 0300 	mov.w	r3, #0
 8015eae:	e9c7 2320 	strd	r2, r3, [r7, #128]	@ 0x80
  if (max == (uint64_t) ~0 && val_len != sizeof(uint64_t)) return false;
 8015eb2:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	@ 0x78
 8015eb6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015eba:	bf08      	it	eq
 8015ebc:	f1b2 3fff 	cmpeq.w	r2, #4294967295
 8015ec0:	d105      	bne.n	8015ece <mg_str_to_num+0x8a>
 8015ec2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8015ec6:	2b08      	cmp	r3, #8
 8015ec8:	d001      	beq.n	8015ece <mg_str_to_num+0x8a>
 8015eca:	2300      	movs	r3, #0
 8015ecc:	e1e8      	b.n	80162a0 <mg_str_to_num+0x45c>
  if (base == 0 && str.len >= 2) {
 8015ece:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8015ed0:	2b00      	cmp	r3, #0
 8015ed2:	d12d      	bne.n	8015f30 <mg_str_to_num+0xec>
 8015ed4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8015ed6:	2b01      	cmp	r3, #1
 8015ed8:	d92a      	bls.n	8015f30 <mg_str_to_num+0xec>
    if (str.buf[i] == '0') {
 8015eda:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8015edc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8015ee0:	4413      	add	r3, r2
 8015ee2:	781b      	ldrb	r3, [r3, #0]
 8015ee4:	2b30      	cmp	r3, #48	@ 0x30
 8015ee6:	d121      	bne.n	8015f2c <mg_str_to_num+0xe8>
      i++;
 8015ee8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8015eec:	3301      	adds	r3, #1
 8015eee:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      base = str.buf[i] == 'b' ? 2 : str.buf[i] == 'x' ? 16 : 10;
 8015ef2:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8015ef4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8015ef8:	4413      	add	r3, r2
 8015efa:	781b      	ldrb	r3, [r3, #0]
 8015efc:	2b62      	cmp	r3, #98	@ 0x62
 8015efe:	d00a      	beq.n	8015f16 <mg_str_to_num+0xd2>
 8015f00:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8015f02:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8015f06:	4413      	add	r3, r2
 8015f08:	781b      	ldrb	r3, [r3, #0]
 8015f0a:	2b78      	cmp	r3, #120	@ 0x78
 8015f0c:	d101      	bne.n	8015f12 <mg_str_to_num+0xce>
 8015f0e:	2310      	movs	r3, #16
 8015f10:	e002      	b.n	8015f18 <mg_str_to_num+0xd4>
 8015f12:	230a      	movs	r3, #10
 8015f14:	e000      	b.n	8015f18 <mg_str_to_num+0xd4>
 8015f16:	2302      	movs	r3, #2
 8015f18:	64fb      	str	r3, [r7, #76]	@ 0x4c
      if (base != 10) ++i;
 8015f1a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8015f1c:	2b0a      	cmp	r3, #10
 8015f1e:	d007      	beq.n	8015f30 <mg_str_to_num+0xec>
 8015f20:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8015f24:	3301      	adds	r3, #1
 8015f26:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8015f2a:	e001      	b.n	8015f30 <mg_str_to_num+0xec>
    } else {
      base = 10;
 8015f2c:	230a      	movs	r3, #10
 8015f2e:	64fb      	str	r3, [r7, #76]	@ 0x4c
    }
  }
  switch (base) {
 8015f30:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8015f32:	2b10      	cmp	r3, #16
 8015f34:	f000 8178 	beq.w	8016228 <mg_str_to_num+0x3e4>
 8015f38:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8015f3a:	2b10      	cmp	r3, #16
 8015f3c:	f300 817d 	bgt.w	801623a <mg_str_to_num+0x3f6>
 8015f40:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8015f42:	2b02      	cmp	r3, #2
 8015f44:	d052      	beq.n	8015fec <mg_str_to_num+0x1a8>
 8015f46:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8015f48:	2b0a      	cmp	r3, #10
 8015f4a:	f000 80cd 	beq.w	80160e8 <mg_str_to_num+0x2a4>
 8015f4e:	e174      	b.n	801623a <mg_str_to_num+0x3f6>
    case 2:
      while (i < str.len && (str.buf[i] == '0' || str.buf[i] == '1')) {
        uint64_t digit = (uint64_t) (str.buf[i] - '0');
 8015f50:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8015f52:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8015f56:	4413      	add	r3, r2
 8015f58:	781b      	ldrb	r3, [r3, #0]
 8015f5a:	3b30      	subs	r3, #48	@ 0x30
 8015f5c:	17da      	asrs	r2, r3, #31
 8015f5e:	633b      	str	r3, [r7, #48]	@ 0x30
 8015f60:	637a      	str	r2, [r7, #52]	@ 0x34
 8015f62:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	@ 0x30
 8015f66:	e9c7 3416 	strd	r3, r4, [r7, #88]	@ 0x58
        if (result > max / 2) return false;  // Overflow
 8015f6a:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 8015f6e:	f04f 0200 	mov.w	r2, #0
 8015f72:	f04f 0300 	mov.w	r3, #0
 8015f76:	0842      	lsrs	r2, r0, #1
 8015f78:	ea42 72c1 	orr.w	r2, r2, r1, lsl #31
 8015f7c:	084b      	lsrs	r3, r1, #1
 8015f7e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8015f82:	4282      	cmp	r2, r0
 8015f84:	418b      	sbcs	r3, r1
 8015f86:	d201      	bcs.n	8015f8c <mg_str_to_num+0x148>
 8015f88:	2300      	movs	r3, #0
 8015f8a:	e189      	b.n	80162a0 <mg_str_to_num+0x45c>
        result *= 2;
 8015f8c:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	@ 0x80
 8015f90:	1891      	adds	r1, r2, r2
 8015f92:	62b9      	str	r1, [r7, #40]	@ 0x28
 8015f94:	415b      	adcs	r3, r3
 8015f96:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8015f98:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	@ 0x28
 8015f9c:	e9c7 3420 	strd	r3, r4, [r7, #128]	@ 0x80
        if (result > max - digit) return false;  // Overflow
 8015fa0:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 8015fa4:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8015fa8:	1a85      	subs	r5, r0, r2
 8015faa:	eb61 0603 	sbc.w	r6, r1, r3
 8015fae:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	@ 0x80
 8015fb2:	4295      	cmp	r5, r2
 8015fb4:	eb76 0303 	sbcs.w	r3, r6, r3
 8015fb8:	d201      	bcs.n	8015fbe <mg_str_to_num+0x17a>
 8015fba:	2300      	movs	r3, #0
 8015fbc:	e170      	b.n	80162a0 <mg_str_to_num+0x45c>
        result += digit;
 8015fbe:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8015fc2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8015fc6:	1884      	adds	r4, r0, r2
 8015fc8:	623c      	str	r4, [r7, #32]
 8015fca:	eb41 0303 	adc.w	r3, r1, r3
 8015fce:	627b      	str	r3, [r7, #36]	@ 0x24
 8015fd0:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8015fd4:	e9c7 3420 	strd	r3, r4, [r7, #128]	@ 0x80
        i++, ndigits++;
 8015fd8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8015fdc:	3301      	adds	r3, #1
 8015fde:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8015fe2:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8015fe6:	3301      	adds	r3, #1
 8015fe8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
      while (i < str.len && (str.buf[i] == '0' || str.buf[i] == '1')) {
 8015fec:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8015fee:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 8015ff2:	429a      	cmp	r2, r3
 8015ff4:	f080 8123 	bcs.w	801623e <mg_str_to_num+0x3fa>
 8015ff8:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8015ffa:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8015ffe:	4413      	add	r3, r2
 8016000:	781b      	ldrb	r3, [r3, #0]
 8016002:	2b30      	cmp	r3, #48	@ 0x30
 8016004:	d0a4      	beq.n	8015f50 <mg_str_to_num+0x10c>
 8016006:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8016008:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 801600c:	4413      	add	r3, r2
 801600e:	781b      	ldrb	r3, [r3, #0]
 8016010:	2b31      	cmp	r3, #49	@ 0x31
 8016012:	d09d      	beq.n	8015f50 <mg_str_to_num+0x10c>
      }
      break;
 8016014:	e113      	b.n	801623e <mg_str_to_num+0x3fa>
    case 10:
      while (i < str.len && str.buf[i] >= '0' && str.buf[i] <= '9') {
        uint64_t digit = (uint64_t) (str.buf[i] - '0');
 8016016:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8016018:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 801601c:	4413      	add	r3, r2
 801601e:	781b      	ldrb	r3, [r3, #0]
 8016020:	3b30      	subs	r3, #48	@ 0x30
 8016022:	17da      	asrs	r2, r3, #31
 8016024:	61bb      	str	r3, [r7, #24]
 8016026:	61fa      	str	r2, [r7, #28]
 8016028:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 801602c:	e9c7 3418 	strd	r3, r4, [r7, #96]	@ 0x60
        if (result > max / 10) return false;  // Overflow
 8016030:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 8016034:	f04f 020a 	mov.w	r2, #10
 8016038:	f04f 0300 	mov.w	r3, #0
 801603c:	f7ea f968 	bl	8000310 <__aeabi_uldivmod>
 8016040:	4602      	mov	r2, r0
 8016042:	460b      	mov	r3, r1
 8016044:	4610      	mov	r0, r2
 8016046:	4619      	mov	r1, r3
 8016048:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	@ 0x80
 801604c:	4290      	cmp	r0, r2
 801604e:	eb71 0303 	sbcs.w	r3, r1, r3
 8016052:	d201      	bcs.n	8016058 <mg_str_to_num+0x214>
 8016054:	2300      	movs	r3, #0
 8016056:	e123      	b.n	80162a0 <mg_str_to_num+0x45c>
        result *= 10;
 8016058:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	@ 0x80
 801605c:	4622      	mov	r2, r4
 801605e:	462b      	mov	r3, r5
 8016060:	f04f 0000 	mov.w	r0, #0
 8016064:	f04f 0100 	mov.w	r1, #0
 8016068:	0099      	lsls	r1, r3, #2
 801606a:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 801606e:	0090      	lsls	r0, r2, #2
 8016070:	4602      	mov	r2, r0
 8016072:	460b      	mov	r3, r1
 8016074:	eb12 0804 	adds.w	r8, r2, r4
 8016078:	eb43 0905 	adc.w	r9, r3, r5
 801607c:	eb18 0308 	adds.w	r3, r8, r8
 8016080:	613b      	str	r3, [r7, #16]
 8016082:	eb49 0309 	adc.w	r3, r9, r9
 8016086:	617b      	str	r3, [r7, #20]
 8016088:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 801608c:	e9c7 8920 	strd	r8, r9, [r7, #128]	@ 0x80
        if (result > max - digit) return false;  // Overflow
 8016090:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 8016094:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 8016098:	1a84      	subs	r4, r0, r2
 801609a:	63bc      	str	r4, [r7, #56]	@ 0x38
 801609c:	eb61 0303 	sbc.w	r3, r1, r3
 80160a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80160a2:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	@ 0x80
 80160a6:	e9d7 450e 	ldrd	r4, r5, [r7, #56]	@ 0x38
 80160aa:	4621      	mov	r1, r4
 80160ac:	4291      	cmp	r1, r2
 80160ae:	4629      	mov	r1, r5
 80160b0:	eb71 0303 	sbcs.w	r3, r1, r3
 80160b4:	d201      	bcs.n	80160ba <mg_str_to_num+0x276>
 80160b6:	2300      	movs	r3, #0
 80160b8:	e0f2      	b.n	80162a0 <mg_str_to_num+0x45c>
        result += digit;
 80160ba:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80160be:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 80160c2:	1884      	adds	r4, r0, r2
 80160c4:	60bc      	str	r4, [r7, #8]
 80160c6:	eb41 0303 	adc.w	r3, r1, r3
 80160ca:	60fb      	str	r3, [r7, #12]
 80160cc:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 80160d0:	e9c7 3420 	strd	r3, r4, [r7, #128]	@ 0x80
        i++, ndigits++;
 80160d4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80160d8:	3301      	adds	r3, #1
 80160da:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80160de:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80160e2:	3301      	adds	r3, #1
 80160e4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
      while (i < str.len && str.buf[i] >= '0' && str.buf[i] <= '9') {
 80160e8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80160ea:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 80160ee:	429a      	cmp	r2, r3
 80160f0:	f080 80a7 	bcs.w	8016242 <mg_str_to_num+0x3fe>
 80160f4:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80160f6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80160fa:	4413      	add	r3, r2
 80160fc:	781b      	ldrb	r3, [r3, #0]
 80160fe:	2b2f      	cmp	r3, #47	@ 0x2f
 8016100:	f240 809f 	bls.w	8016242 <mg_str_to_num+0x3fe>
 8016104:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8016106:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 801610a:	4413      	add	r3, r2
 801610c:	781b      	ldrb	r3, [r3, #0]
 801610e:	2b39      	cmp	r3, #57	@ 0x39
 8016110:	d981      	bls.n	8016016 <mg_str_to_num+0x1d2>
      }
      break;
 8016112:	e096      	b.n	8016242 <mg_str_to_num+0x3fe>
    case 16:
      while (i < str.len) {
        char c = str.buf[i];
 8016114:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8016116:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 801611a:	4413      	add	r3, r2
 801611c:	781b      	ldrb	r3, [r3, #0]
 801611e:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
        uint64_t digit = (c >= '0' && c <= '9')   ? (uint64_t) (c - '0')
                         : (c >= 'A' && c <= 'F') ? (uint64_t) (c - '7')
 8016122:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 8016126:	2b2f      	cmp	r3, #47	@ 0x2f
 8016128:	d90a      	bls.n	8016140 <mg_str_to_num+0x2fc>
        uint64_t digit = (c >= '0' && c <= '9')   ? (uint64_t) (c - '0')
 801612a:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 801612e:	2b39      	cmp	r3, #57	@ 0x39
 8016130:	d806      	bhi.n	8016140 <mg_str_to_num+0x2fc>
 8016132:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 8016136:	3b30      	subs	r3, #48	@ 0x30
                         : (c >= 'A' && c <= 'F') ? (uint64_t) (c - '7')
 8016138:	17da      	asrs	r2, r3, #31
 801613a:	643b      	str	r3, [r7, #64]	@ 0x40
 801613c:	647a      	str	r2, [r7, #68]	@ 0x44
 801613e:	e023      	b.n	8016188 <mg_str_to_num+0x344>
                         : (c >= 'a' && c <= 'f') ? (uint64_t) (c - 'W')
 8016140:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 8016144:	2b40      	cmp	r3, #64	@ 0x40
 8016146:	d90a      	bls.n	801615e <mg_str_to_num+0x31a>
                         : (c >= 'A' && c <= 'F') ? (uint64_t) (c - '7')
 8016148:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 801614c:	2b46      	cmp	r3, #70	@ 0x46
 801614e:	d806      	bhi.n	801615e <mg_str_to_num+0x31a>
 8016150:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 8016154:	3b37      	subs	r3, #55	@ 0x37
                         : (c >= 'a' && c <= 'f') ? (uint64_t) (c - 'W')
 8016156:	17da      	asrs	r2, r3, #31
 8016158:	643b      	str	r3, [r7, #64]	@ 0x40
 801615a:	647a      	str	r2, [r7, #68]	@ 0x44
 801615c:	e014      	b.n	8016188 <mg_str_to_num+0x344>
                                                  : (uint64_t) ~0;
 801615e:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 8016162:	2b60      	cmp	r3, #96	@ 0x60
 8016164:	d90a      	bls.n	801617c <mg_str_to_num+0x338>
                         : (c >= 'a' && c <= 'f') ? (uint64_t) (c - 'W')
 8016166:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 801616a:	2b66      	cmp	r3, #102	@ 0x66
 801616c:	d806      	bhi.n	801617c <mg_str_to_num+0x338>
 801616e:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 8016172:	3b57      	subs	r3, #87	@ 0x57
                                                  : (uint64_t) ~0;
 8016174:	17da      	asrs	r2, r3, #31
 8016176:	643b      	str	r3, [r7, #64]	@ 0x40
 8016178:	647a      	str	r2, [r7, #68]	@ 0x44
 801617a:	e005      	b.n	8016188 <mg_str_to_num+0x344>
 801617c:	f04f 33ff 	mov.w	r3, #4294967295
 8016180:	f04f 34ff 	mov.w	r4, #4294967295
 8016184:	e9c7 3410 	strd	r3, r4, [r7, #64]	@ 0x40
        uint64_t digit = (c >= '0' && c <= '9')   ? (uint64_t) (c - '0')
 8016188:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	@ 0x40
 801618c:	e9c7 341a 	strd	r3, r4, [r7, #104]	@ 0x68
        if (digit == (uint64_t) ~0) break;
 8016190:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 8016194:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016198:	bf08      	it	eq
 801619a:	f1b2 3fff 	cmpeq.w	r2, #4294967295
 801619e:	d04a      	beq.n	8016236 <mg_str_to_num+0x3f2>
        if (result > max / 16) return false;  // Overflow
 80161a0:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 80161a4:	f04f 0200 	mov.w	r2, #0
 80161a8:	f04f 0300 	mov.w	r3, #0
 80161ac:	0902      	lsrs	r2, r0, #4
 80161ae:	ea42 7201 	orr.w	r2, r2, r1, lsl #28
 80161b2:	090b      	lsrs	r3, r1, #4
 80161b4:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80161b8:	4282      	cmp	r2, r0
 80161ba:	418b      	sbcs	r3, r1
 80161bc:	d201      	bcs.n	80161c2 <mg_str_to_num+0x37e>
 80161be:	2300      	movs	r3, #0
 80161c0:	e06e      	b.n	80162a0 <mg_str_to_num+0x45c>
        result *= 16;
 80161c2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80161c6:	f04f 0200 	mov.w	r2, #0
 80161ca:	f04f 0300 	mov.w	r3, #0
 80161ce:	010b      	lsls	r3, r1, #4
 80161d0:	ea43 7310 	orr.w	r3, r3, r0, lsr #28
 80161d4:	0102      	lsls	r2, r0, #4
 80161d6:	e9c7 2320 	strd	r2, r3, [r7, #128]	@ 0x80
        if (result > max - digit) return false;  // Overflow
 80161da:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 80161de:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 80161e2:	ebb0 0a02 	subs.w	sl, r0, r2
 80161e6:	eb61 0b03 	sbc.w	fp, r1, r3
 80161ea:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	@ 0x80
 80161ee:	4592      	cmp	sl, r2
 80161f0:	eb7b 0303 	sbcs.w	r3, fp, r3
 80161f4:	d201      	bcs.n	80161fa <mg_str_to_num+0x3b6>
 80161f6:	2300      	movs	r3, #0
 80161f8:	e052      	b.n	80162a0 <mg_str_to_num+0x45c>
        result += digit;
 80161fa:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80161fe:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 8016202:	1884      	adds	r4, r0, r2
 8016204:	603c      	str	r4, [r7, #0]
 8016206:	eb41 0303 	adc.w	r3, r1, r3
 801620a:	607b      	str	r3, [r7, #4]
 801620c:	e9d7 3400 	ldrd	r3, r4, [r7]
 8016210:	e9c7 3420 	strd	r3, r4, [r7, #128]	@ 0x80
        i++, ndigits++;
 8016214:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8016218:	3301      	adds	r3, #1
 801621a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 801621e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8016222:	3301      	adds	r3, #1
 8016224:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
      while (i < str.len) {
 8016228:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801622a:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 801622e:	429a      	cmp	r2, r3
 8016230:	f4ff af70 	bcc.w	8016114 <mg_str_to_num+0x2d0>
      }
      break;
 8016234:	e006      	b.n	8016244 <mg_str_to_num+0x400>
        if (digit == (uint64_t) ~0) break;
 8016236:	bf00      	nop
      break;
 8016238:	e004      	b.n	8016244 <mg_str_to_num+0x400>
    default:
      return false;
 801623a:	2300      	movs	r3, #0
 801623c:	e030      	b.n	80162a0 <mg_str_to_num+0x45c>
      break;
 801623e:	bf00      	nop
 8016240:	e000      	b.n	8016244 <mg_str_to_num+0x400>
      break;
 8016242:	bf00      	nop
  }
  if (ndigits == 0) return false;
 8016244:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8016248:	2b00      	cmp	r3, #0
 801624a:	d101      	bne.n	8016250 <mg_str_to_num+0x40c>
 801624c:	2300      	movs	r3, #0
 801624e:	e027      	b.n	80162a0 <mg_str_to_num+0x45c>
  if (i != str.len) return false;
 8016250:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8016252:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 8016256:	429a      	cmp	r2, r3
 8016258:	d001      	beq.n	801625e <mg_str_to_num+0x41a>
 801625a:	2300      	movs	r3, #0
 801625c:	e020      	b.n	80162a0 <mg_str_to_num+0x45c>
  if (val_len == 1) {
 801625e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8016262:	2b01      	cmp	r3, #1
 8016264:	d104      	bne.n	8016270 <mg_str_to_num+0x42c>
    *((uint8_t *) val) = (uint8_t) result;
 8016266:	f897 2080 	ldrb.w	r2, [r7, #128]	@ 0x80
 801626a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801626c:	701a      	strb	r2, [r3, #0]
 801626e:	e016      	b.n	801629e <mg_str_to_num+0x45a>
  } else if (val_len == 2) {
 8016270:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8016274:	2b02      	cmp	r3, #2
 8016276:	d104      	bne.n	8016282 <mg_str_to_num+0x43e>
    *((uint16_t *) val) = (uint16_t) result;
 8016278:	f8b7 2080 	ldrh.w	r2, [r7, #128]	@ 0x80
 801627c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801627e:	801a      	strh	r2, [r3, #0]
 8016280:	e00d      	b.n	801629e <mg_str_to_num+0x45a>
  } else if (val_len == 4) {
 8016282:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8016286:	2b04      	cmp	r3, #4
 8016288:	d104      	bne.n	8016294 <mg_str_to_num+0x450>
    *((uint32_t *) val) = (uint32_t) result;
 801628a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 801628e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8016290:	601a      	str	r2, [r3, #0]
 8016292:	e004      	b.n	801629e <mg_str_to_num+0x45a>
  } else {
    *((uint64_t *) val) = (uint64_t) result;
 8016294:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8016296:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	@ 0x80
 801629a:	e9c1 2300 	strd	r2, r3, [r1]
  }
  return true;
 801629e:	2301      	movs	r3, #1
}
 80162a0:	4618      	mov	r0, r3
 80162a2:	3794      	adds	r7, #148	@ 0x94
 80162a4:	46bd      	mov	sp, r7
 80162a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080162aa <mg_timer_free>:
  t->period_ms = ms, t->expire = 0;
  t->flags = flags, t->fn = fn, t->arg = arg, t->next = *head;
  *head = t;
}

void mg_timer_free(struct mg_timer **head, struct mg_timer *t) {
 80162aa:	b480      	push	{r7}
 80162ac:	b083      	sub	sp, #12
 80162ae:	af00      	add	r7, sp, #0
 80162b0:	6078      	str	r0, [r7, #4]
 80162b2:	6039      	str	r1, [r7, #0]
  while (*head && *head != t) head = &(*head)->next;
 80162b4:	e003      	b.n	80162be <mg_timer_free+0x14>
 80162b6:	687b      	ldr	r3, [r7, #4]
 80162b8:	681b      	ldr	r3, [r3, #0]
 80162ba:	331c      	adds	r3, #28
 80162bc:	607b      	str	r3, [r7, #4]
 80162be:	687b      	ldr	r3, [r7, #4]
 80162c0:	681b      	ldr	r3, [r3, #0]
 80162c2:	2b00      	cmp	r3, #0
 80162c4:	d004      	beq.n	80162d0 <mg_timer_free+0x26>
 80162c6:	687b      	ldr	r3, [r7, #4]
 80162c8:	681b      	ldr	r3, [r3, #0]
 80162ca:	683a      	ldr	r2, [r7, #0]
 80162cc:	429a      	cmp	r2, r3
 80162ce:	d1f2      	bne.n	80162b6 <mg_timer_free+0xc>
  if (*head) *head = t->next;
 80162d0:	687b      	ldr	r3, [r7, #4]
 80162d2:	681b      	ldr	r3, [r3, #0]
 80162d4:	2b00      	cmp	r3, #0
 80162d6:	d003      	beq.n	80162e0 <mg_timer_free+0x36>
 80162d8:	683b      	ldr	r3, [r7, #0]
 80162da:	69da      	ldr	r2, [r3, #28]
 80162dc:	687b      	ldr	r3, [r7, #4]
 80162de:	601a      	str	r2, [r3, #0]
}
 80162e0:	bf00      	nop
 80162e2:	370c      	adds	r7, #12
 80162e4:	46bd      	mov	sp, r7
 80162e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80162ea:	4770      	bx	lr

080162ec <mg_timer_expired>:

// t: expiration time, prd: period, now: current time. Return true if expired
bool mg_timer_expired(uint64_t *t, uint64_t prd, uint64_t now) {
 80162ec:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80162f0:	b086      	sub	sp, #24
 80162f2:	af00      	add	r7, sp, #0
 80162f4:	6178      	str	r0, [r7, #20]
 80162f6:	e9c7 2302 	strd	r2, r3, [r7, #8]
  if (now + prd < *t) *t = 0;                    // Time wrapped? Reset timer
 80162fa:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 80162fe:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8016302:	eb10 0a02 	adds.w	sl, r0, r2
 8016306:	eb41 0b03 	adc.w	fp, r1, r3
 801630a:	697b      	ldr	r3, [r7, #20]
 801630c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016310:	4592      	cmp	sl, r2
 8016312:	eb7b 0303 	sbcs.w	r3, fp, r3
 8016316:	d206      	bcs.n	8016326 <mg_timer_expired+0x3a>
 8016318:	6979      	ldr	r1, [r7, #20]
 801631a:	f04f 0200 	mov.w	r2, #0
 801631e:	f04f 0300 	mov.w	r3, #0
 8016322:	e9c1 2300 	strd	r2, r3, [r1]
  if (*t == 0) *t = now + prd;                   // Firt poll? Set expiration
 8016326:	697b      	ldr	r3, [r7, #20]
 8016328:	e9d3 2300 	ldrd	r2, r3, [r3]
 801632c:	4313      	orrs	r3, r2
 801632e:	d10d      	bne.n	801634c <mg_timer_expired+0x60>
 8016330:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 8016334:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8016338:	1886      	adds	r6, r0, r2
 801633a:	603e      	str	r6, [r7, #0]
 801633c:	eb41 0303 	adc.w	r3, r1, r3
 8016340:	607b      	str	r3, [r7, #4]
 8016342:	697b      	ldr	r3, [r7, #20]
 8016344:	e9d7 1200 	ldrd	r1, r2, [r7]
 8016348:	e9c3 1200 	strd	r1, r2, [r3]
  if (*t > now) return false;                    // Not expired yet, return
 801634c:	697b      	ldr	r3, [r7, #20]
 801634e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016352:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 8016356:	4290      	cmp	r0, r2
 8016358:	eb71 0303 	sbcs.w	r3, r1, r3
 801635c:	d201      	bcs.n	8016362 <mg_timer_expired+0x76>
 801635e:	2300      	movs	r3, #0
 8016360:	e022      	b.n	80163a8 <mg_timer_expired+0xbc>
  *t = (now - *t) > prd ? now + prd : *t + prd;  // Next expiration time
 8016362:	697b      	ldr	r3, [r7, #20]
 8016364:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016368:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 801636c:	ebb0 0802 	subs.w	r8, r0, r2
 8016370:	eb61 0903 	sbc.w	r9, r1, r3
 8016374:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8016378:	4542      	cmp	r2, r8
 801637a:	eb73 0309 	sbcs.w	r3, r3, r9
 801637e:	d207      	bcs.n	8016390 <mg_timer_expired+0xa4>
 8016380:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 8016384:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8016388:	1884      	adds	r4, r0, r2
 801638a:	eb41 0503 	adc.w	r5, r1, r3
 801638e:	e007      	b.n	80163a0 <mg_timer_expired+0xb4>
 8016390:	697b      	ldr	r3, [r7, #20]
 8016392:	e9d3 0100 	ldrd	r0, r1, [r3]
 8016396:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 801639a:	1884      	adds	r4, r0, r2
 801639c:	eb41 0503 	adc.w	r5, r1, r3
 80163a0:	697b      	ldr	r3, [r7, #20]
 80163a2:	e9c3 4500 	strd	r4, r5, [r3]
  return true;                                   // Expired, return true
 80163a6:	2301      	movs	r3, #1
}
 80163a8:	4618      	mov	r0, r3
 80163aa:	3718      	adds	r7, #24
 80163ac:	46bd      	mov	sp, r7
 80163ae:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80163b2:	4770      	bx	lr

080163b4 <mg_timer_poll>:

void mg_timer_poll(struct mg_timer **head, uint64_t now_ms) {
 80163b4:	b590      	push	{r4, r7, lr}
 80163b6:	b08b      	sub	sp, #44	@ 0x2c
 80163b8:	af02      	add	r7, sp, #8
 80163ba:	60f8      	str	r0, [r7, #12]
 80163bc:	e9c7 2300 	strd	r2, r3, [r7]
  struct mg_timer *t, *tmp;
  for (t = *head; t != NULL; t = tmp) {
 80163c0:	68fb      	ldr	r3, [r7, #12]
 80163c2:	681b      	ldr	r3, [r3, #0]
 80163c4:	61fb      	str	r3, [r7, #28]
 80163c6:	e067      	b.n	8016498 <mg_timer_poll+0xe4>
    bool once = t->expire == 0 && (t->flags & MG_TIMER_RUN_NOW) &&
 80163c8:	69fb      	ldr	r3, [r7, #28]
 80163ca:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80163ce:	4313      	orrs	r3, r2
 80163d0:	d10d      	bne.n	80163ee <mg_timer_poll+0x3a>
 80163d2:	69fb      	ldr	r3, [r7, #28]
 80163d4:	691b      	ldr	r3, [r3, #16]
 80163d6:	f003 0302 	and.w	r3, r3, #2
 80163da:	2b00      	cmp	r3, #0
 80163dc:	d007      	beq.n	80163ee <mg_timer_poll+0x3a>
                !(t->flags & MG_TIMER_CALLED);  // Handle MG_TIMER_NOW only once
 80163de:	69fb      	ldr	r3, [r7, #28]
 80163e0:	691b      	ldr	r3, [r3, #16]
 80163e2:	f003 0304 	and.w	r3, r3, #4
    bool once = t->expire == 0 && (t->flags & MG_TIMER_RUN_NOW) &&
 80163e6:	2b00      	cmp	r3, #0
 80163e8:	d101      	bne.n	80163ee <mg_timer_poll+0x3a>
 80163ea:	2301      	movs	r3, #1
 80163ec:	e000      	b.n	80163f0 <mg_timer_poll+0x3c>
 80163ee:	2300      	movs	r3, #0
 80163f0:	76fb      	strb	r3, [r7, #27]
 80163f2:	7efb      	ldrb	r3, [r7, #27]
 80163f4:	f003 0301 	and.w	r3, r3, #1
 80163f8:	76fb      	strb	r3, [r7, #27]
    bool expired = mg_timer_expired(&t->expire, t->period_ms, now_ms);
 80163fa:	69fb      	ldr	r3, [r7, #28]
 80163fc:	f103 0408 	add.w	r4, r3, #8
 8016400:	69fb      	ldr	r3, [r7, #28]
 8016402:	e9d3 0100 	ldrd	r0, r1, [r3]
 8016406:	e9d7 2300 	ldrd	r2, r3, [r7]
 801640a:	e9cd 2300 	strd	r2, r3, [sp]
 801640e:	4602      	mov	r2, r0
 8016410:	460b      	mov	r3, r1
 8016412:	4620      	mov	r0, r4
 8016414:	f7ff ff6a 	bl	80162ec <mg_timer_expired>
 8016418:	4603      	mov	r3, r0
 801641a:	76bb      	strb	r3, [r7, #26]
    tmp = t->next;
 801641c:	69fb      	ldr	r3, [r7, #28]
 801641e:	69db      	ldr	r3, [r3, #28]
 8016420:	617b      	str	r3, [r7, #20]
    if (!once && !expired) continue;
 8016422:	7efb      	ldrb	r3, [r7, #27]
 8016424:	f083 0301 	eor.w	r3, r3, #1
 8016428:	b2db      	uxtb	r3, r3
 801642a:	2b00      	cmp	r3, #0
 801642c:	d005      	beq.n	801643a <mg_timer_poll+0x86>
 801642e:	7ebb      	ldrb	r3, [r7, #26]
 8016430:	f083 0301 	eor.w	r3, r3, #1
 8016434:	b2db      	uxtb	r3, r3
 8016436:	2b00      	cmp	r3, #0
 8016438:	d12b      	bne.n	8016492 <mg_timer_poll+0xde>
    if ((t->flags & MG_TIMER_REPEAT) || !(t->flags & MG_TIMER_CALLED)) {
 801643a:	69fb      	ldr	r3, [r7, #28]
 801643c:	691b      	ldr	r3, [r3, #16]
 801643e:	f003 0301 	and.w	r3, r3, #1
 8016442:	2b00      	cmp	r3, #0
 8016444:	d105      	bne.n	8016452 <mg_timer_poll+0x9e>
 8016446:	69fb      	ldr	r3, [r7, #28]
 8016448:	691b      	ldr	r3, [r3, #16]
 801644a:	f003 0304 	and.w	r3, r3, #4
 801644e:	2b00      	cmp	r3, #0
 8016450:	d105      	bne.n	801645e <mg_timer_poll+0xaa>
      t->fn(t->arg);
 8016452:	69fb      	ldr	r3, [r7, #28]
 8016454:	695b      	ldr	r3, [r3, #20]
 8016456:	69fa      	ldr	r2, [r7, #28]
 8016458:	6992      	ldr	r2, [r2, #24]
 801645a:	4610      	mov	r0, r2
 801645c:	4798      	blx	r3
    }
    t->flags |= MG_TIMER_CALLED;
 801645e:	69fb      	ldr	r3, [r7, #28]
 8016460:	691b      	ldr	r3, [r3, #16]
 8016462:	f043 0204 	orr.w	r2, r3, #4
 8016466:	69fb      	ldr	r3, [r7, #28]
 8016468:	611a      	str	r2, [r3, #16]

    // If this timer is not repeating and marked AUTODELETE, remove it
    if (!(t->flags & MG_TIMER_REPEAT) && (t->flags & MG_TIMER_AUTODELETE)) {
 801646a:	69fb      	ldr	r3, [r7, #28]
 801646c:	691b      	ldr	r3, [r3, #16]
 801646e:	f003 0301 	and.w	r3, r3, #1
 8016472:	2b00      	cmp	r3, #0
 8016474:	d10e      	bne.n	8016494 <mg_timer_poll+0xe0>
 8016476:	69fb      	ldr	r3, [r7, #28]
 8016478:	691b      	ldr	r3, [r3, #16]
 801647a:	f003 0308 	and.w	r3, r3, #8
 801647e:	2b00      	cmp	r3, #0
 8016480:	d008      	beq.n	8016494 <mg_timer_poll+0xe0>
      mg_timer_free(head, t);
 8016482:	69f9      	ldr	r1, [r7, #28]
 8016484:	68f8      	ldr	r0, [r7, #12]
 8016486:	f7ff ff10 	bl	80162aa <mg_timer_free>
      mg_free(t);
 801648a:	69f8      	ldr	r0, [r7, #28]
 801648c:	f7f0 fcb6 	bl	8006dfc <mg_free>
 8016490:	e000      	b.n	8016494 <mg_timer_poll+0xe0>
    if (!once && !expired) continue;
 8016492:	bf00      	nop
  for (t = *head; t != NULL; t = tmp) {
 8016494:	697b      	ldr	r3, [r7, #20]
 8016496:	61fb      	str	r3, [r7, #28]
 8016498:	69fb      	ldr	r3, [r7, #28]
 801649a:	2b00      	cmp	r3, #0
 801649c:	d194      	bne.n	80163c8 <mg_timer_poll+0x14>
    }
  }
}
 801649e:	bf00      	nop
 80164a0:	bf00      	nop
 80164a2:	3724      	adds	r7, #36	@ 0x24
 80164a4:	46bd      	mov	sp, r7
 80164a6:	bd90      	pop	{r4, r7, pc}

080164a8 <mg_tls_hexdump>:
    0xe3, 0xb0, 0xc4, 0x42, 0x98, 0xfc, 0x1c, 0x14, 0x9a, 0xfb, 0xf4,
    0xc8, 0x99, 0x6f, 0xb9, 0x24, 0x27, 0xae, 0x41, 0xe4, 0x64, 0x9b,
    0x93, 0x4c, 0xa4, 0x95, 0x99, 0x1b, 0x78, 0x52, 0xb8, 0x55};

// helper to hexdump buffers inline
static void mg_tls_hexdump(const char *msg, uint8_t *buf, size_t bufsz) {
 80164a8:	b580      	push	{r7, lr}
 80164aa:	b086      	sub	sp, #24
 80164ac:	af02      	add	r7, sp, #8
 80164ae:	60f8      	str	r0, [r7, #12]
 80164b0:	60b9      	str	r1, [r7, #8]
 80164b2:	607a      	str	r2, [r7, #4]
  MG_VERBOSE(("%s: %M", msg, mg_print_hex, bufsz, buf));
 80164b4:	4b0b      	ldr	r3, [pc, #44]	@ (80164e4 <mg_tls_hexdump+0x3c>)
 80164b6:	681b      	ldr	r3, [r3, #0]
 80164b8:	2b03      	cmp	r3, #3
 80164ba:	dd0e      	ble.n	80164da <mg_tls_hexdump+0x32>
 80164bc:	4b0a      	ldr	r3, [pc, #40]	@ (80164e8 <mg_tls_hexdump+0x40>)
 80164be:	f642 32c3 	movw	r2, #11203	@ 0x2bc3
 80164c2:	490a      	ldr	r1, [pc, #40]	@ (80164ec <mg_tls_hexdump+0x44>)
 80164c4:	2004      	movs	r0, #4
 80164c6:	f7f6 fe71 	bl	800d1ac <mg_log_prefix>
 80164ca:	68bb      	ldr	r3, [r7, #8]
 80164cc:	9300      	str	r3, [sp, #0]
 80164ce:	687b      	ldr	r3, [r7, #4]
 80164d0:	4a07      	ldr	r2, [pc, #28]	@ (80164f0 <mg_tls_hexdump+0x48>)
 80164d2:	68f9      	ldr	r1, [r7, #12]
 80164d4:	4807      	ldr	r0, [pc, #28]	@ (80164f4 <mg_tls_hexdump+0x4c>)
 80164d6:	f7f6 feb9 	bl	800d24c <mg_log>
}
 80164da:	bf00      	nop
 80164dc:	3710      	adds	r7, #16
 80164de:	46bd      	mov	sp, r7
 80164e0:	bd80      	pop	{r7, pc}
 80164e2:	bf00      	nop
 80164e4:	20000258 	.word	0x20000258
 80164e8:	080289bc 	.word	0x080289bc
 80164ec:	08025140 	.word	0x08025140
 80164f0:	08012631 	.word	0x08012631
 80164f4:	08026bd4 	.word	0x08026bd4

080164f8 <mg_der_parse>:
  uint8_t type;
  uint32_t len;
  uint8_t *value;
};

static int mg_der_parse(uint8_t *der, size_t dersz, struct mg_der_tlv *tlv) {
 80164f8:	b480      	push	{r7}
 80164fa:	b089      	sub	sp, #36	@ 0x24
 80164fc:	af00      	add	r7, sp, #0
 80164fe:	60f8      	str	r0, [r7, #12]
 8016500:	60b9      	str	r1, [r7, #8]
 8016502:	607a      	str	r2, [r7, #4]
  size_t header_len = 2;
 8016504:	2302      	movs	r3, #2
 8016506:	61fb      	str	r3, [r7, #28]
  uint32_t len = dersz < 2 ? 0 : der[1];
 8016508:	68bb      	ldr	r3, [r7, #8]
 801650a:	2b01      	cmp	r3, #1
 801650c:	d903      	bls.n	8016516 <mg_der_parse+0x1e>
 801650e:	68fb      	ldr	r3, [r7, #12]
 8016510:	3301      	adds	r3, #1
 8016512:	781b      	ldrb	r3, [r3, #0]
 8016514:	e000      	b.n	8016518 <mg_der_parse+0x20>
 8016516:	2300      	movs	r3, #0
 8016518:	61bb      	str	r3, [r7, #24]
  if (dersz < 2) return -1;  // Invalid DER
 801651a:	68bb      	ldr	r3, [r7, #8]
 801651c:	2b01      	cmp	r3, #1
 801651e:	d802      	bhi.n	8016526 <mg_der_parse+0x2e>
 8016520:	f04f 33ff 	mov.w	r3, #4294967295
 8016524:	e042      	b.n	80165ac <mg_der_parse+0xb4>
  tlv->type = der[0];
 8016526:	68fb      	ldr	r3, [r7, #12]
 8016528:	781a      	ldrb	r2, [r3, #0]
 801652a:	687b      	ldr	r3, [r7, #4]
 801652c:	701a      	strb	r2, [r3, #0]
  if (len > 0x7F) {  // long-form length
 801652e:	69bb      	ldr	r3, [r7, #24]
 8016530:	2b7f      	cmp	r3, #127	@ 0x7f
 8016532:	d927      	bls.n	8016584 <mg_der_parse+0x8c>
    uint8_t len_bytes = len & 0x7F, i;
 8016534:	69bb      	ldr	r3, [r7, #24]
 8016536:	b2db      	uxtb	r3, r3
 8016538:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801653c:	75bb      	strb	r3, [r7, #22]
    if (dersz < (size_t) (2 + len_bytes)) return -1;
 801653e:	7dbb      	ldrb	r3, [r7, #22]
 8016540:	3302      	adds	r3, #2
 8016542:	461a      	mov	r2, r3
 8016544:	68bb      	ldr	r3, [r7, #8]
 8016546:	4293      	cmp	r3, r2
 8016548:	d202      	bcs.n	8016550 <mg_der_parse+0x58>
 801654a:	f04f 33ff 	mov.w	r3, #4294967295
 801654e:	e02d      	b.n	80165ac <mg_der_parse+0xb4>
    len = 0;
 8016550:	2300      	movs	r3, #0
 8016552:	61bb      	str	r3, [r7, #24]
    for (i = 0; i < len_bytes; i++) {
 8016554:	2300      	movs	r3, #0
 8016556:	75fb      	strb	r3, [r7, #23]
 8016558:	e00c      	b.n	8016574 <mg_der_parse+0x7c>
      len = (len << 8) | der[2 + i];
 801655a:	69bb      	ldr	r3, [r7, #24]
 801655c:	021b      	lsls	r3, r3, #8
 801655e:	7dfa      	ldrb	r2, [r7, #23]
 8016560:	3202      	adds	r2, #2
 8016562:	4611      	mov	r1, r2
 8016564:	68fa      	ldr	r2, [r7, #12]
 8016566:	440a      	add	r2, r1
 8016568:	7812      	ldrb	r2, [r2, #0]
 801656a:	4313      	orrs	r3, r2
 801656c:	61bb      	str	r3, [r7, #24]
    for (i = 0; i < len_bytes; i++) {
 801656e:	7dfb      	ldrb	r3, [r7, #23]
 8016570:	3301      	adds	r3, #1
 8016572:	75fb      	strb	r3, [r7, #23]
 8016574:	7dfa      	ldrb	r2, [r7, #23]
 8016576:	7dbb      	ldrb	r3, [r7, #22]
 8016578:	429a      	cmp	r2, r3
 801657a:	d3ee      	bcc.n	801655a <mg_der_parse+0x62>
    }
    header_len += len_bytes;
 801657c:	7dbb      	ldrb	r3, [r7, #22]
 801657e:	69fa      	ldr	r2, [r7, #28]
 8016580:	4413      	add	r3, r2
 8016582:	61fb      	str	r3, [r7, #28]
  }
  if (dersz < header_len + len) return -1;
 8016584:	69fa      	ldr	r2, [r7, #28]
 8016586:	69bb      	ldr	r3, [r7, #24]
 8016588:	4413      	add	r3, r2
 801658a:	68ba      	ldr	r2, [r7, #8]
 801658c:	429a      	cmp	r2, r3
 801658e:	d202      	bcs.n	8016596 <mg_der_parse+0x9e>
 8016590:	f04f 33ff 	mov.w	r3, #4294967295
 8016594:	e00a      	b.n	80165ac <mg_der_parse+0xb4>
  tlv->len = len;
 8016596:	687b      	ldr	r3, [r7, #4]
 8016598:	69ba      	ldr	r2, [r7, #24]
 801659a:	605a      	str	r2, [r3, #4]
  tlv->value = der + header_len;
 801659c:	68fa      	ldr	r2, [r7, #12]
 801659e:	69fb      	ldr	r3, [r7, #28]
 80165a0:	441a      	add	r2, r3
 80165a2:	687b      	ldr	r3, [r7, #4]
 80165a4:	609a      	str	r2, [r3, #8]
  return (int) (header_len + len);
 80165a6:	69fa      	ldr	r2, [r7, #28]
 80165a8:	69bb      	ldr	r3, [r7, #24]
 80165aa:	4413      	add	r3, r2
}
 80165ac:	4618      	mov	r0, r3
 80165ae:	3724      	adds	r7, #36	@ 0x24
 80165b0:	46bd      	mov	sp, r7
 80165b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80165b6:	4770      	bx	lr

080165b8 <mg_der_next>:

static int mg_der_next(struct mg_der_tlv *parent, struct mg_der_tlv *child) {
 80165b8:	b580      	push	{r7, lr}
 80165ba:	b084      	sub	sp, #16
 80165bc:	af00      	add	r7, sp, #0
 80165be:	6078      	str	r0, [r7, #4]
 80165c0:	6039      	str	r1, [r7, #0]
  int consumed;
  if (parent->len == 0) return 0;
 80165c2:	687b      	ldr	r3, [r7, #4]
 80165c4:	685b      	ldr	r3, [r3, #4]
 80165c6:	2b00      	cmp	r3, #0
 80165c8:	d101      	bne.n	80165ce <mg_der_next+0x16>
 80165ca:	2300      	movs	r3, #0
 80165cc:	e01b      	b.n	8016606 <mg_der_next+0x4e>
  consumed = mg_der_parse(parent->value, parent->len, child);
 80165ce:	687b      	ldr	r3, [r7, #4]
 80165d0:	6898      	ldr	r0, [r3, #8]
 80165d2:	687b      	ldr	r3, [r7, #4]
 80165d4:	685b      	ldr	r3, [r3, #4]
 80165d6:	683a      	ldr	r2, [r7, #0]
 80165d8:	4619      	mov	r1, r3
 80165da:	f7ff ff8d 	bl	80164f8 <mg_der_parse>
 80165de:	60f8      	str	r0, [r7, #12]
  if (consumed < 0) return -1;
 80165e0:	68fb      	ldr	r3, [r7, #12]
 80165e2:	2b00      	cmp	r3, #0
 80165e4:	da02      	bge.n	80165ec <mg_der_next+0x34>
 80165e6:	f04f 33ff 	mov.w	r3, #4294967295
 80165ea:	e00c      	b.n	8016606 <mg_der_next+0x4e>
  parent->value += consumed;
 80165ec:	687b      	ldr	r3, [r7, #4]
 80165ee:	689a      	ldr	r2, [r3, #8]
 80165f0:	68fb      	ldr	r3, [r7, #12]
 80165f2:	441a      	add	r2, r3
 80165f4:	687b      	ldr	r3, [r7, #4]
 80165f6:	609a      	str	r2, [r3, #8]
  parent->len -= (uint32_t) consumed;
 80165f8:	687b      	ldr	r3, [r7, #4]
 80165fa:	685a      	ldr	r2, [r3, #4]
 80165fc:	68fb      	ldr	r3, [r7, #12]
 80165fe:	1ad2      	subs	r2, r2, r3
 8016600:	687b      	ldr	r3, [r7, #4]
 8016602:	605a      	str	r2, [r3, #4]
  return 1;
 8016604:	2301      	movs	r3, #1
}
 8016606:	4618      	mov	r0, r3
 8016608:	3710      	adds	r7, #16
 801660a:	46bd      	mov	sp, r7
 801660c:	bd80      	pop	{r7, pc}

0801660e <mg_der_find_oid>:

static int mg_der_find_oid(struct mg_der_tlv *tlv, const uint8_t *oid,
                           size_t oid_len, struct mg_der_tlv *found) {
 801660e:	b580      	push	{r7, lr}
 8016610:	b08e      	sub	sp, #56	@ 0x38
 8016612:	af00      	add	r7, sp, #0
 8016614:	60f8      	str	r0, [r7, #12]
 8016616:	60b9      	str	r1, [r7, #8]
 8016618:	607a      	str	r2, [r7, #4]
 801661a:	603b      	str	r3, [r7, #0]
  struct mg_der_tlv parent, child;
  parent = *tlv;
 801661c:	68fa      	ldr	r2, [r7, #12]
 801661e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8016622:	ca07      	ldmia	r2, {r0, r1, r2}
 8016624:	e883 0007 	stmia.w	r3, {r0, r1, r2}
  while (mg_der_next(&parent, &child) > 0) {
 8016628:	e031      	b.n	801668e <mg_der_find_oid+0x80>
    if (child.type == 0x06 && child.len == oid_len &&
 801662a:	f897 3020 	ldrb.w	r3, [r7, #32]
 801662e:	2b06      	cmp	r3, #6
 8016630:	d114      	bne.n	801665c <mg_der_find_oid+0x4e>
 8016632:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016634:	687a      	ldr	r2, [r7, #4]
 8016636:	429a      	cmp	r2, r3
 8016638:	d110      	bne.n	801665c <mg_der_find_oid+0x4e>
        memcmp(child.value, oid, oid_len) == 0) {
 801663a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801663c:	687a      	ldr	r2, [r7, #4]
 801663e:	68b9      	ldr	r1, [r7, #8]
 8016640:	4618      	mov	r0, r3
 8016642:	f00d fef9 	bl	8024438 <memcmp>
 8016646:	4603      	mov	r3, r0
    if (child.type == 0x06 && child.len == oid_len &&
 8016648:	2b00      	cmp	r3, #0
 801664a:	d107      	bne.n	801665c <mg_der_find_oid+0x4e>
      return mg_der_next(&parent, found);
 801664c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8016650:	6839      	ldr	r1, [r7, #0]
 8016652:	4618      	mov	r0, r3
 8016654:	f7ff ffb0 	bl	80165b8 <mg_der_next>
 8016658:	4603      	mov	r3, r0
 801665a:	e024      	b.n	80166a6 <mg_der_find_oid+0x98>
    } else if (child.type & 0x20) {
 801665c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8016660:	f003 0320 	and.w	r3, r3, #32
 8016664:	2b00      	cmp	r3, #0
 8016666:	d012      	beq.n	801668e <mg_der_find_oid+0x80>
      struct mg_der_tlv sub_parent = child;
 8016668:	f107 0314 	add.w	r3, r7, #20
 801666c:	f107 0220 	add.w	r2, r7, #32
 8016670:	ca07      	ldmia	r2, {r0, r1, r2}
 8016672:	e883 0007 	stmia.w	r3, {r0, r1, r2}
      if (mg_der_find_oid(&sub_parent, oid, oid_len, found)) return 1;
 8016676:	f107 0014 	add.w	r0, r7, #20
 801667a:	683b      	ldr	r3, [r7, #0]
 801667c:	687a      	ldr	r2, [r7, #4]
 801667e:	68b9      	ldr	r1, [r7, #8]
 8016680:	f7ff ffc5 	bl	801660e <mg_der_find_oid>
 8016684:	4603      	mov	r3, r0
 8016686:	2b00      	cmp	r3, #0
 8016688:	d001      	beq.n	801668e <mg_der_find_oid+0x80>
 801668a:	2301      	movs	r3, #1
 801668c:	e00b      	b.n	80166a6 <mg_der_find_oid+0x98>
  while (mg_der_next(&parent, &child) > 0) {
 801668e:	f107 0220 	add.w	r2, r7, #32
 8016692:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8016696:	4611      	mov	r1, r2
 8016698:	4618      	mov	r0, r3
 801669a:	f7ff ff8d 	bl	80165b8 <mg_der_next>
 801669e:	4603      	mov	r3, r0
 80166a0:	2b00      	cmp	r3, #0
 80166a2:	dcc2      	bgt.n	801662a <mg_der_find_oid+0x1c>
    }
  }
  return 0;
 80166a4:	2300      	movs	r3, #0
}
 80166a6:	4618      	mov	r0, r3
 80166a8:	3738      	adds	r7, #56	@ 0x38
 80166aa:	46bd      	mov	sp, r7
 80166ac:	bd80      	pop	{r7, pc}

080166ae <mg_der_to_tlv>:
  }
}
#endif

// parse DER into a TLV record
static int mg_der_to_tlv(uint8_t *der, size_t dersz, struct mg_der_tlv *tlv) {
 80166ae:	b480      	push	{r7}
 80166b0:	b087      	sub	sp, #28
 80166b2:	af00      	add	r7, sp, #0
 80166b4:	60f8      	str	r0, [r7, #12]
 80166b6:	60b9      	str	r1, [r7, #8]
 80166b8:	607a      	str	r2, [r7, #4]
  if (dersz < 2) {
 80166ba:	68bb      	ldr	r3, [r7, #8]
 80166bc:	2b01      	cmp	r3, #1
 80166be:	d802      	bhi.n	80166c6 <mg_der_to_tlv+0x18>
    return -1;
 80166c0:	f04f 33ff 	mov.w	r3, #4294967295
 80166c4:	e041      	b.n	801674a <mg_der_to_tlv+0x9c>
  }
  tlv->type = der[0];
 80166c6:	68fb      	ldr	r3, [r7, #12]
 80166c8:	781a      	ldrb	r2, [r3, #0]
 80166ca:	687b      	ldr	r3, [r7, #4]
 80166cc:	701a      	strb	r2, [r3, #0]
  tlv->len = der[1];
 80166ce:	68fb      	ldr	r3, [r7, #12]
 80166d0:	3301      	adds	r3, #1
 80166d2:	781b      	ldrb	r3, [r3, #0]
 80166d4:	461a      	mov	r2, r3
 80166d6:	687b      	ldr	r3, [r7, #4]
 80166d8:	605a      	str	r2, [r3, #4]
  tlv->value = der + 2;
 80166da:	68fb      	ldr	r3, [r7, #12]
 80166dc:	1c9a      	adds	r2, r3, #2
 80166de:	687b      	ldr	r3, [r7, #4]
 80166e0:	609a      	str	r2, [r3, #8]
  if (tlv->len > 0x7f) {
 80166e2:	687b      	ldr	r3, [r7, #4]
 80166e4:	685b      	ldr	r3, [r3, #4]
 80166e6:	2b7f      	cmp	r3, #127	@ 0x7f
 80166e8:	d921      	bls.n	801672e <mg_der_to_tlv+0x80>
    uint32_t i, n = tlv->len - 0x80;
 80166ea:	687b      	ldr	r3, [r7, #4]
 80166ec:	685b      	ldr	r3, [r3, #4]
 80166ee:	3b80      	subs	r3, #128	@ 0x80
 80166f0:	613b      	str	r3, [r7, #16]
    tlv->len = 0;
 80166f2:	687b      	ldr	r3, [r7, #4]
 80166f4:	2200      	movs	r2, #0
 80166f6:	605a      	str	r2, [r3, #4]
    for (i = 0; i < n; i++) {
 80166f8:	2300      	movs	r3, #0
 80166fa:	617b      	str	r3, [r7, #20]
 80166fc:	e00d      	b.n	801671a <mg_der_to_tlv+0x6c>
      tlv->len = (tlv->len << 8) | (der[2 + i]);
 80166fe:	687b      	ldr	r3, [r7, #4]
 8016700:	685b      	ldr	r3, [r3, #4]
 8016702:	021b      	lsls	r3, r3, #8
 8016704:	697a      	ldr	r2, [r7, #20]
 8016706:	3202      	adds	r2, #2
 8016708:	68f9      	ldr	r1, [r7, #12]
 801670a:	440a      	add	r2, r1
 801670c:	7812      	ldrb	r2, [r2, #0]
 801670e:	431a      	orrs	r2, r3
 8016710:	687b      	ldr	r3, [r7, #4]
 8016712:	605a      	str	r2, [r3, #4]
    for (i = 0; i < n; i++) {
 8016714:	697b      	ldr	r3, [r7, #20]
 8016716:	3301      	adds	r3, #1
 8016718:	617b      	str	r3, [r7, #20]
 801671a:	697a      	ldr	r2, [r7, #20]
 801671c:	693b      	ldr	r3, [r7, #16]
 801671e:	429a      	cmp	r2, r3
 8016720:	d3ed      	bcc.n	80166fe <mg_der_to_tlv+0x50>
    }
    tlv->value = der + 2 + n;
 8016722:	693b      	ldr	r3, [r7, #16]
 8016724:	3302      	adds	r3, #2
 8016726:	68fa      	ldr	r2, [r7, #12]
 8016728:	441a      	add	r2, r3
 801672a:	687b      	ldr	r3, [r7, #4]
 801672c:	609a      	str	r2, [r3, #8]
  }
  if (der + dersz < tlv->value + tlv->len) {
 801672e:	68fa      	ldr	r2, [r7, #12]
 8016730:	68bb      	ldr	r3, [r7, #8]
 8016732:	441a      	add	r2, r3
 8016734:	687b      	ldr	r3, [r7, #4]
 8016736:	6899      	ldr	r1, [r3, #8]
 8016738:	687b      	ldr	r3, [r7, #4]
 801673a:	685b      	ldr	r3, [r3, #4]
 801673c:	440b      	add	r3, r1
 801673e:	429a      	cmp	r2, r3
 8016740:	d202      	bcs.n	8016748 <mg_der_to_tlv+0x9a>
    return -1;
 8016742:	f04f 33ff 	mov.w	r3, #4294967295
 8016746:	e000      	b.n	801674a <mg_der_to_tlv+0x9c>
  }
  return 0;
 8016748:	2300      	movs	r3, #0
}
 801674a:	4618      	mov	r0, r3
 801674c:	371c      	adds	r7, #28
 801674e:	46bd      	mov	sp, r7
 8016750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016754:	4770      	bx	lr

08016756 <mg_tls_got_record>:

// Did we receive a full TLS record in the c->rtls buffer?
static bool mg_tls_got_record(struct mg_connection *c) {
 8016756:	b480      	push	{r7}
 8016758:	b083      	sub	sp, #12
 801675a:	af00      	add	r7, sp, #0
 801675c:	6078      	str	r0, [r7, #4]
  return c->rtls.len >= (size_t) TLS_RECHDR_SIZE &&
 801675e:	687b      	ldr	r3, [r7, #4]
 8016760:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8016762:	2b04      	cmp	r3, #4
 8016764:	d915      	bls.n	8016792 <mg_tls_got_record+0x3c>
         c->rtls.len >=
 8016766:	687b      	ldr	r3, [r7, #4]
 8016768:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
             (size_t) (TLS_RECHDR_SIZE + MG_LOAD_BE16(c->rtls.buf + 3));
 801676a:	687a      	ldr	r2, [r7, #4]
 801676c:	6f12      	ldr	r2, [r2, #112]	@ 0x70
 801676e:	3203      	adds	r2, #3
 8016770:	7812      	ldrb	r2, [r2, #0]
 8016772:	b212      	sxth	r2, r2
 8016774:	0212      	lsls	r2, r2, #8
 8016776:	b211      	sxth	r1, r2
 8016778:	687a      	ldr	r2, [r7, #4]
 801677a:	6f12      	ldr	r2, [r2, #112]	@ 0x70
 801677c:	3204      	adds	r2, #4
 801677e:	7812      	ldrb	r2, [r2, #0]
 8016780:	b212      	sxth	r2, r2
 8016782:	430a      	orrs	r2, r1
 8016784:	b212      	sxth	r2, r2
 8016786:	b292      	uxth	r2, r2
 8016788:	3205      	adds	r2, #5
  return c->rtls.len >= (size_t) TLS_RECHDR_SIZE &&
 801678a:	4293      	cmp	r3, r2
 801678c:	d301      	bcc.n	8016792 <mg_tls_got_record+0x3c>
 801678e:	2301      	movs	r3, #1
 8016790:	e000      	b.n	8016794 <mg_tls_got_record+0x3e>
 8016792:	2300      	movs	r3, #0
 8016794:	f003 0301 	and.w	r3, r3, #1
 8016798:	b2db      	uxtb	r3, r3
}
 801679a:	4618      	mov	r0, r3
 801679c:	370c      	adds	r7, #12
 801679e:	46bd      	mov	sp, r7
 80167a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80167a4:	4770      	bx	lr

080167a6 <mg_tls_drop_record>:

// Remove a single TLS record from the recv buffer
static void mg_tls_drop_record(struct mg_connection *c) {
 80167a6:	b580      	push	{r7, lr}
 80167a8:	b084      	sub	sp, #16
 80167aa:	af00      	add	r7, sp, #0
 80167ac:	6078      	str	r0, [r7, #4]
  struct mg_iobuf *rio = &c->rtls;
 80167ae:	687b      	ldr	r3, [r7, #4]
 80167b0:	3370      	adds	r3, #112	@ 0x70
 80167b2:	60fb      	str	r3, [r7, #12]
  uint16_t n = MG_LOAD_BE16(rio->buf + 3) + TLS_RECHDR_SIZE;
 80167b4:	68fb      	ldr	r3, [r7, #12]
 80167b6:	681b      	ldr	r3, [r3, #0]
 80167b8:	3303      	adds	r3, #3
 80167ba:	781b      	ldrb	r3, [r3, #0]
 80167bc:	b21b      	sxth	r3, r3
 80167be:	021b      	lsls	r3, r3, #8
 80167c0:	b21a      	sxth	r2, r3
 80167c2:	68fb      	ldr	r3, [r7, #12]
 80167c4:	681b      	ldr	r3, [r3, #0]
 80167c6:	3304      	adds	r3, #4
 80167c8:	781b      	ldrb	r3, [r3, #0]
 80167ca:	b21b      	sxth	r3, r3
 80167cc:	4313      	orrs	r3, r2
 80167ce:	b21b      	sxth	r3, r3
 80167d0:	b29b      	uxth	r3, r3
 80167d2:	3305      	adds	r3, #5
 80167d4:	817b      	strh	r3, [r7, #10]
  mg_iobuf_del(rio, 0, n);
 80167d6:	897b      	ldrh	r3, [r7, #10]
 80167d8:	461a      	mov	r2, r3
 80167da:	2100      	movs	r1, #0
 80167dc:	68f8      	ldr	r0, [r7, #12]
 80167de:	f7f5 fe17 	bl	800c410 <mg_iobuf_del>
}
 80167e2:	bf00      	nop
 80167e4:	3710      	adds	r7, #16
 80167e6:	46bd      	mov	sp, r7
 80167e8:	bd80      	pop	{r7, pc}
	...

080167ec <mg_tls_drop_message>:

// Remove a single TLS message from decrypted buffer, remove the wrapping
// record if it was the last message within a record
static void mg_tls_drop_message(struct mg_connection *c) {
 80167ec:	b580      	push	{r7, lr}
 80167ee:	b086      	sub	sp, #24
 80167f0:	af00      	add	r7, sp, #0
 80167f2:	6078      	str	r0, [r7, #4]
  uint32_t len;
  struct tls_data *tls = (struct tls_data *) c->tls;
 80167f4:	687b      	ldr	r3, [r7, #4]
 80167f6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80167fa:	617b      	str	r3, [r7, #20]
  unsigned char *recv_buf = &c->rtls.buf[tls->recv_offset];
 80167fc:	687b      	ldr	r3, [r7, #4]
 80167fe:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8016800:	697b      	ldr	r3, [r7, #20]
 8016802:	695b      	ldr	r3, [r3, #20]
 8016804:	4413      	add	r3, r2
 8016806:	613b      	str	r3, [r7, #16]
  if (tls->recv_len == 0) return;
 8016808:	697b      	ldr	r3, [r7, #20]
 801680a:	699b      	ldr	r3, [r3, #24]
 801680c:	2b00      	cmp	r3, #0
 801680e:	d033      	beq.n	8016878 <mg_tls_drop_message+0x8c>
  len = MG_LOAD_BE24(recv_buf + 1) + TLS_MSGHDR_SIZE;
 8016810:	693b      	ldr	r3, [r7, #16]
 8016812:	3301      	adds	r3, #1
 8016814:	781b      	ldrb	r3, [r3, #0]
 8016816:	041a      	lsls	r2, r3, #16
 8016818:	693b      	ldr	r3, [r7, #16]
 801681a:	3302      	adds	r3, #2
 801681c:	781b      	ldrb	r3, [r3, #0]
 801681e:	021b      	lsls	r3, r3, #8
 8016820:	4313      	orrs	r3, r2
 8016822:	693a      	ldr	r2, [r7, #16]
 8016824:	3203      	adds	r2, #3
 8016826:	7812      	ldrb	r2, [r2, #0]
 8016828:	4313      	orrs	r3, r2
 801682a:	3304      	adds	r3, #4
 801682c:	60fb      	str	r3, [r7, #12]
  if (tls->recv_len < len) {
 801682e:	697b      	ldr	r3, [r7, #20]
 8016830:	699b      	ldr	r3, [r3, #24]
 8016832:	68fa      	ldr	r2, [r7, #12]
 8016834:	429a      	cmp	r2, r3
 8016836:	d904      	bls.n	8016842 <mg_tls_drop_message+0x56>
    mg_error(c, "wrong size");
 8016838:	4911      	ldr	r1, [pc, #68]	@ (8016880 <mg_tls_drop_message+0x94>)
 801683a:	6878      	ldr	r0, [r7, #4]
 801683c:	f7f1 fb1a 	bl	8007e74 <mg_error>
    return;
 8016840:	e01b      	b.n	801687a <mg_tls_drop_message+0x8e>
  }
  mg_sha256_update(&tls->sha256, recv_buf, len);
 8016842:	697b      	ldr	r3, [r7, #20]
 8016844:	3320      	adds	r3, #32
 8016846:	68fa      	ldr	r2, [r7, #12]
 8016848:	6939      	ldr	r1, [r7, #16]
 801684a:	4618      	mov	r0, r3
 801684c:	f7fd fe2a 	bl	80144a4 <mg_sha256_update>
  tls->recv_offset += len;
 8016850:	697b      	ldr	r3, [r7, #20]
 8016852:	695a      	ldr	r2, [r3, #20]
 8016854:	68fb      	ldr	r3, [r7, #12]
 8016856:	441a      	add	r2, r3
 8016858:	697b      	ldr	r3, [r7, #20]
 801685a:	615a      	str	r2, [r3, #20]
  tls->recv_len -= len;
 801685c:	697b      	ldr	r3, [r7, #20]
 801685e:	699a      	ldr	r2, [r3, #24]
 8016860:	68fb      	ldr	r3, [r7, #12]
 8016862:	1ad2      	subs	r2, r2, r3
 8016864:	697b      	ldr	r3, [r7, #20]
 8016866:	619a      	str	r2, [r3, #24]
  if (tls->recv_len == 0) {
 8016868:	697b      	ldr	r3, [r7, #20]
 801686a:	699b      	ldr	r3, [r3, #24]
 801686c:	2b00      	cmp	r3, #0
 801686e:	d104      	bne.n	801687a <mg_tls_drop_message+0x8e>
    mg_tls_drop_record(c);
 8016870:	6878      	ldr	r0, [r7, #4]
 8016872:	f7ff ff98 	bl	80167a6 <mg_tls_drop_record>
 8016876:	e000      	b.n	801687a <mg_tls_drop_message+0x8e>
  if (tls->recv_len == 0) return;
 8016878:	bf00      	nop
  }
}
 801687a:	3718      	adds	r7, #24
 801687c:	46bd      	mov	sp, r7
 801687e:	bd80      	pop	{r7, pc}
 8016880:	08026bdc 	.word	0x08026bdc

08016884 <mg_tls_derive_secret>:

// TLS1.3 secret derivation based on the key label
static void mg_tls_derive_secret(const char *label, uint8_t *key, size_t keysz,
                                 uint8_t *data, size_t datasz, uint8_t *hash,
                                 size_t hashsz) {
 8016884:	b590      	push	{r4, r7, lr}
 8016886:	b0d1      	sub	sp, #324	@ 0x144
 8016888:	af02      	add	r7, sp, #8
 801688a:	f507 749c 	add.w	r4, r7, #312	@ 0x138
 801688e:	f5a4 7496 	sub.w	r4, r4, #300	@ 0x12c
 8016892:	6020      	str	r0, [r4, #0]
 8016894:	f507 709c 	add.w	r0, r7, #312	@ 0x138
 8016898:	f5a0 7098 	sub.w	r0, r0, #304	@ 0x130
 801689c:	6001      	str	r1, [r0, #0]
 801689e:	f507 719c 	add.w	r1, r7, #312	@ 0x138
 80168a2:	f5a1 719a 	sub.w	r1, r1, #308	@ 0x134
 80168a6:	600a      	str	r2, [r1, #0]
 80168a8:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 80168ac:	f5a2 729c 	sub.w	r2, r2, #312	@ 0x138
 80168b0:	6013      	str	r3, [r2, #0]
  size_t labelsz = strlen(label);
 80168b2:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80168b6:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80168ba:	6818      	ldr	r0, [r3, #0]
 80168bc:	f7e9 fd20 	bl	8000300 <strlen>
 80168c0:	f8c7 0134 	str.w	r0, [r7, #308]	@ 0x134
  uint8_t secret[32];
  uint8_t packed[256] = {0, (uint8_t) hashsz, (uint8_t) labelsz};
 80168c4:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80168c8:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 80168cc:	4618      	mov	r0, r3
 80168ce:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80168d2:	461a      	mov	r2, r3
 80168d4:	2100      	movs	r1, #0
 80168d6:	f00d fdd9 	bl	802448c <memset>
 80168da:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 80168de:	b2da      	uxtb	r2, r3
 80168e0:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80168e4:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 80168e8:	705a      	strb	r2, [r3, #1]
 80168ea:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80168ee:	b2da      	uxtb	r2, r3
 80168f0:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80168f4:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 80168f8:	709a      	strb	r2, [r3, #2]
  // TODO: assert lengths of label, key, data and hash
  if (labelsz > 0) memmove(packed + 3, label, labelsz);
 80168fa:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80168fe:	2b00      	cmp	r3, #0
 8016900:	d00c      	beq.n	801691c <mg_tls_derive_secret+0x98>
 8016902:	f107 0314 	add.w	r3, r7, #20
 8016906:	3303      	adds	r3, #3
 8016908:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 801690c:	f5a2 7196 	sub.w	r1, r2, #300	@ 0x12c
 8016910:	f8d7 2134 	ldr.w	r2, [r7, #308]	@ 0x134
 8016914:	6809      	ldr	r1, [r1, #0]
 8016916:	4618      	mov	r0, r3
 8016918:	f00d fd9e 	bl	8024458 <memmove>
  packed[3 + labelsz] = (uint8_t) datasz;
 801691c:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8016920:	3303      	adds	r3, #3
 8016922:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 8016926:	b2d1      	uxtb	r1, r2
 8016928:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 801692c:	f5a2 7292 	sub.w	r2, r2, #292	@ 0x124
 8016930:	54d1      	strb	r1, [r2, r3]
  if (datasz > 0) memmove(packed + labelsz + 4, data, datasz);
 8016932:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 8016936:	2b00      	cmp	r3, #0
 8016938:	d00e      	beq.n	8016958 <mg_tls_derive_secret+0xd4>
 801693a:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 801693e:	3304      	adds	r3, #4
 8016940:	f107 0214 	add.w	r2, r7, #20
 8016944:	18d0      	adds	r0, r2, r3
 8016946:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 801694a:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 801694e:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 8016952:	6819      	ldr	r1, [r3, #0]
 8016954:	f00d fd80 	bl	8024458 <memmove>
  packed[4 + labelsz + datasz] = 1;
 8016958:	f8d7 2134 	ldr.w	r2, [r7, #308]	@ 0x134
 801695c:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 8016960:	4413      	add	r3, r2
 8016962:	3304      	adds	r3, #4
 8016964:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 8016968:	f5a2 7292 	sub.w	r2, r2, #292	@ 0x124
 801696c:	2101      	movs	r1, #1
 801696e:	54d1      	strb	r1, [r2, r3]

  mg_hmac_sha256(secret, key, keysz, packed, 5 + labelsz + datasz);
 8016970:	f8d7 2134 	ldr.w	r2, [r7, #308]	@ 0x134
 8016974:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 8016978:	4413      	add	r3, r2
 801697a:	3305      	adds	r3, #5
 801697c:	f107 0414 	add.w	r4, r7, #20
 8016980:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 8016984:	f5a2 729a 	sub.w	r2, r2, #308	@ 0x134
 8016988:	f507 719c 	add.w	r1, r7, #312	@ 0x138
 801698c:	f5a1 7198 	sub.w	r1, r1, #304	@ 0x130
 8016990:	f507 708a 	add.w	r0, r7, #276	@ 0x114
 8016994:	9300      	str	r3, [sp, #0]
 8016996:	4623      	mov	r3, r4
 8016998:	6812      	ldr	r2, [r2, #0]
 801699a:	6809      	ldr	r1, [r1, #0]
 801699c:	f7fd ff0f 	bl	80147be <mg_hmac_sha256>
  memmove(hash, secret, hashsz);
 80169a0:	f507 738a 	add.w	r3, r7, #276	@ 0x114
 80169a4:	f8d7 2150 	ldr.w	r2, [r7, #336]	@ 0x150
 80169a8:	4619      	mov	r1, r3
 80169aa:	f8d7 014c 	ldr.w	r0, [r7, #332]	@ 0x14c
 80169ae:	f00d fd53 	bl	8024458 <memmove>
}
 80169b2:	bf00      	nop
 80169b4:	f507 779e 	add.w	r7, r7, #316	@ 0x13c
 80169b8:	46bd      	mov	sp, r7
 80169ba:	bd90      	pop	{r4, r7, pc}

080169bc <mg_tls_generate_handshake_keys>:

// at this point we have x25519 shared secret, we can generate a set of derived
// handshake encryption keys
static void mg_tls_generate_handshake_keys(struct mg_connection *c) {
 80169bc:	b580      	push	{r7, lr}
 80169be:	b0cc      	sub	sp, #304	@ 0x130
 80169c0:	af04      	add	r7, sp, #16
 80169c2:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80169c6:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80169ca:	6018      	str	r0, [r3, #0]
  struct tls_data *tls = (struct tls_data *) c->tls;
 80169cc:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80169d0:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80169d4:	681b      	ldr	r3, [r3, #0]
 80169d6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80169da:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  uint8_t pre_extract_secret[32];
  uint8_t hello_hash[32];
  uint8_t server_hs_secret[32];
  uint8_t client_hs_secret[32];
#if MG_ENABLE_CHACHA20
  const size_t keysz = 32;
 80169de:	2320      	movs	r3, #32
 80169e0:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
#else
  const size_t keysz = 16;
#endif

  mg_hmac_sha256(early_secret, NULL, 0, zeros, sizeof(zeros));
 80169e4:	f107 0088 	add.w	r0, r7, #136	@ 0x88
 80169e8:	2320      	movs	r3, #32
 80169ea:	9300      	str	r3, [sp, #0]
 80169ec:	4b89      	ldr	r3, [pc, #548]	@ (8016c14 <mg_tls_generate_handshake_keys+0x258>)
 80169ee:	2200      	movs	r2, #0
 80169f0:	2100      	movs	r1, #0
 80169f2:	f7fd fee4 	bl	80147be <mg_hmac_sha256>
  mg_tls_derive_secret("tls13 derived", early_secret, 32, zeros_sha256_digest,
 80169f6:	f107 0188 	add.w	r1, r7, #136	@ 0x88
 80169fa:	2320      	movs	r3, #32
 80169fc:	9302      	str	r3, [sp, #8]
 80169fe:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8016a02:	9301      	str	r3, [sp, #4]
 8016a04:	2320      	movs	r3, #32
 8016a06:	9300      	str	r3, [sp, #0]
 8016a08:	4b83      	ldr	r3, [pc, #524]	@ (8016c18 <mg_tls_generate_handshake_keys+0x25c>)
 8016a0a:	2220      	movs	r2, #32
 8016a0c:	4883      	ldr	r0, [pc, #524]	@ (8016c1c <mg_tls_generate_handshake_keys+0x260>)
 8016a0e:	f7ff ff39 	bl	8016884 <mg_tls_derive_secret>
                       32, pre_extract_secret, 32);
  mg_hmac_sha256(tls->enc.handshake_secret, pre_extract_secret,
 8016a12:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8016a16:	f503 6090 	add.w	r0, r3, #1152	@ 0x480
                 sizeof(pre_extract_secret), tls->x25519_sec,
 8016a1a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8016a1e:	33f0      	adds	r3, #240	@ 0xf0
  mg_hmac_sha256(tls->enc.handshake_secret, pre_extract_secret,
 8016a20:	f107 0168 	add.w	r1, r7, #104	@ 0x68
 8016a24:	2220      	movs	r2, #32
 8016a26:	9200      	str	r2, [sp, #0]
 8016a28:	2220      	movs	r2, #32
 8016a2a:	f7fd fec8 	bl	80147be <mg_hmac_sha256>
                 sizeof(tls->x25519_sec));
  mg_tls_hexdump("hs secret", tls->enc.handshake_secret, 32);
 8016a2e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8016a32:	f503 6390 	add.w	r3, r3, #1152	@ 0x480
 8016a36:	2220      	movs	r2, #32
 8016a38:	4619      	mov	r1, r3
 8016a3a:	4879      	ldr	r0, [pc, #484]	@ (8016c20 <mg_tls_generate_handshake_keys+0x264>)
 8016a3c:	f7ff fd34 	bl	80164a8 <mg_tls_hexdump>

  // mg_sha256_final is not idempotent, need to copy sha256 context to calculate
  // the digest
  memmove(&sha256, &tls->sha256, sizeof(mg_sha256_ctx));
 8016a40:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8016a44:	f103 0120 	add.w	r1, r3, #32
 8016a48:	f107 03a8 	add.w	r3, r7, #168	@ 0xa8
 8016a4c:	2270      	movs	r2, #112	@ 0x70
 8016a4e:	4618      	mov	r0, r3
 8016a50:	f00d fd02 	bl	8024458 <memmove>
  mg_sha256_final(hello_hash, &sha256);
 8016a54:	f107 02a8 	add.w	r2, r7, #168	@ 0xa8
 8016a58:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8016a5c:	4611      	mov	r1, r2
 8016a5e:	4618      	mov	r0, r3
 8016a60:	f7fd fd59 	bl	8014516 <mg_sha256_final>

  mg_tls_hexdump("hello hash", hello_hash, 32);
 8016a64:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8016a68:	2220      	movs	r2, #32
 8016a6a:	4619      	mov	r1, r3
 8016a6c:	486d      	ldr	r0, [pc, #436]	@ (8016c24 <mg_tls_generate_handshake_keys+0x268>)
 8016a6e:	f7ff fd1b 	bl	80164a8 <mg_tls_hexdump>
  // derive keys needed for the rest of the handshake
  mg_tls_derive_secret("tls13 s hs traffic", tls->enc.handshake_secret, 32,
 8016a72:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8016a76:	f503 6190 	add.w	r1, r3, #1152	@ 0x480
 8016a7a:	f107 0248 	add.w	r2, r7, #72	@ 0x48
 8016a7e:	2320      	movs	r3, #32
 8016a80:	9302      	str	r3, [sp, #8]
 8016a82:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8016a86:	9301      	str	r3, [sp, #4]
 8016a88:	2320      	movs	r3, #32
 8016a8a:	9300      	str	r3, [sp, #0]
 8016a8c:	4613      	mov	r3, r2
 8016a8e:	2220      	movs	r2, #32
 8016a90:	4865      	ldr	r0, [pc, #404]	@ (8016c28 <mg_tls_generate_handshake_keys+0x26c>)
 8016a92:	f7ff fef7 	bl	8016884 <mg_tls_derive_secret>
                       hello_hash, 32, server_hs_secret, 32);
  mg_tls_derive_secret("tls13 c hs traffic", tls->enc.handshake_secret, 32,
 8016a96:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8016a9a:	f503 6190 	add.w	r1, r3, #1152	@ 0x480
 8016a9e:	f107 0248 	add.w	r2, r7, #72	@ 0x48
 8016aa2:	2320      	movs	r3, #32
 8016aa4:	9302      	str	r3, [sp, #8]
 8016aa6:	f107 0308 	add.w	r3, r7, #8
 8016aaa:	9301      	str	r3, [sp, #4]
 8016aac:	2320      	movs	r3, #32
 8016aae:	9300      	str	r3, [sp, #0]
 8016ab0:	4613      	mov	r3, r2
 8016ab2:	2220      	movs	r2, #32
 8016ab4:	485d      	ldr	r0, [pc, #372]	@ (8016c2c <mg_tls_generate_handshake_keys+0x270>)
 8016ab6:	f7ff fee5 	bl	8016884 <mg_tls_derive_secret>
                       hello_hash, 32, client_hs_secret, 32);

  mg_tls_derive_secret("tls13 key", server_hs_secret, 32, NULL, 0,
                       tls->enc.server_write_key, keysz);
 8016aba:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8016abe:	f503 6394 	add.w	r3, r3, #1184	@ 0x4a0
  mg_tls_derive_secret("tls13 key", server_hs_secret, 32, NULL, 0,
 8016ac2:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 8016ac6:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 8016aca:	9202      	str	r2, [sp, #8]
 8016acc:	9301      	str	r3, [sp, #4]
 8016ace:	2300      	movs	r3, #0
 8016ad0:	9300      	str	r3, [sp, #0]
 8016ad2:	2300      	movs	r3, #0
 8016ad4:	2220      	movs	r2, #32
 8016ad6:	4856      	ldr	r0, [pc, #344]	@ (8016c30 <mg_tls_generate_handshake_keys+0x274>)
 8016ad8:	f7ff fed4 	bl	8016884 <mg_tls_derive_secret>
  mg_tls_derive_secret("tls13 iv", server_hs_secret, 32, NULL, 0,
                       tls->enc.server_write_iv, 12);
 8016adc:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8016ae0:	f503 6398 	add.w	r3, r3, #1216	@ 0x4c0
  mg_tls_derive_secret("tls13 iv", server_hs_secret, 32, NULL, 0,
 8016ae4:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 8016ae8:	220c      	movs	r2, #12
 8016aea:	9202      	str	r2, [sp, #8]
 8016aec:	9301      	str	r3, [sp, #4]
 8016aee:	2300      	movs	r3, #0
 8016af0:	9300      	str	r3, [sp, #0]
 8016af2:	2300      	movs	r3, #0
 8016af4:	2220      	movs	r2, #32
 8016af6:	484f      	ldr	r0, [pc, #316]	@ (8016c34 <mg_tls_generate_handshake_keys+0x278>)
 8016af8:	f7ff fec4 	bl	8016884 <mg_tls_derive_secret>
  mg_tls_derive_secret("tls13 finished", server_hs_secret, 32, NULL, 0,
                       tls->enc.server_finished_key, 32);
 8016afc:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8016b00:	f203 43cc 	addw	r3, r3, #1228	@ 0x4cc
  mg_tls_derive_secret("tls13 finished", server_hs_secret, 32, NULL, 0,
 8016b04:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 8016b08:	2220      	movs	r2, #32
 8016b0a:	9202      	str	r2, [sp, #8]
 8016b0c:	9301      	str	r3, [sp, #4]
 8016b0e:	2300      	movs	r3, #0
 8016b10:	9300      	str	r3, [sp, #0]
 8016b12:	2300      	movs	r3, #0
 8016b14:	2220      	movs	r2, #32
 8016b16:	4848      	ldr	r0, [pc, #288]	@ (8016c38 <mg_tls_generate_handshake_keys+0x27c>)
 8016b18:	f7ff feb4 	bl	8016884 <mg_tls_derive_secret>

  mg_tls_derive_secret("tls13 key", client_hs_secret, 32, NULL, 0,
                       tls->enc.client_write_key, keysz);
 8016b1c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8016b20:	f203 43ec 	addw	r3, r3, #1260	@ 0x4ec
  mg_tls_derive_secret("tls13 key", client_hs_secret, 32, NULL, 0,
 8016b24:	f107 0108 	add.w	r1, r7, #8
 8016b28:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 8016b2c:	9202      	str	r2, [sp, #8]
 8016b2e:	9301      	str	r3, [sp, #4]
 8016b30:	2300      	movs	r3, #0
 8016b32:	9300      	str	r3, [sp, #0]
 8016b34:	2300      	movs	r3, #0
 8016b36:	2220      	movs	r2, #32
 8016b38:	483d      	ldr	r0, [pc, #244]	@ (8016c30 <mg_tls_generate_handshake_keys+0x274>)
 8016b3a:	f7ff fea3 	bl	8016884 <mg_tls_derive_secret>
  mg_tls_derive_secret("tls13 iv", client_hs_secret, 32, NULL, 0,
                       tls->enc.client_write_iv, 12);
 8016b3e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8016b42:	f203 530c 	addw	r3, r3, #1292	@ 0x50c
  mg_tls_derive_secret("tls13 iv", client_hs_secret, 32, NULL, 0,
 8016b46:	f107 0108 	add.w	r1, r7, #8
 8016b4a:	220c      	movs	r2, #12
 8016b4c:	9202      	str	r2, [sp, #8]
 8016b4e:	9301      	str	r3, [sp, #4]
 8016b50:	2300      	movs	r3, #0
 8016b52:	9300      	str	r3, [sp, #0]
 8016b54:	2300      	movs	r3, #0
 8016b56:	2220      	movs	r2, #32
 8016b58:	4836      	ldr	r0, [pc, #216]	@ (8016c34 <mg_tls_generate_handshake_keys+0x278>)
 8016b5a:	f7ff fe93 	bl	8016884 <mg_tls_derive_secret>
  mg_tls_derive_secret("tls13 finished", client_hs_secret, 32, NULL, 0,
                       tls->enc.client_finished_key, 32);
 8016b5e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8016b62:	f503 63a3 	add.w	r3, r3, #1304	@ 0x518
  mg_tls_derive_secret("tls13 finished", client_hs_secret, 32, NULL, 0,
 8016b66:	f107 0108 	add.w	r1, r7, #8
 8016b6a:	2220      	movs	r2, #32
 8016b6c:	9202      	str	r2, [sp, #8]
 8016b6e:	9301      	str	r3, [sp, #4]
 8016b70:	2300      	movs	r3, #0
 8016b72:	9300      	str	r3, [sp, #0]
 8016b74:	2300      	movs	r3, #0
 8016b76:	2220      	movs	r2, #32
 8016b78:	482f      	ldr	r0, [pc, #188]	@ (8016c38 <mg_tls_generate_handshake_keys+0x27c>)
 8016b7a:	f7ff fe83 	bl	8016884 <mg_tls_derive_secret>

  mg_tls_hexdump("s hs traffic", server_hs_secret, 32);
 8016b7e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8016b82:	2220      	movs	r2, #32
 8016b84:	4619      	mov	r1, r3
 8016b86:	482d      	ldr	r0, [pc, #180]	@ (8016c3c <mg_tls_generate_handshake_keys+0x280>)
 8016b88:	f7ff fc8e 	bl	80164a8 <mg_tls_hexdump>
  mg_tls_hexdump("s key", tls->enc.server_write_key, keysz);
 8016b8c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8016b90:	f503 6394 	add.w	r3, r3, #1184	@ 0x4a0
 8016b94:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 8016b98:	4619      	mov	r1, r3
 8016b9a:	4829      	ldr	r0, [pc, #164]	@ (8016c40 <mg_tls_generate_handshake_keys+0x284>)
 8016b9c:	f7ff fc84 	bl	80164a8 <mg_tls_hexdump>
  mg_tls_hexdump("s iv", tls->enc.server_write_iv, 12);
 8016ba0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8016ba4:	f503 6398 	add.w	r3, r3, #1216	@ 0x4c0
 8016ba8:	220c      	movs	r2, #12
 8016baa:	4619      	mov	r1, r3
 8016bac:	4825      	ldr	r0, [pc, #148]	@ (8016c44 <mg_tls_generate_handshake_keys+0x288>)
 8016bae:	f7ff fc7b 	bl	80164a8 <mg_tls_hexdump>
  mg_tls_hexdump("s finished", tls->enc.server_finished_key, 32);
 8016bb2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8016bb6:	f203 43cc 	addw	r3, r3, #1228	@ 0x4cc
 8016bba:	2220      	movs	r2, #32
 8016bbc:	4619      	mov	r1, r3
 8016bbe:	4822      	ldr	r0, [pc, #136]	@ (8016c48 <mg_tls_generate_handshake_keys+0x28c>)
 8016bc0:	f7ff fc72 	bl	80164a8 <mg_tls_hexdump>
  mg_tls_hexdump("c hs traffic", client_hs_secret, 32);
 8016bc4:	f107 0308 	add.w	r3, r7, #8
 8016bc8:	2220      	movs	r2, #32
 8016bca:	4619      	mov	r1, r3
 8016bcc:	481f      	ldr	r0, [pc, #124]	@ (8016c4c <mg_tls_generate_handshake_keys+0x290>)
 8016bce:	f7ff fc6b 	bl	80164a8 <mg_tls_hexdump>
  mg_tls_hexdump("c key", tls->enc.client_write_key, keysz);
 8016bd2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8016bd6:	f203 43ec 	addw	r3, r3, #1260	@ 0x4ec
 8016bda:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 8016bde:	4619      	mov	r1, r3
 8016be0:	481b      	ldr	r0, [pc, #108]	@ (8016c50 <mg_tls_generate_handshake_keys+0x294>)
 8016be2:	f7ff fc61 	bl	80164a8 <mg_tls_hexdump>
  mg_tls_hexdump("c iv", tls->enc.client_write_iv, 12);
 8016be6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8016bea:	f203 530c 	addw	r3, r3, #1292	@ 0x50c
 8016bee:	220c      	movs	r2, #12
 8016bf0:	4619      	mov	r1, r3
 8016bf2:	4818      	ldr	r0, [pc, #96]	@ (8016c54 <mg_tls_generate_handshake_keys+0x298>)
 8016bf4:	f7ff fc58 	bl	80164a8 <mg_tls_hexdump>
  mg_tls_hexdump("c finished", tls->enc.client_finished_key, 32);
 8016bf8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8016bfc:	f503 63a3 	add.w	r3, r3, #1304	@ 0x518
 8016c00:	2220      	movs	r2, #32
 8016c02:	4619      	mov	r1, r3
 8016c04:	4814      	ldr	r0, [pc, #80]	@ (8016c58 <mg_tls_generate_handshake_keys+0x29c>)
 8016c06:	f7ff fc4f 	bl	80164a8 <mg_tls_hexdump>
  mg_ssl_key_log("SERVER_HANDSHAKE_TRAFFIC_SECRET", tls->random,
                 server_hs_secret, 32);
  mg_ssl_key_log("CLIENT_HANDSHAKE_TRAFFIC_SECRET", tls->random,
                 client_hs_secret, 32);
#endif
}
 8016c0a:	bf00      	nop
 8016c0c:	f507 7790 	add.w	r7, r7, #288	@ 0x120
 8016c10:	46bd      	mov	sp, r7
 8016c12:	bd80      	pop	{r7, pc}
 8016c14:	20011a98 	.word	0x20011a98
 8016c18:	20000268 	.word	0x20000268
 8016c1c:	08026be8 	.word	0x08026be8
 8016c20:	08026bf8 	.word	0x08026bf8
 8016c24:	08026c04 	.word	0x08026c04
 8016c28:	08026c10 	.word	0x08026c10
 8016c2c:	08026c24 	.word	0x08026c24
 8016c30:	08026c38 	.word	0x08026c38
 8016c34:	08026c44 	.word	0x08026c44
 8016c38:	08026c50 	.word	0x08026c50
 8016c3c:	08026c60 	.word	0x08026c60
 8016c40:	08026c70 	.word	0x08026c70
 8016c44:	08026c78 	.word	0x08026c78
 8016c48:	08026c80 	.word	0x08026c80
 8016c4c:	08026c8c 	.word	0x08026c8c
 8016c50:	08026c9c 	.word	0x08026c9c
 8016c54:	08026ca4 	.word	0x08026ca4
 8016c58:	08026cac 	.word	0x08026cac

08016c5c <mg_tls_generate_application_keys>:

static void mg_tls_generate_application_keys(struct mg_connection *c) {
 8016c5c:	b580      	push	{r7, lr}
 8016c5e:	b0cc      	sub	sp, #304	@ 0x130
 8016c60:	af04      	add	r7, sp, #16
 8016c62:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8016c66:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8016c6a:	6018      	str	r0, [r3, #0]
  struct tls_data *tls = (struct tls_data *) c->tls;
 8016c6c:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8016c70:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8016c74:	681b      	ldr	r3, [r3, #0]
 8016c76:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8016c7a:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  uint8_t premaster_secret[32];
  uint8_t master_secret[32];
  uint8_t server_secret[32];
  uint8_t client_secret[32];
#if MG_ENABLE_CHACHA20
  const size_t keysz = 32;
 8016c7e:	2320      	movs	r3, #32
 8016c80:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
#else
  const size_t keysz = 16;
#endif

  mg_sha256_ctx sha256;
  memmove(&sha256, &tls->sha256, sizeof(mg_sha256_ctx));
 8016c84:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8016c88:	f103 0120 	add.w	r1, r3, #32
 8016c8c:	f107 0308 	add.w	r3, r7, #8
 8016c90:	2270      	movs	r2, #112	@ 0x70
 8016c92:	4618      	mov	r0, r3
 8016c94:	f00d fbe0 	bl	8024458 <memmove>
  mg_sha256_final(hash, &sha256);
 8016c98:	f107 0208 	add.w	r2, r7, #8
 8016c9c:	f107 03f8 	add.w	r3, r7, #248	@ 0xf8
 8016ca0:	4611      	mov	r1, r2
 8016ca2:	4618      	mov	r0, r3
 8016ca4:	f7fd fc37 	bl	8014516 <mg_sha256_final>

  mg_tls_derive_secret("tls13 derived", tls->enc.handshake_secret, 32,
 8016ca8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8016cac:	f503 6190 	add.w	r1, r3, #1152	@ 0x480
 8016cb0:	2320      	movs	r3, #32
 8016cb2:	9302      	str	r3, [sp, #8]
 8016cb4:	f107 03d8 	add.w	r3, r7, #216	@ 0xd8
 8016cb8:	9301      	str	r3, [sp, #4]
 8016cba:	2320      	movs	r3, #32
 8016cbc:	9300      	str	r3, [sp, #0]
 8016cbe:	4b64      	ldr	r3, [pc, #400]	@ (8016e50 <mg_tls_generate_application_keys+0x1f4>)
 8016cc0:	2220      	movs	r2, #32
 8016cc2:	4864      	ldr	r0, [pc, #400]	@ (8016e54 <mg_tls_generate_application_keys+0x1f8>)
 8016cc4:	f7ff fdde 	bl	8016884 <mg_tls_derive_secret>
                       zeros_sha256_digest, 32, premaster_secret, 32);
  mg_hmac_sha256(master_secret, premaster_secret, 32, zeros, 32);
 8016cc8:	f107 01d8 	add.w	r1, r7, #216	@ 0xd8
 8016ccc:	f107 00b8 	add.w	r0, r7, #184	@ 0xb8
 8016cd0:	2320      	movs	r3, #32
 8016cd2:	9300      	str	r3, [sp, #0]
 8016cd4:	4b60      	ldr	r3, [pc, #384]	@ (8016e58 <mg_tls_generate_application_keys+0x1fc>)
 8016cd6:	2220      	movs	r2, #32
 8016cd8:	f7fd fd71 	bl	80147be <mg_hmac_sha256>

  mg_tls_derive_secret("tls13 s ap traffic", master_secret, 32, hash, 32,
 8016cdc:	f107 02f8 	add.w	r2, r7, #248	@ 0xf8
 8016ce0:	f107 01b8 	add.w	r1, r7, #184	@ 0xb8
 8016ce4:	2320      	movs	r3, #32
 8016ce6:	9302      	str	r3, [sp, #8]
 8016ce8:	f107 0398 	add.w	r3, r7, #152	@ 0x98
 8016cec:	9301      	str	r3, [sp, #4]
 8016cee:	2320      	movs	r3, #32
 8016cf0:	9300      	str	r3, [sp, #0]
 8016cf2:	4613      	mov	r3, r2
 8016cf4:	2220      	movs	r2, #32
 8016cf6:	4859      	ldr	r0, [pc, #356]	@ (8016e5c <mg_tls_generate_application_keys+0x200>)
 8016cf8:	f7ff fdc4 	bl	8016884 <mg_tls_derive_secret>
                       server_secret, 32);
  mg_tls_derive_secret("tls13 key", server_secret, 32, NULL, 0,
                       tls->enc.server_write_key, keysz);
 8016cfc:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8016d00:	f503 6394 	add.w	r3, r3, #1184	@ 0x4a0
  mg_tls_derive_secret("tls13 key", server_secret, 32, NULL, 0,
 8016d04:	f107 0198 	add.w	r1, r7, #152	@ 0x98
 8016d08:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 8016d0c:	9202      	str	r2, [sp, #8]
 8016d0e:	9301      	str	r3, [sp, #4]
 8016d10:	2300      	movs	r3, #0
 8016d12:	9300      	str	r3, [sp, #0]
 8016d14:	2300      	movs	r3, #0
 8016d16:	2220      	movs	r2, #32
 8016d18:	4851      	ldr	r0, [pc, #324]	@ (8016e60 <mg_tls_generate_application_keys+0x204>)
 8016d1a:	f7ff fdb3 	bl	8016884 <mg_tls_derive_secret>
  mg_tls_derive_secret("tls13 iv", server_secret, 32, NULL, 0,
                       tls->enc.server_write_iv, 12);
 8016d1e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8016d22:	f503 6398 	add.w	r3, r3, #1216	@ 0x4c0
  mg_tls_derive_secret("tls13 iv", server_secret, 32, NULL, 0,
 8016d26:	f107 0198 	add.w	r1, r7, #152	@ 0x98
 8016d2a:	220c      	movs	r2, #12
 8016d2c:	9202      	str	r2, [sp, #8]
 8016d2e:	9301      	str	r3, [sp, #4]
 8016d30:	2300      	movs	r3, #0
 8016d32:	9300      	str	r3, [sp, #0]
 8016d34:	2300      	movs	r3, #0
 8016d36:	2220      	movs	r2, #32
 8016d38:	484a      	ldr	r0, [pc, #296]	@ (8016e64 <mg_tls_generate_application_keys+0x208>)
 8016d3a:	f7ff fda3 	bl	8016884 <mg_tls_derive_secret>
  mg_tls_derive_secret("tls13 c ap traffic", master_secret, 32, hash, 32,
 8016d3e:	f107 02f8 	add.w	r2, r7, #248	@ 0xf8
 8016d42:	f107 01b8 	add.w	r1, r7, #184	@ 0xb8
 8016d46:	2320      	movs	r3, #32
 8016d48:	9302      	str	r3, [sp, #8]
 8016d4a:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 8016d4e:	9301      	str	r3, [sp, #4]
 8016d50:	2320      	movs	r3, #32
 8016d52:	9300      	str	r3, [sp, #0]
 8016d54:	4613      	mov	r3, r2
 8016d56:	2220      	movs	r2, #32
 8016d58:	4843      	ldr	r0, [pc, #268]	@ (8016e68 <mg_tls_generate_application_keys+0x20c>)
 8016d5a:	f7ff fd93 	bl	8016884 <mg_tls_derive_secret>
                       client_secret, 32);
  mg_tls_derive_secret("tls13 key", client_secret, 32, NULL, 0,
                       tls->enc.client_write_key, keysz);
 8016d5e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8016d62:	f203 43ec 	addw	r3, r3, #1260	@ 0x4ec
  mg_tls_derive_secret("tls13 key", client_secret, 32, NULL, 0,
 8016d66:	f107 0178 	add.w	r1, r7, #120	@ 0x78
 8016d6a:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 8016d6e:	9202      	str	r2, [sp, #8]
 8016d70:	9301      	str	r3, [sp, #4]
 8016d72:	2300      	movs	r3, #0
 8016d74:	9300      	str	r3, [sp, #0]
 8016d76:	2300      	movs	r3, #0
 8016d78:	2220      	movs	r2, #32
 8016d7a:	4839      	ldr	r0, [pc, #228]	@ (8016e60 <mg_tls_generate_application_keys+0x204>)
 8016d7c:	f7ff fd82 	bl	8016884 <mg_tls_derive_secret>
  mg_tls_derive_secret("tls13 iv", client_secret, 32, NULL, 0,
                       tls->enc.client_write_iv, 12);
 8016d80:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8016d84:	f203 530c 	addw	r3, r3, #1292	@ 0x50c
  mg_tls_derive_secret("tls13 iv", client_secret, 32, NULL, 0,
 8016d88:	f107 0178 	add.w	r1, r7, #120	@ 0x78
 8016d8c:	220c      	movs	r2, #12
 8016d8e:	9202      	str	r2, [sp, #8]
 8016d90:	9301      	str	r3, [sp, #4]
 8016d92:	2300      	movs	r3, #0
 8016d94:	9300      	str	r3, [sp, #0]
 8016d96:	2300      	movs	r3, #0
 8016d98:	2220      	movs	r2, #32
 8016d9a:	4832      	ldr	r0, [pc, #200]	@ (8016e64 <mg_tls_generate_application_keys+0x208>)
 8016d9c:	f7ff fd72 	bl	8016884 <mg_tls_derive_secret>

  mg_tls_hexdump("s ap traffic", server_secret, 32);
 8016da0:	f107 0398 	add.w	r3, r7, #152	@ 0x98
 8016da4:	2220      	movs	r2, #32
 8016da6:	4619      	mov	r1, r3
 8016da8:	4830      	ldr	r0, [pc, #192]	@ (8016e6c <mg_tls_generate_application_keys+0x210>)
 8016daa:	f7ff fb7d 	bl	80164a8 <mg_tls_hexdump>
  mg_tls_hexdump("s key", tls->enc.server_write_key, keysz);
 8016dae:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8016db2:	f503 6394 	add.w	r3, r3, #1184	@ 0x4a0
 8016db6:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 8016dba:	4619      	mov	r1, r3
 8016dbc:	482c      	ldr	r0, [pc, #176]	@ (8016e70 <mg_tls_generate_application_keys+0x214>)
 8016dbe:	f7ff fb73 	bl	80164a8 <mg_tls_hexdump>
  mg_tls_hexdump("s iv", tls->enc.server_write_iv, 12);
 8016dc2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8016dc6:	f503 6398 	add.w	r3, r3, #1216	@ 0x4c0
 8016dca:	220c      	movs	r2, #12
 8016dcc:	4619      	mov	r1, r3
 8016dce:	4829      	ldr	r0, [pc, #164]	@ (8016e74 <mg_tls_generate_application_keys+0x218>)
 8016dd0:	f7ff fb6a 	bl	80164a8 <mg_tls_hexdump>
  mg_tls_hexdump("s finished", tls->enc.server_finished_key, 32);
 8016dd4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8016dd8:	f203 43cc 	addw	r3, r3, #1228	@ 0x4cc
 8016ddc:	2220      	movs	r2, #32
 8016dde:	4619      	mov	r1, r3
 8016de0:	4825      	ldr	r0, [pc, #148]	@ (8016e78 <mg_tls_generate_application_keys+0x21c>)
 8016de2:	f7ff fb61 	bl	80164a8 <mg_tls_hexdump>
  mg_tls_hexdump("c ap traffic", client_secret, 32);
 8016de6:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 8016dea:	2220      	movs	r2, #32
 8016dec:	4619      	mov	r1, r3
 8016dee:	4823      	ldr	r0, [pc, #140]	@ (8016e7c <mg_tls_generate_application_keys+0x220>)
 8016df0:	f7ff fb5a 	bl	80164a8 <mg_tls_hexdump>
  mg_tls_hexdump("c key", tls->enc.client_write_key, keysz);
 8016df4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8016df8:	f203 43ec 	addw	r3, r3, #1260	@ 0x4ec
 8016dfc:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 8016e00:	4619      	mov	r1, r3
 8016e02:	481f      	ldr	r0, [pc, #124]	@ (8016e80 <mg_tls_generate_application_keys+0x224>)
 8016e04:	f7ff fb50 	bl	80164a8 <mg_tls_hexdump>
  mg_tls_hexdump("c iv", tls->enc.client_write_iv, 12);
 8016e08:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8016e0c:	f203 530c 	addw	r3, r3, #1292	@ 0x50c
 8016e10:	220c      	movs	r2, #12
 8016e12:	4619      	mov	r1, r3
 8016e14:	481b      	ldr	r0, [pc, #108]	@ (8016e84 <mg_tls_generate_application_keys+0x228>)
 8016e16:	f7ff fb47 	bl	80164a8 <mg_tls_hexdump>
  mg_tls_hexdump("c finished", tls->enc.client_finished_key, 32);
 8016e1a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8016e1e:	f503 63a3 	add.w	r3, r3, #1304	@ 0x518
 8016e22:	2220      	movs	r2, #32
 8016e24:	4619      	mov	r1, r3
 8016e26:	4818      	ldr	r0, [pc, #96]	@ (8016e88 <mg_tls_generate_application_keys+0x22c>)
 8016e28:	f7ff fb3e 	bl	80164a8 <mg_tls_hexdump>
  tls->enc.sseq = tls->enc.cseq = 0;
 8016e2c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8016e30:	2200      	movs	r2, #0
 8016e32:	f8c3 247c 	str.w	r2, [r3, #1148]	@ 0x47c
 8016e36:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8016e3a:	f8d3 247c 	ldr.w	r2, [r3, #1148]	@ 0x47c
 8016e3e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8016e42:	f8c3 2478 	str.w	r2, [r3, #1144]	@ 0x478

#ifdef MG_TLS_SSLKEYLOGFILE
  mg_ssl_key_log("SERVER_TRAFFIC_SECRET_0", tls->random, server_secret, 32);
  mg_ssl_key_log("CLIENT_TRAFFIC_SECRET_0", tls->random, client_secret, 32);
#endif
}
 8016e46:	bf00      	nop
 8016e48:	f507 7790 	add.w	r7, r7, #288	@ 0x120
 8016e4c:	46bd      	mov	sp, r7
 8016e4e:	bd80      	pop	{r7, pc}
 8016e50:	20000268 	.word	0x20000268
 8016e54:	08026be8 	.word	0x08026be8
 8016e58:	20011a98 	.word	0x20011a98
 8016e5c:	08026cb8 	.word	0x08026cb8
 8016e60:	08026c38 	.word	0x08026c38
 8016e64:	08026c44 	.word	0x08026c44
 8016e68:	08026ccc 	.word	0x08026ccc
 8016e6c:	08026ce0 	.word	0x08026ce0
 8016e70:	08026c70 	.word	0x08026c70
 8016e74:	08026c78 	.word	0x08026c78
 8016e78:	08026c80 	.word	0x08026c80
 8016e7c:	08026cf0 	.word	0x08026cf0
 8016e80:	08026c9c 	.word	0x08026c9c
 8016e84:	08026ca4 	.word	0x08026ca4
 8016e88:	08026cac 	.word	0x08026cac

08016e8c <mg_tls_encrypt>:

// AES GCM encryption of the message + put encoded data into the write buffer
static void mg_tls_encrypt(struct mg_connection *c, const uint8_t *msg,
                           size_t msgsz, uint8_t msgtype) {
 8016e8c:	b580      	push	{r7, lr}
 8016e8e:	b09a      	sub	sp, #104	@ 0x68
 8016e90:	af04      	add	r7, sp, #16
 8016e92:	60f8      	str	r0, [r7, #12]
 8016e94:	60b9      	str	r1, [r7, #8]
 8016e96:	607a      	str	r2, [r7, #4]
 8016e98:	70fb      	strb	r3, [r7, #3]
  struct tls_data *tls = (struct tls_data *) c->tls;
 8016e9a:	68fb      	ldr	r3, [r7, #12]
 8016e9c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8016ea0:	657b      	str	r3, [r7, #84]	@ 0x54
  struct mg_iobuf *wio = &tls->send;
 8016ea2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8016ea4:	3304      	adds	r3, #4
 8016ea6:	653b      	str	r3, [r7, #80]	@ 0x50
  uint8_t *outmsg;
  uint8_t *tag;
  size_t encsz = msgsz + 16 + 1;
 8016ea8:	687b      	ldr	r3, [r7, #4]
 8016eaa:	3311      	adds	r3, #17
 8016eac:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint8_t hdr[5] = {MG_TLS_APP_DATA, 0x03, 0x03,
 8016eae:	2317      	movs	r3, #23
 8016eb0:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
 8016eb4:	2303      	movs	r3, #3
 8016eb6:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 8016eba:	2303      	movs	r3, #3
 8016ebc:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
                    (uint8_t) ((encsz >> 8) & 0xff), (uint8_t) (encsz & 0xff)};
 8016ec0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8016ec2:	0a1b      	lsrs	r3, r3, #8
 8016ec4:	b2db      	uxtb	r3, r3
  uint8_t hdr[5] = {MG_TLS_APP_DATA, 0x03, 0x03,
 8016ec6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
                    (uint8_t) ((encsz >> 8) & 0xff), (uint8_t) (encsz & 0xff)};
 8016eca:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8016ecc:	b2db      	uxtb	r3, r3
  uint8_t hdr[5] = {MG_TLS_APP_DATA, 0x03, 0x03,
 8016ece:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
  uint8_t associated_data[5] = {MG_TLS_APP_DATA, 0x03, 0x03,
 8016ed2:	2317      	movs	r3, #23
 8016ed4:	773b      	strb	r3, [r7, #28]
 8016ed6:	2303      	movs	r3, #3
 8016ed8:	777b      	strb	r3, [r7, #29]
 8016eda:	2303      	movs	r3, #3
 8016edc:	77bb      	strb	r3, [r7, #30]
                                (uint8_t) ((encsz >> 8) & 0xff),
 8016ede:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8016ee0:	0a1b      	lsrs	r3, r3, #8
 8016ee2:	b2db      	uxtb	r3, r3
  uint8_t associated_data[5] = {MG_TLS_APP_DATA, 0x03, 0x03,
 8016ee4:	77fb      	strb	r3, [r7, #31]
                                (uint8_t) (encsz & 0xff)};
 8016ee6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8016ee8:	b2db      	uxtb	r3, r3
  uint8_t associated_data[5] = {MG_TLS_APP_DATA, 0x03, 0x03,
 8016eea:	f887 3020 	strb.w	r3, [r7, #32]
  uint8_t nonce[12];

  uint32_t seq = c->is_client ? tls->enc.cseq : tls->enc.sseq;
 8016eee:	68fb      	ldr	r3, [r7, #12]
 8016ef0:	f893 30b4 	ldrb.w	r3, [r3, #180]	@ 0xb4
 8016ef4:	f003 0302 	and.w	r3, r3, #2
 8016ef8:	b2db      	uxtb	r3, r3
 8016efa:	2b00      	cmp	r3, #0
 8016efc:	d003      	beq.n	8016f06 <mg_tls_encrypt+0x7a>
 8016efe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8016f00:	f8d3 347c 	ldr.w	r3, [r3, #1148]	@ 0x47c
 8016f04:	e002      	b.n	8016f0c <mg_tls_encrypt+0x80>
 8016f06:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8016f08:	f8d3 3478 	ldr.w	r3, [r3, #1144]	@ 0x478
 8016f0c:	64bb      	str	r3, [r7, #72]	@ 0x48
  uint8_t *key =
      c->is_client ? tls->enc.client_write_key : tls->enc.server_write_key;
 8016f0e:	68fb      	ldr	r3, [r7, #12]
 8016f10:	f893 30b4 	ldrb.w	r3, [r3, #180]	@ 0xb4
 8016f14:	f003 0302 	and.w	r3, r3, #2
 8016f18:	b2db      	uxtb	r3, r3
 8016f1a:	2b00      	cmp	r3, #0
 8016f1c:	d003      	beq.n	8016f26 <mg_tls_encrypt+0x9a>
 8016f1e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8016f20:	f203 43ec 	addw	r3, r3, #1260	@ 0x4ec
 8016f24:	e002      	b.n	8016f2c <mg_tls_encrypt+0xa0>
 8016f26:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8016f28:	f503 6394 	add.w	r3, r3, #1184	@ 0x4a0
  uint8_t *key =
 8016f2c:	647b      	str	r3, [r7, #68]	@ 0x44
  uint8_t *iv =
      c->is_client ? tls->enc.client_write_iv : tls->enc.server_write_iv;
 8016f2e:	68fb      	ldr	r3, [r7, #12]
 8016f30:	f893 30b4 	ldrb.w	r3, [r3, #180]	@ 0xb4
 8016f34:	f003 0302 	and.w	r3, r3, #2
 8016f38:	b2db      	uxtb	r3, r3
 8016f3a:	2b00      	cmp	r3, #0
 8016f3c:	d003      	beq.n	8016f46 <mg_tls_encrypt+0xba>
 8016f3e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8016f40:	f203 530c 	addw	r3, r3, #1292	@ 0x50c
 8016f44:	e002      	b.n	8016f4c <mg_tls_encrypt+0xc0>
 8016f46:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8016f48:	f503 6398 	add.w	r3, r3, #1216	@ 0x4c0
  uint8_t *iv =
 8016f4c:	643b      	str	r3, [r7, #64]	@ 0x40
#if MG_ENABLE_CHACHA20
#else
  mg_gcm_initialize();
#endif

  memmove(nonce, iv, sizeof(nonce));
 8016f4e:	f107 0310 	add.w	r3, r7, #16
 8016f52:	220c      	movs	r2, #12
 8016f54:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8016f56:	4618      	mov	r0, r3
 8016f58:	f00d fa7e 	bl	8024458 <memmove>
  nonce[8] ^= (uint8_t) ((seq >> 24) & 255U);
 8016f5c:	7e3a      	ldrb	r2, [r7, #24]
 8016f5e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8016f60:	0e1b      	lsrs	r3, r3, #24
 8016f62:	b2db      	uxtb	r3, r3
 8016f64:	4053      	eors	r3, r2
 8016f66:	b2db      	uxtb	r3, r3
 8016f68:	763b      	strb	r3, [r7, #24]
  nonce[9] ^= (uint8_t) ((seq >> 16) & 255U);
 8016f6a:	7e7a      	ldrb	r2, [r7, #25]
 8016f6c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8016f6e:	0c1b      	lsrs	r3, r3, #16
 8016f70:	b2db      	uxtb	r3, r3
 8016f72:	4053      	eors	r3, r2
 8016f74:	b2db      	uxtb	r3, r3
 8016f76:	767b      	strb	r3, [r7, #25]
  nonce[10] ^= (uint8_t) ((seq >> 8) & 255U);
 8016f78:	7eba      	ldrb	r2, [r7, #26]
 8016f7a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8016f7c:	0a1b      	lsrs	r3, r3, #8
 8016f7e:	b2db      	uxtb	r3, r3
 8016f80:	4053      	eors	r3, r2
 8016f82:	b2db      	uxtb	r3, r3
 8016f84:	76bb      	strb	r3, [r7, #26]
  nonce[11] ^= (uint8_t) ((seq) & 255U);
 8016f86:	7efa      	ldrb	r2, [r7, #27]
 8016f88:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8016f8a:	b2db      	uxtb	r3, r3
 8016f8c:	4053      	eors	r3, r2
 8016f8e:	b2db      	uxtb	r3, r3
 8016f90:	76fb      	strb	r3, [r7, #27]

  mg_iobuf_add(wio, wio->len, hdr, sizeof(hdr));
 8016f92:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8016f94:	6899      	ldr	r1, [r3, #8]
 8016f96:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 8016f9a:	2305      	movs	r3, #5
 8016f9c:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 8016f9e:	f7f5 f9e5 	bl	800c36c <mg_iobuf_add>
  mg_iobuf_resize(wio, wio->len + encsz);
 8016fa2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8016fa4:	689a      	ldr	r2, [r3, #8]
 8016fa6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8016fa8:	4413      	add	r3, r2
 8016faa:	4619      	mov	r1, r3
 8016fac:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 8016fae:	f7f5 f94f 	bl	800c250 <mg_iobuf_resize>
  outmsg = wio->buf + wio->len;
 8016fb2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8016fb4:	681a      	ldr	r2, [r3, #0]
 8016fb6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8016fb8:	689b      	ldr	r3, [r3, #8]
 8016fba:	4413      	add	r3, r2
 8016fbc:	63fb      	str	r3, [r7, #60]	@ 0x3c
  tag = wio->buf + wio->len + msgsz + 1;
 8016fbe:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8016fc0:	681a      	ldr	r2, [r3, #0]
 8016fc2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8016fc4:	6899      	ldr	r1, [r3, #8]
 8016fc6:	687b      	ldr	r3, [r7, #4]
 8016fc8:	440b      	add	r3, r1
 8016fca:	3301      	adds	r3, #1
 8016fcc:	4413      	add	r3, r2
 8016fce:	63bb      	str	r3, [r7, #56]	@ 0x38
  memmove(outmsg, msg, msgsz);
 8016fd0:	687a      	ldr	r2, [r7, #4]
 8016fd2:	68b9      	ldr	r1, [r7, #8]
 8016fd4:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8016fd6:	f00d fa3f 	bl	8024458 <memmove>
  outmsg[msgsz] = msgtype;
 8016fda:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8016fdc:	687b      	ldr	r3, [r7, #4]
 8016fde:	4413      	add	r3, r2
 8016fe0:	78fa      	ldrb	r2, [r7, #3]
 8016fe2:	701a      	strb	r2, [r3, #0]
#if MG_ENABLE_CHACHA20
  (void) tag;  // tag is only used in aes gcm
  {
    size_t maxlen = MG_IO_SIZE > 16384 ? 16384 : MG_IO_SIZE;
 8016fe4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8016fe8:	637b      	str	r3, [r7, #52]	@ 0x34
    uint8_t *enc = (uint8_t *) mg_calloc(1, maxlen + 256 + 1);
 8016fea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8016fec:	f203 1301 	addw	r3, r3, #257	@ 0x101
 8016ff0:	4619      	mov	r1, r3
 8016ff2:	2001      	movs	r0, #1
 8016ff4:	f7ef ff0d 	bl	8006e12 <mg_calloc>
 8016ff8:	6338      	str	r0, [r7, #48]	@ 0x30
    if (enc == NULL) {
 8016ffa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016ffc:	2b00      	cmp	r3, #0
 8016ffe:	d104      	bne.n	801700a <mg_tls_encrypt+0x17e>
      mg_error(c, "TLS OOM");
 8017000:	491e      	ldr	r1, [pc, #120]	@ (801707c <mg_tls_encrypt+0x1f0>)
 8017002:	68f8      	ldr	r0, [r7, #12]
 8017004:	f7f0 ff36 	bl	8007e74 <mg_error>
 8017008:	e035      	b.n	8017076 <mg_tls_encrypt+0x1ea>
      return;
    } else {
      size_t n = mg_chacha20_poly1305_encrypt(enc, key, nonce, associated_data,
 801700a:	687b      	ldr	r3, [r7, #4]
 801700c:	3301      	adds	r3, #1
 801700e:	f107 011c 	add.w	r1, r7, #28
 8017012:	f107 0210 	add.w	r2, r7, #16
 8017016:	9302      	str	r3, [sp, #8]
 8017018:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801701a:	9301      	str	r3, [sp, #4]
 801701c:	2305      	movs	r3, #5
 801701e:	9300      	str	r3, [sp, #0]
 8017020:	460b      	mov	r3, r1
 8017022:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8017024:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8017026:	f005 fb8e 	bl	801c746 <mg_chacha20_poly1305_encrypt>
 801702a:	62f8      	str	r0, [r7, #44]	@ 0x2c
                                              sizeof(associated_data), outmsg,
                                              msgsz + 1);
      memmove(outmsg, enc, n);
 801702c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801702e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8017030:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8017032:	f00d fa11 	bl	8024458 <memmove>
      mg_free(enc);
 8017036:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8017038:	f7ef fee0 	bl	8006dfc <mg_free>
  }
#else
  mg_aes_gcm_encrypt(outmsg, outmsg, msgsz + 1, key, 16, nonce, sizeof(nonce),
                     associated_data, sizeof(associated_data), tag, 16);
#endif
  c->is_client ? tls->enc.cseq++ : tls->enc.sseq++;
 801703c:	68fb      	ldr	r3, [r7, #12]
 801703e:	f893 30b4 	ldrb.w	r3, [r3, #180]	@ 0xb4
 8017042:	f003 0302 	and.w	r3, r3, #2
 8017046:	b2db      	uxtb	r3, r3
 8017048:	2b00      	cmp	r3, #0
 801704a:	d007      	beq.n	801705c <mg_tls_encrypt+0x1d0>
 801704c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801704e:	f8d3 347c 	ldr.w	r3, [r3, #1148]	@ 0x47c
 8017052:	1c5a      	adds	r2, r3, #1
 8017054:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8017056:	f8c3 247c 	str.w	r2, [r3, #1148]	@ 0x47c
 801705a:	e006      	b.n	801706a <mg_tls_encrypt+0x1de>
 801705c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801705e:	f8d3 3478 	ldr.w	r3, [r3, #1144]	@ 0x478
 8017062:	1c5a      	adds	r2, r3, #1
 8017064:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8017066:	f8c3 2478 	str.w	r2, [r3, #1144]	@ 0x478
  wio->len += encsz;
 801706a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801706c:	689a      	ldr	r2, [r3, #8]
 801706e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8017070:	441a      	add	r2, r3
 8017072:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8017074:	609a      	str	r2, [r3, #8]
}
 8017076:	3758      	adds	r7, #88	@ 0x58
 8017078:	46bd      	mov	sp, r7
 801707a:	bd80      	pop	{r7, pc}
 801707c:	08026d00 	.word	0x08026d00

08017080 <mg_tls_recv_record>:

// read an encrypted record, decrypt it in place
static int mg_tls_recv_record(struct mg_connection *c) {
 8017080:	b580      	push	{r7, lr}
 8017082:	b092      	sub	sp, #72	@ 0x48
 8017084:	af02      	add	r7, sp, #8
 8017086:	6078      	str	r0, [r7, #4]
  struct tls_data *tls = (struct tls_data *) c->tls;
 8017088:	687b      	ldr	r3, [r7, #4]
 801708a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 801708e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  struct mg_iobuf *rio = &c->rtls;
 8017090:	687b      	ldr	r3, [r7, #4]
 8017092:	3370      	adds	r3, #112	@ 0x70
 8017094:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint16_t msgsz;
  uint8_t *msg;
  uint8_t nonce[12];
  int r;

  uint32_t seq = c->is_client ? tls->enc.sseq : tls->enc.cseq;
 8017096:	687b      	ldr	r3, [r7, #4]
 8017098:	f893 30b4 	ldrb.w	r3, [r3, #180]	@ 0xb4
 801709c:	f003 0302 	and.w	r3, r3, #2
 80170a0:	b2db      	uxtb	r3, r3
 80170a2:	2b00      	cmp	r3, #0
 80170a4:	d003      	beq.n	80170ae <mg_tls_recv_record+0x2e>
 80170a6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80170a8:	f8d3 3478 	ldr.w	r3, [r3, #1144]	@ 0x478
 80170ac:	e002      	b.n	80170b4 <mg_tls_recv_record+0x34>
 80170ae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80170b0:	f8d3 347c 	ldr.w	r3, [r3, #1148]	@ 0x47c
 80170b4:	637b      	str	r3, [r7, #52]	@ 0x34
  uint8_t *key =
      c->is_client ? tls->enc.server_write_key : tls->enc.client_write_key;
 80170b6:	687b      	ldr	r3, [r7, #4]
 80170b8:	f893 30b4 	ldrb.w	r3, [r3, #180]	@ 0xb4
 80170bc:	f003 0302 	and.w	r3, r3, #2
 80170c0:	b2db      	uxtb	r3, r3
 80170c2:	2b00      	cmp	r3, #0
 80170c4:	d003      	beq.n	80170ce <mg_tls_recv_record+0x4e>
 80170c6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80170c8:	f503 6394 	add.w	r3, r3, #1184	@ 0x4a0
 80170cc:	e002      	b.n	80170d4 <mg_tls_recv_record+0x54>
 80170ce:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80170d0:	f203 43ec 	addw	r3, r3, #1260	@ 0x4ec
  uint8_t *key =
 80170d4:	633b      	str	r3, [r7, #48]	@ 0x30
  uint8_t *iv =
      c->is_client ? tls->enc.server_write_iv : tls->enc.client_write_iv;
 80170d6:	687b      	ldr	r3, [r7, #4]
 80170d8:	f893 30b4 	ldrb.w	r3, [r3, #180]	@ 0xb4
 80170dc:	f003 0302 	and.w	r3, r3, #2
 80170e0:	b2db      	uxtb	r3, r3
 80170e2:	2b00      	cmp	r3, #0
 80170e4:	d003      	beq.n	80170ee <mg_tls_recv_record+0x6e>
 80170e6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80170e8:	f503 6398 	add.w	r3, r3, #1216	@ 0x4c0
 80170ec:	e002      	b.n	80170f4 <mg_tls_recv_record+0x74>
 80170ee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80170f0:	f203 530c 	addw	r3, r3, #1292	@ 0x50c
  uint8_t *iv =
 80170f4:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (tls->recv_len > 0) {
 80170f6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80170f8:	699b      	ldr	r3, [r3, #24]
 80170fa:	2b00      	cmp	r3, #0
 80170fc:	d001      	beq.n	8017102 <mg_tls_recv_record+0x82>
    return 0; /* some data from previous record is still present */
 80170fe:	2300      	movs	r3, #0
 8017100:	e0c6      	b.n	8017290 <mg_tls_recv_record+0x210>
  }
  for (;;) {
    if (!mg_tls_got_record(c)) {
 8017102:	6878      	ldr	r0, [r7, #4]
 8017104:	f7ff fb27 	bl	8016756 <mg_tls_got_record>
 8017108:	4603      	mov	r3, r0
 801710a:	f083 0301 	eor.w	r3, r3, #1
 801710e:	b2db      	uxtb	r3, r3
 8017110:	2b00      	cmp	r3, #0
 8017112:	d002      	beq.n	801711a <mg_tls_recv_record+0x9a>
      return MG_IO_WAIT;
 8017114:	f06f 0301 	mvn.w	r3, #1
 8017118:	e0ba      	b.n	8017290 <mg_tls_recv_record+0x210>
    }
    if (rio->buf[0] == MG_TLS_APP_DATA) {
 801711a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801711c:	681b      	ldr	r3, [r3, #0]
 801711e:	781b      	ldrb	r3, [r3, #0]
 8017120:	2b17      	cmp	r3, #23
 8017122:	d026      	beq.n	8017172 <mg_tls_recv_record+0xf2>
      break;
    } else if (rio->buf[0] ==
 8017124:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8017126:	681b      	ldr	r3, [r3, #0]
 8017128:	781b      	ldrb	r3, [r3, #0]
 801712a:	2b14      	cmp	r3, #20
 801712c:	d103      	bne.n	8017136 <mg_tls_recv_record+0xb6>
               MG_TLS_CHANGE_CIPHER) {  // Skip ChangeCipher messages
      mg_tls_drop_record(c);
 801712e:	6878      	ldr	r0, [r7, #4]
 8017130:	f7ff fb39 	bl	80167a6 <mg_tls_drop_record>
 8017134:	e7e5      	b.n	8017102 <mg_tls_recv_record+0x82>
    } else if (rio->buf[0] == MG_TLS_ALERT) {  // Skip Alerts
 8017136:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8017138:	681b      	ldr	r3, [r3, #0]
 801713a:	781b      	ldrb	r3, [r3, #0]
 801713c:	2b15      	cmp	r3, #21
 801713e:	d111      	bne.n	8017164 <mg_tls_recv_record+0xe4>
      MG_INFO(("TLS ALERT packet received"));
 8017140:	4b55      	ldr	r3, [pc, #340]	@ (8017298 <mg_tls_recv_record+0x218>)
 8017142:	681b      	ldr	r3, [r3, #0]
 8017144:	2b01      	cmp	r3, #1
 8017146:	dd09      	ble.n	801715c <mg_tls_recv_record+0xdc>
 8017148:	4b54      	ldr	r3, [pc, #336]	@ (801729c <mg_tls_recv_record+0x21c>)
 801714a:	f642 5223 	movw	r2, #11555	@ 0x2d23
 801714e:	4954      	ldr	r1, [pc, #336]	@ (80172a0 <mg_tls_recv_record+0x220>)
 8017150:	2002      	movs	r0, #2
 8017152:	f7f6 f82b 	bl	800d1ac <mg_log_prefix>
 8017156:	4853      	ldr	r0, [pc, #332]	@ (80172a4 <mg_tls_recv_record+0x224>)
 8017158:	f7f6 f878 	bl	800d24c <mg_log>
      mg_tls_drop_record(c);
 801715c:	6878      	ldr	r0, [r7, #4]
 801715e:	f7ff fb22 	bl	80167a6 <mg_tls_drop_record>
 8017162:	e7ce      	b.n	8017102 <mg_tls_recv_record+0x82>
    } else {
      mg_error(c, "unexpected packet");
 8017164:	4950      	ldr	r1, [pc, #320]	@ (80172a8 <mg_tls_recv_record+0x228>)
 8017166:	6878      	ldr	r0, [r7, #4]
 8017168:	f7f0 fe84 	bl	8007e74 <mg_error>
      return -1;
 801716c:	f04f 33ff 	mov.w	r3, #4294967295
 8017170:	e08e      	b.n	8017290 <mg_tls_recv_record+0x210>
      break;
 8017172:	bf00      	nop
    }
  }

  msgsz = MG_LOAD_BE16(rio->buf + 3);
 8017174:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8017176:	681b      	ldr	r3, [r3, #0]
 8017178:	3303      	adds	r3, #3
 801717a:	781b      	ldrb	r3, [r3, #0]
 801717c:	b21b      	sxth	r3, r3
 801717e:	021b      	lsls	r3, r3, #8
 8017180:	b21a      	sxth	r2, r3
 8017182:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8017184:	681b      	ldr	r3, [r3, #0]
 8017186:	3304      	adds	r3, #4
 8017188:	781b      	ldrb	r3, [r3, #0]
 801718a:	b21b      	sxth	r3, r3
 801718c:	4313      	orrs	r3, r2
 801718e:	b21b      	sxth	r3, r3
 8017190:	857b      	strh	r3, [r7, #42]	@ 0x2a
  msg = rio->buf + 5;
 8017192:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8017194:	681b      	ldr	r3, [r3, #0]
 8017196:	3305      	adds	r3, #5
 8017198:	627b      	str	r3, [r7, #36]	@ 0x24
  if (msgsz < 16) {
 801719a:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 801719c:	2b0f      	cmp	r3, #15
 801719e:	d806      	bhi.n	80171ae <mg_tls_recv_record+0x12e>
    mg_error(c, "wrong size");
 80171a0:	4942      	ldr	r1, [pc, #264]	@ (80172ac <mg_tls_recv_record+0x22c>)
 80171a2:	6878      	ldr	r0, [r7, #4]
 80171a4:	f7f0 fe66 	bl	8007e74 <mg_error>
    return -1;
 80171a8:	f04f 33ff 	mov.w	r3, #4294967295
 80171ac:	e070      	b.n	8017290 <mg_tls_recv_record+0x210>
  }

  memmove(nonce, iv, sizeof(nonce));
 80171ae:	f107 030c 	add.w	r3, r7, #12
 80171b2:	220c      	movs	r2, #12
 80171b4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80171b6:	4618      	mov	r0, r3
 80171b8:	f00d f94e 	bl	8024458 <memmove>
  nonce[8] ^= (uint8_t) ((seq >> 24) & 255U);
 80171bc:	7d3a      	ldrb	r2, [r7, #20]
 80171be:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80171c0:	0e1b      	lsrs	r3, r3, #24
 80171c2:	b2db      	uxtb	r3, r3
 80171c4:	4053      	eors	r3, r2
 80171c6:	b2db      	uxtb	r3, r3
 80171c8:	753b      	strb	r3, [r7, #20]
  nonce[9] ^= (uint8_t) ((seq >> 16) & 255U);
 80171ca:	7d7a      	ldrb	r2, [r7, #21]
 80171cc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80171ce:	0c1b      	lsrs	r3, r3, #16
 80171d0:	b2db      	uxtb	r3, r3
 80171d2:	4053      	eors	r3, r2
 80171d4:	b2db      	uxtb	r3, r3
 80171d6:	757b      	strb	r3, [r7, #21]
  nonce[10] ^= (uint8_t) ((seq >> 8) & 255U);
 80171d8:	7dba      	ldrb	r2, [r7, #22]
 80171da:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80171dc:	0a1b      	lsrs	r3, r3, #8
 80171de:	b2db      	uxtb	r3, r3
 80171e0:	4053      	eors	r3, r2
 80171e2:	b2db      	uxtb	r3, r3
 80171e4:	75bb      	strb	r3, [r7, #22]
  nonce[11] ^= (uint8_t) ((seq) & 255U);
 80171e6:	7dfa      	ldrb	r2, [r7, #23]
 80171e8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80171ea:	b2db      	uxtb	r3, r3
 80171ec:	4053      	eors	r3, r2
 80171ee:	b2db      	uxtb	r3, r3
 80171f0:	75fb      	strb	r3, [r7, #23]
#if MG_ENABLE_CHACHA20
  {
    uint8_t *dec = (uint8_t *) mg_calloc(1, msgsz);
 80171f2:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80171f4:	4619      	mov	r1, r3
 80171f6:	2001      	movs	r0, #1
 80171f8:	f7ef fe0b 	bl	8006e12 <mg_calloc>
 80171fc:	6238      	str	r0, [r7, #32]
    size_t n;
    if (dec == NULL) {
 80171fe:	6a3b      	ldr	r3, [r7, #32]
 8017200:	2b00      	cmp	r3, #0
 8017202:	d106      	bne.n	8017212 <mg_tls_recv_record+0x192>
      mg_error(c, "TLS OOM");
 8017204:	492a      	ldr	r1, [pc, #168]	@ (80172b0 <mg_tls_recv_record+0x230>)
 8017206:	6878      	ldr	r0, [r7, #4]
 8017208:	f7f0 fe34 	bl	8007e74 <mg_error>
      return -1;
 801720c:	f04f 33ff 	mov.w	r3, #4294967295
 8017210:	e03e      	b.n	8017290 <mg_tls_recv_record+0x210>
    }
    n = mg_chacha20_poly1305_decrypt(dec, key, nonce, msg, msgsz);
 8017212:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8017214:	f107 020c 	add.w	r2, r7, #12
 8017218:	9300      	str	r3, [sp, #0]
 801721a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801721c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 801721e:	6a38      	ldr	r0, [r7, #32]
 8017220:	f005 fac9 	bl	801c7b6 <mg_chacha20_poly1305_decrypt>
 8017224:	61f8      	str	r0, [r7, #28]
    memmove(msg, dec, n);
 8017226:	69fa      	ldr	r2, [r7, #28]
 8017228:	6a39      	ldr	r1, [r7, #32]
 801722a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801722c:	f00d f914 	bl	8024458 <memmove>
    mg_free(dec);
 8017230:	6a38      	ldr	r0, [r7, #32]
 8017232:	f7ef fde3 	bl	8006dfc <mg_free>
#else
  mg_gcm_initialize();
  mg_aes_gcm_decrypt(msg, msg, msgsz - 16, key, 16, nonce, sizeof(nonce));
#endif

  r = msgsz - 16 - 1;
 8017236:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8017238:	3b11      	subs	r3, #17
 801723a:	61bb      	str	r3, [r7, #24]
  tls->content_type = msg[msgsz - 16 - 1];
 801723c:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 801723e:	3b11      	subs	r3, #17
 8017240:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8017242:	4413      	add	r3, r2
 8017244:	781a      	ldrb	r2, [r3, #0]
 8017246:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8017248:	771a      	strb	r2, [r3, #28]
  tls->recv_offset = (size_t) msg - (size_t) rio->buf;
 801724a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801724c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801724e:	6812      	ldr	r2, [r2, #0]
 8017250:	1a9a      	subs	r2, r3, r2
 8017252:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8017254:	615a      	str	r2, [r3, #20]
  tls->recv_len = (size_t) msgsz - 16 - 1;
 8017256:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8017258:	f1a3 0211 	sub.w	r2, r3, #17
 801725c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801725e:	619a      	str	r2, [r3, #24]
  c->is_client ? tls->enc.sseq++ : tls->enc.cseq++;
 8017260:	687b      	ldr	r3, [r7, #4]
 8017262:	f893 30b4 	ldrb.w	r3, [r3, #180]	@ 0xb4
 8017266:	f003 0302 	and.w	r3, r3, #2
 801726a:	b2db      	uxtb	r3, r3
 801726c:	2b00      	cmp	r3, #0
 801726e:	d007      	beq.n	8017280 <mg_tls_recv_record+0x200>
 8017270:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8017272:	f8d3 3478 	ldr.w	r3, [r3, #1144]	@ 0x478
 8017276:	1c5a      	adds	r2, r3, #1
 8017278:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801727a:	f8c3 2478 	str.w	r2, [r3, #1144]	@ 0x478
 801727e:	e006      	b.n	801728e <mg_tls_recv_record+0x20e>
 8017280:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8017282:	f8d3 347c 	ldr.w	r3, [r3, #1148]	@ 0x47c
 8017286:	1c5a      	adds	r2, r3, #1
 8017288:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801728a:	f8c3 247c 	str.w	r2, [r3, #1148]	@ 0x47c
  return r;
 801728e:	69bb      	ldr	r3, [r7, #24]
}
 8017290:	4618      	mov	r0, r3
 8017292:	3740      	adds	r7, #64	@ 0x40
 8017294:	46bd      	mov	sp, r7
 8017296:	bd80      	pop	{r7, pc}
 8017298:	20000258 	.word	0x20000258
 801729c:	080289cc 	.word	0x080289cc
 80172a0:	08025140 	.word	0x08025140
 80172a4:	08026d08 	.word	0x08026d08
 80172a8:	08026d24 	.word	0x08026d24
 80172ac:	08026bdc 	.word	0x08026bdc
 80172b0:	08026d00 	.word	0x08026d00

080172b4 <mg_tls_calc_cert_verify_hash>:

static void mg_tls_calc_cert_verify_hash(struct mg_connection *c,
                                         uint8_t hash[32], bool is_client) {
 80172b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80172b6:	b0cd      	sub	sp, #308	@ 0x134
 80172b8:	af00      	add	r7, sp, #0
 80172ba:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80172be:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 80172c2:	6018      	str	r0, [r3, #0]
 80172c4:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80172c8:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80172cc:	6019      	str	r1, [r3, #0]
 80172ce:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80172d2:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 80172d6:	701a      	strb	r2, [r3, #0]
  struct tls_data *tls = (struct tls_data *) c->tls;
 80172d8:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80172dc:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 80172e0:	681b      	ldr	r3, [r3, #0]
 80172e2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80172e6:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  uint8_t sig_content[130];
  mg_sha256_ctx sha256;

  memset(sig_content, 0x20, 64);
 80172ea:	f107 03a8 	add.w	r3, r7, #168	@ 0xa8
 80172ee:	2240      	movs	r2, #64	@ 0x40
 80172f0:	2120      	movs	r1, #32
 80172f2:	4618      	mov	r0, r3
 80172f4:	f00d f8ca 	bl	802448c <memset>
  if (is_client) {
 80172f8:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80172fc:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 8017300:	781b      	ldrb	r3, [r3, #0]
 8017302:	2b00      	cmp	r3, #0
 8017304:	d028      	beq.n	8017358 <mg_tls_calc_cert_verify_hash+0xa4>
    uint8_t client_context[34] = "TLS 1.3, client CertificateVerify";
 8017306:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 801730a:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 801730e:	4a3e      	ldr	r2, [pc, #248]	@ (8017408 <mg_tls_calc_cert_verify_hash+0x154>)
 8017310:	461c      	mov	r4, r3
 8017312:	4615      	mov	r5, r2
 8017314:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8017316:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8017318:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801731a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801731c:	682b      	ldr	r3, [r5, #0]
 801731e:	8023      	strh	r3, [r4, #0]
    memcpy(sig_content + 64, client_context, sizeof(client_context));
 8017320:	f107 03a8 	add.w	r3, r7, #168	@ 0xa8
 8017324:	3340      	adds	r3, #64	@ 0x40
 8017326:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 801732a:	f5a2 728e 	sub.w	r2, r2, #284	@ 0x11c
 801732e:	4614      	mov	r4, r2
 8017330:	469c      	mov	ip, r3
 8017332:	f104 0e20 	add.w	lr, r4, #32
 8017336:	4665      	mov	r5, ip
 8017338:	4626      	mov	r6, r4
 801733a:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 801733c:	6028      	str	r0, [r5, #0]
 801733e:	6069      	str	r1, [r5, #4]
 8017340:	60aa      	str	r2, [r5, #8]
 8017342:	60eb      	str	r3, [r5, #12]
 8017344:	3410      	adds	r4, #16
 8017346:	f10c 0c10 	add.w	ip, ip, #16
 801734a:	4574      	cmp	r4, lr
 801734c:	d1f3      	bne.n	8017336 <mg_tls_calc_cert_verify_hash+0x82>
 801734e:	4662      	mov	r2, ip
 8017350:	4623      	mov	r3, r4
 8017352:	881b      	ldrh	r3, [r3, #0]
 8017354:	8013      	strh	r3, [r2, #0]
 8017356:	e027      	b.n	80173a8 <mg_tls_calc_cert_verify_hash+0xf4>
  } else {
    uint8_t server_context[34] = "TLS 1.3, server CertificateVerify";
 8017358:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 801735c:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8017360:	4a2a      	ldr	r2, [pc, #168]	@ (801740c <mg_tls_calc_cert_verify_hash+0x158>)
 8017362:	461c      	mov	r4, r3
 8017364:	4615      	mov	r5, r2
 8017366:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8017368:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801736a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801736c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801736e:	682b      	ldr	r3, [r5, #0]
 8017370:	8023      	strh	r3, [r4, #0]
    memcpy(sig_content + 64, server_context, sizeof(server_context));
 8017372:	f107 03a8 	add.w	r3, r7, #168	@ 0xa8
 8017376:	3340      	adds	r3, #64	@ 0x40
 8017378:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 801737c:	f5a2 728e 	sub.w	r2, r2, #284	@ 0x11c
 8017380:	4614      	mov	r4, r2
 8017382:	469c      	mov	ip, r3
 8017384:	f104 0e20 	add.w	lr, r4, #32
 8017388:	4665      	mov	r5, ip
 801738a:	4626      	mov	r6, r4
 801738c:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 801738e:	6028      	str	r0, [r5, #0]
 8017390:	6069      	str	r1, [r5, #4]
 8017392:	60aa      	str	r2, [r5, #8]
 8017394:	60eb      	str	r3, [r5, #12]
 8017396:	3410      	adds	r4, #16
 8017398:	f10c 0c10 	add.w	ip, ip, #16
 801739c:	4574      	cmp	r4, lr
 801739e:	d1f3      	bne.n	8017388 <mg_tls_calc_cert_verify_hash+0xd4>
 80173a0:	4662      	mov	r2, ip
 80173a2:	4623      	mov	r3, r4
 80173a4:	881b      	ldrh	r3, [r3, #0]
 80173a6:	8013      	strh	r3, [r2, #0]
  }

  memmove(&sha256, &tls->sha256, sizeof(mg_sha256_ctx));
 80173a8:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80173ac:	f103 0120 	add.w	r1, r3, #32
 80173b0:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80173b4:	2270      	movs	r2, #112	@ 0x70
 80173b6:	4618      	mov	r0, r3
 80173b8:	f00d f84e 	bl	8024458 <memmove>
  mg_sha256_final(sig_content + 98, &sha256);
 80173bc:	f107 03a8 	add.w	r3, r7, #168	@ 0xa8
 80173c0:	3362      	adds	r3, #98	@ 0x62
 80173c2:	f107 0238 	add.w	r2, r7, #56	@ 0x38
 80173c6:	4611      	mov	r1, r2
 80173c8:	4618      	mov	r0, r3
 80173ca:	f7fd f8a4 	bl	8014516 <mg_sha256_final>

  mg_sha256_init(&sha256);
 80173ce:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80173d2:	4618      	mov	r0, r3
 80173d4:	f7fc fe22 	bl	801401c <mg_sha256_init>
  mg_sha256_update(&sha256, sig_content, sizeof(sig_content));
 80173d8:	f107 01a8 	add.w	r1, r7, #168	@ 0xa8
 80173dc:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80173e0:	2282      	movs	r2, #130	@ 0x82
 80173e2:	4618      	mov	r0, r3
 80173e4:	f7fd f85e 	bl	80144a4 <mg_sha256_update>
  mg_sha256_final(hash, &sha256);
 80173e8:	f107 0238 	add.w	r2, r7, #56	@ 0x38
 80173ec:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80173f0:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80173f4:	4611      	mov	r1, r2
 80173f6:	6818      	ldr	r0, [r3, #0]
 80173f8:	f7fd f88d 	bl	8014516 <mg_sha256_final>
}
 80173fc:	bf00      	nop
 80173fe:	f507 779a 	add.w	r7, r7, #308	@ 0x134
 8017402:	46bd      	mov	sp, r7
 8017404:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017406:	bf00      	nop
 8017408:	08026d38 	.word	0x08026d38
 801740c:	08026d5c 	.word	0x08026d5c

08017410 <mg_tls_server_recv_hello>:

// read and parse ClientHello record
static int mg_tls_server_recv_hello(struct mg_connection *c) {
 8017410:	b580      	push	{r7, lr}
 8017412:	b08c      	sub	sp, #48	@ 0x30
 8017414:	af00      	add	r7, sp, #0
 8017416:	6078      	str	r0, [r7, #4]
  struct tls_data *tls = (struct tls_data *) c->tls;
 8017418:	687b      	ldr	r3, [r7, #4]
 801741a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 801741e:	62bb      	str	r3, [r7, #40]	@ 0x28
  struct mg_iobuf *rio = &c->rtls;
 8017420:	687b      	ldr	r3, [r7, #4]
 8017422:	3370      	adds	r3, #112	@ 0x70
 8017424:	627b      	str	r3, [r7, #36]	@ 0x24
  uint16_t cipher_suites_len;
  uint16_t ext_len;
  uint8_t *ext;
  uint16_t msgsz;

  if (!mg_tls_got_record(c)) {
 8017426:	6878      	ldr	r0, [r7, #4]
 8017428:	f7ff f995 	bl	8016756 <mg_tls_got_record>
 801742c:	4603      	mov	r3, r0
 801742e:	f083 0301 	eor.w	r3, r3, #1
 8017432:	b2db      	uxtb	r3, r3
 8017434:	2b00      	cmp	r3, #0
 8017436:	d002      	beq.n	801743e <mg_tls_server_recv_hello+0x2e>
    return MG_IO_WAIT;
 8017438:	f06f 0301 	mvn.w	r3, #1
 801743c:	e177      	b.n	801772e <mg_tls_server_recv_hello+0x31e>
  }
  if (rio->buf[0] != MG_TLS_HANDSHAKE || rio->buf[5] != MG_TLS_CLIENT_HELLO) {
 801743e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017440:	681b      	ldr	r3, [r3, #0]
 8017442:	781b      	ldrb	r3, [r3, #0]
 8017444:	2b16      	cmp	r3, #22
 8017446:	d105      	bne.n	8017454 <mg_tls_server_recv_hello+0x44>
 8017448:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801744a:	681b      	ldr	r3, [r3, #0]
 801744c:	3305      	adds	r3, #5
 801744e:	781b      	ldrb	r3, [r3, #0]
 8017450:	2b01      	cmp	r3, #1
 8017452:	d006      	beq.n	8017462 <mg_tls_server_recv_hello+0x52>
    mg_error(c, "not a client hello packet");
 8017454:	499c      	ldr	r1, [pc, #624]	@ (80176c8 <mg_tls_server_recv_hello+0x2b8>)
 8017456:	6878      	ldr	r0, [r7, #4]
 8017458:	f7f0 fd0c 	bl	8007e74 <mg_error>
    return -1;
 801745c:	f04f 33ff 	mov.w	r3, #4294967295
 8017460:	e165      	b.n	801772e <mg_tls_server_recv_hello+0x31e>
  }
  if (rio->len < 50) goto fail;
 8017462:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017464:	689b      	ldr	r3, [r3, #8]
 8017466:	2b31      	cmp	r3, #49	@ 0x31
 8017468:	f240 814e 	bls.w	8017708 <mg_tls_server_recv_hello+0x2f8>
  msgsz = MG_LOAD_BE16(rio->buf + 3);
 801746c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801746e:	681b      	ldr	r3, [r3, #0]
 8017470:	3303      	adds	r3, #3
 8017472:	781b      	ldrb	r3, [r3, #0]
 8017474:	b21b      	sxth	r3, r3
 8017476:	021b      	lsls	r3, r3, #8
 8017478:	b21a      	sxth	r2, r3
 801747a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801747c:	681b      	ldr	r3, [r3, #0]
 801747e:	3304      	adds	r3, #4
 8017480:	781b      	ldrb	r3, [r3, #0]
 8017482:	b21b      	sxth	r3, r3
 8017484:	4313      	orrs	r3, r2
 8017486:	b21b      	sxth	r3, r3
 8017488:	847b      	strh	r3, [r7, #34]	@ 0x22
  if (((uint32_t) msgsz + 4) > rio->len) goto fail;
 801748a:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801748c:	1d1a      	adds	r2, r3, #4
 801748e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017490:	689b      	ldr	r3, [r3, #8]
 8017492:	429a      	cmp	r2, r3
 8017494:	f200 813a 	bhi.w	801770c <mg_tls_server_recv_hello+0x2fc>
  mg_sha256_update(&tls->sha256, rio->buf + 5, msgsz);
 8017498:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801749a:	f103 0020 	add.w	r0, r3, #32
 801749e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80174a0:	681b      	ldr	r3, [r3, #0]
 80174a2:	3305      	adds	r3, #5
 80174a4:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 80174a6:	4619      	mov	r1, r3
 80174a8:	f7fc fffc 	bl	80144a4 <mg_sha256_update>
  // store client random
  memmove(tls->random, rio->buf + 11, sizeof(tls->random));
 80174ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80174ae:	f103 0090 	add.w	r0, r3, #144	@ 0x90
 80174b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80174b4:	681b      	ldr	r3, [r3, #0]
 80174b6:	330b      	adds	r3, #11
 80174b8:	2220      	movs	r2, #32
 80174ba:	4619      	mov	r1, r3
 80174bc:	f00c ffcc 	bl	8024458 <memmove>
  // store session_id
  session_id_len = rio->buf[43];
 80174c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80174c2:	681b      	ldr	r3, [r3, #0]
 80174c4:	f893 302b 	ldrb.w	r3, [r3, #43]	@ 0x2b
 80174c8:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
  if (session_id_len == sizeof(tls->session_id)) {
 80174cc:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 80174d0:	2b20      	cmp	r3, #32
 80174d2:	d10b      	bne.n	80174ec <mg_tls_server_recv_hello+0xdc>
    memmove(tls->session_id, rio->buf + 44, session_id_len);
 80174d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80174d6:	f103 00b0 	add.w	r0, r3, #176	@ 0xb0
 80174da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80174dc:	681b      	ldr	r3, [r3, #0]
 80174de:	332c      	adds	r3, #44	@ 0x2c
 80174e0:	f897 2021 	ldrb.w	r2, [r7, #33]	@ 0x21
 80174e4:	4619      	mov	r1, r3
 80174e6:	f00c ffb7 	bl	8024458 <memmove>
 80174ea:	e011      	b.n	8017510 <mg_tls_server_recv_hello+0x100>
  } else if (session_id_len != 0) {
 80174ec:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 80174f0:	2b00      	cmp	r3, #0
 80174f2:	d00d      	beq.n	8017510 <mg_tls_server_recv_hello+0x100>
    MG_INFO(("bad session id len"));
 80174f4:	4b75      	ldr	r3, [pc, #468]	@ (80176cc <mg_tls_server_recv_hello+0x2bc>)
 80174f6:	681b      	ldr	r3, [r3, #0]
 80174f8:	2b01      	cmp	r3, #1
 80174fa:	dd09      	ble.n	8017510 <mg_tls_server_recv_hello+0x100>
 80174fc:	4b74      	ldr	r3, [pc, #464]	@ (80176d0 <mg_tls_server_recv_hello+0x2c0>)
 80174fe:	f642 5284 	movw	r2, #11652	@ 0x2d84
 8017502:	4974      	ldr	r1, [pc, #464]	@ (80176d4 <mg_tls_server_recv_hello+0x2c4>)
 8017504:	2002      	movs	r0, #2
 8017506:	f7f5 fe51 	bl	800d1ac <mg_log_prefix>
 801750a:	4873      	ldr	r0, [pc, #460]	@ (80176d8 <mg_tls_server_recv_hello+0x2c8>)
 801750c:	f7f5 fe9e 	bl	800d24c <mg_log>
  }
  cipher_suites_len = MG_LOAD_BE16(rio->buf + 44 + session_id_len);
 8017510:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017512:	681a      	ldr	r2, [r3, #0]
 8017514:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8017518:	332c      	adds	r3, #44	@ 0x2c
 801751a:	4413      	add	r3, r2
 801751c:	781b      	ldrb	r3, [r3, #0]
 801751e:	b21b      	sxth	r3, r3
 8017520:	021b      	lsls	r3, r3, #8
 8017522:	b21a      	sxth	r2, r3
 8017524:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017526:	6819      	ldr	r1, [r3, #0]
 8017528:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 801752c:	332d      	adds	r3, #45	@ 0x2d
 801752e:	440b      	add	r3, r1
 8017530:	781b      	ldrb	r3, [r3, #0]
 8017532:	b21b      	sxth	r3, r3
 8017534:	4313      	orrs	r3, r2
 8017536:	b21b      	sxth	r3, r3
 8017538:	83fb      	strh	r3, [r7, #30]
  if (((uint32_t) cipher_suites_len + 46 + session_id_len) > rio->len)
 801753a:	8bfa      	ldrh	r2, [r7, #30]
 801753c:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8017540:	4413      	add	r3, r2
 8017542:	f103 022e 	add.w	r2, r3, #46	@ 0x2e
 8017546:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017548:	689b      	ldr	r3, [r3, #8]
 801754a:	429a      	cmp	r2, r3
 801754c:	f200 80e0 	bhi.w	8017710 <mg_tls_server_recv_hello+0x300>
    goto fail;
  ext_len = MG_LOAD_BE16(rio->buf + 48 + session_id_len + cipher_suites_len);
 8017550:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017552:	681a      	ldr	r2, [r3, #0]
 8017554:	f897 1021 	ldrb.w	r1, [r7, #33]	@ 0x21
 8017558:	8bfb      	ldrh	r3, [r7, #30]
 801755a:	440b      	add	r3, r1
 801755c:	3330      	adds	r3, #48	@ 0x30
 801755e:	4413      	add	r3, r2
 8017560:	781b      	ldrb	r3, [r3, #0]
 8017562:	b21b      	sxth	r3, r3
 8017564:	021b      	lsls	r3, r3, #8
 8017566:	b21a      	sxth	r2, r3
 8017568:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801756a:	6819      	ldr	r1, [r3, #0]
 801756c:	f897 0021 	ldrb.w	r0, [r7, #33]	@ 0x21
 8017570:	8bfb      	ldrh	r3, [r7, #30]
 8017572:	4403      	add	r3, r0
 8017574:	3331      	adds	r3, #49	@ 0x31
 8017576:	440b      	add	r3, r1
 8017578:	781b      	ldrb	r3, [r3, #0]
 801757a:	b21b      	sxth	r3, r3
 801757c:	4313      	orrs	r3, r2
 801757e:	b21b      	sxth	r3, r3
 8017580:	83bb      	strh	r3, [r7, #28]
  ext = rio->buf + 50 + session_id_len + cipher_suites_len;
 8017582:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017584:	681a      	ldr	r2, [r3, #0]
 8017586:	f897 1021 	ldrb.w	r1, [r7, #33]	@ 0x21
 801758a:	8bfb      	ldrh	r3, [r7, #30]
 801758c:	440b      	add	r3, r1
 801758e:	3332      	adds	r3, #50	@ 0x32
 8017590:	4413      	add	r3, r2
 8017592:	61bb      	str	r3, [r7, #24]
  if (((unsigned char *) ext + ext_len) > (rio->buf + rio->len)) goto fail;
 8017594:	8bbb      	ldrh	r3, [r7, #28]
 8017596:	69ba      	ldr	r2, [r7, #24]
 8017598:	441a      	add	r2, r3
 801759a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801759c:	6819      	ldr	r1, [r3, #0]
 801759e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80175a0:	689b      	ldr	r3, [r3, #8]
 80175a2:	440b      	add	r3, r1
 80175a4:	429a      	cmp	r2, r3
 80175a6:	f200 80b5 	bhi.w	8017714 <mg_tls_server_recv_hello+0x304>
  for (j = 0; j < ext_len;) {
 80175aa:	2300      	movs	r3, #0
 80175ac:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 80175ae:	e0a5      	b.n	80176fc <mg_tls_server_recv_hello+0x2ec>
    uint16_t k;
    uint16_t key_exchange_len;
    uint8_t *key_exchange;
    uint16_t n = MG_LOAD_BE16(ext + j + 2);
 80175b0:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80175b2:	3302      	adds	r3, #2
 80175b4:	69ba      	ldr	r2, [r7, #24]
 80175b6:	4413      	add	r3, r2
 80175b8:	781b      	ldrb	r3, [r3, #0]
 80175ba:	b21b      	sxth	r3, r3
 80175bc:	021b      	lsls	r3, r3, #8
 80175be:	b21a      	sxth	r2, r3
 80175c0:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80175c2:	3303      	adds	r3, #3
 80175c4:	69b9      	ldr	r1, [r7, #24]
 80175c6:	440b      	add	r3, r1
 80175c8:	781b      	ldrb	r3, [r3, #0]
 80175ca:	b21b      	sxth	r3, r3
 80175cc:	4313      	orrs	r3, r2
 80175ce:	b21b      	sxth	r3, r3
 80175d0:	82fb      	strh	r3, [r7, #22]
    if (((uint32_t) n + j + 4) > ext_len) goto fail;
 80175d2:	8afa      	ldrh	r2, [r7, #22]
 80175d4:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80175d6:	4413      	add	r3, r2
 80175d8:	1d1a      	adds	r2, r3, #4
 80175da:	8bbb      	ldrh	r3, [r7, #28]
 80175dc:	429a      	cmp	r2, r3
 80175de:	f200 809b 	bhi.w	8017718 <mg_tls_server_recv_hello+0x308>
    if (MG_LOAD_BE16(ext + j) != 0x0033) {  // not a key share extension, ignore
 80175e2:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80175e4:	69ba      	ldr	r2, [r7, #24]
 80175e6:	4413      	add	r3, r2
 80175e8:	781b      	ldrb	r3, [r3, #0]
 80175ea:	b21b      	sxth	r3, r3
 80175ec:	021b      	lsls	r3, r3, #8
 80175ee:	b21a      	sxth	r2, r3
 80175f0:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80175f2:	3301      	adds	r3, #1
 80175f4:	69b9      	ldr	r1, [r7, #24]
 80175f6:	440b      	add	r3, r1
 80175f8:	781b      	ldrb	r3, [r3, #0]
 80175fa:	b21b      	sxth	r3, r3
 80175fc:	4313      	orrs	r3, r2
 80175fe:	b21b      	sxth	r3, r3
 8017600:	2b33      	cmp	r3, #51	@ 0x33
 8017602:	d006      	beq.n	8017612 <mg_tls_server_recv_hello+0x202>
      j += (uint16_t) (n + 4);
 8017604:	8afa      	ldrh	r2, [r7, #22]
 8017606:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8017608:	4413      	add	r3, r2
 801760a:	b29b      	uxth	r3, r3
 801760c:	3304      	adds	r3, #4
 801760e:	85fb      	strh	r3, [r7, #46]	@ 0x2e
      continue;
 8017610:	e074      	b.n	80176fc <mg_tls_server_recv_hello+0x2ec>
    }
    key_exchange_len = MG_LOAD_BE16(ext + j + 4);
 8017612:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8017614:	3304      	adds	r3, #4
 8017616:	69ba      	ldr	r2, [r7, #24]
 8017618:	4413      	add	r3, r2
 801761a:	781b      	ldrb	r3, [r3, #0]
 801761c:	b21b      	sxth	r3, r3
 801761e:	021b      	lsls	r3, r3, #8
 8017620:	b21a      	sxth	r2, r3
 8017622:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8017624:	3305      	adds	r3, #5
 8017626:	69b9      	ldr	r1, [r7, #24]
 8017628:	440b      	add	r3, r1
 801762a:	781b      	ldrb	r3, [r3, #0]
 801762c:	b21b      	sxth	r3, r3
 801762e:	4313      	orrs	r3, r2
 8017630:	b21b      	sxth	r3, r3
 8017632:	82bb      	strh	r3, [r7, #20]
    key_exchange = ext + j + 6;
 8017634:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8017636:	3306      	adds	r3, #6
 8017638:	69ba      	ldr	r2, [r7, #24]
 801763a:	4413      	add	r3, r2
 801763c:	613b      	str	r3, [r7, #16]
    if (((size_t) key_exchange_len +
 801763e:	8aba      	ldrh	r2, [r7, #20]
         ((size_t) key_exchange - (size_t) rio->buf)) > rio->len)
 8017640:	693b      	ldr	r3, [r7, #16]
 8017642:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8017644:	6809      	ldr	r1, [r1, #0]
 8017646:	1a5b      	subs	r3, r3, r1
    if (((size_t) key_exchange_len +
 8017648:	441a      	add	r2, r3
         ((size_t) key_exchange - (size_t) rio->buf)) > rio->len)
 801764a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801764c:	689b      	ldr	r3, [r3, #8]
    if (((size_t) key_exchange_len +
 801764e:	429a      	cmp	r2, r3
 8017650:	d864      	bhi.n	801771c <mg_tls_server_recv_hello+0x30c>
      goto fail;
    for (k = 0; k < key_exchange_len;) {
 8017652:	2300      	movs	r3, #0
 8017654:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 8017656:	e047      	b.n	80176e8 <mg_tls_server_recv_hello+0x2d8>
      uint16_t m = MG_LOAD_BE16(key_exchange + k + 2);
 8017658:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 801765a:	3302      	adds	r3, #2
 801765c:	693a      	ldr	r2, [r7, #16]
 801765e:	4413      	add	r3, r2
 8017660:	781b      	ldrb	r3, [r3, #0]
 8017662:	b21b      	sxth	r3, r3
 8017664:	021b      	lsls	r3, r3, #8
 8017666:	b21a      	sxth	r2, r3
 8017668:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 801766a:	3303      	adds	r3, #3
 801766c:	6939      	ldr	r1, [r7, #16]
 801766e:	440b      	add	r3, r1
 8017670:	781b      	ldrb	r3, [r3, #0]
 8017672:	b21b      	sxth	r3, r3
 8017674:	4313      	orrs	r3, r2
 8017676:	b21b      	sxth	r3, r3
 8017678:	81fb      	strh	r3, [r7, #14]
      if (((uint32_t) m + k + 4) > key_exchange_len) goto fail;
 801767a:	89fa      	ldrh	r2, [r7, #14]
 801767c:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 801767e:	4413      	add	r3, r2
 8017680:	1d1a      	adds	r2, r3, #4
 8017682:	8abb      	ldrh	r3, [r7, #20]
 8017684:	429a      	cmp	r2, r3
 8017686:	d84b      	bhi.n	8017720 <mg_tls_server_recv_hello+0x310>
      if (m == 32 && key_exchange[k] == 0x00 && key_exchange[k + 1] == 0x1d) {
 8017688:	89fb      	ldrh	r3, [r7, #14]
 801768a:	2b20      	cmp	r3, #32
 801768c:	d126      	bne.n	80176dc <mg_tls_server_recv_hello+0x2cc>
 801768e:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8017690:	693a      	ldr	r2, [r7, #16]
 8017692:	4413      	add	r3, r2
 8017694:	781b      	ldrb	r3, [r3, #0]
 8017696:	2b00      	cmp	r3, #0
 8017698:	d120      	bne.n	80176dc <mg_tls_server_recv_hello+0x2cc>
 801769a:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 801769c:	3301      	adds	r3, #1
 801769e:	693a      	ldr	r2, [r7, #16]
 80176a0:	4413      	add	r3, r2
 80176a2:	781b      	ldrb	r3, [r3, #0]
 80176a4:	2b1d      	cmp	r3, #29
 80176a6:	d119      	bne.n	80176dc <mg_tls_server_recv_hello+0x2cc>
        memmove(tls->x25519_cli, key_exchange + k + 4, m);
 80176a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80176aa:	f103 00d0 	add.w	r0, r3, #208	@ 0xd0
 80176ae:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 80176b0:	3304      	adds	r3, #4
 80176b2:	693a      	ldr	r2, [r7, #16]
 80176b4:	4413      	add	r3, r2
 80176b6:	89fa      	ldrh	r2, [r7, #14]
 80176b8:	4619      	mov	r1, r3
 80176ba:	f00c fecd 	bl	8024458 <memmove>
        mg_tls_drop_record(c);
 80176be:	6878      	ldr	r0, [r7, #4]
 80176c0:	f7ff f871 	bl	80167a6 <mg_tls_drop_record>
        return 0;
 80176c4:	2300      	movs	r3, #0
 80176c6:	e032      	b.n	801772e <mg_tls_server_recv_hello+0x31e>
 80176c8:	08026d80 	.word	0x08026d80
 80176cc:	20000258 	.word	0x20000258
 80176d0:	080289e0 	.word	0x080289e0
 80176d4:	08025140 	.word	0x08025140
 80176d8:	08026d9c 	.word	0x08026d9c
      }
      k += (uint16_t) (m + 4);
 80176dc:	89fa      	ldrh	r2, [r7, #14]
 80176de:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 80176e0:	4413      	add	r3, r2
 80176e2:	b29b      	uxth	r3, r3
 80176e4:	3304      	adds	r3, #4
 80176e6:	85bb      	strh	r3, [r7, #44]	@ 0x2c
    for (k = 0; k < key_exchange_len;) {
 80176e8:	8dba      	ldrh	r2, [r7, #44]	@ 0x2c
 80176ea:	8abb      	ldrh	r3, [r7, #20]
 80176ec:	429a      	cmp	r2, r3
 80176ee:	d3b3      	bcc.n	8017658 <mg_tls_server_recv_hello+0x248>
    }
    j += (uint16_t) (n + 4);
 80176f0:	8afa      	ldrh	r2, [r7, #22]
 80176f2:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80176f4:	4413      	add	r3, r2
 80176f6:	b29b      	uxth	r3, r3
 80176f8:	3304      	adds	r3, #4
 80176fa:	85fb      	strh	r3, [r7, #46]	@ 0x2e
  for (j = 0; j < ext_len;) {
 80176fc:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 80176fe:	8bbb      	ldrh	r3, [r7, #28]
 8017700:	429a      	cmp	r2, r3
 8017702:	f4ff af55 	bcc.w	80175b0 <mg_tls_server_recv_hello+0x1a0>
  }
fail:
 8017706:	e00c      	b.n	8017722 <mg_tls_server_recv_hello+0x312>
  if (rio->len < 50) goto fail;
 8017708:	bf00      	nop
 801770a:	e00a      	b.n	8017722 <mg_tls_server_recv_hello+0x312>
  if (((uint32_t) msgsz + 4) > rio->len) goto fail;
 801770c:	bf00      	nop
 801770e:	e008      	b.n	8017722 <mg_tls_server_recv_hello+0x312>
    goto fail;
 8017710:	bf00      	nop
 8017712:	e006      	b.n	8017722 <mg_tls_server_recv_hello+0x312>
  if (((unsigned char *) ext + ext_len) > (rio->buf + rio->len)) goto fail;
 8017714:	bf00      	nop
 8017716:	e004      	b.n	8017722 <mg_tls_server_recv_hello+0x312>
    if (((uint32_t) n + j + 4) > ext_len) goto fail;
 8017718:	bf00      	nop
 801771a:	e002      	b.n	8017722 <mg_tls_server_recv_hello+0x312>
      goto fail;
 801771c:	bf00      	nop
 801771e:	e000      	b.n	8017722 <mg_tls_server_recv_hello+0x312>
      if (((uint32_t) m + k + 4) > key_exchange_len) goto fail;
 8017720:	bf00      	nop
  mg_error(c, "bad client hello");
 8017722:	4905      	ldr	r1, [pc, #20]	@ (8017738 <mg_tls_server_recv_hello+0x328>)
 8017724:	6878      	ldr	r0, [r7, #4]
 8017726:	f7f0 fba5 	bl	8007e74 <mg_error>
  return -1;
 801772a:	f04f 33ff 	mov.w	r3, #4294967295
}
 801772e:	4618      	mov	r0, r3
 8017730:	3730      	adds	r7, #48	@ 0x30
 8017732:	46bd      	mov	sp, r7
 8017734:	bd80      	pop	{r7, pc}
 8017736:	bf00      	nop
 8017738:	08026db0 	.word	0x08026db0

0801773c <mg_tls_server_send_hello>:
#define PLACEHOLDER_8B 'X', 'X', 'X', 'X', 'X', 'X', 'X', 'X'
#define PLACEHOLDER_16B PLACEHOLDER_8B, PLACEHOLDER_8B
#define PLACEHOLDER_32B PLACEHOLDER_16B, PLACEHOLDER_16B

// put ServerHello record into wio buffer
static void mg_tls_server_send_hello(struct mg_connection *c) {
 801773c:	b5b0      	push	{r4, r5, r7, lr}
 801773e:	b0b4      	sub	sp, #208	@ 0xd0
 8017740:	af00      	add	r7, sp, #0
 8017742:	6078      	str	r0, [r7, #4]
  struct tls_data *tls = (struct tls_data *) c->tls;
 8017744:	687b      	ldr	r3, [r7, #4]
 8017746:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 801774a:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
  struct mg_iobuf *wio = &tls->send;
 801774e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8017752:	3304      	adds	r3, #4
 8017754:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

  // clang-format off
  uint8_t msg_server_hello[122] = {
 8017758:	4a4c      	ldr	r2, [pc, #304]	@ (801788c <mg_tls_server_send_hello+0x150>)
 801775a:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 801775e:	4611      	mov	r1, r2
 8017760:	227a      	movs	r2, #122	@ 0x7a
 8017762:	4618      	mov	r0, r3
 8017764:	f00d f80f 	bl	8024786 <memcpy>
  // clang-format on

  // calculate keyshare
  uint8_t x25519_pub[X25519_BYTES];
  uint8_t x25519_prv[X25519_BYTES];
  if (!mg_random(x25519_prv, sizeof(x25519_prv))) mg_error(c, "RNG");
 8017768:	f107 030c 	add.w	r3, r7, #12
 801776c:	2120      	movs	r1, #32
 801776e:	4618      	mov	r0, r3
 8017770:	f7e8 ffc2 	bl	80006f8 <mg_random>
 8017774:	4603      	mov	r3, r0
 8017776:	f083 0301 	eor.w	r3, r3, #1
 801777a:	b2db      	uxtb	r3, r3
 801777c:	2b00      	cmp	r3, #0
 801777e:	d003      	beq.n	8017788 <mg_tls_server_send_hello+0x4c>
 8017780:	4943      	ldr	r1, [pc, #268]	@ (8017890 <mg_tls_server_send_hello+0x154>)
 8017782:	6878      	ldr	r0, [r7, #4]
 8017784:	f7f0 fb76 	bl	8007e74 <mg_error>
  mg_tls_x25519(x25519_pub, x25519_prv, X25519_BASE_POINT, 1);
 8017788:	f107 010c 	add.w	r1, r7, #12
 801778c:	f107 002c 	add.w	r0, r7, #44	@ 0x2c
 8017790:	2301      	movs	r3, #1
 8017792:	4a40      	ldr	r2, [pc, #256]	@ (8017894 <mg_tls_server_send_hello+0x158>)
 8017794:	f009 f9f2 	bl	8020b7c <mg_tls_x25519>
  mg_tls_x25519(tls->x25519_sec, x25519_prv, tls->x25519_cli, 1);
 8017798:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 801779c:	f103 00f0 	add.w	r0, r3, #240	@ 0xf0
 80177a0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80177a4:	f103 02d0 	add.w	r2, r3, #208	@ 0xd0
 80177a8:	f107 010c 	add.w	r1, r7, #12
 80177ac:	2301      	movs	r3, #1
 80177ae:	f009 f9e5 	bl	8020b7c <mg_tls_x25519>
  mg_tls_hexdump("s x25519 sec", tls->x25519_sec, sizeof(tls->x25519_sec));
 80177b2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80177b6:	33f0      	adds	r3, #240	@ 0xf0
 80177b8:	2220      	movs	r2, #32
 80177ba:	4619      	mov	r1, r3
 80177bc:	4836      	ldr	r0, [pc, #216]	@ (8017898 <mg_tls_server_send_hello+0x15c>)
 80177be:	f7fe fe73 	bl	80164a8 <mg_tls_hexdump>

  // fill in the gaps: random + session ID + keyshare
  memmove(msg_server_hello + 6, tls->random, sizeof(tls->random));
 80177c2:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80177c6:	3306      	adds	r3, #6
 80177c8:	f8d7 20cc 	ldr.w	r2, [r7, #204]	@ 0xcc
 80177cc:	3290      	adds	r2, #144	@ 0x90
 80177ce:	6815      	ldr	r5, [r2, #0]
 80177d0:	6854      	ldr	r4, [r2, #4]
 80177d2:	6890      	ldr	r0, [r2, #8]
 80177d4:	68d1      	ldr	r1, [r2, #12]
 80177d6:	601d      	str	r5, [r3, #0]
 80177d8:	605c      	str	r4, [r3, #4]
 80177da:	6098      	str	r0, [r3, #8]
 80177dc:	60d9      	str	r1, [r3, #12]
 80177de:	6915      	ldr	r5, [r2, #16]
 80177e0:	6954      	ldr	r4, [r2, #20]
 80177e2:	6990      	ldr	r0, [r2, #24]
 80177e4:	69d1      	ldr	r1, [r2, #28]
 80177e6:	611d      	str	r5, [r3, #16]
 80177e8:	615c      	str	r4, [r3, #20]
 80177ea:	6198      	str	r0, [r3, #24]
 80177ec:	61d9      	str	r1, [r3, #28]
  memmove(msg_server_hello + 39, tls->session_id, sizeof(tls->session_id));
 80177ee:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80177f2:	3327      	adds	r3, #39	@ 0x27
 80177f4:	f8d7 20cc 	ldr.w	r2, [r7, #204]	@ 0xcc
 80177f8:	32b0      	adds	r2, #176	@ 0xb0
 80177fa:	6815      	ldr	r5, [r2, #0]
 80177fc:	6854      	ldr	r4, [r2, #4]
 80177fe:	6890      	ldr	r0, [r2, #8]
 8017800:	68d1      	ldr	r1, [r2, #12]
 8017802:	601d      	str	r5, [r3, #0]
 8017804:	605c      	str	r4, [r3, #4]
 8017806:	6098      	str	r0, [r3, #8]
 8017808:	60d9      	str	r1, [r3, #12]
 801780a:	6915      	ldr	r5, [r2, #16]
 801780c:	6954      	ldr	r4, [r2, #20]
 801780e:	6990      	ldr	r0, [r2, #24]
 8017810:	69d1      	ldr	r1, [r2, #28]
 8017812:	611d      	str	r5, [r3, #16]
 8017814:	615c      	str	r4, [r3, #20]
 8017816:	6198      	str	r0, [r3, #24]
 8017818:	61d9      	str	r1, [r3, #28]
  memmove(msg_server_hello + 84, x25519_pub, sizeof(x25519_pub));
 801781a:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 801781e:	3354      	adds	r3, #84	@ 0x54
 8017820:	461d      	mov	r5, r3
 8017822:	f107 042c 	add.w	r4, r7, #44	@ 0x2c
 8017826:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8017828:	6028      	str	r0, [r5, #0]
 801782a:	6069      	str	r1, [r5, #4]
 801782c:	60aa      	str	r2, [r5, #8]
 801782e:	60eb      	str	r3, [r5, #12]
 8017830:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8017832:	6128      	str	r0, [r5, #16]
 8017834:	6169      	str	r1, [r5, #20]
 8017836:	61aa      	str	r2, [r5, #24]
 8017838:	61eb      	str	r3, [r5, #28]

  // server hello message
  mg_iobuf_add(wio, wio->len, "\x16\x03\x03\x00\x7a", 5);
 801783a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 801783e:	6899      	ldr	r1, [r3, #8]
 8017840:	2305      	movs	r3, #5
 8017842:	4a16      	ldr	r2, [pc, #88]	@ (801789c <mg_tls_server_send_hello+0x160>)
 8017844:	f8d7 00c8 	ldr.w	r0, [r7, #200]	@ 0xc8
 8017848:	f7f4 fd90 	bl	800c36c <mg_iobuf_add>
  mg_iobuf_add(wio, wio->len, msg_server_hello, sizeof(msg_server_hello));
 801784c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8017850:	6899      	ldr	r1, [r3, #8]
 8017852:	f107 024c 	add.w	r2, r7, #76	@ 0x4c
 8017856:	237a      	movs	r3, #122	@ 0x7a
 8017858:	f8d7 00c8 	ldr.w	r0, [r7, #200]	@ 0xc8
 801785c:	f7f4 fd86 	bl	800c36c <mg_iobuf_add>
  mg_sha256_update(&tls->sha256, msg_server_hello, sizeof(msg_server_hello));
 8017860:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8017864:	3320      	adds	r3, #32
 8017866:	f107 014c 	add.w	r1, r7, #76	@ 0x4c
 801786a:	227a      	movs	r2, #122	@ 0x7a
 801786c:	4618      	mov	r0, r3
 801786e:	f7fc fe19 	bl	80144a4 <mg_sha256_update>

  // change cipher message
  mg_iobuf_add(wio, wio->len, "\x14\x03\x03\x00\x01\x01", 6);
 8017872:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8017876:	6899      	ldr	r1, [r3, #8]
 8017878:	2306      	movs	r3, #6
 801787a:	4a09      	ldr	r2, [pc, #36]	@ (80178a0 <mg_tls_server_send_hello+0x164>)
 801787c:	f8d7 00c8 	ldr.w	r0, [r7, #200]	@ 0xc8
 8017880:	f7f4 fd74 	bl	800c36c <mg_iobuf_add>
}
 8017884:	bf00      	nop
 8017886:	37d0      	adds	r7, #208	@ 0xd0
 8017888:	46bd      	mov	sp, r7
 801788a:	bdb0      	pop	{r4, r5, r7, pc}
 801788c:	08026de8 	.word	0x08026de8
 8017890:	08026dc4 	.word	0x08026dc4
 8017894:	08028798 	.word	0x08028798
 8017898:	08026dc8 	.word	0x08026dc8
 801789c:	08026dd8 	.word	0x08026dd8
 80178a0:	08026de0 	.word	0x08026de0

080178a4 <mg_tls_server_send_ext>:

static void mg_tls_server_send_ext(struct mg_connection *c) {
 80178a4:	b580      	push	{r7, lr}
 80178a6:	b086      	sub	sp, #24
 80178a8:	af00      	add	r7, sp, #0
 80178aa:	6078      	str	r0, [r7, #4]
  struct tls_data *tls = (struct tls_data *) c->tls;
 80178ac:	687b      	ldr	r3, [r7, #4]
 80178ae:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80178b2:	617b      	str	r3, [r7, #20]
  // server extensions
  uint8_t ext[6] = {0x08, 0, 0, 2, 0, 0};
 80178b4:	4b0b      	ldr	r3, [pc, #44]	@ (80178e4 <mg_tls_server_send_ext+0x40>)
 80178b6:	60fb      	str	r3, [r7, #12]
 80178b8:	2300      	movs	r3, #0
 80178ba:	823b      	strh	r3, [r7, #16]
  mg_sha256_update(&tls->sha256, ext, sizeof(ext));
 80178bc:	697b      	ldr	r3, [r7, #20]
 80178be:	3320      	adds	r3, #32
 80178c0:	f107 010c 	add.w	r1, r7, #12
 80178c4:	2206      	movs	r2, #6
 80178c6:	4618      	mov	r0, r3
 80178c8:	f7fc fdec 	bl	80144a4 <mg_sha256_update>
  mg_tls_encrypt(c, ext, sizeof(ext), MG_TLS_HANDSHAKE);
 80178cc:	f107 010c 	add.w	r1, r7, #12
 80178d0:	2316      	movs	r3, #22
 80178d2:	2206      	movs	r2, #6
 80178d4:	6878      	ldr	r0, [r7, #4]
 80178d6:	f7ff fad9 	bl	8016e8c <mg_tls_encrypt>
}
 80178da:	bf00      	nop
 80178dc:	3718      	adds	r7, #24
 80178de:	46bd      	mov	sp, r7
 80178e0:	bd80      	pop	{r7, pc}
 80178e2:	bf00      	nop
 80178e4:	02000008 	.word	0x02000008

080178e8 <mg_tls_server_send_cert_request>:
// rsa_pkcs1_sha256, rsa_pss_rsae_sha256 and ecdsa_secp256r1_sha256
static const uint8_t secp256r1_sig_algs[12] = {
    0x00, 0x0d, 0x00, 0x08, 0x00, 0x06, 0x04, 0x03, 0x08, 0x04, 0x04, 0x01,
};

static void mg_tls_server_send_cert_request(struct mg_connection *c) {
 80178e8:	b590      	push	{r4, r7, lr}
 80178ea:	b087      	sub	sp, #28
 80178ec:	af00      	add	r7, sp, #0
 80178ee:	6078      	str	r0, [r7, #4]
  struct tls_data *tls = (struct tls_data *) c->tls;
 80178f0:	687b      	ldr	r3, [r7, #4]
 80178f2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80178f6:	617b      	str	r3, [r7, #20]
  size_t n = sizeof(secp256r1_sig_algs) + 6;
 80178f8:	2312      	movs	r3, #18
 80178fa:	613b      	str	r3, [r7, #16]
  uint8_t *req = (uint8_t *) mg_calloc(1, 13 + n);
 80178fc:	693b      	ldr	r3, [r7, #16]
 80178fe:	330d      	adds	r3, #13
 8017900:	4619      	mov	r1, r3
 8017902:	2001      	movs	r0, #1
 8017904:	f7ef fa85 	bl	8006e12 <mg_calloc>
 8017908:	60f8      	str	r0, [r7, #12]
  if (req == NULL) {
 801790a:	68fb      	ldr	r3, [r7, #12]
 801790c:	2b00      	cmp	r3, #0
 801790e:	d104      	bne.n	801791a <mg_tls_server_send_cert_request+0x32>
    mg_error(c, "tls cert req oom");
 8017910:	4931      	ldr	r1, [pc, #196]	@ (80179d8 <mg_tls_server_send_cert_request+0xf0>)
 8017912:	6878      	ldr	r0, [r7, #4]
 8017914:	f7f0 faae 	bl	8007e74 <mg_error>
    return;
 8017918:	e05b      	b.n	80179d2 <mg_tls_server_send_cert_request+0xea>
  }
  req[0] = MG_TLS_CERTIFICATE_REQUEST;  // handshake header
 801791a:	68fb      	ldr	r3, [r7, #12]
 801791c:	220d      	movs	r2, #13
 801791e:	701a      	strb	r2, [r3, #0]
  MG_STORE_BE24(req + 1, n + 9);
 8017920:	693b      	ldr	r3, [r7, #16]
 8017922:	3309      	adds	r3, #9
 8017924:	0c1a      	lsrs	r2, r3, #16
 8017926:	68fb      	ldr	r3, [r7, #12]
 8017928:	3301      	adds	r3, #1
 801792a:	b2d2      	uxtb	r2, r2
 801792c:	701a      	strb	r2, [r3, #0]
 801792e:	693b      	ldr	r3, [r7, #16]
 8017930:	3309      	adds	r3, #9
 8017932:	0a1a      	lsrs	r2, r3, #8
 8017934:	68fb      	ldr	r3, [r7, #12]
 8017936:	3302      	adds	r3, #2
 8017938:	b2d2      	uxtb	r2, r2
 801793a:	701a      	strb	r2, [r3, #0]
 801793c:	693b      	ldr	r3, [r7, #16]
 801793e:	b2da      	uxtb	r2, r3
 8017940:	68fb      	ldr	r3, [r7, #12]
 8017942:	3303      	adds	r3, #3
 8017944:	3209      	adds	r2, #9
 8017946:	b2d2      	uxtb	r2, r2
 8017948:	701a      	strb	r2, [r3, #0]
  req[4] = 0;                  // context length
 801794a:	68fb      	ldr	r3, [r7, #12]
 801794c:	3304      	adds	r3, #4
 801794e:	2200      	movs	r2, #0
 8017950:	701a      	strb	r2, [r3, #0]
  MG_STORE_BE16(req + 5, n);   // extensions length
 8017952:	693b      	ldr	r3, [r7, #16]
 8017954:	0a1a      	lsrs	r2, r3, #8
 8017956:	68fb      	ldr	r3, [r7, #12]
 8017958:	3305      	adds	r3, #5
 801795a:	b2d2      	uxtb	r2, r2
 801795c:	701a      	strb	r2, [r3, #0]
 801795e:	68fb      	ldr	r3, [r7, #12]
 8017960:	3306      	adds	r3, #6
 8017962:	693a      	ldr	r2, [r7, #16]
 8017964:	b2d2      	uxtb	r2, r2
 8017966:	701a      	strb	r2, [r3, #0]
  MG_STORE_BE16(req + 7, 13);  // "signature algorithms"
 8017968:	68fb      	ldr	r3, [r7, #12]
 801796a:	3307      	adds	r3, #7
 801796c:	2200      	movs	r2, #0
 801796e:	701a      	strb	r2, [r3, #0]
 8017970:	68fb      	ldr	r3, [r7, #12]
 8017972:	3308      	adds	r3, #8
 8017974:	220d      	movs	r2, #13
 8017976:	701a      	strb	r2, [r3, #0]
  MG_STORE_BE16(req + 9, sizeof(secp256r1_sig_algs) + 2);  // length
 8017978:	68fb      	ldr	r3, [r7, #12]
 801797a:	3309      	adds	r3, #9
 801797c:	2200      	movs	r2, #0
 801797e:	701a      	strb	r2, [r3, #0]
 8017980:	68fb      	ldr	r3, [r7, #12]
 8017982:	330a      	adds	r3, #10
 8017984:	220e      	movs	r2, #14
 8017986:	701a      	strb	r2, [r3, #0]
  MG_STORE_BE16(
 8017988:	68fb      	ldr	r3, [r7, #12]
 801798a:	330b      	adds	r3, #11
 801798c:	2200      	movs	r2, #0
 801798e:	701a      	strb	r2, [r3, #0]
 8017990:	68fb      	ldr	r3, [r7, #12]
 8017992:	330c      	adds	r3, #12
 8017994:	220c      	movs	r2, #12
 8017996:	701a      	strb	r2, [r3, #0]
      req + 11,
      sizeof(secp256r1_sig_algs));  // signature hash algorithms length
  memcpy(req + 13, (uint8_t *) secp256r1_sig_algs, sizeof(secp256r1_sig_algs));
 8017998:	68fb      	ldr	r3, [r7, #12]
 801799a:	330d      	adds	r3, #13
 801799c:	4a0f      	ldr	r2, [pc, #60]	@ (80179dc <mg_tls_server_send_cert_request+0xf4>)
 801799e:	461c      	mov	r4, r3
 80179a0:	4613      	mov	r3, r2
 80179a2:	cb07      	ldmia	r3!, {r0, r1, r2}
 80179a4:	6020      	str	r0, [r4, #0]
 80179a6:	6061      	str	r1, [r4, #4]
 80179a8:	60a2      	str	r2, [r4, #8]
  mg_sha256_update(&tls->sha256, req, 13 + n);
 80179aa:	697b      	ldr	r3, [r7, #20]
 80179ac:	f103 0020 	add.w	r0, r3, #32
 80179b0:	693b      	ldr	r3, [r7, #16]
 80179b2:	330d      	adds	r3, #13
 80179b4:	461a      	mov	r2, r3
 80179b6:	68f9      	ldr	r1, [r7, #12]
 80179b8:	f7fc fd74 	bl	80144a4 <mg_sha256_update>
  mg_tls_encrypt(c, req, 13 + n, MG_TLS_HANDSHAKE);
 80179bc:	693b      	ldr	r3, [r7, #16]
 80179be:	f103 020d 	add.w	r2, r3, #13
 80179c2:	2316      	movs	r3, #22
 80179c4:	68f9      	ldr	r1, [r7, #12]
 80179c6:	6878      	ldr	r0, [r7, #4]
 80179c8:	f7ff fa60 	bl	8016e8c <mg_tls_encrypt>
  mg_free(req);
 80179cc:	68f8      	ldr	r0, [r7, #12]
 80179ce:	f7ef fa15 	bl	8006dfc <mg_free>
}
 80179d2:	371c      	adds	r7, #28
 80179d4:	46bd      	mov	sp, r7
 80179d6:	bd90      	pop	{r4, r7, pc}
 80179d8:	08026e64 	.word	0x08026e64
 80179dc:	080286d8 	.word	0x080286d8

080179e0 <mg_tls_send_cert>:

static void mg_tls_send_cert(struct mg_connection *c, bool is_client) {
 80179e0:	b580      	push	{r7, lr}
 80179e2:	b088      	sub	sp, #32
 80179e4:	af00      	add	r7, sp, #0
 80179e6:	6078      	str	r0, [r7, #4]
 80179e8:	460b      	mov	r3, r1
 80179ea:	70fb      	strb	r3, [r7, #3]
  struct tls_data *tls = (struct tls_data *) c->tls;
 80179ec:	687b      	ldr	r3, [r7, #4]
 80179ee:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80179f2:	61fb      	str	r3, [r7, #28]
  int send_ca = !is_client && tls->ca_der.len > 0;
 80179f4:	78fb      	ldrb	r3, [r7, #3]
 80179f6:	f083 0301 	eor.w	r3, r3, #1
 80179fa:	b2db      	uxtb	r3, r3
 80179fc:	2b00      	cmp	r3, #0
 80179fe:	d006      	beq.n	8017a0e <mg_tls_send_cert+0x2e>
 8017a00:	69fb      	ldr	r3, [r7, #28]
 8017a02:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 8017a06:	2b00      	cmp	r3, #0
 8017a08:	d001      	beq.n	8017a0e <mg_tls_send_cert+0x2e>
 8017a0a:	2301      	movs	r3, #1
 8017a0c:	e000      	b.n	8017a10 <mg_tls_send_cert+0x30>
 8017a0e:	2300      	movs	r3, #0
 8017a10:	61bb      	str	r3, [r7, #24]
  // DER certificate + CA (server optional)
  size_t n = tls->cert_der.len + (send_ca ? tls->ca_der.len + 5 : 0);
 8017a12:	69fb      	ldr	r3, [r7, #28]
 8017a14:	f8d3 2118 	ldr.w	r2, [r3, #280]	@ 0x118
 8017a18:	69bb      	ldr	r3, [r7, #24]
 8017a1a:	2b00      	cmp	r3, #0
 8017a1c:	d004      	beq.n	8017a28 <mg_tls_send_cert+0x48>
 8017a1e:	69fb      	ldr	r3, [r7, #28]
 8017a20:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 8017a24:	3305      	adds	r3, #5
 8017a26:	e000      	b.n	8017a2a <mg_tls_send_cert+0x4a>
 8017a28:	2300      	movs	r3, #0
 8017a2a:	4413      	add	r3, r2
 8017a2c:	617b      	str	r3, [r7, #20]
  uint8_t *cert = (uint8_t *) mg_calloc(1, 13 + n);
 8017a2e:	697b      	ldr	r3, [r7, #20]
 8017a30:	330d      	adds	r3, #13
 8017a32:	4619      	mov	r1, r3
 8017a34:	2001      	movs	r0, #1
 8017a36:	f7ef f9ec 	bl	8006e12 <mg_calloc>
 8017a3a:	6138      	str	r0, [r7, #16]
  if (cert == NULL) {
 8017a3c:	693b      	ldr	r3, [r7, #16]
 8017a3e:	2b00      	cmp	r3, #0
 8017a40:	d104      	bne.n	8017a4c <mg_tls_send_cert+0x6c>
    mg_error(c, "tls cert oom");
 8017a42:	495e      	ldr	r1, [pc, #376]	@ (8017bbc <mg_tls_send_cert+0x1dc>)
 8017a44:	6878      	ldr	r0, [r7, #4]
 8017a46:	f7f0 fa15 	bl	8007e74 <mg_error>
    return;
 8017a4a:	e0b4      	b.n	8017bb6 <mg_tls_send_cert+0x1d6>
  }
  cert[0] = MG_TLS_CERTIFICATE;  // handshake header
 8017a4c:	693b      	ldr	r3, [r7, #16]
 8017a4e:	220b      	movs	r2, #11
 8017a50:	701a      	strb	r2, [r3, #0]
  MG_STORE_BE24(cert + 1, n + 9);
 8017a52:	697b      	ldr	r3, [r7, #20]
 8017a54:	3309      	adds	r3, #9
 8017a56:	0c1a      	lsrs	r2, r3, #16
 8017a58:	693b      	ldr	r3, [r7, #16]
 8017a5a:	3301      	adds	r3, #1
 8017a5c:	b2d2      	uxtb	r2, r2
 8017a5e:	701a      	strb	r2, [r3, #0]
 8017a60:	697b      	ldr	r3, [r7, #20]
 8017a62:	3309      	adds	r3, #9
 8017a64:	0a1a      	lsrs	r2, r3, #8
 8017a66:	693b      	ldr	r3, [r7, #16]
 8017a68:	3302      	adds	r3, #2
 8017a6a:	b2d2      	uxtb	r2, r2
 8017a6c:	701a      	strb	r2, [r3, #0]
 8017a6e:	697b      	ldr	r3, [r7, #20]
 8017a70:	b2da      	uxtb	r2, r3
 8017a72:	693b      	ldr	r3, [r7, #16]
 8017a74:	3303      	adds	r3, #3
 8017a76:	3209      	adds	r2, #9
 8017a78:	b2d2      	uxtb	r2, r2
 8017a7a:	701a      	strb	r2, [r3, #0]
  cert[4] = 0;                                 // request context
 8017a7c:	693b      	ldr	r3, [r7, #16]
 8017a7e:	3304      	adds	r3, #4
 8017a80:	2200      	movs	r2, #0
 8017a82:	701a      	strb	r2, [r3, #0]
  MG_STORE_BE24(cert + 5, n + 5);              // 3 bytes: cert (s) length
 8017a84:	697b      	ldr	r3, [r7, #20]
 8017a86:	3305      	adds	r3, #5
 8017a88:	0c1a      	lsrs	r2, r3, #16
 8017a8a:	693b      	ldr	r3, [r7, #16]
 8017a8c:	3305      	adds	r3, #5
 8017a8e:	b2d2      	uxtb	r2, r2
 8017a90:	701a      	strb	r2, [r3, #0]
 8017a92:	697b      	ldr	r3, [r7, #20]
 8017a94:	3305      	adds	r3, #5
 8017a96:	0a1a      	lsrs	r2, r3, #8
 8017a98:	693b      	ldr	r3, [r7, #16]
 8017a9a:	3306      	adds	r3, #6
 8017a9c:	b2d2      	uxtb	r2, r2
 8017a9e:	701a      	strb	r2, [r3, #0]
 8017aa0:	697b      	ldr	r3, [r7, #20]
 8017aa2:	b2da      	uxtb	r2, r3
 8017aa4:	693b      	ldr	r3, [r7, #16]
 8017aa6:	3307      	adds	r3, #7
 8017aa8:	3205      	adds	r2, #5
 8017aaa:	b2d2      	uxtb	r2, r2
 8017aac:	701a      	strb	r2, [r3, #0]
  MG_STORE_BE24(cert + 8, tls->cert_der.len);  // 3 bytes: first cert len
 8017aae:	69fb      	ldr	r3, [r7, #28]
 8017ab0:	f8d3 3118 	ldr.w	r3, [r3, #280]	@ 0x118
 8017ab4:	0c1a      	lsrs	r2, r3, #16
 8017ab6:	693b      	ldr	r3, [r7, #16]
 8017ab8:	3308      	adds	r3, #8
 8017aba:	b2d2      	uxtb	r2, r2
 8017abc:	701a      	strb	r2, [r3, #0]
 8017abe:	69fb      	ldr	r3, [r7, #28]
 8017ac0:	f8d3 3118 	ldr.w	r3, [r3, #280]	@ 0x118
 8017ac4:	0a1a      	lsrs	r2, r3, #8
 8017ac6:	693b      	ldr	r3, [r7, #16]
 8017ac8:	3309      	adds	r3, #9
 8017aca:	b2d2      	uxtb	r2, r2
 8017acc:	701a      	strb	r2, [r3, #0]
 8017ace:	69fb      	ldr	r3, [r7, #28]
 8017ad0:	f8d3 2118 	ldr.w	r2, [r3, #280]	@ 0x118
 8017ad4:	693b      	ldr	r3, [r7, #16]
 8017ad6:	330a      	adds	r3, #10
 8017ad8:	b2d2      	uxtb	r2, r2
 8017ada:	701a      	strb	r2, [r3, #0]
  // bytes 11+ are certificate in DER format
  memmove(cert + 11, tls->cert_der.buf, tls->cert_der.len);
 8017adc:	693b      	ldr	r3, [r7, #16]
 8017ade:	f103 000b 	add.w	r0, r3, #11
 8017ae2:	69fb      	ldr	r3, [r7, #28]
 8017ae4:	f8d3 1114 	ldr.w	r1, [r3, #276]	@ 0x114
 8017ae8:	69fb      	ldr	r3, [r7, #28]
 8017aea:	f8d3 3118 	ldr.w	r3, [r3, #280]	@ 0x118
 8017aee:	461a      	mov	r2, r3
 8017af0:	f00c fcb2 	bl	8024458 <memmove>
  MG_STORE_BE16(cert + 11 + tls->cert_der.len,
 8017af4:	69fb      	ldr	r3, [r7, #28]
 8017af6:	f8d3 3118 	ldr.w	r3, [r3, #280]	@ 0x118
 8017afa:	330b      	adds	r3, #11
 8017afc:	693a      	ldr	r2, [r7, #16]
 8017afe:	4413      	add	r3, r2
 8017b00:	2200      	movs	r2, #0
 8017b02:	701a      	strb	r2, [r3, #0]
 8017b04:	69fb      	ldr	r3, [r7, #28]
 8017b06:	f8d3 3118 	ldr.w	r3, [r3, #280]	@ 0x118
 8017b0a:	330c      	adds	r3, #12
 8017b0c:	693a      	ldr	r2, [r7, #16]
 8017b0e:	4413      	add	r3, r2
 8017b10:	2200      	movs	r2, #0
 8017b12:	701a      	strb	r2, [r3, #0]
                0);  // certificate extensions (none)
  if (send_ca) {
 8017b14:	69bb      	ldr	r3, [r7, #24]
 8017b16:	2b00      	cmp	r3, #0
 8017b18:	d039      	beq.n	8017b8e <mg_tls_send_cert+0x1ae>
    size_t offset = 13 + tls->cert_der.len;
 8017b1a:	69fb      	ldr	r3, [r7, #28]
 8017b1c:	f8d3 3118 	ldr.w	r3, [r3, #280]	@ 0x118
 8017b20:	330d      	adds	r3, #13
 8017b22:	60fb      	str	r3, [r7, #12]
    MG_STORE_BE24(cert + offset, tls->ca_der.len);  // 3 bytes: CA cert length
 8017b24:	69fb      	ldr	r3, [r7, #28]
 8017b26:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 8017b2a:	0c19      	lsrs	r1, r3, #16
 8017b2c:	693a      	ldr	r2, [r7, #16]
 8017b2e:	68fb      	ldr	r3, [r7, #12]
 8017b30:	4413      	add	r3, r2
 8017b32:	b2ca      	uxtb	r2, r1
 8017b34:	701a      	strb	r2, [r3, #0]
 8017b36:	69fb      	ldr	r3, [r7, #28]
 8017b38:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 8017b3c:	0a19      	lsrs	r1, r3, #8
 8017b3e:	68fb      	ldr	r3, [r7, #12]
 8017b40:	3301      	adds	r3, #1
 8017b42:	693a      	ldr	r2, [r7, #16]
 8017b44:	4413      	add	r3, r2
 8017b46:	b2ca      	uxtb	r2, r1
 8017b48:	701a      	strb	r2, [r3, #0]
 8017b4a:	69fb      	ldr	r3, [r7, #28]
 8017b4c:	f8d3 1120 	ldr.w	r1, [r3, #288]	@ 0x120
 8017b50:	68fb      	ldr	r3, [r7, #12]
 8017b52:	3302      	adds	r3, #2
 8017b54:	693a      	ldr	r2, [r7, #16]
 8017b56:	4413      	add	r3, r2
 8017b58:	b2ca      	uxtb	r2, r1
 8017b5a:	701a      	strb	r2, [r3, #0]
    memmove(cert + offset + 3, tls->ca_der.buf,
 8017b5c:	68fb      	ldr	r3, [r7, #12]
 8017b5e:	3303      	adds	r3, #3
 8017b60:	693a      	ldr	r2, [r7, #16]
 8017b62:	18d0      	adds	r0, r2, r3
 8017b64:	69fb      	ldr	r3, [r7, #28]
 8017b66:	f8d3 111c 	ldr.w	r1, [r3, #284]	@ 0x11c
 8017b6a:	69fb      	ldr	r3, [r7, #28]
 8017b6c:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 8017b70:	461a      	mov	r2, r3
 8017b72:	f00c fc71 	bl	8024458 <memmove>
            tls->ca_der.len);         // CA cert data
    MG_STORE_BE16(cert + 11 + n, 0);  // certificate extensions (none)
 8017b76:	697b      	ldr	r3, [r7, #20]
 8017b78:	330b      	adds	r3, #11
 8017b7a:	693a      	ldr	r2, [r7, #16]
 8017b7c:	4413      	add	r3, r2
 8017b7e:	2200      	movs	r2, #0
 8017b80:	701a      	strb	r2, [r3, #0]
 8017b82:	697b      	ldr	r3, [r7, #20]
 8017b84:	330c      	adds	r3, #12
 8017b86:	693a      	ldr	r2, [r7, #16]
 8017b88:	4413      	add	r3, r2
 8017b8a:	2200      	movs	r2, #0
 8017b8c:	701a      	strb	r2, [r3, #0]
  }
  mg_sha256_update(&tls->sha256, cert, 13 + n);
 8017b8e:	69fb      	ldr	r3, [r7, #28]
 8017b90:	f103 0020 	add.w	r0, r3, #32
 8017b94:	697b      	ldr	r3, [r7, #20]
 8017b96:	330d      	adds	r3, #13
 8017b98:	461a      	mov	r2, r3
 8017b9a:	6939      	ldr	r1, [r7, #16]
 8017b9c:	f7fc fc82 	bl	80144a4 <mg_sha256_update>
  mg_tls_encrypt(c, cert, 13 + n, MG_TLS_HANDSHAKE);
 8017ba0:	697b      	ldr	r3, [r7, #20]
 8017ba2:	f103 020d 	add.w	r2, r3, #13
 8017ba6:	2316      	movs	r3, #22
 8017ba8:	6939      	ldr	r1, [r7, #16]
 8017baa:	6878      	ldr	r0, [r7, #4]
 8017bac:	f7ff f96e 	bl	8016e8c <mg_tls_encrypt>
  mg_free(cert);
 8017bb0:	6938      	ldr	r0, [r7, #16]
 8017bb2:	f7ef f923 	bl	8006dfc <mg_free>
}
 8017bb6:	3720      	adds	r7, #32
 8017bb8:	46bd      	mov	sp, r7
 8017bba:	bd80      	pop	{r7, pc}
 8017bbc:	08026e78 	.word	0x08026e78

08017bc0 <init_SHA256>:
typedef struct SHA256_HashContext {
  MG_UECC_HashContext uECC;
  mg_sha256_ctx ctx;
} SHA256_HashContext;

static void init_SHA256(const MG_UECC_HashContext *base) {
 8017bc0:	b580      	push	{r7, lr}
 8017bc2:	b084      	sub	sp, #16
 8017bc4:	af00      	add	r7, sp, #0
 8017bc6:	6078      	str	r0, [r7, #4]
  SHA256_HashContext *c = (SHA256_HashContext *) base;
 8017bc8:	687b      	ldr	r3, [r7, #4]
 8017bca:	60fb      	str	r3, [r7, #12]
  mg_sha256_init(&c->ctx);
 8017bcc:	68fb      	ldr	r3, [r7, #12]
 8017bce:	3318      	adds	r3, #24
 8017bd0:	4618      	mov	r0, r3
 8017bd2:	f7fc fa23 	bl	801401c <mg_sha256_init>
}
 8017bd6:	bf00      	nop
 8017bd8:	3710      	adds	r7, #16
 8017bda:	46bd      	mov	sp, r7
 8017bdc:	bd80      	pop	{r7, pc}

08017bde <update_SHA256>:

static void update_SHA256(const MG_UECC_HashContext *base,
                          const uint8_t *message, unsigned message_size) {
 8017bde:	b580      	push	{r7, lr}
 8017be0:	b086      	sub	sp, #24
 8017be2:	af00      	add	r7, sp, #0
 8017be4:	60f8      	str	r0, [r7, #12]
 8017be6:	60b9      	str	r1, [r7, #8]
 8017be8:	607a      	str	r2, [r7, #4]
  SHA256_HashContext *c = (SHA256_HashContext *) base;
 8017bea:	68fb      	ldr	r3, [r7, #12]
 8017bec:	617b      	str	r3, [r7, #20]
  mg_sha256_update(&c->ctx, message, message_size);
 8017bee:	697b      	ldr	r3, [r7, #20]
 8017bf0:	3318      	adds	r3, #24
 8017bf2:	687a      	ldr	r2, [r7, #4]
 8017bf4:	68b9      	ldr	r1, [r7, #8]
 8017bf6:	4618      	mov	r0, r3
 8017bf8:	f7fc fc54 	bl	80144a4 <mg_sha256_update>
}
 8017bfc:	bf00      	nop
 8017bfe:	3718      	adds	r7, #24
 8017c00:	46bd      	mov	sp, r7
 8017c02:	bd80      	pop	{r7, pc}

08017c04 <finish_SHA256>:
static void finish_SHA256(const MG_UECC_HashContext *base,
                          uint8_t *hash_result) {
 8017c04:	b580      	push	{r7, lr}
 8017c06:	b084      	sub	sp, #16
 8017c08:	af00      	add	r7, sp, #0
 8017c0a:	6078      	str	r0, [r7, #4]
 8017c0c:	6039      	str	r1, [r7, #0]
  SHA256_HashContext *c = (SHA256_HashContext *) base;
 8017c0e:	687b      	ldr	r3, [r7, #4]
 8017c10:	60fb      	str	r3, [r7, #12]
  mg_sha256_final(hash_result, &c->ctx);
 8017c12:	68fb      	ldr	r3, [r7, #12]
 8017c14:	3318      	adds	r3, #24
 8017c16:	4619      	mov	r1, r3
 8017c18:	6838      	ldr	r0, [r7, #0]
 8017c1a:	f7fc fc7c 	bl	8014516 <mg_sha256_final>
}
 8017c1e:	bf00      	nop
 8017c20:	3710      	adds	r7, #16
 8017c22:	46bd      	mov	sp, r7
 8017c24:	bd80      	pop	{r7, pc}
	...

08017c28 <mg_tls_send_cert_verify>:

static void mg_tls_send_cert_verify(struct mg_connection *c, bool is_client) {
 8017c28:	b590      	push	{r4, r7, lr}
 8017c2a:	b0f9      	sub	sp, #484	@ 0x1e4
 8017c2c:	af02      	add	r7, sp, #8
 8017c2e:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8017c32:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8017c36:	6018      	str	r0, [r3, #0]
 8017c38:	460a      	mov	r2, r1
 8017c3a:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8017c3e:	f2a3 13d5 	subw	r3, r3, #469	@ 0x1d5
 8017c42:	701a      	strb	r2, [r3, #0]
  struct tls_data *tls = (struct tls_data *) c->tls;
 8017c44:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8017c48:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8017c4c:	681b      	ldr	r3, [r3, #0]
 8017c4e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8017c52:	f8c7 31d4 	str.w	r3, [r7, #468]	@ 0x1d4
  // server certificate verify packet
  uint8_t verify[82] = {0x0f, 0x00, 0x00, 0x00, 0x04, 0x03, 0x00, 0x00};
 8017c56:	4a8a      	ldr	r2, [pc, #552]	@ (8017e80 <mg_tls_send_cert_verify+0x258>)
 8017c58:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 8017c5c:	6810      	ldr	r0, [r2, #0]
 8017c5e:	6851      	ldr	r1, [r2, #4]
 8017c60:	c303      	stmia	r3!, {r0, r1}
 8017c62:	7a12      	ldrb	r2, [r2, #8]
 8017c64:	701a      	strb	r2, [r3, #0]
 8017c66:	f207 1379 	addw	r3, r7, #377	@ 0x179
 8017c6a:	2249      	movs	r2, #73	@ 0x49
 8017c6c:	2100      	movs	r1, #0
 8017c6e:	4618      	mov	r0, r3
 8017c70:	f00c fc0c 	bl	802448c <memset>
  size_t sigsz, verifysz = 0;
 8017c74:	2300      	movs	r3, #0
 8017c76:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
  uint8_t hash[32] = {0}, tmp[2 * 32 + 64] = {0};
 8017c7a:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8017c7e:	2220      	movs	r2, #32
 8017c80:	2100      	movs	r1, #0
 8017c82:	4618      	mov	r0, r3
 8017c84:	f00c fc02 	bl	802448c <memset>
 8017c88:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8017c8c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8017c90:	4618      	mov	r0, r3
 8017c92:	2380      	movs	r3, #128	@ 0x80
 8017c94:	461a      	mov	r2, r3
 8017c96:	2100      	movs	r1, #0
 8017c98:	f00c fbf8 	bl	802448c <memset>
  struct SHA256_HashContext ctx = {
 8017c9c:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8017ca0:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8017ca4:	4618      	mov	r0, r3
 8017ca6:	2388      	movs	r3, #136	@ 0x88
 8017ca8:	461a      	mov	r2, r3
 8017caa:	2100      	movs	r1, #0
 8017cac:	f00c fbee 	bl	802448c <memset>
 8017cb0:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8017cb4:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8017cb8:	4a72      	ldr	r2, [pc, #456]	@ (8017e84 <mg_tls_send_cert_verify+0x25c>)
 8017cba:	601a      	str	r2, [r3, #0]
 8017cbc:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8017cc0:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8017cc4:	4a70      	ldr	r2, [pc, #448]	@ (8017e88 <mg_tls_send_cert_verify+0x260>)
 8017cc6:	605a      	str	r2, [r3, #4]
 8017cc8:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8017ccc:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8017cd0:	4a6e      	ldr	r2, [pc, #440]	@ (8017e8c <mg_tls_send_cert_verify+0x264>)
 8017cd2:	609a      	str	r2, [r3, #8]
 8017cd4:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8017cd8:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8017cdc:	2240      	movs	r2, #64	@ 0x40
 8017cde:	60da      	str	r2, [r3, #12]
 8017ce0:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8017ce4:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8017ce8:	2220      	movs	r2, #32
 8017cea:	611a      	str	r2, [r3, #16]
 8017cec:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8017cf0:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8017cf4:	f107 02d0 	add.w	r2, r7, #208	@ 0xd0
 8017cf8:	615a      	str	r2, [r3, #20]
      {&init_SHA256, &update_SHA256, &finish_SHA256, 64, 32, tmp},
      {{0}, 0, 0, {0}}};
  int neg1, neg2;
  uint8_t sig[64] = {0};
 8017cfa:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8017cfe:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8017d02:	4618      	mov	r0, r3
 8017d04:	2340      	movs	r3, #64	@ 0x40
 8017d06:	461a      	mov	r2, r3
 8017d08:	2100      	movs	r1, #0
 8017d0a:	f00c fbbf 	bl	802448c <memset>

  mg_tls_calc_cert_verify_hash(c, (uint8_t *) hash, is_client);
 8017d0e:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8017d12:	f2a3 13d5 	subw	r3, r3, #469	@ 0x1d5
 8017d16:	781a      	ldrb	r2, [r3, #0]
 8017d18:	f507 71a8 	add.w	r1, r7, #336	@ 0x150
 8017d1c:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8017d20:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8017d24:	6818      	ldr	r0, [r3, #0]
 8017d26:	f7ff fac5 	bl	80172b4 <mg_tls_calc_cert_verify_hash>

  mg_uecc_sign_deterministic(tls->ec_key, hash, sizeof(hash), &ctx.uECC, sig,
 8017d2a:	f8d7 31d4 	ldr.w	r3, [r7, #468]	@ 0x1d4
 8017d2e:	f503 7492 	add.w	r4, r3, #292	@ 0x124
 8017d32:	f006 fecf 	bl	801ead4 <mg_uecc_secp256r1>
 8017d36:	4603      	mov	r3, r0
 8017d38:	f107 0248 	add.w	r2, r7, #72	@ 0x48
 8017d3c:	f507 71a8 	add.w	r1, r7, #336	@ 0x150
 8017d40:	9301      	str	r3, [sp, #4]
 8017d42:	f107 0308 	add.w	r3, r7, #8
 8017d46:	9300      	str	r3, [sp, #0]
 8017d48:	4613      	mov	r3, r2
 8017d4a:	2220      	movs	r2, #32
 8017d4c:	4620      	mov	r0, r4
 8017d4e:	f007 ff31 	bl	801fbb4 <mg_uecc_sign_deterministic>
                             mg_uecc_secp256r1());

  neg1 = !!(sig[0] & 0x80);
 8017d52:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8017d56:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8017d5a:	781b      	ldrb	r3, [r3, #0]
 8017d5c:	b25b      	sxtb	r3, r3
 8017d5e:	b2db      	uxtb	r3, r3
 8017d60:	09db      	lsrs	r3, r3, #7
 8017d62:	b2db      	uxtb	r3, r3
 8017d64:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
  neg2 = !!(sig[32] & 0x80);
 8017d68:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8017d6c:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8017d70:	f893 3020 	ldrb.w	r3, [r3, #32]
 8017d74:	b25b      	sxtb	r3, r3
 8017d76:	b2db      	uxtb	r3, r3
 8017d78:	09db      	lsrs	r3, r3, #7
 8017d7a:	b2db      	uxtb	r3, r3
 8017d7c:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
  verify[8] = 0x30;  // ASN.1 SEQUENCE
 8017d80:	2330      	movs	r3, #48	@ 0x30
 8017d82:	f887 3178 	strb.w	r3, [r7, #376]	@ 0x178
  verify[9] = (uint8_t) (68 + neg1 + neg2);
 8017d86:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 8017d8a:	b2da      	uxtb	r2, r3
 8017d8c:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 8017d90:	b2db      	uxtb	r3, r3
 8017d92:	4413      	add	r3, r2
 8017d94:	b2db      	uxtb	r3, r3
 8017d96:	3344      	adds	r3, #68	@ 0x44
 8017d98:	b2db      	uxtb	r3, r3
 8017d9a:	f887 3179 	strb.w	r3, [r7, #377]	@ 0x179
  verify[10] = 0x02;  // ASN.1 INTEGER
 8017d9e:	2302      	movs	r3, #2
 8017da0:	f887 317a 	strb.w	r3, [r7, #378]	@ 0x17a
  verify[11] = (uint8_t) (32 + neg1);
 8017da4:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 8017da8:	b2db      	uxtb	r3, r3
 8017daa:	3320      	adds	r3, #32
 8017dac:	b2db      	uxtb	r3, r3
 8017dae:	f887 317b 	strb.w	r3, [r7, #379]	@ 0x17b
  memmove(verify + 12 + neg1, sig, 32);
 8017db2:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 8017db6:	330c      	adds	r3, #12
 8017db8:	f507 72b8 	add.w	r2, r7, #368	@ 0x170
 8017dbc:	4413      	add	r3, r2
 8017dbe:	f107 0108 	add.w	r1, r7, #8
 8017dc2:	2220      	movs	r2, #32
 8017dc4:	4618      	mov	r0, r3
 8017dc6:	f00c fb47 	bl	8024458 <memmove>
  verify[12 + 32 + neg1] = 0x02;  // ASN.1 INTEGER
 8017dca:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 8017dce:	332c      	adds	r3, #44	@ 0x2c
 8017dd0:	f503 73ec 	add.w	r3, r3, #472	@ 0x1d8
 8017dd4:	443b      	add	r3, r7
 8017dd6:	2202      	movs	r2, #2
 8017dd8:	f803 2c68 	strb.w	r2, [r3, #-104]
  verify[13 + 32 + neg1] = (uint8_t) (32 + neg2);
 8017ddc:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 8017de0:	b2da      	uxtb	r2, r3
 8017de2:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 8017de6:	332d      	adds	r3, #45	@ 0x2d
 8017de8:	3220      	adds	r2, #32
 8017dea:	b2d2      	uxtb	r2, r2
 8017dec:	f503 73ec 	add.w	r3, r3, #472	@ 0x1d8
 8017df0:	443b      	add	r3, r7
 8017df2:	f803 2c68 	strb.w	r2, [r3, #-104]
  memmove(verify + 14 + 32 + neg1 + neg2, sig + 32, 32);
 8017df6:	f8d7 21cc 	ldr.w	r2, [r7, #460]	@ 0x1cc
 8017dfa:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 8017dfe:	4413      	add	r3, r2
 8017e00:	332e      	adds	r3, #46	@ 0x2e
 8017e02:	f507 72b8 	add.w	r2, r7, #368	@ 0x170
 8017e06:	18d0      	adds	r0, r2, r3
 8017e08:	f107 0308 	add.w	r3, r7, #8
 8017e0c:	3320      	adds	r3, #32
 8017e0e:	2220      	movs	r2, #32
 8017e10:	4619      	mov	r1, r3
 8017e12:	f00c fb21 	bl	8024458 <memmove>

  sigsz = (size_t) (70 + neg1 + neg2);
 8017e16:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 8017e1a:	f103 0246 	add.w	r2, r3, #70	@ 0x46
 8017e1e:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 8017e22:	4413      	add	r3, r2
 8017e24:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
  verifysz = 8U + sigsz;
 8017e28:	f8d7 31c4 	ldr.w	r3, [r7, #452]	@ 0x1c4
 8017e2c:	3308      	adds	r3, #8
 8017e2e:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
  verify[3] = (uint8_t) (sigsz + 4);
 8017e32:	f8d7 31c4 	ldr.w	r3, [r7, #452]	@ 0x1c4
 8017e36:	b2db      	uxtb	r3, r3
 8017e38:	3304      	adds	r3, #4
 8017e3a:	b2db      	uxtb	r3, r3
 8017e3c:	f887 3173 	strb.w	r3, [r7, #371]	@ 0x173
  verify[7] = (uint8_t) sigsz;
 8017e40:	f8d7 31c4 	ldr.w	r3, [r7, #452]	@ 0x1c4
 8017e44:	b2db      	uxtb	r3, r3
 8017e46:	f887 3177 	strb.w	r3, [r7, #375]	@ 0x177

  mg_sha256_update(&tls->sha256, verify, verifysz);
 8017e4a:	f8d7 31d4 	ldr.w	r3, [r7, #468]	@ 0x1d4
 8017e4e:	3320      	adds	r3, #32
 8017e50:	f507 71b8 	add.w	r1, r7, #368	@ 0x170
 8017e54:	f8d7 21d0 	ldr.w	r2, [r7, #464]	@ 0x1d0
 8017e58:	4618      	mov	r0, r3
 8017e5a:	f7fc fb23 	bl	80144a4 <mg_sha256_update>
  mg_tls_encrypt(c, verify, verifysz, MG_TLS_HANDSHAKE);
 8017e5e:	f507 71b8 	add.w	r1, r7, #368	@ 0x170
 8017e62:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8017e66:	f5a3 70ea 	sub.w	r0, r3, #468	@ 0x1d4
 8017e6a:	2316      	movs	r3, #22
 8017e6c:	f8d7 21d0 	ldr.w	r2, [r7, #464]	@ 0x1d0
 8017e70:	6800      	ldr	r0, [r0, #0]
 8017e72:	f7ff f80b 	bl	8016e8c <mg_tls_encrypt>
}
 8017e76:	bf00      	nop
 8017e78:	f507 77ee 	add.w	r7, r7, #476	@ 0x1dc
 8017e7c:	46bd      	mov	sp, r7
 8017e7e:	bd90      	pop	{r4, r7, pc}
 8017e80:	08026e88 	.word	0x08026e88
 8017e84:	08017bc1 	.word	0x08017bc1
 8017e88:	08017bdf 	.word	0x08017bdf
 8017e8c:	08017c05 	.word	0x08017c05

08017e90 <mg_tls_server_send_finish>:

static void mg_tls_server_send_finish(struct mg_connection *c) {
 8017e90:	b580      	push	{r7, lr}
 8017e92:	b0b4      	sub	sp, #208	@ 0xd0
 8017e94:	af02      	add	r7, sp, #8
 8017e96:	6078      	str	r0, [r7, #4]
  struct tls_data *tls = (struct tls_data *) c->tls;
 8017e98:	687b      	ldr	r3, [r7, #4]
 8017e9a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8017e9e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
  mg_sha256_ctx sha256;
  uint8_t hash[32];
  uint8_t finish[36] = {0x14, 0, 0, 32};
 8017ea2:	4b1e      	ldr	r3, [pc, #120]	@ (8017f1c <mg_tls_server_send_finish+0x8c>)
 8017ea4:	60fb      	str	r3, [r7, #12]
 8017ea6:	f107 0310 	add.w	r3, r7, #16
 8017eaa:	2220      	movs	r2, #32
 8017eac:	2100      	movs	r1, #0
 8017eae:	4618      	mov	r0, r3
 8017eb0:	f00c faec 	bl	802448c <memset>
  memmove(&sha256, &tls->sha256, sizeof(mg_sha256_ctx));
 8017eb4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8017eb8:	f103 0120 	add.w	r1, r3, #32
 8017ebc:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8017ec0:	2270      	movs	r2, #112	@ 0x70
 8017ec2:	4618      	mov	r0, r3
 8017ec4:	f00c fac8 	bl	8024458 <memmove>
  mg_sha256_final(hash, &sha256);
 8017ec8:	f107 0250 	add.w	r2, r7, #80	@ 0x50
 8017ecc:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8017ed0:	4611      	mov	r1, r2
 8017ed2:	4618      	mov	r0, r3
 8017ed4:	f7fc fb1f 	bl	8014516 <mg_sha256_final>
  mg_hmac_sha256(finish + 4, tls->enc.server_finished_key, 32, hash, 32);
 8017ed8:	f107 000c 	add.w	r0, r7, #12
 8017edc:	3004      	adds	r0, #4
 8017ede:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8017ee2:	f203 41cc 	addw	r1, r3, #1228	@ 0x4cc
 8017ee6:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8017eea:	2220      	movs	r2, #32
 8017eec:	9200      	str	r2, [sp, #0]
 8017eee:	2220      	movs	r2, #32
 8017ef0:	f7fc fc65 	bl	80147be <mg_hmac_sha256>
  mg_tls_encrypt(c, finish, sizeof(finish), MG_TLS_HANDSHAKE);
 8017ef4:	f107 010c 	add.w	r1, r7, #12
 8017ef8:	2316      	movs	r3, #22
 8017efa:	2224      	movs	r2, #36	@ 0x24
 8017efc:	6878      	ldr	r0, [r7, #4]
 8017efe:	f7fe ffc5 	bl	8016e8c <mg_tls_encrypt>
  mg_sha256_update(&tls->sha256, finish, sizeof(finish));
 8017f02:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8017f06:	3320      	adds	r3, #32
 8017f08:	f107 010c 	add.w	r1, r7, #12
 8017f0c:	2224      	movs	r2, #36	@ 0x24
 8017f0e:	4618      	mov	r0, r3
 8017f10:	f7fc fac8 	bl	80144a4 <mg_sha256_update>
}
 8017f14:	bf00      	nop
 8017f16:	37c8      	adds	r7, #200	@ 0xc8
 8017f18:	46bd      	mov	sp, r7
 8017f1a:	bd80      	pop	{r7, pc}
 8017f1c:	20000014 	.word	0x20000014

08017f20 <mg_tls_server_recv_finish>:

static int mg_tls_server_recv_finish(struct mg_connection *c) {
 8017f20:	b580      	push	{r7, lr}
 8017f22:	b0a0      	sub	sp, #128	@ 0x80
 8017f24:	af00      	add	r7, sp, #0
 8017f26:	6078      	str	r0, [r7, #4]
  struct tls_data *tls = (struct tls_data *) c->tls;
 8017f28:	687b      	ldr	r3, [r7, #4]
 8017f2a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8017f2e:	67fb      	str	r3, [r7, #124]	@ 0x7c
  unsigned char *recv_buf;
  // we have to backup sha256 value to restore it later, since Finished record
  // is exceptional and is not supposed to be added to the rolling hash
  // calculation.
  mg_sha256_ctx sha256 = tls->sha256;
 8017f30:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8017f32:	f107 0008 	add.w	r0, r7, #8
 8017f36:	3320      	adds	r3, #32
 8017f38:	2270      	movs	r2, #112	@ 0x70
 8017f3a:	4619      	mov	r1, r3
 8017f3c:	f00c fc23 	bl	8024786 <memcpy>
  if (mg_tls_recv_record(c) < 0) {
 8017f40:	6878      	ldr	r0, [r7, #4]
 8017f42:	f7ff f89d 	bl	8017080 <mg_tls_recv_record>
 8017f46:	4603      	mov	r3, r0
 8017f48:	2b00      	cmp	r3, #0
 8017f4a:	da02      	bge.n	8017f52 <mg_tls_server_recv_finish+0x32>
    return -1;
 8017f4c:	f04f 33ff 	mov.w	r3, #4294967295
 8017f50:	e01f      	b.n	8017f92 <mg_tls_server_recv_finish+0x72>
  }
  recv_buf = &c->rtls.buf[tls->recv_offset];
 8017f52:	687b      	ldr	r3, [r7, #4]
 8017f54:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8017f56:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8017f58:	695b      	ldr	r3, [r3, #20]
 8017f5a:	4413      	add	r3, r2
 8017f5c:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (recv_buf[0] != MG_TLS_FINISHED) {
 8017f5e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8017f60:	781b      	ldrb	r3, [r3, #0]
 8017f62:	2b14      	cmp	r3, #20
 8017f64:	d009      	beq.n	8017f7a <mg_tls_server_recv_finish+0x5a>
    mg_error(c, "expected Finish but got msg 0x%02x", recv_buf[0]);
 8017f66:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8017f68:	781b      	ldrb	r3, [r3, #0]
 8017f6a:	461a      	mov	r2, r3
 8017f6c:	490b      	ldr	r1, [pc, #44]	@ (8017f9c <mg_tls_server_recv_finish+0x7c>)
 8017f6e:	6878      	ldr	r0, [r7, #4]
 8017f70:	f7ef ff80 	bl	8007e74 <mg_error>
    return -1;
 8017f74:	f04f 33ff 	mov.w	r3, #4294967295
 8017f78:	e00b      	b.n	8017f92 <mg_tls_server_recv_finish+0x72>
  }
  mg_tls_drop_message(c);
 8017f7a:	6878      	ldr	r0, [r7, #4]
 8017f7c:	f7fe fc36 	bl	80167ec <mg_tls_drop_message>

  // restore hash
  tls->sha256 = sha256;
 8017f80:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8017f82:	3320      	adds	r3, #32
 8017f84:	f107 0108 	add.w	r1, r7, #8
 8017f88:	2270      	movs	r2, #112	@ 0x70
 8017f8a:	4618      	mov	r0, r3
 8017f8c:	f00c fbfb 	bl	8024786 <memcpy>
  return 0;
 8017f90:	2300      	movs	r3, #0
}
 8017f92:	4618      	mov	r0, r3
 8017f94:	3780      	adds	r7, #128	@ 0x80
 8017f96:	46bd      	mov	sp, r7
 8017f98:	bd80      	pop	{r7, pc}
 8017f9a:	bf00      	nop
 8017f9c:	08026e94 	.word	0x08026e94

08017fa0 <mg_tls_client_send_hello>:

static void mg_tls_client_send_hello(struct mg_connection *c) {
 8017fa0:	b5b0      	push	{r4, r5, r7, lr}
 8017fa2:	b0c2      	sub	sp, #264	@ 0x108
 8017fa4:	af00      	add	r7, sp, #0
 8017fa6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8017faa:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8017fae:	6018      	str	r0, [r3, #0]
  struct tls_data *tls = (struct tls_data *) c->tls;
 8017fb0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8017fb4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8017fb8:	681b      	ldr	r3, [r3, #0]
 8017fba:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8017fbe:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
  struct mg_iobuf *wio = &tls->send;
 8017fc2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8017fc6:	3304      	adds	r3, #4
 8017fc8:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
  uint8_t x25519_pub[X25519_BYTES];

  // - "signature algorithms we actually support", see above
  //   uint8_t secp256r1_sig_algs[]
  // - all popular signature algorithms (if we don't care about verification)
  uint8_t all_sig_algs[34] = {
 8017fcc:	4b24      	ldr	r3, [pc, #144]	@ (8018060 <mg_tls_client_send_hello+0xc0>)
 8017fce:	f107 04a8 	add.w	r4, r7, #168	@ 0xa8
 8017fd2:	461d      	mov	r5, r3
 8017fd4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8017fd6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8017fd8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8017fda:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8017fdc:	682b      	ldr	r3, [r5, #0]
 8017fde:	8023      	strh	r3, [r4, #0]
      0x00, 0x0d, 0x00, 0x1e, 0x00, 0x1c, 0x04, 0x03, 0x05, 0x03, 0x06, 0x03,
      0x08, 0x07, 0x08, 0x08, 0x08, 0x09, 0x08, 0x0a, 0x08, 0x0b, 0x08, 0x04,
      0x08, 0x05, 0x08, 0x06, 0x04, 0x01, 0x05, 0x01, 0x06, 0x01};
  uint8_t server_name_ext[9] = {0x00, 0x00, 0x00, 0xfe, 0x00,
 8017fe0:	4a20      	ldr	r2, [pc, #128]	@ (8018064 <mg_tls_client_send_hello+0xc4>)
 8017fe2:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8017fe6:	ca07      	ldmia	r2, {r0, r1, r2}
 8017fe8:	c303      	stmia	r3!, {r0, r1}
 8017fea:	701a      	strb	r2, [r3, #0]
                                0xfe, 0x00, 0x00, 0xfe};

  // clang-format off
  uint8_t msg_client_hello[145] = {
 8017fec:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8017ff0:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8017ff4:	4a1c      	ldr	r2, [pc, #112]	@ (8018068 <mg_tls_client_send_hello+0xc8>)
 8017ff6:	4618      	mov	r0, r3
 8017ff8:	4611      	mov	r1, r2
 8017ffa:	2391      	movs	r3, #145	@ 0x91
 8017ffc:	461a      	mov	r2, r3
 8017ffe:	f00c fbc2 	bl	8024786 <memcpy>
      0x00, 0x2b, 0x00, 0x03, 0x02, 0x03, 0x04,
      // session ticket (none)
      0x00, 0x23, 0x00, 0x00, // 144 bytes till here
	};
  // clang-format on
  const char *hostname = tls->hostname;
 8018002:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8018006:	f503 73a2 	add.w	r3, r3, #324	@ 0x144
 801800a:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
  size_t hostnamesz = strlen(tls->hostname);
 801800e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8018012:	f503 73a2 	add.w	r3, r3, #324	@ 0x144
 8018016:	4618      	mov	r0, r3
 8018018:	f7e8 f972 	bl	8000300 <strlen>
 801801c:	f8c7 00f8 	str.w	r0, [r7, #248]	@ 0xf8
  size_t hostname_extsz = hostnamesz ? hostnamesz + 9 : 0;
 8018020:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8018024:	2b00      	cmp	r3, #0
 8018026:	d003      	beq.n	8018030 <mg_tls_client_send_hello+0x90>
 8018028:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 801802c:	3309      	adds	r3, #9
 801802e:	e000      	b.n	8018032 <mg_tls_client_send_hello+0x92>
 8018030:	2300      	movs	r3, #0
 8018032:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
  uint8_t *sig_alg =
      tls->skip_verification ? all_sig_algs : (uint8_t *) secp256r1_sig_algs;
 8018036:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 801803a:	f893 3110 	ldrb.w	r3, [r3, #272]	@ 0x110
 801803e:	2b00      	cmp	r3, #0
 8018040:	d002      	beq.n	8018048 <mg_tls_client_send_hello+0xa8>
 8018042:	f107 03a8 	add.w	r3, r7, #168	@ 0xa8
 8018046:	e000      	b.n	801804a <mg_tls_client_send_hello+0xaa>
 8018048:	4b08      	ldr	r3, [pc, #32]	@ (801806c <mg_tls_client_send_hello+0xcc>)
  uint8_t *sig_alg =
 801804a:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
  size_t sig_alg_sz = tls->skip_verification ? sizeof(all_sig_algs)
 801804e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8018052:	f893 3110 	ldrb.w	r3, [r3, #272]	@ 0x110
                                             : sizeof(secp256r1_sig_algs);
 8018056:	2b00      	cmp	r3, #0
 8018058:	d00a      	beq.n	8018070 <mg_tls_client_send_hello+0xd0>
 801805a:	2322      	movs	r3, #34	@ 0x22
 801805c:	e009      	b.n	8018072 <mg_tls_client_send_hello+0xd2>
 801805e:	bf00      	nop
 8018060:	08026eb8 	.word	0x08026eb8
 8018064:	08026edc 	.word	0x08026edc
 8018068:	08026ee8 	.word	0x08026ee8
 801806c:	080286d8 	.word	0x080286d8
 8018070:	230c      	movs	r3, #12
  size_t sig_alg_sz = tls->skip_verification ? sizeof(all_sig_algs)
 8018072:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec

  // patch ClientHello with correct hostname ext length (if any)
  MG_STORE_BE16(msg_client_hello + 3,
 8018076:	f8d7 20f4 	ldr.w	r2, [r7, #244]	@ 0xf4
 801807a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 801807e:	4413      	add	r3, r2
 8018080:	338c      	adds	r3, #140	@ 0x8c
 8018082:	0a1b      	lsrs	r3, r3, #8
 8018084:	b2da      	uxtb	r2, r3
 8018086:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 801808a:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 801808e:	70da      	strb	r2, [r3, #3]
 8018090:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8018094:	b2da      	uxtb	r2, r3
 8018096:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 801809a:	b2db      	uxtb	r3, r3
 801809c:	4413      	add	r3, r2
 801809e:	b2db      	uxtb	r3, r3
 80180a0:	3b74      	subs	r3, #116	@ 0x74
 80180a2:	b2da      	uxtb	r2, r3
 80180a4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80180a8:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80180ac:	711a      	strb	r2, [r3, #4]
                hostname_extsz + 183 - 9 - 34 + sig_alg_sz);
  MG_STORE_BE16(msg_client_hello + 7,
 80180ae:	f8d7 20f4 	ldr.w	r2, [r7, #244]	@ 0xf4
 80180b2:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 80180b6:	4413      	add	r3, r2
 80180b8:	3388      	adds	r3, #136	@ 0x88
 80180ba:	0a1b      	lsrs	r3, r3, #8
 80180bc:	b2da      	uxtb	r2, r3
 80180be:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80180c2:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80180c6:	71da      	strb	r2, [r3, #7]
 80180c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80180cc:	b2da      	uxtb	r2, r3
 80180ce:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 80180d2:	b2db      	uxtb	r3, r3
 80180d4:	4413      	add	r3, r2
 80180d6:	b2db      	uxtb	r3, r3
 80180d8:	3b78      	subs	r3, #120	@ 0x78
 80180da:	b2da      	uxtb	r2, r3
 80180dc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80180e0:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80180e4:	721a      	strb	r2, [r3, #8]
                hostname_extsz + 179 - 9 - 34 + sig_alg_sz);
  MG_STORE_BE16(msg_client_hello + 82,
 80180e6:	f8d7 20f4 	ldr.w	r2, [r7, #244]	@ 0xf4
 80180ea:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 80180ee:	4413      	add	r3, r2
 80180f0:	333d      	adds	r3, #61	@ 0x3d
 80180f2:	0a1b      	lsrs	r3, r3, #8
 80180f4:	b2da      	uxtb	r2, r3
 80180f6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80180fa:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80180fe:	f883 2052 	strb.w	r2, [r3, #82]	@ 0x52
 8018102:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8018106:	b2da      	uxtb	r2, r3
 8018108:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 801810c:	b2db      	uxtb	r3, r3
 801810e:	4413      	add	r3, r2
 8018110:	b2db      	uxtb	r3, r3
 8018112:	333d      	adds	r3, #61	@ 0x3d
 8018114:	b2da      	uxtb	r2, r3
 8018116:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 801811a:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 801811e:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
                hostname_extsz + 104 - 9 - 34 + sig_alg_sz);

  if (hostnamesz > 0) {
 8018122:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8018126:	2b00      	cmp	r3, #0
 8018128:	d026      	beq.n	8018178 <mg_tls_client_send_hello+0x1d8>
    MG_STORE_BE16(server_name_ext + 2, hostnamesz + 5);
 801812a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 801812e:	3305      	adds	r3, #5
 8018130:	0a1b      	lsrs	r3, r3, #8
 8018132:	b2db      	uxtb	r3, r3
 8018134:	f887 309e 	strb.w	r3, [r7, #158]	@ 0x9e
 8018138:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 801813c:	b2db      	uxtb	r3, r3
 801813e:	3305      	adds	r3, #5
 8018140:	b2db      	uxtb	r3, r3
 8018142:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f
    MG_STORE_BE16(server_name_ext + 4, hostnamesz + 3);
 8018146:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 801814a:	3303      	adds	r3, #3
 801814c:	0a1b      	lsrs	r3, r3, #8
 801814e:	b2db      	uxtb	r3, r3
 8018150:	f887 30a0 	strb.w	r3, [r7, #160]	@ 0xa0
 8018154:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8018158:	b2db      	uxtb	r3, r3
 801815a:	3303      	adds	r3, #3
 801815c:	b2db      	uxtb	r3, r3
 801815e:	f887 30a1 	strb.w	r3, [r7, #161]	@ 0xa1
    MG_STORE_BE16(server_name_ext + 7, hostnamesz);
 8018162:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8018166:	0a1b      	lsrs	r3, r3, #8
 8018168:	b2db      	uxtb	r3, r3
 801816a:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
 801816e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8018172:	b2db      	uxtb	r3, r3
 8018174:	f887 30a4 	strb.w	r3, [r7, #164]	@ 0xa4
  }

  // calculate keyshare
  if (!mg_random(tls->x25519_cli, sizeof(tls->x25519_cli))) mg_error(c, "RNG");
 8018178:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 801817c:	33d0      	adds	r3, #208	@ 0xd0
 801817e:	2120      	movs	r1, #32
 8018180:	4618      	mov	r0, r3
 8018182:	f7e8 fab9 	bl	80006f8 <mg_random>
 8018186:	4603      	mov	r3, r0
 8018188:	f083 0301 	eor.w	r3, r3, #1
 801818c:	b2db      	uxtb	r3, r3
 801818e:	2b00      	cmp	r3, #0
 8018190:	d007      	beq.n	80181a2 <mg_tls_client_send_hello+0x202>
 8018192:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8018196:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 801819a:	496c      	ldr	r1, [pc, #432]	@ (801834c <mg_tls_client_send_hello+0x3ac>)
 801819c:	6818      	ldr	r0, [r3, #0]
 801819e:	f7ef fe69 	bl	8007e74 <mg_error>
  mg_tls_x25519(x25519_pub, tls->x25519_cli, X25519_BASE_POINT, 1);
 80181a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80181a6:	f103 01d0 	add.w	r1, r3, #208	@ 0xd0
 80181aa:	f107 00cc 	add.w	r0, r7, #204	@ 0xcc
 80181ae:	2301      	movs	r3, #1
 80181b0:	4a67      	ldr	r2, [pc, #412]	@ (8018350 <mg_tls_client_send_hello+0x3b0>)
 80181b2:	f008 fce3 	bl	8020b7c <mg_tls_x25519>

  // fill in the gaps: random + session ID + keyshare
  if (!mg_random(tls->session_id, sizeof(tls->session_id))) mg_error(c, "RNG");
 80181b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80181ba:	33b0      	adds	r3, #176	@ 0xb0
 80181bc:	2120      	movs	r1, #32
 80181be:	4618      	mov	r0, r3
 80181c0:	f7e8 fa9a 	bl	80006f8 <mg_random>
 80181c4:	4603      	mov	r3, r0
 80181c6:	f083 0301 	eor.w	r3, r3, #1
 80181ca:	b2db      	uxtb	r3, r3
 80181cc:	2b00      	cmp	r3, #0
 80181ce:	d007      	beq.n	80181e0 <mg_tls_client_send_hello+0x240>
 80181d0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80181d4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80181d8:	495c      	ldr	r1, [pc, #368]	@ (801834c <mg_tls_client_send_hello+0x3ac>)
 80181da:	6818      	ldr	r0, [r3, #0]
 80181dc:	f7ef fe4a 	bl	8007e74 <mg_error>
  if (!mg_random(tls->random, sizeof(tls->random))) mg_error(c, "RNG");
 80181e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80181e4:	3390      	adds	r3, #144	@ 0x90
 80181e6:	2120      	movs	r1, #32
 80181e8:	4618      	mov	r0, r3
 80181ea:	f7e8 fa85 	bl	80006f8 <mg_random>
 80181ee:	4603      	mov	r3, r0
 80181f0:	f083 0301 	eor.w	r3, r3, #1
 80181f4:	b2db      	uxtb	r3, r3
 80181f6:	2b00      	cmp	r3, #0
 80181f8:	d007      	beq.n	801820a <mg_tls_client_send_hello+0x26a>
 80181fa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80181fe:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8018202:	4952      	ldr	r1, [pc, #328]	@ (801834c <mg_tls_client_send_hello+0x3ac>)
 8018204:	6818      	ldr	r0, [r3, #0]
 8018206:	f7ef fe35 	bl	8007e74 <mg_error>
  memmove(msg_client_hello + 11, tls->random, sizeof(tls->random));
 801820a:	f107 0308 	add.w	r3, r7, #8
 801820e:	330b      	adds	r3, #11
 8018210:	f8d7 2104 	ldr.w	r2, [r7, #260]	@ 0x104
 8018214:	3290      	adds	r2, #144	@ 0x90
 8018216:	6815      	ldr	r5, [r2, #0]
 8018218:	6854      	ldr	r4, [r2, #4]
 801821a:	6890      	ldr	r0, [r2, #8]
 801821c:	68d1      	ldr	r1, [r2, #12]
 801821e:	601d      	str	r5, [r3, #0]
 8018220:	605c      	str	r4, [r3, #4]
 8018222:	6098      	str	r0, [r3, #8]
 8018224:	60d9      	str	r1, [r3, #12]
 8018226:	6915      	ldr	r5, [r2, #16]
 8018228:	6954      	ldr	r4, [r2, #20]
 801822a:	6990      	ldr	r0, [r2, #24]
 801822c:	69d1      	ldr	r1, [r2, #28]
 801822e:	611d      	str	r5, [r3, #16]
 8018230:	615c      	str	r4, [r3, #20]
 8018232:	6198      	str	r0, [r3, #24]
 8018234:	61d9      	str	r1, [r3, #28]
  memmove(msg_client_hello + 44, tls->session_id, sizeof(tls->session_id));
 8018236:	f107 0308 	add.w	r3, r7, #8
 801823a:	332c      	adds	r3, #44	@ 0x2c
 801823c:	f8d7 2104 	ldr.w	r2, [r7, #260]	@ 0x104
 8018240:	32b0      	adds	r2, #176	@ 0xb0
 8018242:	6815      	ldr	r5, [r2, #0]
 8018244:	6854      	ldr	r4, [r2, #4]
 8018246:	6890      	ldr	r0, [r2, #8]
 8018248:	68d1      	ldr	r1, [r2, #12]
 801824a:	601d      	str	r5, [r3, #0]
 801824c:	605c      	str	r4, [r3, #4]
 801824e:	6098      	str	r0, [r3, #8]
 8018250:	60d9      	str	r1, [r3, #12]
 8018252:	6915      	ldr	r5, [r2, #16]
 8018254:	6954      	ldr	r4, [r2, #20]
 8018256:	6990      	ldr	r0, [r2, #24]
 8018258:	69d1      	ldr	r1, [r2, #28]
 801825a:	611d      	str	r5, [r3, #16]
 801825c:	615c      	str	r4, [r3, #20]
 801825e:	6198      	str	r0, [r3, #24]
 8018260:	61d9      	str	r1, [r3, #28]
  memmove(msg_client_hello + 94, x25519_pub, sizeof(x25519_pub));
 8018262:	f107 0308 	add.w	r3, r7, #8
 8018266:	335e      	adds	r3, #94	@ 0x5e
 8018268:	461d      	mov	r5, r3
 801826a:	f107 04cc 	add.w	r4, r7, #204	@ 0xcc
 801826e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8018270:	6028      	str	r0, [r5, #0]
 8018272:	6069      	str	r1, [r5, #4]
 8018274:	60aa      	str	r2, [r5, #8]
 8018276:	60eb      	str	r3, [r5, #12]
 8018278:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801827a:	6128      	str	r0, [r5, #16]
 801827c:	6169      	str	r1, [r5, #20]
 801827e:	61aa      	str	r2, [r5, #24]
 8018280:	61eb      	str	r3, [r5, #28]

  // client hello message
  mg_iobuf_add(wio, wio->len, msg_client_hello, sizeof(msg_client_hello));
 8018282:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8018286:	6899      	ldr	r1, [r3, #8]
 8018288:	f107 0208 	add.w	r2, r7, #8
 801828c:	2391      	movs	r3, #145	@ 0x91
 801828e:	f8d7 0100 	ldr.w	r0, [r7, #256]	@ 0x100
 8018292:	f7f4 f86b 	bl	800c36c <mg_iobuf_add>
  mg_sha256_update(&tls->sha256, msg_client_hello + 5,
 8018296:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 801829a:	f103 0020 	add.w	r0, r3, #32
 801829e:	f107 0308 	add.w	r3, r7, #8
 80182a2:	3305      	adds	r3, #5
 80182a4:	228c      	movs	r2, #140	@ 0x8c
 80182a6:	4619      	mov	r1, r3
 80182a8:	f7fc f8fc 	bl	80144a4 <mg_sha256_update>
                   sizeof(msg_client_hello) - 5);
  mg_iobuf_add(wio, wio->len, sig_alg, sig_alg_sz);
 80182ac:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 80182b0:	6899      	ldr	r1, [r3, #8]
 80182b2:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 80182b6:	f8d7 20f0 	ldr.w	r2, [r7, #240]	@ 0xf0
 80182ba:	f8d7 0100 	ldr.w	r0, [r7, #256]	@ 0x100
 80182be:	f7f4 f855 	bl	800c36c <mg_iobuf_add>
  mg_sha256_update(&tls->sha256, sig_alg, sig_alg_sz);
 80182c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80182c6:	3320      	adds	r3, #32
 80182c8:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 80182cc:	f8d7 10f0 	ldr.w	r1, [r7, #240]	@ 0xf0
 80182d0:	4618      	mov	r0, r3
 80182d2:	f7fc f8e7 	bl	80144a4 <mg_sha256_update>
  if (hostnamesz > 0) {
 80182d6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80182da:	2b00      	cmp	r3, #0
 80182dc:	d027      	beq.n	801832e <mg_tls_client_send_hello+0x38e>
    mg_iobuf_add(wio, wio->len, server_name_ext, sizeof(server_name_ext));
 80182de:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 80182e2:	6899      	ldr	r1, [r3, #8]
 80182e4:	f107 029c 	add.w	r2, r7, #156	@ 0x9c
 80182e8:	2309      	movs	r3, #9
 80182ea:	f8d7 0100 	ldr.w	r0, [r7, #256]	@ 0x100
 80182ee:	f7f4 f83d 	bl	800c36c <mg_iobuf_add>
    mg_iobuf_add(wio, wio->len, hostname, hostnamesz);
 80182f2:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 80182f6:	6899      	ldr	r1, [r3, #8]
 80182f8:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80182fc:	f8d7 20fc 	ldr.w	r2, [r7, #252]	@ 0xfc
 8018300:	f8d7 0100 	ldr.w	r0, [r7, #256]	@ 0x100
 8018304:	f7f4 f832 	bl	800c36c <mg_iobuf_add>
    mg_sha256_update(&tls->sha256, server_name_ext, sizeof(server_name_ext));
 8018308:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 801830c:	3320      	adds	r3, #32
 801830e:	f107 019c 	add.w	r1, r7, #156	@ 0x9c
 8018312:	2209      	movs	r2, #9
 8018314:	4618      	mov	r0, r3
 8018316:	f7fc f8c5 	bl	80144a4 <mg_sha256_update>
    mg_sha256_update(&tls->sha256, (uint8_t *) hostname, hostnamesz);
 801831a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 801831e:	3320      	adds	r3, #32
 8018320:	f8d7 20f8 	ldr.w	r2, [r7, #248]	@ 0xf8
 8018324:	f8d7 10fc 	ldr.w	r1, [r7, #252]	@ 0xfc
 8018328:	4618      	mov	r0, r3
 801832a:	f7fc f8bb 	bl	80144a4 <mg_sha256_update>
  }

  // change cipher message
  mg_iobuf_add(wio, wio->len, (const char *) "\x14\x03\x03\x00\x01\x01", 6);
 801832e:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8018332:	6899      	ldr	r1, [r3, #8]
 8018334:	2306      	movs	r3, #6
 8018336:	4a07      	ldr	r2, [pc, #28]	@ (8018354 <mg_tls_client_send_hello+0x3b4>)
 8018338:	f8d7 0100 	ldr.w	r0, [r7, #256]	@ 0x100
 801833c:	f7f4 f816 	bl	800c36c <mg_iobuf_add>
}
 8018340:	bf00      	nop
 8018342:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 8018346:	46bd      	mov	sp, r7
 8018348:	bdb0      	pop	{r4, r5, r7, pc}
 801834a:	bf00      	nop
 801834c:	08026dc4 	.word	0x08026dc4
 8018350:	08028798 	.word	0x08028798
 8018354:	08026de0 	.word	0x08026de0

08018358 <mg_tls_client_recv_hello>:

static int mg_tls_client_recv_hello(struct mg_connection *c) {
 8018358:	b580      	push	{r7, lr}
 801835a:	b08a      	sub	sp, #40	@ 0x28
 801835c:	af00      	add	r7, sp, #0
 801835e:	6078      	str	r0, [r7, #4]
  struct tls_data *tls = (struct tls_data *) c->tls;
 8018360:	687b      	ldr	r3, [r7, #4]
 8018362:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8018366:	623b      	str	r3, [r7, #32]
  struct mg_iobuf *rio = &c->rtls;
 8018368:	687b      	ldr	r3, [r7, #4]
 801836a:	3370      	adds	r3, #112	@ 0x70
 801836c:	61fb      	str	r3, [r7, #28]
  uint16_t msgsz;
  uint8_t *ext;
  uint16_t ext_len;
  int j;

  if (!mg_tls_got_record(c)) {
 801836e:	6878      	ldr	r0, [r7, #4]
 8018370:	f7fe f9f1 	bl	8016756 <mg_tls_got_record>
 8018374:	4603      	mov	r3, r0
 8018376:	f083 0301 	eor.w	r3, r3, #1
 801837a:	b2db      	uxtb	r3, r3
 801837c:	2b00      	cmp	r3, #0
 801837e:	d002      	beq.n	8018386 <mg_tls_client_recv_hello+0x2e>
    return MG_IO_WAIT;
 8018380:	f06f 0301 	mvn.w	r3, #1
 8018384:	e109      	b.n	801859a <mg_tls_client_recv_hello+0x242>
  }
  if (rio->buf[0] != MG_TLS_HANDSHAKE || rio->buf[5] != MG_TLS_SERVER_HELLO) {
 8018386:	69fb      	ldr	r3, [r7, #28]
 8018388:	681b      	ldr	r3, [r3, #0]
 801838a:	781b      	ldrb	r3, [r3, #0]
 801838c:	2b16      	cmp	r3, #22
 801838e:	d105      	bne.n	801839c <mg_tls_client_recv_hello+0x44>
 8018390:	69fb      	ldr	r3, [r7, #28]
 8018392:	681b      	ldr	r3, [r3, #0]
 8018394:	3305      	adds	r3, #5
 8018396:	781b      	ldrb	r3, [r3, #0]
 8018398:	2b02      	cmp	r3, #2
 801839a:	d032      	beq.n	8018402 <mg_tls_client_recv_hello+0xaa>
    if (rio->buf[0] == MG_TLS_ALERT && rio->len >= 7) {
 801839c:	69fb      	ldr	r3, [r7, #28]
 801839e:	681b      	ldr	r3, [r3, #0]
 80183a0:	781b      	ldrb	r3, [r3, #0]
 80183a2:	2b15      	cmp	r3, #21
 80183a4:	d10f      	bne.n	80183c6 <mg_tls_client_recv_hello+0x6e>
 80183a6:	69fb      	ldr	r3, [r7, #28]
 80183a8:	689b      	ldr	r3, [r3, #8]
 80183aa:	2b06      	cmp	r3, #6
 80183ac:	d90b      	bls.n	80183c6 <mg_tls_client_recv_hello+0x6e>
      mg_error(c, "tls alert %d", rio->buf[6]);
 80183ae:	69fb      	ldr	r3, [r7, #28]
 80183b0:	681b      	ldr	r3, [r3, #0]
 80183b2:	3306      	adds	r3, #6
 80183b4:	781b      	ldrb	r3, [r3, #0]
 80183b6:	461a      	mov	r2, r3
 80183b8:	497a      	ldr	r1, [pc, #488]	@ (80185a4 <mg_tls_client_recv_hello+0x24c>)
 80183ba:	6878      	ldr	r0, [r7, #4]
 80183bc:	f7ef fd5a 	bl	8007e74 <mg_error>
      return -1;
 80183c0:	f04f 33ff 	mov.w	r3, #4294967295
 80183c4:	e0e9      	b.n	801859a <mg_tls_client_recv_hello+0x242>
    }
    MG_INFO(("got packet type 0x%02x/0x%02x", rio->buf[0], rio->buf[5]));
 80183c6:	4b78      	ldr	r3, [pc, #480]	@ (80185a8 <mg_tls_client_recv_hello+0x250>)
 80183c8:	681b      	ldr	r3, [r3, #0]
 80183ca:	2b01      	cmp	r3, #1
 80183cc:	dd12      	ble.n	80183f4 <mg_tls_client_recv_hello+0x9c>
 80183ce:	4b77      	ldr	r3, [pc, #476]	@ (80185ac <mg_tls_client_recv_hello+0x254>)
 80183d0:	f642 62f6 	movw	r2, #12022	@ 0x2ef6
 80183d4:	4976      	ldr	r1, [pc, #472]	@ (80185b0 <mg_tls_client_recv_hello+0x258>)
 80183d6:	2002      	movs	r0, #2
 80183d8:	f7f4 fee8 	bl	800d1ac <mg_log_prefix>
 80183dc:	69fb      	ldr	r3, [r7, #28]
 80183de:	681b      	ldr	r3, [r3, #0]
 80183e0:	781b      	ldrb	r3, [r3, #0]
 80183e2:	4619      	mov	r1, r3
 80183e4:	69fb      	ldr	r3, [r7, #28]
 80183e6:	681b      	ldr	r3, [r3, #0]
 80183e8:	3305      	adds	r3, #5
 80183ea:	781b      	ldrb	r3, [r3, #0]
 80183ec:	461a      	mov	r2, r3
 80183ee:	4871      	ldr	r0, [pc, #452]	@ (80185b4 <mg_tls_client_recv_hello+0x25c>)
 80183f0:	f7f4 ff2c 	bl	800d24c <mg_log>
    mg_error(c, "not a server hello packet");
 80183f4:	4970      	ldr	r1, [pc, #448]	@ (80185b8 <mg_tls_client_recv_hello+0x260>)
 80183f6:	6878      	ldr	r0, [r7, #4]
 80183f8:	f7ef fd3c 	bl	8007e74 <mg_error>
    return -1;
 80183fc:	f04f 33ff 	mov.w	r3, #4294967295
 8018400:	e0cb      	b.n	801859a <mg_tls_client_recv_hello+0x242>
  }

  msgsz = MG_LOAD_BE16(rio->buf + 3);
 8018402:	69fb      	ldr	r3, [r7, #28]
 8018404:	681b      	ldr	r3, [r3, #0]
 8018406:	3303      	adds	r3, #3
 8018408:	781b      	ldrb	r3, [r3, #0]
 801840a:	b21b      	sxth	r3, r3
 801840c:	021b      	lsls	r3, r3, #8
 801840e:	b21a      	sxth	r2, r3
 8018410:	69fb      	ldr	r3, [r7, #28]
 8018412:	681b      	ldr	r3, [r3, #0]
 8018414:	3304      	adds	r3, #4
 8018416:	781b      	ldrb	r3, [r3, #0]
 8018418:	b21b      	sxth	r3, r3
 801841a:	4313      	orrs	r3, r2
 801841c:	b21b      	sxth	r3, r3
 801841e:	837b      	strh	r3, [r7, #26]
  mg_sha256_update(&tls->sha256, rio->buf + 5, msgsz);
 8018420:	6a3b      	ldr	r3, [r7, #32]
 8018422:	f103 0020 	add.w	r0, r3, #32
 8018426:	69fb      	ldr	r3, [r7, #28]
 8018428:	681b      	ldr	r3, [r3, #0]
 801842a:	3305      	adds	r3, #5
 801842c:	8b7a      	ldrh	r2, [r7, #26]
 801842e:	4619      	mov	r1, r3
 8018430:	f7fc f838 	bl	80144a4 <mg_sha256_update>

  ext_len = MG_LOAD_BE16(rio->buf + 5 + 39 + 32 + 3);
 8018434:	69fb      	ldr	r3, [r7, #28]
 8018436:	681b      	ldr	r3, [r3, #0]
 8018438:	334f      	adds	r3, #79	@ 0x4f
 801843a:	781b      	ldrb	r3, [r3, #0]
 801843c:	b21b      	sxth	r3, r3
 801843e:	021b      	lsls	r3, r3, #8
 8018440:	b21a      	sxth	r2, r3
 8018442:	69fb      	ldr	r3, [r7, #28]
 8018444:	681b      	ldr	r3, [r3, #0]
 8018446:	3350      	adds	r3, #80	@ 0x50
 8018448:	781b      	ldrb	r3, [r3, #0]
 801844a:	b21b      	sxth	r3, r3
 801844c:	4313      	orrs	r3, r2
 801844e:	b21b      	sxth	r3, r3
 8018450:	833b      	strh	r3, [r7, #24]
  ext = rio->buf + 5 + 39 + 32 + 3 + 2;
 8018452:	69fb      	ldr	r3, [r7, #28]
 8018454:	681b      	ldr	r3, [r3, #0]
 8018456:	3351      	adds	r3, #81	@ 0x51
 8018458:	617b      	str	r3, [r7, #20]
  if (ext_len > (rio->len - (5 + 39 + 32 + 3 + 2))) goto fail;
 801845a:	8b3a      	ldrh	r2, [r7, #24]
 801845c:	69fb      	ldr	r3, [r7, #28]
 801845e:	689b      	ldr	r3, [r3, #8]
 8018460:	3b51      	subs	r3, #81	@ 0x51
 8018462:	429a      	cmp	r2, r3
 8018464:	f200 8090 	bhi.w	8018588 <mg_tls_client_recv_hello+0x230>

  for (j = 0; j < ext_len;) {
 8018468:	2300      	movs	r3, #0
 801846a:	627b      	str	r3, [r7, #36]	@ 0x24
 801846c:	e086      	b.n	801857c <mg_tls_client_recv_hello+0x224>
    uint16_t ext_type = MG_LOAD_BE16(ext + j);
 801846e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018470:	697a      	ldr	r2, [r7, #20]
 8018472:	4413      	add	r3, r2
 8018474:	781b      	ldrb	r3, [r3, #0]
 8018476:	b21b      	sxth	r3, r3
 8018478:	021b      	lsls	r3, r3, #8
 801847a:	b21a      	sxth	r2, r3
 801847c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801847e:	3301      	adds	r3, #1
 8018480:	6979      	ldr	r1, [r7, #20]
 8018482:	440b      	add	r3, r1
 8018484:	781b      	ldrb	r3, [r3, #0]
 8018486:	b21b      	sxth	r3, r3
 8018488:	4313      	orrs	r3, r2
 801848a:	b21b      	sxth	r3, r3
 801848c:	827b      	strh	r3, [r7, #18]
    uint16_t ext_len2 = MG_LOAD_BE16(ext + j + 2);
 801848e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018490:	3302      	adds	r3, #2
 8018492:	697a      	ldr	r2, [r7, #20]
 8018494:	4413      	add	r3, r2
 8018496:	781b      	ldrb	r3, [r3, #0]
 8018498:	b21b      	sxth	r3, r3
 801849a:	021b      	lsls	r3, r3, #8
 801849c:	b21a      	sxth	r2, r3
 801849e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80184a0:	3303      	adds	r3, #3
 80184a2:	6979      	ldr	r1, [r7, #20]
 80184a4:	440b      	add	r3, r1
 80184a6:	781b      	ldrb	r3, [r3, #0]
 80184a8:	b21b      	sxth	r3, r3
 80184aa:	4313      	orrs	r3, r2
 80184ac:	b21b      	sxth	r3, r3
 80184ae:	823b      	strh	r3, [r7, #16]
    uint16_t group;
    uint8_t *key_exchange;
    uint16_t key_exchange_len;
    if (ext_len2 > (ext_len - j - 4)) goto fail;
 80184b0:	8b3a      	ldrh	r2, [r7, #24]
 80184b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80184b4:	1ad3      	subs	r3, r2, r3
 80184b6:	1eda      	subs	r2, r3, #3
 80184b8:	8a3b      	ldrh	r3, [r7, #16]
 80184ba:	429a      	cmp	r2, r3
 80184bc:	dd66      	ble.n	801858c <mg_tls_client_recv_hello+0x234>
    if (ext_type != 0x0033) {  // not a key share extension, ignore
 80184be:	8a7b      	ldrh	r3, [r7, #18]
 80184c0:	2b33      	cmp	r3, #51	@ 0x33
 80184c2:	d007      	beq.n	80184d4 <mg_tls_client_recv_hello+0x17c>
      j += (uint16_t) (ext_len2 + 4);
 80184c4:	8a3b      	ldrh	r3, [r7, #16]
 80184c6:	3304      	adds	r3, #4
 80184c8:	b29b      	uxth	r3, r3
 80184ca:	461a      	mov	r2, r3
 80184cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80184ce:	4413      	add	r3, r2
 80184d0:	627b      	str	r3, [r7, #36]	@ 0x24
      continue;
 80184d2:	e053      	b.n	801857c <mg_tls_client_recv_hello+0x224>
    }
    group = MG_LOAD_BE16(ext + j + 4);
 80184d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80184d6:	3304      	adds	r3, #4
 80184d8:	697a      	ldr	r2, [r7, #20]
 80184da:	4413      	add	r3, r2
 80184dc:	781b      	ldrb	r3, [r3, #0]
 80184de:	b21b      	sxth	r3, r3
 80184e0:	021b      	lsls	r3, r3, #8
 80184e2:	b21a      	sxth	r2, r3
 80184e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80184e6:	3305      	adds	r3, #5
 80184e8:	6979      	ldr	r1, [r7, #20]
 80184ea:	440b      	add	r3, r1
 80184ec:	781b      	ldrb	r3, [r3, #0]
 80184ee:	b21b      	sxth	r3, r3
 80184f0:	4313      	orrs	r3, r2
 80184f2:	b21b      	sxth	r3, r3
 80184f4:	81fb      	strh	r3, [r7, #14]
    if (group != 0x001d) {
 80184f6:	89fb      	ldrh	r3, [r7, #14]
 80184f8:	2b1d      	cmp	r3, #29
 80184fa:	d006      	beq.n	801850a <mg_tls_client_recv_hello+0x1b2>
      mg_error(c, "bad key exchange group");
 80184fc:	492f      	ldr	r1, [pc, #188]	@ (80185bc <mg_tls_client_recv_hello+0x264>)
 80184fe:	6878      	ldr	r0, [r7, #4]
 8018500:	f7ef fcb8 	bl	8007e74 <mg_error>
      return -1;
 8018504:	f04f 33ff 	mov.w	r3, #4294967295
 8018508:	e047      	b.n	801859a <mg_tls_client_recv_hello+0x242>
    }
    key_exchange_len = MG_LOAD_BE16(ext + j + 6);
 801850a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801850c:	3306      	adds	r3, #6
 801850e:	697a      	ldr	r2, [r7, #20]
 8018510:	4413      	add	r3, r2
 8018512:	781b      	ldrb	r3, [r3, #0]
 8018514:	b21b      	sxth	r3, r3
 8018516:	021b      	lsls	r3, r3, #8
 8018518:	b21a      	sxth	r2, r3
 801851a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801851c:	3307      	adds	r3, #7
 801851e:	6979      	ldr	r1, [r7, #20]
 8018520:	440b      	add	r3, r1
 8018522:	781b      	ldrb	r3, [r3, #0]
 8018524:	b21b      	sxth	r3, r3
 8018526:	4313      	orrs	r3, r2
 8018528:	b21b      	sxth	r3, r3
 801852a:	81bb      	strh	r3, [r7, #12]
    key_exchange = ext + j + 8;
 801852c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801852e:	3308      	adds	r3, #8
 8018530:	697a      	ldr	r2, [r7, #20]
 8018532:	4413      	add	r3, r2
 8018534:	60bb      	str	r3, [r7, #8]
    if (key_exchange_len != 32) {
 8018536:	89bb      	ldrh	r3, [r7, #12]
 8018538:	2b20      	cmp	r3, #32
 801853a:	d006      	beq.n	801854a <mg_tls_client_recv_hello+0x1f2>
      mg_error(c, "bad key exchange length");
 801853c:	4920      	ldr	r1, [pc, #128]	@ (80185c0 <mg_tls_client_recv_hello+0x268>)
 801853e:	6878      	ldr	r0, [r7, #4]
 8018540:	f7ef fc98 	bl	8007e74 <mg_error>
      return -1;
 8018544:	f04f 33ff 	mov.w	r3, #4294967295
 8018548:	e027      	b.n	801859a <mg_tls_client_recv_hello+0x242>
    }
    mg_tls_x25519(tls->x25519_sec, tls->x25519_cli, key_exchange, 1);
 801854a:	6a3b      	ldr	r3, [r7, #32]
 801854c:	f103 00f0 	add.w	r0, r3, #240	@ 0xf0
 8018550:	6a3b      	ldr	r3, [r7, #32]
 8018552:	f103 01d0 	add.w	r1, r3, #208	@ 0xd0
 8018556:	2301      	movs	r3, #1
 8018558:	68ba      	ldr	r2, [r7, #8]
 801855a:	f008 fb0f 	bl	8020b7c <mg_tls_x25519>
    mg_tls_hexdump("c x25519 sec", tls->x25519_sec, 32);
 801855e:	6a3b      	ldr	r3, [r7, #32]
 8018560:	33f0      	adds	r3, #240	@ 0xf0
 8018562:	2220      	movs	r2, #32
 8018564:	4619      	mov	r1, r3
 8018566:	4817      	ldr	r0, [pc, #92]	@ (80185c4 <mg_tls_client_recv_hello+0x26c>)
 8018568:	f7fd ff9e 	bl	80164a8 <mg_tls_hexdump>
    mg_tls_drop_record(c);
 801856c:	6878      	ldr	r0, [r7, #4]
 801856e:	f7fe f91a 	bl	80167a6 <mg_tls_drop_record>
    /* generate handshake keys */
    mg_tls_generate_handshake_keys(c);
 8018572:	6878      	ldr	r0, [r7, #4]
 8018574:	f7fe fa22 	bl	80169bc <mg_tls_generate_handshake_keys>
    return 0;
 8018578:	2300      	movs	r3, #0
 801857a:	e00e      	b.n	801859a <mg_tls_client_recv_hello+0x242>
  for (j = 0; j < ext_len;) {
 801857c:	8b3b      	ldrh	r3, [r7, #24]
 801857e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8018580:	429a      	cmp	r2, r3
 8018582:	f6ff af74 	blt.w	801846e <mg_tls_client_recv_hello+0x116>
  }
fail:
 8018586:	e002      	b.n	801858e <mg_tls_client_recv_hello+0x236>
  if (ext_len > (rio->len - (5 + 39 + 32 + 3 + 2))) goto fail;
 8018588:	bf00      	nop
 801858a:	e000      	b.n	801858e <mg_tls_client_recv_hello+0x236>
    if (ext_len2 > (ext_len - j - 4)) goto fail;
 801858c:	bf00      	nop
  mg_error(c, "bad server hello");
 801858e:	490e      	ldr	r1, [pc, #56]	@ (80185c8 <mg_tls_client_recv_hello+0x270>)
 8018590:	6878      	ldr	r0, [r7, #4]
 8018592:	f7ef fc6f 	bl	8007e74 <mg_error>
  return -1;
 8018596:	f04f 33ff 	mov.w	r3, #4294967295
}
 801859a:	4618      	mov	r0, r3
 801859c:	3728      	adds	r7, #40	@ 0x28
 801859e:	46bd      	mov	sp, r7
 80185a0:	bd80      	pop	{r7, pc}
 80185a2:	bf00      	nop
 80185a4:	08026f7c 	.word	0x08026f7c
 80185a8:	20000258 	.word	0x20000258
 80185ac:	080289fc 	.word	0x080289fc
 80185b0:	08025140 	.word	0x08025140
 80185b4:	08026f8c 	.word	0x08026f8c
 80185b8:	08026fac 	.word	0x08026fac
 80185bc:	08026fc8 	.word	0x08026fc8
 80185c0:	08026fe0 	.word	0x08026fe0
 80185c4:	08026ff8 	.word	0x08026ff8
 80185c8:	08027008 	.word	0x08027008

080185cc <mg_tls_client_recv_ext>:

static int mg_tls_client_recv_ext(struct mg_connection *c) {
 80185cc:	b580      	push	{r7, lr}
 80185ce:	b084      	sub	sp, #16
 80185d0:	af00      	add	r7, sp, #0
 80185d2:	6078      	str	r0, [r7, #4]
  struct tls_data *tls = (struct tls_data *) c->tls;
 80185d4:	687b      	ldr	r3, [r7, #4]
 80185d6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80185da:	60fb      	str	r3, [r7, #12]
  unsigned char *recv_buf;
  if (mg_tls_recv_record(c) < 0) {
 80185dc:	6878      	ldr	r0, [r7, #4]
 80185de:	f7fe fd4f 	bl	8017080 <mg_tls_recv_record>
 80185e2:	4603      	mov	r3, r0
 80185e4:	2b00      	cmp	r3, #0
 80185e6:	da02      	bge.n	80185ee <mg_tls_client_recv_ext+0x22>
    return -1;
 80185e8:	f04f 33ff 	mov.w	r3, #4294967295
 80185ec:	e017      	b.n	801861e <mg_tls_client_recv_ext+0x52>
  }
  recv_buf = &c->rtls.buf[tls->recv_offset];
 80185ee:	687b      	ldr	r3, [r7, #4]
 80185f0:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80185f2:	68fb      	ldr	r3, [r7, #12]
 80185f4:	695b      	ldr	r3, [r3, #20]
 80185f6:	4413      	add	r3, r2
 80185f8:	60bb      	str	r3, [r7, #8]
  if (recv_buf[0] != MG_TLS_ENCRYPTED_EXTENSIONS) {
 80185fa:	68bb      	ldr	r3, [r7, #8]
 80185fc:	781b      	ldrb	r3, [r3, #0]
 80185fe:	2b08      	cmp	r3, #8
 8018600:	d009      	beq.n	8018616 <mg_tls_client_recv_ext+0x4a>
    mg_error(c, "expected server extensions but got msg 0x%02x", recv_buf[0]);
 8018602:	68bb      	ldr	r3, [r7, #8]
 8018604:	781b      	ldrb	r3, [r3, #0]
 8018606:	461a      	mov	r2, r3
 8018608:	4907      	ldr	r1, [pc, #28]	@ (8018628 <mg_tls_client_recv_ext+0x5c>)
 801860a:	6878      	ldr	r0, [r7, #4]
 801860c:	f7ef fc32 	bl	8007e74 <mg_error>
    return -1;
 8018610:	f04f 33ff 	mov.w	r3, #4294967295
 8018614:	e003      	b.n	801861e <mg_tls_client_recv_ext+0x52>
  }
  mg_tls_drop_message(c);
 8018616:	6878      	ldr	r0, [r7, #4]
 8018618:	f7fe f8e8 	bl	80167ec <mg_tls_drop_message>
  return 0;
 801861c:	2300      	movs	r3, #0
}
 801861e:	4618      	mov	r0, r3
 8018620:	3710      	adds	r7, #16
 8018622:	46bd      	mov	sp, r7
 8018624:	bd80      	pop	{r7, pc}
 8018626:	bf00      	nop
 8018628:	0802701c 	.word	0x0802701c

0801862c <mg_der_debug_cert_name>:
  struct mg_str sig;    // signature
  uint8_t tbshash[48];  // 32b for sha256/secp256, 48b for sha384/secp384
  size_t tbshashsz;     // actual TBS hash size
};

static void mg_der_debug_cert_name(const char *name, struct mg_der_tlv *tlv) {
 801862c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801862e:	b099      	sub	sp, #100	@ 0x64
 8018630:	af06      	add	r7, sp, #24
 8018632:	6178      	str	r0, [r7, #20]
 8018634:	6139      	str	r1, [r7, #16]
  struct mg_der_tlv v;
  struct mg_str cn, c, o, ou;
  cn = c = o = ou = mg_str("");
 8018636:	f107 031c 	add.w	r3, r7, #28
 801863a:	4946      	ldr	r1, [pc, #280]	@ (8018754 <mg_der_debug_cert_name+0x128>)
 801863c:	4618      	mov	r0, r3
 801863e:	f7fd f9a7 	bl	8015990 <mg_str_s>
 8018642:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8018646:	f107 021c 	add.w	r2, r7, #28
 801864a:	e892 0003 	ldmia.w	r2, {r0, r1}
 801864e:	e883 0003 	stmia.w	r3, {r0, r1}
 8018652:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8018656:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 801865a:	e892 0003 	ldmia.w	r2, {r0, r1}
 801865e:	e883 0003 	stmia.w	r3, {r0, r1}
 8018662:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8018666:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 801866a:	e892 0003 	ldmia.w	r2, {r0, r1}
 801866e:	e883 0003 	stmia.w	r3, {r0, r1}
  if (mg_der_find_oid(tlv, (uint8_t *) "\x55\x04\x03", 3, &v))
 8018672:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8018676:	2203      	movs	r2, #3
 8018678:	4937      	ldr	r1, [pc, #220]	@ (8018758 <mg_der_debug_cert_name+0x12c>)
 801867a:	6938      	ldr	r0, [r7, #16]
 801867c:	f7fd ffc7 	bl	801660e <mg_der_find_oid>
 8018680:	4603      	mov	r3, r0
 8018682:	2b00      	cmp	r3, #0
 8018684:	d006      	beq.n	8018694 <mg_der_debug_cert_name+0x68>
    cn = mg_str_n((const char *) v.value, v.len);
 8018686:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8018688:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 801868a:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 801868e:	4618      	mov	r0, r3
 8018690:	f7fd f99b 	bl	80159ca <mg_str_n>
  if (mg_der_find_oid(tlv, (uint8_t *) "\x55\x04\x06", 3, &v))
 8018694:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8018698:	2203      	movs	r2, #3
 801869a:	4930      	ldr	r1, [pc, #192]	@ (801875c <mg_der_debug_cert_name+0x130>)
 801869c:	6938      	ldr	r0, [r7, #16]
 801869e:	f7fd ffb6 	bl	801660e <mg_der_find_oid>
 80186a2:	4603      	mov	r3, r0
 80186a4:	2b00      	cmp	r3, #0
 80186a6:	d006      	beq.n	80186b6 <mg_der_debug_cert_name+0x8a>
    c = mg_str_n((const char *) v.value, v.len);
 80186a8:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80186aa:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80186ac:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80186b0:	4618      	mov	r0, r3
 80186b2:	f7fd f98a 	bl	80159ca <mg_str_n>
  if (mg_der_find_oid(tlv, (uint8_t *) "\x55\x04\x0a", 3, &v))
 80186b6:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80186ba:	2203      	movs	r2, #3
 80186bc:	4928      	ldr	r1, [pc, #160]	@ (8018760 <mg_der_debug_cert_name+0x134>)
 80186be:	6938      	ldr	r0, [r7, #16]
 80186c0:	f7fd ffa5 	bl	801660e <mg_der_find_oid>
 80186c4:	4603      	mov	r3, r0
 80186c6:	2b00      	cmp	r3, #0
 80186c8:	d006      	beq.n	80186d8 <mg_der_debug_cert_name+0xac>
    o = mg_str_n((const char *) v.value, v.len);
 80186ca:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80186cc:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80186ce:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80186d2:	4618      	mov	r0, r3
 80186d4:	f7fd f979 	bl	80159ca <mg_str_n>
  if (mg_der_find_oid(tlv, (uint8_t *) "\x55\x04\x0b", 3, &v))
 80186d8:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80186dc:	2203      	movs	r2, #3
 80186de:	4921      	ldr	r1, [pc, #132]	@ (8018764 <mg_der_debug_cert_name+0x138>)
 80186e0:	6938      	ldr	r0, [r7, #16]
 80186e2:	f7fd ff94 	bl	801660e <mg_der_find_oid>
 80186e6:	4603      	mov	r3, r0
 80186e8:	2b00      	cmp	r3, #0
 80186ea:	d00e      	beq.n	801870a <mg_der_debug_cert_name+0xde>
    ou = mg_str_n((const char *) v.value, v.len);
 80186ec:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80186ee:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80186f0:	f107 0308 	add.w	r3, r7, #8
 80186f4:	4618      	mov	r0, r3
 80186f6:	f7fd f968 	bl	80159ca <mg_str_n>
 80186fa:	f107 031c 	add.w	r3, r7, #28
 80186fe:	f107 0208 	add.w	r2, r7, #8
 8018702:	e892 0003 	ldmia.w	r2, {r0, r1}
 8018706:	e883 0003 	stmia.w	r3, {r0, r1}
  MG_VERBOSE(("%s: CN=%.*s, C=%.*s, O=%.*s, OU=%.*s", name, cn.len, cn.buf,
 801870a:	4b17      	ldr	r3, [pc, #92]	@ (8018768 <mg_der_debug_cert_name+0x13c>)
 801870c:	681b      	ldr	r3, [r3, #0]
 801870e:	2b03      	cmp	r3, #3
 8018710:	dd1b      	ble.n	801874a <mg_der_debug_cert_name+0x11e>
 8018712:	4b16      	ldr	r3, [pc, #88]	@ (801876c <mg_der_debug_cert_name+0x140>)
 8018714:	f642 7249 	movw	r2, #12105	@ 0x2f49
 8018718:	4915      	ldr	r1, [pc, #84]	@ (8018770 <mg_der_debug_cert_name+0x144>)
 801871a:	2004      	movs	r0, #4
 801871c:	f7f4 fd46 	bl	800d1ac <mg_log_prefix>
 8018720:	6bbe      	ldr	r6, [r7, #56]	@ 0x38
 8018722:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8018724:	607b      	str	r3, [r7, #4]
 8018726:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8018728:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801872a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 801872c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801872e:	6a3c      	ldr	r4, [r7, #32]
 8018730:	69fd      	ldr	r5, [r7, #28]
 8018732:	9505      	str	r5, [sp, #20]
 8018734:	9404      	str	r4, [sp, #16]
 8018736:	9003      	str	r0, [sp, #12]
 8018738:	9102      	str	r1, [sp, #8]
 801873a:	9201      	str	r2, [sp, #4]
 801873c:	9300      	str	r3, [sp, #0]
 801873e:	687b      	ldr	r3, [r7, #4]
 8018740:	4632      	mov	r2, r6
 8018742:	6979      	ldr	r1, [r7, #20]
 8018744:	480b      	ldr	r0, [pc, #44]	@ (8018774 <mg_der_debug_cert_name+0x148>)
 8018746:	f7f4 fd81 	bl	800d24c <mg_log>
              c.len, c.buf, o.len, o.buf, ou.len, ou.buf));
}
 801874a:	bf00      	nop
 801874c:	374c      	adds	r7, #76	@ 0x4c
 801874e:	46bd      	mov	sp, r7
 8018750:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018752:	bf00      	nop
 8018754:	08025980 	.word	0x08025980
 8018758:	0802704c 	.word	0x0802704c
 801875c:	08027050 	.word	0x08027050
 8018760:	08027054 	.word	0x08027054
 8018764:	08027058 	.word	0x08027058
 8018768:	20000258 	.word	0x20000258
 801876c:	08028a18 	.word	0x08028a18
 8018770:	08025140 	.word	0x08025140
 8018774:	0802705c 	.word	0x0802705c

08018778 <mg_tls_parse_cert_der>:

static int mg_tls_parse_cert_der(void *buf, size_t dersz,
                                 struct mg_tls_cert *cert) {
 8018778:	b590      	push	{r4, r7, lr}
 801877a:	b0af      	sub	sp, #188	@ 0xbc
 801877c:	af04      	add	r7, sp, #16
 801877e:	6178      	str	r0, [r7, #20]
 8018780:	6139      	str	r1, [r7, #16]
 8018782:	60fa      	str	r2, [r7, #12]
  uint8_t *tbs, *der = (uint8_t *) buf;
 8018784:	697b      	ldr	r3, [r7, #20]
 8018786:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  size_t tbssz;
  struct mg_der_tlv root, tbs_cert, field, algo;  // pubkey, signature;
  struct mg_der_tlv pki, pki_algo, pki_key, pki_curve, raw_sig;

  // Parse outermost SEQUENCE
  if (mg_der_parse(der, dersz, &root) <= 0 || root.type != 0x30) return -1;
 801878a:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 801878e:	461a      	mov	r2, r3
 8018790:	6939      	ldr	r1, [r7, #16]
 8018792:	f8d7 00a4 	ldr.w	r0, [r7, #164]	@ 0xa4
 8018796:	f7fd feaf 	bl	80164f8 <mg_der_parse>
 801879a:	4603      	mov	r3, r0
 801879c:	2b00      	cmp	r3, #0
 801879e:	dd03      	ble.n	80187a8 <mg_tls_parse_cert_der+0x30>
 80187a0:	f897 3090 	ldrb.w	r3, [r7, #144]	@ 0x90
 80187a4:	2b30      	cmp	r3, #48	@ 0x30
 80187a6:	d002      	beq.n	80187ae <mg_tls_parse_cert_der+0x36>
 80187a8:	f04f 33ff 	mov.w	r3, #4294967295
 80187ac:	e3ae      	b.n	8018f0c <mg_tls_parse_cert_der+0x794>

  // Parse TBSCertificate SEQUENCE
  tbs = root.value;
 80187ae:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80187b2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  if (mg_der_next(&root, &tbs_cert) <= 0 || tbs_cert.type != 0x30) return -1;
 80187b6:	f107 0284 	add.w	r2, r7, #132	@ 0x84
 80187ba:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 80187be:	4611      	mov	r1, r2
 80187c0:	4618      	mov	r0, r3
 80187c2:	f7fd fef9 	bl	80165b8 <mg_der_next>
 80187c6:	4603      	mov	r3, r0
 80187c8:	2b00      	cmp	r3, #0
 80187ca:	dd03      	ble.n	80187d4 <mg_tls_parse_cert_der+0x5c>
 80187cc:	f897 3084 	ldrb.w	r3, [r7, #132]	@ 0x84
 80187d0:	2b30      	cmp	r3, #48	@ 0x30
 80187d2:	d002      	beq.n	80187da <mg_tls_parse_cert_der+0x62>
 80187d4:	f04f 33ff 	mov.w	r3, #4294967295
 80187d8:	e398      	b.n	8018f0c <mg_tls_parse_cert_der+0x794>
  tbssz = (size_t) (tbs_cert.value + tbs_cert.len - tbs);
 80187da:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 80187de:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80187e2:	441a      	add	r2, r3
 80187e4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80187e8:	1ad3      	subs	r3, r2, r3
 80187ea:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c

  // Parse Version (optional field)
  if (mg_der_next(&tbs_cert, &field) <= 0) return -1;
 80187ee:	f107 0278 	add.w	r2, r7, #120	@ 0x78
 80187f2:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 80187f6:	4611      	mov	r1, r2
 80187f8:	4618      	mov	r0, r3
 80187fa:	f7fd fedd 	bl	80165b8 <mg_der_next>
 80187fe:	4603      	mov	r3, r0
 8018800:	2b00      	cmp	r3, #0
 8018802:	dc02      	bgt.n	801880a <mg_tls_parse_cert_der+0x92>
 8018804:	f04f 33ff 	mov.w	r3, #4294967295
 8018808:	e380      	b.n	8018f0c <mg_tls_parse_cert_der+0x794>
  if (field.type == 0xa0) {  // v3
 801880a:	f897 3078 	ldrb.w	r3, [r7, #120]	@ 0x78
 801880e:	2ba0      	cmp	r3, #160	@ 0xa0
 8018810:	d123      	bne.n	801885a <mg_tls_parse_cert_der+0xe2>
    if (mg_der_parse(field.value, field.len, &field) <= 0 || field.len != 1 ||
 8018812:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8018816:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8018818:	f107 0278 	add.w	r2, r7, #120	@ 0x78
 801881c:	4618      	mov	r0, r3
 801881e:	f7fd fe6b 	bl	80164f8 <mg_der_parse>
 8018822:	4603      	mov	r3, r0
 8018824:	2b00      	cmp	r3, #0
 8018826:	dd07      	ble.n	8018838 <mg_tls_parse_cert_der+0xc0>
 8018828:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 801882a:	2b01      	cmp	r3, #1
 801882c:	d104      	bne.n	8018838 <mg_tls_parse_cert_der+0xc0>
        field.value[0] != 2)
 801882e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8018832:	781b      	ldrb	r3, [r3, #0]
    if (mg_der_parse(field.value, field.len, &field) <= 0 || field.len != 1 ||
 8018834:	2b02      	cmp	r3, #2
 8018836:	d002      	beq.n	801883e <mg_tls_parse_cert_der+0xc6>
      return -1;
 8018838:	f04f 33ff 	mov.w	r3, #4294967295
 801883c:	e366      	b.n	8018f0c <mg_tls_parse_cert_der+0x794>
    if (mg_der_next(&tbs_cert, &field) <= 0) return -1;
 801883e:	f107 0278 	add.w	r2, r7, #120	@ 0x78
 8018842:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 8018846:	4611      	mov	r1, r2
 8018848:	4618      	mov	r0, r3
 801884a:	f7fd feb5 	bl	80165b8 <mg_der_next>
 801884e:	4603      	mov	r3, r0
 8018850:	2b00      	cmp	r3, #0
 8018852:	dc02      	bgt.n	801885a <mg_tls_parse_cert_der+0xe2>
 8018854:	f04f 33ff 	mov.w	r3, #4294967295
 8018858:	e358      	b.n	8018f0c <mg_tls_parse_cert_der+0x794>
  }

  // Parse Serial Number
  if (field.type != 2) return -1;
 801885a:	f897 3078 	ldrb.w	r3, [r7, #120]	@ 0x78
 801885e:	2b02      	cmp	r3, #2
 8018860:	d002      	beq.n	8018868 <mg_tls_parse_cert_der+0xf0>
 8018862:	f04f 33ff 	mov.w	r3, #4294967295
 8018866:	e351      	b.n	8018f0c <mg_tls_parse_cert_der+0x794>
  cert->sn = mg_str_n((char *) field.value, field.len);
 8018868:	f8d7 1080 	ldr.w	r1, [r7, #128]	@ 0x80
 801886c:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 801886e:	68fc      	ldr	r4, [r7, #12]
 8018870:	463b      	mov	r3, r7
 8018872:	4618      	mov	r0, r3
 8018874:	f7fd f8a9 	bl	80159ca <mg_str_n>
 8018878:	1d23      	adds	r3, r4, #4
 801887a:	463a      	mov	r2, r7
 801887c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8018880:	e883 0003 	stmia.w	r3, {r0, r1}
  MG_VERBOSE(("cert s/n: %M", mg_print_hex, cert->sn.len, cert->sn.buf));
 8018884:	4b9a      	ldr	r3, [pc, #616]	@ (8018af0 <mg_tls_parse_cert_der+0x378>)
 8018886:	681b      	ldr	r3, [r3, #0]
 8018888:	2b03      	cmp	r3, #3
 801888a:	dd0e      	ble.n	80188aa <mg_tls_parse_cert_der+0x132>
 801888c:	4b99      	ldr	r3, [pc, #612]	@ (8018af4 <mg_tls_parse_cert_der+0x37c>)
 801888e:	f642 7268 	movw	r2, #12136	@ 0x2f68
 8018892:	4999      	ldr	r1, [pc, #612]	@ (8018af8 <mg_tls_parse_cert_der+0x380>)
 8018894:	2004      	movs	r0, #4
 8018896:	f7f4 fc89 	bl	800d1ac <mg_log_prefix>
 801889a:	68fb      	ldr	r3, [r7, #12]
 801889c:	689a      	ldr	r2, [r3, #8]
 801889e:	68fb      	ldr	r3, [r7, #12]
 80188a0:	685b      	ldr	r3, [r3, #4]
 80188a2:	4996      	ldr	r1, [pc, #600]	@ (8018afc <mg_tls_parse_cert_der+0x384>)
 80188a4:	4896      	ldr	r0, [pc, #600]	@ (8018b00 <mg_tls_parse_cert_der+0x388>)
 80188a6:	f7f4 fcd1 	bl	800d24c <mg_log>

  // Parse signature algorithm (first occurrence)
  if (mg_der_next(&tbs_cert, &field) <= 0 || field.type != 0x30) return -1;
 80188aa:	f107 0278 	add.w	r2, r7, #120	@ 0x78
 80188ae:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 80188b2:	4611      	mov	r1, r2
 80188b4:	4618      	mov	r0, r3
 80188b6:	f7fd fe7f 	bl	80165b8 <mg_der_next>
 80188ba:	4603      	mov	r3, r0
 80188bc:	2b00      	cmp	r3, #0
 80188be:	dd03      	ble.n	80188c8 <mg_tls_parse_cert_der+0x150>
 80188c0:	f897 3078 	ldrb.w	r3, [r7, #120]	@ 0x78
 80188c4:	2b30      	cmp	r3, #48	@ 0x30
 80188c6:	d002      	beq.n	80188ce <mg_tls_parse_cert_der+0x156>
 80188c8:	f04f 33ff 	mov.w	r3, #4294967295
 80188cc:	e31e      	b.n	8018f0c <mg_tls_parse_cert_der+0x794>
  if (mg_der_next(&field, &algo) <= 0 || algo.type != 0x06) return -1;
 80188ce:	f107 026c 	add.w	r2, r7, #108	@ 0x6c
 80188d2:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 80188d6:	4611      	mov	r1, r2
 80188d8:	4618      	mov	r0, r3
 80188da:	f7fd fe6d 	bl	80165b8 <mg_der_next>
 80188de:	4603      	mov	r3, r0
 80188e0:	2b00      	cmp	r3, #0
 80188e2:	dd03      	ble.n	80188ec <mg_tls_parse_cert_der+0x174>
 80188e4:	f897 306c 	ldrb.w	r3, [r7, #108]	@ 0x6c
 80188e8:	2b06      	cmp	r3, #6
 80188ea:	d002      	beq.n	80188f2 <mg_tls_parse_cert_der+0x17a>
 80188ec:	f04f 33ff 	mov.w	r3, #4294967295
 80188f0:	e30c      	b.n	8018f0c <mg_tls_parse_cert_der+0x794>

  MG_VERBOSE(("sig algo (oid): %M", mg_print_hex, algo.len, algo.value));
 80188f2:	4b7f      	ldr	r3, [pc, #508]	@ (8018af0 <mg_tls_parse_cert_der+0x378>)
 80188f4:	681b      	ldr	r3, [r3, #0]
 80188f6:	2b03      	cmp	r3, #3
 80188f8:	dd0c      	ble.n	8018914 <mg_tls_parse_cert_der+0x19c>
 80188fa:	4b7e      	ldr	r3, [pc, #504]	@ (8018af4 <mg_tls_parse_cert_der+0x37c>)
 80188fc:	f642 726e 	movw	r2, #12142	@ 0x2f6e
 8018900:	497d      	ldr	r1, [pc, #500]	@ (8018af8 <mg_tls_parse_cert_der+0x380>)
 8018902:	2004      	movs	r0, #4
 8018904:	f7f4 fc52 	bl	800d1ac <mg_log_prefix>
 8018908:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 801890a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 801890c:	497b      	ldr	r1, [pc, #492]	@ (8018afc <mg_tls_parse_cert_der+0x384>)
 801890e:	487d      	ldr	r0, [pc, #500]	@ (8018b04 <mg_tls_parse_cert_der+0x38c>)
 8018910:	f7f4 fc9c 	bl	800d24c <mg_log>
  // Signature algorithm OID mapping
  if (algo.len == 8 &&
 8018914:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8018916:	2b08      	cmp	r3, #8
 8018918:	d123      	bne.n	8018962 <mg_tls_parse_cert_der+0x1ea>
      memcmp(algo.value, "\x2A\x86\x48\xCE\x3D\x04\x03\x02", 8) == 0) {
 801891a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 801891c:	2208      	movs	r2, #8
 801891e:	497a      	ldr	r1, [pc, #488]	@ (8018b08 <mg_tls_parse_cert_der+0x390>)
 8018920:	4618      	mov	r0, r3
 8018922:	f00b fd89 	bl	8024438 <memcmp>
 8018926:	4603      	mov	r3, r0
  if (algo.len == 8 &&
 8018928:	2b00      	cmp	r3, #0
 801892a:	d11a      	bne.n	8018962 <mg_tls_parse_cert_der+0x1ea>
    MG_VERBOSE(("sig algo: ECDSA with SHA256"));
 801892c:	4b70      	ldr	r3, [pc, #448]	@ (8018af0 <mg_tls_parse_cert_der+0x378>)
 801892e:	681b      	ldr	r3, [r3, #0]
 8018930:	2b03      	cmp	r3, #3
 8018932:	dd09      	ble.n	8018948 <mg_tls_parse_cert_der+0x1d0>
 8018934:	4b6f      	ldr	r3, [pc, #444]	@ (8018af4 <mg_tls_parse_cert_der+0x37c>)
 8018936:	f642 7272 	movw	r2, #12146	@ 0x2f72
 801893a:	496f      	ldr	r1, [pc, #444]	@ (8018af8 <mg_tls_parse_cert_der+0x380>)
 801893c:	2004      	movs	r0, #4
 801893e:	f7f4 fc35 	bl	800d1ac <mg_log_prefix>
 8018942:	4872      	ldr	r0, [pc, #456]	@ (8018b0c <mg_tls_parse_cert_der+0x394>)
 8018944:	f7f4 fc82 	bl	800d24c <mg_log>
    mg_sha256(cert->tbshash, tbs, tbssz);
 8018948:	68fb      	ldr	r3, [r7, #12]
 801894a:	3328      	adds	r3, #40	@ 0x28
 801894c:	f8d7 209c 	ldr.w	r2, [r7, #156]	@ 0x9c
 8018950:	f8d7 10a0 	ldr.w	r1, [r7, #160]	@ 0xa0
 8018954:	4618      	mov	r0, r3
 8018956:	f7fb ff16 	bl	8014786 <mg_sha256>
    cert->tbshashsz = 32;
 801895a:	68fb      	ldr	r3, [r7, #12]
 801895c:	2220      	movs	r2, #32
 801895e:	659a      	str	r2, [r3, #88]	@ 0x58
 8018960:	e088      	b.n	8018a74 <mg_tls_parse_cert_der+0x2fc>
  } else if (algo.len == 9 &&
 8018962:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8018964:	2b09      	cmp	r3, #9
 8018966:	d123      	bne.n	80189b0 <mg_tls_parse_cert_der+0x238>
             memcmp(algo.value, "\x2A\x86\x48\x86\xF7\x0D\x01\x01\x0B", 9) ==
 8018968:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 801896a:	2209      	movs	r2, #9
 801896c:	4968      	ldr	r1, [pc, #416]	@ (8018b10 <mg_tls_parse_cert_der+0x398>)
 801896e:	4618      	mov	r0, r3
 8018970:	f00b fd62 	bl	8024438 <memcmp>
 8018974:	4603      	mov	r3, r0
  } else if (algo.len == 9 &&
 8018976:	2b00      	cmp	r3, #0
 8018978:	d11a      	bne.n	80189b0 <mg_tls_parse_cert_der+0x238>
                 0) {
    MG_VERBOSE(("sig algo: RSA with SHA256"));
 801897a:	4b5d      	ldr	r3, [pc, #372]	@ (8018af0 <mg_tls_parse_cert_der+0x378>)
 801897c:	681b      	ldr	r3, [r3, #0]
 801897e:	2b03      	cmp	r3, #3
 8018980:	dd09      	ble.n	8018996 <mg_tls_parse_cert_der+0x21e>
 8018982:	4b5c      	ldr	r3, [pc, #368]	@ (8018af4 <mg_tls_parse_cert_der+0x37c>)
 8018984:	f642 7278 	movw	r2, #12152	@ 0x2f78
 8018988:	495b      	ldr	r1, [pc, #364]	@ (8018af8 <mg_tls_parse_cert_der+0x380>)
 801898a:	2004      	movs	r0, #4
 801898c:	f7f4 fc0e 	bl	800d1ac <mg_log_prefix>
 8018990:	4860      	ldr	r0, [pc, #384]	@ (8018b14 <mg_tls_parse_cert_der+0x39c>)
 8018992:	f7f4 fc5b 	bl	800d24c <mg_log>
    mg_sha256(cert->tbshash, tbs, tbssz);
 8018996:	68fb      	ldr	r3, [r7, #12]
 8018998:	3328      	adds	r3, #40	@ 0x28
 801899a:	f8d7 209c 	ldr.w	r2, [r7, #156]	@ 0x9c
 801899e:	f8d7 10a0 	ldr.w	r1, [r7, #160]	@ 0xa0
 80189a2:	4618      	mov	r0, r3
 80189a4:	f7fb feef 	bl	8014786 <mg_sha256>
    cert->tbshashsz = 32;
 80189a8:	68fb      	ldr	r3, [r7, #12]
 80189aa:	2220      	movs	r2, #32
 80189ac:	659a      	str	r2, [r3, #88]	@ 0x58
 80189ae:	e061      	b.n	8018a74 <mg_tls_parse_cert_der+0x2fc>
  } else if (algo.len == 8 &&
 80189b0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80189b2:	2b08      	cmp	r3, #8
 80189b4:	d123      	bne.n	80189fe <mg_tls_parse_cert_der+0x286>
             memcmp(algo.value, "\x2A\x86\x48\xCE\x3D\x04\x03\x03", 8) == 0) {
 80189b6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80189b8:	2208      	movs	r2, #8
 80189ba:	4957      	ldr	r1, [pc, #348]	@ (8018b18 <mg_tls_parse_cert_der+0x3a0>)
 80189bc:	4618      	mov	r0, r3
 80189be:	f00b fd3b 	bl	8024438 <memcmp>
 80189c2:	4603      	mov	r3, r0
  } else if (algo.len == 8 &&
 80189c4:	2b00      	cmp	r3, #0
 80189c6:	d11a      	bne.n	80189fe <mg_tls_parse_cert_der+0x286>
    MG_VERBOSE(("sig algo: ECDSA with SHA384"));
 80189c8:	4b49      	ldr	r3, [pc, #292]	@ (8018af0 <mg_tls_parse_cert_der+0x378>)
 80189ca:	681b      	ldr	r3, [r3, #0]
 80189cc:	2b03      	cmp	r3, #3
 80189ce:	dd09      	ble.n	80189e4 <mg_tls_parse_cert_der+0x26c>
 80189d0:	4b48      	ldr	r3, [pc, #288]	@ (8018af4 <mg_tls_parse_cert_der+0x37c>)
 80189d2:	f642 727d 	movw	r2, #12157	@ 0x2f7d
 80189d6:	4948      	ldr	r1, [pc, #288]	@ (8018af8 <mg_tls_parse_cert_der+0x380>)
 80189d8:	2004      	movs	r0, #4
 80189da:	f7f4 fbe7 	bl	800d1ac <mg_log_prefix>
 80189de:	484f      	ldr	r0, [pc, #316]	@ (8018b1c <mg_tls_parse_cert_der+0x3a4>)
 80189e0:	f7f4 fc34 	bl	800d24c <mg_log>
    mg_sha384(cert->tbshash, tbs, tbssz);
 80189e4:	68fb      	ldr	r3, [r7, #12]
 80189e6:	3328      	adds	r3, #40	@ 0x28
 80189e8:	f8d7 209c 	ldr.w	r2, [r7, #156]	@ 0x9c
 80189ec:	f8d7 10a0 	ldr.w	r1, [r7, #160]	@ 0xa0
 80189f0:	4618      	mov	r0, r3
 80189f2:	f7fc ff9c 	bl	801592e <mg_sha384>
    cert->tbshashsz = 48;
 80189f6:	68fb      	ldr	r3, [r7, #12]
 80189f8:	2230      	movs	r2, #48	@ 0x30
 80189fa:	659a      	str	r2, [r3, #88]	@ 0x58
 80189fc:	e03a      	b.n	8018a74 <mg_tls_parse_cert_der+0x2fc>
  } else if (algo.len == 9 &&
 80189fe:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8018a00:	2b09      	cmp	r3, #9
 8018a02:	d123      	bne.n	8018a4c <mg_tls_parse_cert_der+0x2d4>
             memcmp(algo.value, "\x2A\x86\x48\x86\xF7\x0D\x01\x01\x0C", 9) ==
 8018a04:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8018a06:	2209      	movs	r2, #9
 8018a08:	4945      	ldr	r1, [pc, #276]	@ (8018b20 <mg_tls_parse_cert_der+0x3a8>)
 8018a0a:	4618      	mov	r0, r3
 8018a0c:	f00b fd14 	bl	8024438 <memcmp>
 8018a10:	4603      	mov	r3, r0
  } else if (algo.len == 9 &&
 8018a12:	2b00      	cmp	r3, #0
 8018a14:	d11a      	bne.n	8018a4c <mg_tls_parse_cert_der+0x2d4>
                 0) {
    MG_VERBOSE(("sig algo: RSA with SHA384"));
 8018a16:	4b36      	ldr	r3, [pc, #216]	@ (8018af0 <mg_tls_parse_cert_der+0x378>)
 8018a18:	681b      	ldr	r3, [r3, #0]
 8018a1a:	2b03      	cmp	r3, #3
 8018a1c:	dd09      	ble.n	8018a32 <mg_tls_parse_cert_der+0x2ba>
 8018a1e:	4b35      	ldr	r3, [pc, #212]	@ (8018af4 <mg_tls_parse_cert_der+0x37c>)
 8018a20:	f642 7283 	movw	r2, #12163	@ 0x2f83
 8018a24:	4934      	ldr	r1, [pc, #208]	@ (8018af8 <mg_tls_parse_cert_der+0x380>)
 8018a26:	2004      	movs	r0, #4
 8018a28:	f7f4 fbc0 	bl	800d1ac <mg_log_prefix>
 8018a2c:	483d      	ldr	r0, [pc, #244]	@ (8018b24 <mg_tls_parse_cert_der+0x3ac>)
 8018a2e:	f7f4 fc0d 	bl	800d24c <mg_log>
    mg_sha384(cert->tbshash, tbs, tbssz);
 8018a32:	68fb      	ldr	r3, [r7, #12]
 8018a34:	3328      	adds	r3, #40	@ 0x28
 8018a36:	f8d7 209c 	ldr.w	r2, [r7, #156]	@ 0x9c
 8018a3a:	f8d7 10a0 	ldr.w	r1, [r7, #160]	@ 0xa0
 8018a3e:	4618      	mov	r0, r3
 8018a40:	f7fc ff75 	bl	801592e <mg_sha384>
    cert->tbshashsz = 48;
 8018a44:	68fb      	ldr	r3, [r7, #12]
 8018a46:	2230      	movs	r2, #48	@ 0x30
 8018a48:	659a      	str	r2, [r3, #88]	@ 0x58
 8018a4a:	e013      	b.n	8018a74 <mg_tls_parse_cert_der+0x2fc>
  } else {
    MG_ERROR(
 8018a4c:	4b28      	ldr	r3, [pc, #160]	@ (8018af0 <mg_tls_parse_cert_der+0x378>)
 8018a4e:	681b      	ldr	r3, [r3, #0]
 8018a50:	2b00      	cmp	r3, #0
 8018a52:	dd0c      	ble.n	8018a6e <mg_tls_parse_cert_der+0x2f6>
 8018a54:	4b27      	ldr	r3, [pc, #156]	@ (8018af4 <mg_tls_parse_cert_der+0x37c>)
 8018a56:	f642 7287 	movw	r2, #12167	@ 0x2f87
 8018a5a:	4927      	ldr	r1, [pc, #156]	@ (8018af8 <mg_tls_parse_cert_der+0x380>)
 8018a5c:	2001      	movs	r0, #1
 8018a5e:	f7f4 fba5 	bl	800d1ac <mg_log_prefix>
 8018a62:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8018a64:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8018a66:	4925      	ldr	r1, [pc, #148]	@ (8018afc <mg_tls_parse_cert_der+0x384>)
 8018a68:	482f      	ldr	r0, [pc, #188]	@ (8018b28 <mg_tls_parse_cert_der+0x3b0>)
 8018a6a:	f7f4 fbef 	bl	800d24c <mg_log>
        ("sig algo: unsupported OID: %M", mg_print_hex, algo.len, algo.value));
    return -1;
 8018a6e:	f04f 33ff 	mov.w	r3, #4294967295
 8018a72:	e24b      	b.n	8018f0c <mg_tls_parse_cert_der+0x794>
  }
  MG_VERBOSE(("tbs hash: %M", mg_print_hex, cert->tbshashsz, cert->tbshash));
 8018a74:	4b1e      	ldr	r3, [pc, #120]	@ (8018af0 <mg_tls_parse_cert_der+0x378>)
 8018a76:	681b      	ldr	r3, [r3, #0]
 8018a78:	2b03      	cmp	r3, #3
 8018a7a:	dd0e      	ble.n	8018a9a <mg_tls_parse_cert_der+0x322>
 8018a7c:	4b1d      	ldr	r3, [pc, #116]	@ (8018af4 <mg_tls_parse_cert_der+0x37c>)
 8018a7e:	f642 728b 	movw	r2, #12171	@ 0x2f8b
 8018a82:	491d      	ldr	r1, [pc, #116]	@ (8018af8 <mg_tls_parse_cert_der+0x380>)
 8018a84:	2004      	movs	r0, #4
 8018a86:	f7f4 fb91 	bl	800d1ac <mg_log_prefix>
 8018a8a:	68fb      	ldr	r3, [r7, #12]
 8018a8c:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8018a8e:	68fb      	ldr	r3, [r7, #12]
 8018a90:	3328      	adds	r3, #40	@ 0x28
 8018a92:	491a      	ldr	r1, [pc, #104]	@ (8018afc <mg_tls_parse_cert_der+0x384>)
 8018a94:	4825      	ldr	r0, [pc, #148]	@ (8018b2c <mg_tls_parse_cert_der+0x3b4>)
 8018a96:	f7f4 fbd9 	bl	800d24c <mg_log>

  // issuer
  if (mg_der_next(&tbs_cert, &field) <= 0 || field.type != 0x30) return -1;
 8018a9a:	f107 0278 	add.w	r2, r7, #120	@ 0x78
 8018a9e:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 8018aa2:	4611      	mov	r1, r2
 8018aa4:	4618      	mov	r0, r3
 8018aa6:	f7fd fd87 	bl	80165b8 <mg_der_next>
 8018aaa:	4603      	mov	r3, r0
 8018aac:	2b00      	cmp	r3, #0
 8018aae:	dd03      	ble.n	8018ab8 <mg_tls_parse_cert_der+0x340>
 8018ab0:	f897 3078 	ldrb.w	r3, [r7, #120]	@ 0x78
 8018ab4:	2b30      	cmp	r3, #48	@ 0x30
 8018ab6:	d002      	beq.n	8018abe <mg_tls_parse_cert_der+0x346>
 8018ab8:	f04f 33ff 	mov.w	r3, #4294967295
 8018abc:	e226      	b.n	8018f0c <mg_tls_parse_cert_der+0x794>
  mg_der_debug_cert_name("issuer", &field);
 8018abe:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 8018ac2:	4619      	mov	r1, r3
 8018ac4:	481a      	ldr	r0, [pc, #104]	@ (8018b30 <mg_tls_parse_cert_der+0x3b8>)
 8018ac6:	f7ff fdb1 	bl	801862c <mg_der_debug_cert_name>

  // validity dates (before/after)
  if (mg_der_next(&tbs_cert, &field) <= 0 || field.type != 0x30) return -1;
 8018aca:	f107 0278 	add.w	r2, r7, #120	@ 0x78
 8018ace:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 8018ad2:	4611      	mov	r1, r2
 8018ad4:	4618      	mov	r0, r3
 8018ad6:	f7fd fd6f 	bl	80165b8 <mg_der_next>
 8018ada:	4603      	mov	r3, r0
 8018adc:	2b00      	cmp	r3, #0
 8018ade:	dd03      	ble.n	8018ae8 <mg_tls_parse_cert_der+0x370>
 8018ae0:	f897 3078 	ldrb.w	r3, [r7, #120]	@ 0x78
 8018ae4:	2b30      	cmp	r3, #48	@ 0x30
 8018ae6:	d025      	beq.n	8018b34 <mg_tls_parse_cert_der+0x3bc>
 8018ae8:	f04f 33ff 	mov.w	r3, #4294967295
 8018aec:	e20e      	b.n	8018f0c <mg_tls_parse_cert_der+0x794>
 8018aee:	bf00      	nop
 8018af0:	20000258 	.word	0x20000258
 8018af4:	08028a30 	.word	0x08028a30
 8018af8:	08025140 	.word	0x08025140
 8018afc:	08012631 	.word	0x08012631
 8018b00:	08027084 	.word	0x08027084
 8018b04:	08027094 	.word	0x08027094
 8018b08:	080270a8 	.word	0x080270a8
 8018b0c:	080270b4 	.word	0x080270b4
 8018b10:	080270d0 	.word	0x080270d0
 8018b14:	080270dc 	.word	0x080270dc
 8018b18:	080270f8 	.word	0x080270f8
 8018b1c:	08027104 	.word	0x08027104
 8018b20:	08027120 	.word	0x08027120
 8018b24:	0802712c 	.word	0x0802712c
 8018b28:	08027148 	.word	0x08027148
 8018b2c:	08027168 	.word	0x08027168
 8018b30:	08027178 	.word	0x08027178
  if (1) {
    struct mg_der_tlv before, after;
    mg_der_next(&field, &before);
 8018b34:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 8018b38:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 8018b3c:	4611      	mov	r1, r2
 8018b3e:	4618      	mov	r0, r3
 8018b40:	f7fd fd3a 	bl	80165b8 <mg_der_next>
    mg_der_next(&field, &after);
 8018b44:	f107 0218 	add.w	r2, r7, #24
 8018b48:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 8018b4c:	4611      	mov	r1, r2
 8018b4e:	4618      	mov	r0, r3
 8018b50:	f7fd fd32 	bl	80165b8 <mg_der_next>
    if (after.len == 13 && memcmp(after.value, "250101000000Z", 13) < 0) {
 8018b54:	69fb      	ldr	r3, [r7, #28]
 8018b56:	2b0d      	cmp	r3, #13
 8018b58:	d124      	bne.n	8018ba4 <mg_tls_parse_cert_der+0x42c>
 8018b5a:	6a3b      	ldr	r3, [r7, #32]
 8018b5c:	220d      	movs	r2, #13
 8018b5e:	49a9      	ldr	r1, [pc, #676]	@ (8018e04 <mg_tls_parse_cert_der+0x68c>)
 8018b60:	4618      	mov	r0, r3
 8018b62:	f00b fc69 	bl	8024438 <memcmp>
 8018b66:	4603      	mov	r3, r0
 8018b68:	2b00      	cmp	r3, #0
 8018b6a:	da1b      	bge.n	8018ba4 <mg_tls_parse_cert_der+0x42c>
      MG_ERROR(("invalid validity dates: before=%M after=%M", mg_print_hex,
 8018b6c:	4ba6      	ldr	r3, [pc, #664]	@ (8018e08 <mg_tls_parse_cert_der+0x690>)
 8018b6e:	681b      	ldr	r3, [r3, #0]
 8018b70:	2b00      	cmp	r3, #0
 8018b72:	dd14      	ble.n	8018b9e <mg_tls_parse_cert_der+0x426>
 8018b74:	4ba5      	ldr	r3, [pc, #660]	@ (8018e0c <mg_tls_parse_cert_der+0x694>)
 8018b76:	f642 7298 	movw	r2, #12184	@ 0x2f98
 8018b7a:	49a5      	ldr	r1, [pc, #660]	@ (8018e10 <mg_tls_parse_cert_der+0x698>)
 8018b7c:	2001      	movs	r0, #1
 8018b7e:	f7f4 fb15 	bl	800d1ac <mg_log_prefix>
 8018b82:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8018b84:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8018b86:	69fb      	ldr	r3, [r7, #28]
 8018b88:	6a3a      	ldr	r2, [r7, #32]
 8018b8a:	9202      	str	r2, [sp, #8]
 8018b8c:	9301      	str	r3, [sp, #4]
 8018b8e:	4ba1      	ldr	r3, [pc, #644]	@ (8018e14 <mg_tls_parse_cert_der+0x69c>)
 8018b90:	9300      	str	r3, [sp, #0]
 8018b92:	4603      	mov	r3, r0
 8018b94:	460a      	mov	r2, r1
 8018b96:	499f      	ldr	r1, [pc, #636]	@ (8018e14 <mg_tls_parse_cert_der+0x69c>)
 8018b98:	489f      	ldr	r0, [pc, #636]	@ (8018e18 <mg_tls_parse_cert_der+0x6a0>)
 8018b9a:	f7f4 fb57 	bl	800d24c <mg_log>
                before.len, before.value, mg_print_hex, after.len,
                after.value));
      return -1;
 8018b9e:	f04f 33ff 	mov.w	r3, #4294967295
 8018ba2:	e1b3      	b.n	8018f0c <mg_tls_parse_cert_der+0x794>
    }
  }

  // subject
  if (mg_der_next(&tbs_cert, &field) <= 0 || field.type != 0x30) return -1;
 8018ba4:	f107 0278 	add.w	r2, r7, #120	@ 0x78
 8018ba8:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 8018bac:	4611      	mov	r1, r2
 8018bae:	4618      	mov	r0, r3
 8018bb0:	f7fd fd02 	bl	80165b8 <mg_der_next>
 8018bb4:	4603      	mov	r3, r0
 8018bb6:	2b00      	cmp	r3, #0
 8018bb8:	dd03      	ble.n	8018bc2 <mg_tls_parse_cert_der+0x44a>
 8018bba:	f897 3078 	ldrb.w	r3, [r7, #120]	@ 0x78
 8018bbe:	2b30      	cmp	r3, #48	@ 0x30
 8018bc0:	d002      	beq.n	8018bc8 <mg_tls_parse_cert_der+0x450>
 8018bc2:	f04f 33ff 	mov.w	r3, #4294967295
 8018bc6:	e1a1      	b.n	8018f0c <mg_tls_parse_cert_der+0x794>
  cert->subj = field;
 8018bc8:	68fb      	ldr	r3, [r7, #12]
 8018bca:	3314      	adds	r3, #20
 8018bcc:	f107 0278 	add.w	r2, r7, #120	@ 0x78
 8018bd0:	ca07      	ldmia	r2, {r0, r1, r2}
 8018bd2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
  mg_der_debug_cert_name("subject", &field);
 8018bd6:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 8018bda:	4619      	mov	r1, r3
 8018bdc:	488f      	ldr	r0, [pc, #572]	@ (8018e1c <mg_tls_parse_cert_der+0x6a4>)
 8018bde:	f7ff fd25 	bl	801862c <mg_der_debug_cert_name>

  // subject public key info
  if (mg_der_next(&tbs_cert, &field) <= 0 || field.type != 0x30) return -1;
 8018be2:	f107 0278 	add.w	r2, r7, #120	@ 0x78
 8018be6:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 8018bea:	4611      	mov	r1, r2
 8018bec:	4618      	mov	r0, r3
 8018bee:	f7fd fce3 	bl	80165b8 <mg_der_next>
 8018bf2:	4603      	mov	r3, r0
 8018bf4:	2b00      	cmp	r3, #0
 8018bf6:	dd03      	ble.n	8018c00 <mg_tls_parse_cert_der+0x488>
 8018bf8:	f897 3078 	ldrb.w	r3, [r7, #120]	@ 0x78
 8018bfc:	2b30      	cmp	r3, #48	@ 0x30
 8018bfe:	d002      	beq.n	8018c06 <mg_tls_parse_cert_der+0x48e>
 8018c00:	f04f 33ff 	mov.w	r3, #4294967295
 8018c04:	e182      	b.n	8018f0c <mg_tls_parse_cert_der+0x794>

  if (mg_der_next(&field, &pki) <= 0 || pki.type != 0x30) return -1;
 8018c06:	f107 0260 	add.w	r2, r7, #96	@ 0x60
 8018c0a:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 8018c0e:	4611      	mov	r1, r2
 8018c10:	4618      	mov	r0, r3
 8018c12:	f7fd fcd1 	bl	80165b8 <mg_der_next>
 8018c16:	4603      	mov	r3, r0
 8018c18:	2b00      	cmp	r3, #0
 8018c1a:	dd03      	ble.n	8018c24 <mg_tls_parse_cert_der+0x4ac>
 8018c1c:	f897 3060 	ldrb.w	r3, [r7, #96]	@ 0x60
 8018c20:	2b30      	cmp	r3, #48	@ 0x30
 8018c22:	d002      	beq.n	8018c2a <mg_tls_parse_cert_der+0x4b2>
 8018c24:	f04f 33ff 	mov.w	r3, #4294967295
 8018c28:	e170      	b.n	8018f0c <mg_tls_parse_cert_der+0x794>
  if (mg_der_next(&pki, &pki_algo) <= 0 || pki_algo.type != 0x06) return -1;
 8018c2a:	f107 0254 	add.w	r2, r7, #84	@ 0x54
 8018c2e:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8018c32:	4611      	mov	r1, r2
 8018c34:	4618      	mov	r0, r3
 8018c36:	f7fd fcbf 	bl	80165b8 <mg_der_next>
 8018c3a:	4603      	mov	r3, r0
 8018c3c:	2b00      	cmp	r3, #0
 8018c3e:	dd03      	ble.n	8018c48 <mg_tls_parse_cert_der+0x4d0>
 8018c40:	f897 3054 	ldrb.w	r3, [r7, #84]	@ 0x54
 8018c44:	2b06      	cmp	r3, #6
 8018c46:	d002      	beq.n	8018c4e <mg_tls_parse_cert_der+0x4d6>
 8018c48:	f04f 33ff 	mov.w	r3, #4294967295
 8018c4c:	e15e      	b.n	8018f0c <mg_tls_parse_cert_der+0x794>

  // public key algorithm
  MG_VERBOSE(("pk algo (oid): %M", mg_print_hex, pki_algo.len, pki_algo.value));
 8018c4e:	4b6e      	ldr	r3, [pc, #440]	@ (8018e08 <mg_tls_parse_cert_der+0x690>)
 8018c50:	681b      	ldr	r3, [r3, #0]
 8018c52:	2b03      	cmp	r3, #3
 8018c54:	dd0c      	ble.n	8018c70 <mg_tls_parse_cert_der+0x4f8>
 8018c56:	4b6d      	ldr	r3, [pc, #436]	@ (8018e0c <mg_tls_parse_cert_der+0x694>)
 8018c58:	f642 72ab 	movw	r2, #12203	@ 0x2fab
 8018c5c:	496c      	ldr	r1, [pc, #432]	@ (8018e10 <mg_tls_parse_cert_der+0x698>)
 8018c5e:	2004      	movs	r0, #4
 8018c60:	f7f4 faa4 	bl	800d1ac <mg_log_prefix>
 8018c64:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8018c66:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8018c68:	496a      	ldr	r1, [pc, #424]	@ (8018e14 <mg_tls_parse_cert_der+0x69c>)
 8018c6a:	486d      	ldr	r0, [pc, #436]	@ (8018e20 <mg_tls_parse_cert_der+0x6a8>)
 8018c6c:	f7f4 faee 	bl	800d24c <mg_log>
  if (pki_algo.len == 8 &&
 8018c70:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8018c72:	2b08      	cmp	r3, #8
 8018c74:	d11a      	bne.n	8018cac <mg_tls_parse_cert_der+0x534>
      memcmp(pki_algo.value, "\x2A\x86\x48\xCE\x3D\x03\x01\x07", 8) == 0) {
 8018c76:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8018c78:	2208      	movs	r2, #8
 8018c7a:	496a      	ldr	r1, [pc, #424]	@ (8018e24 <mg_tls_parse_cert_der+0x6ac>)
 8018c7c:	4618      	mov	r0, r3
 8018c7e:	f00b fbdb 	bl	8024438 <memcmp>
 8018c82:	4603      	mov	r3, r0
  if (pki_algo.len == 8 &&
 8018c84:	2b00      	cmp	r3, #0
 8018c86:	d111      	bne.n	8018cac <mg_tls_parse_cert_der+0x534>
    cert->is_ec_pubkey = 1;
 8018c88:	68fb      	ldr	r3, [r7, #12]
 8018c8a:	2201      	movs	r2, #1
 8018c8c:	601a      	str	r2, [r3, #0]
    MG_VERBOSE(("pk algo: ECDSA secp256r1"));
 8018c8e:	4b5e      	ldr	r3, [pc, #376]	@ (8018e08 <mg_tls_parse_cert_der+0x690>)
 8018c90:	681b      	ldr	r3, [r3, #0]
 8018c92:	2b03      	cmp	r3, #3
 8018c94:	dd78      	ble.n	8018d88 <mg_tls_parse_cert_der+0x610>
 8018c96:	4b5d      	ldr	r3, [pc, #372]	@ (8018e0c <mg_tls_parse_cert_der+0x694>)
 8018c98:	f642 72af 	movw	r2, #12207	@ 0x2faf
 8018c9c:	495c      	ldr	r1, [pc, #368]	@ (8018e10 <mg_tls_parse_cert_der+0x698>)
 8018c9e:	2004      	movs	r0, #4
 8018ca0:	f7f4 fa84 	bl	800d1ac <mg_log_prefix>
 8018ca4:	4860      	ldr	r0, [pc, #384]	@ (8018e28 <mg_tls_parse_cert_der+0x6b0>)
 8018ca6:	f7f4 fad1 	bl	800d24c <mg_log>
 8018caa:	e06d      	b.n	8018d88 <mg_tls_parse_cert_der+0x610>
  } else if (pki_algo.len == 8 &&
 8018cac:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8018cae:	2b08      	cmp	r3, #8
 8018cb0:	d11a      	bne.n	8018ce8 <mg_tls_parse_cert_der+0x570>
             memcmp(pki_algo.value, "\x2A\x86\x48\xCE\x3D\x03\x01\x08", 8) ==
 8018cb2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8018cb4:	2208      	movs	r2, #8
 8018cb6:	495d      	ldr	r1, [pc, #372]	@ (8018e2c <mg_tls_parse_cert_der+0x6b4>)
 8018cb8:	4618      	mov	r0, r3
 8018cba:	f00b fbbd 	bl	8024438 <memcmp>
 8018cbe:	4603      	mov	r3, r0
  } else if (pki_algo.len == 8 &&
 8018cc0:	2b00      	cmp	r3, #0
 8018cc2:	d111      	bne.n	8018ce8 <mg_tls_parse_cert_der+0x570>
                 0) {
    cert->is_ec_pubkey = 1;
 8018cc4:	68fb      	ldr	r3, [r7, #12]
 8018cc6:	2201      	movs	r2, #1
 8018cc8:	601a      	str	r2, [r3, #0]
    MG_VERBOSE(("pk algo: ECDSA secp384r1"));
 8018cca:	4b4f      	ldr	r3, [pc, #316]	@ (8018e08 <mg_tls_parse_cert_der+0x690>)
 8018ccc:	681b      	ldr	r3, [r3, #0]
 8018cce:	2b03      	cmp	r3, #3
 8018cd0:	dd5a      	ble.n	8018d88 <mg_tls_parse_cert_der+0x610>
 8018cd2:	4b4e      	ldr	r3, [pc, #312]	@ (8018e0c <mg_tls_parse_cert_der+0x694>)
 8018cd4:	f642 72b4 	movw	r2, #12212	@ 0x2fb4
 8018cd8:	494d      	ldr	r1, [pc, #308]	@ (8018e10 <mg_tls_parse_cert_der+0x698>)
 8018cda:	2004      	movs	r0, #4
 8018cdc:	f7f4 fa66 	bl	800d1ac <mg_log_prefix>
 8018ce0:	4853      	ldr	r0, [pc, #332]	@ (8018e30 <mg_tls_parse_cert_der+0x6b8>)
 8018ce2:	f7f4 fab3 	bl	800d24c <mg_log>
 8018ce6:	e04f      	b.n	8018d88 <mg_tls_parse_cert_der+0x610>
  } else if (pki_algo.len == 7 &&
 8018ce8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8018cea:	2b07      	cmp	r3, #7
 8018cec:	d11a      	bne.n	8018d24 <mg_tls_parse_cert_der+0x5ac>
             memcmp(pki_algo.value, "\x2A\x86\x48\xCE\x3D\x02\x01", 7) == 0) {
 8018cee:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8018cf0:	2207      	movs	r2, #7
 8018cf2:	4950      	ldr	r1, [pc, #320]	@ (8018e34 <mg_tls_parse_cert_der+0x6bc>)
 8018cf4:	4618      	mov	r0, r3
 8018cf6:	f00b fb9f 	bl	8024438 <memcmp>
 8018cfa:	4603      	mov	r3, r0
  } else if (pki_algo.len == 7 &&
 8018cfc:	2b00      	cmp	r3, #0
 8018cfe:	d111      	bne.n	8018d24 <mg_tls_parse_cert_der+0x5ac>
    cert->is_ec_pubkey = 1;
 8018d00:	68fb      	ldr	r3, [r7, #12]
 8018d02:	2201      	movs	r2, #1
 8018d04:	601a      	str	r2, [r3, #0]
    MG_VERBOSE(("pk algo: EC public key"));
 8018d06:	4b40      	ldr	r3, [pc, #256]	@ (8018e08 <mg_tls_parse_cert_der+0x690>)
 8018d08:	681b      	ldr	r3, [r3, #0]
 8018d0a:	2b03      	cmp	r3, #3
 8018d0c:	dd3c      	ble.n	8018d88 <mg_tls_parse_cert_der+0x610>
 8018d0e:	4b3f      	ldr	r3, [pc, #252]	@ (8018e0c <mg_tls_parse_cert_der+0x694>)
 8018d10:	f642 72b8 	movw	r2, #12216	@ 0x2fb8
 8018d14:	493e      	ldr	r1, [pc, #248]	@ (8018e10 <mg_tls_parse_cert_der+0x698>)
 8018d16:	2004      	movs	r0, #4
 8018d18:	f7f4 fa48 	bl	800d1ac <mg_log_prefix>
 8018d1c:	4846      	ldr	r0, [pc, #280]	@ (8018e38 <mg_tls_parse_cert_der+0x6c0>)
 8018d1e:	f7f4 fa95 	bl	800d24c <mg_log>
 8018d22:	e031      	b.n	8018d88 <mg_tls_parse_cert_der+0x610>
  } else if (pki_algo.len == 9 &&
 8018d24:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8018d26:	2b09      	cmp	r3, #9
 8018d28:	d11a      	bne.n	8018d60 <mg_tls_parse_cert_der+0x5e8>
             memcmp(pki_algo.value, "\x2A\x86\x48\x86\xF7\x0D\x01\x01\x01",
 8018d2a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8018d2c:	2209      	movs	r2, #9
 8018d2e:	4943      	ldr	r1, [pc, #268]	@ (8018e3c <mg_tls_parse_cert_der+0x6c4>)
 8018d30:	4618      	mov	r0, r3
 8018d32:	f00b fb81 	bl	8024438 <memcmp>
 8018d36:	4603      	mov	r3, r0
  } else if (pki_algo.len == 9 &&
 8018d38:	2b00      	cmp	r3, #0
 8018d3a:	d111      	bne.n	8018d60 <mg_tls_parse_cert_der+0x5e8>
                    9) == 0) {
    cert->is_ec_pubkey = 0;
 8018d3c:	68fb      	ldr	r3, [r7, #12]
 8018d3e:	2200      	movs	r2, #0
 8018d40:	601a      	str	r2, [r3, #0]
    MG_VERBOSE(("pk algo: RSA"));
 8018d42:	4b31      	ldr	r3, [pc, #196]	@ (8018e08 <mg_tls_parse_cert_der+0x690>)
 8018d44:	681b      	ldr	r3, [r3, #0]
 8018d46:	2b03      	cmp	r3, #3
 8018d48:	dd1e      	ble.n	8018d88 <mg_tls_parse_cert_der+0x610>
 8018d4a:	4b30      	ldr	r3, [pc, #192]	@ (8018e0c <mg_tls_parse_cert_der+0x694>)
 8018d4c:	f642 72bd 	movw	r2, #12221	@ 0x2fbd
 8018d50:	492f      	ldr	r1, [pc, #188]	@ (8018e10 <mg_tls_parse_cert_der+0x698>)
 8018d52:	2004      	movs	r0, #4
 8018d54:	f7f4 fa2a 	bl	800d1ac <mg_log_prefix>
 8018d58:	4839      	ldr	r0, [pc, #228]	@ (8018e40 <mg_tls_parse_cert_der+0x6c8>)
 8018d5a:	f7f4 fa77 	bl	800d24c <mg_log>
 8018d5e:	e013      	b.n	8018d88 <mg_tls_parse_cert_der+0x610>
  } else {
    MG_ERROR(("unsupported pk algo: %M", mg_print_hex, pki_algo.len,
 8018d60:	4b29      	ldr	r3, [pc, #164]	@ (8018e08 <mg_tls_parse_cert_der+0x690>)
 8018d62:	681b      	ldr	r3, [r3, #0]
 8018d64:	2b00      	cmp	r3, #0
 8018d66:	dd0c      	ble.n	8018d82 <mg_tls_parse_cert_der+0x60a>
 8018d68:	4b28      	ldr	r3, [pc, #160]	@ (8018e0c <mg_tls_parse_cert_der+0x694>)
 8018d6a:	f642 72bf 	movw	r2, #12223	@ 0x2fbf
 8018d6e:	4928      	ldr	r1, [pc, #160]	@ (8018e10 <mg_tls_parse_cert_der+0x698>)
 8018d70:	2001      	movs	r0, #1
 8018d72:	f7f4 fa1b 	bl	800d1ac <mg_log_prefix>
 8018d76:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8018d78:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8018d7a:	4926      	ldr	r1, [pc, #152]	@ (8018e14 <mg_tls_parse_cert_der+0x69c>)
 8018d7c:	4831      	ldr	r0, [pc, #196]	@ (8018e44 <mg_tls_parse_cert_der+0x6cc>)
 8018d7e:	f7f4 fa65 	bl	800d24c <mg_log>
              pki_algo.value));
    return -1;
 8018d82:	f04f 33ff 	mov.w	r3, #4294967295
 8018d86:	e0c1      	b.n	8018f0c <mg_tls_parse_cert_der+0x794>
  }

  // Parse public key
  if (cert->is_ec_pubkey) {
 8018d88:	68fb      	ldr	r3, [r7, #12]
 8018d8a:	681b      	ldr	r3, [r3, #0]
 8018d8c:	2b00      	cmp	r3, #0
 8018d8e:	d011      	beq.n	8018db4 <mg_tls_parse_cert_der+0x63c>
    if (mg_der_next(&pki, &pki_curve) <= 0 || pki_curve.type != 0x06) return -1;
 8018d90:	f107 023c 	add.w	r2, r7, #60	@ 0x3c
 8018d94:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8018d98:	4611      	mov	r1, r2
 8018d9a:	4618      	mov	r0, r3
 8018d9c:	f7fd fc0c 	bl	80165b8 <mg_der_next>
 8018da0:	4603      	mov	r3, r0
 8018da2:	2b00      	cmp	r3, #0
 8018da4:	dd03      	ble.n	8018dae <mg_tls_parse_cert_der+0x636>
 8018da6:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 8018daa:	2b06      	cmp	r3, #6
 8018dac:	d002      	beq.n	8018db4 <mg_tls_parse_cert_der+0x63c>
 8018dae:	f04f 33ff 	mov.w	r3, #4294967295
 8018db2:	e0ab      	b.n	8018f0c <mg_tls_parse_cert_der+0x794>
  }
  if (mg_der_next(&field, &pki_key) <= 0 || pki_key.type != 0x03) return -1;
 8018db4:	f107 0248 	add.w	r2, r7, #72	@ 0x48
 8018db8:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 8018dbc:	4611      	mov	r1, r2
 8018dbe:	4618      	mov	r0, r3
 8018dc0:	f7fd fbfa 	bl	80165b8 <mg_der_next>
 8018dc4:	4603      	mov	r3, r0
 8018dc6:	2b00      	cmp	r3, #0
 8018dc8:	dd03      	ble.n	8018dd2 <mg_tls_parse_cert_der+0x65a>
 8018dca:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 8018dce:	2b03      	cmp	r3, #3
 8018dd0:	d002      	beq.n	8018dd8 <mg_tls_parse_cert_der+0x660>
 8018dd2:	f04f 33ff 	mov.w	r3, #4294967295
 8018dd6:	e099      	b.n	8018f0c <mg_tls_parse_cert_der+0x794>

  if (cert->is_ec_pubkey) {  // Skip leading 0x00 and 0x04 (=uncompressed)
 8018dd8:	68fb      	ldr	r3, [r7, #12]
 8018dda:	681b      	ldr	r3, [r3, #0]
 8018ddc:	2b00      	cmp	r3, #0
 8018dde:	d033      	beq.n	8018e48 <mg_tls_parse_cert_der+0x6d0>
    cert->pubkey = mg_str_n((char *) pki_key.value + 2, pki_key.len - 2);
 8018de0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8018de2:	1c99      	adds	r1, r3, #2
 8018de4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8018de6:	1e9a      	subs	r2, r3, #2
 8018de8:	68fc      	ldr	r4, [r7, #12]
 8018dea:	463b      	mov	r3, r7
 8018dec:	4618      	mov	r0, r3
 8018dee:	f7fc fdec 	bl	80159ca <mg_str_n>
 8018df2:	f104 030c 	add.w	r3, r4, #12
 8018df6:	463a      	mov	r2, r7
 8018df8:	e892 0003 	ldmia.w	r2, {r0, r1}
 8018dfc:	e883 0003 	stmia.w	r3, {r0, r1}
 8018e00:	e032      	b.n	8018e68 <mg_tls_parse_cert_der+0x6f0>
 8018e02:	bf00      	nop
 8018e04:	08027180 	.word	0x08027180
 8018e08:	20000258 	.word	0x20000258
 8018e0c:	08028a30 	.word	0x08028a30
 8018e10:	08025140 	.word	0x08025140
 8018e14:	08012631 	.word	0x08012631
 8018e18:	08027190 	.word	0x08027190
 8018e1c:	080271bc 	.word	0x080271bc
 8018e20:	080271c4 	.word	0x080271c4
 8018e24:	080271d8 	.word	0x080271d8
 8018e28:	080271e4 	.word	0x080271e4
 8018e2c:	08027200 	.word	0x08027200
 8018e30:	0802720c 	.word	0x0802720c
 8018e34:	08027228 	.word	0x08027228
 8018e38:	08027230 	.word	0x08027230
 8018e3c:	08027248 	.word	0x08027248
 8018e40:	08027254 	.word	0x08027254
 8018e44:	08027264 	.word	0x08027264
  } else {  // Skip leading 0x00 byte
    cert->pubkey = mg_str_n((char *) pki_key.value + 1, pki_key.len - 1);
 8018e48:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8018e4a:	1c59      	adds	r1, r3, #1
 8018e4c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8018e4e:	1e5a      	subs	r2, r3, #1
 8018e50:	68fc      	ldr	r4, [r7, #12]
 8018e52:	463b      	mov	r3, r7
 8018e54:	4618      	mov	r0, r3
 8018e56:	f7fc fdb8 	bl	80159ca <mg_str_n>
 8018e5a:	f104 030c 	add.w	r3, r4, #12
 8018e5e:	463a      	mov	r2, r7
 8018e60:	e892 0003 	ldmia.w	r2, {r0, r1}
 8018e64:	e883 0003 	stmia.w	r3, {r0, r1}
  }

  // Parse signature
  if (mg_der_next(&root, &field) <= 0 || field.type != 0x30) return -1;
 8018e68:	f107 0278 	add.w	r2, r7, #120	@ 0x78
 8018e6c:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 8018e70:	4611      	mov	r1, r2
 8018e72:	4618      	mov	r0, r3
 8018e74:	f7fd fba0 	bl	80165b8 <mg_der_next>
 8018e78:	4603      	mov	r3, r0
 8018e7a:	2b00      	cmp	r3, #0
 8018e7c:	dd03      	ble.n	8018e86 <mg_tls_parse_cert_der+0x70e>
 8018e7e:	f897 3078 	ldrb.w	r3, [r7, #120]	@ 0x78
 8018e82:	2b30      	cmp	r3, #48	@ 0x30
 8018e84:	d002      	beq.n	8018e8c <mg_tls_parse_cert_der+0x714>
 8018e86:	f04f 33ff 	mov.w	r3, #4294967295
 8018e8a:	e03f      	b.n	8018f0c <mg_tls_parse_cert_der+0x794>
  if (mg_der_next(&root, &raw_sig) <= 0 || raw_sig.type != 0x03) return -1;
 8018e8c:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8018e90:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 8018e94:	4611      	mov	r1, r2
 8018e96:	4618      	mov	r0, r3
 8018e98:	f7fd fb8e 	bl	80165b8 <mg_der_next>
 8018e9c:	4603      	mov	r3, r0
 8018e9e:	2b00      	cmp	r3, #0
 8018ea0:	dd03      	ble.n	8018eaa <mg_tls_parse_cert_der+0x732>
 8018ea2:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8018ea6:	2b03      	cmp	r3, #3
 8018ea8:	d002      	beq.n	8018eb0 <mg_tls_parse_cert_der+0x738>
 8018eaa:	f04f 33ff 	mov.w	r3, #4294967295
 8018eae:	e02d      	b.n	8018f0c <mg_tls_parse_cert_der+0x794>
  if (raw_sig.len < 1 || raw_sig.value[0] != 0x00) return -1;
 8018eb0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8018eb2:	2b00      	cmp	r3, #0
 8018eb4:	d003      	beq.n	8018ebe <mg_tls_parse_cert_der+0x746>
 8018eb6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8018eb8:	781b      	ldrb	r3, [r3, #0]
 8018eba:	2b00      	cmp	r3, #0
 8018ebc:	d002      	beq.n	8018ec4 <mg_tls_parse_cert_der+0x74c>
 8018ebe:	f04f 33ff 	mov.w	r3, #4294967295
 8018ec2:	e023      	b.n	8018f0c <mg_tls_parse_cert_der+0x794>

  cert->sig = mg_str_n((char *) raw_sig.value + 1, raw_sig.len - 1);
 8018ec4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8018ec6:	1c59      	adds	r1, r3, #1
 8018ec8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8018eca:	1e5a      	subs	r2, r3, #1
 8018ecc:	68fc      	ldr	r4, [r7, #12]
 8018ece:	463b      	mov	r3, r7
 8018ed0:	4618      	mov	r0, r3
 8018ed2:	f7fc fd7a 	bl	80159ca <mg_str_n>
 8018ed6:	f104 0320 	add.w	r3, r4, #32
 8018eda:	463a      	mov	r2, r7
 8018edc:	e892 0003 	ldmia.w	r2, {r0, r1}
 8018ee0:	e883 0003 	stmia.w	r3, {r0, r1}
  MG_VERBOSE(("sig: %M", mg_print_hex, cert->sig.len, cert->sig.buf));
 8018ee4:	4b0b      	ldr	r3, [pc, #44]	@ (8018f14 <mg_tls_parse_cert_der+0x79c>)
 8018ee6:	681b      	ldr	r3, [r3, #0]
 8018ee8:	2b03      	cmp	r3, #3
 8018eea:	dd0e      	ble.n	8018f0a <mg_tls_parse_cert_der+0x792>
 8018eec:	4b0a      	ldr	r3, [pc, #40]	@ (8018f18 <mg_tls_parse_cert_der+0x7a0>)
 8018eee:	f642 72d6 	movw	r2, #12246	@ 0x2fd6
 8018ef2:	490a      	ldr	r1, [pc, #40]	@ (8018f1c <mg_tls_parse_cert_der+0x7a4>)
 8018ef4:	2004      	movs	r0, #4
 8018ef6:	f7f4 f959 	bl	800d1ac <mg_log_prefix>
 8018efa:	68fb      	ldr	r3, [r7, #12]
 8018efc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8018efe:	68fb      	ldr	r3, [r7, #12]
 8018f00:	6a1b      	ldr	r3, [r3, #32]
 8018f02:	4907      	ldr	r1, [pc, #28]	@ (8018f20 <mg_tls_parse_cert_der+0x7a8>)
 8018f04:	4807      	ldr	r0, [pc, #28]	@ (8018f24 <mg_tls_parse_cert_der+0x7ac>)
 8018f06:	f7f4 f9a1 	bl	800d24c <mg_log>

  return 0;
 8018f0a:	2300      	movs	r3, #0
}
 8018f0c:	4618      	mov	r0, r3
 8018f0e:	37ac      	adds	r7, #172	@ 0xac
 8018f10:	46bd      	mov	sp, r7
 8018f12:	bd90      	pop	{r4, r7, pc}
 8018f14:	20000258 	.word	0x20000258
 8018f18:	08028a30 	.word	0x08028a30
 8018f1c:	08025140 	.word	0x08025140
 8018f20:	08012631 	.word	0x08012631
 8018f24:	0802727c 	.word	0x0802727c

08018f28 <mg_tls_verify_cert_san>:

static int mg_tls_verify_cert_san(const uint8_t *der, size_t dersz,
                                  const char *server_name) {
 8018f28:	b580      	push	{r7, lr}
 8018f2a:	b094      	sub	sp, #80	@ 0x50
 8018f2c:	af02      	add	r7, sp, #8
 8018f2e:	60f8      	str	r0, [r7, #12]
 8018f30:	60b9      	str	r1, [r7, #8]
 8018f32:	607a      	str	r2, [r7, #4]
  struct mg_der_tlv root, field, name;
  if (mg_der_parse((uint8_t *) der, dersz, &root) < 0) {
 8018f34:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8018f38:	461a      	mov	r2, r3
 8018f3a:	68b9      	ldr	r1, [r7, #8]
 8018f3c:	68f8      	ldr	r0, [r7, #12]
 8018f3e:	f7fd fadb 	bl	80164f8 <mg_der_parse>
 8018f42:	4603      	mov	r3, r0
 8018f44:	2b00      	cmp	r3, #0
 8018f46:	da10      	bge.n	8018f6a <mg_tls_verify_cert_san+0x42>
    MG_ERROR(("failed to parse certificate"));
 8018f48:	4b42      	ldr	r3, [pc, #264]	@ (8019054 <mg_tls_verify_cert_san+0x12c>)
 8018f4a:	681b      	ldr	r3, [r3, #0]
 8018f4c:	2b00      	cmp	r3, #0
 8018f4e:	dd09      	ble.n	8018f64 <mg_tls_verify_cert_san+0x3c>
 8018f50:	4b41      	ldr	r3, [pc, #260]	@ (8019058 <mg_tls_verify_cert_san+0x130>)
 8018f52:	f642 72df 	movw	r2, #12255	@ 0x2fdf
 8018f56:	4941      	ldr	r1, [pc, #260]	@ (801905c <mg_tls_verify_cert_san+0x134>)
 8018f58:	2001      	movs	r0, #1
 8018f5a:	f7f4 f927 	bl	800d1ac <mg_log_prefix>
 8018f5e:	4840      	ldr	r0, [pc, #256]	@ (8019060 <mg_tls_verify_cert_san+0x138>)
 8018f60:	f7f4 f974 	bl	800d24c <mg_log>
    return -1;
 8018f64:	f04f 33ff 	mov.w	r3, #4294967295
 8018f68:	e070      	b.n	801904c <mg_tls_verify_cert_san+0x124>
  }
  if (mg_der_find_oid(&root, (uint8_t *) "\x55\x1d\x11", 3, &field) <= 0) {
 8018f6a:	f107 0320 	add.w	r3, r7, #32
 8018f6e:	f107 002c 	add.w	r0, r7, #44	@ 0x2c
 8018f72:	2203      	movs	r2, #3
 8018f74:	493b      	ldr	r1, [pc, #236]	@ (8019064 <mg_tls_verify_cert_san+0x13c>)
 8018f76:	f7fd fb4a 	bl	801660e <mg_der_find_oid>
 8018f7a:	4603      	mov	r3, r0
 8018f7c:	2b00      	cmp	r3, #0
 8018f7e:	dc10      	bgt.n	8018fa2 <mg_tls_verify_cert_san+0x7a>
    MG_ERROR(("failed to extract SAN"));
 8018f80:	4b34      	ldr	r3, [pc, #208]	@ (8019054 <mg_tls_verify_cert_san+0x12c>)
 8018f82:	681b      	ldr	r3, [r3, #0]
 8018f84:	2b00      	cmp	r3, #0
 8018f86:	dd09      	ble.n	8018f9c <mg_tls_verify_cert_san+0x74>
 8018f88:	4b33      	ldr	r3, [pc, #204]	@ (8019058 <mg_tls_verify_cert_san+0x130>)
 8018f8a:	f642 72e3 	movw	r2, #12259	@ 0x2fe3
 8018f8e:	4933      	ldr	r1, [pc, #204]	@ (801905c <mg_tls_verify_cert_san+0x134>)
 8018f90:	2001      	movs	r0, #1
 8018f92:	f7f4 f90b 	bl	800d1ac <mg_log_prefix>
 8018f96:	4834      	ldr	r0, [pc, #208]	@ (8019068 <mg_tls_verify_cert_san+0x140>)
 8018f98:	f7f4 f958 	bl	800d24c <mg_log>
    return -1;
 8018f9c:	f04f 33ff 	mov.w	r3, #4294967295
 8018fa0:	e054      	b.n	801904c <mg_tls_verify_cert_san+0x124>
  }
  if (mg_der_parse(field.value, field.len, &field) < 0) {
 8018fa2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018fa4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8018fa6:	f107 0220 	add.w	r2, r7, #32
 8018faa:	4618      	mov	r0, r3
 8018fac:	f7fd faa4 	bl	80164f8 <mg_der_parse>
 8018fb0:	4603      	mov	r3, r0
 8018fb2:	2b00      	cmp	r3, #0
 8018fb4:	da3d      	bge.n	8019032 <mg_tls_verify_cert_san+0x10a>
    MG_ERROR(("SAN is not a constructed object"));
 8018fb6:	4b27      	ldr	r3, [pc, #156]	@ (8019054 <mg_tls_verify_cert_san+0x12c>)
 8018fb8:	681b      	ldr	r3, [r3, #0]
 8018fba:	2b00      	cmp	r3, #0
 8018fbc:	dd09      	ble.n	8018fd2 <mg_tls_verify_cert_san+0xaa>
 8018fbe:	4b26      	ldr	r3, [pc, #152]	@ (8019058 <mg_tls_verify_cert_san+0x130>)
 8018fc0:	f642 72e7 	movw	r2, #12263	@ 0x2fe7
 8018fc4:	4925      	ldr	r1, [pc, #148]	@ (801905c <mg_tls_verify_cert_san+0x134>)
 8018fc6:	2001      	movs	r0, #1
 8018fc8:	f7f4 f8f0 	bl	800d1ac <mg_log_prefix>
 8018fcc:	4827      	ldr	r0, [pc, #156]	@ (801906c <mg_tls_verify_cert_san+0x144>)
 8018fce:	f7f4 f93d 	bl	800d24c <mg_log>
    return -1;
 8018fd2:	f04f 33ff 	mov.w	r3, #4294967295
 8018fd6:	e039      	b.n	801904c <mg_tls_verify_cert_san+0x124>
  }
  while (mg_der_next(&field, &name) > 0) {
    MG_DEBUG(("Found SAN: %.*s", name.len, name.value));
 8018fd8:	4b1e      	ldr	r3, [pc, #120]	@ (8019054 <mg_tls_verify_cert_san+0x12c>)
 8018fda:	681b      	ldr	r3, [r3, #0]
 8018fdc:	2b02      	cmp	r3, #2
 8018fde:	dd0c      	ble.n	8018ffa <mg_tls_verify_cert_san+0xd2>
 8018fe0:	4b1d      	ldr	r3, [pc, #116]	@ (8019058 <mg_tls_verify_cert_san+0x130>)
 8018fe2:	f642 72eb 	movw	r2, #12267	@ 0x2feb
 8018fe6:	491d      	ldr	r1, [pc, #116]	@ (801905c <mg_tls_verify_cert_san+0x134>)
 8018fe8:	2003      	movs	r0, #3
 8018fea:	f7f4 f8df 	bl	800d1ac <mg_log_prefix>
 8018fee:	69bb      	ldr	r3, [r7, #24]
 8018ff0:	69fa      	ldr	r2, [r7, #28]
 8018ff2:	4619      	mov	r1, r3
 8018ff4:	481e      	ldr	r0, [pc, #120]	@ (8019070 <mg_tls_verify_cert_san+0x148>)
 8018ff6:	f7f4 f929 	bl	800d24c <mg_log>
    if (mg_match(mg_str(server_name), mg_str_n((char *) name.value, name.len),
 8018ffa:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8018ffe:	6879      	ldr	r1, [r7, #4]
 8019000:	4618      	mov	r0, r3
 8019002:	f7fc fcc5 	bl	8015990 <mg_str_s>
 8019006:	69f9      	ldr	r1, [r7, #28]
 8019008:	69ba      	ldr	r2, [r7, #24]
 801900a:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 801900e:	4618      	mov	r0, r3
 8019010:	f7fc fcdb 	bl	80159ca <mg_str_n>
 8019014:	2300      	movs	r3, #0
 8019016:	9300      	str	r3, [sp, #0]
 8019018:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 801901c:	cb0c      	ldmia	r3, {r2, r3}
 801901e:	f107 0138 	add.w	r1, r7, #56	@ 0x38
 8019022:	c903      	ldmia	r1, {r0, r1}
 8019024:	f7fc fdbd 	bl	8015ba2 <mg_match>
 8019028:	4603      	mov	r3, r0
 801902a:	2b00      	cmp	r3, #0
 801902c:	d001      	beq.n	8019032 <mg_tls_verify_cert_san+0x10a>
                 NULL)) {
      // Found SAN that matches the host name
      return 1;
 801902e:	2301      	movs	r3, #1
 8019030:	e00c      	b.n	801904c <mg_tls_verify_cert_san+0x124>
  while (mg_der_next(&field, &name) > 0) {
 8019032:	f107 0214 	add.w	r2, r7, #20
 8019036:	f107 0320 	add.w	r3, r7, #32
 801903a:	4611      	mov	r1, r2
 801903c:	4618      	mov	r0, r3
 801903e:	f7fd fabb 	bl	80165b8 <mg_der_next>
 8019042:	4603      	mov	r3, r0
 8019044:	2b00      	cmp	r3, #0
 8019046:	dcc7      	bgt.n	8018fd8 <mg_tls_verify_cert_san+0xb0>
    }
  }
  return -1;
 8019048:	f04f 33ff 	mov.w	r3, #4294967295
}
 801904c:	4618      	mov	r0, r3
 801904e:	3748      	adds	r7, #72	@ 0x48
 8019050:	46bd      	mov	sp, r7
 8019052:	bd80      	pop	{r7, pc}
 8019054:	20000258 	.word	0x20000258
 8019058:	08028a48 	.word	0x08028a48
 801905c:	08025140 	.word	0x08025140
 8019060:	08027284 	.word	0x08027284
 8019064:	080272a0 	.word	0x080272a0
 8019068:	080272a4 	.word	0x080272a4
 801906c:	080272bc 	.word	0x080272bc
 8019070:	080272dc 	.word	0x080272dc

08019074 <mg_tls_verify_cert_signature>:

static int mg_tls_verify_cert_signature(const struct mg_tls_cert *cert,
                                        const struct mg_tls_cert *issuer) {
 8019074:	b5f0      	push	{r4, r5, r6, r7, lr}
 8019076:	b0db      	sub	sp, #364	@ 0x16c
 8019078:	af04      	add	r7, sp, #16
 801907a:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 801907e:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8019082:	6018      	str	r0, [r3, #0]
 8019084:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 8019088:	f5a3 73ac 	sub.w	r3, r3, #344	@ 0x158
 801908c:	6019      	str	r1, [r3, #0]
  if (issuer->is_ec_pubkey) {
 801908e:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 8019092:	f5a3 73ac 	sub.w	r3, r3, #344	@ 0x158
 8019096:	681b      	ldr	r3, [r3, #0]
 8019098:	681b      	ldr	r3, [r3, #0]
 801909a:	2b00      	cmp	r3, #0
 801909c:	f000 80eb 	beq.w	8019276 <mg_tls_verify_cert_signature+0x202>
    uint8_t sig[128];
    struct mg_der_tlv seq = {0, 0, 0}, a = {0, 0, 0}, b = {0, 0, 0};
 80190a0:	2300      	movs	r3, #0
 80190a2:	f887 3144 	strb.w	r3, [r7, #324]	@ 0x144
 80190a6:	2300      	movs	r3, #0
 80190a8:	f8c7 3148 	str.w	r3, [r7, #328]	@ 0x148
 80190ac:	2300      	movs	r3, #0
 80190ae:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
 80190b2:	2300      	movs	r3, #0
 80190b4:	f887 3138 	strb.w	r3, [r7, #312]	@ 0x138
 80190b8:	2300      	movs	r3, #0
 80190ba:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
 80190be:	2300      	movs	r3, #0
 80190c0:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
 80190c4:	2300      	movs	r3, #0
 80190c6:	f887 312c 	strb.w	r3, [r7, #300]	@ 0x12c
 80190ca:	2300      	movs	r3, #0
 80190cc:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 80190d0:	2300      	movs	r3, #0
 80190d2:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
    mg_der_parse((uint8_t *) cert->sig.buf, cert->sig.len, &seq);
 80190d6:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 80190da:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 80190de:	681b      	ldr	r3, [r3, #0]
 80190e0:	6a18      	ldr	r0, [r3, #32]
 80190e2:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 80190e6:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 80190ea:	681b      	ldr	r3, [r3, #0]
 80190ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80190ee:	f507 72a2 	add.w	r2, r7, #324	@ 0x144
 80190f2:	4619      	mov	r1, r3
 80190f4:	f7fd fa00 	bl	80164f8 <mg_der_parse>
    mg_der_next(&seq, &a);
 80190f8:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 80190fc:	f507 73a2 	add.w	r3, r7, #324	@ 0x144
 8019100:	4611      	mov	r1, r2
 8019102:	4618      	mov	r0, r3
 8019104:	f7fd fa58 	bl	80165b8 <mg_der_next>
    mg_der_next(&seq, &b);
 8019108:	f507 7296 	add.w	r2, r7, #300	@ 0x12c
 801910c:	f507 73a2 	add.w	r3, r7, #324	@ 0x144
 8019110:	4611      	mov	r1, r2
 8019112:	4618      	mov	r0, r3
 8019114:	f7fd fa50 	bl	80165b8 <mg_der_next>
    if (a.len == 0 || b.len == 0) {
 8019118:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 801911c:	2b00      	cmp	r3, #0
 801911e:	d003      	beq.n	8019128 <mg_tls_verify_cert_signature+0xb4>
 8019120:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8019124:	2b00      	cmp	r3, #0
 8019126:	d10f      	bne.n	8019148 <mg_tls_verify_cert_signature+0xd4>
      MG_ERROR(("cert verification error"));
 8019128:	4b92      	ldr	r3, [pc, #584]	@ (8019374 <mg_tls_verify_cert_signature+0x300>)
 801912a:	681b      	ldr	r3, [r3, #0]
 801912c:	2b00      	cmp	r3, #0
 801912e:	dd09      	ble.n	8019144 <mg_tls_verify_cert_signature+0xd0>
 8019130:	4b91      	ldr	r3, [pc, #580]	@ (8019378 <mg_tls_verify_cert_signature+0x304>)
 8019132:	f642 72fe 	movw	r2, #12286	@ 0x2ffe
 8019136:	4991      	ldr	r1, [pc, #580]	@ (801937c <mg_tls_verify_cert_signature+0x308>)
 8019138:	2001      	movs	r0, #1
 801913a:	f7f4 f837 	bl	800d1ac <mg_log_prefix>
 801913e:	4890      	ldr	r0, [pc, #576]	@ (8019380 <mg_tls_verify_cert_signature+0x30c>)
 8019140:	f7f4 f884 	bl	800d24c <mg_log>
      return 0;
 8019144:	2300      	movs	r3, #0
 8019146:	e110      	b.n	801936a <mg_tls_verify_cert_signature+0x2f6>
    }
    if (issuer->pubkey.len == 64) {
 8019148:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 801914c:	f5a3 73ac 	sub.w	r3, r3, #344	@ 0x158
 8019150:	681b      	ldr	r3, [r3, #0]
 8019152:	691b      	ldr	r3, [r3, #16]
 8019154:	2b40      	cmp	r3, #64	@ 0x40
 8019156:	d15f      	bne.n	8019218 <mg_tls_verify_cert_signature+0x1a4>
      const uint32_t N = 32;
 8019158:	2320      	movs	r3, #32
 801915a:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
      if (a.len > N) a.value += (a.len - N), a.len = N;
 801915e:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8019162:	f8d7 2150 	ldr.w	r2, [r7, #336]	@ 0x150
 8019166:	429a      	cmp	r2, r3
 8019168:	d20d      	bcs.n	8019186 <mg_tls_verify_cert_signature+0x112>
 801916a:	f8d7 2140 	ldr.w	r2, [r7, #320]	@ 0x140
 801916e:	f8d7 113c 	ldr.w	r1, [r7, #316]	@ 0x13c
 8019172:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 8019176:	1acb      	subs	r3, r1, r3
 8019178:	4413      	add	r3, r2
 801917a:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
 801917e:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 8019182:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
      if (b.len > N) b.value += (b.len - N), b.len = N;
 8019186:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 801918a:	f8d7 2150 	ldr.w	r2, [r7, #336]	@ 0x150
 801918e:	429a      	cmp	r2, r3
 8019190:	d20d      	bcs.n	80191ae <mg_tls_verify_cert_signature+0x13a>
 8019192:	f8d7 2134 	ldr.w	r2, [r7, #308]	@ 0x134
 8019196:	f8d7 1130 	ldr.w	r1, [r7, #304]	@ 0x130
 801919a:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 801919e:	1acb      	subs	r3, r1, r3
 80191a0:	4413      	add	r3, r2
 80191a2:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
 80191a6:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 80191aa:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
      memmove(sig, a.value, N);
 80191ae:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 80191b2:	f107 0308 	add.w	r3, r7, #8
 80191b6:	f8d7 2150 	ldr.w	r2, [r7, #336]	@ 0x150
 80191ba:	4618      	mov	r0, r3
 80191bc:	f00b f94c 	bl	8024458 <memmove>
      memmove(sig + N, b.value, N);
 80191c0:	f107 0208 	add.w	r2, r7, #8
 80191c4:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 80191c8:	4413      	add	r3, r2
 80191ca:	f8d7 1134 	ldr.w	r1, [r7, #308]	@ 0x134
 80191ce:	f8d7 2150 	ldr.w	r2, [r7, #336]	@ 0x150
 80191d2:	4618      	mov	r0, r3
 80191d4:	f00b f940 	bl	8024458 <memmove>
      return mg_uecc_verify((uint8_t *) issuer->pubkey.buf, cert->tbshash,
 80191d8:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 80191dc:	f5a3 73ac 	sub.w	r3, r3, #344	@ 0x158
 80191e0:	681b      	ldr	r3, [r3, #0]
 80191e2:	68dc      	ldr	r4, [r3, #12]
 80191e4:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 80191e8:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 80191ec:	681b      	ldr	r3, [r3, #0]
 80191ee:	f103 0528 	add.w	r5, r3, #40	@ 0x28
                            (unsigned) cert->tbshashsz, sig,
 80191f2:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 80191f6:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 80191fa:	681b      	ldr	r3, [r3, #0]
 80191fc:	6d9e      	ldr	r6, [r3, #88]	@ 0x58
      return mg_uecc_verify((uint8_t *) issuer->pubkey.buf, cert->tbshash,
 80191fe:	f005 fc69 	bl	801ead4 <mg_uecc_secp256r1>
 8019202:	4602      	mov	r2, r0
 8019204:	f107 0308 	add.w	r3, r7, #8
 8019208:	9200      	str	r2, [sp, #0]
 801920a:	4632      	mov	r2, r6
 801920c:	4629      	mov	r1, r5
 801920e:	4620      	mov	r0, r4
 8019210:	f006 fdfc 	bl	801fe0c <mg_uecc_verify>
 8019214:	4603      	mov	r3, r0
 8019216:	e0a8      	b.n	801936a <mg_tls_verify_cert_signature+0x2f6>
                            mg_uecc_secp256r1());
    } else if (issuer->pubkey.len == 96) {
 8019218:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 801921c:	f5a3 73ac 	sub.w	r3, r3, #344	@ 0x158
 8019220:	681b      	ldr	r3, [r3, #0]
 8019222:	691b      	ldr	r3, [r3, #16]
 8019224:	2b60      	cmp	r3, #96	@ 0x60
 8019226:	d10f      	bne.n	8019248 <mg_tls_verify_cert_signature+0x1d4>
      MG_DEBUG(("ignore secp386 for now"));
 8019228:	4b52      	ldr	r3, [pc, #328]	@ (8019374 <mg_tls_verify_cert_signature+0x300>)
 801922a:	681b      	ldr	r3, [r3, #0]
 801922c:	2b02      	cmp	r3, #2
 801922e:	dd09      	ble.n	8019244 <mg_tls_verify_cert_signature+0x1d0>
 8019230:	4b51      	ldr	r3, [pc, #324]	@ (8019378 <mg_tls_verify_cert_signature+0x304>)
 8019232:	f243 020b 	movw	r2, #12299	@ 0x300b
 8019236:	4951      	ldr	r1, [pc, #324]	@ (801937c <mg_tls_verify_cert_signature+0x308>)
 8019238:	2003      	movs	r0, #3
 801923a:	f7f3 ffb7 	bl	800d1ac <mg_log_prefix>
 801923e:	4851      	ldr	r0, [pc, #324]	@ (8019384 <mg_tls_verify_cert_signature+0x310>)
 8019240:	f7f4 f804 	bl	800d24c <mg_log>
      return 1;
 8019244:	2301      	movs	r3, #1
 8019246:	e090      	b.n	801936a <mg_tls_verify_cert_signature+0x2f6>
    } else {
      MG_ERROR(("unsupported public key length: %d", issuer->pubkey.len));
 8019248:	4b4a      	ldr	r3, [pc, #296]	@ (8019374 <mg_tls_verify_cert_signature+0x300>)
 801924a:	681b      	ldr	r3, [r3, #0]
 801924c:	2b00      	cmp	r3, #0
 801924e:	dd10      	ble.n	8019272 <mg_tls_verify_cert_signature+0x1fe>
 8019250:	4b49      	ldr	r3, [pc, #292]	@ (8019378 <mg_tls_verify_cert_signature+0x304>)
 8019252:	f243 020e 	movw	r2, #12302	@ 0x300e
 8019256:	4949      	ldr	r1, [pc, #292]	@ (801937c <mg_tls_verify_cert_signature+0x308>)
 8019258:	2001      	movs	r0, #1
 801925a:	f7f3 ffa7 	bl	800d1ac <mg_log_prefix>
 801925e:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 8019262:	f5a3 73ac 	sub.w	r3, r3, #344	@ 0x158
 8019266:	681b      	ldr	r3, [r3, #0]
 8019268:	691b      	ldr	r3, [r3, #16]
 801926a:	4619      	mov	r1, r3
 801926c:	4846      	ldr	r0, [pc, #280]	@ (8019388 <mg_tls_verify_cert_signature+0x314>)
 801926e:	f7f3 ffed 	bl	800d24c <mg_log>
      return 0;
 8019272:	2300      	movs	r3, #0
 8019274:	e079      	b.n	801936a <mg_tls_verify_cert_signature+0x2f6>
    }
  } else {
    int r;
    uint8_t sig2[256];  // 2048 bits
    struct mg_der_tlv seq, modulus, exponent;
    if (mg_der_parse((uint8_t *) issuer->pubkey.buf, issuer->pubkey.len,
 8019276:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 801927a:	f5a3 73ac 	sub.w	r3, r3, #344	@ 0x158
 801927e:	681b      	ldr	r3, [r3, #0]
 8019280:	68d8      	ldr	r0, [r3, #12]
 8019282:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 8019286:	f5a3 73ac 	sub.w	r3, r3, #344	@ 0x158
 801928a:	681b      	ldr	r3, [r3, #0]
 801928c:	691b      	ldr	r3, [r3, #16]
 801928e:	f507 7290 	add.w	r2, r7, #288	@ 0x120
 8019292:	4619      	mov	r1, r3
 8019294:	f7fd f930 	bl	80164f8 <mg_der_parse>
 8019298:	4603      	mov	r3, r0
 801929a:	2b00      	cmp	r3, #0
 801929c:	dd1d      	ble.n	80192da <mg_tls_verify_cert_signature+0x266>
                     &seq) <= 0 ||
        mg_der_next(&seq, &modulus) <= 0 || modulus.type != 2 ||
 801929e:	f507 728a 	add.w	r2, r7, #276	@ 0x114
 80192a2:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80192a6:	4611      	mov	r1, r2
 80192a8:	4618      	mov	r0, r3
 80192aa:	f7fd f985 	bl	80165b8 <mg_der_next>
 80192ae:	4603      	mov	r3, r0
                     &seq) <= 0 ||
 80192b0:	2b00      	cmp	r3, #0
 80192b2:	dd12      	ble.n	80192da <mg_tls_verify_cert_signature+0x266>
        mg_der_next(&seq, &modulus) <= 0 || modulus.type != 2 ||
 80192b4:	f897 3114 	ldrb.w	r3, [r7, #276]	@ 0x114
 80192b8:	2b02      	cmp	r3, #2
 80192ba:	d10e      	bne.n	80192da <mg_tls_verify_cert_signature+0x266>
        mg_der_next(&seq, &exponent) <= 0 || exponent.type != 2) {
 80192bc:	f507 7284 	add.w	r2, r7, #264	@ 0x108
 80192c0:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80192c4:	4611      	mov	r1, r2
 80192c6:	4618      	mov	r0, r3
 80192c8:	f7fd f976 	bl	80165b8 <mg_der_next>
 80192cc:	4603      	mov	r3, r0
        mg_der_next(&seq, &modulus) <= 0 || modulus.type != 2 ||
 80192ce:	2b00      	cmp	r3, #0
 80192d0:	dd03      	ble.n	80192da <mg_tls_verify_cert_signature+0x266>
        mg_der_next(&seq, &exponent) <= 0 || exponent.type != 2) {
 80192d2:	f897 3108 	ldrb.w	r3, [r7, #264]	@ 0x108
 80192d6:	2b02      	cmp	r3, #2
 80192d8:	d002      	beq.n	80192e0 <mg_tls_verify_cert_signature+0x26c>
      return -1;
 80192da:	f04f 33ff 	mov.w	r3, #4294967295
 80192de:	e044      	b.n	801936a <mg_tls_verify_cert_signature+0x2f6>
    }
    mg_rsa_mod_pow(modulus.value, modulus.len, exponent.value, exponent.len,
 80192e0:	f8d7 011c 	ldr.w	r0, [r7, #284]	@ 0x11c
 80192e4:	f8d7 4118 	ldr.w	r4, [r7, #280]	@ 0x118
 80192e8:	f8d7 5110 	ldr.w	r5, [r7, #272]	@ 0x110
 80192ec:	f8d7 610c 	ldr.w	r6, [r7, #268]	@ 0x10c
                   (uint8_t *) cert->sig.buf, cert->sig.len, sig2,
 80192f0:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 80192f4:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 80192f8:	681b      	ldr	r3, [r3, #0]
 80192fa:	6a1b      	ldr	r3, [r3, #32]
 80192fc:	f507 72ac 	add.w	r2, r7, #344	@ 0x158
 8019300:	f5a2 72aa 	sub.w	r2, r2, #340	@ 0x154
 8019304:	6812      	ldr	r2, [r2, #0]
 8019306:	6a52      	ldr	r2, [r2, #36]	@ 0x24
    mg_rsa_mod_pow(modulus.value, modulus.len, exponent.value, exponent.len,
 8019308:	f44f 7180 	mov.w	r1, #256	@ 0x100
 801930c:	9103      	str	r1, [sp, #12]
 801930e:	f107 0108 	add.w	r1, r7, #8
 8019312:	9102      	str	r1, [sp, #8]
 8019314:	9201      	str	r2, [sp, #4]
 8019316:	9300      	str	r3, [sp, #0]
 8019318:	4633      	mov	r3, r6
 801931a:	462a      	mov	r2, r5
 801931c:	4621      	mov	r1, r4
 801931e:	f004 fbb3 	bl	801da88 <mg_rsa_mod_pow>
                   sizeof(sig2));

    r = memcmp(sig2 + sizeof(sig2) - cert->tbshashsz, cert->tbshash,
 8019322:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 8019326:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 801932a:	681b      	ldr	r3, [r3, #0]
 801932c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801932e:	f5c3 7380 	rsb	r3, r3, #256	@ 0x100
 8019332:	f107 0208 	add.w	r2, r7, #8
 8019336:	18d0      	adds	r0, r2, r3
 8019338:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 801933c:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8019340:	681b      	ldr	r3, [r3, #0]
 8019342:	f103 0128 	add.w	r1, r3, #40	@ 0x28
               cert->tbshashsz);
 8019346:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 801934a:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 801934e:	681b      	ldr	r3, [r3, #0]
 8019350:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
    r = memcmp(sig2 + sizeof(sig2) - cert->tbshashsz, cert->tbshash,
 8019352:	461a      	mov	r2, r3
 8019354:	f00b f870 	bl	8024438 <memcmp>
 8019358:	f8c7 0154 	str.w	r0, [r7, #340]	@ 0x154
    return r == 0;
 801935c:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 8019360:	2b00      	cmp	r3, #0
 8019362:	bf0c      	ite	eq
 8019364:	2301      	moveq	r3, #1
 8019366:	2300      	movne	r3, #0
 8019368:	b2db      	uxtb	r3, r3
  }
}
 801936a:	4618      	mov	r0, r3
 801936c:	f507 77ae 	add.w	r7, r7, #348	@ 0x15c
 8019370:	46bd      	mov	sp, r7
 8019372:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8019374:	20000258 	.word	0x20000258
 8019378:	08028a60 	.word	0x08028a60
 801937c:	08025140 	.word	0x08025140
 8019380:	080272ec 	.word	0x080272ec
 8019384:	08027304 	.word	0x08027304
 8019388:	0802731c 	.word	0x0802731c

0801938c <mg_tls_verify_cert_cn>:

static int mg_tls_verify_cert_cn(struct mg_der_tlv *subj, const char *host) {
 801938c:	b580      	push	{r7, lr}
 801938e:	b08c      	sub	sp, #48	@ 0x30
 8019390:	af02      	add	r7, sp, #8
 8019392:	6078      	str	r0, [r7, #4]
 8019394:	6039      	str	r1, [r7, #0]
  struct mg_der_tlv v;
  int matched = 0;
 8019396:	2300      	movs	r3, #0
 8019398:	627b      	str	r3, [r7, #36]	@ 0x24
  if (mg_der_find_oid(subj, (uint8_t *) "\x55\x04\x03", 3, &v) > 0) {
 801939a:	f107 0308 	add.w	r3, r7, #8
 801939e:	2203      	movs	r2, #3
 80193a0:	491a      	ldr	r1, [pc, #104]	@ (801940c <mg_tls_verify_cert_cn+0x80>)
 80193a2:	6878      	ldr	r0, [r7, #4]
 80193a4:	f7fd f933 	bl	801660e <mg_der_find_oid>
 80193a8:	4603      	mov	r3, r0
 80193aa:	2b00      	cmp	r3, #0
 80193ac:	dd29      	ble.n	8019402 <mg_tls_verify_cert_cn+0x76>
    MG_DEBUG(("using CN: %.*s <-> %s", v.len, v.value, host));
 80193ae:	4b18      	ldr	r3, [pc, #96]	@ (8019410 <mg_tls_verify_cert_cn+0x84>)
 80193b0:	681b      	ldr	r3, [r3, #0]
 80193b2:	2b02      	cmp	r3, #2
 80193b4:	dd0c      	ble.n	80193d0 <mg_tls_verify_cert_cn+0x44>
 80193b6:	4b17      	ldr	r3, [pc, #92]	@ (8019414 <mg_tls_verify_cert_cn+0x88>)
 80193b8:	f243 0229 	movw	r2, #12329	@ 0x3029
 80193bc:	4916      	ldr	r1, [pc, #88]	@ (8019418 <mg_tls_verify_cert_cn+0x8c>)
 80193be:	2003      	movs	r0, #3
 80193c0:	f7f3 fef4 	bl	800d1ac <mg_log_prefix>
 80193c4:	68f9      	ldr	r1, [r7, #12]
 80193c6:	693a      	ldr	r2, [r7, #16]
 80193c8:	683b      	ldr	r3, [r7, #0]
 80193ca:	4814      	ldr	r0, [pc, #80]	@ (801941c <mg_tls_verify_cert_cn+0x90>)
 80193cc:	f7f3 ff3e 	bl	800d24c <mg_log>
    matched = mg_match(mg_str(host), mg_str_n((char *) v.value, v.len), NULL);
 80193d0:	f107 0314 	add.w	r3, r7, #20
 80193d4:	6839      	ldr	r1, [r7, #0]
 80193d6:	4618      	mov	r0, r3
 80193d8:	f7fc fada 	bl	8015990 <mg_str_s>
 80193dc:	6939      	ldr	r1, [r7, #16]
 80193de:	68fa      	ldr	r2, [r7, #12]
 80193e0:	f107 031c 	add.w	r3, r7, #28
 80193e4:	4618      	mov	r0, r3
 80193e6:	f7fc faf0 	bl	80159ca <mg_str_n>
 80193ea:	2300      	movs	r3, #0
 80193ec:	9300      	str	r3, [sp, #0]
 80193ee:	f107 031c 	add.w	r3, r7, #28
 80193f2:	cb0c      	ldmia	r3, {r2, r3}
 80193f4:	f107 0114 	add.w	r1, r7, #20
 80193f8:	c903      	ldmia	r1, {r0, r1}
 80193fa:	f7fc fbd2 	bl	8015ba2 <mg_match>
 80193fe:	4603      	mov	r3, r0
 8019400:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  return matched;
 8019402:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8019404:	4618      	mov	r0, r3
 8019406:	3728      	adds	r7, #40	@ 0x28
 8019408:	46bd      	mov	sp, r7
 801940a:	bd80      	pop	{r7, pc}
 801940c:	0802704c 	.word	0x0802704c
 8019410:	20000258 	.word	0x20000258
 8019414:	08028a80 	.word	0x08028a80
 8019418:	08025140 	.word	0x08025140
 801941c:	08027340 	.word	0x08027340

08019420 <mg_tls_recv_cert>:

static int mg_tls_recv_cert(struct mg_connection *c, bool is_client) {
 8019420:	b580      	push	{r7, lr}
 8019422:	f5ad 7d5e 	sub.w	sp, sp, #888	@ 0x378
 8019426:	af00      	add	r7, sp, #0
 8019428:	f507 735e 	add.w	r3, r7, #888	@ 0x378
 801942c:	f5a3 735d 	sub.w	r3, r3, #884	@ 0x374
 8019430:	6018      	str	r0, [r3, #0]
 8019432:	460a      	mov	r2, r1
 8019434:	f507 735e 	add.w	r3, r7, #888	@ 0x378
 8019438:	f2a3 3375 	subw	r3, r3, #885	@ 0x375
 801943c:	701a      	strb	r2, [r3, #0]
  struct tls_data *tls = (struct tls_data *) c->tls;
 801943e:	f507 735e 	add.w	r3, r7, #888	@ 0x378
 8019442:	f5a3 735d 	sub.w	r3, r3, #884	@ 0x374
 8019446:	681b      	ldr	r3, [r3, #0]
 8019448:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 801944c:	f8c7 3368 	str.w	r3, [r7, #872]	@ 0x368
  unsigned char *recv_buf;

  if (mg_tls_recv_record(c) < 0) {
 8019450:	f507 735e 	add.w	r3, r7, #888	@ 0x378
 8019454:	f5a3 735d 	sub.w	r3, r3, #884	@ 0x374
 8019458:	6818      	ldr	r0, [r3, #0]
 801945a:	f7fd fe11 	bl	8017080 <mg_tls_recv_record>
 801945e:	4603      	mov	r3, r0
 8019460:	2b00      	cmp	r3, #0
 8019462:	da02      	bge.n	801946a <mg_tls_recv_cert+0x4a>
    return -1;
 8019464:	f04f 33ff 	mov.w	r3, #4294967295
 8019468:	e284      	b.n	8019974 <mg_tls_recv_cert+0x554>
  }

  recv_buf = &c->rtls.buf[tls->recv_offset];
 801946a:	f507 735e 	add.w	r3, r7, #888	@ 0x378
 801946e:	f5a3 735d 	sub.w	r3, r3, #884	@ 0x374
 8019472:	681b      	ldr	r3, [r3, #0]
 8019474:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8019476:	f8d7 3368 	ldr.w	r3, [r7, #872]	@ 0x368
 801947a:	695b      	ldr	r3, [r3, #20]
 801947c:	4413      	add	r3, r2
 801947e:	f8c7 3364 	str.w	r3, [r7, #868]	@ 0x364

  if (recv_buf[0] == MG_TLS_CERTIFICATE_REQUEST) {
 8019482:	f8d7 3364 	ldr.w	r3, [r7, #868]	@ 0x364
 8019486:	781b      	ldrb	r3, [r3, #0]
 8019488:	2b0d      	cmp	r3, #13
 801948a:	d11c      	bne.n	80194c6 <mg_tls_recv_cert+0xa6>
    MG_VERBOSE(("got certificate request"));
 801948c:	4bc5      	ldr	r3, [pc, #788]	@ (80197a4 <mg_tls_recv_cert+0x384>)
 801948e:	681b      	ldr	r3, [r3, #0]
 8019490:	2b03      	cmp	r3, #3
 8019492:	dd09      	ble.n	80194a8 <mg_tls_recv_cert+0x88>
 8019494:	4bc4      	ldr	r3, [pc, #784]	@ (80197a8 <mg_tls_recv_cert+0x388>)
 8019496:	f243 023a 	movw	r2, #12346	@ 0x303a
 801949a:	49c4      	ldr	r1, [pc, #784]	@ (80197ac <mg_tls_recv_cert+0x38c>)
 801949c:	2004      	movs	r0, #4
 801949e:	f7f3 fe85 	bl	800d1ac <mg_log_prefix>
 80194a2:	48c3      	ldr	r0, [pc, #780]	@ (80197b0 <mg_tls_recv_cert+0x390>)
 80194a4:	f7f3 fed2 	bl	800d24c <mg_log>
    mg_tls_drop_message(c);
 80194a8:	f507 735e 	add.w	r3, r7, #888	@ 0x378
 80194ac:	f5a3 735d 	sub.w	r3, r3, #884	@ 0x374
 80194b0:	6818      	ldr	r0, [r3, #0]
 80194b2:	f7fd f99b 	bl	80167ec <mg_tls_drop_message>
    tls->cert_requested = 1;
 80194b6:	f8d7 3368 	ldr.w	r3, [r7, #872]	@ 0x368
 80194ba:	2201      	movs	r2, #1
 80194bc:	f883 2111 	strb.w	r2, [r3, #273]	@ 0x111
    return -1;
 80194c0:	f04f 33ff 	mov.w	r3, #4294967295
 80194c4:	e256      	b.n	8019974 <mg_tls_recv_cert+0x554>
  }

  if (recv_buf[0] != MG_TLS_CERTIFICATE) {
 80194c6:	f8d7 3364 	ldr.w	r3, [r7, #868]	@ 0x364
 80194ca:	781b      	ldrb	r3, [r3, #0]
 80194cc:	2b0b      	cmp	r3, #11
 80194ce:	d019      	beq.n	8019504 <mg_tls_recv_cert+0xe4>
    mg_error(c, "expected %s certificate but got msg 0x%02x",
 80194d0:	f507 735e 	add.w	r3, r7, #888	@ 0x378
 80194d4:	f2a3 3375 	subw	r3, r3, #885	@ 0x375
 80194d8:	781b      	ldrb	r3, [r3, #0]
 80194da:	2b00      	cmp	r3, #0
 80194dc:	d001      	beq.n	80194e2 <mg_tls_recv_cert+0xc2>
 80194de:	4ab5      	ldr	r2, [pc, #724]	@ (80197b4 <mg_tls_recv_cert+0x394>)
 80194e0:	e000      	b.n	80194e4 <mg_tls_recv_cert+0xc4>
 80194e2:	4ab5      	ldr	r2, [pc, #724]	@ (80197b8 <mg_tls_recv_cert+0x398>)
             is_client ? "server" : "client", recv_buf[0]);
 80194e4:	f8d7 3364 	ldr.w	r3, [r7, #868]	@ 0x364
 80194e8:	781b      	ldrb	r3, [r3, #0]
    mg_error(c, "expected %s certificate but got msg 0x%02x",
 80194ea:	4619      	mov	r1, r3
 80194ec:	f507 735e 	add.w	r3, r7, #888	@ 0x378
 80194f0:	f5a3 705d 	sub.w	r0, r3, #884	@ 0x374
 80194f4:	460b      	mov	r3, r1
 80194f6:	49b1      	ldr	r1, [pc, #708]	@ (80197bc <mg_tls_recv_cert+0x39c>)
 80194f8:	6800      	ldr	r0, [r0, #0]
 80194fa:	f7ee fcbb 	bl	8007e74 <mg_error>
    return -1;
 80194fe:	f04f 33ff 	mov.w	r3, #4294967295
 8019502:	e237      	b.n	8019974 <mg_tls_recv_cert+0x554>
  }

  if (tls->recv_len < 11) {
 8019504:	f8d7 3368 	ldr.w	r3, [r7, #872]	@ 0x368
 8019508:	699b      	ldr	r3, [r3, #24]
 801950a:	2b0a      	cmp	r3, #10
 801950c:	d80a      	bhi.n	8019524 <mg_tls_recv_cert+0x104>
    mg_error(c, "certificate list too short");
 801950e:	f507 735e 	add.w	r3, r7, #888	@ 0x378
 8019512:	f5a3 735d 	sub.w	r3, r3, #884	@ 0x374
 8019516:	49aa      	ldr	r1, [pc, #680]	@ (80197c0 <mg_tls_recv_cert+0x3a0>)
 8019518:	6818      	ldr	r0, [r3, #0]
 801951a:	f7ee fcab 	bl	8007e74 <mg_error>
    return -1;
 801951e:	f04f 33ff 	mov.w	r3, #4294967295
 8019522:	e227      	b.n	8019974 <mg_tls_recv_cert+0x554>
  }

  {
    // Normally, there are 2-3 certs in a chain (when is_client)
    struct mg_tls_cert certs[8];
    int certnum = 0;
 8019524:	2300      	movs	r3, #0
 8019526:	f8c7 3374 	str.w	r3, [r7, #884]	@ 0x374
    uint32_t full_cert_chain_len = MG_LOAD_BE24(recv_buf + 1);
 801952a:	f8d7 3364 	ldr.w	r3, [r7, #868]	@ 0x364
 801952e:	3301      	adds	r3, #1
 8019530:	781b      	ldrb	r3, [r3, #0]
 8019532:	041a      	lsls	r2, r3, #16
 8019534:	f8d7 3364 	ldr.w	r3, [r7, #868]	@ 0x364
 8019538:	3302      	adds	r3, #2
 801953a:	781b      	ldrb	r3, [r3, #0]
 801953c:	021b      	lsls	r3, r3, #8
 801953e:	4313      	orrs	r3, r2
 8019540:	f8d7 2364 	ldr.w	r2, [r7, #868]	@ 0x364
 8019544:	3203      	adds	r2, #3
 8019546:	7812      	ldrb	r2, [r2, #0]
 8019548:	4313      	orrs	r3, r2
 801954a:	f8c7 3360 	str.w	r3, [r7, #864]	@ 0x360
    uint32_t cert_chain_len = MG_LOAD_BE24(recv_buf + 5);
 801954e:	f8d7 3364 	ldr.w	r3, [r7, #868]	@ 0x364
 8019552:	3305      	adds	r3, #5
 8019554:	781b      	ldrb	r3, [r3, #0]
 8019556:	041a      	lsls	r2, r3, #16
 8019558:	f8d7 3364 	ldr.w	r3, [r7, #868]	@ 0x364
 801955c:	3306      	adds	r3, #6
 801955e:	781b      	ldrb	r3, [r3, #0]
 8019560:	021b      	lsls	r3, r3, #8
 8019562:	4313      	orrs	r3, r2
 8019564:	f8d7 2364 	ldr.w	r2, [r7, #868]	@ 0x364
 8019568:	3207      	adds	r2, #7
 801956a:	7812      	ldrb	r2, [r2, #0]
 801956c:	4313      	orrs	r3, r2
 801956e:	f8c7 335c 	str.w	r3, [r7, #860]	@ 0x35c
    uint8_t *p = recv_buf + 8;
 8019572:	f8d7 3364 	ldr.w	r3, [r7, #868]	@ 0x364
 8019576:	3308      	adds	r3, #8
 8019578:	f8c7 3370 	str.w	r3, [r7, #880]	@ 0x370
    uint8_t *endp = recv_buf + cert_chain_len;
 801957c:	f8d7 2364 	ldr.w	r2, [r7, #868]	@ 0x364
 8019580:	f8d7 335c 	ldr.w	r3, [r7, #860]	@ 0x35c
 8019584:	4413      	add	r3, r2
 8019586:	f8c7 3358 	str.w	r3, [r7, #856]	@ 0x358
    bool found_ca = false;
 801958a:	2300      	movs	r3, #0
 801958c:	f887 336f 	strb.w	r3, [r7, #879]	@ 0x36f
    struct mg_tls_cert ca;

    if (cert_chain_len != full_cert_chain_len - 4) {
 8019590:	f8d7 3360 	ldr.w	r3, [r7, #864]	@ 0x360
 8019594:	3b04      	subs	r3, #4
 8019596:	f8d7 235c 	ldr.w	r2, [r7, #860]	@ 0x35c
 801959a:	429a      	cmp	r2, r3
 801959c:	d01c      	beq.n	80195d8 <mg_tls_recv_cert+0x1b8>
      MG_ERROR(("full chain length: %d, chain length: %d", full_cert_chain_len,
 801959e:	4b81      	ldr	r3, [pc, #516]	@ (80197a4 <mg_tls_recv_cert+0x384>)
 80195a0:	681b      	ldr	r3, [r3, #0]
 80195a2:	2b00      	cmp	r3, #0
 80195a4:	dd0d      	ble.n	80195c2 <mg_tls_recv_cert+0x1a2>
 80195a6:	4b80      	ldr	r3, [pc, #512]	@ (80197a8 <mg_tls_recv_cert+0x388>)
 80195a8:	f243 0257 	movw	r2, #12375	@ 0x3057
 80195ac:	497f      	ldr	r1, [pc, #508]	@ (80197ac <mg_tls_recv_cert+0x38c>)
 80195ae:	2001      	movs	r0, #1
 80195b0:	f7f3 fdfc 	bl	800d1ac <mg_log_prefix>
 80195b4:	f8d7 235c 	ldr.w	r2, [r7, #860]	@ 0x35c
 80195b8:	f8d7 1360 	ldr.w	r1, [r7, #864]	@ 0x360
 80195bc:	4881      	ldr	r0, [pc, #516]	@ (80197c4 <mg_tls_recv_cert+0x3a4>)
 80195be:	f7f3 fe45 	bl	800d24c <mg_log>
                cert_chain_len));
      mg_error(c, "certificate chain length mismatch");
 80195c2:	f507 735e 	add.w	r3, r7, #888	@ 0x378
 80195c6:	f5a3 735d 	sub.w	r3, r3, #884	@ 0x374
 80195ca:	497f      	ldr	r1, [pc, #508]	@ (80197c8 <mg_tls_recv_cert+0x3a8>)
 80195cc:	6818      	ldr	r0, [r3, #0]
 80195ce:	f7ee fc51 	bl	8007e74 <mg_error>
      return -1;
 80195d2:	f04f 33ff 	mov.w	r3, #4294967295
 80195d6:	e1cd      	b.n	8019974 <mg_tls_recv_cert+0x554>
    }

    memset(certs, 0, sizeof(certs));
 80195d8:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 80195dc:	f44f 7238 	mov.w	r2, #736	@ 0x2e0
 80195e0:	2100      	movs	r1, #0
 80195e2:	4618      	mov	r0, r3
 80195e4:	f00a ff52 	bl	802448c <memset>
    memset(&ca, 0, sizeof(ca));
 80195e8:	f107 030c 	add.w	r3, r7, #12
 80195ec:	225c      	movs	r2, #92	@ 0x5c
 80195ee:	2100      	movs	r1, #0
 80195f0:	4618      	mov	r0, r3
 80195f2:	f00a ff4b 	bl	802448c <memset>

    if (tls->ca_der.len > 0) {
 80195f6:	f8d7 3368 	ldr.w	r3, [r7, #872]	@ 0x368
 80195fa:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 80195fe:	2b00      	cmp	r3, #0
 8019600:	f000 814b 	beq.w	801989a <mg_tls_recv_cert+0x47a>
      if (mg_tls_parse_cert_der(tls->ca_der.buf, tls->ca_der.len, &ca) < 0) {
 8019604:	f8d7 3368 	ldr.w	r3, [r7, #872]	@ 0x368
 8019608:	f8d3 011c 	ldr.w	r0, [r3, #284]	@ 0x11c
 801960c:	f8d7 3368 	ldr.w	r3, [r7, #872]	@ 0x368
 8019610:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 8019614:	f107 020c 	add.w	r2, r7, #12
 8019618:	4619      	mov	r1, r3
 801961a:	f7ff f8ad 	bl	8018778 <mg_tls_parse_cert_der>
 801961e:	4603      	mov	r3, r0
 8019620:	2b00      	cmp	r3, #0
 8019622:	da0a      	bge.n	801963a <mg_tls_recv_cert+0x21a>
        mg_error(c, "failed to parse CA certificate");
 8019624:	f507 735e 	add.w	r3, r7, #888	@ 0x378
 8019628:	f5a3 735d 	sub.w	r3, r3, #884	@ 0x374
 801962c:	4967      	ldr	r1, [pc, #412]	@ (80197cc <mg_tls_recv_cert+0x3ac>)
 801962e:	6818      	ldr	r0, [r3, #0]
 8019630:	f7ee fc20 	bl	8007e74 <mg_error>
        return -1;
 8019634:	f04f 33ff 	mov.w	r3, #4294967295
 8019638:	e19c      	b.n	8019974 <mg_tls_recv_cert+0x554>
      }
      MG_VERBOSE(("CA serial: %M", mg_print_hex, ca.sn.len, ca.sn.buf));
 801963a:	4b5a      	ldr	r3, [pc, #360]	@ (80197a4 <mg_tls_recv_cert+0x384>)
 801963c:	681b      	ldr	r3, [r3, #0]
 801963e:	2b03      	cmp	r3, #3
 8019640:	f340 812b 	ble.w	801989a <mg_tls_recv_cert+0x47a>
 8019644:	4b58      	ldr	r3, [pc, #352]	@ (80197a8 <mg_tls_recv_cert+0x388>)
 8019646:	f243 0265 	movw	r2, #12389	@ 0x3065
 801964a:	4958      	ldr	r1, [pc, #352]	@ (80197ac <mg_tls_recv_cert+0x38c>)
 801964c:	2004      	movs	r0, #4
 801964e:	f7f3 fdad 	bl	800d1ac <mg_log_prefix>
 8019652:	f507 735e 	add.w	r3, r7, #888	@ 0x378
 8019656:	f5a3 735b 	sub.w	r3, r3, #876	@ 0x36c
 801965a:	689a      	ldr	r2, [r3, #8]
 801965c:	f507 735e 	add.w	r3, r7, #888	@ 0x378
 8019660:	f5a3 735b 	sub.w	r3, r3, #876	@ 0x36c
 8019664:	685b      	ldr	r3, [r3, #4]
 8019666:	495a      	ldr	r1, [pc, #360]	@ (80197d0 <mg_tls_recv_cert+0x3b0>)
 8019668:	485a      	ldr	r0, [pc, #360]	@ (80197d4 <mg_tls_recv_cert+0x3b4>)
 801966a:	f7f3 fdef 	bl	800d24c <mg_log>
    }

    while (p < endp) {
 801966e:	e114      	b.n	801989a <mg_tls_recv_cert+0x47a>
      struct mg_tls_cert *ci = &certs[certnum++];
 8019670:	f8d7 3374 	ldr.w	r3, [r7, #884]	@ 0x374
 8019674:	1c5a      	adds	r2, r3, #1
 8019676:	f8c7 2374 	str.w	r2, [r7, #884]	@ 0x374
 801967a:	f107 0268 	add.w	r2, r7, #104	@ 0x68
 801967e:	215c      	movs	r1, #92	@ 0x5c
 8019680:	fb01 f303 	mul.w	r3, r1, r3
 8019684:	4413      	add	r3, r2
 8019686:	f8c7 3354 	str.w	r3, [r7, #852]	@ 0x354
      uint32_t certsz = MG_LOAD_BE24(p);
 801968a:	f8d7 3370 	ldr.w	r3, [r7, #880]	@ 0x370
 801968e:	781b      	ldrb	r3, [r3, #0]
 8019690:	041a      	lsls	r2, r3, #16
 8019692:	f8d7 3370 	ldr.w	r3, [r7, #880]	@ 0x370
 8019696:	3301      	adds	r3, #1
 8019698:	781b      	ldrb	r3, [r3, #0]
 801969a:	021b      	lsls	r3, r3, #8
 801969c:	4313      	orrs	r3, r2
 801969e:	f8d7 2370 	ldr.w	r2, [r7, #880]	@ 0x370
 80196a2:	3202      	adds	r2, #2
 80196a4:	7812      	ldrb	r2, [r2, #0]
 80196a6:	4313      	orrs	r3, r2
 80196a8:	f8c7 3350 	str.w	r3, [r7, #848]	@ 0x350
      uint8_t *cert = p + 3;
 80196ac:	f8d7 3370 	ldr.w	r3, [r7, #880]	@ 0x370
 80196b0:	3303      	adds	r3, #3
 80196b2:	f8c7 334c 	str.w	r3, [r7, #844]	@ 0x34c
      uint16_t certext = MG_LOAD_BE16(cert + certsz);
 80196b6:	f8d7 234c 	ldr.w	r2, [r7, #844]	@ 0x34c
 80196ba:	f8d7 3350 	ldr.w	r3, [r7, #848]	@ 0x350
 80196be:	4413      	add	r3, r2
 80196c0:	781b      	ldrb	r3, [r3, #0]
 80196c2:	b21b      	sxth	r3, r3
 80196c4:	021b      	lsls	r3, r3, #8
 80196c6:	b21a      	sxth	r2, r3
 80196c8:	f8d7 3350 	ldr.w	r3, [r7, #848]	@ 0x350
 80196cc:	3301      	adds	r3, #1
 80196ce:	f8d7 134c 	ldr.w	r1, [r7, #844]	@ 0x34c
 80196d2:	440b      	add	r3, r1
 80196d4:	781b      	ldrb	r3, [r3, #0]
 80196d6:	b21b      	sxth	r3, r3
 80196d8:	4313      	orrs	r3, r2
 80196da:	b21b      	sxth	r3, r3
 80196dc:	f8a7 334a 	strh.w	r3, [r7, #842]	@ 0x34a
      if (certext != 0) {
 80196e0:	f8b7 334a 	ldrh.w	r3, [r7, #842]	@ 0x34a
 80196e4:	2b00      	cmp	r3, #0
 80196e6:	d00a      	beq.n	80196fe <mg_tls_recv_cert+0x2de>
        mg_error(c, "certificate extensions are not supported");
 80196e8:	f507 735e 	add.w	r3, r7, #888	@ 0x378
 80196ec:	f5a3 735d 	sub.w	r3, r3, #884	@ 0x374
 80196f0:	4939      	ldr	r1, [pc, #228]	@ (80197d8 <mg_tls_recv_cert+0x3b8>)
 80196f2:	6818      	ldr	r0, [r3, #0]
 80196f4:	f7ee fbbe 	bl	8007e74 <mg_error>
        return -1;
 80196f8:	f04f 33ff 	mov.w	r3, #4294967295
 80196fc:	e13a      	b.n	8019974 <mg_tls_recv_cert+0x554>
      }
      p = cert + certsz + 2;
 80196fe:	f8d7 3350 	ldr.w	r3, [r7, #848]	@ 0x350
 8019702:	3302      	adds	r3, #2
 8019704:	f8d7 234c 	ldr.w	r2, [r7, #844]	@ 0x34c
 8019708:	4413      	add	r3, r2
 801970a:	f8c7 3370 	str.w	r3, [r7, #880]	@ 0x370

      if (mg_tls_parse_cert_der(cert, certsz, ci) < 0) {
 801970e:	f8d7 2354 	ldr.w	r2, [r7, #852]	@ 0x354
 8019712:	f8d7 1350 	ldr.w	r1, [r7, #848]	@ 0x350
 8019716:	f8d7 034c 	ldr.w	r0, [r7, #844]	@ 0x34c
 801971a:	f7ff f82d 	bl	8018778 <mg_tls_parse_cert_der>
 801971e:	4603      	mov	r3, r0
 8019720:	2b00      	cmp	r3, #0
 8019722:	da0a      	bge.n	801973a <mg_tls_recv_cert+0x31a>
        mg_error(c, "failed to parse certificate");
 8019724:	f507 735e 	add.w	r3, r7, #888	@ 0x378
 8019728:	f5a3 735d 	sub.w	r3, r3, #884	@ 0x374
 801972c:	492b      	ldr	r1, [pc, #172]	@ (80197dc <mg_tls_recv_cert+0x3bc>)
 801972e:	6818      	ldr	r0, [r3, #0]
 8019730:	f7ee fba0 	bl	8007e74 <mg_error>
        return -1;
 8019734:	f04f 33ff 	mov.w	r3, #4294967295
 8019738:	e11c      	b.n	8019974 <mg_tls_recv_cert+0x554>
      }

      if (ci == certs) {
 801973a:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 801973e:	f8d7 2354 	ldr.w	r2, [r7, #852]	@ 0x354
 8019742:	429a      	cmp	r2, r3
 8019744:	d163      	bne.n	801980e <mg_tls_recv_cert+0x3ee>
        // First certificate in the chain is peer cert, check SAN if requested,
        // and store public key for further CertVerify step
        if (tls->hostname[0] != '\0' &&
 8019746:	f8d7 3368 	ldr.w	r3, [r7, #872]	@ 0x368
 801974a:	f893 3144 	ldrb.w	r3, [r3, #324]	@ 0x144
 801974e:	2b00      	cmp	r3, #0
 8019750:	d048      	beq.n	80197e4 <mg_tls_recv_cert+0x3c4>
            mg_tls_verify_cert_san(cert, certsz, tls->hostname) <= 0 &&
 8019752:	f8d7 3368 	ldr.w	r3, [r7, #872]	@ 0x368
 8019756:	f503 73a2 	add.w	r3, r3, #324	@ 0x144
 801975a:	461a      	mov	r2, r3
 801975c:	f8d7 1350 	ldr.w	r1, [r7, #848]	@ 0x350
 8019760:	f8d7 034c 	ldr.w	r0, [r7, #844]	@ 0x34c
 8019764:	f7ff fbe0 	bl	8018f28 <mg_tls_verify_cert_san>
 8019768:	4603      	mov	r3, r0
        if (tls->hostname[0] != '\0' &&
 801976a:	2b00      	cmp	r3, #0
 801976c:	dc3a      	bgt.n	80197e4 <mg_tls_recv_cert+0x3c4>
            mg_tls_verify_cert_cn(&ci->subj, tls->hostname) <= 0) {
 801976e:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 8019772:	f103 0214 	add.w	r2, r3, #20
 8019776:	f8d7 3368 	ldr.w	r3, [r7, #872]	@ 0x368
 801977a:	f503 73a2 	add.w	r3, r3, #324	@ 0x144
 801977e:	4619      	mov	r1, r3
 8019780:	4610      	mov	r0, r2
 8019782:	f7ff fe03 	bl	801938c <mg_tls_verify_cert_cn>
 8019786:	4603      	mov	r3, r0
            mg_tls_verify_cert_san(cert, certsz, tls->hostname) <= 0 &&
 8019788:	2b00      	cmp	r3, #0
 801978a:	dc2b      	bgt.n	80197e4 <mg_tls_recv_cert+0x3c4>
          mg_error(c, "failed to verify hostname");
 801978c:	f507 735e 	add.w	r3, r7, #888	@ 0x378
 8019790:	f5a3 735d 	sub.w	r3, r3, #884	@ 0x374
 8019794:	4912      	ldr	r1, [pc, #72]	@ (80197e0 <mg_tls_recv_cert+0x3c0>)
 8019796:	6818      	ldr	r0, [r3, #0]
 8019798:	f7ee fb6c 	bl	8007e74 <mg_error>
          return -1;
 801979c:	f04f 33ff 	mov.w	r3, #4294967295
 80197a0:	e0e8      	b.n	8019974 <mg_tls_recv_cert+0x554>
 80197a2:	bf00      	nop
 80197a4:	20000258 	.word	0x20000258
 80197a8:	08028a98 	.word	0x08028a98
 80197ac:	08025140 	.word	0x08025140
 80197b0:	08027358 	.word	0x08027358
 80197b4:	08027370 	.word	0x08027370
 80197b8:	08027378 	.word	0x08027378
 80197bc:	08027380 	.word	0x08027380
 80197c0:	080273ac 	.word	0x080273ac
 80197c4:	080273c8 	.word	0x080273c8
 80197c8:	080273f0 	.word	0x080273f0
 80197cc:	08027414 	.word	0x08027414
 80197d0:	08012631 	.word	0x08012631
 80197d4:	08027434 	.word	0x08027434
 80197d8:	08027444 	.word	0x08027444
 80197dc:	08027284 	.word	0x08027284
 80197e0:	08027470 	.word	0x08027470
        }
        memmove(tls->pubkey, ci->pubkey.buf, ci->pubkey.len);
 80197e4:	f8d7 3368 	ldr.w	r3, [r7, #872]	@ 0x368
 80197e8:	f203 2043 	addw	r0, r3, #579	@ 0x243
 80197ec:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 80197f0:	68d9      	ldr	r1, [r3, #12]
 80197f2:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 80197f6:	691b      	ldr	r3, [r3, #16]
 80197f8:	461a      	mov	r2, r3
 80197fa:	f00a fe2d 	bl	8024458 <memmove>
        tls->pubkeysz = ci->pubkey.len;
 80197fe:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 8019802:	691a      	ldr	r2, [r3, #16]
 8019804:	f8d7 3368 	ldr.w	r3, [r7, #872]	@ 0x368
 8019808:	f8c3 2454 	str.w	r2, [r3, #1108]	@ 0x454
 801980c:	e015      	b.n	801983a <mg_tls_recv_cert+0x41a>
      } else {
        if (!mg_tls_verify_cert_signature(ci - 1, ci)) {
 801980e:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 8019812:	3b5c      	subs	r3, #92	@ 0x5c
 8019814:	f8d7 1354 	ldr.w	r1, [r7, #852]	@ 0x354
 8019818:	4618      	mov	r0, r3
 801981a:	f7ff fc2b 	bl	8019074 <mg_tls_verify_cert_signature>
 801981e:	4603      	mov	r3, r0
 8019820:	2b00      	cmp	r3, #0
 8019822:	d10a      	bne.n	801983a <mg_tls_recv_cert+0x41a>
          mg_error(c, "failed to verify certificate chain");
 8019824:	f507 735e 	add.w	r3, r7, #888	@ 0x378
 8019828:	f5a3 735d 	sub.w	r3, r3, #884	@ 0x374
 801982c:	4954      	ldr	r1, [pc, #336]	@ (8019980 <mg_tls_recv_cert+0x560>)
 801982e:	6818      	ldr	r0, [r3, #0]
 8019830:	f7ee fb20 	bl	8007e74 <mg_error>
          return -1;
 8019834:	f04f 33ff 	mov.w	r3, #4294967295
 8019838:	e09c      	b.n	8019974 <mg_tls_recv_cert+0x554>
        }
      }

      if (ca.pubkey.len == ci->pubkey.len &&
 801983a:	f507 735e 	add.w	r3, r7, #888	@ 0x378
 801983e:	f5a3 735b 	sub.w	r3, r3, #876	@ 0x36c
 8019842:	691a      	ldr	r2, [r3, #16]
 8019844:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 8019848:	691b      	ldr	r3, [r3, #16]
 801984a:	429a      	cmp	r2, r3
 801984c:	d116      	bne.n	801987c <mg_tls_recv_cert+0x45c>
          memcmp(ca.pubkey.buf, ci->pubkey.buf, ca.pubkey.len) == 0) {
 801984e:	f507 735e 	add.w	r3, r7, #888	@ 0x378
 8019852:	f5a3 735b 	sub.w	r3, r3, #876	@ 0x36c
 8019856:	68d8      	ldr	r0, [r3, #12]
 8019858:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 801985c:	68d9      	ldr	r1, [r3, #12]
 801985e:	f507 735e 	add.w	r3, r7, #888	@ 0x378
 8019862:	f5a3 735b 	sub.w	r3, r3, #876	@ 0x36c
 8019866:	691b      	ldr	r3, [r3, #16]
 8019868:	461a      	mov	r2, r3
 801986a:	f00a fde5 	bl	8024438 <memcmp>
 801986e:	4603      	mov	r3, r0
      if (ca.pubkey.len == ci->pubkey.len &&
 8019870:	2b00      	cmp	r3, #0
 8019872:	d103      	bne.n	801987c <mg_tls_recv_cert+0x45c>
        found_ca = true;
 8019874:	2301      	movs	r3, #1
 8019876:	f887 336f 	strb.w	r3, [r7, #879]	@ 0x36f
        break;
 801987a:	e015      	b.n	80198a8 <mg_tls_recv_cert+0x488>
      }

      if (certnum == sizeof(certs) / sizeof(certs[0]) - 1) {
 801987c:	f8d7 3374 	ldr.w	r3, [r7, #884]	@ 0x374
 8019880:	2b07      	cmp	r3, #7
 8019882:	d10a      	bne.n	801989a <mg_tls_recv_cert+0x47a>
        mg_error(c, "too many certificates in the chain");
 8019884:	f507 735e 	add.w	r3, r7, #888	@ 0x378
 8019888:	f5a3 735d 	sub.w	r3, r3, #884	@ 0x374
 801988c:	493d      	ldr	r1, [pc, #244]	@ (8019984 <mg_tls_recv_cert+0x564>)
 801988e:	6818      	ldr	r0, [r3, #0]
 8019890:	f7ee faf0 	bl	8007e74 <mg_error>
        return -1;
 8019894:	f04f 33ff 	mov.w	r3, #4294967295
 8019898:	e06c      	b.n	8019974 <mg_tls_recv_cert+0x554>
    while (p < endp) {
 801989a:	f8d7 2370 	ldr.w	r2, [r7, #880]	@ 0x370
 801989e:	f8d7 3358 	ldr.w	r3, [r7, #856]	@ 0x358
 80198a2:	429a      	cmp	r2, r3
 80198a4:	f4ff aee4 	bcc.w	8019670 <mg_tls_recv_cert+0x250>
      }
    }

    if (!found_ca && tls->ca_der.len > 0) {
 80198a8:	f897 336f 	ldrb.w	r3, [r7, #879]	@ 0x36f
 80198ac:	f083 0301 	eor.w	r3, r3, #1
 80198b0:	b2db      	uxtb	r3, r3
 80198b2:	2b00      	cmp	r3, #0
 80198b4:	d03b      	beq.n	801992e <mg_tls_recv_cert+0x50e>
 80198b6:	f8d7 3368 	ldr.w	r3, [r7, #872]	@ 0x368
 80198ba:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 80198be:	2b00      	cmp	r3, #0
 80198c0:	d035      	beq.n	801992e <mg_tls_recv_cert+0x50e>
      if (certnum < 1 ||
 80198c2:	f8d7 3374 	ldr.w	r3, [r7, #884]	@ 0x374
 80198c6:	2b00      	cmp	r3, #0
 80198c8:	dd11      	ble.n	80198ee <mg_tls_recv_cert+0x4ce>
          !mg_tls_verify_cert_signature(&certs[certnum - 1], &ca)) {
 80198ca:	f8d7 3374 	ldr.w	r3, [r7, #884]	@ 0x374
 80198ce:	3b01      	subs	r3, #1
 80198d0:	f107 0268 	add.w	r2, r7, #104	@ 0x68
 80198d4:	215c      	movs	r1, #92	@ 0x5c
 80198d6:	fb01 f303 	mul.w	r3, r1, r3
 80198da:	4413      	add	r3, r2
 80198dc:	f107 020c 	add.w	r2, r7, #12
 80198e0:	4611      	mov	r1, r2
 80198e2:	4618      	mov	r0, r3
 80198e4:	f7ff fbc6 	bl	8019074 <mg_tls_verify_cert_signature>
 80198e8:	4603      	mov	r3, r0
      if (certnum < 1 ||
 80198ea:	2b00      	cmp	r3, #0
 80198ec:	d10a      	bne.n	8019904 <mg_tls_recv_cert+0x4e4>
        mg_error(c, "failed to verify CA");
 80198ee:	f507 735e 	add.w	r3, r7, #888	@ 0x378
 80198f2:	f5a3 735d 	sub.w	r3, r3, #884	@ 0x374
 80198f6:	4924      	ldr	r1, [pc, #144]	@ (8019988 <mg_tls_recv_cert+0x568>)
 80198f8:	6818      	ldr	r0, [r3, #0]
 80198fa:	f7ee fabb 	bl	8007e74 <mg_error>
        return -1;
 80198fe:	f04f 33ff 	mov.w	r3, #4294967295
 8019902:	e037      	b.n	8019974 <mg_tls_recv_cert+0x554>
      } else if (is_client) {
 8019904:	f507 735e 	add.w	r3, r7, #888	@ 0x378
 8019908:	f2a3 3375 	subw	r3, r3, #885	@ 0x375
 801990c:	781b      	ldrb	r3, [r3, #0]
 801990e:	2b00      	cmp	r3, #0
 8019910:	d00d      	beq.n	801992e <mg_tls_recv_cert+0x50e>
        MG_VERBOSE(
 8019912:	4b1e      	ldr	r3, [pc, #120]	@ (801998c <mg_tls_recv_cert+0x56c>)
 8019914:	681b      	ldr	r3, [r3, #0]
 8019916:	2b03      	cmp	r3, #3
 8019918:	dd09      	ble.n	801992e <mg_tls_recv_cert+0x50e>
 801991a:	4b1d      	ldr	r3, [pc, #116]	@ (8019990 <mg_tls_recv_cert+0x570>)
 801991c:	f243 029c 	movw	r2, #12444	@ 0x309c
 8019920:	491c      	ldr	r1, [pc, #112]	@ (8019994 <mg_tls_recv_cert+0x574>)
 8019922:	2004      	movs	r0, #4
 8019924:	f7f3 fc42 	bl	800d1ac <mg_log_prefix>
 8019928:	481b      	ldr	r0, [pc, #108]	@ (8019998 <mg_tls_recv_cert+0x578>)
 801992a:	f7f3 fc8f 	bl	800d24c <mg_log>
            ("CA was not in the chain, but verification with builtin CA "
             "passed"));
      }
    }
  }
  mg_tls_drop_message(c);
 801992e:	f507 735e 	add.w	r3, r7, #888	@ 0x378
 8019932:	f5a3 735d 	sub.w	r3, r3, #884	@ 0x374
 8019936:	6818      	ldr	r0, [r3, #0]
 8019938:	f7fc ff58 	bl	80167ec <mg_tls_drop_message>
  mg_tls_calc_cert_verify_hash(c, tls->sighash, !is_client);
 801993c:	f8d7 3368 	ldr.w	r3, [r7, #872]	@ 0x368
 8019940:	f503 618b 	add.w	r1, r3, #1112	@ 0x458
 8019944:	f507 735e 	add.w	r3, r7, #888	@ 0x378
 8019948:	f2a3 3375 	subw	r3, r3, #885	@ 0x375
 801994c:	781b      	ldrb	r3, [r3, #0]
 801994e:	2b00      	cmp	r3, #0
 8019950:	bf14      	ite	ne
 8019952:	2301      	movne	r3, #1
 8019954:	2300      	moveq	r3, #0
 8019956:	b2db      	uxtb	r3, r3
 8019958:	f083 0301 	eor.w	r3, r3, #1
 801995c:	b2db      	uxtb	r3, r3
 801995e:	f003 0301 	and.w	r3, r3, #1
 8019962:	b2da      	uxtb	r2, r3
 8019964:	f507 735e 	add.w	r3, r7, #888	@ 0x378
 8019968:	f5a3 735d 	sub.w	r3, r3, #884	@ 0x374
 801996c:	6818      	ldr	r0, [r3, #0]
 801996e:	f7fd fca1 	bl	80172b4 <mg_tls_calc_cert_verify_hash>
  return 0;
 8019972:	2300      	movs	r3, #0
}
 8019974:	4618      	mov	r0, r3
 8019976:	f507 775e 	add.w	r7, r7, #888	@ 0x378
 801997a:	46bd      	mov	sp, r7
 801997c:	bd80      	pop	{r7, pc}
 801997e:	bf00      	nop
 8019980:	0802748c 	.word	0x0802748c
 8019984:	080274b0 	.word	0x080274b0
 8019988:	080274d4 	.word	0x080274d4
 801998c:	20000258 	.word	0x20000258
 8019990:	08028a98 	.word	0x08028a98
 8019994:	08025140 	.word	0x08025140
 8019998:	080274e8 	.word	0x080274e8

0801999c <mg_tls_recv_cert_verify>:

static int mg_tls_recv_cert_verify(struct mg_connection *c) {
 801999c:	b5b0      	push	{r4, r5, r7, lr}
 801999e:	f5ad 7d1c 	sub.w	sp, sp, #624	@ 0x270
 80199a2:	af04      	add	r7, sp, #16
 80199a4:	f507 7318 	add.w	r3, r7, #608	@ 0x260
 80199a8:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 80199ac:	6018      	str	r0, [r3, #0]
  struct tls_data *tls = (struct tls_data *) c->tls;
 80199ae:	f507 7318 	add.w	r3, r7, #608	@ 0x260
 80199b2:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 80199b6:	681b      	ldr	r3, [r3, #0]
 80199b8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80199bc:	f8c7 325c 	str.w	r3, [r7, #604]	@ 0x25c
  unsigned char *recv_buf;
  if (mg_tls_recv_record(c) < 0) {
 80199c0:	f507 7318 	add.w	r3, r7, #608	@ 0x260
 80199c4:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 80199c8:	6818      	ldr	r0, [r3, #0]
 80199ca:	f7fd fb59 	bl	8017080 <mg_tls_recv_record>
 80199ce:	4603      	mov	r3, r0
 80199d0:	2b00      	cmp	r3, #0
 80199d2:	da02      	bge.n	80199da <mg_tls_recv_cert_verify+0x3e>
    return -1;
 80199d4:	f04f 33ff 	mov.w	r3, #4294967295
 80199d8:	e20b      	b.n	8019df2 <mg_tls_recv_cert_verify+0x456>
  }
  recv_buf = &c->rtls.buf[tls->recv_offset];
 80199da:	f507 7318 	add.w	r3, r7, #608	@ 0x260
 80199de:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 80199e2:	681b      	ldr	r3, [r3, #0]
 80199e4:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80199e6:	f8d7 325c 	ldr.w	r3, [r7, #604]	@ 0x25c
 80199ea:	695b      	ldr	r3, [r3, #20]
 80199ec:	4413      	add	r3, r2
 80199ee:	f8c7 3258 	str.w	r3, [r7, #600]	@ 0x258
  if (recv_buf[0] != MG_TLS_CERTIFICATE_VERIFY) {
 80199f2:	f8d7 3258 	ldr.w	r3, [r7, #600]	@ 0x258
 80199f6:	781b      	ldrb	r3, [r3, #0]
 80199f8:	2b0f      	cmp	r3, #15
 80199fa:	d01e      	beq.n	8019a3a <mg_tls_recv_cert_verify+0x9e>
    mg_error(c, "expected %s certificate verify but got msg 0x%02x",
             c->is_client ? "server" : "client", recv_buf[0]);
 80199fc:	f507 7318 	add.w	r3, r7, #608	@ 0x260
 8019a00:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 8019a04:	681b      	ldr	r3, [r3, #0]
 8019a06:	f893 30b4 	ldrb.w	r3, [r3, #180]	@ 0xb4
 8019a0a:	f003 0302 	and.w	r3, r3, #2
 8019a0e:	b2db      	uxtb	r3, r3
    mg_error(c, "expected %s certificate verify but got msg 0x%02x",
 8019a10:	2b00      	cmp	r3, #0
 8019a12:	d001      	beq.n	8019a18 <mg_tls_recv_cert_verify+0x7c>
 8019a14:	4aa8      	ldr	r2, [pc, #672]	@ (8019cb8 <mg_tls_recv_cert_verify+0x31c>)
 8019a16:	e000      	b.n	8019a1a <mg_tls_recv_cert_verify+0x7e>
 8019a18:	4aa8      	ldr	r2, [pc, #672]	@ (8019cbc <mg_tls_recv_cert_verify+0x320>)
             c->is_client ? "server" : "client", recv_buf[0]);
 8019a1a:	f8d7 3258 	ldr.w	r3, [r7, #600]	@ 0x258
 8019a1e:	781b      	ldrb	r3, [r3, #0]
    mg_error(c, "expected %s certificate verify but got msg 0x%02x",
 8019a20:	4619      	mov	r1, r3
 8019a22:	f507 7318 	add.w	r3, r7, #608	@ 0x260
 8019a26:	f5a3 7017 	sub.w	r0, r3, #604	@ 0x25c
 8019a2a:	460b      	mov	r3, r1
 8019a2c:	49a4      	ldr	r1, [pc, #656]	@ (8019cc0 <mg_tls_recv_cert_verify+0x324>)
 8019a2e:	6800      	ldr	r0, [r0, #0]
 8019a30:	f7ee fa20 	bl	8007e74 <mg_error>
    return -1;
 8019a34:	f04f 33ff 	mov.w	r3, #4294967295
 8019a38:	e1db      	b.n	8019df2 <mg_tls_recv_cert_verify+0x456>
  }
  if (tls->recv_len < 8) {
 8019a3a:	f8d7 325c 	ldr.w	r3, [r7, #604]	@ 0x25c
 8019a3e:	699b      	ldr	r3, [r3, #24]
 8019a40:	2b07      	cmp	r3, #7
 8019a42:	d80d      	bhi.n	8019a60 <mg_tls_recv_cert_verify+0xc4>
    mg_error(c, "server certificate verify is too short: %d bytes",
 8019a44:	f8d7 325c 	ldr.w	r3, [r7, #604]	@ 0x25c
 8019a48:	699a      	ldr	r2, [r3, #24]
 8019a4a:	f507 7318 	add.w	r3, r7, #608	@ 0x260
 8019a4e:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 8019a52:	499c      	ldr	r1, [pc, #624]	@ (8019cc4 <mg_tls_recv_cert_verify+0x328>)
 8019a54:	6818      	ldr	r0, [r3, #0]
 8019a56:	f7ee fa0d 	bl	8007e74 <mg_error>
             tls->recv_len);
    return -1;
 8019a5a:	f04f 33ff 	mov.w	r3, #4294967295
 8019a5e:	e1c8      	b.n	8019df2 <mg_tls_recv_cert_verify+0x456>
  }

  // Ignore CertificateVerify if strict checks are not required
  if (tls->skip_verification) {
 8019a60:	f8d7 325c 	ldr.w	r3, [r7, #604]	@ 0x25c
 8019a64:	f893 3110 	ldrb.w	r3, [r3, #272]	@ 0x110
 8019a68:	2b00      	cmp	r3, #0
 8019a6a:	d008      	beq.n	8019a7e <mg_tls_recv_cert_verify+0xe2>
    mg_tls_drop_message(c);
 8019a6c:	f507 7318 	add.w	r3, r7, #608	@ 0x260
 8019a70:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 8019a74:	6818      	ldr	r0, [r3, #0]
 8019a76:	f7fc feb9 	bl	80167ec <mg_tls_drop_message>
    return 0;
 8019a7a:	2300      	movs	r3, #0
 8019a7c:	e1b9      	b.n	8019df2 <mg_tls_recv_cert_verify+0x456>
  }

  {
    uint16_t sigalg = MG_LOAD_BE16(recv_buf + 4);
 8019a7e:	f8d7 3258 	ldr.w	r3, [r7, #600]	@ 0x258
 8019a82:	3304      	adds	r3, #4
 8019a84:	781b      	ldrb	r3, [r3, #0]
 8019a86:	b21b      	sxth	r3, r3
 8019a88:	021b      	lsls	r3, r3, #8
 8019a8a:	b21a      	sxth	r2, r3
 8019a8c:	f8d7 3258 	ldr.w	r3, [r7, #600]	@ 0x258
 8019a90:	3305      	adds	r3, #5
 8019a92:	781b      	ldrb	r3, [r3, #0]
 8019a94:	b21b      	sxth	r3, r3
 8019a96:	4313      	orrs	r3, r2
 8019a98:	b21b      	sxth	r3, r3
 8019a9a:	f8a7 3256 	strh.w	r3, [r7, #598]	@ 0x256
    uint16_t siglen = MG_LOAD_BE16(recv_buf + 6);
 8019a9e:	f8d7 3258 	ldr.w	r3, [r7, #600]	@ 0x258
 8019aa2:	3306      	adds	r3, #6
 8019aa4:	781b      	ldrb	r3, [r3, #0]
 8019aa6:	b21b      	sxth	r3, r3
 8019aa8:	021b      	lsls	r3, r3, #8
 8019aaa:	b21a      	sxth	r2, r3
 8019aac:	f8d7 3258 	ldr.w	r3, [r7, #600]	@ 0x258
 8019ab0:	3307      	adds	r3, #7
 8019ab2:	781b      	ldrb	r3, [r3, #0]
 8019ab4:	b21b      	sxth	r3, r3
 8019ab6:	4313      	orrs	r3, r2
 8019ab8:	b21b      	sxth	r3, r3
 8019aba:	f8a7 3254 	strh.w	r3, [r7, #596]	@ 0x254
    uint8_t *sigbuf = recv_buf + 8;
 8019abe:	f8d7 3258 	ldr.w	r3, [r7, #600]	@ 0x258
 8019ac2:	3308      	adds	r3, #8
 8019ac4:	f8c7 3250 	str.w	r3, [r7, #592]	@ 0x250
    if (siglen > tls->recv_len - 8) {
 8019ac8:	f8b7 2254 	ldrh.w	r2, [r7, #596]	@ 0x254
 8019acc:	f8d7 325c 	ldr.w	r3, [r7, #604]	@ 0x25c
 8019ad0:	699b      	ldr	r3, [r3, #24]
 8019ad2:	3b08      	subs	r3, #8
 8019ad4:	429a      	cmp	r2, r3
 8019ad6:	d910      	bls.n	8019afa <mg_tls_recv_cert_verify+0x15e>
      mg_error(c, "invalid certverify signature length: %d, expected %d",
 8019ad8:	f8b7 2254 	ldrh.w	r2, [r7, #596]	@ 0x254
               siglen, tls->recv_len - 8);
 8019adc:	f8d7 325c 	ldr.w	r3, [r7, #604]	@ 0x25c
 8019ae0:	699b      	ldr	r3, [r3, #24]
      mg_error(c, "invalid certverify signature length: %d, expected %d",
 8019ae2:	3b08      	subs	r3, #8
 8019ae4:	f507 7118 	add.w	r1, r7, #608	@ 0x260
 8019ae8:	f5a1 7017 	sub.w	r0, r1, #604	@ 0x25c
 8019aec:	4976      	ldr	r1, [pc, #472]	@ (8019cc8 <mg_tls_recv_cert_verify+0x32c>)
 8019aee:	6800      	ldr	r0, [r0, #0]
 8019af0:	f7ee f9c0 	bl	8007e74 <mg_error>
      return -1;
 8019af4:	f04f 33ff 	mov.w	r3, #4294967295
 8019af8:	e17b      	b.n	8019df2 <mg_tls_recv_cert_verify+0x456>
    }
    MG_VERBOSE(
 8019afa:	4b74      	ldr	r3, [pc, #464]	@ (8019ccc <mg_tls_recv_cert_verify+0x330>)
 8019afc:	681b      	ldr	r3, [r3, #0]
 8019afe:	2b03      	cmp	r3, #3
 8019b00:	dd0e      	ble.n	8019b20 <mg_tls_recv_cert_verify+0x184>
 8019b02:	4b73      	ldr	r3, [pc, #460]	@ (8019cd0 <mg_tls_recv_cert_verify+0x334>)
 8019b04:	f243 02c8 	movw	r2, #12488	@ 0x30c8
 8019b08:	4972      	ldr	r1, [pc, #456]	@ (8019cd4 <mg_tls_recv_cert_verify+0x338>)
 8019b0a:	2004      	movs	r0, #4
 8019b0c:	f7f3 fb4e 	bl	800d1ac <mg_log_prefix>
 8019b10:	f8b7 3256 	ldrh.w	r3, [r7, #598]	@ 0x256
 8019b14:	f8b7 2254 	ldrh.w	r2, [r7, #596]	@ 0x254
 8019b18:	4619      	mov	r1, r3
 8019b1a:	486f      	ldr	r0, [pc, #444]	@ (8019cd8 <mg_tls_recv_cert_verify+0x33c>)
 8019b1c:	f7f3 fb96 	bl	800d24c <mg_log>
        ("certificate verification, algo=%04x, siglen=%d", sigalg, siglen));

    if (sigalg == 0x0804) {  // rsa_pss_rsae_sha256
 8019b20:	f8b7 3256 	ldrh.w	r3, [r7, #598]	@ 0x256
 8019b24:	f640 0204 	movw	r2, #2052	@ 0x804
 8019b28:	4293      	cmp	r3, r2
 8019b2a:	d173      	bne.n	8019c14 <mg_tls_recv_cert_verify+0x278>
      uint8_t sig2[512];     // 2048 or 4096 bits
      struct mg_der_tlv seq, modulus, exponent;

      if (mg_der_parse(tls->pubkey, tls->pubkeysz, &seq) <= 0 ||
 8019b2c:	f8d7 325c 	ldr.w	r3, [r7, #604]	@ 0x25c
 8019b30:	f203 2043 	addw	r0, r3, #579	@ 0x243
 8019b34:	f8d7 325c 	ldr.w	r3, [r7, #604]	@ 0x25c
 8019b38:	f8d3 3454 	ldr.w	r3, [r3, #1108]	@ 0x454
 8019b3c:	f507 7211 	add.w	r2, r7, #580	@ 0x244
 8019b40:	4619      	mov	r1, r3
 8019b42:	f7fc fcd9 	bl	80164f8 <mg_der_parse>
 8019b46:	4603      	mov	r3, r0
 8019b48:	2b00      	cmp	r3, #0
 8019b4a:	dd1d      	ble.n	8019b88 <mg_tls_recv_cert_verify+0x1ec>
          mg_der_next(&seq, &modulus) <= 0 || modulus.type != 2 ||
 8019b4c:	f507 720e 	add.w	r2, r7, #568	@ 0x238
 8019b50:	f507 7311 	add.w	r3, r7, #580	@ 0x244
 8019b54:	4611      	mov	r1, r2
 8019b56:	4618      	mov	r0, r3
 8019b58:	f7fc fd2e 	bl	80165b8 <mg_der_next>
 8019b5c:	4603      	mov	r3, r0
      if (mg_der_parse(tls->pubkey, tls->pubkeysz, &seq) <= 0 ||
 8019b5e:	2b00      	cmp	r3, #0
 8019b60:	dd12      	ble.n	8019b88 <mg_tls_recv_cert_verify+0x1ec>
          mg_der_next(&seq, &modulus) <= 0 || modulus.type != 2 ||
 8019b62:	f897 3238 	ldrb.w	r3, [r7, #568]	@ 0x238
 8019b66:	2b02      	cmp	r3, #2
 8019b68:	d10e      	bne.n	8019b88 <mg_tls_recv_cert_verify+0x1ec>
          mg_der_next(&seq, &exponent) <= 0 || exponent.type != 2) {
 8019b6a:	f507 720b 	add.w	r2, r7, #556	@ 0x22c
 8019b6e:	f507 7311 	add.w	r3, r7, #580	@ 0x244
 8019b72:	4611      	mov	r1, r2
 8019b74:	4618      	mov	r0, r3
 8019b76:	f7fc fd1f 	bl	80165b8 <mg_der_next>
 8019b7a:	4603      	mov	r3, r0
          mg_der_next(&seq, &modulus) <= 0 || modulus.type != 2 ||
 8019b7c:	2b00      	cmp	r3, #0
 8019b7e:	dd03      	ble.n	8019b88 <mg_tls_recv_cert_verify+0x1ec>
          mg_der_next(&seq, &exponent) <= 0 || exponent.type != 2) {
 8019b80:	f897 322c 	ldrb.w	r3, [r7, #556]	@ 0x22c
 8019b84:	2b02      	cmp	r3, #2
 8019b86:	d00a      	beq.n	8019b9e <mg_tls_recv_cert_verify+0x202>
        mg_error(c, "invalid public key");
 8019b88:	f507 7318 	add.w	r3, r7, #608	@ 0x260
 8019b8c:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 8019b90:	4952      	ldr	r1, [pc, #328]	@ (8019cdc <mg_tls_recv_cert_verify+0x340>)
 8019b92:	6818      	ldr	r0, [r3, #0]
 8019b94:	f7ee f96e 	bl	8007e74 <mg_error>
        return -1;
 8019b98:	f04f 33ff 	mov.w	r3, #4294967295
 8019b9c:	e129      	b.n	8019df2 <mg_tls_recv_cert_verify+0x456>
      }

      mg_rsa_mod_pow(modulus.value, modulus.len, exponent.value, exponent.len,
 8019b9e:	f8d7 0240 	ldr.w	r0, [r7, #576]	@ 0x240
 8019ba2:	f8d7 123c 	ldr.w	r1, [r7, #572]	@ 0x23c
 8019ba6:	f8d7 4234 	ldr.w	r4, [r7, #564]	@ 0x234
 8019baa:	f8d7 5230 	ldr.w	r5, [r7, #560]	@ 0x230
 8019bae:	f8b7 3254 	ldrh.w	r3, [r7, #596]	@ 0x254
 8019bb2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8019bb6:	9203      	str	r2, [sp, #12]
 8019bb8:	f107 0208 	add.w	r2, r7, #8
 8019bbc:	9202      	str	r2, [sp, #8]
 8019bbe:	9301      	str	r3, [sp, #4]
 8019bc0:	f8d7 3250 	ldr.w	r3, [r7, #592]	@ 0x250
 8019bc4:	9300      	str	r3, [sp, #0]
 8019bc6:	462b      	mov	r3, r5
 8019bc8:	4622      	mov	r2, r4
 8019bca:	f003 ff5d 	bl	801da88 <mg_rsa_mod_pow>
                     sigbuf, siglen, sig2, sizeof(sig2));

      if (sig2[sizeof(sig2) - 1] != 0xbc) {
 8019bce:	f507 7318 	add.w	r3, r7, #608	@ 0x260
 8019bd2:	f5a3 7316 	sub.w	r3, r3, #600	@ 0x258
 8019bd6:	f893 31ff 	ldrb.w	r3, [r3, #511]	@ 0x1ff
 8019bda:	2bbc      	cmp	r3, #188	@ 0xbc
 8019bdc:	d00a      	beq.n	8019bf4 <mg_tls_recv_cert_verify+0x258>
        mg_error(c, "failed to verify RSA certificate (certverify)");
 8019bde:	f507 7318 	add.w	r3, r7, #608	@ 0x260
 8019be2:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 8019be6:	493e      	ldr	r1, [pc, #248]	@ (8019ce0 <mg_tls_recv_cert_verify+0x344>)
 8019be8:	6818      	ldr	r0, [r3, #0]
 8019bea:	f7ee f943 	bl	8007e74 <mg_error>
        return -1;
 8019bee:	f04f 33ff 	mov.w	r3, #4294967295
 8019bf2:	e0fe      	b.n	8019df2 <mg_tls_recv_cert_verify+0x456>
      }
      MG_DEBUG(("certificate verification successful (RSA)"));
 8019bf4:	4b35      	ldr	r3, [pc, #212]	@ (8019ccc <mg_tls_recv_cert_verify+0x330>)
 8019bf6:	681b      	ldr	r3, [r3, #0]
 8019bf8:	2b02      	cmp	r3, #2
 8019bfa:	f340 80f2 	ble.w	8019de2 <mg_tls_recv_cert_verify+0x446>
 8019bfe:	4b34      	ldr	r3, [pc, #208]	@ (8019cd0 <mg_tls_recv_cert_verify+0x334>)
 8019c00:	f243 02dd 	movw	r2, #12509	@ 0x30dd
 8019c04:	4933      	ldr	r1, [pc, #204]	@ (8019cd4 <mg_tls_recv_cert_verify+0x338>)
 8019c06:	2003      	movs	r0, #3
 8019c08:	f7f3 fad0 	bl	800d1ac <mg_log_prefix>
 8019c0c:	4835      	ldr	r0, [pc, #212]	@ (8019ce4 <mg_tls_recv_cert_verify+0x348>)
 8019c0e:	f7f3 fb1d 	bl	800d24c <mg_log>
 8019c12:	e0e6      	b.n	8019de2 <mg_tls_recv_cert_verify+0x446>
    } else if (sigalg == 0x0403) {  // ecdsa_secp256r1_sha256
 8019c14:	f8b7 3256 	ldrh.w	r3, [r7, #598]	@ 0x256
 8019c18:	f240 4203 	movw	r2, #1027	@ 0x403
 8019c1c:	4293      	cmp	r3, r2
 8019c1e:	f040 80ca 	bne.w	8019db6 <mg_tls_recv_cert_verify+0x41a>
      // Extract certificate signature and verify it using pubkey and sighash
      uint8_t sig[64];
      struct mg_der_tlv seq, r, s;
      if (mg_der_to_tlv(sigbuf, siglen, &seq) < 0) {
 8019c22:	f8b7 3254 	ldrh.w	r3, [r7, #596]	@ 0x254
 8019c26:	f507 7208 	add.w	r2, r7, #544	@ 0x220
 8019c2a:	4619      	mov	r1, r3
 8019c2c:	f8d7 0250 	ldr.w	r0, [r7, #592]	@ 0x250
 8019c30:	f7fc fd3d 	bl	80166ae <mg_der_to_tlv>
 8019c34:	4603      	mov	r3, r0
 8019c36:	2b00      	cmp	r3, #0
 8019c38:	da0a      	bge.n	8019c50 <mg_tls_recv_cert_verify+0x2b4>
        mg_error(c, "verification message is not an ASN.1 DER sequence");
 8019c3a:	f507 7318 	add.w	r3, r7, #608	@ 0x260
 8019c3e:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 8019c42:	4929      	ldr	r1, [pc, #164]	@ (8019ce8 <mg_tls_recv_cert_verify+0x34c>)
 8019c44:	6818      	ldr	r0, [r3, #0]
 8019c46:	f7ee f915 	bl	8007e74 <mg_error>
        return -1;
 8019c4a:	f04f 33ff 	mov.w	r3, #4294967295
 8019c4e:	e0d0      	b.n	8019df2 <mg_tls_recv_cert_verify+0x456>
      }
      if (mg_der_to_tlv(seq.value, seq.len, &r) < 0) {
 8019c50:	f8d7 3228 	ldr.w	r3, [r7, #552]	@ 0x228
 8019c54:	f8d7 1224 	ldr.w	r1, [r7, #548]	@ 0x224
 8019c58:	f507 7205 	add.w	r2, r7, #532	@ 0x214
 8019c5c:	4618      	mov	r0, r3
 8019c5e:	f7fc fd26 	bl	80166ae <mg_der_to_tlv>
 8019c62:	4603      	mov	r3, r0
 8019c64:	2b00      	cmp	r3, #0
 8019c66:	da0a      	bge.n	8019c7e <mg_tls_recv_cert_verify+0x2e2>
        mg_error(c, "missing first part of the signature");
 8019c68:	f507 7318 	add.w	r3, r7, #608	@ 0x260
 8019c6c:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 8019c70:	491e      	ldr	r1, [pc, #120]	@ (8019cec <mg_tls_recv_cert_verify+0x350>)
 8019c72:	6818      	ldr	r0, [r3, #0]
 8019c74:	f7ee f8fe 	bl	8007e74 <mg_error>
        return -1;
 8019c78:	f04f 33ff 	mov.w	r3, #4294967295
 8019c7c:	e0b9      	b.n	8019df2 <mg_tls_recv_cert_verify+0x456>
      }
      if (mg_der_to_tlv(r.value + r.len, seq.len - r.len, &s) < 0) {
 8019c7e:	f8d7 221c 	ldr.w	r2, [r7, #540]	@ 0x21c
 8019c82:	f8d7 3218 	ldr.w	r3, [r7, #536]	@ 0x218
 8019c86:	18d0      	adds	r0, r2, r3
 8019c88:	f8d7 2224 	ldr.w	r2, [r7, #548]	@ 0x224
 8019c8c:	f8d7 3218 	ldr.w	r3, [r7, #536]	@ 0x218
 8019c90:	1ad3      	subs	r3, r2, r3
 8019c92:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8019c96:	4619      	mov	r1, r3
 8019c98:	f7fc fd09 	bl	80166ae <mg_der_to_tlv>
 8019c9c:	4603      	mov	r3, r0
 8019c9e:	2b00      	cmp	r3, #0
 8019ca0:	da28      	bge.n	8019cf4 <mg_tls_recv_cert_verify+0x358>
        mg_error(c, "missing second part of the signature");
 8019ca2:	f507 7318 	add.w	r3, r7, #608	@ 0x260
 8019ca6:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 8019caa:	4911      	ldr	r1, [pc, #68]	@ (8019cf0 <mg_tls_recv_cert_verify+0x354>)
 8019cac:	6818      	ldr	r0, [r3, #0]
 8019cae:	f7ee f8e1 	bl	8007e74 <mg_error>
        return -1;
 8019cb2:	f04f 33ff 	mov.w	r3, #4294967295
 8019cb6:	e09c      	b.n	8019df2 <mg_tls_recv_cert_verify+0x456>
 8019cb8:	08027370 	.word	0x08027370
 8019cbc:	08027378 	.word	0x08027378
 8019cc0:	0802752c 	.word	0x0802752c
 8019cc4:	08027560 	.word	0x08027560
 8019cc8:	08027594 	.word	0x08027594
 8019ccc:	20000258 	.word	0x20000258
 8019cd0:	08028aac 	.word	0x08028aac
 8019cd4:	08025140 	.word	0x08025140
 8019cd8:	080275cc 	.word	0x080275cc
 8019cdc:	080275fc 	.word	0x080275fc
 8019ce0:	08027610 	.word	0x08027610
 8019ce4:	08027640 	.word	0x08027640
 8019ce8:	0802766c 	.word	0x0802766c
 8019cec:	080276a0 	.word	0x080276a0
 8019cf0:	080276c4 	.word	0x080276c4
      }
      // Integers may be padded with zeroes
      if (r.len > 32) r.value = r.value + (r.len - 32), r.len = 32;
 8019cf4:	f8d7 3218 	ldr.w	r3, [r7, #536]	@ 0x218
 8019cf8:	2b20      	cmp	r3, #32
 8019cfa:	d90a      	bls.n	8019d12 <mg_tls_recv_cert_verify+0x376>
 8019cfc:	f8d7 221c 	ldr.w	r2, [r7, #540]	@ 0x21c
 8019d00:	f8d7 3218 	ldr.w	r3, [r7, #536]	@ 0x218
 8019d04:	3b20      	subs	r3, #32
 8019d06:	4413      	add	r3, r2
 8019d08:	f8c7 321c 	str.w	r3, [r7, #540]	@ 0x21c
 8019d0c:	2320      	movs	r3, #32
 8019d0e:	f8c7 3218 	str.w	r3, [r7, #536]	@ 0x218
      if (s.len > 32) s.value = s.value + (s.len - 32), s.len = 32;
 8019d12:	f8d7 320c 	ldr.w	r3, [r7, #524]	@ 0x20c
 8019d16:	2b20      	cmp	r3, #32
 8019d18:	d90a      	bls.n	8019d30 <mg_tls_recv_cert_verify+0x394>
 8019d1a:	f8d7 2210 	ldr.w	r2, [r7, #528]	@ 0x210
 8019d1e:	f8d7 320c 	ldr.w	r3, [r7, #524]	@ 0x20c
 8019d22:	3b20      	subs	r3, #32
 8019d24:	4413      	add	r3, r2
 8019d26:	f8c7 3210 	str.w	r3, [r7, #528]	@ 0x210
 8019d2a:	2320      	movs	r3, #32
 8019d2c:	f8c7 320c 	str.w	r3, [r7, #524]	@ 0x20c

      memmove(sig, r.value, r.len);
 8019d30:	f8d7 121c 	ldr.w	r1, [r7, #540]	@ 0x21c
 8019d34:	f8d7 2218 	ldr.w	r2, [r7, #536]	@ 0x218
 8019d38:	f107 0308 	add.w	r3, r7, #8
 8019d3c:	4618      	mov	r0, r3
 8019d3e:	f00a fb8b 	bl	8024458 <memmove>
      memmove(sig + 32, s.value, s.len);
 8019d42:	f107 0308 	add.w	r3, r7, #8
 8019d46:	3320      	adds	r3, #32
 8019d48:	f8d7 1210 	ldr.w	r1, [r7, #528]	@ 0x210
 8019d4c:	f8d7 220c 	ldr.w	r2, [r7, #524]	@ 0x20c
 8019d50:	4618      	mov	r0, r3
 8019d52:	f00a fb81 	bl	8024458 <memmove>

      if (mg_uecc_verify(tls->pubkey, tls->sighash, sizeof(tls->sighash), sig,
 8019d56:	f8d7 325c 	ldr.w	r3, [r7, #604]	@ 0x25c
 8019d5a:	f203 2443 	addw	r4, r3, #579	@ 0x243
 8019d5e:	f8d7 325c 	ldr.w	r3, [r7, #604]	@ 0x25c
 8019d62:	f503 658b 	add.w	r5, r3, #1112	@ 0x458
 8019d66:	f004 feb5 	bl	801ead4 <mg_uecc_secp256r1>
 8019d6a:	4602      	mov	r2, r0
 8019d6c:	f107 0308 	add.w	r3, r7, #8
 8019d70:	9200      	str	r2, [sp, #0]
 8019d72:	2220      	movs	r2, #32
 8019d74:	4629      	mov	r1, r5
 8019d76:	4620      	mov	r0, r4
 8019d78:	f006 f848 	bl	801fe0c <mg_uecc_verify>
 8019d7c:	4603      	mov	r3, r0
 8019d7e:	2b01      	cmp	r3, #1
 8019d80:	d00a      	beq.n	8019d98 <mg_tls_recv_cert_verify+0x3fc>
                         mg_uecc_secp256r1()) != 1) {
        mg_error(c, "failed to verify EC certificate (certverify)");
 8019d82:	f507 7318 	add.w	r3, r7, #608	@ 0x260
 8019d86:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 8019d8a:	491c      	ldr	r1, [pc, #112]	@ (8019dfc <mg_tls_recv_cert_verify+0x460>)
 8019d8c:	6818      	ldr	r0, [r3, #0]
 8019d8e:	f7ee f871 	bl	8007e74 <mg_error>
        return -1;
 8019d92:	f04f 33ff 	mov.w	r3, #4294967295
 8019d96:	e02c      	b.n	8019df2 <mg_tls_recv_cert_verify+0x456>
      }
      MG_DEBUG(("certificate verification successful (EC)"));
 8019d98:	4b19      	ldr	r3, [pc, #100]	@ (8019e00 <mg_tls_recv_cert_verify+0x464>)
 8019d9a:	681b      	ldr	r3, [r3, #0]
 8019d9c:	2b02      	cmp	r3, #2
 8019d9e:	dd20      	ble.n	8019de2 <mg_tls_recv_cert_verify+0x446>
 8019da0:	4b18      	ldr	r3, [pc, #96]	@ (8019e04 <mg_tls_recv_cert_verify+0x468>)
 8019da2:	f243 02fa 	movw	r2, #12538	@ 0x30fa
 8019da6:	4918      	ldr	r1, [pc, #96]	@ (8019e08 <mg_tls_recv_cert_verify+0x46c>)
 8019da8:	2003      	movs	r0, #3
 8019daa:	f7f3 f9ff 	bl	800d1ac <mg_log_prefix>
 8019dae:	4817      	ldr	r0, [pc, #92]	@ (8019e0c <mg_tls_recv_cert_verify+0x470>)
 8019db0:	f7f3 fa4c 	bl	800d24c <mg_log>
 8019db4:	e015      	b.n	8019de2 <mg_tls_recv_cert_verify+0x446>
      //   0807 = ed25519
      //   0808 = ed448
      //   0809 = rsa_pss_pss_sha256
      //   080A = rsa_pss_pss_sha384
      //   080B = rsa_pss_pss_sha512
      MG_ERROR(("unsupported certverify signature scheme: %x of %d bytes",
 8019db6:	4b12      	ldr	r3, [pc, #72]	@ (8019e00 <mg_tls_recv_cert_verify+0x464>)
 8019db8:	681b      	ldr	r3, [r3, #0]
 8019dba:	2b00      	cmp	r3, #0
 8019dbc:	dd0e      	ble.n	8019ddc <mg_tls_recv_cert_verify+0x440>
 8019dbe:	4b11      	ldr	r3, [pc, #68]	@ (8019e04 <mg_tls_recv_cert_verify+0x468>)
 8019dc0:	f243 1205 	movw	r2, #12549	@ 0x3105
 8019dc4:	4910      	ldr	r1, [pc, #64]	@ (8019e08 <mg_tls_recv_cert_verify+0x46c>)
 8019dc6:	2001      	movs	r0, #1
 8019dc8:	f7f3 f9f0 	bl	800d1ac <mg_log_prefix>
 8019dcc:	f8b7 3256 	ldrh.w	r3, [r7, #598]	@ 0x256
 8019dd0:	f8b7 2254 	ldrh.w	r2, [r7, #596]	@ 0x254
 8019dd4:	4619      	mov	r1, r3
 8019dd6:	480e      	ldr	r0, [pc, #56]	@ (8019e10 <mg_tls_recv_cert_verify+0x474>)
 8019dd8:	f7f3 fa38 	bl	800d24c <mg_log>
                sigalg, siglen));
      return -1;
 8019ddc:	f04f 33ff 	mov.w	r3, #4294967295
 8019de0:	e007      	b.n	8019df2 <mg_tls_recv_cert_verify+0x456>
    }
  }
  mg_tls_drop_message(c);
 8019de2:	f507 7318 	add.w	r3, r7, #608	@ 0x260
 8019de6:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 8019dea:	6818      	ldr	r0, [r3, #0]
 8019dec:	f7fc fcfe 	bl	80167ec <mg_tls_drop_message>
  return 0;
 8019df0:	2300      	movs	r3, #0
}
 8019df2:	4618      	mov	r0, r3
 8019df4:	f507 7718 	add.w	r7, r7, #608	@ 0x260
 8019df8:	46bd      	mov	sp, r7
 8019dfa:	bdb0      	pop	{r4, r5, r7, pc}
 8019dfc:	080276ec 	.word	0x080276ec
 8019e00:	20000258 	.word	0x20000258
 8019e04:	08028aac 	.word	0x08028aac
 8019e08:	08025140 	.word	0x08025140
 8019e0c:	0802771c 	.word	0x0802771c
 8019e10:	08027748 	.word	0x08027748

08019e14 <mg_tls_client_recv_finish>:

static int mg_tls_client_recv_finish(struct mg_connection *c) {
 8019e14:	b580      	push	{r7, lr}
 8019e16:	b084      	sub	sp, #16
 8019e18:	af00      	add	r7, sp, #0
 8019e1a:	6078      	str	r0, [r7, #4]
  struct tls_data *tls = (struct tls_data *) c->tls;
 8019e1c:	687b      	ldr	r3, [r7, #4]
 8019e1e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8019e22:	60fb      	str	r3, [r7, #12]
  unsigned char *recv_buf;
  if (mg_tls_recv_record(c) < 0) {
 8019e24:	6878      	ldr	r0, [r7, #4]
 8019e26:	f7fd f92b 	bl	8017080 <mg_tls_recv_record>
 8019e2a:	4603      	mov	r3, r0
 8019e2c:	2b00      	cmp	r3, #0
 8019e2e:	da02      	bge.n	8019e36 <mg_tls_client_recv_finish+0x22>
    return -1;
 8019e30:	f04f 33ff 	mov.w	r3, #4294967295
 8019e34:	e017      	b.n	8019e66 <mg_tls_client_recv_finish+0x52>
  }
  recv_buf = &c->rtls.buf[tls->recv_offset];
 8019e36:	687b      	ldr	r3, [r7, #4]
 8019e38:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8019e3a:	68fb      	ldr	r3, [r7, #12]
 8019e3c:	695b      	ldr	r3, [r3, #20]
 8019e3e:	4413      	add	r3, r2
 8019e40:	60bb      	str	r3, [r7, #8]
  if (recv_buf[0] != MG_TLS_FINISHED) {
 8019e42:	68bb      	ldr	r3, [r7, #8]
 8019e44:	781b      	ldrb	r3, [r3, #0]
 8019e46:	2b14      	cmp	r3, #20
 8019e48:	d009      	beq.n	8019e5e <mg_tls_client_recv_finish+0x4a>
    mg_error(c, "expected server finished but got msg 0x%02x", recv_buf[0]);
 8019e4a:	68bb      	ldr	r3, [r7, #8]
 8019e4c:	781b      	ldrb	r3, [r3, #0]
 8019e4e:	461a      	mov	r2, r3
 8019e50:	4907      	ldr	r1, [pc, #28]	@ (8019e70 <mg_tls_client_recv_finish+0x5c>)
 8019e52:	6878      	ldr	r0, [r7, #4]
 8019e54:	f7ee f80e 	bl	8007e74 <mg_error>
    return -1;
 8019e58:	f04f 33ff 	mov.w	r3, #4294967295
 8019e5c:	e003      	b.n	8019e66 <mg_tls_client_recv_finish+0x52>
  }
  mg_tls_drop_message(c);
 8019e5e:	6878      	ldr	r0, [r7, #4]
 8019e60:	f7fc fcc4 	bl	80167ec <mg_tls_drop_message>
  return 0;
 8019e64:	2300      	movs	r3, #0
}
 8019e66:	4618      	mov	r0, r3
 8019e68:	3710      	adds	r7, #16
 8019e6a:	46bd      	mov	sp, r7
 8019e6c:	bd80      	pop	{r7, pc}
 8019e6e:	bf00      	nop
 8019e70:	08027780 	.word	0x08027780

08019e74 <mg_tls_client_send_finish>:

static void mg_tls_client_send_finish(struct mg_connection *c) {
 8019e74:	b580      	push	{r7, lr}
 8019e76:	b0b4      	sub	sp, #208	@ 0xd0
 8019e78:	af02      	add	r7, sp, #8
 8019e7a:	6078      	str	r0, [r7, #4]
  struct tls_data *tls = (struct tls_data *) c->tls;
 8019e7c:	687b      	ldr	r3, [r7, #4]
 8019e7e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8019e82:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
  mg_sha256_ctx sha256;
  uint8_t hash[32];
  uint8_t finish[36] = {0x14, 0, 0, 32};
 8019e86:	4b1a      	ldr	r3, [pc, #104]	@ (8019ef0 <mg_tls_client_send_finish+0x7c>)
 8019e88:	60fb      	str	r3, [r7, #12]
 8019e8a:	f107 0310 	add.w	r3, r7, #16
 8019e8e:	2220      	movs	r2, #32
 8019e90:	2100      	movs	r1, #0
 8019e92:	4618      	mov	r0, r3
 8019e94:	f00a fafa 	bl	802448c <memset>
  memmove(&sha256, &tls->sha256, sizeof(mg_sha256_ctx));
 8019e98:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8019e9c:	f103 0120 	add.w	r1, r3, #32
 8019ea0:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8019ea4:	2270      	movs	r2, #112	@ 0x70
 8019ea6:	4618      	mov	r0, r3
 8019ea8:	f00a fad6 	bl	8024458 <memmove>
  mg_sha256_final(hash, &sha256);
 8019eac:	f107 0250 	add.w	r2, r7, #80	@ 0x50
 8019eb0:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8019eb4:	4611      	mov	r1, r2
 8019eb6:	4618      	mov	r0, r3
 8019eb8:	f7fa fb2d 	bl	8014516 <mg_sha256_final>
  mg_hmac_sha256(finish + 4, tls->enc.client_finished_key, 32, hash, 32);
 8019ebc:	f107 000c 	add.w	r0, r7, #12
 8019ec0:	3004      	adds	r0, #4
 8019ec2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8019ec6:	f503 61a3 	add.w	r1, r3, #1304	@ 0x518
 8019eca:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8019ece:	2220      	movs	r2, #32
 8019ed0:	9200      	str	r2, [sp, #0]
 8019ed2:	2220      	movs	r2, #32
 8019ed4:	f7fa fc73 	bl	80147be <mg_hmac_sha256>
  mg_tls_encrypt(c, finish, sizeof(finish), MG_TLS_HANDSHAKE);
 8019ed8:	f107 010c 	add.w	r1, r7, #12
 8019edc:	2316      	movs	r3, #22
 8019ede:	2224      	movs	r2, #36	@ 0x24
 8019ee0:	6878      	ldr	r0, [r7, #4]
 8019ee2:	f7fc ffd3 	bl	8016e8c <mg_tls_encrypt>
}
 8019ee6:	bf00      	nop
 8019ee8:	37c8      	adds	r7, #200	@ 0xc8
 8019eea:	46bd      	mov	sp, r7
 8019eec:	bd80      	pop	{r7, pc}
 8019eee:	bf00      	nop
 8019ef0:	20000014 	.word	0x20000014

08019ef4 <mg_tls_client_handshake>:

static void mg_tls_client_handshake(struct mg_connection *c) {
 8019ef4:	b580      	push	{r7, lr}
 8019ef6:	b084      	sub	sp, #16
 8019ef8:	af00      	add	r7, sp, #0
 8019efa:	6078      	str	r0, [r7, #4]
  struct tls_data *tls = (struct tls_data *) c->tls;
 8019efc:	687b      	ldr	r3, [r7, #4]
 8019efe:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8019f02:	60fb      	str	r3, [r7, #12]
  switch (tls->state) {
 8019f04:	68fb      	ldr	r3, [r7, #12]
 8019f06:	781b      	ldrb	r3, [r3, #0]
 8019f08:	2b05      	cmp	r3, #5
 8019f0a:	d868      	bhi.n	8019fde <mg_tls_client_handshake+0xea>
 8019f0c:	a201      	add	r2, pc, #4	@ (adr r2, 8019f14 <mg_tls_client_handshake+0x20>)
 8019f0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8019f12:	bf00      	nop
 8019f14:	08019f2d 	.word	0x08019f2d
 8019f18:	08019f39 	.word	0x08019f39
 8019f1c:	08019f4b 	.word	0x08019f4b
 8019f20:	08019f5d 	.word	0x08019f5d
 8019f24:	08019f71 	.word	0x08019f71
 8019f28:	08019f83 	.word	0x08019f83
    case MG_TLS_STATE_CLIENT_START:
      mg_tls_client_send_hello(c);
 8019f2c:	6878      	ldr	r0, [r7, #4]
 8019f2e:	f7fe f837 	bl	8017fa0 <mg_tls_client_send_hello>
      tls->state = MG_TLS_STATE_CLIENT_WAIT_SH;
 8019f32:	68fb      	ldr	r3, [r7, #12]
 8019f34:	2201      	movs	r2, #1
 8019f36:	701a      	strb	r2, [r3, #0]
      // Fallthrough
    case MG_TLS_STATE_CLIENT_WAIT_SH:
      if (mg_tls_client_recv_hello(c) < 0) {
 8019f38:	6878      	ldr	r0, [r7, #4]
 8019f3a:	f7fe fa0d 	bl	8018358 <mg_tls_client_recv_hello>
 8019f3e:	4603      	mov	r3, r0
 8019f40:	2b00      	cmp	r3, #0
 8019f42:	db54      	blt.n	8019fee <mg_tls_client_handshake+0xfa>
        break;
      }
      tls->state = MG_TLS_STATE_CLIENT_WAIT_EE;
 8019f44:	68fb      	ldr	r3, [r7, #12]
 8019f46:	2202      	movs	r2, #2
 8019f48:	701a      	strb	r2, [r3, #0]
      // Fallthrough
    case MG_TLS_STATE_CLIENT_WAIT_EE:
      if (mg_tls_client_recv_ext(c) < 0) {
 8019f4a:	6878      	ldr	r0, [r7, #4]
 8019f4c:	f7fe fb3e 	bl	80185cc <mg_tls_client_recv_ext>
 8019f50:	4603      	mov	r3, r0
 8019f52:	2b00      	cmp	r3, #0
 8019f54:	db4d      	blt.n	8019ff2 <mg_tls_client_handshake+0xfe>
        break;
      }
      tls->state = MG_TLS_STATE_CLIENT_WAIT_CERT;
 8019f56:	68fb      	ldr	r3, [r7, #12]
 8019f58:	2203      	movs	r2, #3
 8019f5a:	701a      	strb	r2, [r3, #0]
      // Fallthrough
    case MG_TLS_STATE_CLIENT_WAIT_CERT:
      if (mg_tls_recv_cert(c, true) < 0) {
 8019f5c:	2101      	movs	r1, #1
 8019f5e:	6878      	ldr	r0, [r7, #4]
 8019f60:	f7ff fa5e 	bl	8019420 <mg_tls_recv_cert>
 8019f64:	4603      	mov	r3, r0
 8019f66:	2b00      	cmp	r3, #0
 8019f68:	db45      	blt.n	8019ff6 <mg_tls_client_handshake+0x102>
        break;
      }
      tls->state = MG_TLS_STATE_CLIENT_WAIT_CV;
 8019f6a:	68fb      	ldr	r3, [r7, #12]
 8019f6c:	2204      	movs	r2, #4
 8019f6e:	701a      	strb	r2, [r3, #0]
      // Fallthrough
    case MG_TLS_STATE_CLIENT_WAIT_CV:
      if (mg_tls_recv_cert_verify(c) < 0) {
 8019f70:	6878      	ldr	r0, [r7, #4]
 8019f72:	f7ff fd13 	bl	801999c <mg_tls_recv_cert_verify>
 8019f76:	4603      	mov	r3, r0
 8019f78:	2b00      	cmp	r3, #0
 8019f7a:	db3e      	blt.n	8019ffa <mg_tls_client_handshake+0x106>
        break;
      }
      tls->state = MG_TLS_STATE_CLIENT_WAIT_FINISH;
 8019f7c:	68fb      	ldr	r3, [r7, #12]
 8019f7e:	2205      	movs	r2, #5
 8019f80:	701a      	strb	r2, [r3, #0]
      // Fallthrough
    case MG_TLS_STATE_CLIENT_WAIT_FINISH:
      if (mg_tls_client_recv_finish(c) < 0) {
 8019f82:	6878      	ldr	r0, [r7, #4]
 8019f84:	f7ff ff46 	bl	8019e14 <mg_tls_client_recv_finish>
 8019f88:	4603      	mov	r3, r0
 8019f8a:	2b00      	cmp	r3, #0
 8019f8c:	db37      	blt.n	8019ffe <mg_tls_client_handshake+0x10a>
        break;
      }
      if (tls->cert_requested && tls->cert_der.len > 0) {  // two-way auth
 8019f8e:	68fb      	ldr	r3, [r7, #12]
 8019f90:	f893 3111 	ldrb.w	r3, [r3, #273]	@ 0x111
 8019f94:	2b00      	cmp	r3, #0
 8019f96:	d00c      	beq.n	8019fb2 <mg_tls_client_handshake+0xbe>
 8019f98:	68fb      	ldr	r3, [r7, #12]
 8019f9a:	f8d3 3118 	ldr.w	r3, [r3, #280]	@ 0x118
 8019f9e:	2b00      	cmp	r3, #0
 8019fa0:	d007      	beq.n	8019fb2 <mg_tls_client_handshake+0xbe>
        mg_tls_send_cert(c, true);
 8019fa2:	2101      	movs	r1, #1
 8019fa4:	6878      	ldr	r0, [r7, #4]
 8019fa6:	f7fd fd1b 	bl	80179e0 <mg_tls_send_cert>
        mg_tls_send_cert_verify(c, true);
 8019faa:	2101      	movs	r1, #1
 8019fac:	6878      	ldr	r0, [r7, #4]
 8019fae:	f7fd fe3b 	bl	8017c28 <mg_tls_send_cert_verify>
      }
      mg_tls_client_send_finish(c);
 8019fb2:	6878      	ldr	r0, [r7, #4]
 8019fb4:	f7ff ff5e 	bl	8019e74 <mg_tls_client_send_finish>
      mg_tls_generate_application_keys(c);
 8019fb8:	6878      	ldr	r0, [r7, #4]
 8019fba:	f7fc fe4f 	bl	8016c5c <mg_tls_generate_application_keys>
      tls->state = MG_TLS_STATE_CLIENT_CONNECTED;
 8019fbe:	68fb      	ldr	r3, [r7, #12]
 8019fc0:	2206      	movs	r2, #6
 8019fc2:	701a      	strb	r2, [r3, #0]
      c->is_tls_hs = 0;
 8019fc4:	687a      	ldr	r2, [r7, #4]
 8019fc6:	f892 30b4 	ldrb.w	r3, [r2, #180]	@ 0xb4
 8019fca:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8019fce:	f882 30b4 	strb.w	r3, [r2, #180]	@ 0xb4
      mg_call(c, MG_EV_TLS_HS, NULL);
 8019fd2:	2200      	movs	r2, #0
 8019fd4:	2106      	movs	r1, #6
 8019fd6:	6878      	ldr	r0, [r7, #4]
 8019fd8:	f7ed ff2a 	bl	8007e30 <mg_call>
      break;
 8019fdc:	e010      	b.n	801a000 <mg_tls_client_handshake+0x10c>
    default:
      mg_error(c, "unexpected client state: %d", tls->state);
 8019fde:	68fb      	ldr	r3, [r7, #12]
 8019fe0:	781b      	ldrb	r3, [r3, #0]
 8019fe2:	461a      	mov	r2, r3
 8019fe4:	4908      	ldr	r1, [pc, #32]	@ (801a008 <mg_tls_client_handshake+0x114>)
 8019fe6:	6878      	ldr	r0, [r7, #4]
 8019fe8:	f7ed ff44 	bl	8007e74 <mg_error>
      break;
 8019fec:	e008      	b.n	801a000 <mg_tls_client_handshake+0x10c>
        break;
 8019fee:	bf00      	nop
 8019ff0:	e006      	b.n	801a000 <mg_tls_client_handshake+0x10c>
        break;
 8019ff2:	bf00      	nop
 8019ff4:	e004      	b.n	801a000 <mg_tls_client_handshake+0x10c>
        break;
 8019ff6:	bf00      	nop
 8019ff8:	e002      	b.n	801a000 <mg_tls_client_handshake+0x10c>
        break;
 8019ffa:	bf00      	nop
 8019ffc:	e000      	b.n	801a000 <mg_tls_client_handshake+0x10c>
        break;
 8019ffe:	bf00      	nop
  }
}
 801a000:	bf00      	nop
 801a002:	3710      	adds	r7, #16
 801a004:	46bd      	mov	sp, r7
 801a006:	bd80      	pop	{r7, pc}
 801a008:	080277ac 	.word	0x080277ac

0801a00c <mg_tls_server_handshake>:

static void mg_tls_server_handshake(struct mg_connection *c) {
 801a00c:	b580      	push	{r7, lr}
 801a00e:	b084      	sub	sp, #16
 801a010:	af00      	add	r7, sp, #0
 801a012:	6078      	str	r0, [r7, #4]
  struct tls_data *tls = (struct tls_data *) c->tls;
 801a014:	687b      	ldr	r3, [r7, #4]
 801a016:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 801a01a:	60fb      	str	r3, [r7, #12]
  switch (tls->state) {
 801a01c:	68fb      	ldr	r3, [r7, #12]
 801a01e:	781b      	ldrb	r3, [r3, #0]
 801a020:	3b07      	subs	r3, #7
 801a022:	2b03      	cmp	r3, #3
 801a024:	d860      	bhi.n	801a0e8 <mg_tls_server_handshake+0xdc>
 801a026:	a201      	add	r2, pc, #4	@ (adr r2, 801a02c <mg_tls_server_handshake+0x20>)
 801a028:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801a02c:	0801a03d 	.word	0x0801a03d
 801a030:	0801a0c1 	.word	0x0801a0c1
 801a034:	0801a0d5 	.word	0x0801a0d5
 801a038:	0801a099 	.word	0x0801a099
    case MG_TLS_STATE_SERVER_START:
      if (mg_tls_server_recv_hello(c) < 0) {
 801a03c:	6878      	ldr	r0, [r7, #4]
 801a03e:	f7fd f9e7 	bl	8017410 <mg_tls_server_recv_hello>
 801a042:	4603      	mov	r3, r0
 801a044:	2b00      	cmp	r3, #0
 801a046:	db57      	blt.n	801a0f8 <mg_tls_server_handshake+0xec>
        return;
      }
      mg_tls_server_send_hello(c);
 801a048:	6878      	ldr	r0, [r7, #4]
 801a04a:	f7fd fb77 	bl	801773c <mg_tls_server_send_hello>
      mg_tls_generate_handshake_keys(c);
 801a04e:	6878      	ldr	r0, [r7, #4]
 801a050:	f7fc fcb4 	bl	80169bc <mg_tls_generate_handshake_keys>
      mg_tls_server_send_ext(c);
 801a054:	6878      	ldr	r0, [r7, #4]
 801a056:	f7fd fc25 	bl	80178a4 <mg_tls_server_send_ext>
      if (tls->is_twoway) mg_tls_server_send_cert_request(c);
 801a05a:	68fb      	ldr	r3, [r7, #12]
 801a05c:	f893 3112 	ldrb.w	r3, [r3, #274]	@ 0x112
 801a060:	2b00      	cmp	r3, #0
 801a062:	d002      	beq.n	801a06a <mg_tls_server_handshake+0x5e>
 801a064:	6878      	ldr	r0, [r7, #4]
 801a066:	f7fd fc3f 	bl	80178e8 <mg_tls_server_send_cert_request>
      mg_tls_send_cert(c, false);
 801a06a:	2100      	movs	r1, #0
 801a06c:	6878      	ldr	r0, [r7, #4]
 801a06e:	f7fd fcb7 	bl	80179e0 <mg_tls_send_cert>
      mg_tls_send_cert_verify(c, false);
 801a072:	2100      	movs	r1, #0
 801a074:	6878      	ldr	r0, [r7, #4]
 801a076:	f7fd fdd7 	bl	8017c28 <mg_tls_send_cert_verify>
      mg_tls_server_send_finish(c);
 801a07a:	6878      	ldr	r0, [r7, #4]
 801a07c:	f7fd ff08 	bl	8017e90 <mg_tls_server_send_finish>
      if (tls->is_twoway) {
 801a080:	68fb      	ldr	r3, [r7, #12]
 801a082:	f893 3112 	ldrb.w	r3, [r3, #274]	@ 0x112
 801a086:	2b00      	cmp	r3, #0
 801a088:	d003      	beq.n	801a092 <mg_tls_server_handshake+0x86>
        tls->state = MG_TLS_STATE_SERVER_WAIT_CERT;
 801a08a:	68fb      	ldr	r3, [r7, #12]
 801a08c:	2208      	movs	r2, #8
 801a08e:	701a      	strb	r2, [r3, #0]
        break;
 801a090:	e039      	b.n	801a106 <mg_tls_server_handshake+0xfa>
      }
      tls->state = MG_TLS_STATE_SERVER_NEGOTIATED;
 801a092:	68fb      	ldr	r3, [r7, #12]
 801a094:	220a      	movs	r2, #10
 801a096:	701a      	strb	r2, [r3, #0]
      // fallthrough
    case MG_TLS_STATE_SERVER_NEGOTIATED:
      if (mg_tls_server_recv_finish(c) < 0) {
 801a098:	6878      	ldr	r0, [r7, #4]
 801a09a:	f7fd ff41 	bl	8017f20 <mg_tls_server_recv_finish>
 801a09e:	4603      	mov	r3, r0
 801a0a0:	2b00      	cmp	r3, #0
 801a0a2:	db2b      	blt.n	801a0fc <mg_tls_server_handshake+0xf0>
        return;
      }
      mg_tls_generate_application_keys(c);
 801a0a4:	6878      	ldr	r0, [r7, #4]
 801a0a6:	f7fc fdd9 	bl	8016c5c <mg_tls_generate_application_keys>
      tls->state = MG_TLS_STATE_SERVER_CONNECTED;
 801a0aa:	68fb      	ldr	r3, [r7, #12]
 801a0ac:	220b      	movs	r2, #11
 801a0ae:	701a      	strb	r2, [r3, #0]
      c->is_tls_hs = 0;
 801a0b0:	687a      	ldr	r2, [r7, #4]
 801a0b2:	f892 30b4 	ldrb.w	r3, [r2, #180]	@ 0xb4
 801a0b6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 801a0ba:	f882 30b4 	strb.w	r3, [r2, #180]	@ 0xb4
      return;
 801a0be:	e022      	b.n	801a106 <mg_tls_server_handshake+0xfa>
    case MG_TLS_STATE_SERVER_WAIT_CERT:
      if (mg_tls_recv_cert(c, false) < 0) break;
 801a0c0:	2100      	movs	r1, #0
 801a0c2:	6878      	ldr	r0, [r7, #4]
 801a0c4:	f7ff f9ac 	bl	8019420 <mg_tls_recv_cert>
 801a0c8:	4603      	mov	r3, r0
 801a0ca:	2b00      	cmp	r3, #0
 801a0cc:	db18      	blt.n	801a100 <mg_tls_server_handshake+0xf4>
      tls->state = MG_TLS_STATE_SERVER_WAIT_CV;
 801a0ce:	68fb      	ldr	r3, [r7, #12]
 801a0d0:	2209      	movs	r2, #9
 801a0d2:	701a      	strb	r2, [r3, #0]
      // Fallthrough
    case MG_TLS_STATE_SERVER_WAIT_CV:
      if (mg_tls_recv_cert_verify(c) < 0) break;
 801a0d4:	6878      	ldr	r0, [r7, #4]
 801a0d6:	f7ff fc61 	bl	801999c <mg_tls_recv_cert_verify>
 801a0da:	4603      	mov	r3, r0
 801a0dc:	2b00      	cmp	r3, #0
 801a0de:	db11      	blt.n	801a104 <mg_tls_server_handshake+0xf8>
      tls->state = MG_TLS_STATE_SERVER_NEGOTIATED;
 801a0e0:	68fb      	ldr	r3, [r7, #12]
 801a0e2:	220a      	movs	r2, #10
 801a0e4:	701a      	strb	r2, [r3, #0]
      break;
 801a0e6:	e00e      	b.n	801a106 <mg_tls_server_handshake+0xfa>
    default:
      mg_error(c, "unexpected server state: %d", tls->state);
 801a0e8:	68fb      	ldr	r3, [r7, #12]
 801a0ea:	781b      	ldrb	r3, [r3, #0]
 801a0ec:	461a      	mov	r2, r3
 801a0ee:	4907      	ldr	r1, [pc, #28]	@ (801a10c <mg_tls_server_handshake+0x100>)
 801a0f0:	6878      	ldr	r0, [r7, #4]
 801a0f2:	f7ed febf 	bl	8007e74 <mg_error>
      break;
 801a0f6:	e006      	b.n	801a106 <mg_tls_server_handshake+0xfa>
        return;
 801a0f8:	bf00      	nop
 801a0fa:	e004      	b.n	801a106 <mg_tls_server_handshake+0xfa>
        return;
 801a0fc:	bf00      	nop
 801a0fe:	e002      	b.n	801a106 <mg_tls_server_handshake+0xfa>
      if (mg_tls_recv_cert(c, false) < 0) break;
 801a100:	bf00      	nop
 801a102:	e000      	b.n	801a106 <mg_tls_server_handshake+0xfa>
      if (mg_tls_recv_cert_verify(c) < 0) break;
 801a104:	bf00      	nop
  }
}
 801a106:	3710      	adds	r7, #16
 801a108:	46bd      	mov	sp, r7
 801a10a:	bd80      	pop	{r7, pc}
 801a10c:	080277c8 	.word	0x080277c8

0801a110 <mg_tls_handshake>:

void mg_tls_handshake(struct mg_connection *c) {
 801a110:	b580      	push	{r7, lr}
 801a112:	b084      	sub	sp, #16
 801a114:	af00      	add	r7, sp, #0
 801a116:	6078      	str	r0, [r7, #4]
  struct tls_data *tls = (struct tls_data *) c->tls;
 801a118:	687b      	ldr	r3, [r7, #4]
 801a11a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 801a11e:	60fb      	str	r3, [r7, #12]
  long n;
  if (c->is_client) {
 801a120:	687b      	ldr	r3, [r7, #4]
 801a122:	f893 30b4 	ldrb.w	r3, [r3, #180]	@ 0xb4
 801a126:	f003 0302 	and.w	r3, r3, #2
 801a12a:	b2db      	uxtb	r3, r3
 801a12c:	2b00      	cmp	r3, #0
 801a12e:	d003      	beq.n	801a138 <mg_tls_handshake+0x28>
    // will clear is_hs when sending last chunk
    mg_tls_client_handshake(c);
 801a130:	6878      	ldr	r0, [r7, #4]
 801a132:	f7ff fedf 	bl	8019ef4 <mg_tls_client_handshake>
 801a136:	e00a      	b.n	801a14e <mg_tls_handshake+0x3e>
  } else {
    mg_tls_server_handshake(c);
 801a138:	6878      	ldr	r0, [r7, #4]
 801a13a:	f7ff ff67 	bl	801a00c <mg_tls_server_handshake>
  }
  while (tls->send.len > 0 &&
 801a13e:	e006      	b.n	801a14e <mg_tls_handshake+0x3e>
         (n = mg_io_send(c, tls->send.buf, tls->send.len)) > 0) {
    mg_iobuf_del(&tls->send, 0, (size_t) n);
 801a140:	68fb      	ldr	r3, [r7, #12]
 801a142:	3304      	adds	r3, #4
 801a144:	68ba      	ldr	r2, [r7, #8]
 801a146:	2100      	movs	r1, #0
 801a148:	4618      	mov	r0, r3
 801a14a:	f7f2 f961 	bl	800c410 <mg_iobuf_del>
  while (tls->send.len > 0 &&
 801a14e:	68fb      	ldr	r3, [r7, #12]
 801a150:	68db      	ldr	r3, [r3, #12]
 801a152:	2b00      	cmp	r3, #0
 801a154:	d00b      	beq.n	801a16e <mg_tls_handshake+0x5e>
         (n = mg_io_send(c, tls->send.buf, tls->send.len)) > 0) {
 801a156:	68fb      	ldr	r3, [r7, #12]
 801a158:	6859      	ldr	r1, [r3, #4]
 801a15a:	68fb      	ldr	r3, [r7, #12]
 801a15c:	68db      	ldr	r3, [r3, #12]
 801a15e:	461a      	mov	r2, r3
 801a160:	6878      	ldr	r0, [r7, #4]
 801a162:	f7f5 fc4b 	bl	800f9fc <mg_io_send>
 801a166:	60b8      	str	r0, [r7, #8]
  while (tls->send.len > 0 &&
 801a168:	68bb      	ldr	r3, [r7, #8]
 801a16a:	2b00      	cmp	r3, #0
 801a16c:	dce8      	bgt.n	801a140 <mg_tls_handshake+0x30>
  }  // if last chunk fails to be sent, it will be sent with first app data,
     // otherwise, it needs to be flushed
}
 801a16e:	bf00      	nop
 801a170:	3710      	adds	r7, #16
 801a172:	46bd      	mov	sp, r7
 801a174:	bd80      	pop	{r7, pc}
	...

0801a178 <mg_parse_pem>:

static int mg_parse_pem(const struct mg_str pem, const struct mg_str label,
                        struct mg_str *der) {
 801a178:	b590      	push	{r4, r7, lr}
 801a17a:	b09b      	sub	sp, #108	@ 0x6c
 801a17c:	af02      	add	r7, sp, #8
 801a17e:	f107 0410 	add.w	r4, r7, #16
 801a182:	e884 0003 	stmia.w	r4, {r0, r1}
 801a186:	f107 0108 	add.w	r1, r7, #8
 801a18a:	e881 000c 	stmia.w	r1, {r2, r3}
  size_t n = 0, m = 0;
 801a18e:	2300      	movs	r3, #0
 801a190:	65fb      	str	r3, [r7, #92]	@ 0x5c
 801a192:	2300      	movs	r3, #0
 801a194:	657b      	str	r3, [r7, #84]	@ 0x54
  char *s;
  const char *c;
  struct mg_str caps[6];  // number of wildcards + 1
  if (!mg_match(pem, mg_str("#-----BEGIN #-----#-----END #-----#"), caps)) {
 801a196:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 801a19a:	4945      	ldr	r1, [pc, #276]	@ (801a2b0 <mg_parse_pem+0x138>)
 801a19c:	4618      	mov	r0, r3
 801a19e:	f7fb fbf7 	bl	8015990 <mg_str_s>
 801a1a2:	f107 0318 	add.w	r3, r7, #24
 801a1a6:	9300      	str	r3, [sp, #0]
 801a1a8:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 801a1ac:	cb0c      	ldmia	r3, {r2, r3}
 801a1ae:	f107 0110 	add.w	r1, r7, #16
 801a1b2:	c903      	ldmia	r1, {r0, r1}
 801a1b4:	f7fb fcf5 	bl	8015ba2 <mg_match>
 801a1b8:	4603      	mov	r3, r0
 801a1ba:	f083 0301 	eor.w	r3, r3, #1
 801a1be:	b2db      	uxtb	r3, r3
 801a1c0:	2b00      	cmp	r3, #0
 801a1c2:	d00f      	beq.n	801a1e4 <mg_parse_pem+0x6c>
    *der = mg_strdup(pem);
 801a1c4:	6f3c      	ldr	r4, [r7, #112]	@ 0x70
 801a1c6:	4638      	mov	r0, r7
 801a1c8:	f107 0310 	add.w	r3, r7, #16
 801a1cc:	e893 0006 	ldmia.w	r3, {r1, r2}
 801a1d0:	f7fb fc28 	bl	8015a24 <mg_strdup>
 801a1d4:	4622      	mov	r2, r4
 801a1d6:	463b      	mov	r3, r7
 801a1d8:	e893 0003 	ldmia.w	r3, {r0, r1}
 801a1dc:	e882 0003 	stmia.w	r2, {r0, r1}
    return 0;
 801a1e0:	2300      	movs	r3, #0
 801a1e2:	e061      	b.n	801a2a8 <mg_parse_pem+0x130>
  }
  if (mg_strcmp(caps[1], label) != 0 || mg_strcmp(caps[3], label) != 0) {
 801a1e4:	f107 0308 	add.w	r3, r7, #8
 801a1e8:	cb0c      	ldmia	r3, {r2, r3}
 801a1ea:	f107 0120 	add.w	r1, r7, #32
 801a1ee:	c903      	ldmia	r1, {r0, r1}
 801a1f0:	f7fb fc4e 	bl	8015a90 <mg_strcmp>
 801a1f4:	4603      	mov	r3, r0
 801a1f6:	2b00      	cmp	r3, #0
 801a1f8:	d10a      	bne.n	801a210 <mg_parse_pem+0x98>
 801a1fa:	f107 0308 	add.w	r3, r7, #8
 801a1fe:	cb0c      	ldmia	r3, {r2, r3}
 801a200:	f107 0130 	add.w	r1, r7, #48	@ 0x30
 801a204:	c903      	ldmia	r1, {r0, r1}
 801a206:	f7fb fc43 	bl	8015a90 <mg_strcmp>
 801a20a:	4603      	mov	r3, r0
 801a20c:	2b00      	cmp	r3, #0
 801a20e:	d002      	beq.n	801a216 <mg_parse_pem+0x9e>
    return -1;  // bad label
 801a210:	f04f 33ff 	mov.w	r3, #4294967295
 801a214:	e048      	b.n	801a2a8 <mg_parse_pem+0x130>
  }
  if ((s = (char *) mg_calloc(1, caps[2].len)) == NULL) {
 801a216:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a218:	4619      	mov	r1, r3
 801a21a:	2001      	movs	r0, #1
 801a21c:	f7ec fdf9 	bl	8006e12 <mg_calloc>
 801a220:	6538      	str	r0, [r7, #80]	@ 0x50
 801a222:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801a224:	2b00      	cmp	r3, #0
 801a226:	d102      	bne.n	801a22e <mg_parse_pem+0xb6>
    return -1;
 801a228:	f04f 33ff 	mov.w	r3, #4294967295
 801a22c:	e03c      	b.n	801a2a8 <mg_parse_pem+0x130>
  }

  for (c = caps[2].buf; c < caps[2].buf + caps[2].len; c++) {
 801a22e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a230:	65bb      	str	r3, [r7, #88]	@ 0x58
 801a232:	e01c      	b.n	801a26e <mg_parse_pem+0xf6>
    if (*c == ' ' || *c == '\n' || *c == '\r' || *c == '\t') {
 801a234:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801a236:	781b      	ldrb	r3, [r3, #0]
 801a238:	2b20      	cmp	r3, #32
 801a23a:	d014      	beq.n	801a266 <mg_parse_pem+0xee>
 801a23c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801a23e:	781b      	ldrb	r3, [r3, #0]
 801a240:	2b0a      	cmp	r3, #10
 801a242:	d010      	beq.n	801a266 <mg_parse_pem+0xee>
 801a244:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801a246:	781b      	ldrb	r3, [r3, #0]
 801a248:	2b0d      	cmp	r3, #13
 801a24a:	d00c      	beq.n	801a266 <mg_parse_pem+0xee>
 801a24c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801a24e:	781b      	ldrb	r3, [r3, #0]
 801a250:	2b09      	cmp	r3, #9
 801a252:	d008      	beq.n	801a266 <mg_parse_pem+0xee>
      continue;
    }
    s[n++] = *c;
 801a254:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801a256:	1c5a      	adds	r2, r3, #1
 801a258:	65fa      	str	r2, [r7, #92]	@ 0x5c
 801a25a:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 801a25c:	4413      	add	r3, r2
 801a25e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 801a260:	7812      	ldrb	r2, [r2, #0]
 801a262:	701a      	strb	r2, [r3, #0]
 801a264:	e000      	b.n	801a268 <mg_parse_pem+0xf0>
      continue;
 801a266:	bf00      	nop
  for (c = caps[2].buf; c < caps[2].buf + caps[2].len; c++) {
 801a268:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801a26a:	3301      	adds	r3, #1
 801a26c:	65bb      	str	r3, [r7, #88]	@ 0x58
 801a26e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801a270:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a272:	4413      	add	r3, r2
 801a274:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 801a276:	429a      	cmp	r2, r3
 801a278:	d3dc      	bcc.n	801a234 <mg_parse_pem+0xbc>
  }
  m = mg_base64_decode(s, n, s, n);
 801a27a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801a27c:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 801a27e:	6df9      	ldr	r1, [r7, #92]	@ 0x5c
 801a280:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 801a282:	f7ec ff37 	bl	80070f4 <mg_base64_decode>
 801a286:	6578      	str	r0, [r7, #84]	@ 0x54
  if (m == 0) {
 801a288:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a28a:	2b00      	cmp	r3, #0
 801a28c:	d105      	bne.n	801a29a <mg_parse_pem+0x122>
    mg_free(s);
 801a28e:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 801a290:	f7ec fdb4 	bl	8006dfc <mg_free>
    return -1;
 801a294:	f04f 33ff 	mov.w	r3, #4294967295
 801a298:	e006      	b.n	801a2a8 <mg_parse_pem+0x130>
  }
  der->buf = s;
 801a29a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801a29c:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 801a29e:	601a      	str	r2, [r3, #0]
  der->len = m;
 801a2a0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801a2a2:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 801a2a4:	605a      	str	r2, [r3, #4]
  return 0;
 801a2a6:	2300      	movs	r3, #0
}
 801a2a8:	4618      	mov	r0, r3
 801a2aa:	3764      	adds	r7, #100	@ 0x64
 801a2ac:	46bd      	mov	sp, r7
 801a2ae:	bd90      	pop	{r4, r7, pc}
 801a2b0:	080277e4 	.word	0x080277e4

0801a2b4 <mg_tls_init>:

void mg_tls_init(struct mg_connection *c, const struct mg_tls_opts *opts) {
 801a2b4:	b580      	push	{r7, lr}
 801a2b6:	b090      	sub	sp, #64	@ 0x40
 801a2b8:	af02      	add	r7, sp, #8
 801a2ba:	6078      	str	r0, [r7, #4]
 801a2bc:	6039      	str	r1, [r7, #0]
  struct mg_str key;
  struct tls_data *tls =
      (struct tls_data *) mg_calloc(1, sizeof(struct tls_data));
 801a2be:	f44f 61a7 	mov.w	r1, #1336	@ 0x538
 801a2c2:	2001      	movs	r0, #1
 801a2c4:	f7ec fda5 	bl	8006e12 <mg_calloc>
 801a2c8:	6378      	str	r0, [r7, #52]	@ 0x34
  if (tls == NULL) {
 801a2ca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801a2cc:	2b00      	cmp	r3, #0
 801a2ce:	d104      	bne.n	801a2da <mg_tls_init+0x26>
    mg_error(c, "tls oom");
 801a2d0:	49ab      	ldr	r1, [pc, #684]	@ (801a580 <mg_tls_init+0x2cc>)
 801a2d2:	6878      	ldr	r0, [r7, #4]
 801a2d4:	f7ed fdce 	bl	8007e74 <mg_error>
    return;
 801a2d8:	e175      	b.n	801a5c6 <mg_tls_init+0x312>
  }

  tls->state =
      c->is_client ? MG_TLS_STATE_CLIENT_START : MG_TLS_STATE_SERVER_START;
 801a2da:	687b      	ldr	r3, [r7, #4]
 801a2dc:	f893 30b4 	ldrb.w	r3, [r3, #180]	@ 0xb4
 801a2e0:	f003 0302 	and.w	r3, r3, #2
 801a2e4:	b2db      	uxtb	r3, r3
 801a2e6:	2b00      	cmp	r3, #0
 801a2e8:	d001      	beq.n	801a2ee <mg_tls_init+0x3a>
 801a2ea:	2200      	movs	r2, #0
 801a2ec:	e000      	b.n	801a2f0 <mg_tls_init+0x3c>
 801a2ee:	2207      	movs	r2, #7
  tls->state =
 801a2f0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801a2f2:	701a      	strb	r2, [r3, #0]

  tls->skip_verification = opts->skip_verification;
 801a2f4:	683b      	ldr	r3, [r7, #0]
 801a2f6:	6a1b      	ldr	r3, [r3, #32]
 801a2f8:	2b00      	cmp	r3, #0
 801a2fa:	bf14      	ite	ne
 801a2fc:	2301      	movne	r3, #1
 801a2fe:	2300      	moveq	r3, #0
 801a300:	b2da      	uxtb	r2, r3
 801a302:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801a304:	f883 2110 	strb.w	r2, [r3, #272]	@ 0x110
  // tls->send.align = MG_IO_SIZE;

  c->tls = tls;
 801a308:	687b      	ldr	r3, [r7, #4]
 801a30a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801a30c:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  c->is_tls = c->is_tls_hs = 1;
 801a310:	687a      	ldr	r2, [r7, #4]
 801a312:	f892 30b4 	ldrb.w	r3, [r2, #180]	@ 0xb4
 801a316:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801a31a:	f882 30b4 	strb.w	r3, [r2, #180]	@ 0xb4
 801a31e:	687b      	ldr	r3, [r7, #4]
 801a320:	f893 30b4 	ldrb.w	r3, [r3, #180]	@ 0xb4
 801a324:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 801a328:	b2d9      	uxtb	r1, r3
 801a32a:	687a      	ldr	r2, [r7, #4]
 801a32c:	f892 30b4 	ldrb.w	r3, [r2, #180]	@ 0xb4
 801a330:	f361 1386 	bfi	r3, r1, #6, #1
 801a334:	f882 30b4 	strb.w	r3, [r2, #180]	@ 0xb4
  mg_sha256_init(&tls->sha256);
 801a338:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801a33a:	3320      	adds	r3, #32
 801a33c:	4618      	mov	r0, r3
 801a33e:	f7f9 fe6d 	bl	801401c <mg_sha256_init>

  // save hostname (client extension)
  if (opts->name.len > 0) {
 801a342:	683b      	ldr	r3, [r7, #0]
 801a344:	69db      	ldr	r3, [r3, #28]
 801a346:	2b00      	cmp	r3, #0
 801a348:	d018      	beq.n	801a37c <mg_tls_init+0xc8>
    if (opts->name.len >= sizeof(tls->hostname) - 1) {
 801a34a:	683b      	ldr	r3, [r7, #0]
 801a34c:	69db      	ldr	r3, [r3, #28]
 801a34e:	2bfc      	cmp	r3, #252	@ 0xfc
 801a350:	d904      	bls.n	801a35c <mg_tls_init+0xa8>
      mg_error(c, "hostname too long");
 801a352:	498c      	ldr	r1, [pc, #560]	@ (801a584 <mg_tls_init+0x2d0>)
 801a354:	6878      	ldr	r0, [r7, #4]
 801a356:	f7ed fd8d 	bl	8007e74 <mg_error>
      return;
 801a35a:	e134      	b.n	801a5c6 <mg_tls_init+0x312>
    }
    strncpy((char *) tls->hostname, opts->name.buf, sizeof(tls->hostname) - 1);
 801a35c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801a35e:	f503 70a2 	add.w	r0, r3, #324	@ 0x144
 801a362:	683b      	ldr	r3, [r7, #0]
 801a364:	699b      	ldr	r3, [r3, #24]
 801a366:	22fd      	movs	r2, #253	@ 0xfd
 801a368:	4619      	mov	r1, r3
 801a36a:	f00a f8b6 	bl	80244da <strncpy>
    tls->hostname[opts->name.len] = 0;
 801a36e:	683b      	ldr	r3, [r7, #0]
 801a370:	69db      	ldr	r3, [r3, #28]
 801a372:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801a374:	4413      	add	r3, r2
 801a376:	2200      	movs	r2, #0
 801a378:	f883 2144 	strb.w	r2, [r3, #324]	@ 0x144
  }
  // server CA certificate, store serial number
  if (opts->ca.len > 0) {
 801a37c:	683b      	ldr	r3, [r7, #0]
 801a37e:	685b      	ldr	r3, [r3, #4]
 801a380:	2b00      	cmp	r3, #0
 801a382:	d02f      	beq.n	801a3e4 <mg_tls_init+0x130>
    if (mg_parse_pem(opts->ca, mg_str_s("CERTIFICATE"), &tls->ca_der) < 0) {
 801a384:	f107 0314 	add.w	r3, r7, #20
 801a388:	497f      	ldr	r1, [pc, #508]	@ (801a588 <mg_tls_init+0x2d4>)
 801a38a:	4618      	mov	r0, r3
 801a38c:	f7fb fb00 	bl	8015990 <mg_str_s>
 801a390:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801a392:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 801a396:	6839      	ldr	r1, [r7, #0]
 801a398:	9300      	str	r3, [sp, #0]
 801a39a:	f107 0314 	add.w	r3, r7, #20
 801a39e:	cb0c      	ldmia	r3, {r2, r3}
 801a3a0:	c903      	ldmia	r1, {r0, r1}
 801a3a2:	f7ff fee9 	bl	801a178 <mg_parse_pem>
 801a3a6:	4603      	mov	r3, r0
 801a3a8:	2b00      	cmp	r3, #0
 801a3aa:	da0f      	bge.n	801a3cc <mg_tls_init+0x118>
      MG_ERROR(("Failed to load certificate"));
 801a3ac:	4b77      	ldr	r3, [pc, #476]	@ (801a58c <mg_tls_init+0x2d8>)
 801a3ae:	681b      	ldr	r3, [r3, #0]
 801a3b0:	2b00      	cmp	r3, #0
 801a3b2:	f340 80dc 	ble.w	801a56e <mg_tls_init+0x2ba>
 801a3b6:	4b76      	ldr	r3, [pc, #472]	@ (801a590 <mg_tls_init+0x2dc>)
 801a3b8:	f243 12d5 	movw	r2, #12757	@ 0x31d5
 801a3bc:	4975      	ldr	r1, [pc, #468]	@ (801a594 <mg_tls_init+0x2e0>)
 801a3be:	2001      	movs	r0, #1
 801a3c0:	f7f2 fef4 	bl	800d1ac <mg_log_prefix>
 801a3c4:	4874      	ldr	r0, [pc, #464]	@ (801a598 <mg_tls_init+0x2e4>)
 801a3c6:	f7f2 ff41 	bl	800d24c <mg_log>
      return;
 801a3ca:	e0d0      	b.n	801a56e <mg_tls_init+0x2ba>
    }
    if (!c->is_client) tls->is_twoway = true;  // server + CA: two-way auth
 801a3cc:	687b      	ldr	r3, [r7, #4]
 801a3ce:	f893 30b4 	ldrb.w	r3, [r3, #180]	@ 0xb4
 801a3d2:	f003 0302 	and.w	r3, r3, #2
 801a3d6:	b2db      	uxtb	r3, r3
 801a3d8:	2b00      	cmp	r3, #0
 801a3da:	d103      	bne.n	801a3e4 <mg_tls_init+0x130>
 801a3dc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801a3de:	2201      	movs	r2, #1
 801a3e0:	f883 2112 	strb.w	r2, [r3, #274]	@ 0x112
  }

  if (opts->cert.buf == NULL) {
 801a3e4:	683b      	ldr	r3, [r7, #0]
 801a3e6:	689b      	ldr	r3, [r3, #8]
 801a3e8:	2b00      	cmp	r3, #0
 801a3ea:	d10f      	bne.n	801a40c <mg_tls_init+0x158>
    MG_VERBOSE(("No certificate provided"));
 801a3ec:	4b67      	ldr	r3, [pc, #412]	@ (801a58c <mg_tls_init+0x2d8>)
 801a3ee:	681b      	ldr	r3, [r3, #0]
 801a3f0:	2b03      	cmp	r3, #3
 801a3f2:	f340 80be 	ble.w	801a572 <mg_tls_init+0x2be>
 801a3f6:	4b66      	ldr	r3, [pc, #408]	@ (801a590 <mg_tls_init+0x2dc>)
 801a3f8:	f243 12dc 	movw	r2, #12764	@ 0x31dc
 801a3fc:	4965      	ldr	r1, [pc, #404]	@ (801a594 <mg_tls_init+0x2e0>)
 801a3fe:	2004      	movs	r0, #4
 801a400:	f7f2 fed4 	bl	800d1ac <mg_log_prefix>
 801a404:	4865      	ldr	r0, [pc, #404]	@ (801a59c <mg_tls_init+0x2e8>)
 801a406:	f7f2 ff21 	bl	800d24c <mg_log>
    return;
 801a40a:	e0b2      	b.n	801a572 <mg_tls_init+0x2be>
  }

  // parse PEM or DER certificate
  if (mg_parse_pem(opts->cert, mg_str_s("CERTIFICATE"), &tls->cert_der) < 0) {
 801a40c:	f107 031c 	add.w	r3, r7, #28
 801a410:	495d      	ldr	r1, [pc, #372]	@ (801a588 <mg_tls_init+0x2d4>)
 801a412:	4618      	mov	r0, r3
 801a414:	f7fb fabc 	bl	8015990 <mg_str_s>
 801a418:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801a41a:	f503 738a 	add.w	r3, r3, #276	@ 0x114
 801a41e:	6839      	ldr	r1, [r7, #0]
 801a420:	9300      	str	r3, [sp, #0]
 801a422:	f107 031c 	add.w	r3, r7, #28
 801a426:	cb0c      	ldmia	r3, {r2, r3}
 801a428:	3108      	adds	r1, #8
 801a42a:	c903      	ldmia	r1, {r0, r1}
 801a42c:	f7ff fea4 	bl	801a178 <mg_parse_pem>
 801a430:	4603      	mov	r3, r0
 801a432:	2b00      	cmp	r3, #0
 801a434:	da0f      	bge.n	801a456 <mg_tls_init+0x1a2>
    MG_ERROR(("Failed to load certificate"));
 801a436:	4b55      	ldr	r3, [pc, #340]	@ (801a58c <mg_tls_init+0x2d8>)
 801a438:	681b      	ldr	r3, [r3, #0]
 801a43a:	2b00      	cmp	r3, #0
 801a43c:	f340 809b 	ble.w	801a576 <mg_tls_init+0x2c2>
 801a440:	4b53      	ldr	r3, [pc, #332]	@ (801a590 <mg_tls_init+0x2dc>)
 801a442:	f243 12e2 	movw	r2, #12770	@ 0x31e2
 801a446:	4953      	ldr	r1, [pc, #332]	@ (801a594 <mg_tls_init+0x2e0>)
 801a448:	2001      	movs	r0, #1
 801a44a:	f7f2 feaf 	bl	800d1ac <mg_log_prefix>
 801a44e:	4852      	ldr	r0, [pc, #328]	@ (801a598 <mg_tls_init+0x2e4>)
 801a450:	f7f2 fefc 	bl	800d24c <mg_log>
    return;
 801a454:	e08f      	b.n	801a576 <mg_tls_init+0x2c2>
  }

  // parse PEM or DER EC key
  if (opts->key.buf == NULL) {
 801a456:	683b      	ldr	r3, [r7, #0]
 801a458:	691b      	ldr	r3, [r3, #16]
 801a45a:	2b00      	cmp	r3, #0
 801a45c:	d104      	bne.n	801a468 <mg_tls_init+0x1b4>
    mg_error(c, "Certificate provided without a private key");
 801a45e:	4950      	ldr	r1, [pc, #320]	@ (801a5a0 <mg_tls_init+0x2ec>)
 801a460:	6878      	ldr	r0, [r7, #4]
 801a462:	f7ed fd07 	bl	8007e74 <mg_error>
    return;
 801a466:	e0ae      	b.n	801a5c6 <mg_tls_init+0x312>
  }

  if (mg_parse_pem(opts->key, mg_str_s("EC PRIVATE KEY"), &key) == 0) {
 801a468:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 801a46c:	494d      	ldr	r1, [pc, #308]	@ (801a5a4 <mg_tls_init+0x2f0>)
 801a46e:	4618      	mov	r0, r3
 801a470:	f7fb fa8e 	bl	8015990 <mg_str_s>
 801a474:	6839      	ldr	r1, [r7, #0]
 801a476:	f107 030c 	add.w	r3, r7, #12
 801a47a:	9300      	str	r3, [sp, #0]
 801a47c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 801a480:	cb0c      	ldmia	r3, {r2, r3}
 801a482:	3110      	adds	r1, #16
 801a484:	c903      	ldmia	r1, {r0, r1}
 801a486:	f7ff fe77 	bl	801a178 <mg_parse_pem>
 801a48a:	4603      	mov	r3, r0
 801a48c:	2b00      	cmp	r3, #0
 801a48e:	d150      	bne.n	801a532 <mg_tls_init+0x27e>
    if (key.len < 39) {
 801a490:	693b      	ldr	r3, [r7, #16]
 801a492:	2b26      	cmp	r3, #38	@ 0x26
 801a494:	d80e      	bhi.n	801a4b4 <mg_tls_init+0x200>
      MG_ERROR(("EC private key too short"));
 801a496:	4b3d      	ldr	r3, [pc, #244]	@ (801a58c <mg_tls_init+0x2d8>)
 801a498:	681b      	ldr	r3, [r3, #0]
 801a49a:	2b00      	cmp	r3, #0
 801a49c:	dd6d      	ble.n	801a57a <mg_tls_init+0x2c6>
 801a49e:	4b3c      	ldr	r3, [pc, #240]	@ (801a590 <mg_tls_init+0x2dc>)
 801a4a0:	f243 12ee 	movw	r2, #12782	@ 0x31ee
 801a4a4:	493b      	ldr	r1, [pc, #236]	@ (801a594 <mg_tls_init+0x2e0>)
 801a4a6:	2001      	movs	r0, #1
 801a4a8:	f7f2 fe80 	bl	800d1ac <mg_log_prefix>
 801a4ac:	483e      	ldr	r0, [pc, #248]	@ (801a5a8 <mg_tls_init+0x2f4>)
 801a4ae:	f7f2 fecd 	bl	800d24c <mg_log>
      return;
 801a4b2:	e062      	b.n	801a57a <mg_tls_init+0x2c6>
    }
    // expect ASN.1 SEQUENCE=[INTEGER=1, BITSTRING of 32 bytes, ...]
    // 30 nn 02 01 01 04 20 [key] ...
    if (key.buf[0] != 0x30 || (key.buf[1] & 0x80) != 0) {
 801a4b4:	68fb      	ldr	r3, [r7, #12]
 801a4b6:	781b      	ldrb	r3, [r3, #0]
 801a4b8:	2b30      	cmp	r3, #48	@ 0x30
 801a4ba:	d105      	bne.n	801a4c8 <mg_tls_init+0x214>
 801a4bc:	68fb      	ldr	r3, [r7, #12]
 801a4be:	3301      	adds	r3, #1
 801a4c0:	781b      	ldrb	r3, [r3, #0]
 801a4c2:	b25b      	sxtb	r3, r3
 801a4c4:	2b00      	cmp	r3, #0
 801a4c6:	da0e      	bge.n	801a4e6 <mg_tls_init+0x232>
      MG_ERROR(("EC private key: ASN.1 bad sequence"));
 801a4c8:	4b30      	ldr	r3, [pc, #192]	@ (801a58c <mg_tls_init+0x2d8>)
 801a4ca:	681b      	ldr	r3, [r3, #0]
 801a4cc:	2b00      	cmp	r3, #0
 801a4ce:	dd79      	ble.n	801a5c4 <mg_tls_init+0x310>
 801a4d0:	4b2f      	ldr	r3, [pc, #188]	@ (801a590 <mg_tls_init+0x2dc>)
 801a4d2:	f243 12f4 	movw	r2, #12788	@ 0x31f4
 801a4d6:	492f      	ldr	r1, [pc, #188]	@ (801a594 <mg_tls_init+0x2e0>)
 801a4d8:	2001      	movs	r0, #1
 801a4da:	f7f2 fe67 	bl	800d1ac <mg_log_prefix>
 801a4de:	4833      	ldr	r0, [pc, #204]	@ (801a5ac <mg_tls_init+0x2f8>)
 801a4e0:	f7f2 feb4 	bl	800d24c <mg_log>
      return;
 801a4e4:	e06e      	b.n	801a5c4 <mg_tls_init+0x310>
    }
    if (memcmp(key.buf + 2, "\x02\x01\x01\x04\x20", 5) != 0) {
 801a4e6:	68fb      	ldr	r3, [r7, #12]
 801a4e8:	3302      	adds	r3, #2
 801a4ea:	2205      	movs	r2, #5
 801a4ec:	4930      	ldr	r1, [pc, #192]	@ (801a5b0 <mg_tls_init+0x2fc>)
 801a4ee:	4618      	mov	r0, r3
 801a4f0:	f009 ffa2 	bl	8024438 <memcmp>
 801a4f4:	4603      	mov	r3, r0
 801a4f6:	2b00      	cmp	r3, #0
 801a4f8:	d00d      	beq.n	801a516 <mg_tls_init+0x262>
      MG_ERROR(("EC private key: ASN.1 bad data"));
 801a4fa:	4b24      	ldr	r3, [pc, #144]	@ (801a58c <mg_tls_init+0x2d8>)
 801a4fc:	681b      	ldr	r3, [r3, #0]
 801a4fe:	2b00      	cmp	r3, #0
 801a500:	dd09      	ble.n	801a516 <mg_tls_init+0x262>
 801a502:	4b23      	ldr	r3, [pc, #140]	@ (801a590 <mg_tls_init+0x2dc>)
 801a504:	f243 12f8 	movw	r2, #12792	@ 0x31f8
 801a508:	4922      	ldr	r1, [pc, #136]	@ (801a594 <mg_tls_init+0x2e0>)
 801a50a:	2001      	movs	r0, #1
 801a50c:	f7f2 fe4e 	bl	800d1ac <mg_log_prefix>
 801a510:	4828      	ldr	r0, [pc, #160]	@ (801a5b4 <mg_tls_init+0x300>)
 801a512:	f7f2 fe9b 	bl	800d24c <mg_log>
    }
    memmove(tls->ec_key, key.buf + 7, 32);
 801a516:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801a518:	f503 7092 	add.w	r0, r3, #292	@ 0x124
 801a51c:	68fb      	ldr	r3, [r7, #12]
 801a51e:	3307      	adds	r3, #7
 801a520:	2220      	movs	r2, #32
 801a522:	4619      	mov	r1, r3
 801a524:	f009 ff98 	bl	8024458 <memmove>
    mg_free((void *) key.buf);
 801a528:	68fb      	ldr	r3, [r7, #12]
 801a52a:	4618      	mov	r0, r3
 801a52c:	f7ec fc66 	bl	8006dfc <mg_free>
 801a530:	e049      	b.n	801a5c6 <mg_tls_init+0x312>
  } else if (mg_parse_pem(opts->key, mg_str_s("PRIVATE KEY"), &key) == 0) {
 801a532:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 801a536:	4920      	ldr	r1, [pc, #128]	@ (801a5b8 <mg_tls_init+0x304>)
 801a538:	4618      	mov	r0, r3
 801a53a:	f7fb fa29 	bl	8015990 <mg_str_s>
 801a53e:	6839      	ldr	r1, [r7, #0]
 801a540:	f107 030c 	add.w	r3, r7, #12
 801a544:	9300      	str	r3, [sp, #0]
 801a546:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 801a54a:	cb0c      	ldmia	r3, {r2, r3}
 801a54c:	3110      	adds	r1, #16
 801a54e:	c903      	ldmia	r1, {r0, r1}
 801a550:	f7ff fe12 	bl	801a178 <mg_parse_pem>
 801a554:	4603      	mov	r3, r0
 801a556:	2b00      	cmp	r3, #0
 801a558:	d104      	bne.n	801a564 <mg_tls_init+0x2b0>
    mg_error(c, "PKCS8 private key format is not supported");
 801a55a:	4918      	ldr	r1, [pc, #96]	@ (801a5bc <mg_tls_init+0x308>)
 801a55c:	6878      	ldr	r0, [r7, #4]
 801a55e:	f7ed fc89 	bl	8007e74 <mg_error>
 801a562:	e030      	b.n	801a5c6 <mg_tls_init+0x312>
  } else {
    mg_error(c, "Expected EC PRIVATE KEY or PRIVATE KEY");
 801a564:	4916      	ldr	r1, [pc, #88]	@ (801a5c0 <mg_tls_init+0x30c>)
 801a566:	6878      	ldr	r0, [r7, #4]
 801a568:	f7ed fc84 	bl	8007e74 <mg_error>
 801a56c:	e02b      	b.n	801a5c6 <mg_tls_init+0x312>
      return;
 801a56e:	bf00      	nop
 801a570:	e029      	b.n	801a5c6 <mg_tls_init+0x312>
    return;
 801a572:	bf00      	nop
 801a574:	e027      	b.n	801a5c6 <mg_tls_init+0x312>
    return;
 801a576:	bf00      	nop
 801a578:	e025      	b.n	801a5c6 <mg_tls_init+0x312>
      return;
 801a57a:	bf00      	nop
 801a57c:	e023      	b.n	801a5c6 <mg_tls_init+0x312>
 801a57e:	bf00      	nop
 801a580:	08027808 	.word	0x08027808
 801a584:	08027810 	.word	0x08027810
 801a588:	08027824 	.word	0x08027824
 801a58c:	20000258 	.word	0x20000258
 801a590:	08028ac4 	.word	0x08028ac4
 801a594:	08025140 	.word	0x08025140
 801a598:	08027830 	.word	0x08027830
 801a59c:	0802784c 	.word	0x0802784c
 801a5a0:	08027864 	.word	0x08027864
 801a5a4:	08027890 	.word	0x08027890
 801a5a8:	080278a0 	.word	0x080278a0
 801a5ac:	080278bc 	.word	0x080278bc
 801a5b0:	080278e0 	.word	0x080278e0
 801a5b4:	080278e8 	.word	0x080278e8
 801a5b8:	08027908 	.word	0x08027908
 801a5bc:	08027914 	.word	0x08027914
 801a5c0:	08027940 	.word	0x08027940
      return;
 801a5c4:	bf00      	nop
  }
}
 801a5c6:	3738      	adds	r7, #56	@ 0x38
 801a5c8:	46bd      	mov	sp, r7
 801a5ca:	bd80      	pop	{r7, pc}

0801a5cc <mg_tls_free>:

void mg_tls_free(struct mg_connection *c) {
 801a5cc:	b580      	push	{r7, lr}
 801a5ce:	b084      	sub	sp, #16
 801a5d0:	af00      	add	r7, sp, #0
 801a5d2:	6078      	str	r0, [r7, #4]
  struct tls_data *tls = (struct tls_data *) c->tls;
 801a5d4:	687b      	ldr	r3, [r7, #4]
 801a5d6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 801a5da:	60fb      	str	r3, [r7, #12]
  if (tls != NULL) {
 801a5dc:	68fb      	ldr	r3, [r7, #12]
 801a5de:	2b00      	cmp	r3, #0
 801a5e0:	d010      	beq.n	801a604 <mg_tls_free+0x38>
    mg_iobuf_free(&tls->send);
 801a5e2:	68fb      	ldr	r3, [r7, #12]
 801a5e4:	3304      	adds	r3, #4
 801a5e6:	4618      	mov	r0, r3
 801a5e8:	f7f1 ff5d 	bl	800c4a6 <mg_iobuf_free>
    mg_free((void *) tls->cert_der.buf);
 801a5ec:	68fb      	ldr	r3, [r7, #12]
 801a5ee:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 801a5f2:	4618      	mov	r0, r3
 801a5f4:	f7ec fc02 	bl	8006dfc <mg_free>
    mg_free((void *) tls->ca_der.buf);
 801a5f8:	68fb      	ldr	r3, [r7, #12]
 801a5fa:	f8d3 311c 	ldr.w	r3, [r3, #284]	@ 0x11c
 801a5fe:	4618      	mov	r0, r3
 801a600:	f7ec fbfc 	bl	8006dfc <mg_free>
  }
  mg_free(c->tls);
 801a604:	687b      	ldr	r3, [r7, #4]
 801a606:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 801a60a:	4618      	mov	r0, r3
 801a60c:	f7ec fbf6 	bl	8006dfc <mg_free>
  c->tls = NULL;
 801a610:	687b      	ldr	r3, [r7, #4]
 801a612:	2200      	movs	r2, #0
 801a614:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
}
 801a618:	bf00      	nop
 801a61a:	3710      	adds	r7, #16
 801a61c:	46bd      	mov	sp, r7
 801a61e:	bd80      	pop	{r7, pc}

0801a620 <mg_tls_send>:

long mg_tls_send(struct mg_connection *c, const void *buf, size_t len) {
 801a620:	b590      	push	{r4, r7, lr}
 801a622:	b08d      	sub	sp, #52	@ 0x34
 801a624:	af04      	add	r7, sp, #16
 801a626:	60f8      	str	r0, [r7, #12]
 801a628:	60b9      	str	r1, [r7, #8]
 801a62a:	607a      	str	r2, [r7, #4]
  struct tls_data *tls = (struct tls_data *) c->tls;
 801a62c:	68fb      	ldr	r3, [r7, #12]
 801a62e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 801a632:	61bb      	str	r3, [r7, #24]
  long n = MG_IO_WAIT;
 801a634:	f06f 0301 	mvn.w	r3, #1
 801a638:	61fb      	str	r3, [r7, #28]
  bool was_throttled = c->is_tls_throttled;  // see #3074
 801a63a:	68fb      	ldr	r3, [r7, #12]
 801a63c:	f893 30b5 	ldrb.w	r3, [r3, #181]	@ 0xb5
 801a640:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 801a644:	b2db      	uxtb	r3, r3
 801a646:	2b00      	cmp	r3, #0
 801a648:	bf14      	ite	ne
 801a64a:	2301      	movne	r3, #1
 801a64c:	2300      	moveq	r3, #0
 801a64e:	75fb      	strb	r3, [r7, #23]
  if (!was_throttled) {                      // encrypt new data
 801a650:	7dfb      	ldrb	r3, [r7, #23]
 801a652:	f083 0301 	eor.w	r3, r3, #1
 801a656:	b2db      	uxtb	r3, r3
 801a658:	2b00      	cmp	r3, #0
 801a65a:	d01b      	beq.n	801a694 <mg_tls_send+0x74>
    if (len > MG_IO_SIZE) len = MG_IO_SIZE;
 801a65c:	687b      	ldr	r3, [r7, #4]
 801a65e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801a662:	d902      	bls.n	801a66a <mg_tls_send+0x4a>
 801a664:	f44f 7300 	mov.w	r3, #512	@ 0x200
 801a668:	607b      	str	r3, [r7, #4]
    if (len > 16384) len = 16384;
 801a66a:	687b      	ldr	r3, [r7, #4]
 801a66c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 801a670:	d902      	bls.n	801a678 <mg_tls_send+0x58>
 801a672:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 801a676:	607b      	str	r3, [r7, #4]
    mg_tls_encrypt(c, (const uint8_t *) buf, len, MG_TLS_APP_DATA);
 801a678:	2317      	movs	r3, #23
 801a67a:	687a      	ldr	r2, [r7, #4]
 801a67c:	68b9      	ldr	r1, [r7, #8]
 801a67e:	68f8      	ldr	r0, [r7, #12]
 801a680:	f7fc fc04 	bl	8016e8c <mg_tls_encrypt>
  }  // else, resend outstanding encrypted data in tls->send
  while (tls->send.len > 0 &&
 801a684:	e006      	b.n	801a694 <mg_tls_send+0x74>
         (n = mg_io_send(c, tls->send.buf, tls->send.len)) > 0) {
    mg_iobuf_del(&tls->send, 0, (size_t) n);
 801a686:	69bb      	ldr	r3, [r7, #24]
 801a688:	3304      	adds	r3, #4
 801a68a:	69fa      	ldr	r2, [r7, #28]
 801a68c:	2100      	movs	r1, #0
 801a68e:	4618      	mov	r0, r3
 801a690:	f7f1 febe 	bl	800c410 <mg_iobuf_del>
  while (tls->send.len > 0 &&
 801a694:	69bb      	ldr	r3, [r7, #24]
 801a696:	68db      	ldr	r3, [r3, #12]
 801a698:	2b00      	cmp	r3, #0
 801a69a:	d00b      	beq.n	801a6b4 <mg_tls_send+0x94>
         (n = mg_io_send(c, tls->send.buf, tls->send.len)) > 0) {
 801a69c:	69bb      	ldr	r3, [r7, #24]
 801a69e:	6859      	ldr	r1, [r3, #4]
 801a6a0:	69bb      	ldr	r3, [r7, #24]
 801a6a2:	68db      	ldr	r3, [r3, #12]
 801a6a4:	461a      	mov	r2, r3
 801a6a6:	68f8      	ldr	r0, [r7, #12]
 801a6a8:	f7f5 f9a8 	bl	800f9fc <mg_io_send>
 801a6ac:	61f8      	str	r0, [r7, #28]
  while (tls->send.len > 0 &&
 801a6ae:	69fb      	ldr	r3, [r7, #28]
 801a6b0:	2b00      	cmp	r3, #0
 801a6b2:	dce8      	bgt.n	801a686 <mg_tls_send+0x66>
  }  // if last chunk fails to be sent, it needs to be flushed
  c->is_tls_throttled = (tls->send.len > 0 && n == MG_IO_WAIT);
 801a6b4:	69bb      	ldr	r3, [r7, #24]
 801a6b6:	68db      	ldr	r3, [r3, #12]
 801a6b8:	2b00      	cmp	r3, #0
 801a6ba:	d005      	beq.n	801a6c8 <mg_tls_send+0xa8>
 801a6bc:	69fb      	ldr	r3, [r7, #28]
 801a6be:	f113 0f02 	cmn.w	r3, #2
 801a6c2:	d101      	bne.n	801a6c8 <mg_tls_send+0xa8>
 801a6c4:	2301      	movs	r3, #1
 801a6c6:	e000      	b.n	801a6ca <mg_tls_send+0xaa>
 801a6c8:	2300      	movs	r3, #0
 801a6ca:	f003 0301 	and.w	r3, r3, #1
 801a6ce:	b2d9      	uxtb	r1, r3
 801a6d0:	68fa      	ldr	r2, [r7, #12]
 801a6d2:	f892 30b5 	ldrb.w	r3, [r2, #181]	@ 0xb5
 801a6d6:	f361 13c7 	bfi	r3, r1, #7, #1
 801a6da:	f882 30b5 	strb.w	r3, [r2, #181]	@ 0xb5
  MG_VERBOSE(("%lu %ld %ld %ld %c %c", c->id, (long) len, (long) tls->send.len,
 801a6de:	4b1e      	ldr	r3, [pc, #120]	@ (801a758 <mg_tls_send+0x138>)
 801a6e0:	681b      	ldr	r3, [r3, #0]
 801a6e2:	2b03      	cmp	r3, #3
 801a6e4:	dd26      	ble.n	801a734 <mg_tls_send+0x114>
 801a6e6:	4b1d      	ldr	r3, [pc, #116]	@ (801a75c <mg_tls_send+0x13c>)
 801a6e8:	f243 221c 	movw	r2, #12828	@ 0x321c
 801a6ec:	491c      	ldr	r1, [pc, #112]	@ (801a760 <mg_tls_send+0x140>)
 801a6ee:	2004      	movs	r0, #4
 801a6f0:	f7f2 fd5c 	bl	800d1ac <mg_log_prefix>
 801a6f4:	68fb      	ldr	r3, [r7, #12]
 801a6f6:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 801a6f8:	6878      	ldr	r0, [r7, #4]
 801a6fa:	69bb      	ldr	r3, [r7, #24]
 801a6fc:	68db      	ldr	r3, [r3, #12]
 801a6fe:	461c      	mov	r4, r3
 801a700:	7dfb      	ldrb	r3, [r7, #23]
 801a702:	2b00      	cmp	r3, #0
 801a704:	d001      	beq.n	801a70a <mg_tls_send+0xea>
 801a706:	2354      	movs	r3, #84	@ 0x54
 801a708:	e000      	b.n	801a70c <mg_tls_send+0xec>
 801a70a:	2374      	movs	r3, #116	@ 0x74
 801a70c:	68fa      	ldr	r2, [r7, #12]
 801a70e:	f892 20b5 	ldrb.w	r2, [r2, #181]	@ 0xb5
 801a712:	f022 027f 	bic.w	r2, r2, #127	@ 0x7f
 801a716:	b2d2      	uxtb	r2, r2
 801a718:	2a00      	cmp	r2, #0
 801a71a:	d001      	beq.n	801a720 <mg_tls_send+0x100>
 801a71c:	2254      	movs	r2, #84	@ 0x54
 801a71e:	e000      	b.n	801a722 <mg_tls_send+0x102>
 801a720:	2274      	movs	r2, #116	@ 0x74
 801a722:	9202      	str	r2, [sp, #8]
 801a724:	9301      	str	r3, [sp, #4]
 801a726:	69fb      	ldr	r3, [r7, #28]
 801a728:	9300      	str	r3, [sp, #0]
 801a72a:	4623      	mov	r3, r4
 801a72c:	4602      	mov	r2, r0
 801a72e:	480d      	ldr	r0, [pc, #52]	@ (801a764 <mg_tls_send+0x144>)
 801a730:	f7f2 fd8c 	bl	800d24c <mg_log>
              n, was_throttled ? 'T' : 't', c->is_tls_throttled ? 'T' : 't'));
  if (n == MG_IO_ERR) return MG_IO_ERR;
 801a734:	69fb      	ldr	r3, [r7, #28]
 801a736:	f1b3 3fff 	cmp.w	r3, #4294967295
 801a73a:	d102      	bne.n	801a742 <mg_tls_send+0x122>
 801a73c:	f04f 33ff 	mov.w	r3, #4294967295
 801a740:	e006      	b.n	801a750 <mg_tls_send+0x130>
  if (was_throttled) return MG_IO_WAIT;  // sent throttled data instead
 801a742:	7dfb      	ldrb	r3, [r7, #23]
 801a744:	2b00      	cmp	r3, #0
 801a746:	d002      	beq.n	801a74e <mg_tls_send+0x12e>
 801a748:	f06f 0301 	mvn.w	r3, #1
 801a74c:	e000      	b.n	801a750 <mg_tls_send+0x130>
  return (long) len;  // return len even when throttled, already encripted that
 801a74e:	687b      	ldr	r3, [r7, #4]
}
 801a750:	4618      	mov	r0, r3
 801a752:	3724      	adds	r7, #36	@ 0x24
 801a754:	46bd      	mov	sp, r7
 801a756:	bd90      	pop	{r4, r7, pc}
 801a758:	20000258 	.word	0x20000258
 801a75c:	08028ad0 	.word	0x08028ad0
 801a760:	08025140 	.word	0x08025140
 801a764:	08027968 	.word	0x08027968

0801a768 <mg_tls_recv>:

long mg_tls_recv(struct mg_connection *c, void *buf, size_t len) {
 801a768:	b580      	push	{r7, lr}
 801a76a:	b088      	sub	sp, #32
 801a76c:	af00      	add	r7, sp, #0
 801a76e:	60f8      	str	r0, [r7, #12]
 801a770:	60b9      	str	r1, [r7, #8]
 801a772:	607a      	str	r2, [r7, #4]
  int r = 0;
 801a774:	2300      	movs	r3, #0
 801a776:	61fb      	str	r3, [r7, #28]
  struct tls_data *tls = (struct tls_data *) c->tls;
 801a778:	68fb      	ldr	r3, [r7, #12]
 801a77a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 801a77e:	61bb      	str	r3, [r7, #24]
  unsigned char *recv_buf;
  size_t minlen;

  r = mg_tls_recv_record(c);
 801a780:	68f8      	ldr	r0, [r7, #12]
 801a782:	f7fc fc7d 	bl	8017080 <mg_tls_recv_record>
 801a786:	61f8      	str	r0, [r7, #28]
  if (r < 0) {
 801a788:	69fb      	ldr	r3, [r7, #28]
 801a78a:	2b00      	cmp	r3, #0
 801a78c:	da01      	bge.n	801a792 <mg_tls_recv+0x2a>
    return r;
 801a78e:	69fb      	ldr	r3, [r7, #28]
 801a790:	e03a      	b.n	801a808 <mg_tls_recv+0xa0>
  }
  recv_buf = &c->rtls.buf[tls->recv_offset];
 801a792:	68fb      	ldr	r3, [r7, #12]
 801a794:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 801a796:	69bb      	ldr	r3, [r7, #24]
 801a798:	695b      	ldr	r3, [r3, #20]
 801a79a:	4413      	add	r3, r2
 801a79c:	617b      	str	r3, [r7, #20]

  if (tls->content_type != MG_TLS_APP_DATA) {
 801a79e:	69bb      	ldr	r3, [r7, #24]
 801a7a0:	7f1b      	ldrb	r3, [r3, #28]
 801a7a2:	2b17      	cmp	r3, #23
 801a7a4:	d008      	beq.n	801a7b8 <mg_tls_recv+0x50>
    tls->recv_len = 0;
 801a7a6:	69bb      	ldr	r3, [r7, #24]
 801a7a8:	2200      	movs	r2, #0
 801a7aa:	619a      	str	r2, [r3, #24]
    mg_tls_drop_record(c);
 801a7ac:	68f8      	ldr	r0, [r7, #12]
 801a7ae:	f7fb fffa 	bl	80167a6 <mg_tls_drop_record>
    return MG_IO_WAIT;
 801a7b2:	f06f 0301 	mvn.w	r3, #1
 801a7b6:	e027      	b.n	801a808 <mg_tls_recv+0xa0>
  }
  if (buf == NULL || len == 0) return 0L;
 801a7b8:	68bb      	ldr	r3, [r7, #8]
 801a7ba:	2b00      	cmp	r3, #0
 801a7bc:	d002      	beq.n	801a7c4 <mg_tls_recv+0x5c>
 801a7be:	687b      	ldr	r3, [r7, #4]
 801a7c0:	2b00      	cmp	r3, #0
 801a7c2:	d101      	bne.n	801a7c8 <mg_tls_recv+0x60>
 801a7c4:	2300      	movs	r3, #0
 801a7c6:	e01f      	b.n	801a808 <mg_tls_recv+0xa0>
  minlen = len < tls->recv_len ? len : tls->recv_len;
 801a7c8:	69bb      	ldr	r3, [r7, #24]
 801a7ca:	699b      	ldr	r3, [r3, #24]
 801a7cc:	687a      	ldr	r2, [r7, #4]
 801a7ce:	4293      	cmp	r3, r2
 801a7d0:	bf28      	it	cs
 801a7d2:	4613      	movcs	r3, r2
 801a7d4:	613b      	str	r3, [r7, #16]
  memmove(buf, recv_buf, minlen);
 801a7d6:	693a      	ldr	r2, [r7, #16]
 801a7d8:	6979      	ldr	r1, [r7, #20]
 801a7da:	68b8      	ldr	r0, [r7, #8]
 801a7dc:	f009 fe3c 	bl	8024458 <memmove>
  tls->recv_offset += minlen;
 801a7e0:	69bb      	ldr	r3, [r7, #24]
 801a7e2:	695a      	ldr	r2, [r3, #20]
 801a7e4:	693b      	ldr	r3, [r7, #16]
 801a7e6:	441a      	add	r2, r3
 801a7e8:	69bb      	ldr	r3, [r7, #24]
 801a7ea:	615a      	str	r2, [r3, #20]
  tls->recv_len -= minlen;
 801a7ec:	69bb      	ldr	r3, [r7, #24]
 801a7ee:	699a      	ldr	r2, [r3, #24]
 801a7f0:	693b      	ldr	r3, [r7, #16]
 801a7f2:	1ad2      	subs	r2, r2, r3
 801a7f4:	69bb      	ldr	r3, [r7, #24]
 801a7f6:	619a      	str	r2, [r3, #24]
  if (tls->recv_len == 0) {
 801a7f8:	69bb      	ldr	r3, [r7, #24]
 801a7fa:	699b      	ldr	r3, [r3, #24]
 801a7fc:	2b00      	cmp	r3, #0
 801a7fe:	d102      	bne.n	801a806 <mg_tls_recv+0x9e>
    mg_tls_drop_record(c);
 801a800:	68f8      	ldr	r0, [r7, #12]
 801a802:	f7fb ffd0 	bl	80167a6 <mg_tls_drop_record>
  }
  return (long) minlen;
 801a806:	693b      	ldr	r3, [r7, #16]
}
 801a808:	4618      	mov	r0, r3
 801a80a:	3720      	adds	r7, #32
 801a80c:	46bd      	mov	sp, r7
 801a80e:	bd80      	pop	{r7, pc}

0801a810 <mg_tls_pending>:

size_t mg_tls_pending(struct mg_connection *c) {
 801a810:	b480      	push	{r7}
 801a812:	b085      	sub	sp, #20
 801a814:	af00      	add	r7, sp, #0
 801a816:	6078      	str	r0, [r7, #4]
  struct tls_data *tls = (struct tls_data *) c->tls;
 801a818:	687b      	ldr	r3, [r7, #4]
 801a81a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 801a81e:	60fb      	str	r3, [r7, #12]
  return tls != NULL ? tls->recv_len : 0;
 801a820:	68fb      	ldr	r3, [r7, #12]
 801a822:	2b00      	cmp	r3, #0
 801a824:	d002      	beq.n	801a82c <mg_tls_pending+0x1c>
 801a826:	68fb      	ldr	r3, [r7, #12]
 801a828:	699b      	ldr	r3, [r3, #24]
 801a82a:	e000      	b.n	801a82e <mg_tls_pending+0x1e>
 801a82c:	2300      	movs	r3, #0
}
 801a82e:	4618      	mov	r0, r3
 801a830:	3714      	adds	r7, #20
 801a832:	46bd      	mov	sp, r7
 801a834:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a838:	4770      	bx	lr

0801a83a <mg_tls_flush>:

void mg_tls_flush(struct mg_connection *c) {
 801a83a:	b580      	push	{r7, lr}
 801a83c:	b084      	sub	sp, #16
 801a83e:	af00      	add	r7, sp, #0
 801a840:	6078      	str	r0, [r7, #4]
  struct tls_data *tls = (struct tls_data *) c->tls;
 801a842:	687b      	ldr	r3, [r7, #4]
 801a844:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 801a848:	60fb      	str	r3, [r7, #12]
  long n;
  while (tls->send.len > 0 &&
 801a84a:	e006      	b.n	801a85a <mg_tls_flush+0x20>
         (n = mg_io_send(c, tls->send.buf, tls->send.len)) > 0) {
    mg_iobuf_del(&tls->send, 0, (size_t) n);
 801a84c:	68fb      	ldr	r3, [r7, #12]
 801a84e:	3304      	adds	r3, #4
 801a850:	68ba      	ldr	r2, [r7, #8]
 801a852:	2100      	movs	r1, #0
 801a854:	4618      	mov	r0, r3
 801a856:	f7f1 fddb 	bl	800c410 <mg_iobuf_del>
  while (tls->send.len > 0 &&
 801a85a:	68fb      	ldr	r3, [r7, #12]
 801a85c:	68db      	ldr	r3, [r3, #12]
 801a85e:	2b00      	cmp	r3, #0
 801a860:	d00b      	beq.n	801a87a <mg_tls_flush+0x40>
         (n = mg_io_send(c, tls->send.buf, tls->send.len)) > 0) {
 801a862:	68fb      	ldr	r3, [r7, #12]
 801a864:	6859      	ldr	r1, [r3, #4]
 801a866:	68fb      	ldr	r3, [r7, #12]
 801a868:	68db      	ldr	r3, [r3, #12]
 801a86a:	461a      	mov	r2, r3
 801a86c:	6878      	ldr	r0, [r7, #4]
 801a86e:	f7f5 f8c5 	bl	800f9fc <mg_io_send>
 801a872:	60b8      	str	r0, [r7, #8]
  while (tls->send.len > 0 &&
 801a874:	68bb      	ldr	r3, [r7, #8]
 801a876:	2b00      	cmp	r3, #0
 801a878:	dce8      	bgt.n	801a84c <mg_tls_flush+0x12>
  }
}
 801a87a:	bf00      	nop
 801a87c:	3710      	adds	r7, #16
 801a87e:	46bd      	mov	sp, r7
 801a880:	bd80      	pop	{r7, pc}

0801a882 <mg_tls_ctx_init>:

void mg_tls_ctx_init(struct mg_mgr *mgr) {
 801a882:	b480      	push	{r7}
 801a884:	b083      	sub	sp, #12
 801a886:	af00      	add	r7, sp, #0
 801a888:	6078      	str	r0, [r7, #4]
  (void) mgr;
}
 801a88a:	bf00      	nop
 801a88c:	370c      	adds	r7, #12
 801a88e:	46bd      	mov	sp, r7
 801a890:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a894:	4770      	bx	lr
	...

0801a898 <initialize_state>:
#endif

static void initialize_state(uint32_t state[CHACHA20_STATE_WORDS],
                             const uint8_t key[CHACHA20_KEY_SIZE],
                             const uint8_t nonce[CHACHA20_NONCE_SIZE],
                             uint32_t counter) {
 801a898:	b480      	push	{r7}
 801a89a:	b085      	sub	sp, #20
 801a89c:	af00      	add	r7, sp, #0
 801a89e:	60f8      	str	r0, [r7, #12]
 801a8a0:	60b9      	str	r1, [r7, #8]
 801a8a2:	607a      	str	r2, [r7, #4]
 801a8a4:	603b      	str	r3, [r7, #0]
  static_assert(sizeof(uint32_t) == 4,
                "We don't support systems that do not conform to standard of "
                "uint32_t being exact 32bit wide");
#endif
#endif
  state[0] = 0x61707865;
 801a8a6:	68fb      	ldr	r3, [r7, #12]
 801a8a8:	4a2b      	ldr	r2, [pc, #172]	@ (801a958 <initialize_state+0xc0>)
 801a8aa:	601a      	str	r2, [r3, #0]
  state[1] = 0x3320646e;
 801a8ac:	68fb      	ldr	r3, [r7, #12]
 801a8ae:	3304      	adds	r3, #4
 801a8b0:	4a2a      	ldr	r2, [pc, #168]	@ (801a95c <initialize_state+0xc4>)
 801a8b2:	601a      	str	r2, [r3, #0]
  state[2] = 0x79622d32;
 801a8b4:	68fb      	ldr	r3, [r7, #12]
 801a8b6:	3308      	adds	r3, #8
 801a8b8:	4a29      	ldr	r2, [pc, #164]	@ (801a960 <initialize_state+0xc8>)
 801a8ba:	601a      	str	r2, [r3, #0]
  state[3] = 0x6b206574;
 801a8bc:	68fb      	ldr	r3, [r7, #12]
 801a8be:	330c      	adds	r3, #12
 801a8c0:	4a28      	ldr	r2, [pc, #160]	@ (801a964 <initialize_state+0xcc>)
 801a8c2:	601a      	str	r2, [r3, #0]
  store_32_le(state[4], key);
 801a8c4:	68fb      	ldr	r3, [r7, #12]
 801a8c6:	3310      	adds	r3, #16
 801a8c8:	68ba      	ldr	r2, [r7, #8]
 801a8ca:	6812      	ldr	r2, [r2, #0]
 801a8cc:	601a      	str	r2, [r3, #0]
  store_32_le(state[5], key + 4);
 801a8ce:	68fb      	ldr	r3, [r7, #12]
 801a8d0:	3314      	adds	r3, #20
 801a8d2:	68ba      	ldr	r2, [r7, #8]
 801a8d4:	3204      	adds	r2, #4
 801a8d6:	6812      	ldr	r2, [r2, #0]
 801a8d8:	601a      	str	r2, [r3, #0]
  store_32_le(state[6], key + 8);
 801a8da:	68fb      	ldr	r3, [r7, #12]
 801a8dc:	3318      	adds	r3, #24
 801a8de:	68ba      	ldr	r2, [r7, #8]
 801a8e0:	3208      	adds	r2, #8
 801a8e2:	6812      	ldr	r2, [r2, #0]
 801a8e4:	601a      	str	r2, [r3, #0]
  store_32_le(state[7], key + 12);
 801a8e6:	68fb      	ldr	r3, [r7, #12]
 801a8e8:	331c      	adds	r3, #28
 801a8ea:	68ba      	ldr	r2, [r7, #8]
 801a8ec:	320c      	adds	r2, #12
 801a8ee:	6812      	ldr	r2, [r2, #0]
 801a8f0:	601a      	str	r2, [r3, #0]
  store_32_le(state[8], key + 16);
 801a8f2:	68fb      	ldr	r3, [r7, #12]
 801a8f4:	3320      	adds	r3, #32
 801a8f6:	68ba      	ldr	r2, [r7, #8]
 801a8f8:	3210      	adds	r2, #16
 801a8fa:	6812      	ldr	r2, [r2, #0]
 801a8fc:	601a      	str	r2, [r3, #0]
  store_32_le(state[9], key + 20);
 801a8fe:	68fb      	ldr	r3, [r7, #12]
 801a900:	3324      	adds	r3, #36	@ 0x24
 801a902:	68ba      	ldr	r2, [r7, #8]
 801a904:	3214      	adds	r2, #20
 801a906:	6812      	ldr	r2, [r2, #0]
 801a908:	601a      	str	r2, [r3, #0]
  store_32_le(state[10], key + 24);
 801a90a:	68fb      	ldr	r3, [r7, #12]
 801a90c:	3328      	adds	r3, #40	@ 0x28
 801a90e:	68ba      	ldr	r2, [r7, #8]
 801a910:	3218      	adds	r2, #24
 801a912:	6812      	ldr	r2, [r2, #0]
 801a914:	601a      	str	r2, [r3, #0]
  store_32_le(state[11], key + 28);
 801a916:	68fb      	ldr	r3, [r7, #12]
 801a918:	332c      	adds	r3, #44	@ 0x2c
 801a91a:	68ba      	ldr	r2, [r7, #8]
 801a91c:	321c      	adds	r2, #28
 801a91e:	6812      	ldr	r2, [r2, #0]
 801a920:	601a      	str	r2, [r3, #0]
  state[12] = counter;
 801a922:	68fb      	ldr	r3, [r7, #12]
 801a924:	3330      	adds	r3, #48	@ 0x30
 801a926:	683a      	ldr	r2, [r7, #0]
 801a928:	601a      	str	r2, [r3, #0]
  store_32_le(state[13], nonce);
 801a92a:	68fb      	ldr	r3, [r7, #12]
 801a92c:	3334      	adds	r3, #52	@ 0x34
 801a92e:	687a      	ldr	r2, [r7, #4]
 801a930:	6812      	ldr	r2, [r2, #0]
 801a932:	601a      	str	r2, [r3, #0]
  store_32_le(state[14], nonce + 4);
 801a934:	68fb      	ldr	r3, [r7, #12]
 801a936:	3338      	adds	r3, #56	@ 0x38
 801a938:	687a      	ldr	r2, [r7, #4]
 801a93a:	3204      	adds	r2, #4
 801a93c:	6812      	ldr	r2, [r2, #0]
 801a93e:	601a      	str	r2, [r3, #0]
  store_32_le(state[15], nonce + 8);
 801a940:	68fb      	ldr	r3, [r7, #12]
 801a942:	333c      	adds	r3, #60	@ 0x3c
 801a944:	687a      	ldr	r2, [r7, #4]
 801a946:	3208      	adds	r2, #8
 801a948:	6812      	ldr	r2, [r2, #0]
 801a94a:	601a      	str	r2, [r3, #0]
}
 801a94c:	bf00      	nop
 801a94e:	3714      	adds	r7, #20
 801a950:	46bd      	mov	sp, r7
 801a952:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a956:	4770      	bx	lr
 801a958:	61707865 	.word	0x61707865
 801a95c:	3320646e 	.word	0x3320646e
 801a960:	79622d32 	.word	0x79622d32
 801a964:	6b206574 	.word	0x6b206574

0801a968 <core_block>:
#define TIMES16(x)                                                          \
  x(0) x(1) x(2) x(3) x(4) x(5) x(6) x(7) x(8) x(9) x(10) x(11) x(12) x(13) \
      x(14) x(15)

static void core_block(const uint32_t *restrict start,
                       uint32_t *restrict output) {
 801a968:	b480      	push	{r7}
 801a96a:	b095      	sub	sp, #84	@ 0x54
 801a96c:	af00      	add	r7, sp, #0
 801a96e:	6078      	str	r0, [r7, #4]
 801a970:	6039      	str	r1, [r7, #0]
  int i;
// instead of working on the output array,
// we let the compiler allocate 16 local variables on the stack
#define __LV(i) uint32_t __t##i = start[i];
  TIMES16(__LV)
 801a972:	687b      	ldr	r3, [r7, #4]
 801a974:	681b      	ldr	r3, [r3, #0]
 801a976:	64bb      	str	r3, [r7, #72]	@ 0x48
 801a978:	687b      	ldr	r3, [r7, #4]
 801a97a:	3304      	adds	r3, #4
 801a97c:	681b      	ldr	r3, [r3, #0]
 801a97e:	647b      	str	r3, [r7, #68]	@ 0x44
 801a980:	687b      	ldr	r3, [r7, #4]
 801a982:	3308      	adds	r3, #8
 801a984:	681b      	ldr	r3, [r3, #0]
 801a986:	643b      	str	r3, [r7, #64]	@ 0x40
 801a988:	687b      	ldr	r3, [r7, #4]
 801a98a:	330c      	adds	r3, #12
 801a98c:	681b      	ldr	r3, [r3, #0]
 801a98e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801a990:	687b      	ldr	r3, [r7, #4]
 801a992:	3310      	adds	r3, #16
 801a994:	681b      	ldr	r3, [r3, #0]
 801a996:	63bb      	str	r3, [r7, #56]	@ 0x38
 801a998:	687b      	ldr	r3, [r7, #4]
 801a99a:	3314      	adds	r3, #20
 801a99c:	681b      	ldr	r3, [r3, #0]
 801a99e:	637b      	str	r3, [r7, #52]	@ 0x34
 801a9a0:	687b      	ldr	r3, [r7, #4]
 801a9a2:	3318      	adds	r3, #24
 801a9a4:	681b      	ldr	r3, [r3, #0]
 801a9a6:	633b      	str	r3, [r7, #48]	@ 0x30
 801a9a8:	687b      	ldr	r3, [r7, #4]
 801a9aa:	331c      	adds	r3, #28
 801a9ac:	681b      	ldr	r3, [r3, #0]
 801a9ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801a9b0:	687b      	ldr	r3, [r7, #4]
 801a9b2:	3320      	adds	r3, #32
 801a9b4:	681b      	ldr	r3, [r3, #0]
 801a9b6:	62bb      	str	r3, [r7, #40]	@ 0x28
 801a9b8:	687b      	ldr	r3, [r7, #4]
 801a9ba:	3324      	adds	r3, #36	@ 0x24
 801a9bc:	681b      	ldr	r3, [r3, #0]
 801a9be:	627b      	str	r3, [r7, #36]	@ 0x24
 801a9c0:	687b      	ldr	r3, [r7, #4]
 801a9c2:	3328      	adds	r3, #40	@ 0x28
 801a9c4:	681b      	ldr	r3, [r3, #0]
 801a9c6:	623b      	str	r3, [r7, #32]
 801a9c8:	687b      	ldr	r3, [r7, #4]
 801a9ca:	332c      	adds	r3, #44	@ 0x2c
 801a9cc:	681b      	ldr	r3, [r3, #0]
 801a9ce:	61fb      	str	r3, [r7, #28]
 801a9d0:	687b      	ldr	r3, [r7, #4]
 801a9d2:	3330      	adds	r3, #48	@ 0x30
 801a9d4:	681b      	ldr	r3, [r3, #0]
 801a9d6:	61bb      	str	r3, [r7, #24]
 801a9d8:	687b      	ldr	r3, [r7, #4]
 801a9da:	3334      	adds	r3, #52	@ 0x34
 801a9dc:	681b      	ldr	r3, [r3, #0]
 801a9de:	617b      	str	r3, [r7, #20]
 801a9e0:	687b      	ldr	r3, [r7, #4]
 801a9e2:	3338      	adds	r3, #56	@ 0x38
 801a9e4:	681b      	ldr	r3, [r3, #0]
 801a9e6:	613b      	str	r3, [r7, #16]
 801a9e8:	687b      	ldr	r3, [r7, #4]
 801a9ea:	333c      	adds	r3, #60	@ 0x3c
 801a9ec:	681b      	ldr	r3, [r3, #0]
 801a9ee:	60fb      	str	r3, [r7, #12]

#define __Q(a, b, c, d) Qround(__t##a, __t##b, __t##c, __t##d)

  for (i = 0; i < 10; i++) {
 801a9f0:	2300      	movs	r3, #0
 801a9f2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 801a9f4:	e182      	b.n	801acfc <core_block+0x394>
    __Q(0, 4, 8, 12);
 801a9f6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 801a9f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801a9fa:	4413      	add	r3, r2
 801a9fc:	64bb      	str	r3, [r7, #72]	@ 0x48
 801a9fe:	69ba      	ldr	r2, [r7, #24]
 801aa00:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801aa02:	4053      	eors	r3, r2
 801aa04:	61bb      	str	r3, [r7, #24]
 801aa06:	69bb      	ldr	r3, [r7, #24]
 801aa08:	ea4f 4333 	mov.w	r3, r3, ror #16
 801aa0c:	61bb      	str	r3, [r7, #24]
 801aa0e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801aa10:	69bb      	ldr	r3, [r7, #24]
 801aa12:	4413      	add	r3, r2
 801aa14:	62bb      	str	r3, [r7, #40]	@ 0x28
 801aa16:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801aa18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801aa1a:	4053      	eors	r3, r2
 801aa1c:	63bb      	str	r3, [r7, #56]	@ 0x38
 801aa1e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801aa20:	ea4f 5333 	mov.w	r3, r3, ror #20
 801aa24:	63bb      	str	r3, [r7, #56]	@ 0x38
 801aa26:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 801aa28:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801aa2a:	4413      	add	r3, r2
 801aa2c:	64bb      	str	r3, [r7, #72]	@ 0x48
 801aa2e:	69ba      	ldr	r2, [r7, #24]
 801aa30:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801aa32:	4053      	eors	r3, r2
 801aa34:	61bb      	str	r3, [r7, #24]
 801aa36:	69bb      	ldr	r3, [r7, #24]
 801aa38:	ea4f 6333 	mov.w	r3, r3, ror #24
 801aa3c:	61bb      	str	r3, [r7, #24]
 801aa3e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801aa40:	69bb      	ldr	r3, [r7, #24]
 801aa42:	4413      	add	r3, r2
 801aa44:	62bb      	str	r3, [r7, #40]	@ 0x28
 801aa46:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801aa48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801aa4a:	4053      	eors	r3, r2
 801aa4c:	63bb      	str	r3, [r7, #56]	@ 0x38
 801aa4e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801aa50:	ea4f 6373 	mov.w	r3, r3, ror #25
 801aa54:	63bb      	str	r3, [r7, #56]	@ 0x38
    __Q(1, 5, 9, 13);
 801aa56:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 801aa58:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801aa5a:	4413      	add	r3, r2
 801aa5c:	647b      	str	r3, [r7, #68]	@ 0x44
 801aa5e:	697a      	ldr	r2, [r7, #20]
 801aa60:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801aa62:	4053      	eors	r3, r2
 801aa64:	617b      	str	r3, [r7, #20]
 801aa66:	697b      	ldr	r3, [r7, #20]
 801aa68:	ea4f 4333 	mov.w	r3, r3, ror #16
 801aa6c:	617b      	str	r3, [r7, #20]
 801aa6e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801aa70:	697b      	ldr	r3, [r7, #20]
 801aa72:	4413      	add	r3, r2
 801aa74:	627b      	str	r3, [r7, #36]	@ 0x24
 801aa76:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801aa78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801aa7a:	4053      	eors	r3, r2
 801aa7c:	637b      	str	r3, [r7, #52]	@ 0x34
 801aa7e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801aa80:	ea4f 5333 	mov.w	r3, r3, ror #20
 801aa84:	637b      	str	r3, [r7, #52]	@ 0x34
 801aa86:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 801aa88:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801aa8a:	4413      	add	r3, r2
 801aa8c:	647b      	str	r3, [r7, #68]	@ 0x44
 801aa8e:	697a      	ldr	r2, [r7, #20]
 801aa90:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801aa92:	4053      	eors	r3, r2
 801aa94:	617b      	str	r3, [r7, #20]
 801aa96:	697b      	ldr	r3, [r7, #20]
 801aa98:	ea4f 6333 	mov.w	r3, r3, ror #24
 801aa9c:	617b      	str	r3, [r7, #20]
 801aa9e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801aaa0:	697b      	ldr	r3, [r7, #20]
 801aaa2:	4413      	add	r3, r2
 801aaa4:	627b      	str	r3, [r7, #36]	@ 0x24
 801aaa6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801aaa8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801aaaa:	4053      	eors	r3, r2
 801aaac:	637b      	str	r3, [r7, #52]	@ 0x34
 801aaae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801aab0:	ea4f 6373 	mov.w	r3, r3, ror #25
 801aab4:	637b      	str	r3, [r7, #52]	@ 0x34
    __Q(2, 6, 10, 14);
 801aab6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 801aab8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801aaba:	4413      	add	r3, r2
 801aabc:	643b      	str	r3, [r7, #64]	@ 0x40
 801aabe:	693a      	ldr	r2, [r7, #16]
 801aac0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801aac2:	4053      	eors	r3, r2
 801aac4:	613b      	str	r3, [r7, #16]
 801aac6:	693b      	ldr	r3, [r7, #16]
 801aac8:	ea4f 4333 	mov.w	r3, r3, ror #16
 801aacc:	613b      	str	r3, [r7, #16]
 801aace:	6a3a      	ldr	r2, [r7, #32]
 801aad0:	693b      	ldr	r3, [r7, #16]
 801aad2:	4413      	add	r3, r2
 801aad4:	623b      	str	r3, [r7, #32]
 801aad6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801aad8:	6a3b      	ldr	r3, [r7, #32]
 801aada:	4053      	eors	r3, r2
 801aadc:	633b      	str	r3, [r7, #48]	@ 0x30
 801aade:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801aae0:	ea4f 5333 	mov.w	r3, r3, ror #20
 801aae4:	633b      	str	r3, [r7, #48]	@ 0x30
 801aae6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 801aae8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801aaea:	4413      	add	r3, r2
 801aaec:	643b      	str	r3, [r7, #64]	@ 0x40
 801aaee:	693a      	ldr	r2, [r7, #16]
 801aaf0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801aaf2:	4053      	eors	r3, r2
 801aaf4:	613b      	str	r3, [r7, #16]
 801aaf6:	693b      	ldr	r3, [r7, #16]
 801aaf8:	ea4f 6333 	mov.w	r3, r3, ror #24
 801aafc:	613b      	str	r3, [r7, #16]
 801aafe:	6a3a      	ldr	r2, [r7, #32]
 801ab00:	693b      	ldr	r3, [r7, #16]
 801ab02:	4413      	add	r3, r2
 801ab04:	623b      	str	r3, [r7, #32]
 801ab06:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801ab08:	6a3b      	ldr	r3, [r7, #32]
 801ab0a:	4053      	eors	r3, r2
 801ab0c:	633b      	str	r3, [r7, #48]	@ 0x30
 801ab0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801ab10:	ea4f 6373 	mov.w	r3, r3, ror #25
 801ab14:	633b      	str	r3, [r7, #48]	@ 0x30
    __Q(3, 7, 11, 15);
 801ab16:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 801ab18:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801ab1a:	4413      	add	r3, r2
 801ab1c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801ab1e:	68fa      	ldr	r2, [r7, #12]
 801ab20:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801ab22:	4053      	eors	r3, r2
 801ab24:	60fb      	str	r3, [r7, #12]
 801ab26:	68fb      	ldr	r3, [r7, #12]
 801ab28:	ea4f 4333 	mov.w	r3, r3, ror #16
 801ab2c:	60fb      	str	r3, [r7, #12]
 801ab2e:	69fa      	ldr	r2, [r7, #28]
 801ab30:	68fb      	ldr	r3, [r7, #12]
 801ab32:	4413      	add	r3, r2
 801ab34:	61fb      	str	r3, [r7, #28]
 801ab36:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801ab38:	69fb      	ldr	r3, [r7, #28]
 801ab3a:	4053      	eors	r3, r2
 801ab3c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801ab3e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801ab40:	ea4f 5333 	mov.w	r3, r3, ror #20
 801ab44:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801ab46:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 801ab48:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801ab4a:	4413      	add	r3, r2
 801ab4c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801ab4e:	68fa      	ldr	r2, [r7, #12]
 801ab50:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801ab52:	4053      	eors	r3, r2
 801ab54:	60fb      	str	r3, [r7, #12]
 801ab56:	68fb      	ldr	r3, [r7, #12]
 801ab58:	ea4f 6333 	mov.w	r3, r3, ror #24
 801ab5c:	60fb      	str	r3, [r7, #12]
 801ab5e:	69fa      	ldr	r2, [r7, #28]
 801ab60:	68fb      	ldr	r3, [r7, #12]
 801ab62:	4413      	add	r3, r2
 801ab64:	61fb      	str	r3, [r7, #28]
 801ab66:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801ab68:	69fb      	ldr	r3, [r7, #28]
 801ab6a:	4053      	eors	r3, r2
 801ab6c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801ab6e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801ab70:	ea4f 6373 	mov.w	r3, r3, ror #25
 801ab74:	62fb      	str	r3, [r7, #44]	@ 0x2c
    __Q(0, 5, 10, 15);
 801ab76:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 801ab78:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801ab7a:	4413      	add	r3, r2
 801ab7c:	64bb      	str	r3, [r7, #72]	@ 0x48
 801ab7e:	68fa      	ldr	r2, [r7, #12]
 801ab80:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801ab82:	4053      	eors	r3, r2
 801ab84:	60fb      	str	r3, [r7, #12]
 801ab86:	68fb      	ldr	r3, [r7, #12]
 801ab88:	ea4f 4333 	mov.w	r3, r3, ror #16
 801ab8c:	60fb      	str	r3, [r7, #12]
 801ab8e:	6a3a      	ldr	r2, [r7, #32]
 801ab90:	68fb      	ldr	r3, [r7, #12]
 801ab92:	4413      	add	r3, r2
 801ab94:	623b      	str	r3, [r7, #32]
 801ab96:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801ab98:	6a3b      	ldr	r3, [r7, #32]
 801ab9a:	4053      	eors	r3, r2
 801ab9c:	637b      	str	r3, [r7, #52]	@ 0x34
 801ab9e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801aba0:	ea4f 5333 	mov.w	r3, r3, ror #20
 801aba4:	637b      	str	r3, [r7, #52]	@ 0x34
 801aba6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 801aba8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801abaa:	4413      	add	r3, r2
 801abac:	64bb      	str	r3, [r7, #72]	@ 0x48
 801abae:	68fa      	ldr	r2, [r7, #12]
 801abb0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801abb2:	4053      	eors	r3, r2
 801abb4:	60fb      	str	r3, [r7, #12]
 801abb6:	68fb      	ldr	r3, [r7, #12]
 801abb8:	ea4f 6333 	mov.w	r3, r3, ror #24
 801abbc:	60fb      	str	r3, [r7, #12]
 801abbe:	6a3a      	ldr	r2, [r7, #32]
 801abc0:	68fb      	ldr	r3, [r7, #12]
 801abc2:	4413      	add	r3, r2
 801abc4:	623b      	str	r3, [r7, #32]
 801abc6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801abc8:	6a3b      	ldr	r3, [r7, #32]
 801abca:	4053      	eors	r3, r2
 801abcc:	637b      	str	r3, [r7, #52]	@ 0x34
 801abce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801abd0:	ea4f 6373 	mov.w	r3, r3, ror #25
 801abd4:	637b      	str	r3, [r7, #52]	@ 0x34
    __Q(1, 6, 11, 12);
 801abd6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 801abd8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801abda:	4413      	add	r3, r2
 801abdc:	647b      	str	r3, [r7, #68]	@ 0x44
 801abde:	69ba      	ldr	r2, [r7, #24]
 801abe0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801abe2:	4053      	eors	r3, r2
 801abe4:	61bb      	str	r3, [r7, #24]
 801abe6:	69bb      	ldr	r3, [r7, #24]
 801abe8:	ea4f 4333 	mov.w	r3, r3, ror #16
 801abec:	61bb      	str	r3, [r7, #24]
 801abee:	69fa      	ldr	r2, [r7, #28]
 801abf0:	69bb      	ldr	r3, [r7, #24]
 801abf2:	4413      	add	r3, r2
 801abf4:	61fb      	str	r3, [r7, #28]
 801abf6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801abf8:	69fb      	ldr	r3, [r7, #28]
 801abfa:	4053      	eors	r3, r2
 801abfc:	633b      	str	r3, [r7, #48]	@ 0x30
 801abfe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801ac00:	ea4f 5333 	mov.w	r3, r3, ror #20
 801ac04:	633b      	str	r3, [r7, #48]	@ 0x30
 801ac06:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 801ac08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801ac0a:	4413      	add	r3, r2
 801ac0c:	647b      	str	r3, [r7, #68]	@ 0x44
 801ac0e:	69ba      	ldr	r2, [r7, #24]
 801ac10:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801ac12:	4053      	eors	r3, r2
 801ac14:	61bb      	str	r3, [r7, #24]
 801ac16:	69bb      	ldr	r3, [r7, #24]
 801ac18:	ea4f 6333 	mov.w	r3, r3, ror #24
 801ac1c:	61bb      	str	r3, [r7, #24]
 801ac1e:	69fa      	ldr	r2, [r7, #28]
 801ac20:	69bb      	ldr	r3, [r7, #24]
 801ac22:	4413      	add	r3, r2
 801ac24:	61fb      	str	r3, [r7, #28]
 801ac26:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801ac28:	69fb      	ldr	r3, [r7, #28]
 801ac2a:	4053      	eors	r3, r2
 801ac2c:	633b      	str	r3, [r7, #48]	@ 0x30
 801ac2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801ac30:	ea4f 6373 	mov.w	r3, r3, ror #25
 801ac34:	633b      	str	r3, [r7, #48]	@ 0x30
    __Q(2, 7, 8, 13);
 801ac36:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 801ac38:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801ac3a:	4413      	add	r3, r2
 801ac3c:	643b      	str	r3, [r7, #64]	@ 0x40
 801ac3e:	697a      	ldr	r2, [r7, #20]
 801ac40:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801ac42:	4053      	eors	r3, r2
 801ac44:	617b      	str	r3, [r7, #20]
 801ac46:	697b      	ldr	r3, [r7, #20]
 801ac48:	ea4f 4333 	mov.w	r3, r3, ror #16
 801ac4c:	617b      	str	r3, [r7, #20]
 801ac4e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801ac50:	697b      	ldr	r3, [r7, #20]
 801ac52:	4413      	add	r3, r2
 801ac54:	62bb      	str	r3, [r7, #40]	@ 0x28
 801ac56:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801ac58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801ac5a:	4053      	eors	r3, r2
 801ac5c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801ac5e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801ac60:	ea4f 5333 	mov.w	r3, r3, ror #20
 801ac64:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801ac66:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 801ac68:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801ac6a:	4413      	add	r3, r2
 801ac6c:	643b      	str	r3, [r7, #64]	@ 0x40
 801ac6e:	697a      	ldr	r2, [r7, #20]
 801ac70:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801ac72:	4053      	eors	r3, r2
 801ac74:	617b      	str	r3, [r7, #20]
 801ac76:	697b      	ldr	r3, [r7, #20]
 801ac78:	ea4f 6333 	mov.w	r3, r3, ror #24
 801ac7c:	617b      	str	r3, [r7, #20]
 801ac7e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801ac80:	697b      	ldr	r3, [r7, #20]
 801ac82:	4413      	add	r3, r2
 801ac84:	62bb      	str	r3, [r7, #40]	@ 0x28
 801ac86:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801ac88:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801ac8a:	4053      	eors	r3, r2
 801ac8c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801ac8e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801ac90:	ea4f 6373 	mov.w	r3, r3, ror #25
 801ac94:	62fb      	str	r3, [r7, #44]	@ 0x2c
    __Q(3, 4, 9, 14);
 801ac96:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 801ac98:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801ac9a:	4413      	add	r3, r2
 801ac9c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801ac9e:	693a      	ldr	r2, [r7, #16]
 801aca0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801aca2:	4053      	eors	r3, r2
 801aca4:	613b      	str	r3, [r7, #16]
 801aca6:	693b      	ldr	r3, [r7, #16]
 801aca8:	ea4f 4333 	mov.w	r3, r3, ror #16
 801acac:	613b      	str	r3, [r7, #16]
 801acae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801acb0:	693b      	ldr	r3, [r7, #16]
 801acb2:	4413      	add	r3, r2
 801acb4:	627b      	str	r3, [r7, #36]	@ 0x24
 801acb6:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801acb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801acba:	4053      	eors	r3, r2
 801acbc:	63bb      	str	r3, [r7, #56]	@ 0x38
 801acbe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801acc0:	ea4f 5333 	mov.w	r3, r3, ror #20
 801acc4:	63bb      	str	r3, [r7, #56]	@ 0x38
 801acc6:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 801acc8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801acca:	4413      	add	r3, r2
 801accc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801acce:	693a      	ldr	r2, [r7, #16]
 801acd0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801acd2:	4053      	eors	r3, r2
 801acd4:	613b      	str	r3, [r7, #16]
 801acd6:	693b      	ldr	r3, [r7, #16]
 801acd8:	ea4f 6333 	mov.w	r3, r3, ror #24
 801acdc:	613b      	str	r3, [r7, #16]
 801acde:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801ace0:	693b      	ldr	r3, [r7, #16]
 801ace2:	4413      	add	r3, r2
 801ace4:	627b      	str	r3, [r7, #36]	@ 0x24
 801ace6:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801ace8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801acea:	4053      	eors	r3, r2
 801acec:	63bb      	str	r3, [r7, #56]	@ 0x38
 801acee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801acf0:	ea4f 6373 	mov.w	r3, r3, ror #25
 801acf4:	63bb      	str	r3, [r7, #56]	@ 0x38
  for (i = 0; i < 10; i++) {
 801acf6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801acf8:	3301      	adds	r3, #1
 801acfa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 801acfc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801acfe:	2b09      	cmp	r3, #9
 801ad00:	f77f ae79 	ble.w	801a9f6 <core_block+0x8e>
  }

#define __FIN(i) output[i] = start[i] + __t##i;
  TIMES16(__FIN)
 801ad04:	687b      	ldr	r3, [r7, #4]
 801ad06:	681a      	ldr	r2, [r3, #0]
 801ad08:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801ad0a:	441a      	add	r2, r3
 801ad0c:	683b      	ldr	r3, [r7, #0]
 801ad0e:	601a      	str	r2, [r3, #0]
 801ad10:	687b      	ldr	r3, [r7, #4]
 801ad12:	3304      	adds	r3, #4
 801ad14:	6819      	ldr	r1, [r3, #0]
 801ad16:	683b      	ldr	r3, [r7, #0]
 801ad18:	3304      	adds	r3, #4
 801ad1a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 801ad1c:	440a      	add	r2, r1
 801ad1e:	601a      	str	r2, [r3, #0]
 801ad20:	687b      	ldr	r3, [r7, #4]
 801ad22:	3308      	adds	r3, #8
 801ad24:	6819      	ldr	r1, [r3, #0]
 801ad26:	683b      	ldr	r3, [r7, #0]
 801ad28:	3308      	adds	r3, #8
 801ad2a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 801ad2c:	440a      	add	r2, r1
 801ad2e:	601a      	str	r2, [r3, #0]
 801ad30:	687b      	ldr	r3, [r7, #4]
 801ad32:	330c      	adds	r3, #12
 801ad34:	6819      	ldr	r1, [r3, #0]
 801ad36:	683b      	ldr	r3, [r7, #0]
 801ad38:	330c      	adds	r3, #12
 801ad3a:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 801ad3c:	440a      	add	r2, r1
 801ad3e:	601a      	str	r2, [r3, #0]
 801ad40:	687b      	ldr	r3, [r7, #4]
 801ad42:	3310      	adds	r3, #16
 801ad44:	6819      	ldr	r1, [r3, #0]
 801ad46:	683b      	ldr	r3, [r7, #0]
 801ad48:	3310      	adds	r3, #16
 801ad4a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801ad4c:	440a      	add	r2, r1
 801ad4e:	601a      	str	r2, [r3, #0]
 801ad50:	687b      	ldr	r3, [r7, #4]
 801ad52:	3314      	adds	r3, #20
 801ad54:	6819      	ldr	r1, [r3, #0]
 801ad56:	683b      	ldr	r3, [r7, #0]
 801ad58:	3314      	adds	r3, #20
 801ad5a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801ad5c:	440a      	add	r2, r1
 801ad5e:	601a      	str	r2, [r3, #0]
 801ad60:	687b      	ldr	r3, [r7, #4]
 801ad62:	3318      	adds	r3, #24
 801ad64:	6819      	ldr	r1, [r3, #0]
 801ad66:	683b      	ldr	r3, [r7, #0]
 801ad68:	3318      	adds	r3, #24
 801ad6a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801ad6c:	440a      	add	r2, r1
 801ad6e:	601a      	str	r2, [r3, #0]
 801ad70:	687b      	ldr	r3, [r7, #4]
 801ad72:	331c      	adds	r3, #28
 801ad74:	6819      	ldr	r1, [r3, #0]
 801ad76:	683b      	ldr	r3, [r7, #0]
 801ad78:	331c      	adds	r3, #28
 801ad7a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801ad7c:	440a      	add	r2, r1
 801ad7e:	601a      	str	r2, [r3, #0]
 801ad80:	687b      	ldr	r3, [r7, #4]
 801ad82:	3320      	adds	r3, #32
 801ad84:	6819      	ldr	r1, [r3, #0]
 801ad86:	683b      	ldr	r3, [r7, #0]
 801ad88:	3320      	adds	r3, #32
 801ad8a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801ad8c:	440a      	add	r2, r1
 801ad8e:	601a      	str	r2, [r3, #0]
 801ad90:	687b      	ldr	r3, [r7, #4]
 801ad92:	3324      	adds	r3, #36	@ 0x24
 801ad94:	6819      	ldr	r1, [r3, #0]
 801ad96:	683b      	ldr	r3, [r7, #0]
 801ad98:	3324      	adds	r3, #36	@ 0x24
 801ad9a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801ad9c:	440a      	add	r2, r1
 801ad9e:	601a      	str	r2, [r3, #0]
 801ada0:	687b      	ldr	r3, [r7, #4]
 801ada2:	3328      	adds	r3, #40	@ 0x28
 801ada4:	6819      	ldr	r1, [r3, #0]
 801ada6:	683b      	ldr	r3, [r7, #0]
 801ada8:	3328      	adds	r3, #40	@ 0x28
 801adaa:	6a3a      	ldr	r2, [r7, #32]
 801adac:	440a      	add	r2, r1
 801adae:	601a      	str	r2, [r3, #0]
 801adb0:	687b      	ldr	r3, [r7, #4]
 801adb2:	332c      	adds	r3, #44	@ 0x2c
 801adb4:	6819      	ldr	r1, [r3, #0]
 801adb6:	683b      	ldr	r3, [r7, #0]
 801adb8:	332c      	adds	r3, #44	@ 0x2c
 801adba:	69fa      	ldr	r2, [r7, #28]
 801adbc:	440a      	add	r2, r1
 801adbe:	601a      	str	r2, [r3, #0]
 801adc0:	687b      	ldr	r3, [r7, #4]
 801adc2:	3330      	adds	r3, #48	@ 0x30
 801adc4:	6819      	ldr	r1, [r3, #0]
 801adc6:	683b      	ldr	r3, [r7, #0]
 801adc8:	3330      	adds	r3, #48	@ 0x30
 801adca:	69ba      	ldr	r2, [r7, #24]
 801adcc:	440a      	add	r2, r1
 801adce:	601a      	str	r2, [r3, #0]
 801add0:	687b      	ldr	r3, [r7, #4]
 801add2:	3334      	adds	r3, #52	@ 0x34
 801add4:	6819      	ldr	r1, [r3, #0]
 801add6:	683b      	ldr	r3, [r7, #0]
 801add8:	3334      	adds	r3, #52	@ 0x34
 801adda:	697a      	ldr	r2, [r7, #20]
 801addc:	440a      	add	r2, r1
 801adde:	601a      	str	r2, [r3, #0]
 801ade0:	687b      	ldr	r3, [r7, #4]
 801ade2:	3338      	adds	r3, #56	@ 0x38
 801ade4:	6819      	ldr	r1, [r3, #0]
 801ade6:	683b      	ldr	r3, [r7, #0]
 801ade8:	3338      	adds	r3, #56	@ 0x38
 801adea:	693a      	ldr	r2, [r7, #16]
 801adec:	440a      	add	r2, r1
 801adee:	601a      	str	r2, [r3, #0]
 801adf0:	687b      	ldr	r3, [r7, #4]
 801adf2:	333c      	adds	r3, #60	@ 0x3c
 801adf4:	6819      	ldr	r1, [r3, #0]
 801adf6:	683b      	ldr	r3, [r7, #0]
 801adf8:	333c      	adds	r3, #60	@ 0x3c
 801adfa:	68fa      	ldr	r2, [r7, #12]
 801adfc:	440a      	add	r2, r1
 801adfe:	601a      	str	r2, [r3, #0]
}
 801ae00:	bf00      	nop
 801ae02:	3754      	adds	r7, #84	@ 0x54
 801ae04:	46bd      	mov	sp, r7
 801ae06:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ae0a:	4770      	bx	lr

0801ae0c <xor_block>:
  for (i = 0; i < words; i++) {                                   \
    xor32_le(index8_32(dest, i), index8_32(source, i), (pad) + i) \
  }

static void xor_block(uint8_t *restrict dest, const uint8_t *restrict source,
                      const uint32_t *restrict pad, unsigned int chunk_size) {
 801ae0c:	b480      	push	{r7}
 801ae0e:	b089      	sub	sp, #36	@ 0x24
 801ae10:	af00      	add	r7, sp, #0
 801ae12:	60f8      	str	r0, [r7, #12]
 801ae14:	60b9      	str	r1, [r7, #8]
 801ae16:	607a      	str	r2, [r7, #4]
 801ae18:	603b      	str	r3, [r7, #0]
  unsigned int i, full_blocks = chunk_size / (unsigned int) sizeof(uint32_t);
 801ae1a:	683b      	ldr	r3, [r7, #0]
 801ae1c:	089b      	lsrs	r3, r3, #2
 801ae1e:	61bb      	str	r3, [r7, #24]
  // have to be carefull, we are going back from uint32 to uint8, so endianness
  // matters again
  xor32_blocks(dest, source, pad, full_blocks)
 801ae20:	2300      	movs	r3, #0
 801ae22:	61fb      	str	r3, [r7, #28]
 801ae24:	e016      	b.n	801ae54 <xor_block+0x48>
 801ae26:	69fb      	ldr	r3, [r7, #28]
 801ae28:	009b      	lsls	r3, r3, #2
 801ae2a:	68ba      	ldr	r2, [r7, #8]
 801ae2c:	4413      	add	r3, r2
 801ae2e:	681b      	ldr	r3, [r3, #0]
 801ae30:	617b      	str	r3, [r7, #20]
 801ae32:	69fb      	ldr	r3, [r7, #28]
 801ae34:	009b      	lsls	r3, r3, #2
 801ae36:	687a      	ldr	r2, [r7, #4]
 801ae38:	4413      	add	r3, r2
 801ae3a:	681a      	ldr	r2, [r3, #0]
 801ae3c:	697b      	ldr	r3, [r7, #20]
 801ae3e:	4053      	eors	r3, r2
 801ae40:	617b      	str	r3, [r7, #20]
 801ae42:	69fb      	ldr	r3, [r7, #28]
 801ae44:	009b      	lsls	r3, r3, #2
 801ae46:	68fa      	ldr	r2, [r7, #12]
 801ae48:	4413      	add	r3, r2
 801ae4a:	697a      	ldr	r2, [r7, #20]
 801ae4c:	601a      	str	r2, [r3, #0]
 801ae4e:	69fb      	ldr	r3, [r7, #28]
 801ae50:	3301      	adds	r3, #1
 801ae52:	61fb      	str	r3, [r7, #28]
 801ae54:	69fa      	ldr	r2, [r7, #28]
 801ae56:	69bb      	ldr	r3, [r7, #24]
 801ae58:	429a      	cmp	r2, r3
 801ae5a:	d3e4      	bcc.n	801ae26 <xor_block+0x1a>

      dest += full_blocks * sizeof(uint32_t);
 801ae5c:	69bb      	ldr	r3, [r7, #24]
 801ae5e:	009b      	lsls	r3, r3, #2
 801ae60:	68fa      	ldr	r2, [r7, #12]
 801ae62:	4413      	add	r3, r2
 801ae64:	60fb      	str	r3, [r7, #12]
  source += full_blocks * sizeof(uint32_t);
 801ae66:	69bb      	ldr	r3, [r7, #24]
 801ae68:	009b      	lsls	r3, r3, #2
 801ae6a:	68ba      	ldr	r2, [r7, #8]
 801ae6c:	4413      	add	r3, r2
 801ae6e:	60bb      	str	r3, [r7, #8]
  pad += full_blocks;
 801ae70:	69bb      	ldr	r3, [r7, #24]
 801ae72:	009b      	lsls	r3, r3, #2
 801ae74:	687a      	ldr	r2, [r7, #4]
 801ae76:	4413      	add	r3, r2
 801ae78:	607b      	str	r3, [r7, #4]

  switch (chunk_size % sizeof(uint32_t)) {
 801ae7a:	683b      	ldr	r3, [r7, #0]
 801ae7c:	f003 0303 	and.w	r3, r3, #3
 801ae80:	2b03      	cmp	r3, #3
 801ae82:	d026      	beq.n	801aed2 <xor_block+0xc6>
 801ae84:	2b03      	cmp	r3, #3
 801ae86:	d846      	bhi.n	801af16 <xor_block+0x10a>
 801ae88:	2b01      	cmp	r3, #1
 801ae8a:	d002      	beq.n	801ae92 <xor_block+0x86>
 801ae8c:	2b02      	cmp	r3, #2
 801ae8e:	d00a      	beq.n	801aea6 <xor_block+0x9a>
      dest[0] = source[0] ^ U8(*pad);
      dest[1] = source[1] ^ U8(*pad >> 8);
      dest[2] = source[2] ^ U8(*pad >> 16);
      break;
  }
}
 801ae90:	e041      	b.n	801af16 <xor_block+0x10a>
      dest[0] = source[0] ^ U8(*pad);
 801ae92:	68bb      	ldr	r3, [r7, #8]
 801ae94:	781a      	ldrb	r2, [r3, #0]
 801ae96:	687b      	ldr	r3, [r7, #4]
 801ae98:	681b      	ldr	r3, [r3, #0]
 801ae9a:	b2db      	uxtb	r3, r3
 801ae9c:	4053      	eors	r3, r2
 801ae9e:	b2da      	uxtb	r2, r3
 801aea0:	68fb      	ldr	r3, [r7, #12]
 801aea2:	701a      	strb	r2, [r3, #0]
      break;
 801aea4:	e037      	b.n	801af16 <xor_block+0x10a>
      dest[0] = source[0] ^ U8(*pad);
 801aea6:	68bb      	ldr	r3, [r7, #8]
 801aea8:	781a      	ldrb	r2, [r3, #0]
 801aeaa:	687b      	ldr	r3, [r7, #4]
 801aeac:	681b      	ldr	r3, [r3, #0]
 801aeae:	b2db      	uxtb	r3, r3
 801aeb0:	4053      	eors	r3, r2
 801aeb2:	b2da      	uxtb	r2, r3
 801aeb4:	68fb      	ldr	r3, [r7, #12]
 801aeb6:	701a      	strb	r2, [r3, #0]
      dest[1] = source[1] ^ U8(*pad >> 8);
 801aeb8:	68bb      	ldr	r3, [r7, #8]
 801aeba:	3301      	adds	r3, #1
 801aebc:	7819      	ldrb	r1, [r3, #0]
 801aebe:	687b      	ldr	r3, [r7, #4]
 801aec0:	681b      	ldr	r3, [r3, #0]
 801aec2:	0a1b      	lsrs	r3, r3, #8
 801aec4:	b2da      	uxtb	r2, r3
 801aec6:	68fb      	ldr	r3, [r7, #12]
 801aec8:	3301      	adds	r3, #1
 801aeca:	404a      	eors	r2, r1
 801aecc:	b2d2      	uxtb	r2, r2
 801aece:	701a      	strb	r2, [r3, #0]
      break;
 801aed0:	e021      	b.n	801af16 <xor_block+0x10a>
      dest[0] = source[0] ^ U8(*pad);
 801aed2:	68bb      	ldr	r3, [r7, #8]
 801aed4:	781a      	ldrb	r2, [r3, #0]
 801aed6:	687b      	ldr	r3, [r7, #4]
 801aed8:	681b      	ldr	r3, [r3, #0]
 801aeda:	b2db      	uxtb	r3, r3
 801aedc:	4053      	eors	r3, r2
 801aede:	b2da      	uxtb	r2, r3
 801aee0:	68fb      	ldr	r3, [r7, #12]
 801aee2:	701a      	strb	r2, [r3, #0]
      dest[1] = source[1] ^ U8(*pad >> 8);
 801aee4:	68bb      	ldr	r3, [r7, #8]
 801aee6:	3301      	adds	r3, #1
 801aee8:	7819      	ldrb	r1, [r3, #0]
 801aeea:	687b      	ldr	r3, [r7, #4]
 801aeec:	681b      	ldr	r3, [r3, #0]
 801aeee:	0a1b      	lsrs	r3, r3, #8
 801aef0:	b2da      	uxtb	r2, r3
 801aef2:	68fb      	ldr	r3, [r7, #12]
 801aef4:	3301      	adds	r3, #1
 801aef6:	404a      	eors	r2, r1
 801aef8:	b2d2      	uxtb	r2, r2
 801aefa:	701a      	strb	r2, [r3, #0]
      dest[2] = source[2] ^ U8(*pad >> 16);
 801aefc:	68bb      	ldr	r3, [r7, #8]
 801aefe:	3302      	adds	r3, #2
 801af00:	7819      	ldrb	r1, [r3, #0]
 801af02:	687b      	ldr	r3, [r7, #4]
 801af04:	681b      	ldr	r3, [r3, #0]
 801af06:	0c1b      	lsrs	r3, r3, #16
 801af08:	b2da      	uxtb	r2, r3
 801af0a:	68fb      	ldr	r3, [r7, #12]
 801af0c:	3302      	adds	r3, #2
 801af0e:	404a      	eors	r2, r1
 801af10:	b2d2      	uxtb	r2, r2
 801af12:	701a      	strb	r2, [r3, #0]
      break;
 801af14:	bf00      	nop
}
 801af16:	bf00      	nop
 801af18:	3724      	adds	r7, #36	@ 0x24
 801af1a:	46bd      	mov	sp, r7
 801af1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801af20:	4770      	bx	lr

0801af22 <chacha20_xor_stream>:

static void chacha20_xor_stream(uint8_t *restrict dest,
                                const uint8_t *restrict source, size_t length,
                                const uint8_t key[CHACHA20_KEY_SIZE],
                                const uint8_t nonce[CHACHA20_NONCE_SIZE],
                                uint32_t counter) {
 801af22:	b580      	push	{r7, lr}
 801af24:	b0aa      	sub	sp, #168	@ 0xa8
 801af26:	af00      	add	r7, sp, #0
 801af28:	60f8      	str	r0, [r7, #12]
 801af2a:	60b9      	str	r1, [r7, #8]
 801af2c:	607a      	str	r2, [r7, #4]
 801af2e:	603b      	str	r3, [r7, #0]
  uint32_t state[CHACHA20_STATE_WORDS];
  uint32_t pad[CHACHA20_STATE_WORDS];
  size_t i, b, last_block, full_blocks = length / CHACHA20_BLOCK_SIZE;
 801af30:	687b      	ldr	r3, [r7, #4]
 801af32:	099b      	lsrs	r3, r3, #6
 801af34:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  initialize_state(state, key, nonce, counter);
 801af38:	f107 0058 	add.w	r0, r7, #88	@ 0x58
 801af3c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 801af40:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 801af44:	6839      	ldr	r1, [r7, #0]
 801af46:	f7ff fca7 	bl	801a898 <initialize_state>
  for (b = 0; b < full_blocks; b++) {
 801af4a:	2300      	movs	r3, #0
 801af4c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 801af50:	e03c      	b.n	801afcc <chacha20_xor_stream+0xaa>
    core_block(state, pad);
 801af52:	f107 0218 	add.w	r2, r7, #24
 801af56:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 801af5a:	4611      	mov	r1, r2
 801af5c:	4618      	mov	r0, r3
 801af5e:	f7ff fd03 	bl	801a968 <core_block>
    increment_counter(state);
 801af62:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 801af66:	3301      	adds	r3, #1
 801af68:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    xor32_blocks(dest, source, pad, CHACHA20_STATE_WORDS) dest +=
 801af6c:	2300      	movs	r3, #0
 801af6e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 801af72:	e01c      	b.n	801afae <chacha20_xor_stream+0x8c>
 801af74:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 801af78:	009b      	lsls	r3, r3, #2
 801af7a:	68ba      	ldr	r2, [r7, #8]
 801af7c:	4413      	add	r3, r2
 801af7e:	681b      	ldr	r3, [r3, #0]
 801af80:	617b      	str	r3, [r7, #20]
 801af82:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 801af86:	009b      	lsls	r3, r3, #2
 801af88:	f107 0218 	add.w	r2, r7, #24
 801af8c:	4413      	add	r3, r2
 801af8e:	681a      	ldr	r2, [r3, #0]
 801af90:	697b      	ldr	r3, [r7, #20]
 801af92:	4053      	eors	r3, r2
 801af94:	617b      	str	r3, [r7, #20]
 801af96:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 801af9a:	009b      	lsls	r3, r3, #2
 801af9c:	68fa      	ldr	r2, [r7, #12]
 801af9e:	4413      	add	r3, r2
 801afa0:	697a      	ldr	r2, [r7, #20]
 801afa2:	601a      	str	r2, [r3, #0]
 801afa4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 801afa8:	3301      	adds	r3, #1
 801afaa:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 801afae:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 801afb2:	2b0f      	cmp	r3, #15
 801afb4:	d9de      	bls.n	801af74 <chacha20_xor_stream+0x52>
 801afb6:	68fb      	ldr	r3, [r7, #12]
 801afb8:	3340      	adds	r3, #64	@ 0x40
 801afba:	60fb      	str	r3, [r7, #12]
        CHACHA20_BLOCK_SIZE;
    source += CHACHA20_BLOCK_SIZE;
 801afbc:	68bb      	ldr	r3, [r7, #8]
 801afbe:	3340      	adds	r3, #64	@ 0x40
 801afc0:	60bb      	str	r3, [r7, #8]
  for (b = 0; b < full_blocks; b++) {
 801afc2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 801afc6:	3301      	adds	r3, #1
 801afc8:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 801afcc:	f8d7 20a0 	ldr.w	r2, [r7, #160]	@ 0xa0
 801afd0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 801afd4:	429a      	cmp	r2, r3
 801afd6:	d3bc      	bcc.n	801af52 <chacha20_xor_stream+0x30>
  }
  last_block = length % CHACHA20_BLOCK_SIZE;
 801afd8:	687b      	ldr	r3, [r7, #4]
 801afda:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801afde:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (last_block > 0) {
 801afe2:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 801afe6:	2b00      	cmp	r3, #0
 801afe8:	d00f      	beq.n	801b00a <chacha20_xor_stream+0xe8>
    core_block(state, pad);
 801afea:	f107 0218 	add.w	r2, r7, #24
 801afee:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 801aff2:	4611      	mov	r1, r2
 801aff4:	4618      	mov	r0, r3
 801aff6:	f7ff fcb7 	bl	801a968 <core_block>
    xor_block(dest, source, pad, (unsigned int) last_block);
 801affa:	f107 0218 	add.w	r2, r7, #24
 801affe:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 801b002:	68b9      	ldr	r1, [r7, #8]
 801b004:	68f8      	ldr	r0, [r7, #12]
 801b006:	f7ff ff01 	bl	801ae0c <xor_block>
  }
}
 801b00a:	bf00      	nop
 801b00c:	37a8      	adds	r7, #168	@ 0xa8
 801b00e:	46bd      	mov	sp, r7
 801b010:	bd80      	pop	{r7, pc}

0801b012 <rfc8439_keygen>:
  }
#endif

static void rfc8439_keygen(uint8_t poly_key[32],
                           const uint8_t key[CHACHA20_KEY_SIZE],
                           const uint8_t nonce[CHACHA20_NONCE_SIZE]) {
 801b012:	b580      	push	{r7, lr}
 801b014:	b0a4      	sub	sp, #144	@ 0x90
 801b016:	af00      	add	r7, sp, #0
 801b018:	60f8      	str	r0, [r7, #12]
 801b01a:	60b9      	str	r1, [r7, #8]
 801b01c:	607a      	str	r2, [r7, #4]
  uint32_t state[CHACHA20_STATE_WORDS];
  uint32_t result[CHACHA20_STATE_WORDS];
  size_t i;
  initialize_state(state, key, nonce, 0);
 801b01e:	f107 0050 	add.w	r0, r7, #80	@ 0x50
 801b022:	2300      	movs	r3, #0
 801b024:	687a      	ldr	r2, [r7, #4]
 801b026:	68b9      	ldr	r1, [r7, #8]
 801b028:	f7ff fc36 	bl	801a898 <initialize_state>
  core_block(state, result);
 801b02c:	f107 0210 	add.w	r2, r7, #16
 801b030:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 801b034:	4611      	mov	r1, r2
 801b036:	4618      	mov	r0, r3
 801b038:	f7ff fc96 	bl	801a968 <core_block>
  serialize(poly_key, result);
 801b03c:	f107 0310 	add.w	r3, r7, #16
 801b040:	2220      	movs	r2, #32
 801b042:	4619      	mov	r1, r3
 801b044:	68f8      	ldr	r0, [r7, #12]
 801b046:	f009 fb9e 	bl	8024786 <memcpy>
  (void) i;
}
 801b04a:	bf00      	nop
 801b04c:	3790      	adds	r7, #144	@ 0x90
 801b04e:	46bd      	mov	sp, r7
 801b050:	bd80      	pop	{r7, pc}

0801b052 <U8TO32>:
  unsigned char final;
} poly1305_state_internal_t;

/* interpret four 8 bit unsigned integers as a 32 bit unsigned integer in little
 * endian */
static unsigned long U8TO32(const unsigned char *p) {
 801b052:	b480      	push	{r7}
 801b054:	b083      	sub	sp, #12
 801b056:	af00      	add	r7, sp, #0
 801b058:	6078      	str	r0, [r7, #4]
  return (((unsigned long) (p[0] & 0xff)) |
 801b05a:	687b      	ldr	r3, [r7, #4]
 801b05c:	781b      	ldrb	r3, [r3, #0]
 801b05e:	461a      	mov	r2, r3
          ((unsigned long) (p[1] & 0xff) << 8) |
 801b060:	687b      	ldr	r3, [r7, #4]
 801b062:	3301      	adds	r3, #1
 801b064:	781b      	ldrb	r3, [r3, #0]
 801b066:	021b      	lsls	r3, r3, #8
  return (((unsigned long) (p[0] & 0xff)) |
 801b068:	431a      	orrs	r2, r3
          ((unsigned long) (p[2] & 0xff) << 16) |
 801b06a:	687b      	ldr	r3, [r7, #4]
 801b06c:	3302      	adds	r3, #2
 801b06e:	781b      	ldrb	r3, [r3, #0]
 801b070:	041b      	lsls	r3, r3, #16
          ((unsigned long) (p[1] & 0xff) << 8) |
 801b072:	431a      	orrs	r2, r3
          ((unsigned long) (p[3] & 0xff) << 24));
 801b074:	687b      	ldr	r3, [r7, #4]
 801b076:	3303      	adds	r3, #3
 801b078:	781b      	ldrb	r3, [r3, #0]
 801b07a:	061b      	lsls	r3, r3, #24
          ((unsigned long) (p[2] & 0xff) << 16) |
 801b07c:	4313      	orrs	r3, r2
}
 801b07e:	4618      	mov	r0, r3
 801b080:	370c      	adds	r7, #12
 801b082:	46bd      	mov	sp, r7
 801b084:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b088:	4770      	bx	lr

0801b08a <U32TO8>:

/* store a 32 bit unsigned integer as four 8 bit unsigned integers in little
 * endian */
static void U32TO8(unsigned char *p, unsigned long v) {
 801b08a:	b480      	push	{r7}
 801b08c:	b083      	sub	sp, #12
 801b08e:	af00      	add	r7, sp, #0
 801b090:	6078      	str	r0, [r7, #4]
 801b092:	6039      	str	r1, [r7, #0]
  p[0] = (unsigned char) ((v) &0xff);
 801b094:	683b      	ldr	r3, [r7, #0]
 801b096:	b2da      	uxtb	r2, r3
 801b098:	687b      	ldr	r3, [r7, #4]
 801b09a:	701a      	strb	r2, [r3, #0]
  p[1] = (unsigned char) ((v >> 8) & 0xff);
 801b09c:	683b      	ldr	r3, [r7, #0]
 801b09e:	0a1a      	lsrs	r2, r3, #8
 801b0a0:	687b      	ldr	r3, [r7, #4]
 801b0a2:	3301      	adds	r3, #1
 801b0a4:	b2d2      	uxtb	r2, r2
 801b0a6:	701a      	strb	r2, [r3, #0]
  p[2] = (unsigned char) ((v >> 16) & 0xff);
 801b0a8:	683b      	ldr	r3, [r7, #0]
 801b0aa:	0c1a      	lsrs	r2, r3, #16
 801b0ac:	687b      	ldr	r3, [r7, #4]
 801b0ae:	3302      	adds	r3, #2
 801b0b0:	b2d2      	uxtb	r2, r2
 801b0b2:	701a      	strb	r2, [r3, #0]
  p[3] = (unsigned char) ((v >> 24) & 0xff);
 801b0b4:	683b      	ldr	r3, [r7, #0]
 801b0b6:	0e1a      	lsrs	r2, r3, #24
 801b0b8:	687b      	ldr	r3, [r7, #4]
 801b0ba:	3303      	adds	r3, #3
 801b0bc:	b2d2      	uxtb	r2, r2
 801b0be:	701a      	strb	r2, [r3, #0]
}
 801b0c0:	bf00      	nop
 801b0c2:	370c      	adds	r7, #12
 801b0c4:	46bd      	mov	sp, r7
 801b0c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b0ca:	4770      	bx	lr

0801b0cc <poly1305_init>:

static void poly1305_init(poly1305_context *ctx, const unsigned char key[32]) {
 801b0cc:	b580      	push	{r7, lr}
 801b0ce:	b084      	sub	sp, #16
 801b0d0:	af00      	add	r7, sp, #0
 801b0d2:	6078      	str	r0, [r7, #4]
 801b0d4:	6039      	str	r1, [r7, #0]
  poly1305_state_internal_t *st = (poly1305_state_internal_t *) ctx;
 801b0d6:	687b      	ldr	r3, [r7, #4]
 801b0d8:	60fb      	str	r3, [r7, #12]

  /* r &= 0xffffffc0ffffffc0ffffffc0fffffff */
  st->r[0] = (U8TO32(&key[0])) & 0x3ffffff;
 801b0da:	6838      	ldr	r0, [r7, #0]
 801b0dc:	f7ff ffb9 	bl	801b052 <U8TO32>
 801b0e0:	4603      	mov	r3, r0
 801b0e2:	f023 427c 	bic.w	r2, r3, #4227858432	@ 0xfc000000
 801b0e6:	68fb      	ldr	r3, [r7, #12]
 801b0e8:	601a      	str	r2, [r3, #0]
  st->r[1] = (U8TO32(&key[3]) >> 2) & 0x3ffff03;
 801b0ea:	683b      	ldr	r3, [r7, #0]
 801b0ec:	3303      	adds	r3, #3
 801b0ee:	4618      	mov	r0, r3
 801b0f0:	f7ff ffaf 	bl	801b052 <U8TO32>
 801b0f4:	4603      	mov	r3, r0
 801b0f6:	089a      	lsrs	r2, r3, #2
 801b0f8:	4b2f      	ldr	r3, [pc, #188]	@ (801b1b8 <poly1305_init+0xec>)
 801b0fa:	4013      	ands	r3, r2
 801b0fc:	68fa      	ldr	r2, [r7, #12]
 801b0fe:	6053      	str	r3, [r2, #4]
  st->r[2] = (U8TO32(&key[6]) >> 4) & 0x3ffc0ff;
 801b100:	683b      	ldr	r3, [r7, #0]
 801b102:	3306      	adds	r3, #6
 801b104:	4618      	mov	r0, r3
 801b106:	f7ff ffa4 	bl	801b052 <U8TO32>
 801b10a:	4603      	mov	r3, r0
 801b10c:	091a      	lsrs	r2, r3, #4
 801b10e:	4b2b      	ldr	r3, [pc, #172]	@ (801b1bc <poly1305_init+0xf0>)
 801b110:	4013      	ands	r3, r2
 801b112:	68fa      	ldr	r2, [r7, #12]
 801b114:	6093      	str	r3, [r2, #8]
  st->r[3] = (U8TO32(&key[9]) >> 6) & 0x3f03fff;
 801b116:	683b      	ldr	r3, [r7, #0]
 801b118:	3309      	adds	r3, #9
 801b11a:	4618      	mov	r0, r3
 801b11c:	f7ff ff99 	bl	801b052 <U8TO32>
 801b120:	4603      	mov	r3, r0
 801b122:	099a      	lsrs	r2, r3, #6
 801b124:	4b26      	ldr	r3, [pc, #152]	@ (801b1c0 <poly1305_init+0xf4>)
 801b126:	4013      	ands	r3, r2
 801b128:	68fa      	ldr	r2, [r7, #12]
 801b12a:	60d3      	str	r3, [r2, #12]
  st->r[4] = (U8TO32(&key[12]) >> 8) & 0x00fffff;
 801b12c:	683b      	ldr	r3, [r7, #0]
 801b12e:	330c      	adds	r3, #12
 801b130:	4618      	mov	r0, r3
 801b132:	f7ff ff8e 	bl	801b052 <U8TO32>
 801b136:	4603      	mov	r3, r0
 801b138:	0a1b      	lsrs	r3, r3, #8
 801b13a:	f3c3 0213 	ubfx	r2, r3, #0, #20
 801b13e:	68fb      	ldr	r3, [r7, #12]
 801b140:	611a      	str	r2, [r3, #16]

  /* h = 0 */
  st->h[0] = 0;
 801b142:	68fb      	ldr	r3, [r7, #12]
 801b144:	2200      	movs	r2, #0
 801b146:	615a      	str	r2, [r3, #20]
  st->h[1] = 0;
 801b148:	68fb      	ldr	r3, [r7, #12]
 801b14a:	2200      	movs	r2, #0
 801b14c:	619a      	str	r2, [r3, #24]
  st->h[2] = 0;
 801b14e:	68fb      	ldr	r3, [r7, #12]
 801b150:	2200      	movs	r2, #0
 801b152:	61da      	str	r2, [r3, #28]
  st->h[3] = 0;
 801b154:	68fb      	ldr	r3, [r7, #12]
 801b156:	2200      	movs	r2, #0
 801b158:	621a      	str	r2, [r3, #32]
  st->h[4] = 0;
 801b15a:	68fb      	ldr	r3, [r7, #12]
 801b15c:	2200      	movs	r2, #0
 801b15e:	625a      	str	r2, [r3, #36]	@ 0x24

  /* save pad for later */
  st->pad[0] = U8TO32(&key[16]);
 801b160:	683b      	ldr	r3, [r7, #0]
 801b162:	3310      	adds	r3, #16
 801b164:	4618      	mov	r0, r3
 801b166:	f7ff ff74 	bl	801b052 <U8TO32>
 801b16a:	4602      	mov	r2, r0
 801b16c:	68fb      	ldr	r3, [r7, #12]
 801b16e:	629a      	str	r2, [r3, #40]	@ 0x28
  st->pad[1] = U8TO32(&key[20]);
 801b170:	683b      	ldr	r3, [r7, #0]
 801b172:	3314      	adds	r3, #20
 801b174:	4618      	mov	r0, r3
 801b176:	f7ff ff6c 	bl	801b052 <U8TO32>
 801b17a:	4602      	mov	r2, r0
 801b17c:	68fb      	ldr	r3, [r7, #12]
 801b17e:	62da      	str	r2, [r3, #44]	@ 0x2c
  st->pad[2] = U8TO32(&key[24]);
 801b180:	683b      	ldr	r3, [r7, #0]
 801b182:	3318      	adds	r3, #24
 801b184:	4618      	mov	r0, r3
 801b186:	f7ff ff64 	bl	801b052 <U8TO32>
 801b18a:	4602      	mov	r2, r0
 801b18c:	68fb      	ldr	r3, [r7, #12]
 801b18e:	631a      	str	r2, [r3, #48]	@ 0x30
  st->pad[3] = U8TO32(&key[28]);
 801b190:	683b      	ldr	r3, [r7, #0]
 801b192:	331c      	adds	r3, #28
 801b194:	4618      	mov	r0, r3
 801b196:	f7ff ff5c 	bl	801b052 <U8TO32>
 801b19a:	4602      	mov	r2, r0
 801b19c:	68fb      	ldr	r3, [r7, #12]
 801b19e:	635a      	str	r2, [r3, #52]	@ 0x34

  st->leftover = 0;
 801b1a0:	68fb      	ldr	r3, [r7, #12]
 801b1a2:	2200      	movs	r2, #0
 801b1a4:	639a      	str	r2, [r3, #56]	@ 0x38
  st->final = 0;
 801b1a6:	68fb      	ldr	r3, [r7, #12]
 801b1a8:	2200      	movs	r2, #0
 801b1aa:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
}
 801b1ae:	bf00      	nop
 801b1b0:	3710      	adds	r7, #16
 801b1b2:	46bd      	mov	sp, r7
 801b1b4:	bd80      	pop	{r7, pc}
 801b1b6:	bf00      	nop
 801b1b8:	03ffff03 	.word	0x03ffff03
 801b1bc:	03ffc0ff 	.word	0x03ffc0ff
 801b1c0:	03f03fff 	.word	0x03f03fff

0801b1c4 <poly1305_blocks>:

static void poly1305_blocks(poly1305_state_internal_t *st,
                            const unsigned char *m, size_t bytes) {
 801b1c4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 801b1c8:	f5ad 7d68 	sub.w	sp, sp, #928	@ 0x3a0
 801b1cc:	af00      	add	r7, sp, #0
 801b1ce:	f8c7 032c 	str.w	r0, [r7, #812]	@ 0x32c
 801b1d2:	f8c7 1328 	str.w	r1, [r7, #808]	@ 0x328
 801b1d6:	f8c7 2324 	str.w	r2, [r7, #804]	@ 0x324
  const unsigned long hibit = (st->final) ? 0 : (1UL << 24); /* 1 << 128 */
 801b1da:	f8d7 332c 	ldr.w	r3, [r7, #812]	@ 0x32c
 801b1de:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 801b1e2:	2b00      	cmp	r3, #0
 801b1e4:	d001      	beq.n	801b1ea <poly1305_blocks+0x26>
 801b1e6:	2300      	movs	r3, #0
 801b1e8:	e001      	b.n	801b1ee <poly1305_blocks+0x2a>
 801b1ea:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 801b1ee:	f8c7 3388 	str.w	r3, [r7, #904]	@ 0x388
  unsigned long s1, s2, s3, s4;
  unsigned long h0, h1, h2, h3, h4;
  uint64_t d0, d1, d2, d3, d4;
  unsigned long c;

  r0 = st->r[0];
 801b1f2:	f8d7 332c 	ldr.w	r3, [r7, #812]	@ 0x32c
 801b1f6:	681b      	ldr	r3, [r3, #0]
 801b1f8:	f8c7 3384 	str.w	r3, [r7, #900]	@ 0x384
  r1 = st->r[1];
 801b1fc:	f8d7 332c 	ldr.w	r3, [r7, #812]	@ 0x32c
 801b200:	685b      	ldr	r3, [r3, #4]
 801b202:	f8c7 3380 	str.w	r3, [r7, #896]	@ 0x380
  r2 = st->r[2];
 801b206:	f8d7 332c 	ldr.w	r3, [r7, #812]	@ 0x32c
 801b20a:	689b      	ldr	r3, [r3, #8]
 801b20c:	f8c7 337c 	str.w	r3, [r7, #892]	@ 0x37c
  r3 = st->r[3];
 801b210:	f8d7 332c 	ldr.w	r3, [r7, #812]	@ 0x32c
 801b214:	68db      	ldr	r3, [r3, #12]
 801b216:	f8c7 3378 	str.w	r3, [r7, #888]	@ 0x378
  r4 = st->r[4];
 801b21a:	f8d7 332c 	ldr.w	r3, [r7, #812]	@ 0x32c
 801b21e:	691b      	ldr	r3, [r3, #16]
 801b220:	f8c7 3374 	str.w	r3, [r7, #884]	@ 0x374

  s1 = r1 * 5;
 801b224:	f8d7 2380 	ldr.w	r2, [r7, #896]	@ 0x380
 801b228:	4613      	mov	r3, r2
 801b22a:	009b      	lsls	r3, r3, #2
 801b22c:	4413      	add	r3, r2
 801b22e:	f8c7 3370 	str.w	r3, [r7, #880]	@ 0x370
  s2 = r2 * 5;
 801b232:	f8d7 237c 	ldr.w	r2, [r7, #892]	@ 0x37c
 801b236:	4613      	mov	r3, r2
 801b238:	009b      	lsls	r3, r3, #2
 801b23a:	4413      	add	r3, r2
 801b23c:	f8c7 336c 	str.w	r3, [r7, #876]	@ 0x36c
  s3 = r3 * 5;
 801b240:	f8d7 2378 	ldr.w	r2, [r7, #888]	@ 0x378
 801b244:	4613      	mov	r3, r2
 801b246:	009b      	lsls	r3, r3, #2
 801b248:	4413      	add	r3, r2
 801b24a:	f8c7 3368 	str.w	r3, [r7, #872]	@ 0x368
  s4 = r4 * 5;
 801b24e:	f8d7 2374 	ldr.w	r2, [r7, #884]	@ 0x374
 801b252:	4613      	mov	r3, r2
 801b254:	009b      	lsls	r3, r3, #2
 801b256:	4413      	add	r3, r2
 801b258:	f8c7 3364 	str.w	r3, [r7, #868]	@ 0x364

  h0 = st->h[0];
 801b25c:	f8d7 332c 	ldr.w	r3, [r7, #812]	@ 0x32c
 801b260:	695b      	ldr	r3, [r3, #20]
 801b262:	f8c7 339c 	str.w	r3, [r7, #924]	@ 0x39c
  h1 = st->h[1];
 801b266:	f8d7 332c 	ldr.w	r3, [r7, #812]	@ 0x32c
 801b26a:	699b      	ldr	r3, [r3, #24]
 801b26c:	f8c7 3398 	str.w	r3, [r7, #920]	@ 0x398
  h2 = st->h[2];
 801b270:	f8d7 332c 	ldr.w	r3, [r7, #812]	@ 0x32c
 801b274:	69db      	ldr	r3, [r3, #28]
 801b276:	f8c7 3394 	str.w	r3, [r7, #916]	@ 0x394
  h3 = st->h[3];
 801b27a:	f8d7 332c 	ldr.w	r3, [r7, #812]	@ 0x32c
 801b27e:	6a1b      	ldr	r3, [r3, #32]
 801b280:	f8c7 3390 	str.w	r3, [r7, #912]	@ 0x390
  h4 = st->h[4];
 801b284:	f8d7 332c 	ldr.w	r3, [r7, #812]	@ 0x32c
 801b288:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801b28a:	f8c7 338c 	str.w	r3, [r7, #908]	@ 0x38c

  while (bytes >= poly1305_block_size) {
 801b28e:	f000 be78 	b.w	801bf82 <poly1305_blocks+0xdbe>
    /* h += m[i] */
    h0 += (U8TO32(m + 0)) & 0x3ffffff;
 801b292:	f8d7 0328 	ldr.w	r0, [r7, #808]	@ 0x328
 801b296:	f7ff fedc 	bl	801b052 <U8TO32>
 801b29a:	4603      	mov	r3, r0
 801b29c:	f023 427c 	bic.w	r2, r3, #4227858432	@ 0xfc000000
 801b2a0:	f8d7 339c 	ldr.w	r3, [r7, #924]	@ 0x39c
 801b2a4:	4413      	add	r3, r2
 801b2a6:	f8c7 339c 	str.w	r3, [r7, #924]	@ 0x39c
    h1 += (U8TO32(m + 3) >> 2) & 0x3ffffff;
 801b2aa:	f8d7 3328 	ldr.w	r3, [r7, #808]	@ 0x328
 801b2ae:	3303      	adds	r3, #3
 801b2b0:	4618      	mov	r0, r3
 801b2b2:	f7ff fece 	bl	801b052 <U8TO32>
 801b2b6:	4603      	mov	r3, r0
 801b2b8:	089b      	lsrs	r3, r3, #2
 801b2ba:	f023 427c 	bic.w	r2, r3, #4227858432	@ 0xfc000000
 801b2be:	f8d7 3398 	ldr.w	r3, [r7, #920]	@ 0x398
 801b2c2:	4413      	add	r3, r2
 801b2c4:	f8c7 3398 	str.w	r3, [r7, #920]	@ 0x398
    h2 += (U8TO32(m + 6) >> 4) & 0x3ffffff;
 801b2c8:	f8d7 3328 	ldr.w	r3, [r7, #808]	@ 0x328
 801b2cc:	3306      	adds	r3, #6
 801b2ce:	4618      	mov	r0, r3
 801b2d0:	f7ff febf 	bl	801b052 <U8TO32>
 801b2d4:	4603      	mov	r3, r0
 801b2d6:	091b      	lsrs	r3, r3, #4
 801b2d8:	f023 427c 	bic.w	r2, r3, #4227858432	@ 0xfc000000
 801b2dc:	f8d7 3394 	ldr.w	r3, [r7, #916]	@ 0x394
 801b2e0:	4413      	add	r3, r2
 801b2e2:	f8c7 3394 	str.w	r3, [r7, #916]	@ 0x394
    h3 += (U8TO32(m + 9) >> 6) & 0x3ffffff;
 801b2e6:	f8d7 3328 	ldr.w	r3, [r7, #808]	@ 0x328
 801b2ea:	3309      	adds	r3, #9
 801b2ec:	4618      	mov	r0, r3
 801b2ee:	f7ff feb0 	bl	801b052 <U8TO32>
 801b2f2:	4603      	mov	r3, r0
 801b2f4:	099b      	lsrs	r3, r3, #6
 801b2f6:	f023 427c 	bic.w	r2, r3, #4227858432	@ 0xfc000000
 801b2fa:	f8d7 3390 	ldr.w	r3, [r7, #912]	@ 0x390
 801b2fe:	4413      	add	r3, r2
 801b300:	f8c7 3390 	str.w	r3, [r7, #912]	@ 0x390
    h4 += (U8TO32(m + 12) >> 8) | hibit;
 801b304:	f8d7 3328 	ldr.w	r3, [r7, #808]	@ 0x328
 801b308:	330c      	adds	r3, #12
 801b30a:	4618      	mov	r0, r3
 801b30c:	f7ff fea1 	bl	801b052 <U8TO32>
 801b310:	4603      	mov	r3, r0
 801b312:	0a1a      	lsrs	r2, r3, #8
 801b314:	f8d7 3388 	ldr.w	r3, [r7, #904]	@ 0x388
 801b318:	431a      	orrs	r2, r3
 801b31a:	f8d7 338c 	ldr.w	r3, [r7, #908]	@ 0x38c
 801b31e:	4413      	add	r3, r2
 801b320:	f8c7 338c 	str.w	r3, [r7, #908]	@ 0x38c

    /* h *= r */
    d0 = ((uint64_t) h0 * r0) + ((uint64_t) h1 * s4) + ((uint64_t) h2 * s3) +
 801b324:	f8d7 339c 	ldr.w	r3, [r7, #924]	@ 0x39c
 801b328:	2200      	movs	r2, #0
 801b32a:	f8c7 32e0 	str.w	r3, [r7, #736]	@ 0x2e0
 801b32e:	f8c7 22e4 	str.w	r2, [r7, #740]	@ 0x2e4
 801b332:	f8d7 3384 	ldr.w	r3, [r7, #900]	@ 0x384
 801b336:	2200      	movs	r2, #0
 801b338:	f8c7 32d8 	str.w	r3, [r7, #728]	@ 0x2d8
 801b33c:	f8c7 22dc 	str.w	r2, [r7, #732]	@ 0x2dc
 801b340:	e9d7 01b8 	ldrd	r0, r1, [r7, #736]	@ 0x2e0
 801b344:	460b      	mov	r3, r1
 801b346:	f8d7 22d8 	ldr.w	r2, [r7, #728]	@ 0x2d8
 801b34a:	fb02 f203 	mul.w	r2, r2, r3
 801b34e:	f8d7 32dc 	ldr.w	r3, [r7, #732]	@ 0x2dc
 801b352:	e9c7 01b8 	strd	r0, r1, [r7, #736]	@ 0x2e0
 801b356:	4601      	mov	r1, r0
 801b358:	fb01 f303 	mul.w	r3, r1, r3
 801b35c:	4413      	add	r3, r2
 801b35e:	f8d7 22e0 	ldr.w	r2, [r7, #736]	@ 0x2e0
 801b362:	f8d7 12d8 	ldr.w	r1, [r7, #728]	@ 0x2d8
 801b366:	fba2 1201 	umull	r1, r2, r2, r1
 801b36a:	f8c7 231c 	str.w	r2, [r7, #796]	@ 0x31c
 801b36e:	460a      	mov	r2, r1
 801b370:	f8c7 2318 	str.w	r2, [r7, #792]	@ 0x318
 801b374:	f8d7 231c 	ldr.w	r2, [r7, #796]	@ 0x31c
 801b378:	4413      	add	r3, r2
 801b37a:	f8c7 331c 	str.w	r3, [r7, #796]	@ 0x31c
 801b37e:	f8d7 3398 	ldr.w	r3, [r7, #920]	@ 0x398
 801b382:	2200      	movs	r2, #0
 801b384:	f8c7 32d0 	str.w	r3, [r7, #720]	@ 0x2d0
 801b388:	f8c7 22d4 	str.w	r2, [r7, #724]	@ 0x2d4
 801b38c:	f8d7 3364 	ldr.w	r3, [r7, #868]	@ 0x364
 801b390:	2200      	movs	r2, #0
 801b392:	f8c7 32c8 	str.w	r3, [r7, #712]	@ 0x2c8
 801b396:	f8c7 22cc 	str.w	r2, [r7, #716]	@ 0x2cc
 801b39a:	e9d7 01b4 	ldrd	r0, r1, [r7, #720]	@ 0x2d0
 801b39e:	460b      	mov	r3, r1
 801b3a0:	f8d7 22c8 	ldr.w	r2, [r7, #712]	@ 0x2c8
 801b3a4:	fb02 f203 	mul.w	r2, r2, r3
 801b3a8:	f8d7 32cc 	ldr.w	r3, [r7, #716]	@ 0x2cc
 801b3ac:	e9c7 01b4 	strd	r0, r1, [r7, #720]	@ 0x2d0
 801b3b0:	4601      	mov	r1, r0
 801b3b2:	fb01 f303 	mul.w	r3, r1, r3
 801b3b6:	4413      	add	r3, r2
 801b3b8:	f8d7 22d0 	ldr.w	r2, [r7, #720]	@ 0x2d0
 801b3bc:	f8d7 12c8 	ldr.w	r1, [r7, #712]	@ 0x2c8
 801b3c0:	fba2 1201 	umull	r1, r2, r2, r1
 801b3c4:	f8c7 22c4 	str.w	r2, [r7, #708]	@ 0x2c4
 801b3c8:	460a      	mov	r2, r1
 801b3ca:	f8c7 22c0 	str.w	r2, [r7, #704]	@ 0x2c0
 801b3ce:	f8d7 22c4 	ldr.w	r2, [r7, #708]	@ 0x2c4
 801b3d2:	4413      	add	r3, r2
 801b3d4:	f8c7 32c4 	str.w	r3, [r7, #708]	@ 0x2c4
 801b3d8:	f8d7 3318 	ldr.w	r3, [r7, #792]	@ 0x318
 801b3dc:	e9d7 01b0 	ldrd	r0, r1, [r7, #704]	@ 0x2c0
 801b3e0:	4602      	mov	r2, r0
 801b3e2:	189b      	adds	r3, r3, r2
 801b3e4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 801b3e8:	f8d7 331c 	ldr.w	r3, [r7, #796]	@ 0x31c
 801b3ec:	460a      	mov	r2, r1
 801b3ee:	4153      	adcs	r3, r2
 801b3f0:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
         ((uint64_t) h3 * s2) + ((uint64_t) h4 * s1);
 801b3f4:	f8d7 3390 	ldr.w	r3, [r7, #912]	@ 0x390
 801b3f8:	2200      	movs	r2, #0
 801b3fa:	f8c7 32b8 	str.w	r3, [r7, #696]	@ 0x2b8
 801b3fe:	f8c7 22bc 	str.w	r2, [r7, #700]	@ 0x2bc
 801b402:	f8d7 336c 	ldr.w	r3, [r7, #876]	@ 0x36c
 801b406:	2200      	movs	r2, #0
 801b408:	f8c7 32b0 	str.w	r3, [r7, #688]	@ 0x2b0
 801b40c:	f8c7 22b4 	str.w	r2, [r7, #692]	@ 0x2b4
 801b410:	e9d7 01ae 	ldrd	r0, r1, [r7, #696]	@ 0x2b8
 801b414:	460b      	mov	r3, r1
 801b416:	f8d7 22b0 	ldr.w	r2, [r7, #688]	@ 0x2b0
 801b41a:	fb02 f203 	mul.w	r2, r2, r3
 801b41e:	f8d7 32b4 	ldr.w	r3, [r7, #692]	@ 0x2b4
 801b422:	e9c7 01ae 	strd	r0, r1, [r7, #696]	@ 0x2b8
 801b426:	4601      	mov	r1, r0
 801b428:	fb01 f303 	mul.w	r3, r1, r3
 801b42c:	4413      	add	r3, r2
 801b42e:	f8d7 22b8 	ldr.w	r2, [r7, #696]	@ 0x2b8
 801b432:	f8d7 12b0 	ldr.w	r1, [r7, #688]	@ 0x2b0
 801b436:	fba2 1201 	umull	r1, r2, r2, r1
 801b43a:	f8c7 2314 	str.w	r2, [r7, #788]	@ 0x314
 801b43e:	460a      	mov	r2, r1
 801b440:	f8c7 2310 	str.w	r2, [r7, #784]	@ 0x310
 801b444:	f8d7 2314 	ldr.w	r2, [r7, #788]	@ 0x314
 801b448:	4413      	add	r3, r2
 801b44a:	f8c7 3314 	str.w	r3, [r7, #788]	@ 0x314
    d0 = ((uint64_t) h0 * r0) + ((uint64_t) h1 * s4) + ((uint64_t) h2 * s3) +
 801b44e:	f8d7 3394 	ldr.w	r3, [r7, #916]	@ 0x394
 801b452:	2200      	movs	r2, #0
 801b454:	f8c7 32a8 	str.w	r3, [r7, #680]	@ 0x2a8
 801b458:	f8c7 22ac 	str.w	r2, [r7, #684]	@ 0x2ac
 801b45c:	f8d7 3368 	ldr.w	r3, [r7, #872]	@ 0x368
 801b460:	2200      	movs	r2, #0
 801b462:	f8c7 32a0 	str.w	r3, [r7, #672]	@ 0x2a0
 801b466:	f8c7 22a4 	str.w	r2, [r7, #676]	@ 0x2a4
 801b46a:	e9d7 01aa 	ldrd	r0, r1, [r7, #680]	@ 0x2a8
 801b46e:	460b      	mov	r3, r1
 801b470:	f8d7 22a0 	ldr.w	r2, [r7, #672]	@ 0x2a0
 801b474:	fb02 f203 	mul.w	r2, r2, r3
 801b478:	f8d7 32a4 	ldr.w	r3, [r7, #676]	@ 0x2a4
 801b47c:	e9c7 01aa 	strd	r0, r1, [r7, #680]	@ 0x2a8
 801b480:	4601      	mov	r1, r0
 801b482:	fb01 f303 	mul.w	r3, r1, r3
 801b486:	4413      	add	r3, r2
 801b488:	f8d7 22a8 	ldr.w	r2, [r7, #680]	@ 0x2a8
 801b48c:	f8d7 12a0 	ldr.w	r1, [r7, #672]	@ 0x2a0
 801b490:	fba2 1201 	umull	r1, r2, r2, r1
 801b494:	f8c7 229c 	str.w	r2, [r7, #668]	@ 0x29c
 801b498:	460a      	mov	r2, r1
 801b49a:	f8c7 2298 	str.w	r2, [r7, #664]	@ 0x298
 801b49e:	f8d7 229c 	ldr.w	r2, [r7, #668]	@ 0x29c
 801b4a2:	4413      	add	r3, r2
 801b4a4:	f8c7 329c 	str.w	r3, [r7, #668]	@ 0x29c
 801b4a8:	f8d7 3310 	ldr.w	r3, [r7, #784]	@ 0x310
 801b4ac:	e9d7 01a6 	ldrd	r0, r1, [r7, #664]	@ 0x298
 801b4b0:	4602      	mov	r2, r0
 801b4b2:	189b      	adds	r3, r3, r2
 801b4b4:	66bb      	str	r3, [r7, #104]	@ 0x68
 801b4b6:	f8d7 3314 	ldr.w	r3, [r7, #788]	@ 0x314
 801b4ba:	460a      	mov	r2, r1
 801b4bc:	4153      	adcs	r3, r2
 801b4be:	66fb      	str	r3, [r7, #108]	@ 0x6c
 801b4c0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 801b4c4:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 801b4c8:	4602      	mov	r2, r0
 801b4ca:	189b      	adds	r3, r3, r2
 801b4cc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 801b4d0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 801b4d4:	460a      	mov	r2, r1
 801b4d6:	4153      	adcs	r3, r2
 801b4d8:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
         ((uint64_t) h3 * s2) + ((uint64_t) h4 * s1);
 801b4dc:	f8d7 338c 	ldr.w	r3, [r7, #908]	@ 0x38c
 801b4e0:	2200      	movs	r2, #0
 801b4e2:	f8c7 3290 	str.w	r3, [r7, #656]	@ 0x290
 801b4e6:	f8c7 2294 	str.w	r2, [r7, #660]	@ 0x294
 801b4ea:	f8d7 3370 	ldr.w	r3, [r7, #880]	@ 0x370
 801b4ee:	2200      	movs	r2, #0
 801b4f0:	f8c7 3288 	str.w	r3, [r7, #648]	@ 0x288
 801b4f4:	f8c7 228c 	str.w	r2, [r7, #652]	@ 0x28c
 801b4f8:	e9d7 01a4 	ldrd	r0, r1, [r7, #656]	@ 0x290
 801b4fc:	460b      	mov	r3, r1
 801b4fe:	f8d7 2288 	ldr.w	r2, [r7, #648]	@ 0x288
 801b502:	fb02 f203 	mul.w	r2, r2, r3
 801b506:	f8d7 328c 	ldr.w	r3, [r7, #652]	@ 0x28c
 801b50a:	e9c7 01a4 	strd	r0, r1, [r7, #656]	@ 0x290
 801b50e:	4601      	mov	r1, r0
 801b510:	fb01 f303 	mul.w	r3, r1, r3
 801b514:	4413      	add	r3, r2
 801b516:	f8d7 2290 	ldr.w	r2, [r7, #656]	@ 0x290
 801b51a:	f8d7 1288 	ldr.w	r1, [r7, #648]	@ 0x288
 801b51e:	fba2 1201 	umull	r1, r2, r2, r1
 801b522:	f8c7 2284 	str.w	r2, [r7, #644]	@ 0x284
 801b526:	460a      	mov	r2, r1
 801b528:	f8c7 2280 	str.w	r2, [r7, #640]	@ 0x280
 801b52c:	f8d7 2284 	ldr.w	r2, [r7, #644]	@ 0x284
 801b530:	4413      	add	r3, r2
 801b532:	f8c7 3284 	str.w	r3, [r7, #644]	@ 0x284
    d0 = ((uint64_t) h0 * r0) + ((uint64_t) h1 * s4) + ((uint64_t) h2 * s3) +
 801b536:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 801b53a:	e9d7 01a0 	ldrd	r0, r1, [r7, #640]	@ 0x280
 801b53e:	4602      	mov	r2, r0
 801b540:	189b      	adds	r3, r3, r2
 801b542:	643b      	str	r3, [r7, #64]	@ 0x40
 801b544:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 801b548:	460a      	mov	r2, r1
 801b54a:	4153      	adcs	r3, r2
 801b54c:	647b      	str	r3, [r7, #68]	@ 0x44
 801b54e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 801b552:	e9c7 23d6 	strd	r2, r3, [r7, #856]	@ 0x358
    d1 = ((uint64_t) h0 * r1) + ((uint64_t) h1 * r0) + ((uint64_t) h2 * s4) +
 801b556:	f8d7 339c 	ldr.w	r3, [r7, #924]	@ 0x39c
 801b55a:	2200      	movs	r2, #0
 801b55c:	f8c7 3278 	str.w	r3, [r7, #632]	@ 0x278
 801b560:	f8c7 227c 	str.w	r2, [r7, #636]	@ 0x27c
 801b564:	f8d7 3380 	ldr.w	r3, [r7, #896]	@ 0x380
 801b568:	2200      	movs	r2, #0
 801b56a:	f8c7 3270 	str.w	r3, [r7, #624]	@ 0x270
 801b56e:	f8c7 2274 	str.w	r2, [r7, #628]	@ 0x274
 801b572:	e9d7 019e 	ldrd	r0, r1, [r7, #632]	@ 0x278
 801b576:	460b      	mov	r3, r1
 801b578:	f8d7 2270 	ldr.w	r2, [r7, #624]	@ 0x270
 801b57c:	fb02 f203 	mul.w	r2, r2, r3
 801b580:	f8d7 3274 	ldr.w	r3, [r7, #628]	@ 0x274
 801b584:	e9c7 019e 	strd	r0, r1, [r7, #632]	@ 0x278
 801b588:	4601      	mov	r1, r0
 801b58a:	fb01 f303 	mul.w	r3, r1, r3
 801b58e:	4413      	add	r3, r2
 801b590:	f8d7 2278 	ldr.w	r2, [r7, #632]	@ 0x278
 801b594:	f8d7 1270 	ldr.w	r1, [r7, #624]	@ 0x270
 801b598:	fba2 1201 	umull	r1, r2, r2, r1
 801b59c:	f8c7 230c 	str.w	r2, [r7, #780]	@ 0x30c
 801b5a0:	460a      	mov	r2, r1
 801b5a2:	f8c7 2308 	str.w	r2, [r7, #776]	@ 0x308
 801b5a6:	f8d7 230c 	ldr.w	r2, [r7, #780]	@ 0x30c
 801b5aa:	4413      	add	r3, r2
 801b5ac:	f8c7 330c 	str.w	r3, [r7, #780]	@ 0x30c
 801b5b0:	f8d7 3398 	ldr.w	r3, [r7, #920]	@ 0x398
 801b5b4:	2200      	movs	r2, #0
 801b5b6:	f8c7 3268 	str.w	r3, [r7, #616]	@ 0x268
 801b5ba:	f8c7 226c 	str.w	r2, [r7, #620]	@ 0x26c
 801b5be:	f8d7 3384 	ldr.w	r3, [r7, #900]	@ 0x384
 801b5c2:	2200      	movs	r2, #0
 801b5c4:	f8c7 3260 	str.w	r3, [r7, #608]	@ 0x260
 801b5c8:	f8c7 2264 	str.w	r2, [r7, #612]	@ 0x264
 801b5cc:	e9d7 019a 	ldrd	r0, r1, [r7, #616]	@ 0x268
 801b5d0:	460b      	mov	r3, r1
 801b5d2:	f8d7 2260 	ldr.w	r2, [r7, #608]	@ 0x260
 801b5d6:	fb02 f203 	mul.w	r2, r2, r3
 801b5da:	f8d7 3264 	ldr.w	r3, [r7, #612]	@ 0x264
 801b5de:	e9c7 019a 	strd	r0, r1, [r7, #616]	@ 0x268
 801b5e2:	4601      	mov	r1, r0
 801b5e4:	fb01 f303 	mul.w	r3, r1, r3
 801b5e8:	4413      	add	r3, r2
 801b5ea:	f8d7 2268 	ldr.w	r2, [r7, #616]	@ 0x268
 801b5ee:	f8d7 1260 	ldr.w	r1, [r7, #608]	@ 0x260
 801b5f2:	fba2 1201 	umull	r1, r2, r2, r1
 801b5f6:	f8c7 225c 	str.w	r2, [r7, #604]	@ 0x25c
 801b5fa:	460a      	mov	r2, r1
 801b5fc:	f8c7 2258 	str.w	r2, [r7, #600]	@ 0x258
 801b600:	f8d7 225c 	ldr.w	r2, [r7, #604]	@ 0x25c
 801b604:	4413      	add	r3, r2
 801b606:	f8c7 325c 	str.w	r3, [r7, #604]	@ 0x25c
 801b60a:	f8d7 3308 	ldr.w	r3, [r7, #776]	@ 0x308
 801b60e:	e9d7 0196 	ldrd	r0, r1, [r7, #600]	@ 0x258
 801b612:	4602      	mov	r2, r0
 801b614:	189b      	adds	r3, r3, r2
 801b616:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 801b61a:	f8d7 330c 	ldr.w	r3, [r7, #780]	@ 0x30c
 801b61e:	460a      	mov	r2, r1
 801b620:	4153      	adcs	r3, r2
 801b622:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
         ((uint64_t) h3 * s3) + ((uint64_t) h4 * s2);
 801b626:	f8d7 3390 	ldr.w	r3, [r7, #912]	@ 0x390
 801b62a:	2200      	movs	r2, #0
 801b62c:	f8c7 3250 	str.w	r3, [r7, #592]	@ 0x250
 801b630:	f8c7 2254 	str.w	r2, [r7, #596]	@ 0x254
 801b634:	f8d7 3368 	ldr.w	r3, [r7, #872]	@ 0x368
 801b638:	2200      	movs	r2, #0
 801b63a:	f8c7 3248 	str.w	r3, [r7, #584]	@ 0x248
 801b63e:	f8c7 224c 	str.w	r2, [r7, #588]	@ 0x24c
 801b642:	e9d7 0194 	ldrd	r0, r1, [r7, #592]	@ 0x250
 801b646:	460b      	mov	r3, r1
 801b648:	f8d7 2248 	ldr.w	r2, [r7, #584]	@ 0x248
 801b64c:	fb02 f203 	mul.w	r2, r2, r3
 801b650:	f8d7 324c 	ldr.w	r3, [r7, #588]	@ 0x24c
 801b654:	e9c7 0194 	strd	r0, r1, [r7, #592]	@ 0x250
 801b658:	4601      	mov	r1, r0
 801b65a:	fb01 f303 	mul.w	r3, r1, r3
 801b65e:	4413      	add	r3, r2
 801b660:	f8d7 2250 	ldr.w	r2, [r7, #592]	@ 0x250
 801b664:	f8d7 1248 	ldr.w	r1, [r7, #584]	@ 0x248
 801b668:	fba2 1201 	umull	r1, r2, r2, r1
 801b66c:	f8c7 2304 	str.w	r2, [r7, #772]	@ 0x304
 801b670:	460a      	mov	r2, r1
 801b672:	f8c7 2300 	str.w	r2, [r7, #768]	@ 0x300
 801b676:	f8d7 2304 	ldr.w	r2, [r7, #772]	@ 0x304
 801b67a:	4413      	add	r3, r2
 801b67c:	f8c7 3304 	str.w	r3, [r7, #772]	@ 0x304
    d1 = ((uint64_t) h0 * r1) + ((uint64_t) h1 * r0) + ((uint64_t) h2 * s4) +
 801b680:	f8d7 3394 	ldr.w	r3, [r7, #916]	@ 0x394
 801b684:	2200      	movs	r2, #0
 801b686:	f8c7 3240 	str.w	r3, [r7, #576]	@ 0x240
 801b68a:	f8c7 2244 	str.w	r2, [r7, #580]	@ 0x244
 801b68e:	f8d7 3364 	ldr.w	r3, [r7, #868]	@ 0x364
 801b692:	2200      	movs	r2, #0
 801b694:	f8c7 3238 	str.w	r3, [r7, #568]	@ 0x238
 801b698:	f8c7 223c 	str.w	r2, [r7, #572]	@ 0x23c
 801b69c:	e9d7 0190 	ldrd	r0, r1, [r7, #576]	@ 0x240
 801b6a0:	460b      	mov	r3, r1
 801b6a2:	f8d7 2238 	ldr.w	r2, [r7, #568]	@ 0x238
 801b6a6:	fb02 f203 	mul.w	r2, r2, r3
 801b6aa:	f8d7 323c 	ldr.w	r3, [r7, #572]	@ 0x23c
 801b6ae:	e9c7 0190 	strd	r0, r1, [r7, #576]	@ 0x240
 801b6b2:	4601      	mov	r1, r0
 801b6b4:	fb01 f303 	mul.w	r3, r1, r3
 801b6b8:	4413      	add	r3, r2
 801b6ba:	f8d7 2240 	ldr.w	r2, [r7, #576]	@ 0x240
 801b6be:	f8d7 1238 	ldr.w	r1, [r7, #568]	@ 0x238
 801b6c2:	fba2 1201 	umull	r1, r2, r2, r1
 801b6c6:	f8c7 2234 	str.w	r2, [r7, #564]	@ 0x234
 801b6ca:	460a      	mov	r2, r1
 801b6cc:	f8c7 2230 	str.w	r2, [r7, #560]	@ 0x230
 801b6d0:	f8d7 2234 	ldr.w	r2, [r7, #564]	@ 0x234
 801b6d4:	4413      	add	r3, r2
 801b6d6:	f8c7 3234 	str.w	r3, [r7, #564]	@ 0x234
 801b6da:	f8d7 3300 	ldr.w	r3, [r7, #768]	@ 0x300
 801b6de:	e9d7 018c 	ldrd	r0, r1, [r7, #560]	@ 0x230
 801b6e2:	4602      	mov	r2, r0
 801b6e4:	189b      	adds	r3, r3, r2
 801b6e6:	663b      	str	r3, [r7, #96]	@ 0x60
 801b6e8:	f8d7 3304 	ldr.w	r3, [r7, #772]	@ 0x304
 801b6ec:	460a      	mov	r2, r1
 801b6ee:	4153      	adcs	r3, r2
 801b6f0:	667b      	str	r3, [r7, #100]	@ 0x64
 801b6f2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 801b6f6:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	@ 0x60
 801b6fa:	4602      	mov	r2, r0
 801b6fc:	189b      	adds	r3, r3, r2
 801b6fe:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 801b702:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 801b706:	460a      	mov	r2, r1
 801b708:	4153      	adcs	r3, r2
 801b70a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
         ((uint64_t) h3 * s3) + ((uint64_t) h4 * s2);
 801b70e:	f8d7 338c 	ldr.w	r3, [r7, #908]	@ 0x38c
 801b712:	2200      	movs	r2, #0
 801b714:	f8c7 3228 	str.w	r3, [r7, #552]	@ 0x228
 801b718:	f8c7 222c 	str.w	r2, [r7, #556]	@ 0x22c
 801b71c:	f8d7 336c 	ldr.w	r3, [r7, #876]	@ 0x36c
 801b720:	2200      	movs	r2, #0
 801b722:	f8c7 3220 	str.w	r3, [r7, #544]	@ 0x220
 801b726:	f8c7 2224 	str.w	r2, [r7, #548]	@ 0x224
 801b72a:	e9d7 018a 	ldrd	r0, r1, [r7, #552]	@ 0x228
 801b72e:	460b      	mov	r3, r1
 801b730:	f8d7 2220 	ldr.w	r2, [r7, #544]	@ 0x220
 801b734:	fb02 f203 	mul.w	r2, r2, r3
 801b738:	f8d7 3224 	ldr.w	r3, [r7, #548]	@ 0x224
 801b73c:	e9c7 018a 	strd	r0, r1, [r7, #552]	@ 0x228
 801b740:	4601      	mov	r1, r0
 801b742:	fb01 f303 	mul.w	r3, r1, r3
 801b746:	4413      	add	r3, r2
 801b748:	f8d7 2228 	ldr.w	r2, [r7, #552]	@ 0x228
 801b74c:	f8d7 1220 	ldr.w	r1, [r7, #544]	@ 0x220
 801b750:	fba2 1201 	umull	r1, r2, r2, r1
 801b754:	f8c7 221c 	str.w	r2, [r7, #540]	@ 0x21c
 801b758:	460a      	mov	r2, r1
 801b75a:	f8c7 2218 	str.w	r2, [r7, #536]	@ 0x218
 801b75e:	f8d7 221c 	ldr.w	r2, [r7, #540]	@ 0x21c
 801b762:	4413      	add	r3, r2
 801b764:	f8c7 321c 	str.w	r3, [r7, #540]	@ 0x21c
    d1 = ((uint64_t) h0 * r1) + ((uint64_t) h1 * r0) + ((uint64_t) h2 * s4) +
 801b768:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 801b76c:	e9d7 0186 	ldrd	r0, r1, [r7, #536]	@ 0x218
 801b770:	4602      	mov	r2, r0
 801b772:	189b      	adds	r3, r3, r2
 801b774:	63bb      	str	r3, [r7, #56]	@ 0x38
 801b776:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 801b77a:	460a      	mov	r2, r1
 801b77c:	4153      	adcs	r3, r2
 801b77e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801b780:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 801b784:	e9c7 23d4 	strd	r2, r3, [r7, #848]	@ 0x350
    d2 = ((uint64_t) h0 * r2) + ((uint64_t) h1 * r1) + ((uint64_t) h2 * r0) +
 801b788:	f8d7 339c 	ldr.w	r3, [r7, #924]	@ 0x39c
 801b78c:	2200      	movs	r2, #0
 801b78e:	f8c7 3210 	str.w	r3, [r7, #528]	@ 0x210
 801b792:	f8c7 2214 	str.w	r2, [r7, #532]	@ 0x214
 801b796:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
 801b79a:	2200      	movs	r2, #0
 801b79c:	f8c7 3208 	str.w	r3, [r7, #520]	@ 0x208
 801b7a0:	f8c7 220c 	str.w	r2, [r7, #524]	@ 0x20c
 801b7a4:	e9d7 0184 	ldrd	r0, r1, [r7, #528]	@ 0x210
 801b7a8:	460b      	mov	r3, r1
 801b7aa:	f8d7 2208 	ldr.w	r2, [r7, #520]	@ 0x208
 801b7ae:	fb02 f203 	mul.w	r2, r2, r3
 801b7b2:	f8d7 320c 	ldr.w	r3, [r7, #524]	@ 0x20c
 801b7b6:	e9c7 0184 	strd	r0, r1, [r7, #528]	@ 0x210
 801b7ba:	4601      	mov	r1, r0
 801b7bc:	fb01 f303 	mul.w	r3, r1, r3
 801b7c0:	4413      	add	r3, r2
 801b7c2:	f8d7 2210 	ldr.w	r2, [r7, #528]	@ 0x210
 801b7c6:	f8d7 1208 	ldr.w	r1, [r7, #520]	@ 0x208
 801b7ca:	fba2 1201 	umull	r1, r2, r2, r1
 801b7ce:	f8c7 22fc 	str.w	r2, [r7, #764]	@ 0x2fc
 801b7d2:	460a      	mov	r2, r1
 801b7d4:	f8c7 22f8 	str.w	r2, [r7, #760]	@ 0x2f8
 801b7d8:	f8d7 22fc 	ldr.w	r2, [r7, #764]	@ 0x2fc
 801b7dc:	4413      	add	r3, r2
 801b7de:	f8c7 32fc 	str.w	r3, [r7, #764]	@ 0x2fc
 801b7e2:	f8d7 3398 	ldr.w	r3, [r7, #920]	@ 0x398
 801b7e6:	2200      	movs	r2, #0
 801b7e8:	f8c7 3200 	str.w	r3, [r7, #512]	@ 0x200
 801b7ec:	f8c7 2204 	str.w	r2, [r7, #516]	@ 0x204
 801b7f0:	f8d7 3380 	ldr.w	r3, [r7, #896]	@ 0x380
 801b7f4:	2200      	movs	r2, #0
 801b7f6:	f8c7 31f8 	str.w	r3, [r7, #504]	@ 0x1f8
 801b7fa:	f8c7 21fc 	str.w	r2, [r7, #508]	@ 0x1fc
 801b7fe:	e9d7 0180 	ldrd	r0, r1, [r7, #512]	@ 0x200
 801b802:	460b      	mov	r3, r1
 801b804:	f8d7 21f8 	ldr.w	r2, [r7, #504]	@ 0x1f8
 801b808:	fb02 f203 	mul.w	r2, r2, r3
 801b80c:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 801b810:	e9c7 0180 	strd	r0, r1, [r7, #512]	@ 0x200
 801b814:	4601      	mov	r1, r0
 801b816:	fb01 f303 	mul.w	r3, r1, r3
 801b81a:	4413      	add	r3, r2
 801b81c:	f8d7 2200 	ldr.w	r2, [r7, #512]	@ 0x200
 801b820:	f8d7 11f8 	ldr.w	r1, [r7, #504]	@ 0x1f8
 801b824:	fba2 1201 	umull	r1, r2, r2, r1
 801b828:	f8c7 21f4 	str.w	r2, [r7, #500]	@ 0x1f4
 801b82c:	460a      	mov	r2, r1
 801b82e:	f8c7 21f0 	str.w	r2, [r7, #496]	@ 0x1f0
 801b832:	f8d7 21f4 	ldr.w	r2, [r7, #500]	@ 0x1f4
 801b836:	4413      	add	r3, r2
 801b838:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
 801b83c:	f8d7 32f8 	ldr.w	r3, [r7, #760]	@ 0x2f8
 801b840:	e9d7 017c 	ldrd	r0, r1, [r7, #496]	@ 0x1f0
 801b844:	4602      	mov	r2, r0
 801b846:	189b      	adds	r3, r3, r2
 801b848:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 801b84c:	f8d7 32fc 	ldr.w	r3, [r7, #764]	@ 0x2fc
 801b850:	460a      	mov	r2, r1
 801b852:	4153      	adcs	r3, r2
 801b854:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
         ((uint64_t) h3 * s4) + ((uint64_t) h4 * s3);
 801b858:	f8d7 3390 	ldr.w	r3, [r7, #912]	@ 0x390
 801b85c:	2200      	movs	r2, #0
 801b85e:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
 801b862:	f8c7 21ec 	str.w	r2, [r7, #492]	@ 0x1ec
 801b866:	f8d7 3364 	ldr.w	r3, [r7, #868]	@ 0x364
 801b86a:	2200      	movs	r2, #0
 801b86c:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 801b870:	f8c7 21e4 	str.w	r2, [r7, #484]	@ 0x1e4
 801b874:	e9d7 017a 	ldrd	r0, r1, [r7, #488]	@ 0x1e8
 801b878:	460b      	mov	r3, r1
 801b87a:	f8d7 21e0 	ldr.w	r2, [r7, #480]	@ 0x1e0
 801b87e:	fb02 f203 	mul.w	r2, r2, r3
 801b882:	f8d7 31e4 	ldr.w	r3, [r7, #484]	@ 0x1e4
 801b886:	e9c7 017a 	strd	r0, r1, [r7, #488]	@ 0x1e8
 801b88a:	4601      	mov	r1, r0
 801b88c:	fb01 f303 	mul.w	r3, r1, r3
 801b890:	4413      	add	r3, r2
 801b892:	f8d7 21e8 	ldr.w	r2, [r7, #488]	@ 0x1e8
 801b896:	f8d7 11e0 	ldr.w	r1, [r7, #480]	@ 0x1e0
 801b89a:	fba2 1201 	umull	r1, r2, r2, r1
 801b89e:	f8c7 22f4 	str.w	r2, [r7, #756]	@ 0x2f4
 801b8a2:	460a      	mov	r2, r1
 801b8a4:	f8c7 22f0 	str.w	r2, [r7, #752]	@ 0x2f0
 801b8a8:	f8d7 22f4 	ldr.w	r2, [r7, #756]	@ 0x2f4
 801b8ac:	4413      	add	r3, r2
 801b8ae:	f8c7 32f4 	str.w	r3, [r7, #756]	@ 0x2f4
    d2 = ((uint64_t) h0 * r2) + ((uint64_t) h1 * r1) + ((uint64_t) h2 * r0) +
 801b8b2:	f8d7 3394 	ldr.w	r3, [r7, #916]	@ 0x394
 801b8b6:	2200      	movs	r2, #0
 801b8b8:	f8c7 31d8 	str.w	r3, [r7, #472]	@ 0x1d8
 801b8bc:	f8c7 21dc 	str.w	r2, [r7, #476]	@ 0x1dc
 801b8c0:	f8d7 3384 	ldr.w	r3, [r7, #900]	@ 0x384
 801b8c4:	2200      	movs	r2, #0
 801b8c6:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
 801b8ca:	f8c7 21d4 	str.w	r2, [r7, #468]	@ 0x1d4
 801b8ce:	e9d7 0176 	ldrd	r0, r1, [r7, #472]	@ 0x1d8
 801b8d2:	460b      	mov	r3, r1
 801b8d4:	f8d7 21d0 	ldr.w	r2, [r7, #464]	@ 0x1d0
 801b8d8:	fb02 f203 	mul.w	r2, r2, r3
 801b8dc:	f8d7 31d4 	ldr.w	r3, [r7, #468]	@ 0x1d4
 801b8e0:	e9c7 0176 	strd	r0, r1, [r7, #472]	@ 0x1d8
 801b8e4:	4601      	mov	r1, r0
 801b8e6:	fb01 f303 	mul.w	r3, r1, r3
 801b8ea:	4413      	add	r3, r2
 801b8ec:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 801b8f0:	f8d7 11d0 	ldr.w	r1, [r7, #464]	@ 0x1d0
 801b8f4:	fba2 1201 	umull	r1, r2, r2, r1
 801b8f8:	f8c7 21cc 	str.w	r2, [r7, #460]	@ 0x1cc
 801b8fc:	460a      	mov	r2, r1
 801b8fe:	f8c7 21c8 	str.w	r2, [r7, #456]	@ 0x1c8
 801b902:	f8d7 21cc 	ldr.w	r2, [r7, #460]	@ 0x1cc
 801b906:	4413      	add	r3, r2
 801b908:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
 801b90c:	f8d7 32f0 	ldr.w	r3, [r7, #752]	@ 0x2f0
 801b910:	e9d7 0172 	ldrd	r0, r1, [r7, #456]	@ 0x1c8
 801b914:	4602      	mov	r2, r0
 801b916:	189b      	adds	r3, r3, r2
 801b918:	65bb      	str	r3, [r7, #88]	@ 0x58
 801b91a:	f8d7 32f4 	ldr.w	r3, [r7, #756]	@ 0x2f4
 801b91e:	460a      	mov	r2, r1
 801b920:	4153      	adcs	r3, r2
 801b922:	65fb      	str	r3, [r7, #92]	@ 0x5c
 801b924:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 801b928:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	@ 0x58
 801b92c:	4602      	mov	r2, r0
 801b92e:	189b      	adds	r3, r3, r2
 801b930:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 801b934:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 801b938:	460a      	mov	r2, r1
 801b93a:	4153      	adcs	r3, r2
 801b93c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
         ((uint64_t) h3 * s4) + ((uint64_t) h4 * s3);
 801b940:	f8d7 338c 	ldr.w	r3, [r7, #908]	@ 0x38c
 801b944:	2200      	movs	r2, #0
 801b946:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 801b94a:	f8c7 21c4 	str.w	r2, [r7, #452]	@ 0x1c4
 801b94e:	f8d7 3368 	ldr.w	r3, [r7, #872]	@ 0x368
 801b952:	2200      	movs	r2, #0
 801b954:	f8c7 31b8 	str.w	r3, [r7, #440]	@ 0x1b8
 801b958:	f8c7 21bc 	str.w	r2, [r7, #444]	@ 0x1bc
 801b95c:	e9d7 0170 	ldrd	r0, r1, [r7, #448]	@ 0x1c0
 801b960:	460b      	mov	r3, r1
 801b962:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 801b966:	fb02 f203 	mul.w	r2, r2, r3
 801b96a:	f8d7 31bc 	ldr.w	r3, [r7, #444]	@ 0x1bc
 801b96e:	e9c7 0170 	strd	r0, r1, [r7, #448]	@ 0x1c0
 801b972:	4601      	mov	r1, r0
 801b974:	fb01 f303 	mul.w	r3, r1, r3
 801b978:	4413      	add	r3, r2
 801b97a:	f8d7 21c0 	ldr.w	r2, [r7, #448]	@ 0x1c0
 801b97e:	f8d7 11b8 	ldr.w	r1, [r7, #440]	@ 0x1b8
 801b982:	fba2 1201 	umull	r1, r2, r2, r1
 801b986:	f8c7 21b4 	str.w	r2, [r7, #436]	@ 0x1b4
 801b98a:	460a      	mov	r2, r1
 801b98c:	f8c7 21b0 	str.w	r2, [r7, #432]	@ 0x1b0
 801b990:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
 801b994:	4413      	add	r3, r2
 801b996:	f8c7 31b4 	str.w	r3, [r7, #436]	@ 0x1b4
    d2 = ((uint64_t) h0 * r2) + ((uint64_t) h1 * r1) + ((uint64_t) h2 * r0) +
 801b99a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 801b99e:	e9d7 016c 	ldrd	r0, r1, [r7, #432]	@ 0x1b0
 801b9a2:	4602      	mov	r2, r0
 801b9a4:	189b      	adds	r3, r3, r2
 801b9a6:	633b      	str	r3, [r7, #48]	@ 0x30
 801b9a8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 801b9ac:	460a      	mov	r2, r1
 801b9ae:	4153      	adcs	r3, r2
 801b9b0:	637b      	str	r3, [r7, #52]	@ 0x34
 801b9b2:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 801b9b6:	e9c7 23d2 	strd	r2, r3, [r7, #840]	@ 0x348
    d3 = ((uint64_t) h0 * r3) + ((uint64_t) h1 * r2) + ((uint64_t) h2 * r1) +
 801b9ba:	f8d7 339c 	ldr.w	r3, [r7, #924]	@ 0x39c
 801b9be:	2200      	movs	r2, #0
 801b9c0:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
 801b9c4:	f8c7 21ac 	str.w	r2, [r7, #428]	@ 0x1ac
 801b9c8:	f8d7 3378 	ldr.w	r3, [r7, #888]	@ 0x378
 801b9cc:	2200      	movs	r2, #0
 801b9ce:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 801b9d2:	f8c7 21a4 	str.w	r2, [r7, #420]	@ 0x1a4
 801b9d6:	e9d7 016a 	ldrd	r0, r1, [r7, #424]	@ 0x1a8
 801b9da:	460b      	mov	r3, r1
 801b9dc:	f8d7 21a0 	ldr.w	r2, [r7, #416]	@ 0x1a0
 801b9e0:	fb02 f203 	mul.w	r2, r2, r3
 801b9e4:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 801b9e8:	e9c7 016a 	strd	r0, r1, [r7, #424]	@ 0x1a8
 801b9ec:	4601      	mov	r1, r0
 801b9ee:	fb01 f303 	mul.w	r3, r1, r3
 801b9f2:	4413      	add	r3, r2
 801b9f4:	f8d7 21a8 	ldr.w	r2, [r7, #424]	@ 0x1a8
 801b9f8:	f8d7 11a0 	ldr.w	r1, [r7, #416]	@ 0x1a0
 801b9fc:	fba2 1201 	umull	r1, r2, r2, r1
 801ba00:	f8c7 22ec 	str.w	r2, [r7, #748]	@ 0x2ec
 801ba04:	460a      	mov	r2, r1
 801ba06:	f8c7 22e8 	str.w	r2, [r7, #744]	@ 0x2e8
 801ba0a:	f8d7 22ec 	ldr.w	r2, [r7, #748]	@ 0x2ec
 801ba0e:	4413      	add	r3, r2
 801ba10:	f8c7 32ec 	str.w	r3, [r7, #748]	@ 0x2ec
 801ba14:	f8d7 3398 	ldr.w	r3, [r7, #920]	@ 0x398
 801ba18:	2200      	movs	r2, #0
 801ba1a:	f8c7 3198 	str.w	r3, [r7, #408]	@ 0x198
 801ba1e:	f8c7 219c 	str.w	r2, [r7, #412]	@ 0x19c
 801ba22:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
 801ba26:	2200      	movs	r2, #0
 801ba28:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
 801ba2c:	f8c7 2194 	str.w	r2, [r7, #404]	@ 0x194
 801ba30:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	@ 0x198
 801ba34:	460b      	mov	r3, r1
 801ba36:	f8d7 2190 	ldr.w	r2, [r7, #400]	@ 0x190
 801ba3a:	fb02 f203 	mul.w	r2, r2, r3
 801ba3e:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 801ba42:	e9c7 0166 	strd	r0, r1, [r7, #408]	@ 0x198
 801ba46:	4601      	mov	r1, r0
 801ba48:	fb01 f303 	mul.w	r3, r1, r3
 801ba4c:	4413      	add	r3, r2
 801ba4e:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 801ba52:	f8d7 1190 	ldr.w	r1, [r7, #400]	@ 0x190
 801ba56:	fba2 1201 	umull	r1, r2, r2, r1
 801ba5a:	f8c7 218c 	str.w	r2, [r7, #396]	@ 0x18c
 801ba5e:	460a      	mov	r2, r1
 801ba60:	f8c7 2188 	str.w	r2, [r7, #392]	@ 0x188
 801ba64:	f8d7 218c 	ldr.w	r2, [r7, #396]	@ 0x18c
 801ba68:	4413      	add	r3, r2
 801ba6a:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
 801ba6e:	f8d7 32e8 	ldr.w	r3, [r7, #744]	@ 0x2e8
 801ba72:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	@ 0x188
 801ba76:	4602      	mov	r2, r0
 801ba78:	189b      	adds	r3, r3, r2
 801ba7a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 801ba7e:	f8d7 32ec 	ldr.w	r3, [r7, #748]	@ 0x2ec
 801ba82:	460a      	mov	r2, r1
 801ba84:	4153      	adcs	r3, r2
 801ba86:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
         ((uint64_t) h3 * r0) + ((uint64_t) h4 * s4);
 801ba8a:	f8d7 3390 	ldr.w	r3, [r7, #912]	@ 0x390
 801ba8e:	2200      	movs	r2, #0
 801ba90:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 801ba94:	f8c7 2184 	str.w	r2, [r7, #388]	@ 0x184
 801ba98:	f8d7 3384 	ldr.w	r3, [r7, #900]	@ 0x384
 801ba9c:	2200      	movs	r2, #0
 801ba9e:	f8c7 3178 	str.w	r3, [r7, #376]	@ 0x178
 801baa2:	f8c7 217c 	str.w	r2, [r7, #380]	@ 0x17c
 801baa6:	e9d7 0160 	ldrd	r0, r1, [r7, #384]	@ 0x180
 801baaa:	460b      	mov	r3, r1
 801baac:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 801bab0:	fb02 f203 	mul.w	r2, r2, r3
 801bab4:	f8d7 317c 	ldr.w	r3, [r7, #380]	@ 0x17c
 801bab8:	e9c7 0160 	strd	r0, r1, [r7, #384]	@ 0x180
 801babc:	4601      	mov	r1, r0
 801babe:	fb01 f303 	mul.w	r3, r1, r3
 801bac2:	4413      	add	r3, r2
 801bac4:	f8d7 2180 	ldr.w	r2, [r7, #384]	@ 0x180
 801bac8:	f8d7 1178 	ldr.w	r1, [r7, #376]	@ 0x178
 801bacc:	fba2 ab01 	umull	sl, fp, r2, r1
 801bad0:	445b      	add	r3, fp
 801bad2:	469b      	mov	fp, r3
    d3 = ((uint64_t) h0 * r3) + ((uint64_t) h1 * r2) + ((uint64_t) h2 * r1) +
 801bad4:	f8d7 3394 	ldr.w	r3, [r7, #916]	@ 0x394
 801bad8:	2200      	movs	r2, #0
 801bada:	f8c7 3170 	str.w	r3, [r7, #368]	@ 0x170
 801bade:	f8c7 2174 	str.w	r2, [r7, #372]	@ 0x174
 801bae2:	f8d7 3380 	ldr.w	r3, [r7, #896]	@ 0x380
 801bae6:	2200      	movs	r2, #0
 801bae8:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
 801baec:	f8c7 216c 	str.w	r2, [r7, #364]	@ 0x16c
 801baf0:	e9d7 015c 	ldrd	r0, r1, [r7, #368]	@ 0x170
 801baf4:	460b      	mov	r3, r1
 801baf6:	f8d7 2168 	ldr.w	r2, [r7, #360]	@ 0x168
 801bafa:	fb02 f203 	mul.w	r2, r2, r3
 801bafe:	f8d7 316c 	ldr.w	r3, [r7, #364]	@ 0x16c
 801bb02:	e9c7 015c 	strd	r0, r1, [r7, #368]	@ 0x170
 801bb06:	4601      	mov	r1, r0
 801bb08:	fb01 f303 	mul.w	r3, r1, r3
 801bb0c:	4413      	add	r3, r2
 801bb0e:	f8d7 2170 	ldr.w	r2, [r7, #368]	@ 0x170
 801bb12:	f8d7 1168 	ldr.w	r1, [r7, #360]	@ 0x168
 801bb16:	fba2 1201 	umull	r1, r2, r2, r1
 801bb1a:	f8c7 2164 	str.w	r2, [r7, #356]	@ 0x164
 801bb1e:	460a      	mov	r2, r1
 801bb20:	f8c7 2160 	str.w	r2, [r7, #352]	@ 0x160
 801bb24:	f8d7 2164 	ldr.w	r2, [r7, #356]	@ 0x164
 801bb28:	4413      	add	r3, r2
 801bb2a:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
 801bb2e:	e9d7 1258 	ldrd	r1, r2, [r7, #352]	@ 0x160
 801bb32:	460b      	mov	r3, r1
 801bb34:	eb1a 0303 	adds.w	r3, sl, r3
 801bb38:	653b      	str	r3, [r7, #80]	@ 0x50
 801bb3a:	4613      	mov	r3, r2
 801bb3c:	eb4b 0303 	adc.w	r3, fp, r3
 801bb40:	657b      	str	r3, [r7, #84]	@ 0x54
 801bb42:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 801bb46:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	@ 0x50
 801bb4a:	4602      	mov	r2, r0
 801bb4c:	189b      	adds	r3, r3, r2
 801bb4e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 801bb52:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 801bb56:	460a      	mov	r2, r1
 801bb58:	4153      	adcs	r3, r2
 801bb5a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
         ((uint64_t) h3 * r0) + ((uint64_t) h4 * s4);
 801bb5e:	f8d7 338c 	ldr.w	r3, [r7, #908]	@ 0x38c
 801bb62:	2200      	movs	r2, #0
 801bb64:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
 801bb68:	f8c7 215c 	str.w	r2, [r7, #348]	@ 0x15c
 801bb6c:	f8d7 3364 	ldr.w	r3, [r7, #868]	@ 0x364
 801bb70:	2200      	movs	r2, #0
 801bb72:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 801bb76:	f8c7 2154 	str.w	r2, [r7, #340]	@ 0x154
 801bb7a:	e9d7 0156 	ldrd	r0, r1, [r7, #344]	@ 0x158
 801bb7e:	460b      	mov	r3, r1
 801bb80:	f8d7 2150 	ldr.w	r2, [r7, #336]	@ 0x150
 801bb84:	fb02 f203 	mul.w	r2, r2, r3
 801bb88:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 801bb8c:	e9c7 0156 	strd	r0, r1, [r7, #344]	@ 0x158
 801bb90:	4601      	mov	r1, r0
 801bb92:	fb01 f303 	mul.w	r3, r1, r3
 801bb96:	4413      	add	r3, r2
 801bb98:	f8d7 2158 	ldr.w	r2, [r7, #344]	@ 0x158
 801bb9c:	f8d7 1150 	ldr.w	r1, [r7, #336]	@ 0x150
 801bba0:	fba2 1201 	umull	r1, r2, r2, r1
 801bba4:	f8c7 214c 	str.w	r2, [r7, #332]	@ 0x14c
 801bba8:	460a      	mov	r2, r1
 801bbaa:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
 801bbae:	f8d7 214c 	ldr.w	r2, [r7, #332]	@ 0x14c
 801bbb2:	4413      	add	r3, r2
 801bbb4:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
    d3 = ((uint64_t) h0 * r3) + ((uint64_t) h1 * r2) + ((uint64_t) h2 * r1) +
 801bbb8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 801bbbc:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	@ 0x148
 801bbc0:	4602      	mov	r2, r0
 801bbc2:	189b      	adds	r3, r3, r2
 801bbc4:	62bb      	str	r3, [r7, #40]	@ 0x28
 801bbc6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 801bbca:	460a      	mov	r2, r1
 801bbcc:	4153      	adcs	r3, r2
 801bbce:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801bbd0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 801bbd4:	e9c7 23d0 	strd	r2, r3, [r7, #832]	@ 0x340
    d4 = ((uint64_t) h0 * r4) + ((uint64_t) h1 * r3) + ((uint64_t) h2 * r2) +
 801bbd8:	f8d7 339c 	ldr.w	r3, [r7, #924]	@ 0x39c
 801bbdc:	2200      	movs	r2, #0
 801bbde:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
 801bbe2:	f8c7 2144 	str.w	r2, [r7, #324]	@ 0x144
 801bbe6:	f8d7 3374 	ldr.w	r3, [r7, #884]	@ 0x374
 801bbea:	2200      	movs	r2, #0
 801bbec:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
 801bbf0:	f8c7 213c 	str.w	r2, [r7, #316]	@ 0x13c
 801bbf4:	e9d7 0150 	ldrd	r0, r1, [r7, #320]	@ 0x140
 801bbf8:	460b      	mov	r3, r1
 801bbfa:	f8d7 2138 	ldr.w	r2, [r7, #312]	@ 0x138
 801bbfe:	fb02 f203 	mul.w	r2, r2, r3
 801bc02:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 801bc06:	e9c7 0150 	strd	r0, r1, [r7, #320]	@ 0x140
 801bc0a:	4601      	mov	r1, r0
 801bc0c:	fb01 f303 	mul.w	r3, r1, r3
 801bc10:	4413      	add	r3, r2
 801bc12:	f8d7 2140 	ldr.w	r2, [r7, #320]	@ 0x140
 801bc16:	f8d7 1138 	ldr.w	r1, [r7, #312]	@ 0x138
 801bc1a:	fba2 8901 	umull	r8, r9, r2, r1
 801bc1e:	444b      	add	r3, r9
 801bc20:	4699      	mov	r9, r3
 801bc22:	f8d7 3398 	ldr.w	r3, [r7, #920]	@ 0x398
 801bc26:	2200      	movs	r2, #0
 801bc28:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 801bc2c:	f8c7 2134 	str.w	r2, [r7, #308]	@ 0x134
 801bc30:	f8d7 3378 	ldr.w	r3, [r7, #888]	@ 0x378
 801bc34:	2200      	movs	r2, #0
 801bc36:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
 801bc3a:	f8c7 212c 	str.w	r2, [r7, #300]	@ 0x12c
 801bc3e:	e9d7 014c 	ldrd	r0, r1, [r7, #304]	@ 0x130
 801bc42:	460b      	mov	r3, r1
 801bc44:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 801bc48:	fb02 f203 	mul.w	r2, r2, r3
 801bc4c:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 801bc50:	e9c7 014c 	strd	r0, r1, [r7, #304]	@ 0x130
 801bc54:	4601      	mov	r1, r0
 801bc56:	fb01 f303 	mul.w	r3, r1, r3
 801bc5a:	4413      	add	r3, r2
 801bc5c:	f8d7 2130 	ldr.w	r2, [r7, #304]	@ 0x130
 801bc60:	f8d7 1128 	ldr.w	r1, [r7, #296]	@ 0x128
 801bc64:	fba2 1201 	umull	r1, r2, r2, r1
 801bc68:	f8c7 2124 	str.w	r2, [r7, #292]	@ 0x124
 801bc6c:	460a      	mov	r2, r1
 801bc6e:	f8c7 2120 	str.w	r2, [r7, #288]	@ 0x120
 801bc72:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 801bc76:	4413      	add	r3, r2
 801bc78:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 801bc7c:	e9d7 1248 	ldrd	r1, r2, [r7, #288]	@ 0x120
 801bc80:	460b      	mov	r3, r1
 801bc82:	eb18 0303 	adds.w	r3, r8, r3
 801bc86:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 801bc8a:	4613      	mov	r3, r2
 801bc8c:	eb49 0303 	adc.w	r3, r9, r3
 801bc90:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
         ((uint64_t) h3 * r1) + ((uint64_t) h4 * r0);
 801bc94:	f8d7 3390 	ldr.w	r3, [r7, #912]	@ 0x390
 801bc98:	2200      	movs	r2, #0
 801bc9a:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
 801bc9e:	f8c7 211c 	str.w	r2, [r7, #284]	@ 0x11c
 801bca2:	f8d7 3380 	ldr.w	r3, [r7, #896]	@ 0x380
 801bca6:	2200      	movs	r2, #0
 801bca8:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
 801bcac:	f8c7 2114 	str.w	r2, [r7, #276]	@ 0x114
 801bcb0:	e9d7 0146 	ldrd	r0, r1, [r7, #280]	@ 0x118
 801bcb4:	460b      	mov	r3, r1
 801bcb6:	f8d7 2110 	ldr.w	r2, [r7, #272]	@ 0x110
 801bcba:	fb02 f203 	mul.w	r2, r2, r3
 801bcbe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801bcc2:	e9c7 0146 	strd	r0, r1, [r7, #280]	@ 0x118
 801bcc6:	4601      	mov	r1, r0
 801bcc8:	fb01 f303 	mul.w	r3, r1, r3
 801bccc:	4413      	add	r3, r2
 801bcce:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 801bcd2:	f8d7 1110 	ldr.w	r1, [r7, #272]	@ 0x110
 801bcd6:	fba2 4501 	umull	r4, r5, r2, r1
 801bcda:	442b      	add	r3, r5
 801bcdc:	461d      	mov	r5, r3
    d4 = ((uint64_t) h0 * r4) + ((uint64_t) h1 * r3) + ((uint64_t) h2 * r2) +
 801bcde:	f8d7 3394 	ldr.w	r3, [r7, #916]	@ 0x394
 801bce2:	2200      	movs	r2, #0
 801bce4:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 801bce8:	f8c7 210c 	str.w	r2, [r7, #268]	@ 0x10c
 801bcec:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
 801bcf0:	2200      	movs	r2, #0
 801bcf2:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 801bcf6:	f8c7 2104 	str.w	r2, [r7, #260]	@ 0x104
 801bcfa:	e9d7 0142 	ldrd	r0, r1, [r7, #264]	@ 0x108
 801bcfe:	460b      	mov	r3, r1
 801bd00:	f8d7 2100 	ldr.w	r2, [r7, #256]	@ 0x100
 801bd04:	fb02 f203 	mul.w	r2, r2, r3
 801bd08:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 801bd0c:	e9c7 0142 	strd	r0, r1, [r7, #264]	@ 0x108
 801bd10:	4601      	mov	r1, r0
 801bd12:	fb01 f303 	mul.w	r3, r1, r3
 801bd16:	4413      	add	r3, r2
 801bd18:	f8d7 2108 	ldr.w	r2, [r7, #264]	@ 0x108
 801bd1c:	f8d7 1100 	ldr.w	r1, [r7, #256]	@ 0x100
 801bd20:	fba2 1201 	umull	r1, r2, r2, r1
 801bd24:	f8c7 20fc 	str.w	r2, [r7, #252]	@ 0xfc
 801bd28:	460a      	mov	r2, r1
 801bd2a:	f8c7 20f8 	str.w	r2, [r7, #248]	@ 0xf8
 801bd2e:	f8d7 20fc 	ldr.w	r2, [r7, #252]	@ 0xfc
 801bd32:	4413      	add	r3, r2
 801bd34:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 801bd38:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 801bd3c:	460b      	mov	r3, r1
 801bd3e:	18e3      	adds	r3, r4, r3
 801bd40:	64bb      	str	r3, [r7, #72]	@ 0x48
 801bd42:	4613      	mov	r3, r2
 801bd44:	eb45 0303 	adc.w	r3, r5, r3
 801bd48:	64fb      	str	r3, [r7, #76]	@ 0x4c
 801bd4a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 801bd4e:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	@ 0x48
 801bd52:	4602      	mov	r2, r0
 801bd54:	189b      	adds	r3, r3, r2
 801bd56:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 801bd5a:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 801bd5e:	460a      	mov	r2, r1
 801bd60:	4153      	adcs	r3, r2
 801bd62:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
         ((uint64_t) h3 * r1) + ((uint64_t) h4 * r0);
 801bd66:	f8d7 338c 	ldr.w	r3, [r7, #908]	@ 0x38c
 801bd6a:	2200      	movs	r2, #0
 801bd6c:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 801bd70:	f8c7 20f4 	str.w	r2, [r7, #244]	@ 0xf4
 801bd74:	f8d7 3384 	ldr.w	r3, [r7, #900]	@ 0x384
 801bd78:	2200      	movs	r2, #0
 801bd7a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 801bd7e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 801bd82:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	@ 0xf0
 801bd86:	460b      	mov	r3, r1
 801bd88:	f8d7 20e8 	ldr.w	r2, [r7, #232]	@ 0xe8
 801bd8c:	fb02 f203 	mul.w	r2, r2, r3
 801bd90:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 801bd94:	e9c7 013c 	strd	r0, r1, [r7, #240]	@ 0xf0
 801bd98:	4601      	mov	r1, r0
 801bd9a:	fb01 f303 	mul.w	r3, r1, r3
 801bd9e:	4413      	add	r3, r2
 801bda0:	f8d7 20f0 	ldr.w	r2, [r7, #240]	@ 0xf0
 801bda4:	f8d7 10e8 	ldr.w	r1, [r7, #232]	@ 0xe8
 801bda8:	fba2 1201 	umull	r1, r2, r2, r1
 801bdac:	f8c7 20e4 	str.w	r2, [r7, #228]	@ 0xe4
 801bdb0:	460a      	mov	r2, r1
 801bdb2:	f8c7 20e0 	str.w	r2, [r7, #224]	@ 0xe0
 801bdb6:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 801bdba:	4413      	add	r3, r2
 801bdbc:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    d4 = ((uint64_t) h0 * r4) + ((uint64_t) h1 * r3) + ((uint64_t) h2 * r2) +
 801bdc0:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 801bdc4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 801bdc8:	4602      	mov	r2, r0
 801bdca:	189b      	adds	r3, r3, r2
 801bdcc:	623b      	str	r3, [r7, #32]
 801bdce:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 801bdd2:	460a      	mov	r2, r1
 801bdd4:	4153      	adcs	r3, r2
 801bdd6:	627b      	str	r3, [r7, #36]	@ 0x24
 801bdd8:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 801bddc:	e9c7 23ce 	strd	r2, r3, [r7, #824]	@ 0x338

    /* (partial) h %= p */
    c = (unsigned long) (d0 >> 26);
 801bde0:	e9d7 23d6 	ldrd	r2, r3, [r7, #856]	@ 0x358
 801bde4:	f04f 0000 	mov.w	r0, #0
 801bde8:	f04f 0100 	mov.w	r1, #0
 801bdec:	0e90      	lsrs	r0, r2, #26
 801bdee:	ea40 1083 	orr.w	r0, r0, r3, lsl #6
 801bdf2:	0e99      	lsrs	r1, r3, #26
 801bdf4:	4603      	mov	r3, r0
 801bdf6:	f8c7 3334 	str.w	r3, [r7, #820]	@ 0x334
    h0 = (unsigned long) d0 & 0x3ffffff;
 801bdfa:	f8d7 3358 	ldr.w	r3, [r7, #856]	@ 0x358
 801bdfe:	f023 437c 	bic.w	r3, r3, #4227858432	@ 0xfc000000
 801be02:	f8c7 339c 	str.w	r3, [r7, #924]	@ 0x39c
    d1 += c;
 801be06:	f8d7 3334 	ldr.w	r3, [r7, #820]	@ 0x334
 801be0a:	2200      	movs	r2, #0
 801be0c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 801be10:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 801be14:	e9d7 23d4 	ldrd	r2, r3, [r7, #848]	@ 0x350
 801be18:	f8d7 1088 	ldr.w	r1, [r7, #136]	@ 0x88
 801be1c:	1851      	adds	r1, r2, r1
 801be1e:	61b9      	str	r1, [r7, #24]
 801be20:	f8d7 108c 	ldr.w	r1, [r7, #140]	@ 0x8c
 801be24:	414b      	adcs	r3, r1
 801be26:	61fb      	str	r3, [r7, #28]
 801be28:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 801be2c:	e9c7 23d4 	strd	r2, r3, [r7, #848]	@ 0x350
    c = (unsigned long) (d1 >> 26);
 801be30:	e9d7 23d4 	ldrd	r2, r3, [r7, #848]	@ 0x350
 801be34:	f04f 0000 	mov.w	r0, #0
 801be38:	f04f 0100 	mov.w	r1, #0
 801be3c:	0e90      	lsrs	r0, r2, #26
 801be3e:	ea40 1083 	orr.w	r0, r0, r3, lsl #6
 801be42:	0e99      	lsrs	r1, r3, #26
 801be44:	4603      	mov	r3, r0
 801be46:	f8c7 3334 	str.w	r3, [r7, #820]	@ 0x334
    h1 = (unsigned long) d1 & 0x3ffffff;
 801be4a:	f8d7 3350 	ldr.w	r3, [r7, #848]	@ 0x350
 801be4e:	f023 437c 	bic.w	r3, r3, #4227858432	@ 0xfc000000
 801be52:	f8c7 3398 	str.w	r3, [r7, #920]	@ 0x398
    d2 += c;
 801be56:	f8d7 3334 	ldr.w	r3, [r7, #820]	@ 0x334
 801be5a:	2200      	movs	r2, #0
 801be5c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 801be60:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 801be64:	e9d7 23d2 	ldrd	r2, r3, [r7, #840]	@ 0x348
 801be68:	f8d7 1080 	ldr.w	r1, [r7, #128]	@ 0x80
 801be6c:	1851      	adds	r1, r2, r1
 801be6e:	6139      	str	r1, [r7, #16]
 801be70:	f8d7 1084 	ldr.w	r1, [r7, #132]	@ 0x84
 801be74:	414b      	adcs	r3, r1
 801be76:	617b      	str	r3, [r7, #20]
 801be78:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 801be7c:	e9c7 23d2 	strd	r2, r3, [r7, #840]	@ 0x348
    c = (unsigned long) (d2 >> 26);
 801be80:	e9d7 23d2 	ldrd	r2, r3, [r7, #840]	@ 0x348
 801be84:	f04f 0000 	mov.w	r0, #0
 801be88:	f04f 0100 	mov.w	r1, #0
 801be8c:	0e90      	lsrs	r0, r2, #26
 801be8e:	ea40 1083 	orr.w	r0, r0, r3, lsl #6
 801be92:	0e99      	lsrs	r1, r3, #26
 801be94:	4603      	mov	r3, r0
 801be96:	f8c7 3334 	str.w	r3, [r7, #820]	@ 0x334
    h2 = (unsigned long) d2 & 0x3ffffff;
 801be9a:	f8d7 3348 	ldr.w	r3, [r7, #840]	@ 0x348
 801be9e:	f023 437c 	bic.w	r3, r3, #4227858432	@ 0xfc000000
 801bea2:	f8c7 3394 	str.w	r3, [r7, #916]	@ 0x394
    d3 += c;
 801bea6:	f8d7 3334 	ldr.w	r3, [r7, #820]	@ 0x334
 801beaa:	2200      	movs	r2, #0
 801beac:	67bb      	str	r3, [r7, #120]	@ 0x78
 801beae:	67fa      	str	r2, [r7, #124]	@ 0x7c
 801beb0:	e9d7 23d0 	ldrd	r2, r3, [r7, #832]	@ 0x340
 801beb4:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 801beb6:	1851      	adds	r1, r2, r1
 801beb8:	60b9      	str	r1, [r7, #8]
 801beba:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 801bebc:	414b      	adcs	r3, r1
 801bebe:	60fb      	str	r3, [r7, #12]
 801bec0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 801bec4:	e9c7 23d0 	strd	r2, r3, [r7, #832]	@ 0x340
    c = (unsigned long) (d3 >> 26);
 801bec8:	e9d7 23d0 	ldrd	r2, r3, [r7, #832]	@ 0x340
 801becc:	f04f 0000 	mov.w	r0, #0
 801bed0:	f04f 0100 	mov.w	r1, #0
 801bed4:	0e90      	lsrs	r0, r2, #26
 801bed6:	ea40 1083 	orr.w	r0, r0, r3, lsl #6
 801beda:	0e99      	lsrs	r1, r3, #26
 801bedc:	4603      	mov	r3, r0
 801bede:	f8c7 3334 	str.w	r3, [r7, #820]	@ 0x334
    h3 = (unsigned long) d3 & 0x3ffffff;
 801bee2:	f8d7 3340 	ldr.w	r3, [r7, #832]	@ 0x340
 801bee6:	f023 437c 	bic.w	r3, r3, #4227858432	@ 0xfc000000
 801beea:	f8c7 3390 	str.w	r3, [r7, #912]	@ 0x390
    d4 += c;
 801beee:	f8d7 3334 	ldr.w	r3, [r7, #820]	@ 0x334
 801bef2:	2200      	movs	r2, #0
 801bef4:	673b      	str	r3, [r7, #112]	@ 0x70
 801bef6:	677a      	str	r2, [r7, #116]	@ 0x74
 801bef8:	e9d7 23ce 	ldrd	r2, r3, [r7, #824]	@ 0x338
 801befc:	6f39      	ldr	r1, [r7, #112]	@ 0x70
 801befe:	1851      	adds	r1, r2, r1
 801bf00:	6039      	str	r1, [r7, #0]
 801bf02:	6f79      	ldr	r1, [r7, #116]	@ 0x74
 801bf04:	414b      	adcs	r3, r1
 801bf06:	607b      	str	r3, [r7, #4]
 801bf08:	e9d7 2300 	ldrd	r2, r3, [r7]
 801bf0c:	e9c7 23ce 	strd	r2, r3, [r7, #824]	@ 0x338
    c = (unsigned long) (d4 >> 26);
 801bf10:	e9d7 23ce 	ldrd	r2, r3, [r7, #824]	@ 0x338
 801bf14:	f04f 0000 	mov.w	r0, #0
 801bf18:	f04f 0100 	mov.w	r1, #0
 801bf1c:	0e90      	lsrs	r0, r2, #26
 801bf1e:	ea40 1083 	orr.w	r0, r0, r3, lsl #6
 801bf22:	0e99      	lsrs	r1, r3, #26
 801bf24:	4603      	mov	r3, r0
 801bf26:	f8c7 3334 	str.w	r3, [r7, #820]	@ 0x334
    h4 = (unsigned long) d4 & 0x3ffffff;
 801bf2a:	f8d7 3338 	ldr.w	r3, [r7, #824]	@ 0x338
 801bf2e:	f023 437c 	bic.w	r3, r3, #4227858432	@ 0xfc000000
 801bf32:	f8c7 338c 	str.w	r3, [r7, #908]	@ 0x38c
    h0 += c * 5;
 801bf36:	f8d7 2334 	ldr.w	r2, [r7, #820]	@ 0x334
 801bf3a:	4613      	mov	r3, r2
 801bf3c:	009b      	lsls	r3, r3, #2
 801bf3e:	441a      	add	r2, r3
 801bf40:	f8d7 339c 	ldr.w	r3, [r7, #924]	@ 0x39c
 801bf44:	4413      	add	r3, r2
 801bf46:	f8c7 339c 	str.w	r3, [r7, #924]	@ 0x39c
    c = (h0 >> 26);
 801bf4a:	f8d7 339c 	ldr.w	r3, [r7, #924]	@ 0x39c
 801bf4e:	0e9b      	lsrs	r3, r3, #26
 801bf50:	f8c7 3334 	str.w	r3, [r7, #820]	@ 0x334
    h0 = h0 & 0x3ffffff;
 801bf54:	f8d7 339c 	ldr.w	r3, [r7, #924]	@ 0x39c
 801bf58:	f023 437c 	bic.w	r3, r3, #4227858432	@ 0xfc000000
 801bf5c:	f8c7 339c 	str.w	r3, [r7, #924]	@ 0x39c
    h1 += c;
 801bf60:	f8d7 2398 	ldr.w	r2, [r7, #920]	@ 0x398
 801bf64:	f8d7 3334 	ldr.w	r3, [r7, #820]	@ 0x334
 801bf68:	4413      	add	r3, r2
 801bf6a:	f8c7 3398 	str.w	r3, [r7, #920]	@ 0x398

    m += poly1305_block_size;
 801bf6e:	f8d7 3328 	ldr.w	r3, [r7, #808]	@ 0x328
 801bf72:	3310      	adds	r3, #16
 801bf74:	f8c7 3328 	str.w	r3, [r7, #808]	@ 0x328
    bytes -= poly1305_block_size;
 801bf78:	f8d7 3324 	ldr.w	r3, [r7, #804]	@ 0x324
 801bf7c:	3b10      	subs	r3, #16
 801bf7e:	f8c7 3324 	str.w	r3, [r7, #804]	@ 0x324
  while (bytes >= poly1305_block_size) {
 801bf82:	f8d7 3324 	ldr.w	r3, [r7, #804]	@ 0x324
 801bf86:	2b0f      	cmp	r3, #15
 801bf88:	f63f a983 	bhi.w	801b292 <poly1305_blocks+0xce>
  }

  st->h[0] = h0;
 801bf8c:	f8d7 332c 	ldr.w	r3, [r7, #812]	@ 0x32c
 801bf90:	f8d7 239c 	ldr.w	r2, [r7, #924]	@ 0x39c
 801bf94:	615a      	str	r2, [r3, #20]
  st->h[1] = h1;
 801bf96:	f8d7 332c 	ldr.w	r3, [r7, #812]	@ 0x32c
 801bf9a:	f8d7 2398 	ldr.w	r2, [r7, #920]	@ 0x398
 801bf9e:	619a      	str	r2, [r3, #24]
  st->h[2] = h2;
 801bfa0:	f8d7 332c 	ldr.w	r3, [r7, #812]	@ 0x32c
 801bfa4:	f8d7 2394 	ldr.w	r2, [r7, #916]	@ 0x394
 801bfa8:	61da      	str	r2, [r3, #28]
  st->h[3] = h3;
 801bfaa:	f8d7 332c 	ldr.w	r3, [r7, #812]	@ 0x32c
 801bfae:	f8d7 2390 	ldr.w	r2, [r7, #912]	@ 0x390
 801bfb2:	621a      	str	r2, [r3, #32]
  st->h[4] = h4;
 801bfb4:	f8d7 332c 	ldr.w	r3, [r7, #812]	@ 0x32c
 801bfb8:	f8d7 238c 	ldr.w	r2, [r7, #908]	@ 0x38c
 801bfbc:	625a      	str	r2, [r3, #36]	@ 0x24
}
 801bfbe:	bf00      	nop
 801bfc0:	f507 7768 	add.w	r7, r7, #928	@ 0x3a0
 801bfc4:	46bd      	mov	sp, r7
 801bfc6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0801bfca <poly1305_finish>:

static POLY1305_NOINLINE void poly1305_finish(poly1305_context *ctx,
                                              unsigned char mac[16]) {
 801bfca:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 801bfce:	b0aa      	sub	sp, #168	@ 0xa8
 801bfd0:	af00      	add	r7, sp, #0
 801bfd2:	6678      	str	r0, [r7, #100]	@ 0x64
 801bfd4:	6639      	str	r1, [r7, #96]	@ 0x60
  poly1305_state_internal_t *st = (poly1305_state_internal_t *) ctx;
 801bfd6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801bfd8:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  unsigned long g0, g1, g2, g3, g4;
  uint64_t f;
  unsigned long mask;

  /* process the remaining block */
  if (st->leftover) {
 801bfdc:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 801bfe0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801bfe2:	2b00      	cmp	r3, #0
 801bfe4:	d030      	beq.n	801c048 <poly1305_finish+0x7e>
    size_t i = st->leftover;
 801bfe6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 801bfea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801bfec:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    st->buffer[i++] = 1;
 801bff0:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 801bff4:	1c53      	adds	r3, r2, #1
 801bff6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 801bffa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 801bffe:	441a      	add	r2, r3
 801c000:	2301      	movs	r3, #1
 801c002:	f882 303c 	strb.w	r3, [r2, #60]	@ 0x3c
    for (; i < poly1305_block_size; i++) st->buffer[i] = 0;
 801c006:	e00d      	b.n	801c024 <poly1305_finish+0x5a>
 801c008:	f8d7 20a0 	ldr.w	r2, [r7, #160]	@ 0xa0
 801c00c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 801c010:	4413      	add	r3, r2
 801c012:	f103 023c 	add.w	r2, r3, #60	@ 0x3c
 801c016:	2300      	movs	r3, #0
 801c018:	7013      	strb	r3, [r2, #0]
 801c01a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 801c01e:	3301      	adds	r3, #1
 801c020:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 801c024:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 801c028:	2b0f      	cmp	r3, #15
 801c02a:	d9ed      	bls.n	801c008 <poly1305_finish+0x3e>
    st->final = 1;
 801c02c:	f8d7 20a0 	ldr.w	r2, [r7, #160]	@ 0xa0
 801c030:	2301      	movs	r3, #1
 801c032:	f882 304c 	strb.w	r3, [r2, #76]	@ 0x4c
    poly1305_blocks(st, st->buffer, poly1305_block_size);
 801c036:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 801c03a:	333c      	adds	r3, #60	@ 0x3c
 801c03c:	2210      	movs	r2, #16
 801c03e:	4619      	mov	r1, r3
 801c040:	f8d7 00a0 	ldr.w	r0, [r7, #160]	@ 0xa0
 801c044:	f7ff f8be 	bl	801b1c4 <poly1305_blocks>
  }

  /* fully carry h */
  h0 = st->h[0];
 801c048:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 801c04c:	695b      	ldr	r3, [r3, #20]
 801c04e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  h1 = st->h[1];
 801c052:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 801c056:	699b      	ldr	r3, [r3, #24]
 801c058:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  h2 = st->h[2];
 801c05c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 801c060:	69db      	ldr	r3, [r3, #28]
 801c062:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  h3 = st->h[3];
 801c066:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 801c06a:	6a1b      	ldr	r3, [r3, #32]
 801c06c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  h4 = st->h[4];
 801c070:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 801c074:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801c076:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c

  c = h1 >> 26;
 801c07a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 801c07e:	0e9b      	lsrs	r3, r3, #26
 801c080:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  h1 = h1 & 0x3ffffff;
 801c084:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 801c088:	f023 437c 	bic.w	r3, r3, #4227858432	@ 0xfc000000
 801c08c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  h2 += c;
 801c090:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 801c094:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 801c098:	4413      	add	r3, r2
 801c09a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  c = h2 >> 26;
 801c09e:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 801c0a2:	0e9b      	lsrs	r3, r3, #26
 801c0a4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  h2 = h2 & 0x3ffffff;
 801c0a8:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 801c0ac:	f023 437c 	bic.w	r3, r3, #4227858432	@ 0xfc000000
 801c0b0:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  h3 += c;
 801c0b4:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 801c0b8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 801c0bc:	4413      	add	r3, r2
 801c0be:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  c = h3 >> 26;
 801c0c2:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 801c0c6:	0e9b      	lsrs	r3, r3, #26
 801c0c8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  h3 = h3 & 0x3ffffff;
 801c0cc:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 801c0d0:	f023 437c 	bic.w	r3, r3, #4227858432	@ 0xfc000000
 801c0d4:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  h4 += c;
 801c0d8:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 801c0dc:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 801c0e0:	4413      	add	r3, r2
 801c0e2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  c = h4 >> 26;
 801c0e6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 801c0ea:	0e9b      	lsrs	r3, r3, #26
 801c0ec:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  h4 = h4 & 0x3ffffff;
 801c0f0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 801c0f4:	f023 437c 	bic.w	r3, r3, #4227858432	@ 0xfc000000
 801c0f8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  h0 += c * 5;
 801c0fc:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 801c100:	4613      	mov	r3, r2
 801c102:	009b      	lsls	r3, r3, #2
 801c104:	441a      	add	r2, r3
 801c106:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 801c10a:	4413      	add	r3, r2
 801c10c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  c = h0 >> 26;
 801c110:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 801c114:	0e9b      	lsrs	r3, r3, #26
 801c116:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  h0 = h0 & 0x3ffffff;
 801c11a:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 801c11e:	f023 437c 	bic.w	r3, r3, #4227858432	@ 0xfc000000
 801c122:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  h1 += c;
 801c126:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 801c12a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 801c12e:	4413      	add	r3, r2
 801c130:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98

  /* compute h + -p */
  g0 = h0 + 5;
 801c134:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 801c138:	3305      	adds	r3, #5
 801c13a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  c = g0 >> 26;
 801c13e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 801c142:	0e9b      	lsrs	r3, r3, #26
 801c144:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  g0 &= 0x3ffffff;
 801c148:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 801c14c:	f023 437c 	bic.w	r3, r3, #4227858432	@ 0xfc000000
 801c150:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  g1 = h1 + c;
 801c154:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 801c158:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 801c15c:	4413      	add	r3, r2
 801c15e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  c = g1 >> 26;
 801c162:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 801c166:	0e9b      	lsrs	r3, r3, #26
 801c168:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  g1 &= 0x3ffffff;
 801c16c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 801c170:	f023 437c 	bic.w	r3, r3, #4227858432	@ 0xfc000000
 801c174:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  g2 = h2 + c;
 801c178:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 801c17c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 801c180:	4413      	add	r3, r2
 801c182:	67fb      	str	r3, [r7, #124]	@ 0x7c
  c = g2 >> 26;
 801c184:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 801c186:	0e9b      	lsrs	r3, r3, #26
 801c188:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  g2 &= 0x3ffffff;
 801c18c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 801c18e:	f023 437c 	bic.w	r3, r3, #4227858432	@ 0xfc000000
 801c192:	67fb      	str	r3, [r7, #124]	@ 0x7c
  g3 = h3 + c;
 801c194:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 801c198:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 801c19c:	4413      	add	r3, r2
 801c19e:	67bb      	str	r3, [r7, #120]	@ 0x78
  c = g3 >> 26;
 801c1a0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801c1a2:	0e9b      	lsrs	r3, r3, #26
 801c1a4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  g3 &= 0x3ffffff;
 801c1a8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801c1aa:	f023 437c 	bic.w	r3, r3, #4227858432	@ 0xfc000000
 801c1ae:	67bb      	str	r3, [r7, #120]	@ 0x78
  g4 = h4 + c - (1UL << 26);
 801c1b0:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 801c1b4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 801c1b8:	4413      	add	r3, r2
 801c1ba:	f103 437c 	add.w	r3, r3, #4227858432	@ 0xfc000000
 801c1be:	677b      	str	r3, [r7, #116]	@ 0x74

  /* select h if h < p, or h + -p if h >= p */
  mask = (g4 >> ((sizeof(unsigned long) * 8) - 1)) - 1;
 801c1c0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 801c1c2:	0fdb      	lsrs	r3, r3, #31
 801c1c4:	3b01      	subs	r3, #1
 801c1c6:	673b      	str	r3, [r7, #112]	@ 0x70
  g0 &= mask;
 801c1c8:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 801c1cc:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801c1ce:	4013      	ands	r3, r2
 801c1d0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  g1 &= mask;
 801c1d4:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 801c1d8:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801c1da:	4013      	ands	r3, r2
 801c1dc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  g2 &= mask;
 801c1e0:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 801c1e2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801c1e4:	4013      	ands	r3, r2
 801c1e6:	67fb      	str	r3, [r7, #124]	@ 0x7c
  g3 &= mask;
 801c1e8:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 801c1ea:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801c1ec:	4013      	ands	r3, r2
 801c1ee:	67bb      	str	r3, [r7, #120]	@ 0x78
  g4 &= mask;
 801c1f0:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 801c1f2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801c1f4:	4013      	ands	r3, r2
 801c1f6:	677b      	str	r3, [r7, #116]	@ 0x74
  mask = ~mask;
 801c1f8:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801c1fa:	43db      	mvns	r3, r3
 801c1fc:	673b      	str	r3, [r7, #112]	@ 0x70
  h0 = (h0 & mask) | g0;
 801c1fe:	f8d7 209c 	ldr.w	r2, [r7, #156]	@ 0x9c
 801c202:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801c204:	401a      	ands	r2, r3
 801c206:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 801c20a:	4313      	orrs	r3, r2
 801c20c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  h1 = (h1 & mask) | g1;
 801c210:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 801c214:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801c216:	401a      	ands	r2, r3
 801c218:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 801c21c:	4313      	orrs	r3, r2
 801c21e:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  h2 = (h2 & mask) | g2;
 801c222:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 801c226:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801c228:	401a      	ands	r2, r3
 801c22a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 801c22c:	4313      	orrs	r3, r2
 801c22e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  h3 = (h3 & mask) | g3;
 801c232:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 801c236:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801c238:	401a      	ands	r2, r3
 801c23a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801c23c:	4313      	orrs	r3, r2
 801c23e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  h4 = (h4 & mask) | g4;
 801c242:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 801c246:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801c248:	401a      	ands	r2, r3
 801c24a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 801c24c:	4313      	orrs	r3, r2
 801c24e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c

  /* h = h % (2^128) */
  h0 = ((h0) | (h1 << 26)) & 0xffffffff;
 801c252:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 801c256:	069a      	lsls	r2, r3, #26
 801c258:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 801c25c:	4313      	orrs	r3, r2
 801c25e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  h1 = ((h1 >> 6) | (h2 << 20)) & 0xffffffff;
 801c262:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 801c266:	099a      	lsrs	r2, r3, #6
 801c268:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 801c26c:	051b      	lsls	r3, r3, #20
 801c26e:	4313      	orrs	r3, r2
 801c270:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  h2 = ((h2 >> 12) | (h3 << 14)) & 0xffffffff;
 801c274:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 801c278:	0b1a      	lsrs	r2, r3, #12
 801c27a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 801c27e:	039b      	lsls	r3, r3, #14
 801c280:	4313      	orrs	r3, r2
 801c282:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  h3 = ((h3 >> 18) | (h4 << 8)) & 0xffffffff;
 801c286:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 801c28a:	0c9a      	lsrs	r2, r3, #18
 801c28c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 801c290:	021b      	lsls	r3, r3, #8
 801c292:	4313      	orrs	r3, r2
 801c294:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90

  /* mac = (h + pad) % (2^128) */
  f = (uint64_t) h0 + st->pad[0];
 801c298:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 801c29c:	2200      	movs	r2, #0
 801c29e:	65bb      	str	r3, [r7, #88]	@ 0x58
 801c2a0:	65fa      	str	r2, [r7, #92]	@ 0x5c
 801c2a2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 801c2a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801c2a8:	2200      	movs	r2, #0
 801c2aa:	64bb      	str	r3, [r7, #72]	@ 0x48
 801c2ac:	64fa      	str	r2, [r7, #76]	@ 0x4c
 801c2ae:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801c2b0:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	@ 0x48
 801c2b4:	4602      	mov	r2, r0
 801c2b6:	189b      	adds	r3, r3, r2
 801c2b8:	61bb      	str	r3, [r7, #24]
 801c2ba:	460b      	mov	r3, r1
 801c2bc:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 801c2be:	eb42 0303 	adc.w	r3, r2, r3
 801c2c2:	61fb      	str	r3, [r7, #28]
 801c2c4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 801c2c8:	e9c7 231a 	strd	r2, r3, [r7, #104]	@ 0x68
  h0 = (unsigned long) f;
 801c2cc:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801c2ce:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  f = (uint64_t) h1 + st->pad[1] + (f >> 32);
 801c2d2:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 801c2d6:	2200      	movs	r2, #0
 801c2d8:	653b      	str	r3, [r7, #80]	@ 0x50
 801c2da:	657a      	str	r2, [r7, #84]	@ 0x54
 801c2dc:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 801c2e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801c2e2:	2200      	movs	r2, #0
 801c2e4:	643b      	str	r3, [r7, #64]	@ 0x40
 801c2e6:	647a      	str	r2, [r7, #68]	@ 0x44
 801c2e8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801c2ea:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	@ 0x40
 801c2ee:	4602      	mov	r2, r0
 801c2f0:	189c      	adds	r4, r3, r2
 801c2f2:	460b      	mov	r3, r1
 801c2f4:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 801c2f6:	eb42 0303 	adc.w	r3, r2, r3
 801c2fa:	461d      	mov	r5, r3
 801c2fc:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 801c300:	f04f 0000 	mov.w	r0, #0
 801c304:	f04f 0100 	mov.w	r1, #0
 801c308:	0018      	movs	r0, r3
 801c30a:	2100      	movs	r1, #0
 801c30c:	1823      	adds	r3, r4, r0
 801c30e:	613b      	str	r3, [r7, #16]
 801c310:	eb45 0301 	adc.w	r3, r5, r1
 801c314:	617b      	str	r3, [r7, #20]
 801c316:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 801c31a:	e9c7 341a 	strd	r3, r4, [r7, #104]	@ 0x68
  h1 = (unsigned long) f;
 801c31e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801c320:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  f = (uint64_t) h2 + st->pad[2] + (f >> 32);
 801c324:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 801c328:	2200      	movs	r2, #0
 801c32a:	63bb      	str	r3, [r7, #56]	@ 0x38
 801c32c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 801c32e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 801c332:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801c334:	2200      	movs	r2, #0
 801c336:	633b      	str	r3, [r7, #48]	@ 0x30
 801c338:	637a      	str	r2, [r7, #52]	@ 0x34
 801c33a:	e9d7 450e 	ldrd	r4, r5, [r7, #56]	@ 0x38
 801c33e:	4623      	mov	r3, r4
 801c340:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 801c344:	4602      	mov	r2, r0
 801c346:	eb13 0a02 	adds.w	sl, r3, r2
 801c34a:	462b      	mov	r3, r5
 801c34c:	460a      	mov	r2, r1
 801c34e:	eb43 0b02 	adc.w	fp, r3, r2
 801c352:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 801c356:	f04f 0200 	mov.w	r2, #0
 801c35a:	f04f 0300 	mov.w	r3, #0
 801c35e:	000a      	movs	r2, r1
 801c360:	2300      	movs	r3, #0
 801c362:	eb1a 0102 	adds.w	r1, sl, r2
 801c366:	60b9      	str	r1, [r7, #8]
 801c368:	eb4b 0303 	adc.w	r3, fp, r3
 801c36c:	60fb      	str	r3, [r7, #12]
 801c36e:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 801c372:	e9c7 341a 	strd	r3, r4, [r7, #104]	@ 0x68
  h2 = (unsigned long) f;
 801c376:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801c378:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  f = (uint64_t) h3 + st->pad[3] + (f >> 32);
 801c37c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 801c380:	2200      	movs	r2, #0
 801c382:	62bb      	str	r3, [r7, #40]	@ 0x28
 801c384:	62fa      	str	r2, [r7, #44]	@ 0x2c
 801c386:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 801c38a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801c38c:	2200      	movs	r2, #0
 801c38e:	623b      	str	r3, [r7, #32]
 801c390:	627a      	str	r2, [r7, #36]	@ 0x24
 801c392:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	@ 0x28
 801c396:	4623      	mov	r3, r4
 801c398:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 801c39c:	4602      	mov	r2, r0
 801c39e:	eb13 0802 	adds.w	r8, r3, r2
 801c3a2:	462b      	mov	r3, r5
 801c3a4:	460a      	mov	r2, r1
 801c3a6:	eb43 0902 	adc.w	r9, r3, r2
 801c3aa:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 801c3ae:	f04f 0200 	mov.w	r2, #0
 801c3b2:	f04f 0300 	mov.w	r3, #0
 801c3b6:	000a      	movs	r2, r1
 801c3b8:	2300      	movs	r3, #0
 801c3ba:	eb18 0102 	adds.w	r1, r8, r2
 801c3be:	6039      	str	r1, [r7, #0]
 801c3c0:	eb49 0303 	adc.w	r3, r9, r3
 801c3c4:	607b      	str	r3, [r7, #4]
 801c3c6:	e9d7 3400 	ldrd	r3, r4, [r7]
 801c3ca:	e9c7 341a 	strd	r3, r4, [r7, #104]	@ 0x68
  h3 = (unsigned long) f;
 801c3ce:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801c3d0:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90

  U32TO8(mac + 0, h0);
 801c3d4:	f8d7 109c 	ldr.w	r1, [r7, #156]	@ 0x9c
 801c3d8:	6e38      	ldr	r0, [r7, #96]	@ 0x60
 801c3da:	f7fe fe56 	bl	801b08a <U32TO8>
  U32TO8(mac + 4, h1);
 801c3de:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 801c3e0:	3304      	adds	r3, #4
 801c3e2:	f8d7 1098 	ldr.w	r1, [r7, #152]	@ 0x98
 801c3e6:	4618      	mov	r0, r3
 801c3e8:	f7fe fe4f 	bl	801b08a <U32TO8>
  U32TO8(mac + 8, h2);
 801c3ec:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 801c3ee:	3308      	adds	r3, #8
 801c3f0:	f8d7 1094 	ldr.w	r1, [r7, #148]	@ 0x94
 801c3f4:	4618      	mov	r0, r3
 801c3f6:	f7fe fe48 	bl	801b08a <U32TO8>
  U32TO8(mac + 12, h3);
 801c3fa:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 801c3fc:	330c      	adds	r3, #12
 801c3fe:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 801c402:	4618      	mov	r0, r3
 801c404:	f7fe fe41 	bl	801b08a <U32TO8>

  /* zero out the state */
  st->h[0] = 0;
 801c408:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 801c40c:	2200      	movs	r2, #0
 801c40e:	615a      	str	r2, [r3, #20]
  st->h[1] = 0;
 801c410:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 801c414:	2200      	movs	r2, #0
 801c416:	619a      	str	r2, [r3, #24]
  st->h[2] = 0;
 801c418:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 801c41c:	2200      	movs	r2, #0
 801c41e:	61da      	str	r2, [r3, #28]
  st->h[3] = 0;
 801c420:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 801c424:	2200      	movs	r2, #0
 801c426:	621a      	str	r2, [r3, #32]
  st->h[4] = 0;
 801c428:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 801c42c:	2200      	movs	r2, #0
 801c42e:	625a      	str	r2, [r3, #36]	@ 0x24
  st->r[0] = 0;
 801c430:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 801c434:	2200      	movs	r2, #0
 801c436:	601a      	str	r2, [r3, #0]
  st->r[1] = 0;
 801c438:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 801c43c:	2200      	movs	r2, #0
 801c43e:	605a      	str	r2, [r3, #4]
  st->r[2] = 0;
 801c440:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 801c444:	2200      	movs	r2, #0
 801c446:	609a      	str	r2, [r3, #8]
  st->r[3] = 0;
 801c448:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 801c44c:	2200      	movs	r2, #0
 801c44e:	60da      	str	r2, [r3, #12]
  st->r[4] = 0;
 801c450:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 801c454:	2200      	movs	r2, #0
 801c456:	611a      	str	r2, [r3, #16]
  st->pad[0] = 0;
 801c458:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 801c45c:	2200      	movs	r2, #0
 801c45e:	629a      	str	r2, [r3, #40]	@ 0x28
  st->pad[1] = 0;
 801c460:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 801c464:	2200      	movs	r2, #0
 801c466:	62da      	str	r2, [r3, #44]	@ 0x2c
  st->pad[2] = 0;
 801c468:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 801c46c:	2200      	movs	r2, #0
 801c46e:	631a      	str	r2, [r3, #48]	@ 0x30
  st->pad[3] = 0;
 801c470:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 801c474:	2200      	movs	r2, #0
 801c476:	635a      	str	r2, [r3, #52]	@ 0x34
}
 801c478:	bf00      	nop
 801c47a:	37a8      	adds	r7, #168	@ 0xa8
 801c47c:	46bd      	mov	sp, r7
 801c47e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0801c482 <poly1305_update>:
}

#endif

static void poly1305_update(poly1305_context *ctx, const unsigned char *m,
                            size_t bytes) {
 801c482:	b580      	push	{r7, lr}
 801c484:	b088      	sub	sp, #32
 801c486:	af00      	add	r7, sp, #0
 801c488:	60f8      	str	r0, [r7, #12]
 801c48a:	60b9      	str	r1, [r7, #8]
 801c48c:	607a      	str	r2, [r7, #4]
  poly1305_state_internal_t *st = (poly1305_state_internal_t *) ctx;
 801c48e:	68fb      	ldr	r3, [r7, #12]
 801c490:	617b      	str	r3, [r7, #20]
  size_t i;

  /* handle leftover */
  if (st->leftover) {
 801c492:	697b      	ldr	r3, [r7, #20]
 801c494:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801c496:	2b00      	cmp	r3, #0
 801c498:	d03d      	beq.n	801c516 <poly1305_update+0x94>
    size_t want = (poly1305_block_size - st->leftover);
 801c49a:	697b      	ldr	r3, [r7, #20]
 801c49c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801c49e:	f1c3 0310 	rsb	r3, r3, #16
 801c4a2:	61bb      	str	r3, [r7, #24]
    if (want > bytes) want = bytes;
 801c4a4:	69ba      	ldr	r2, [r7, #24]
 801c4a6:	687b      	ldr	r3, [r7, #4]
 801c4a8:	429a      	cmp	r2, r3
 801c4aa:	d901      	bls.n	801c4b0 <poly1305_update+0x2e>
 801c4ac:	687b      	ldr	r3, [r7, #4]
 801c4ae:	61bb      	str	r3, [r7, #24]
    for (i = 0; i < want; i++) st->buffer[st->leftover + i] = m[i];
 801c4b0:	2300      	movs	r3, #0
 801c4b2:	61fb      	str	r3, [r7, #28]
 801c4b4:	e00f      	b.n	801c4d6 <poly1305_update+0x54>
 801c4b6:	68ba      	ldr	r2, [r7, #8]
 801c4b8:	69fb      	ldr	r3, [r7, #28]
 801c4ba:	441a      	add	r2, r3
 801c4bc:	697b      	ldr	r3, [r7, #20]
 801c4be:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 801c4c0:	69fb      	ldr	r3, [r7, #28]
 801c4c2:	440b      	add	r3, r1
 801c4c4:	7811      	ldrb	r1, [r2, #0]
 801c4c6:	697a      	ldr	r2, [r7, #20]
 801c4c8:	4413      	add	r3, r2
 801c4ca:	460a      	mov	r2, r1
 801c4cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 801c4d0:	69fb      	ldr	r3, [r7, #28]
 801c4d2:	3301      	adds	r3, #1
 801c4d4:	61fb      	str	r3, [r7, #28]
 801c4d6:	69fa      	ldr	r2, [r7, #28]
 801c4d8:	69bb      	ldr	r3, [r7, #24]
 801c4da:	429a      	cmp	r2, r3
 801c4dc:	d3eb      	bcc.n	801c4b6 <poly1305_update+0x34>
    bytes -= want;
 801c4de:	687a      	ldr	r2, [r7, #4]
 801c4e0:	69bb      	ldr	r3, [r7, #24]
 801c4e2:	1ad3      	subs	r3, r2, r3
 801c4e4:	607b      	str	r3, [r7, #4]
    m += want;
 801c4e6:	68ba      	ldr	r2, [r7, #8]
 801c4e8:	69bb      	ldr	r3, [r7, #24]
 801c4ea:	4413      	add	r3, r2
 801c4ec:	60bb      	str	r3, [r7, #8]
    st->leftover += want;
 801c4ee:	697b      	ldr	r3, [r7, #20]
 801c4f0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 801c4f2:	69bb      	ldr	r3, [r7, #24]
 801c4f4:	441a      	add	r2, r3
 801c4f6:	697b      	ldr	r3, [r7, #20]
 801c4f8:	639a      	str	r2, [r3, #56]	@ 0x38
    if (st->leftover < poly1305_block_size) return;
 801c4fa:	697b      	ldr	r3, [r7, #20]
 801c4fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801c4fe:	2b0f      	cmp	r3, #15
 801c500:	d93e      	bls.n	801c580 <poly1305_update+0xfe>
    poly1305_blocks(st, st->buffer, poly1305_block_size);
 801c502:	697b      	ldr	r3, [r7, #20]
 801c504:	333c      	adds	r3, #60	@ 0x3c
 801c506:	2210      	movs	r2, #16
 801c508:	4619      	mov	r1, r3
 801c50a:	6978      	ldr	r0, [r7, #20]
 801c50c:	f7fe fe5a 	bl	801b1c4 <poly1305_blocks>
    st->leftover = 0;
 801c510:	697b      	ldr	r3, [r7, #20]
 801c512:	2200      	movs	r2, #0
 801c514:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* process full blocks */
  if (bytes >= poly1305_block_size) {
 801c516:	687b      	ldr	r3, [r7, #4]
 801c518:	2b0f      	cmp	r3, #15
 801c51a:	d910      	bls.n	801c53e <poly1305_update+0xbc>
    size_t want = (bytes & (size_t) ~(poly1305_block_size - 1));
 801c51c:	687b      	ldr	r3, [r7, #4]
 801c51e:	f023 030f 	bic.w	r3, r3, #15
 801c522:	613b      	str	r3, [r7, #16]
    poly1305_blocks(st, m, want);
 801c524:	693a      	ldr	r2, [r7, #16]
 801c526:	68b9      	ldr	r1, [r7, #8]
 801c528:	6978      	ldr	r0, [r7, #20]
 801c52a:	f7fe fe4b 	bl	801b1c4 <poly1305_blocks>
    m += want;
 801c52e:	68ba      	ldr	r2, [r7, #8]
 801c530:	693b      	ldr	r3, [r7, #16]
 801c532:	4413      	add	r3, r2
 801c534:	60bb      	str	r3, [r7, #8]
    bytes -= want;
 801c536:	687a      	ldr	r2, [r7, #4]
 801c538:	693b      	ldr	r3, [r7, #16]
 801c53a:	1ad3      	subs	r3, r2, r3
 801c53c:	607b      	str	r3, [r7, #4]
  }

  /* store leftover */
  if (bytes) {
 801c53e:	687b      	ldr	r3, [r7, #4]
 801c540:	2b00      	cmp	r3, #0
 801c542:	d01e      	beq.n	801c582 <poly1305_update+0x100>
    for (i = 0; i < bytes; i++) st->buffer[st->leftover + i] = m[i];
 801c544:	2300      	movs	r3, #0
 801c546:	61fb      	str	r3, [r7, #28]
 801c548:	e00f      	b.n	801c56a <poly1305_update+0xe8>
 801c54a:	68ba      	ldr	r2, [r7, #8]
 801c54c:	69fb      	ldr	r3, [r7, #28]
 801c54e:	441a      	add	r2, r3
 801c550:	697b      	ldr	r3, [r7, #20]
 801c552:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 801c554:	69fb      	ldr	r3, [r7, #28]
 801c556:	440b      	add	r3, r1
 801c558:	7811      	ldrb	r1, [r2, #0]
 801c55a:	697a      	ldr	r2, [r7, #20]
 801c55c:	4413      	add	r3, r2
 801c55e:	460a      	mov	r2, r1
 801c560:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 801c564:	69fb      	ldr	r3, [r7, #28]
 801c566:	3301      	adds	r3, #1
 801c568:	61fb      	str	r3, [r7, #28]
 801c56a:	69fa      	ldr	r2, [r7, #28]
 801c56c:	687b      	ldr	r3, [r7, #4]
 801c56e:	429a      	cmp	r2, r3
 801c570:	d3eb      	bcc.n	801c54a <poly1305_update+0xc8>
    st->leftover += bytes;
 801c572:	697b      	ldr	r3, [r7, #20]
 801c574:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 801c576:	687b      	ldr	r3, [r7, #4]
 801c578:	441a      	add	r2, r3
 801c57a:	697b      	ldr	r3, [r7, #20]
 801c57c:	639a      	str	r2, [r3, #56]	@ 0x38
 801c57e:	e000      	b.n	801c582 <poly1305_update+0x100>
    if (st->leftover < poly1305_block_size) return;
 801c580:	bf00      	nop
  }
}
 801c582:	3720      	adds	r7, #32
 801c584:	46bd      	mov	sp, r7
 801c586:	bd80      	pop	{r7, pc}

0801c588 <pad_if_needed>:
#define __CHACHA20_BLOCK_SIZE (64)
#define __POLY1305_KEY_SIZE (32)

static PORTABLE_8439_DECL uint8_t __ZEROES[16] = {0};
static PORTABLE_8439_DECL void pad_if_needed(poly1305_context *ctx,
                                             size_t size) {
 801c588:	b580      	push	{r7, lr}
 801c58a:	b084      	sub	sp, #16
 801c58c:	af00      	add	r7, sp, #0
 801c58e:	6078      	str	r0, [r7, #4]
 801c590:	6039      	str	r1, [r7, #0]
  size_t padding = size % 16;
 801c592:	683b      	ldr	r3, [r7, #0]
 801c594:	f003 030f 	and.w	r3, r3, #15
 801c598:	60fb      	str	r3, [r7, #12]
  if (padding != 0) {
 801c59a:	68fb      	ldr	r3, [r7, #12]
 801c59c:	2b00      	cmp	r3, #0
 801c59e:	d007      	beq.n	801c5b0 <pad_if_needed+0x28>
    poly1305_update(ctx, __ZEROES, 16 - padding);
 801c5a0:	68fb      	ldr	r3, [r7, #12]
 801c5a2:	f1c3 0310 	rsb	r3, r3, #16
 801c5a6:	461a      	mov	r2, r3
 801c5a8:	4903      	ldr	r1, [pc, #12]	@ (801c5b8 <pad_if_needed+0x30>)
 801c5aa:	6878      	ldr	r0, [r7, #4]
 801c5ac:	f7ff ff69 	bl	801c482 <poly1305_update>
  }
}
 801c5b0:	bf00      	nop
 801c5b2:	3710      	adds	r7, #16
 801c5b4:	46bd      	mov	sp, r7
 801c5b6:	bd80      	pop	{r7, pc}
 801c5b8:	20011ab8 	.word	0x20011ab8

0801c5bc <write_64bit_int>:

#define __u8(v) ((uint8_t) ((v) &0xFF))

// TODO: make this depending on the unaligned/native read size possible
static PORTABLE_8439_DECL void write_64bit_int(poly1305_context *ctx,
                                               uint64_t value) {
 801c5bc:	b580      	push	{r7, lr}
 801c5be:	b086      	sub	sp, #24
 801c5c0:	af00      	add	r7, sp, #0
 801c5c2:	60f8      	str	r0, [r7, #12]
 801c5c4:	e9c7 2300 	strd	r2, r3, [r7]
  uint8_t result[8];
  result[0] = __u8(value);
 801c5c8:	783b      	ldrb	r3, [r7, #0]
 801c5ca:	743b      	strb	r3, [r7, #16]
  result[1] = __u8(value >> 8);
 801c5cc:	e9d7 0100 	ldrd	r0, r1, [r7]
 801c5d0:	f04f 0200 	mov.w	r2, #0
 801c5d4:	f04f 0300 	mov.w	r3, #0
 801c5d8:	0a02      	lsrs	r2, r0, #8
 801c5da:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 801c5de:	0a0b      	lsrs	r3, r1, #8
 801c5e0:	b2d3      	uxtb	r3, r2
 801c5e2:	747b      	strb	r3, [r7, #17]
  result[2] = __u8(value >> 16);
 801c5e4:	e9d7 0100 	ldrd	r0, r1, [r7]
 801c5e8:	f04f 0200 	mov.w	r2, #0
 801c5ec:	f04f 0300 	mov.w	r3, #0
 801c5f0:	0c02      	lsrs	r2, r0, #16
 801c5f2:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 801c5f6:	0c0b      	lsrs	r3, r1, #16
 801c5f8:	b2d3      	uxtb	r3, r2
 801c5fa:	74bb      	strb	r3, [r7, #18]
  result[3] = __u8(value >> 24);
 801c5fc:	e9d7 0100 	ldrd	r0, r1, [r7]
 801c600:	f04f 0200 	mov.w	r2, #0
 801c604:	f04f 0300 	mov.w	r3, #0
 801c608:	0e02      	lsrs	r2, r0, #24
 801c60a:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 801c60e:	0e0b      	lsrs	r3, r1, #24
 801c610:	b2d3      	uxtb	r3, r2
 801c612:	74fb      	strb	r3, [r7, #19]
  result[4] = __u8(value >> 32);
 801c614:	e9d7 0100 	ldrd	r0, r1, [r7]
 801c618:	f04f 0200 	mov.w	r2, #0
 801c61c:	f04f 0300 	mov.w	r3, #0
 801c620:	000a      	movs	r2, r1
 801c622:	2300      	movs	r3, #0
 801c624:	b2d3      	uxtb	r3, r2
 801c626:	753b      	strb	r3, [r7, #20]
  result[5] = __u8(value >> 40);
 801c628:	e9d7 0100 	ldrd	r0, r1, [r7]
 801c62c:	f04f 0200 	mov.w	r2, #0
 801c630:	f04f 0300 	mov.w	r3, #0
 801c634:	0a0a      	lsrs	r2, r1, #8
 801c636:	2300      	movs	r3, #0
 801c638:	b2d3      	uxtb	r3, r2
 801c63a:	757b      	strb	r3, [r7, #21]
  result[6] = __u8(value >> 48);
 801c63c:	e9d7 0100 	ldrd	r0, r1, [r7]
 801c640:	f04f 0200 	mov.w	r2, #0
 801c644:	f04f 0300 	mov.w	r3, #0
 801c648:	0c0a      	lsrs	r2, r1, #16
 801c64a:	2300      	movs	r3, #0
 801c64c:	b2d3      	uxtb	r3, r2
 801c64e:	75bb      	strb	r3, [r7, #22]
  result[7] = __u8(value >> 56);
 801c650:	e9d7 0100 	ldrd	r0, r1, [r7]
 801c654:	f04f 0200 	mov.w	r2, #0
 801c658:	f04f 0300 	mov.w	r3, #0
 801c65c:	0e0a      	lsrs	r2, r1, #24
 801c65e:	2300      	movs	r3, #0
 801c660:	b2d3      	uxtb	r3, r2
 801c662:	75fb      	strb	r3, [r7, #23]
  poly1305_update(ctx, result, 8);
 801c664:	f107 0310 	add.w	r3, r7, #16
 801c668:	2208      	movs	r2, #8
 801c66a:	4619      	mov	r1, r3
 801c66c:	68f8      	ldr	r0, [r7, #12]
 801c66e:	f7ff ff08 	bl	801c482 <poly1305_update>
}
 801c672:	bf00      	nop
 801c674:	3718      	adds	r7, #24
 801c676:	46bd      	mov	sp, r7
 801c678:	bd80      	pop	{r7, pc}

0801c67a <poly1305_calculate_mac>:

static PORTABLE_8439_DECL void poly1305_calculate_mac(
    uint8_t *mac, const uint8_t *cipher_text, size_t cipher_text_size,
    const uint8_t key[RFC_8439_KEY_SIZE],
    const uint8_t nonce[RFC_8439_NONCE_SIZE], const uint8_t *ad,
    size_t ad_size) {
 801c67a:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 801c67e:	b0b0      	sub	sp, #192	@ 0xc0
 801c680:	af00      	add	r7, sp, #0
 801c682:	60f8      	str	r0, [r7, #12]
 801c684:	60b9      	str	r1, [r7, #8]
 801c686:	607a      	str	r2, [r7, #4]
 801c688:	603b      	str	r3, [r7, #0]
  // init poly key (section 2.6)
  uint8_t poly_key[__POLY1305_KEY_SIZE] = {0};
 801c68a:	f107 03a0 	add.w	r3, r7, #160	@ 0xa0
 801c68e:	2220      	movs	r2, #32
 801c690:	2100      	movs	r1, #0
 801c692:	4618      	mov	r0, r3
 801c694:	f007 fefa 	bl	802448c <memset>
  poly1305_context poly_ctx;
  rfc8439_keygen(poly_key, key, nonce);
 801c698:	f107 03a0 	add.w	r3, r7, #160	@ 0xa0
 801c69c:	f8d7 20d8 	ldr.w	r2, [r7, #216]	@ 0xd8
 801c6a0:	6839      	ldr	r1, [r7, #0]
 801c6a2:	4618      	mov	r0, r3
 801c6a4:	f7fe fcb5 	bl	801b012 <rfc8439_keygen>
  // start poly1305 mac
  poly1305_init(&poly_ctx, poly_key);
 801c6a8:	f107 02a0 	add.w	r2, r7, #160	@ 0xa0
 801c6ac:	f107 0314 	add.w	r3, r7, #20
 801c6b0:	4611      	mov	r1, r2
 801c6b2:	4618      	mov	r0, r3
 801c6b4:	f7fe fd0a 	bl	801b0cc <poly1305_init>

  if (ad != NULL && ad_size > 0) {
 801c6b8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 801c6bc:	2b00      	cmp	r3, #0
 801c6be:	d013      	beq.n	801c6e8 <poly1305_calculate_mac+0x6e>
 801c6c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 801c6c4:	2b00      	cmp	r3, #0
 801c6c6:	d00f      	beq.n	801c6e8 <poly1305_calculate_mac+0x6e>
    // write AD if present
    poly1305_update(&poly_ctx, ad, ad_size);
 801c6c8:	f107 0314 	add.w	r3, r7, #20
 801c6cc:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 801c6d0:	f8d7 10dc 	ldr.w	r1, [r7, #220]	@ 0xdc
 801c6d4:	4618      	mov	r0, r3
 801c6d6:	f7ff fed4 	bl	801c482 <poly1305_update>
    pad_if_needed(&poly_ctx, ad_size);
 801c6da:	f107 0314 	add.w	r3, r7, #20
 801c6de:	f8d7 10e0 	ldr.w	r1, [r7, #224]	@ 0xe0
 801c6e2:	4618      	mov	r0, r3
 801c6e4:	f7ff ff50 	bl	801c588 <pad_if_needed>
  }

  // now write the cipher text
  poly1305_update(&poly_ctx, cipher_text, cipher_text_size);
 801c6e8:	f107 0314 	add.w	r3, r7, #20
 801c6ec:	687a      	ldr	r2, [r7, #4]
 801c6ee:	68b9      	ldr	r1, [r7, #8]
 801c6f0:	4618      	mov	r0, r3
 801c6f2:	f7ff fec6 	bl	801c482 <poly1305_update>
  pad_if_needed(&poly_ctx, cipher_text_size);
 801c6f6:	f107 0314 	add.w	r3, r7, #20
 801c6fa:	6879      	ldr	r1, [r7, #4]
 801c6fc:	4618      	mov	r0, r3
 801c6fe:	f7ff ff43 	bl	801c588 <pad_if_needed>

  // write sizes
  write_64bit_int(&poly_ctx, ad_size);
 801c702:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 801c706:	2200      	movs	r2, #0
 801c708:	4698      	mov	r8, r3
 801c70a:	4691      	mov	r9, r2
 801c70c:	f107 0114 	add.w	r1, r7, #20
 801c710:	4642      	mov	r2, r8
 801c712:	464b      	mov	r3, r9
 801c714:	4608      	mov	r0, r1
 801c716:	f7ff ff51 	bl	801c5bc <write_64bit_int>
  write_64bit_int(&poly_ctx, cipher_text_size);
 801c71a:	687b      	ldr	r3, [r7, #4]
 801c71c:	2200      	movs	r2, #0
 801c71e:	461c      	mov	r4, r3
 801c720:	4615      	mov	r5, r2
 801c722:	f107 0114 	add.w	r1, r7, #20
 801c726:	4622      	mov	r2, r4
 801c728:	462b      	mov	r3, r5
 801c72a:	4608      	mov	r0, r1
 801c72c:	f7ff ff46 	bl	801c5bc <write_64bit_int>

  // calculate MAC
  poly1305_finish(&poly_ctx, mac);
 801c730:	f107 0314 	add.w	r3, r7, #20
 801c734:	68f9      	ldr	r1, [r7, #12]
 801c736:	4618      	mov	r0, r3
 801c738:	f7ff fc47 	bl	801bfca <poly1305_finish>
}
 801c73c:	bf00      	nop
 801c73e:	37c0      	adds	r7, #192	@ 0xc0
 801c740:	46bd      	mov	sp, r7
 801c742:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

0801c746 <mg_chacha20_poly1305_encrypt>:

PORTABLE_8439_DECL size_t mg_chacha20_poly1305_encrypt(
    uint8_t *restrict cipher_text, const uint8_t key[RFC_8439_KEY_SIZE],
    const uint8_t nonce[RFC_8439_NONCE_SIZE], const uint8_t *restrict ad,
    size_t ad_size, const uint8_t *restrict plain_text,
    size_t plain_text_size) {
 801c746:	b580      	push	{r7, lr}
 801c748:	b08a      	sub	sp, #40	@ 0x28
 801c74a:	af04      	add	r7, sp, #16
 801c74c:	60f8      	str	r0, [r7, #12]
 801c74e:	60b9      	str	r1, [r7, #8]
 801c750:	607a      	str	r2, [r7, #4]
 801c752:	603b      	str	r3, [r7, #0]
  size_t new_size = plain_text_size + RFC_8439_TAG_SIZE;
 801c754:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c756:	3310      	adds	r3, #16
 801c758:	617b      	str	r3, [r7, #20]
  if (MG_OVERLAPPING(plain_text, plain_text_size, cipher_text, new_size)) {
 801c75a:	68fa      	ldr	r2, [r7, #12]
 801c75c:	697b      	ldr	r3, [r7, #20]
 801c75e:	4413      	add	r3, r2
 801c760:	461a      	mov	r2, r3
 801c762:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c764:	429a      	cmp	r2, r3
 801c766:	d909      	bls.n	801c77c <mg_chacha20_poly1305_encrypt+0x36>
 801c768:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801c76a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c76c:	4413      	add	r3, r2
 801c76e:	461a      	mov	r2, r3
 801c770:	68fb      	ldr	r3, [r7, #12]
 801c772:	429a      	cmp	r2, r3
 801c774:	d902      	bls.n	801c77c <mg_chacha20_poly1305_encrypt+0x36>
    return (size_t) -1;
 801c776:	f04f 33ff 	mov.w	r3, #4294967295
 801c77a:	e018      	b.n	801c7ae <mg_chacha20_poly1305_encrypt+0x68>
  }
  chacha20_xor_stream(cipher_text, plain_text, plain_text_size, key, nonce, 1);
 801c77c:	2301      	movs	r3, #1
 801c77e:	9301      	str	r3, [sp, #4]
 801c780:	687b      	ldr	r3, [r7, #4]
 801c782:	9300      	str	r3, [sp, #0]
 801c784:	68bb      	ldr	r3, [r7, #8]
 801c786:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801c788:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 801c78a:	68f8      	ldr	r0, [r7, #12]
 801c78c:	f7fe fbc9 	bl	801af22 <chacha20_xor_stream>
  poly1305_calculate_mac(cipher_text + plain_text_size, cipher_text,
 801c790:	68fa      	ldr	r2, [r7, #12]
 801c792:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c794:	18d0      	adds	r0, r2, r3
 801c796:	6a3b      	ldr	r3, [r7, #32]
 801c798:	9302      	str	r3, [sp, #8]
 801c79a:	683b      	ldr	r3, [r7, #0]
 801c79c:	9301      	str	r3, [sp, #4]
 801c79e:	687b      	ldr	r3, [r7, #4]
 801c7a0:	9300      	str	r3, [sp, #0]
 801c7a2:	68bb      	ldr	r3, [r7, #8]
 801c7a4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801c7a6:	68f9      	ldr	r1, [r7, #12]
 801c7a8:	f7ff ff67 	bl	801c67a <poly1305_calculate_mac>
                         plain_text_size, key, nonce, ad, ad_size);
  return new_size;
 801c7ac:	697b      	ldr	r3, [r7, #20]
}
 801c7ae:	4618      	mov	r0, r3
 801c7b0:	3718      	adds	r7, #24
 801c7b2:	46bd      	mov	sp, r7
 801c7b4:	bd80      	pop	{r7, pc}

0801c7b6 <mg_chacha20_poly1305_decrypt>:

PORTABLE_8439_DECL size_t mg_chacha20_poly1305_decrypt(
    uint8_t *restrict plain_text, const uint8_t key[RFC_8439_KEY_SIZE],
    const uint8_t nonce[RFC_8439_NONCE_SIZE],
    const uint8_t *restrict cipher_text, size_t cipher_text_size) {
 801c7b6:	b580      	push	{r7, lr}
 801c7b8:	b088      	sub	sp, #32
 801c7ba:	af02      	add	r7, sp, #8
 801c7bc:	60f8      	str	r0, [r7, #12]
 801c7be:	60b9      	str	r1, [r7, #8]
 801c7c0:	607a      	str	r2, [r7, #4]
 801c7c2:	603b      	str	r3, [r7, #0]
  // first we calculate the mac and see if it lines up, only then do we decrypt
  size_t actual_size = cipher_text_size - RFC_8439_TAG_SIZE;
 801c7c4:	6a3b      	ldr	r3, [r7, #32]
 801c7c6:	3b10      	subs	r3, #16
 801c7c8:	617b      	str	r3, [r7, #20]
  if (MG_OVERLAPPING(plain_text, actual_size, cipher_text, cipher_text_size)) {
 801c7ca:	683a      	ldr	r2, [r7, #0]
 801c7cc:	6a3b      	ldr	r3, [r7, #32]
 801c7ce:	4413      	add	r3, r2
 801c7d0:	461a      	mov	r2, r3
 801c7d2:	68fb      	ldr	r3, [r7, #12]
 801c7d4:	429a      	cmp	r2, r3
 801c7d6:	d909      	bls.n	801c7ec <mg_chacha20_poly1305_decrypt+0x36>
 801c7d8:	68fa      	ldr	r2, [r7, #12]
 801c7da:	697b      	ldr	r3, [r7, #20]
 801c7dc:	4413      	add	r3, r2
 801c7de:	461a      	mov	r2, r3
 801c7e0:	683b      	ldr	r3, [r7, #0]
 801c7e2:	429a      	cmp	r2, r3
 801c7e4:	d902      	bls.n	801c7ec <mg_chacha20_poly1305_decrypt+0x36>
    return (size_t) -1;
 801c7e6:	f04f 33ff 	mov.w	r3, #4294967295
 801c7ea:	e00a      	b.n	801c802 <mg_chacha20_poly1305_decrypt+0x4c>
  }

  chacha20_xor_stream(plain_text, cipher_text, actual_size, key, nonce, 1);
 801c7ec:	2301      	movs	r3, #1
 801c7ee:	9301      	str	r3, [sp, #4]
 801c7f0:	687b      	ldr	r3, [r7, #4]
 801c7f2:	9300      	str	r3, [sp, #0]
 801c7f4:	68bb      	ldr	r3, [r7, #8]
 801c7f6:	697a      	ldr	r2, [r7, #20]
 801c7f8:	6839      	ldr	r1, [r7, #0]
 801c7fa:	68f8      	ldr	r0, [r7, #12]
 801c7fc:	f7fe fb91 	bl	801af22 <chacha20_xor_stream>
  return actual_size;
 801c800:	697b      	ldr	r3, [r7, #20]
}
 801c802:	4618      	mov	r0, r3
 801c804:	3718      	adds	r7, #24
 801c806:	46bd      	mov	sp, r7
 801c808:	bd80      	pop	{r7, pc}

0801c80a <bi_initialize>:

/**
 * @brief Start a new bigint context.
 * @return A bigint context.
 */
NS_INTERNAL BI_CTX *bi_initialize(void) {
 801c80a:	b580      	push	{r7, lr}
 801c80c:	b082      	sub	sp, #8
 801c80e:	af00      	add	r7, sp, #0
  /* mg_calloc() sets everything to zero */
  BI_CTX *ctx = (BI_CTX *) mg_calloc(1, sizeof(BI_CTX));
 801c810:	2138      	movs	r1, #56	@ 0x38
 801c812:	2001      	movs	r0, #1
 801c814:	f7ea fafd 	bl	8006e12 <mg_calloc>
 801c818:	6078      	str	r0, [r7, #4]

  /* the radix */
  ctx->bi_radix = alloc(ctx, 2);
 801c81a:	2102      	movs	r1, #2
 801c81c:	6878      	ldr	r0, [r7, #4]
 801c81e:	f000 ff71 	bl	801d704 <alloc>
 801c822:	4602      	mov	r2, r0
 801c824:	687b      	ldr	r3, [r7, #4]
 801c826:	609a      	str	r2, [r3, #8]
  ctx->bi_radix->comps[0] = 0;
 801c828:	687b      	ldr	r3, [r7, #4]
 801c82a:	689b      	ldr	r3, [r3, #8]
 801c82c:	68db      	ldr	r3, [r3, #12]
 801c82e:	2200      	movs	r2, #0
 801c830:	601a      	str	r2, [r3, #0]
  ctx->bi_radix->comps[1] = 1;
 801c832:	687b      	ldr	r3, [r7, #4]
 801c834:	689b      	ldr	r3, [r3, #8]
 801c836:	68db      	ldr	r3, [r3, #12]
 801c838:	3304      	adds	r3, #4
 801c83a:	2201      	movs	r2, #1
 801c83c:	601a      	str	r2, [r3, #0]
  bi_permanent(ctx->bi_radix);
 801c83e:	687b      	ldr	r3, [r7, #4]
 801c840:	689b      	ldr	r3, [r3, #8]
 801c842:	4618      	mov	r0, r3
 801c844:	f000 f864 	bl	801c910 <bi_permanent>
  return ctx;
 801c848:	687b      	ldr	r3, [r7, #4]
}
 801c84a:	4618      	mov	r0, r3
 801c84c:	3708      	adds	r7, #8
 801c84e:	46bd      	mov	sp, r7
 801c850:	bd80      	pop	{r7, pc}

0801c852 <bi_terminate>:
 *
 * Free up any used memory - a check is done if all objects were not
 * properly freed.
 * @param ctx [in]   The bigint session context.
 */
NS_INTERNAL void bi_terminate(BI_CTX *ctx) {
 801c852:	b580      	push	{r7, lr}
 801c854:	b082      	sub	sp, #8
 801c856:	af00      	add	r7, sp, #0
 801c858:	6078      	str	r0, [r7, #4]
  bi_depermanent(ctx->bi_radix);
 801c85a:	687b      	ldr	r3, [r7, #4]
 801c85c:	689b      	ldr	r3, [r3, #8]
 801c85e:	4618      	mov	r0, r3
 801c860:	f000 f86a 	bl	801c938 <bi_depermanent>
  bi_free(ctx, ctx->bi_radix);
 801c864:	687b      	ldr	r3, [r7, #4]
 801c866:	689b      	ldr	r3, [r3, #8]
 801c868:	4619      	mov	r1, r3
 801c86a:	6878      	ldr	r0, [r7, #4]
 801c86c:	f000 f878 	bl	801c960 <bi_free>

  if (ctx->active_count != 0) {
 801c870:	687b      	ldr	r3, [r7, #4]
 801c872:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801c874:	2b00      	cmp	r3, #0
 801c876:	d001      	beq.n	801c87c <bi_terminate+0x2a>
#ifdef CONFIG_SSL_FULL_MODE
    printf("bi_terminate: there were %d un-freed bigints\n", ctx->active_count);
#endif
    abort();
 801c878:	f007 fa04 	bl	8023c84 <abort>
  }

  bi_clear_cache(ctx);
 801c87c:	6878      	ldr	r0, [r7, #4]
 801c87e:	f000 f807 	bl	801c890 <bi_clear_cache>
  mg_free(ctx);
 801c882:	6878      	ldr	r0, [r7, #4]
 801c884:	f7ea faba 	bl	8006dfc <mg_free>
}
 801c888:	bf00      	nop
 801c88a:	3708      	adds	r7, #8
 801c88c:	46bd      	mov	sp, r7
 801c88e:	bd80      	pop	{r7, pc}

0801c890 <bi_clear_cache>:

/**
 *@brief Clear the memory cache.
 */
NS_INTERNAL void bi_clear_cache(BI_CTX *ctx) {
 801c890:	b580      	push	{r7, lr}
 801c892:	b084      	sub	sp, #16
 801c894:	af00      	add	r7, sp, #0
 801c896:	6078      	str	r0, [r7, #4]
  bigint *p, *pn;

  if (ctx->free_list == NULL) return;
 801c898:	687b      	ldr	r3, [r7, #4]
 801c89a:	685b      	ldr	r3, [r3, #4]
 801c89c:	2b00      	cmp	r3, #0
 801c89e:	d01a      	beq.n	801c8d6 <bi_clear_cache+0x46>

  for (p = ctx->free_list; p != NULL; p = pn) {
 801c8a0:	687b      	ldr	r3, [r7, #4]
 801c8a2:	685b      	ldr	r3, [r3, #4]
 801c8a4:	60fb      	str	r3, [r7, #12]
 801c8a6:	e00c      	b.n	801c8c2 <bi_clear_cache+0x32>
    pn = p->next;
 801c8a8:	68fb      	ldr	r3, [r7, #12]
 801c8aa:	681b      	ldr	r3, [r3, #0]
 801c8ac:	60bb      	str	r3, [r7, #8]
    mg_free(p->comps);
 801c8ae:	68fb      	ldr	r3, [r7, #12]
 801c8b0:	68db      	ldr	r3, [r3, #12]
 801c8b2:	4618      	mov	r0, r3
 801c8b4:	f7ea faa2 	bl	8006dfc <mg_free>
    mg_free(p);
 801c8b8:	68f8      	ldr	r0, [r7, #12]
 801c8ba:	f7ea fa9f 	bl	8006dfc <mg_free>
  for (p = ctx->free_list; p != NULL; p = pn) {
 801c8be:	68bb      	ldr	r3, [r7, #8]
 801c8c0:	60fb      	str	r3, [r7, #12]
 801c8c2:	68fb      	ldr	r3, [r7, #12]
 801c8c4:	2b00      	cmp	r3, #0
 801c8c6:	d1ef      	bne.n	801c8a8 <bi_clear_cache+0x18>
  }

  ctx->free_count = 0;
 801c8c8:	687b      	ldr	r3, [r7, #4]
 801c8ca:	2200      	movs	r2, #0
 801c8cc:	631a      	str	r2, [r3, #48]	@ 0x30
  ctx->free_list = NULL;
 801c8ce:	687b      	ldr	r3, [r7, #4]
 801c8d0:	2200      	movs	r2, #0
 801c8d2:	605a      	str	r2, [r3, #4]
 801c8d4:	e000      	b.n	801c8d8 <bi_clear_cache+0x48>
  if (ctx->free_list == NULL) return;
 801c8d6:	bf00      	nop
}
 801c8d8:	3710      	adds	r7, #16
 801c8da:	46bd      	mov	sp, r7
 801c8dc:	bd80      	pop	{r7, pc}
	...

0801c8e0 <bi_copy>:
 * @brief Increment the number of references to this object.
 * It does not do a full copy.
 * @param bi [in]   The bigint to copy.
 * @return A reference to the same bigint.
 */
NS_INTERNAL bigint *bi_copy(bigint *bi) {
 801c8e0:	b480      	push	{r7}
 801c8e2:	b083      	sub	sp, #12
 801c8e4:	af00      	add	r7, sp, #0
 801c8e6:	6078      	str	r0, [r7, #4]
  check(bi);
  if (bi->refs != PERMANENT) bi->refs++;
 801c8e8:	687b      	ldr	r3, [r7, #4]
 801c8ea:	689b      	ldr	r3, [r3, #8]
 801c8ec:	4a07      	ldr	r2, [pc, #28]	@ (801c90c <bi_copy+0x2c>)
 801c8ee:	4293      	cmp	r3, r2
 801c8f0:	d004      	beq.n	801c8fc <bi_copy+0x1c>
 801c8f2:	687b      	ldr	r3, [r7, #4]
 801c8f4:	689b      	ldr	r3, [r3, #8]
 801c8f6:	1c5a      	adds	r2, r3, #1
 801c8f8:	687b      	ldr	r3, [r7, #4]
 801c8fa:	609a      	str	r2, [r3, #8]
  return bi;
 801c8fc:	687b      	ldr	r3, [r7, #4]
}
 801c8fe:	4618      	mov	r0, r3
 801c900:	370c      	adds	r7, #12
 801c902:	46bd      	mov	sp, r7
 801c904:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c908:	4770      	bx	lr
 801c90a:	bf00      	nop
 801c90c:	7fff55aa 	.word	0x7fff55aa

0801c910 <bi_permanent>:
 * @brief Simply make a bigint object "unfreeable" if bi_free() is called on it.
 *
 * For this object to be freed, bi_depermanent() must be called.
 * @param bi [in]   The bigint to be made permanent.
 */
NS_INTERNAL void bi_permanent(bigint *bi) {
 801c910:	b580      	push	{r7, lr}
 801c912:	b082      	sub	sp, #8
 801c914:	af00      	add	r7, sp, #0
 801c916:	6078      	str	r0, [r7, #4]
  check(bi);
  if (bi->refs != 1) {
 801c918:	687b      	ldr	r3, [r7, #4]
 801c91a:	689b      	ldr	r3, [r3, #8]
 801c91c:	2b01      	cmp	r3, #1
 801c91e:	d001      	beq.n	801c924 <bi_permanent+0x14>
#ifdef CONFIG_SSL_FULL_MODE
    printf("bi_permanent: refs was not 1\n");
#endif
    abort();
 801c920:	f007 f9b0 	bl	8023c84 <abort>
  }

  bi->refs = PERMANENT;
 801c924:	687b      	ldr	r3, [r7, #4]
 801c926:	4a03      	ldr	r2, [pc, #12]	@ (801c934 <bi_permanent+0x24>)
 801c928:	609a      	str	r2, [r3, #8]
}
 801c92a:	bf00      	nop
 801c92c:	3708      	adds	r7, #8
 801c92e:	46bd      	mov	sp, r7
 801c930:	bd80      	pop	{r7, pc}
 801c932:	bf00      	nop
 801c934:	7fff55aa 	.word	0x7fff55aa

0801c938 <bi_depermanent>:

/**
 * @brief Take a permanent object and make it eligible for freedom.
 * @param bi [in]   The bigint to be made back to temporary.
 */
NS_INTERNAL void bi_depermanent(bigint *bi) {
 801c938:	b580      	push	{r7, lr}
 801c93a:	b082      	sub	sp, #8
 801c93c:	af00      	add	r7, sp, #0
 801c93e:	6078      	str	r0, [r7, #4]
  check(bi);
  if (bi->refs != PERMANENT) {
 801c940:	687b      	ldr	r3, [r7, #4]
 801c942:	689b      	ldr	r3, [r3, #8]
 801c944:	4a05      	ldr	r2, [pc, #20]	@ (801c95c <bi_depermanent+0x24>)
 801c946:	4293      	cmp	r3, r2
 801c948:	d001      	beq.n	801c94e <bi_depermanent+0x16>
#ifdef CONFIG_SSL_FULL_MODE
    printf("bi_depermanent: bigint was not permanent\n");
#endif
    abort();
 801c94a:	f007 f99b 	bl	8023c84 <abort>
  }

  bi->refs = 1;
 801c94e:	687b      	ldr	r3, [r7, #4]
 801c950:	2201      	movs	r2, #1
 801c952:	609a      	str	r2, [r3, #8]
}
 801c954:	bf00      	nop
 801c956:	3708      	adds	r7, #8
 801c958:	46bd      	mov	sp, r7
 801c95a:	bd80      	pop	{r7, pc}
 801c95c:	7fff55aa 	.word	0x7fff55aa

0801c960 <bi_free>:
 *
 * The memory itself it not actually freed, just tagged as being available
 * @param ctx [in]   The bigint session context.
 * @param bi [in]    The bigint to be freed.
 */
NS_INTERNAL void bi_free(BI_CTX *ctx, bigint *bi) {
 801c960:	b580      	push	{r7, lr}
 801c962:	b082      	sub	sp, #8
 801c964:	af00      	add	r7, sp, #0
 801c966:	6078      	str	r0, [r7, #4]
 801c968:	6039      	str	r1, [r7, #0]
  check(bi);
  if (bi->refs == PERMANENT) {
 801c96a:	683b      	ldr	r3, [r7, #0]
 801c96c:	689b      	ldr	r3, [r3, #8]
 801c96e:	4a14      	ldr	r2, [pc, #80]	@ (801c9c0 <bi_free+0x60>)
 801c970:	4293      	cmp	r3, r2
 801c972:	d01f      	beq.n	801c9b4 <bi_free+0x54>
    return;
  }

  if (--bi->refs > 0) {
 801c974:	683b      	ldr	r3, [r7, #0]
 801c976:	689b      	ldr	r3, [r3, #8]
 801c978:	1e5a      	subs	r2, r3, #1
 801c97a:	683b      	ldr	r3, [r7, #0]
 801c97c:	609a      	str	r2, [r3, #8]
 801c97e:	683b      	ldr	r3, [r7, #0]
 801c980:	689b      	ldr	r3, [r3, #8]
 801c982:	2b00      	cmp	r3, #0
 801c984:	dc18      	bgt.n	801c9b8 <bi_free+0x58>
    return;
  }

  bi->next = ctx->free_list;
 801c986:	687b      	ldr	r3, [r7, #4]
 801c988:	685a      	ldr	r2, [r3, #4]
 801c98a:	683b      	ldr	r3, [r7, #0]
 801c98c:	601a      	str	r2, [r3, #0]
  ctx->free_list = bi;
 801c98e:	687b      	ldr	r3, [r7, #4]
 801c990:	683a      	ldr	r2, [r7, #0]
 801c992:	605a      	str	r2, [r3, #4]
  ctx->free_count++;
 801c994:	687b      	ldr	r3, [r7, #4]
 801c996:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801c998:	1c5a      	adds	r2, r3, #1
 801c99a:	687b      	ldr	r3, [r7, #4]
 801c99c:	631a      	str	r2, [r3, #48]	@ 0x30

  if (--ctx->active_count < 0) {
 801c99e:	687b      	ldr	r3, [r7, #4]
 801c9a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801c9a2:	1e5a      	subs	r2, r3, #1
 801c9a4:	687b      	ldr	r3, [r7, #4]
 801c9a6:	62da      	str	r2, [r3, #44]	@ 0x2c
 801c9a8:	687b      	ldr	r3, [r7, #4]
 801c9aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801c9ac:	2b00      	cmp	r3, #0
 801c9ae:	da04      	bge.n	801c9ba <bi_free+0x5a>
#ifdef CONFIG_SSL_FULL_MODE
    printf(
        "bi_free: active_count went negative "
        "- double-freed bigint?\n");
#endif
    abort();
 801c9b0:	f007 f968 	bl	8023c84 <abort>
    return;
 801c9b4:	bf00      	nop
 801c9b6:	e000      	b.n	801c9ba <bi_free+0x5a>
    return;
 801c9b8:	bf00      	nop
  }
}
 801c9ba:	3708      	adds	r7, #8
 801c9bc:	46bd      	mov	sp, r7
 801c9be:	bd80      	pop	{r7, pc}
 801c9c0:	7fff55aa 	.word	0x7fff55aa

0801c9c4 <int_to_bi>:
 * @brief Convert an (unsigned) integer into a bigint.
 * @param ctx [in]   The bigint session context.
 * @param i [in]     The (unsigned) integer to be converted.
 *
 */
NS_INTERNAL bigint *int_to_bi(BI_CTX *ctx, comp i) {
 801c9c4:	b580      	push	{r7, lr}
 801c9c6:	b084      	sub	sp, #16
 801c9c8:	af00      	add	r7, sp, #0
 801c9ca:	6078      	str	r0, [r7, #4]
 801c9cc:	6039      	str	r1, [r7, #0]
  bigint *biR = alloc(ctx, 1);
 801c9ce:	2101      	movs	r1, #1
 801c9d0:	6878      	ldr	r0, [r7, #4]
 801c9d2:	f000 fe97 	bl	801d704 <alloc>
 801c9d6:	60f8      	str	r0, [r7, #12]
  biR->comps[0] = i;
 801c9d8:	68fb      	ldr	r3, [r7, #12]
 801c9da:	68db      	ldr	r3, [r3, #12]
 801c9dc:	683a      	ldr	r2, [r7, #0]
 801c9de:	601a      	str	r2, [r3, #0]
  return biR;
 801c9e0:	68fb      	ldr	r3, [r7, #12]
}
 801c9e2:	4618      	mov	r0, r3
 801c9e4:	3710      	adds	r7, #16
 801c9e6:	46bd      	mov	sp, r7
 801c9e8:	bd80      	pop	{r7, pc}

0801c9ea <bi_clone>:
/**
 * @brief Do a full copy of the bigint object.
 * @param ctx [in]   The bigint session context.
 * @param bi  [in]   The bigint object to be copied.
 */
NS_INTERNAL bigint *bi_clone(BI_CTX *ctx, const bigint *bi) {
 801c9ea:	b580      	push	{r7, lr}
 801c9ec:	b084      	sub	sp, #16
 801c9ee:	af00      	add	r7, sp, #0
 801c9f0:	6078      	str	r0, [r7, #4]
 801c9f2:	6039      	str	r1, [r7, #0]
  bigint *biR = alloc(ctx, bi->size);
 801c9f4:	683b      	ldr	r3, [r7, #0]
 801c9f6:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801c9fa:	4619      	mov	r1, r3
 801c9fc:	6878      	ldr	r0, [r7, #4]
 801c9fe:	f000 fe81 	bl	801d704 <alloc>
 801ca02:	60f8      	str	r0, [r7, #12]
  check(bi);
  memcpy(biR->comps, bi->comps, (size_t) bi->size * COMP_BYTE_SIZE);
 801ca04:	68fb      	ldr	r3, [r7, #12]
 801ca06:	68d8      	ldr	r0, [r3, #12]
 801ca08:	683b      	ldr	r3, [r7, #0]
 801ca0a:	68d9      	ldr	r1, [r3, #12]
 801ca0c:	683b      	ldr	r3, [r7, #0]
 801ca0e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801ca12:	009b      	lsls	r3, r3, #2
 801ca14:	461a      	mov	r2, r3
 801ca16:	f007 feb6 	bl	8024786 <memcpy>
  return biR;
 801ca1a:	68fb      	ldr	r3, [r7, #12]
}
 801ca1c:	4618      	mov	r0, r3
 801ca1e:	3710      	adds	r7, #16
 801ca20:	46bd      	mov	sp, r7
 801ca22:	bd80      	pop	{r7, pc}

0801ca24 <bi_add>:
 * @param ctx [in]  The bigint session context.
 * @param bia [in]  A bigint.
 * @param bib [in]  Another bigint.
 * @return The result of the addition.
 */
NS_INTERNAL bigint *bi_add(BI_CTX *ctx, bigint *bia, bigint *bib) {
 801ca24:	b580      	push	{r7, lr}
 801ca26:	b08c      	sub	sp, #48	@ 0x30
 801ca28:	af00      	add	r7, sp, #0
 801ca2a:	60f8      	str	r0, [r7, #12]
 801ca2c:	60b9      	str	r1, [r7, #8]
 801ca2e:	607a      	str	r2, [r7, #4]
  int n;
  comp carry = 0;
 801ca30:	2300      	movs	r3, #0
 801ca32:	62bb      	str	r3, [r7, #40]	@ 0x28
  comp *pa, *pb;

  check(bia);
  check(bib);

  n = MAX(bia->size, bib->size);
 801ca34:	687b      	ldr	r3, [r7, #4]
 801ca36:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 801ca3a:	68bb      	ldr	r3, [r7, #8]
 801ca3c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801ca40:	4293      	cmp	r3, r2
 801ca42:	bfb8      	it	lt
 801ca44:	4613      	movlt	r3, r2
 801ca46:	b21b      	sxth	r3, r3
 801ca48:	62fb      	str	r3, [r7, #44]	@ 0x2c
  more_comps(bia, n + 1);
 801ca4a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801ca4c:	3301      	adds	r3, #1
 801ca4e:	4619      	mov	r1, r3
 801ca50:	68b8      	ldr	r0, [r7, #8]
 801ca52:	f000 fdfc 	bl	801d64e <more_comps>
  more_comps(bib, n);
 801ca56:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 801ca58:	6878      	ldr	r0, [r7, #4]
 801ca5a:	f000 fdf8 	bl	801d64e <more_comps>
  pa = bia->comps;
 801ca5e:	68bb      	ldr	r3, [r7, #8]
 801ca60:	68db      	ldr	r3, [r3, #12]
 801ca62:	627b      	str	r3, [r7, #36]	@ 0x24
  pb = bib->comps;
 801ca64:	687b      	ldr	r3, [r7, #4]
 801ca66:	68db      	ldr	r3, [r3, #12]
 801ca68:	623b      	str	r3, [r7, #32]

  do {
    comp sl, rl, cy1;
    sl = *pa + *pb++;
 801ca6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ca6c:	681a      	ldr	r2, [r3, #0]
 801ca6e:	6a3b      	ldr	r3, [r7, #32]
 801ca70:	1d19      	adds	r1, r3, #4
 801ca72:	6239      	str	r1, [r7, #32]
 801ca74:	681b      	ldr	r3, [r3, #0]
 801ca76:	4413      	add	r3, r2
 801ca78:	61fb      	str	r3, [r7, #28]
    rl = sl + carry;
 801ca7a:	69fa      	ldr	r2, [r7, #28]
 801ca7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801ca7e:	4413      	add	r3, r2
 801ca80:	61bb      	str	r3, [r7, #24]
    cy1 = sl < *pa;
 801ca82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ca84:	681b      	ldr	r3, [r3, #0]
 801ca86:	69fa      	ldr	r2, [r7, #28]
 801ca88:	429a      	cmp	r2, r3
 801ca8a:	bf34      	ite	cc
 801ca8c:	2301      	movcc	r3, #1
 801ca8e:	2300      	movcs	r3, #0
 801ca90:	b2db      	uxtb	r3, r3
 801ca92:	617b      	str	r3, [r7, #20]
    carry = cy1 | (rl < sl);
 801ca94:	69ba      	ldr	r2, [r7, #24]
 801ca96:	69fb      	ldr	r3, [r7, #28]
 801ca98:	429a      	cmp	r2, r3
 801ca9a:	bf34      	ite	cc
 801ca9c:	2301      	movcc	r3, #1
 801ca9e:	2300      	movcs	r3, #0
 801caa0:	b2db      	uxtb	r3, r3
 801caa2:	461a      	mov	r2, r3
 801caa4:	697b      	ldr	r3, [r7, #20]
 801caa6:	4313      	orrs	r3, r2
 801caa8:	62bb      	str	r3, [r7, #40]	@ 0x28
    *pa++ = rl;
 801caaa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801caac:	1d1a      	adds	r2, r3, #4
 801caae:	627a      	str	r2, [r7, #36]	@ 0x24
 801cab0:	69ba      	ldr	r2, [r7, #24]
 801cab2:	601a      	str	r2, [r3, #0]
  } while (--n != 0);
 801cab4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801cab6:	3b01      	subs	r3, #1
 801cab8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801caba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801cabc:	2b00      	cmp	r3, #0
 801cabe:	d1d4      	bne.n	801ca6a <bi_add+0x46>

  *pa = carry; /* do overflow */
 801cac0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801cac2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801cac4:	601a      	str	r2, [r3, #0]
  bi_free(ctx, bib);
 801cac6:	6879      	ldr	r1, [r7, #4]
 801cac8:	68f8      	ldr	r0, [r7, #12]
 801caca:	f7ff ff49 	bl	801c960 <bi_free>
  return trim(bia);
 801cace:	68b8      	ldr	r0, [r7, #8]
 801cad0:	f000 fec7 	bl	801d862 <trim>
 801cad4:	4603      	mov	r3, r0
}
 801cad6:	4618      	mov	r0, r3
 801cad8:	3730      	adds	r7, #48	@ 0x30
 801cada:	46bd      	mov	sp, r7
 801cadc:	bd80      	pop	{r7, pc}

0801cade <bi_subtract>:
 * @param is_negative [out] If defined, indicates that the result was negative.
 * is_negative may be null.
 * @return The result of the subtraction. The result is always positive.
 */
NS_INTERNAL bigint *bi_subtract(BI_CTX *ctx, bigint *bia, bigint *bib,
                                int *is_negative) {
 801cade:	b580      	push	{r7, lr}
 801cae0:	b08c      	sub	sp, #48	@ 0x30
 801cae2:	af00      	add	r7, sp, #0
 801cae4:	60f8      	str	r0, [r7, #12]
 801cae6:	60b9      	str	r1, [r7, #8]
 801cae8:	607a      	str	r2, [r7, #4]
 801caea:	603b      	str	r3, [r7, #0]
  int n = bia->size;
 801caec:	68bb      	ldr	r3, [r7, #8]
 801caee:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801caf2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  comp *pa, *pb, carry = 0;
 801caf4:	2300      	movs	r3, #0
 801caf6:	623b      	str	r3, [r7, #32]

  check(bia);
  check(bib);

  more_comps(bib, n);
 801caf8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 801cafa:	6878      	ldr	r0, [r7, #4]
 801cafc:	f000 fda7 	bl	801d64e <more_comps>
  pa = bia->comps;
 801cb00:	68bb      	ldr	r3, [r7, #8]
 801cb02:	68db      	ldr	r3, [r3, #12]
 801cb04:	62bb      	str	r3, [r7, #40]	@ 0x28
  pb = bib->comps;
 801cb06:	687b      	ldr	r3, [r7, #4]
 801cb08:	68db      	ldr	r3, [r3, #12]
 801cb0a:	627b      	str	r3, [r7, #36]	@ 0x24

  do {
    comp sl, rl, cy1;
    sl = *pa - *pb++;
 801cb0c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801cb0e:	681a      	ldr	r2, [r3, #0]
 801cb10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801cb12:	1d19      	adds	r1, r3, #4
 801cb14:	6279      	str	r1, [r7, #36]	@ 0x24
 801cb16:	681b      	ldr	r3, [r3, #0]
 801cb18:	1ad3      	subs	r3, r2, r3
 801cb1a:	61fb      	str	r3, [r7, #28]
    rl = sl - carry;
 801cb1c:	69fa      	ldr	r2, [r7, #28]
 801cb1e:	6a3b      	ldr	r3, [r7, #32]
 801cb20:	1ad3      	subs	r3, r2, r3
 801cb22:	61bb      	str	r3, [r7, #24]
    cy1 = sl > *pa;
 801cb24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801cb26:	681b      	ldr	r3, [r3, #0]
 801cb28:	69fa      	ldr	r2, [r7, #28]
 801cb2a:	429a      	cmp	r2, r3
 801cb2c:	bf8c      	ite	hi
 801cb2e:	2301      	movhi	r3, #1
 801cb30:	2300      	movls	r3, #0
 801cb32:	b2db      	uxtb	r3, r3
 801cb34:	617b      	str	r3, [r7, #20]
    carry = cy1 | (rl > sl);
 801cb36:	69ba      	ldr	r2, [r7, #24]
 801cb38:	69fb      	ldr	r3, [r7, #28]
 801cb3a:	429a      	cmp	r2, r3
 801cb3c:	bf8c      	ite	hi
 801cb3e:	2301      	movhi	r3, #1
 801cb40:	2300      	movls	r3, #0
 801cb42:	b2db      	uxtb	r3, r3
 801cb44:	461a      	mov	r2, r3
 801cb46:	697b      	ldr	r3, [r7, #20]
 801cb48:	4313      	orrs	r3, r2
 801cb4a:	623b      	str	r3, [r7, #32]
    *pa++ = rl;
 801cb4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801cb4e:	1d1a      	adds	r2, r3, #4
 801cb50:	62ba      	str	r2, [r7, #40]	@ 0x28
 801cb52:	69ba      	ldr	r2, [r7, #24]
 801cb54:	601a      	str	r2, [r3, #0]
  } while (--n != 0);
 801cb56:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801cb58:	3b01      	subs	r3, #1
 801cb5a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801cb5c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801cb5e:	2b00      	cmp	r3, #0
 801cb60:	d1d4      	bne.n	801cb0c <bi_subtract+0x2e>

  if (is_negative) /* indicate a negative result */
 801cb62:	683b      	ldr	r3, [r7, #0]
 801cb64:	2b00      	cmp	r3, #0
 801cb66:	d002      	beq.n	801cb6e <bi_subtract+0x90>
  {
    *is_negative = (int) carry;
 801cb68:	6a3a      	ldr	r2, [r7, #32]
 801cb6a:	683b      	ldr	r3, [r7, #0]
 801cb6c:	601a      	str	r2, [r3, #0]
  }

  bi_free(ctx, trim(bib)); /* put bib back to the way it was */
 801cb6e:	6878      	ldr	r0, [r7, #4]
 801cb70:	f000 fe77 	bl	801d862 <trim>
 801cb74:	4603      	mov	r3, r0
 801cb76:	4619      	mov	r1, r3
 801cb78:	68f8      	ldr	r0, [r7, #12]
 801cb7a:	f7ff fef1 	bl	801c960 <bi_free>
  return trim(bia);
 801cb7e:	68b8      	ldr	r0, [r7, #8]
 801cb80:	f000 fe6f 	bl	801d862 <trim>
 801cb84:	4603      	mov	r3, r0
}
 801cb86:	4618      	mov	r0, r3
 801cb88:	3730      	adds	r7, #48	@ 0x30
 801cb8a:	46bd      	mov	sp, r7
 801cb8c:	bd80      	pop	{r7, pc}

0801cb8e <bi_int_multiply>:

/**
 * Perform a multiply between a bigint an an (unsigned) integer
 */
static bigint *bi_int_multiply(BI_CTX *ctx, bigint *bia, comp b) {
 801cb8e:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 801cb92:	b094      	sub	sp, #80	@ 0x50
 801cb94:	af00      	add	r7, sp, #0
 801cb96:	62f8      	str	r0, [r7, #44]	@ 0x2c
 801cb98:	62b9      	str	r1, [r7, #40]	@ 0x28
 801cb9a:	627a      	str	r2, [r7, #36]	@ 0x24
  int j = 0, n = bia->size;
 801cb9c:	2300      	movs	r3, #0
 801cb9e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 801cba0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801cba2:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801cba6:	643b      	str	r3, [r7, #64]	@ 0x40
  bigint *biR = alloc(ctx, n + 1);
 801cba8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801cbaa:	3301      	adds	r3, #1
 801cbac:	4619      	mov	r1, r3
 801cbae:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 801cbb0:	f000 fda8 	bl	801d704 <alloc>
 801cbb4:	63f8      	str	r0, [r7, #60]	@ 0x3c
  comp carry = 0;
 801cbb6:	2300      	movs	r3, #0
 801cbb8:	64bb      	str	r3, [r7, #72]	@ 0x48
  comp *r = biR->comps;
 801cbba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801cbbc:	68db      	ldr	r3, [r3, #12]
 801cbbe:	647b      	str	r3, [r7, #68]	@ 0x44
  comp *a = bia->comps;
 801cbc0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801cbc2:	68db      	ldr	r3, [r3, #12]
 801cbc4:	63bb      	str	r3, [r7, #56]	@ 0x38

  check(bia);

  /* clear things to start with */
  memset(r, 0, (size_t) ((n + 1) * COMP_BYTE_SIZE));
 801cbc6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801cbc8:	3301      	adds	r3, #1
 801cbca:	009b      	lsls	r3, r3, #2
 801cbcc:	461a      	mov	r2, r3
 801cbce:	2100      	movs	r1, #0
 801cbd0:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 801cbd2:	f007 fc5b 	bl	802448c <memset>

  do {
    long_comp tmp = *r + (long_comp) a[j] * b + carry;
 801cbd6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801cbd8:	681b      	ldr	r3, [r3, #0]
 801cbda:	2200      	movs	r2, #0
 801cbdc:	61bb      	str	r3, [r7, #24]
 801cbde:	61fa      	str	r2, [r7, #28]
 801cbe0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801cbe2:	009a      	lsls	r2, r3, #2
 801cbe4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801cbe6:	4413      	add	r3, r2
 801cbe8:	681b      	ldr	r3, [r3, #0]
 801cbea:	2200      	movs	r2, #0
 801cbec:	613b      	str	r3, [r7, #16]
 801cbee:	617a      	str	r2, [r7, #20]
 801cbf0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801cbf2:	2200      	movs	r2, #0
 801cbf4:	469a      	mov	sl, r3
 801cbf6:	4693      	mov	fp, r2
 801cbf8:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 801cbfc:	460b      	mov	r3, r1
 801cbfe:	fb0a f203 	mul.w	r2, sl, r3
 801cc02:	4603      	mov	r3, r0
 801cc04:	fb03 f30b 	mul.w	r3, r3, fp
 801cc08:	4413      	add	r3, r2
 801cc0a:	4602      	mov	r2, r0
 801cc0c:	fba2 450a 	umull	r4, r5, r2, sl
 801cc10:	442b      	add	r3, r5
 801cc12:	461d      	mov	r5, r3
 801cc14:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 801cc18:	460b      	mov	r3, r1
 801cc1a:	eb13 0804 	adds.w	r8, r3, r4
 801cc1e:	4613      	mov	r3, r2
 801cc20:	eb43 0905 	adc.w	r9, r3, r5
 801cc24:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801cc26:	2200      	movs	r2, #0
 801cc28:	60bb      	str	r3, [r7, #8]
 801cc2a:	60fa      	str	r2, [r7, #12]
 801cc2c:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 801cc30:	460b      	mov	r3, r1
 801cc32:	eb18 0303 	adds.w	r3, r8, r3
 801cc36:	603b      	str	r3, [r7, #0]
 801cc38:	4613      	mov	r3, r2
 801cc3a:	eb49 0303 	adc.w	r3, r9, r3
 801cc3e:	607b      	str	r3, [r7, #4]
 801cc40:	e9d7 2300 	ldrd	r2, r3, [r7]
 801cc44:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
    *r++ = (comp) tmp; /* downsize */
 801cc48:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 801cc4a:	1d13      	adds	r3, r2, #4
 801cc4c:	647b      	str	r3, [r7, #68]	@ 0x44
 801cc4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801cc50:	6013      	str	r3, [r2, #0]
    carry = (comp)(tmp >> COMP_BIT_SIZE);
 801cc52:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 801cc56:	f04f 0000 	mov.w	r0, #0
 801cc5a:	f04f 0100 	mov.w	r1, #0
 801cc5e:	0018      	movs	r0, r3
 801cc60:	2100      	movs	r1, #0
 801cc62:	4603      	mov	r3, r0
 801cc64:	64bb      	str	r3, [r7, #72]	@ 0x48
  } while (++j < n);
 801cc66:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801cc68:	3301      	adds	r3, #1
 801cc6a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 801cc6c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 801cc6e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801cc70:	429a      	cmp	r2, r3
 801cc72:	dbb0      	blt.n	801cbd6 <bi_int_multiply+0x48>

  *r = carry;
 801cc74:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801cc76:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 801cc78:	601a      	str	r2, [r3, #0]
  bi_free(ctx, bia);
 801cc7a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 801cc7c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 801cc7e:	f7ff fe6f 	bl	801c960 <bi_free>
  return trim(biR);
 801cc82:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 801cc84:	f000 fded 	bl	801d862 <trim>
 801cc88:	4603      	mov	r3, r0
}
 801cc8a:	4618      	mov	r0, r3
 801cc8c:	3750      	adds	r7, #80	@ 0x50
 801cc8e:	46bd      	mov	sp, r7
 801cc90:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0801cc94 <bi_divide>:
 * @param v [in]    Either the denominator or the modulus depending on the mode.
 * @param is_mod [n] Determines if this is a normal division (0) or a reduction
 * (1).
 * @return  The result of the division/reduction.
 */
NS_INTERNAL bigint *bi_divide(BI_CTX *ctx, bigint *u, bigint *v, int is_mod) {
 801cc94:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 801cc98:	b0a0      	sub	sp, #128	@ 0x80
 801cc9a:	af00      	add	r7, sp, #0
 801cc9c:	64f8      	str	r0, [r7, #76]	@ 0x4c
 801cc9e:	64b9      	str	r1, [r7, #72]	@ 0x48
 801cca0:	647a      	str	r2, [r7, #68]	@ 0x44
 801cca2:	643b      	str	r3, [r7, #64]	@ 0x40
  int n = v->size, m = u->size - n;
 801cca4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801cca6:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801ccaa:	673b      	str	r3, [r7, #112]	@ 0x70
 801ccac:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801ccae:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801ccb2:	461a      	mov	r2, r3
 801ccb4:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801ccb6:	1ad3      	subs	r3, r2, r3
 801ccb8:	66fb      	str	r3, [r7, #108]	@ 0x6c
  int j = 0, orig_u_size = u->size;
 801ccba:	2300      	movs	r3, #0
 801ccbc:	67fb      	str	r3, [r7, #124]	@ 0x7c
 801ccbe:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801ccc0:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801ccc4:	66bb      	str	r3, [r7, #104]	@ 0x68
  uint8_t mod_offset = ctx->mod_offset;
 801ccc6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801ccc8:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 801cccc:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67

  check(u);
  check(v);

  /* if doing reduction and we are < mod, then return mod */
  if (is_mod && bi_compare(v, u) > 0) {
 801ccd0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801ccd2:	2b00      	cmp	r3, #0
 801ccd4:	d00c      	beq.n	801ccf0 <bi_divide+0x5c>
 801ccd6:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 801ccd8:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 801ccda:	f000 fc63 	bl	801d5a4 <bi_compare>
 801ccde:	4603      	mov	r3, r0
 801cce0:	2b00      	cmp	r3, #0
 801cce2:	dd05      	ble.n	801ccf0 <bi_divide+0x5c>
    bi_free(ctx, v);
 801cce4:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 801cce6:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 801cce8:	f7ff fe3a 	bl	801c960 <bi_free>
    return u;
 801ccec:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801ccee:	e1fe      	b.n	801d0ee <bi_divide+0x45a>
  }

  quotient = alloc(ctx, m + 1);
 801ccf0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801ccf2:	3301      	adds	r3, #1
 801ccf4:	4619      	mov	r1, r3
 801ccf6:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 801ccf8:	f000 fd04 	bl	801d704 <alloc>
 801ccfc:	6638      	str	r0, [r7, #96]	@ 0x60
  tmp_u = alloc(ctx, n + 1);
 801ccfe:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801cd00:	3301      	adds	r3, #1
 801cd02:	4619      	mov	r1, r3
 801cd04:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 801cd06:	f000 fcfd 	bl	801d704 <alloc>
 801cd0a:	67b8      	str	r0, [r7, #120]	@ 0x78
  v = trim(v); /* make sure we have no leading 0's */
 801cd0c:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 801cd0e:	f000 fda8 	bl	801d862 <trim>
 801cd12:	6478      	str	r0, [r7, #68]	@ 0x44
  d = (comp)((long_comp) COMP_RADIX / (V1 + 1));
 801cd14:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801cd16:	68d9      	ldr	r1, [r3, #12]
 801cd18:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801cd1a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801cd1e:	461a      	mov	r2, r3
 801cd20:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 801cd24:	4413      	add	r3, r2
 801cd26:	009b      	lsls	r3, r3, #2
 801cd28:	440b      	add	r3, r1
 801cd2a:	681b      	ldr	r3, [r3, #0]
 801cd2c:	3301      	adds	r3, #1
 801cd2e:	2200      	movs	r2, #0
 801cd30:	461c      	mov	r4, r3
 801cd32:	4615      	mov	r5, r2
 801cd34:	4622      	mov	r2, r4
 801cd36:	462b      	mov	r3, r5
 801cd38:	f04f 0000 	mov.w	r0, #0
 801cd3c:	f04f 0101 	mov.w	r1, #1
 801cd40:	f7e3 fae6 	bl	8000310 <__aeabi_uldivmod>
 801cd44:	4602      	mov	r2, r0
 801cd46:	460b      	mov	r3, r1
 801cd48:	4613      	mov	r3, r2
 801cd4a:	65fb      	str	r3, [r7, #92]	@ 0x5c

  /* clear things to start with */
  memset(quotient->comps, 0, (size_t) ((quotient->size) * COMP_BYTE_SIZE));
 801cd4c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 801cd4e:	68d8      	ldr	r0, [r3, #12]
 801cd50:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 801cd52:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801cd56:	009b      	lsls	r3, r3, #2
 801cd58:	461a      	mov	r2, r3
 801cd5a:	2100      	movs	r1, #0
 801cd5c:	f007 fb96 	bl	802448c <memset>

  /* normalise */
  if (d > 1) {
 801cd60:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801cd62:	2b01      	cmp	r3, #1
 801cd64:	d916      	bls.n	801cd94 <bi_divide+0x100>
    u = bi_int_multiply(ctx, u, d);
 801cd66:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 801cd68:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 801cd6a:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 801cd6c:	f7ff ff0f 	bl	801cb8e <bi_int_multiply>
 801cd70:	64b8      	str	r0, [r7, #72]	@ 0x48

    if (is_mod) {
 801cd72:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801cd74:	2b00      	cmp	r3, #0
 801cd76:	d007      	beq.n	801cd88 <bi_divide+0xf4>
      v = ctx->bi_normalised_mod[mod_offset];
 801cd78:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 801cd7c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 801cd7e:	3306      	adds	r3, #6
 801cd80:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801cd84:	647b      	str	r3, [r7, #68]	@ 0x44
 801cd86:	e005      	b.n	801cd94 <bi_divide+0x100>
    } else {
      v = bi_int_multiply(ctx, v, d);
 801cd88:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 801cd8a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 801cd8c:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 801cd8e:	f7ff fefe 	bl	801cb8e <bi_int_multiply>
 801cd92:	6478      	str	r0, [r7, #68]	@ 0x44
    }
  }

  if (orig_u_size == u->size) /* new digit position u0 */
 801cd94:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801cd96:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801cd9a:	461a      	mov	r2, r3
 801cd9c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801cd9e:	4293      	cmp	r3, r2
 801cda0:	d105      	bne.n	801cdae <bi_divide+0x11a>
  {
    more_comps(u, orig_u_size + 1);
 801cda2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801cda4:	3301      	adds	r3, #1
 801cda6:	4619      	mov	r1, r3
 801cda8:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 801cdaa:	f000 fc50 	bl	801d64e <more_comps>
  }

  do {
    /* get a temporary short version of u */
    memcpy(tmp_u->comps, &u->comps[u->size - n - 1 - j],
 801cdae:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801cdb0:	68d8      	ldr	r0, [r3, #12]
 801cdb2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801cdb4:	68d9      	ldr	r1, [r3, #12]
 801cdb6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801cdb8:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801cdbc:	461a      	mov	r2, r3
 801cdbe:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801cdc0:	1ad3      	subs	r3, r2, r3
 801cdc2:	1e5a      	subs	r2, r3, #1
 801cdc4:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 801cdc6:	1ad3      	subs	r3, r2, r3
 801cdc8:	009b      	lsls	r3, r3, #2
 801cdca:	4419      	add	r1, r3
           (size_t) (n + 1) * COMP_BYTE_SIZE);
 801cdcc:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801cdce:	3301      	adds	r3, #1
    memcpy(tmp_u->comps, &u->comps[u->size - n - 1 - j],
 801cdd0:	009b      	lsls	r3, r3, #2
 801cdd2:	461a      	mov	r2, r3
 801cdd4:	f007 fcd7 	bl	8024786 <memcpy>

    /* calculate q' */
    if (U(0) == V1) {
 801cdd8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801cdda:	68d9      	ldr	r1, [r3, #12]
 801cddc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801cdde:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801cde2:	461a      	mov	r2, r3
 801cde4:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 801cde8:	4413      	add	r3, r2
 801cdea:	009b      	lsls	r3, r3, #2
 801cdec:	440b      	add	r3, r1
 801cdee:	6818      	ldr	r0, [r3, #0]
 801cdf0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801cdf2:	68d9      	ldr	r1, [r3, #12]
 801cdf4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801cdf6:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801cdfa:	461a      	mov	r2, r3
 801cdfc:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 801ce00:	4413      	add	r3, r2
 801ce02:	009b      	lsls	r3, r3, #2
 801ce04:	440b      	add	r3, r1
 801ce06:	681b      	ldr	r3, [r3, #0]
 801ce08:	4298      	cmp	r0, r3
 801ce0a:	d103      	bne.n	801ce14 <bi_divide+0x180>
      q_dash = COMP_RADIX - 1;
 801ce0c:	f04f 33ff 	mov.w	r3, #4294967295
 801ce10:	677b      	str	r3, [r7, #116]	@ 0x74
 801ce12:	e0c2      	b.n	801cf9a <bi_divide+0x306>
    } else {
      q_dash = (comp)(((long_comp) U(0) * COMP_RADIX + U(1)) / V1);
 801ce14:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801ce16:	68d9      	ldr	r1, [r3, #12]
 801ce18:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801ce1a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801ce1e:	461a      	mov	r2, r3
 801ce20:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 801ce24:	4413      	add	r3, r2
 801ce26:	009b      	lsls	r3, r3, #2
 801ce28:	440b      	add	r3, r1
 801ce2a:	681b      	ldr	r3, [r3, #0]
 801ce2c:	2200      	movs	r2, #0
 801ce2e:	633b      	str	r3, [r7, #48]	@ 0x30
 801ce30:	637a      	str	r2, [r7, #52]	@ 0x34
 801ce32:	f04f 0000 	mov.w	r0, #0
 801ce36:	f04f 0100 	mov.w	r1, #0
 801ce3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801ce3c:	0019      	movs	r1, r3
 801ce3e:	2000      	movs	r0, #0
 801ce40:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801ce42:	68dc      	ldr	r4, [r3, #12]
 801ce44:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801ce46:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801ce4a:	461a      	mov	r2, r3
 801ce4c:	4baa      	ldr	r3, [pc, #680]	@ (801d0f8 <bi_divide+0x464>)
 801ce4e:	4413      	add	r3, r2
 801ce50:	009b      	lsls	r3, r3, #2
 801ce52:	4423      	add	r3, r4
 801ce54:	681b      	ldr	r3, [r3, #0]
 801ce56:	2200      	movs	r2, #0
 801ce58:	62bb      	str	r3, [r7, #40]	@ 0x28
 801ce5a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 801ce5c:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	@ 0x28
 801ce60:	4623      	mov	r3, r4
 801ce62:	18c3      	adds	r3, r0, r3
 801ce64:	623b      	str	r3, [r7, #32]
 801ce66:	462b      	mov	r3, r5
 801ce68:	eb41 0303 	adc.w	r3, r1, r3
 801ce6c:	627b      	str	r3, [r7, #36]	@ 0x24
 801ce6e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801ce70:	68d9      	ldr	r1, [r3, #12]
 801ce72:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801ce74:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801ce78:	461a      	mov	r2, r3
 801ce7a:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 801ce7e:	4413      	add	r3, r2
 801ce80:	009b      	lsls	r3, r3, #2
 801ce82:	440b      	add	r3, r1
 801ce84:	681b      	ldr	r3, [r3, #0]
 801ce86:	2200      	movs	r2, #0
 801ce88:	61bb      	str	r3, [r7, #24]
 801ce8a:	61fa      	str	r2, [r7, #28]
 801ce8c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 801ce90:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 801ce94:	f7e3 fa3c 	bl	8000310 <__aeabi_uldivmod>
 801ce98:	4602      	mov	r2, r0
 801ce9a:	460b      	mov	r3, r1
 801ce9c:	4613      	mov	r3, r2
 801ce9e:	677b      	str	r3, [r7, #116]	@ 0x74

      if (v->size > 1 && V2) {
 801cea0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801cea2:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801cea6:	2b01      	cmp	r3, #1
 801cea8:	dd77      	ble.n	801cf9a <bi_divide+0x306>
 801ceaa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801ceac:	68d9      	ldr	r1, [r3, #12]
 801ceae:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801ceb0:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801ceb4:	461a      	mov	r2, r3
 801ceb6:	4b90      	ldr	r3, [pc, #576]	@ (801d0f8 <bi_divide+0x464>)
 801ceb8:	4413      	add	r3, r2
 801ceba:	009b      	lsls	r3, r3, #2
 801cebc:	440b      	add	r3, r1
 801cebe:	681b      	ldr	r3, [r3, #0]
 801cec0:	2b00      	cmp	r3, #0
 801cec2:	d06a      	beq.n	801cf9a <bi_divide+0x306>
        /* we are implementing the following:
        if (V2*q_dash > (((U(0)*COMP_RADIX + U(1) -
                q_dash*V1)*COMP_RADIX) + U(2))) ... */
        comp inner = (comp)((long_comp) COMP_RADIX * U(0) + U(1) -
 801cec4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801cec6:	68d9      	ldr	r1, [r3, #12]
 801cec8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801ceca:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801cece:	461a      	mov	r2, r3
 801ced0:	4b89      	ldr	r3, [pc, #548]	@ (801d0f8 <bi_divide+0x464>)
 801ced2:	4413      	add	r3, r2
 801ced4:	009b      	lsls	r3, r3, #2
 801ced6:	440b      	add	r3, r1
 801ced8:	6818      	ldr	r0, [r3, #0]
                            (long_comp) q_dash * V1);
 801ceda:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801cedc:	68d9      	ldr	r1, [r3, #12]
 801cede:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801cee0:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801cee4:	461a      	mov	r2, r3
 801cee6:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 801ceea:	4413      	add	r3, r2
 801ceec:	009b      	lsls	r3, r3, #2
 801ceee:	440b      	add	r3, r1
 801cef0:	681a      	ldr	r2, [r3, #0]
 801cef2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 801cef4:	fb02 f303 	mul.w	r3, r2, r3
        comp inner = (comp)((long_comp) COMP_RADIX * U(0) + U(1) -
 801cef8:	1ac3      	subs	r3, r0, r3
 801cefa:	65bb      	str	r3, [r7, #88]	@ 0x58
        if ((long_comp) V2 * q_dash > (long_comp) inner * COMP_RADIX + U(2)) {
 801cefc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801cefe:	68d9      	ldr	r1, [r3, #12]
 801cf00:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801cf02:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801cf06:	461a      	mov	r2, r3
 801cf08:	4b7b      	ldr	r3, [pc, #492]	@ (801d0f8 <bi_divide+0x464>)
 801cf0a:	4413      	add	r3, r2
 801cf0c:	009b      	lsls	r3, r3, #2
 801cf0e:	440b      	add	r3, r1
 801cf10:	681b      	ldr	r3, [r3, #0]
 801cf12:	2200      	movs	r2, #0
 801cf14:	613b      	str	r3, [r7, #16]
 801cf16:	617a      	str	r2, [r7, #20]
 801cf18:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 801cf1a:	2200      	movs	r2, #0
 801cf1c:	63bb      	str	r3, [r7, #56]	@ 0x38
 801cf1e:	63fa      	str	r2, [r7, #60]	@ 0x3c
 801cf20:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 801cf24:	462b      	mov	r3, r5
 801cf26:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 801cf2a:	4602      	mov	r2, r0
 801cf2c:	fb02 f203 	mul.w	r2, r2, r3
 801cf30:	e9c7 010e 	strd	r0, r1, [r7, #56]	@ 0x38
 801cf34:	460b      	mov	r3, r1
 801cf36:	4621      	mov	r1, r4
 801cf38:	fb01 f303 	mul.w	r3, r1, r3
 801cf3c:	4413      	add	r3, r2
 801cf3e:	4622      	mov	r2, r4
 801cf40:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 801cf42:	fba2 8901 	umull	r8, r9, r2, r1
 801cf46:	444b      	add	r3, r9
 801cf48:	4699      	mov	r9, r3
 801cf4a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801cf4c:	2200      	movs	r2, #0
 801cf4e:	60bb      	str	r3, [r7, #8]
 801cf50:	60fa      	str	r2, [r7, #12]
 801cf52:	f04f 0000 	mov.w	r0, #0
 801cf56:	f04f 0100 	mov.w	r1, #0
 801cf5a:	68bb      	ldr	r3, [r7, #8]
 801cf5c:	0019      	movs	r1, r3
 801cf5e:	2000      	movs	r0, #0
 801cf60:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801cf62:	68dc      	ldr	r4, [r3, #12]
 801cf64:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801cf66:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801cf6a:	461a      	mov	r2, r3
 801cf6c:	4b63      	ldr	r3, [pc, #396]	@ (801d0fc <bi_divide+0x468>)
 801cf6e:	4413      	add	r3, r2
 801cf70:	009b      	lsls	r3, r3, #2
 801cf72:	4423      	add	r3, r4
 801cf74:	681b      	ldr	r3, [r3, #0]
 801cf76:	2200      	movs	r2, #0
 801cf78:	603b      	str	r3, [r7, #0]
 801cf7a:	607a      	str	r2, [r7, #4]
 801cf7c:	e9d7 4500 	ldrd	r4, r5, [r7]
 801cf80:	4623      	mov	r3, r4
 801cf82:	eb10 0a03 	adds.w	sl, r0, r3
 801cf86:	462b      	mov	r3, r5
 801cf88:	eb41 0b03 	adc.w	fp, r1, r3
 801cf8c:	45c2      	cmp	sl, r8
 801cf8e:	eb7b 0309 	sbcs.w	r3, fp, r9
 801cf92:	d202      	bcs.n	801cf9a <bi_divide+0x306>
          q_dash--;
 801cf94:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 801cf96:	3b01      	subs	r3, #1
 801cf98:	677b      	str	r3, [r7, #116]	@ 0x74
        }
      }
    }

    /* multiply and subtract */
    if (q_dash) {
 801cf9a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 801cf9c:	2b00      	cmp	r3, #0
 801cf9e:	d057      	beq.n	801d050 <bi_divide+0x3bc>
      int is_negative;
      tmp_u = bi_subtract(ctx, tmp_u, bi_int_multiply(ctx, bi_copy(v), q_dash),
 801cfa0:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 801cfa2:	f7ff fc9d 	bl	801c8e0 <bi_copy>
 801cfa6:	4603      	mov	r3, r0
 801cfa8:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 801cfaa:	4619      	mov	r1, r3
 801cfac:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 801cfae:	f7ff fdee 	bl	801cb8e <bi_int_multiply>
 801cfb2:	4602      	mov	r2, r0
 801cfb4:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 801cfb8:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 801cfba:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 801cfbc:	f7ff fd8f 	bl	801cade <bi_subtract>
 801cfc0:	67b8      	str	r0, [r7, #120]	@ 0x78
                          &is_negative);
      more_comps(tmp_u, n + 1);
 801cfc2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801cfc4:	3301      	adds	r3, #1
 801cfc6:	4619      	mov	r1, r3
 801cfc8:	6fb8      	ldr	r0, [r7, #120]	@ 0x78
 801cfca:	f000 fb40 	bl	801d64e <more_comps>

      Q(j) = q_dash;
 801cfce:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 801cfd0:	68d9      	ldr	r1, [r3, #12]
 801cfd2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 801cfd4:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801cfd8:	461a      	mov	r2, r3
 801cfda:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 801cfdc:	1ad3      	subs	r3, r2, r3
 801cfde:	461a      	mov	r2, r3
 801cfe0:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 801cfe4:	4413      	add	r3, r2
 801cfe6:	009b      	lsls	r3, r3, #2
 801cfe8:	18ca      	adds	r2, r1, r3
 801cfea:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 801cfec:	6013      	str	r3, [r2, #0]

      /* add back */
      if (is_negative) {
 801cfee:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801cff0:	2b00      	cmp	r3, #0
 801cff2:	d03d      	beq.n	801d070 <bi_divide+0x3dc>
        Q(j)--;
 801cff4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 801cff6:	68d9      	ldr	r1, [r3, #12]
 801cff8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 801cffa:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801cffe:	461a      	mov	r2, r3
 801d000:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 801d002:	1ad3      	subs	r3, r2, r3
 801d004:	461a      	mov	r2, r3
 801d006:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 801d00a:	4413      	add	r3, r2
 801d00c:	009b      	lsls	r3, r3, #2
 801d00e:	18ca      	adds	r2, r1, r3
 801d010:	6813      	ldr	r3, [r2, #0]
 801d012:	3b01      	subs	r3, #1
 801d014:	6013      	str	r3, [r2, #0]
        tmp_u = bi_add(ctx, tmp_u, bi_copy(v));
 801d016:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 801d018:	f7ff fc62 	bl	801c8e0 <bi_copy>
 801d01c:	4603      	mov	r3, r0
 801d01e:	461a      	mov	r2, r3
 801d020:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 801d022:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 801d024:	f7ff fcfe 	bl	801ca24 <bi_add>
 801d028:	67b8      	str	r0, [r7, #120]	@ 0x78

        /* lop off the carry */
        tmp_u->size--;
 801d02a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801d02c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801d030:	b29b      	uxth	r3, r3
 801d032:	3b01      	subs	r3, #1
 801d034:	b29b      	uxth	r3, r3
 801d036:	b21b      	sxth	r3, r3
 801d038:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 801d03a:	8093      	strh	r3, [r2, #4]
        v->size--;
 801d03c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801d03e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801d042:	b29b      	uxth	r3, r3
 801d044:	3b01      	subs	r3, #1
 801d046:	b29b      	uxth	r3, r3
 801d048:	b21b      	sxth	r3, r3
 801d04a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 801d04c:	8093      	strh	r3, [r2, #4]
 801d04e:	e00f      	b.n	801d070 <bi_divide+0x3dc>
      }
    } else {
      Q(j) = 0;
 801d050:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 801d052:	68d9      	ldr	r1, [r3, #12]
 801d054:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 801d056:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801d05a:	461a      	mov	r2, r3
 801d05c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 801d05e:	1ad3      	subs	r3, r2, r3
 801d060:	461a      	mov	r2, r3
 801d062:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 801d066:	4413      	add	r3, r2
 801d068:	009b      	lsls	r3, r3, #2
 801d06a:	18ca      	adds	r2, r1, r3
 801d06c:	2300      	movs	r3, #0
 801d06e:	6013      	str	r3, [r2, #0]
    }

    /* copy back to u */
    memcpy(&u->comps[u->size - n - 1 - j], tmp_u->comps,
 801d070:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801d072:	68d9      	ldr	r1, [r3, #12]
 801d074:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801d076:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801d07a:	461a      	mov	r2, r3
 801d07c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801d07e:	1ad3      	subs	r3, r2, r3
 801d080:	1e5a      	subs	r2, r3, #1
 801d082:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 801d084:	1ad3      	subs	r3, r2, r3
 801d086:	009b      	lsls	r3, r3, #2
 801d088:	18c8      	adds	r0, r1, r3
 801d08a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801d08c:	68d9      	ldr	r1, [r3, #12]
           (size_t) (n + 1) * COMP_BYTE_SIZE);
 801d08e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801d090:	3301      	adds	r3, #1
    memcpy(&u->comps[u->size - n - 1 - j], tmp_u->comps,
 801d092:	009b      	lsls	r3, r3, #2
 801d094:	461a      	mov	r2, r3
 801d096:	f007 fb76 	bl	8024786 <memcpy>
  } while (++j <= m);
 801d09a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 801d09c:	3301      	adds	r3, #1
 801d09e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 801d0a0:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 801d0a2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801d0a4:	429a      	cmp	r2, r3
 801d0a6:	f77f ae82 	ble.w	801cdae <bi_divide+0x11a>

  bi_free(ctx, tmp_u);
 801d0aa:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 801d0ac:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 801d0ae:	f7ff fc57 	bl	801c960 <bi_free>
  bi_free(ctx, v);
 801d0b2:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 801d0b4:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 801d0b6:	f7ff fc53 	bl	801c960 <bi_free>

  if (is_mod) /* get the remainder */
 801d0ba:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801d0bc:	2b00      	cmp	r3, #0
 801d0be:	d00e      	beq.n	801d0de <bi_divide+0x44a>
  {
    bi_free(ctx, quotient);
 801d0c0:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 801d0c2:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 801d0c4:	f7ff fc4c 	bl	801c960 <bi_free>
    return bi_int_divide(ctx, trim(u), d);
 801d0c8:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 801d0ca:	f000 fbca 	bl	801d862 <trim>
 801d0ce:	4603      	mov	r3, r0
 801d0d0:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 801d0d2:	4619      	mov	r1, r3
 801d0d4:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 801d0d6:	f000 f813 	bl	801d100 <bi_int_divide>
 801d0da:	4603      	mov	r3, r0
 801d0dc:	e007      	b.n	801d0ee <bi_divide+0x45a>
  } else /* get the quotient */
  {
    bi_free(ctx, u);
 801d0de:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 801d0e0:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 801d0e2:	f7ff fc3d 	bl	801c960 <bi_free>
    return trim(quotient);
 801d0e6:	6e38      	ldr	r0, [r7, #96]	@ 0x60
 801d0e8:	f000 fbbb 	bl	801d862 <trim>
 801d0ec:	4603      	mov	r3, r0
  }
}
 801d0ee:	4618      	mov	r0, r3
 801d0f0:	3780      	adds	r7, #128	@ 0x80
 801d0f2:	46bd      	mov	sp, r7
 801d0f4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 801d0f8:	3ffffffe 	.word	0x3ffffffe
 801d0fc:	3ffffffd 	.word	0x3ffffffd

0801d100 <bi_int_divide>:

/*
 * Perform an integer divide on a bigint.
 */
static bigint *bi_int_divide(BI_CTX *ctx, bigint *biR, comp denom) {
 801d100:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 801d104:	b08a      	sub	sp, #40	@ 0x28
 801d106:	af00      	add	r7, sp, #0
 801d108:	6178      	str	r0, [r7, #20]
 801d10a:	6139      	str	r1, [r7, #16]
 801d10c:	60fa      	str	r2, [r7, #12]
  int i = biR->size - 1;
 801d10e:	693b      	ldr	r3, [r7, #16]
 801d110:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801d114:	3b01      	subs	r3, #1
 801d116:	627b      	str	r3, [r7, #36]	@ 0x24
  long_comp r = 0;
 801d118:	f04f 0200 	mov.w	r2, #0
 801d11c:	f04f 0300 	mov.w	r3, #0
 801d120:	e9c7 2306 	strd	r2, r3, [r7, #24]

  (void) ctx;
  check(biR);

  do {
    r = (r << COMP_BIT_SIZE) + biR->comps[i];
 801d124:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 801d128:	f04f 0200 	mov.w	r2, #0
 801d12c:	f04f 0300 	mov.w	r3, #0
 801d130:	0003      	movs	r3, r0
 801d132:	2200      	movs	r2, #0
 801d134:	6939      	ldr	r1, [r7, #16]
 801d136:	68c8      	ldr	r0, [r1, #12]
 801d138:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 801d13a:	0089      	lsls	r1, r1, #2
 801d13c:	4401      	add	r1, r0
 801d13e:	6809      	ldr	r1, [r1, #0]
 801d140:	2000      	movs	r0, #0
 801d142:	460c      	mov	r4, r1
 801d144:	4605      	mov	r5, r0
 801d146:	eb12 0804 	adds.w	r8, r2, r4
 801d14a:	eb43 0905 	adc.w	r9, r3, r5
 801d14e:	e9c7 8906 	strd	r8, r9, [r7, #24]
    biR->comps[i] = (comp)(r / denom);
 801d152:	68fb      	ldr	r3, [r7, #12]
 801d154:	2200      	movs	r2, #0
 801d156:	603b      	str	r3, [r7, #0]
 801d158:	607a      	str	r2, [r7, #4]
 801d15a:	e9d7 2300 	ldrd	r2, r3, [r7]
 801d15e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 801d162:	f7e3 f8d5 	bl	8000310 <__aeabi_uldivmod>
 801d166:	4602      	mov	r2, r0
 801d168:	460b      	mov	r3, r1
 801d16a:	4610      	mov	r0, r2
 801d16c:	4619      	mov	r1, r3
 801d16e:	693b      	ldr	r3, [r7, #16]
 801d170:	68da      	ldr	r2, [r3, #12]
 801d172:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801d174:	009b      	lsls	r3, r3, #2
 801d176:	4413      	add	r3, r2
 801d178:	4602      	mov	r2, r0
 801d17a:	601a      	str	r2, [r3, #0]
    r %= denom;
 801d17c:	68fb      	ldr	r3, [r7, #12]
 801d17e:	2200      	movs	r2, #0
 801d180:	469a      	mov	sl, r3
 801d182:	4693      	mov	fp, r2
 801d184:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 801d188:	4652      	mov	r2, sl
 801d18a:	465b      	mov	r3, fp
 801d18c:	f7e3 f8c0 	bl	8000310 <__aeabi_uldivmod>
 801d190:	e9c7 2306 	strd	r2, r3, [r7, #24]
  } while (--i >= 0);
 801d194:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801d196:	3b01      	subs	r3, #1
 801d198:	627b      	str	r3, [r7, #36]	@ 0x24
 801d19a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801d19c:	2b00      	cmp	r3, #0
 801d19e:	dac1      	bge.n	801d124 <bi_int_divide+0x24>

  return trim(biR);
 801d1a0:	6938      	ldr	r0, [r7, #16]
 801d1a2:	f000 fb5e 	bl	801d862 <trim>
 801d1a6:	4603      	mov	r3, r0
}
 801d1a8:	4618      	mov	r0, r3
 801d1aa:	3728      	adds	r7, #40	@ 0x28
 801d1ac:	46bd      	mov	sp, r7
 801d1ae:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0801d1b2 <bi_import>:
 * @param ctx [in]  The bigint session context.
 * @param data [in] The data to be converted.
 * @param size [in] The number of bytes of data.
 * @return A bigint representing this data.
 */
NS_INTERNAL bigint *bi_import(BI_CTX *ctx, const uint8_t *data, int size) {
 801d1b2:	b580      	push	{r7, lr}
 801d1b4:	b088      	sub	sp, #32
 801d1b6:	af00      	add	r7, sp, #0
 801d1b8:	60f8      	str	r0, [r7, #12]
 801d1ba:	60b9      	str	r1, [r7, #8]
 801d1bc:	607a      	str	r2, [r7, #4]
  bigint *biR = alloc(ctx, (size + COMP_BYTE_SIZE - 1) / COMP_BYTE_SIZE);
 801d1be:	687b      	ldr	r3, [r7, #4]
 801d1c0:	3303      	adds	r3, #3
 801d1c2:	2b00      	cmp	r3, #0
 801d1c4:	da00      	bge.n	801d1c8 <bi_import+0x16>
 801d1c6:	3303      	adds	r3, #3
 801d1c8:	109b      	asrs	r3, r3, #2
 801d1ca:	4619      	mov	r1, r3
 801d1cc:	68f8      	ldr	r0, [r7, #12]
 801d1ce:	f000 fa99 	bl	801d704 <alloc>
 801d1d2:	6138      	str	r0, [r7, #16]
  int i, j = 0, offset = 0;
 801d1d4:	2300      	movs	r3, #0
 801d1d6:	61bb      	str	r3, [r7, #24]
 801d1d8:	2300      	movs	r3, #0
 801d1da:	617b      	str	r3, [r7, #20]

  memset(biR->comps, 0, (size_t) (biR->size * COMP_BYTE_SIZE));
 801d1dc:	693b      	ldr	r3, [r7, #16]
 801d1de:	68d8      	ldr	r0, [r3, #12]
 801d1e0:	693b      	ldr	r3, [r7, #16]
 801d1e2:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801d1e6:	009b      	lsls	r3, r3, #2
 801d1e8:	461a      	mov	r2, r3
 801d1ea:	2100      	movs	r1, #0
 801d1ec:	f007 f94e 	bl	802448c <memset>

  for (i = size - 1; i >= 0; i--) {
 801d1f0:	687b      	ldr	r3, [r7, #4]
 801d1f2:	3b01      	subs	r3, #1
 801d1f4:	61fb      	str	r3, [r7, #28]
 801d1f6:	e022      	b.n	801d23e <bi_import+0x8c>
    biR->comps[offset] += (comp) data[i] << (j * 8);
 801d1f8:	693b      	ldr	r3, [r7, #16]
 801d1fa:	68da      	ldr	r2, [r3, #12]
 801d1fc:	697b      	ldr	r3, [r7, #20]
 801d1fe:	009b      	lsls	r3, r3, #2
 801d200:	4413      	add	r3, r2
 801d202:	6819      	ldr	r1, [r3, #0]
 801d204:	69fb      	ldr	r3, [r7, #28]
 801d206:	68ba      	ldr	r2, [r7, #8]
 801d208:	4413      	add	r3, r2
 801d20a:	781b      	ldrb	r3, [r3, #0]
 801d20c:	461a      	mov	r2, r3
 801d20e:	69bb      	ldr	r3, [r7, #24]
 801d210:	00db      	lsls	r3, r3, #3
 801d212:	409a      	lsls	r2, r3
 801d214:	693b      	ldr	r3, [r7, #16]
 801d216:	68d8      	ldr	r0, [r3, #12]
 801d218:	697b      	ldr	r3, [r7, #20]
 801d21a:	009b      	lsls	r3, r3, #2
 801d21c:	4403      	add	r3, r0
 801d21e:	440a      	add	r2, r1
 801d220:	601a      	str	r2, [r3, #0]

    if (++j == COMP_BYTE_SIZE) {
 801d222:	69bb      	ldr	r3, [r7, #24]
 801d224:	3301      	adds	r3, #1
 801d226:	61bb      	str	r3, [r7, #24]
 801d228:	69bb      	ldr	r3, [r7, #24]
 801d22a:	2b04      	cmp	r3, #4
 801d22c:	d104      	bne.n	801d238 <bi_import+0x86>
      j = 0;
 801d22e:	2300      	movs	r3, #0
 801d230:	61bb      	str	r3, [r7, #24]
      offset++;
 801d232:	697b      	ldr	r3, [r7, #20]
 801d234:	3301      	adds	r3, #1
 801d236:	617b      	str	r3, [r7, #20]
  for (i = size - 1; i >= 0; i--) {
 801d238:	69fb      	ldr	r3, [r7, #28]
 801d23a:	3b01      	subs	r3, #1
 801d23c:	61fb      	str	r3, [r7, #28]
 801d23e:	69fb      	ldr	r3, [r7, #28]
 801d240:	2b00      	cmp	r3, #0
 801d242:	dad9      	bge.n	801d1f8 <bi_import+0x46>
    }
  }

  return trim(biR);
 801d244:	6938      	ldr	r0, [r7, #16]
 801d246:	f000 fb0c 	bl	801d862 <trim>
 801d24a:	4603      	mov	r3, r0
}
 801d24c:	4618      	mov	r0, r3
 801d24e:	3720      	adds	r7, #32
 801d250:	46bd      	mov	sp, r7
 801d252:	bd80      	pop	{r7, pc}

0801d254 <bi_export>:
 * @param x [in]  The bigint to be converted.
 * @param data [out] The converted data as a byte stream.
 * @param size [in] The maximum size of the byte stream. Unused bytes will be
 * zeroed.
 */
NS_INTERNAL void bi_export(BI_CTX *ctx, bigint *x, uint8_t *data, int size) {
 801d254:	b580      	push	{r7, lr}
 801d256:	b08a      	sub	sp, #40	@ 0x28
 801d258:	af00      	add	r7, sp, #0
 801d25a:	60f8      	str	r0, [r7, #12]
 801d25c:	60b9      	str	r1, [r7, #8]
 801d25e:	607a      	str	r2, [r7, #4]
 801d260:	603b      	str	r3, [r7, #0]
  int i, j, k = size - 1;
 801d262:	683b      	ldr	r3, [r7, #0]
 801d264:	3b01      	subs	r3, #1
 801d266:	61fb      	str	r3, [r7, #28]

  check(x);
  memset(data, 0, (size_t) size); /* ensure all leading 0's are cleared */
 801d268:	683b      	ldr	r3, [r7, #0]
 801d26a:	461a      	mov	r2, r3
 801d26c:	2100      	movs	r1, #0
 801d26e:	6878      	ldr	r0, [r7, #4]
 801d270:	f007 f90c 	bl	802448c <memset>

  for (i = 0; i < x->size; i++) {
 801d274:	2300      	movs	r3, #0
 801d276:	627b      	str	r3, [r7, #36]	@ 0x24
 801d278:	e02b      	b.n	801d2d2 <bi_export+0x7e>
    for (j = 0; j < COMP_BYTE_SIZE; j++) {
 801d27a:	2300      	movs	r3, #0
 801d27c:	623b      	str	r3, [r7, #32]
 801d27e:	e022      	b.n	801d2c6 <bi_export+0x72>
      comp mask = (comp) 0xff << (j * 8);
 801d280:	6a3b      	ldr	r3, [r7, #32]
 801d282:	00db      	lsls	r3, r3, #3
 801d284:	22ff      	movs	r2, #255	@ 0xff
 801d286:	fa02 f303 	lsl.w	r3, r2, r3
 801d28a:	61bb      	str	r3, [r7, #24]
      int num = (int) (x->comps[i] & mask) >> (j * 8);
 801d28c:	68bb      	ldr	r3, [r7, #8]
 801d28e:	68da      	ldr	r2, [r3, #12]
 801d290:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801d292:	009b      	lsls	r3, r3, #2
 801d294:	4413      	add	r3, r2
 801d296:	681a      	ldr	r2, [r3, #0]
 801d298:	69bb      	ldr	r3, [r7, #24]
 801d29a:	4013      	ands	r3, r2
 801d29c:	461a      	mov	r2, r3
 801d29e:	6a3b      	ldr	r3, [r7, #32]
 801d2a0:	00db      	lsls	r3, r3, #3
 801d2a2:	fa42 f303 	asr.w	r3, r2, r3
 801d2a6:	617b      	str	r3, [r7, #20]
      data[k--] = (uint8_t) num;
 801d2a8:	69fb      	ldr	r3, [r7, #28]
 801d2aa:	1e5a      	subs	r2, r3, #1
 801d2ac:	61fa      	str	r2, [r7, #28]
 801d2ae:	461a      	mov	r2, r3
 801d2b0:	687b      	ldr	r3, [r7, #4]
 801d2b2:	4413      	add	r3, r2
 801d2b4:	697a      	ldr	r2, [r7, #20]
 801d2b6:	b2d2      	uxtb	r2, r2
 801d2b8:	701a      	strb	r2, [r3, #0]

      if (k < 0) {
 801d2ba:	69fb      	ldr	r3, [r7, #28]
 801d2bc:	2b00      	cmp	r3, #0
 801d2be:	db10      	blt.n	801d2e2 <bi_export+0x8e>
    for (j = 0; j < COMP_BYTE_SIZE; j++) {
 801d2c0:	6a3b      	ldr	r3, [r7, #32]
 801d2c2:	3301      	adds	r3, #1
 801d2c4:	623b      	str	r3, [r7, #32]
 801d2c6:	6a3b      	ldr	r3, [r7, #32]
 801d2c8:	2b03      	cmp	r3, #3
 801d2ca:	ddd9      	ble.n	801d280 <bi_export+0x2c>
  for (i = 0; i < x->size; i++) {
 801d2cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801d2ce:	3301      	adds	r3, #1
 801d2d0:	627b      	str	r3, [r7, #36]	@ 0x24
 801d2d2:	68bb      	ldr	r3, [r7, #8]
 801d2d4:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801d2d8:	461a      	mov	r2, r3
 801d2da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801d2dc:	4293      	cmp	r3, r2
 801d2de:	dbcc      	blt.n	801d27a <bi_export+0x26>
        goto buf_done;
      }
    }
  }
buf_done:
 801d2e0:	e000      	b.n	801d2e4 <bi_export+0x90>
        goto buf_done;
 801d2e2:	bf00      	nop

  bi_free(ctx, x);
 801d2e4:	68b9      	ldr	r1, [r7, #8]
 801d2e6:	68f8      	ldr	r0, [r7, #12]
 801d2e8:	f7ff fb3a 	bl	801c960 <bi_free>
}
 801d2ec:	bf00      	nop
 801d2ee:	3728      	adds	r7, #40	@ 0x28
 801d2f0:	46bd      	mov	sp, r7
 801d2f2:	bd80      	pop	{r7, pc}

0801d2f4 <bi_set_mod>:
 * @param mod_offset [in] There are three moduluii that can be stored - the
 * standard modulus, and its two primes p and q. This offset refers to which
 * modulus we are referring to.
 * @see bi_free_mod(), bi_mod_power().
 */
NS_INTERNAL void bi_set_mod(BI_CTX *ctx, bigint *bim, int mod_offset) {
 801d2f4:	b5b0      	push	{r4, r5, r7, lr}
 801d2f6:	b086      	sub	sp, #24
 801d2f8:	af00      	add	r7, sp, #0
 801d2fa:	60f8      	str	r0, [r7, #12]
 801d2fc:	60b9      	str	r1, [r7, #8]
 801d2fe:	607a      	str	r2, [r7, #4]
  int k = bim->size;
 801d300:	68bb      	ldr	r3, [r7, #8]
 801d302:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801d306:	617b      	str	r3, [r7, #20]
  comp d = (comp)((long_comp) COMP_RADIX / (bim->comps[k - 1] + 1));
 801d308:	68bb      	ldr	r3, [r7, #8]
 801d30a:	68da      	ldr	r2, [r3, #12]
 801d30c:	6979      	ldr	r1, [r7, #20]
 801d30e:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 801d312:	440b      	add	r3, r1
 801d314:	009b      	lsls	r3, r3, #2
 801d316:	4413      	add	r3, r2
 801d318:	681b      	ldr	r3, [r3, #0]
 801d31a:	3301      	adds	r3, #1
 801d31c:	2200      	movs	r2, #0
 801d31e:	461c      	mov	r4, r3
 801d320:	4615      	mov	r5, r2
 801d322:	4622      	mov	r2, r4
 801d324:	462b      	mov	r3, r5
 801d326:	f04f 0000 	mov.w	r0, #0
 801d32a:	f04f 0101 	mov.w	r1, #1
 801d32e:	f7e2 ffef 	bl	8000310 <__aeabi_uldivmod>
 801d332:	4602      	mov	r2, r0
 801d334:	460b      	mov	r3, r1
 801d336:	4613      	mov	r3, r2
 801d338:	613b      	str	r3, [r7, #16]
#ifdef CONFIG_BIGINT_MONTGOMERY
  bigint *R, *R2;
#endif

  ctx->bi_mod[mod_offset] = bim;
 801d33a:	68fa      	ldr	r2, [r7, #12]
 801d33c:	687b      	ldr	r3, [r7, #4]
 801d33e:	3302      	adds	r3, #2
 801d340:	009b      	lsls	r3, r3, #2
 801d342:	4413      	add	r3, r2
 801d344:	68ba      	ldr	r2, [r7, #8]
 801d346:	605a      	str	r2, [r3, #4]
  bi_permanent(ctx->bi_mod[mod_offset]);
 801d348:	68fa      	ldr	r2, [r7, #12]
 801d34a:	687b      	ldr	r3, [r7, #4]
 801d34c:	3302      	adds	r3, #2
 801d34e:	009b      	lsls	r3, r3, #2
 801d350:	4413      	add	r3, r2
 801d352:	685b      	ldr	r3, [r3, #4]
 801d354:	4618      	mov	r0, r3
 801d356:	f7ff fadb 	bl	801c910 <bi_permanent>
  ctx->bi_normalised_mod[mod_offset] = bi_int_multiply(ctx, bim, d);
 801d35a:	693a      	ldr	r2, [r7, #16]
 801d35c:	68b9      	ldr	r1, [r7, #8]
 801d35e:	68f8      	ldr	r0, [r7, #12]
 801d360:	f7ff fc15 	bl	801cb8e <bi_int_multiply>
 801d364:	4601      	mov	r1, r0
 801d366:	68fb      	ldr	r3, [r7, #12]
 801d368:	687a      	ldr	r2, [r7, #4]
 801d36a:	3206      	adds	r2, #6
 801d36c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  bi_permanent(ctx->bi_normalised_mod[mod_offset]);
 801d370:	68fb      	ldr	r3, [r7, #12]
 801d372:	687a      	ldr	r2, [r7, #4]
 801d374:	3206      	adds	r2, #6
 801d376:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801d37a:	4618      	mov	r0, r3
 801d37c:	f7ff fac8 	bl	801c910 <bi_permanent>
  ctx->bi_mu[mod_offset] =
      bi_divide(ctx, comp_left_shift(bi_clone(ctx, ctx->bi_radix), k * 2 - 1),
                ctx->bi_mod[mod_offset], 0);
  bi_permanent(ctx->bi_mu[mod_offset]);
#endif
}
 801d380:	bf00      	nop
 801d382:	3718      	adds	r7, #24
 801d384:	46bd      	mov	sp, r7
 801d386:	bdb0      	pop	{r4, r5, r7, pc}

0801d388 <bi_free_mod>:
 * @brief Used when cleaning various bigints at the end of a session.
 * @param ctx [in]  The bigint session context.
 * @param mod_offset [in] The offset to use.
 * @see bi_set_mod().
 */
void bi_free_mod(BI_CTX *ctx, int mod_offset) {
 801d388:	b580      	push	{r7, lr}
 801d38a:	b082      	sub	sp, #8
 801d38c:	af00      	add	r7, sp, #0
 801d38e:	6078      	str	r0, [r7, #4]
 801d390:	6039      	str	r1, [r7, #0]
  bi_depermanent(ctx->bi_mod[mod_offset]);
 801d392:	687a      	ldr	r2, [r7, #4]
 801d394:	683b      	ldr	r3, [r7, #0]
 801d396:	3302      	adds	r3, #2
 801d398:	009b      	lsls	r3, r3, #2
 801d39a:	4413      	add	r3, r2
 801d39c:	685b      	ldr	r3, [r3, #4]
 801d39e:	4618      	mov	r0, r3
 801d3a0:	f7ff faca 	bl	801c938 <bi_depermanent>
  bi_free(ctx, ctx->bi_mod[mod_offset]);
 801d3a4:	687a      	ldr	r2, [r7, #4]
 801d3a6:	683b      	ldr	r3, [r7, #0]
 801d3a8:	3302      	adds	r3, #2
 801d3aa:	009b      	lsls	r3, r3, #2
 801d3ac:	4413      	add	r3, r2
 801d3ae:	685b      	ldr	r3, [r3, #4]
 801d3b0:	4619      	mov	r1, r3
 801d3b2:	6878      	ldr	r0, [r7, #4]
 801d3b4:	f7ff fad4 	bl	801c960 <bi_free>
  bi_free(ctx, ctx->bi_R_mod_m[mod_offset]);
#elif defined(CONFIG_BIGINT_BARRETT)
  bi_depermanent(ctx->bi_mu[mod_offset]);
  bi_free(ctx, ctx->bi_mu[mod_offset]);
#endif
  bi_depermanent(ctx->bi_normalised_mod[mod_offset]);
 801d3b8:	687b      	ldr	r3, [r7, #4]
 801d3ba:	683a      	ldr	r2, [r7, #0]
 801d3bc:	3206      	adds	r2, #6
 801d3be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801d3c2:	4618      	mov	r0, r3
 801d3c4:	f7ff fab8 	bl	801c938 <bi_depermanent>
  bi_free(ctx, ctx->bi_normalised_mod[mod_offset]);
 801d3c8:	687b      	ldr	r3, [r7, #4]
 801d3ca:	683a      	ldr	r2, [r7, #0]
 801d3cc:	3206      	adds	r2, #6
 801d3ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801d3d2:	4619      	mov	r1, r3
 801d3d4:	6878      	ldr	r0, [r7, #4]
 801d3d6:	f7ff fac3 	bl	801c960 <bi_free>
}
 801d3da:	bf00      	nop
 801d3dc:	3708      	adds	r7, #8
 801d3de:	46bd      	mov	sp, r7
 801d3e0:	bd80      	pop	{r7, pc}

0801d3e2 <regular_multiply>:
 * Barrett reduction has no need for some parts of the product, so ignore bits
 * of the multiply. This routine gives Barrett its big performance
 * improvements over Classical/Montgomery reduction methods.
 */
static bigint *regular_multiply(BI_CTX *ctx, bigint *bia, bigint *bib,
                                int inner_partial, int outer_partial) {
 801d3e2:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 801d3e6:	b098      	sub	sp, #96	@ 0x60
 801d3e8:	af00      	add	r7, sp, #0
 801d3ea:	62f8      	str	r0, [r7, #44]	@ 0x2c
 801d3ec:	62b9      	str	r1, [r7, #40]	@ 0x28
 801d3ee:	627a      	str	r2, [r7, #36]	@ 0x24
 801d3f0:	623b      	str	r3, [r7, #32]
  int i = 0, j;
 801d3f2:	2300      	movs	r3, #0
 801d3f4:	65fb      	str	r3, [r7, #92]	@ 0x5c
  int n = bia->size;
 801d3f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801d3f8:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801d3fc:	64fb      	str	r3, [r7, #76]	@ 0x4c
  int t = bib->size;
 801d3fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801d400:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801d404:	64bb      	str	r3, [r7, #72]	@ 0x48
  bigint *biR = alloc(ctx, n + t);
 801d406:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 801d408:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801d40a:	4413      	add	r3, r2
 801d40c:	4619      	mov	r1, r3
 801d40e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 801d410:	f000 f978 	bl	801d704 <alloc>
 801d414:	6478      	str	r0, [r7, #68]	@ 0x44
  comp *sr = biR->comps;
 801d416:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801d418:	68db      	ldr	r3, [r3, #12]
 801d41a:	643b      	str	r3, [r7, #64]	@ 0x40
  comp *sa = bia->comps;
 801d41c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801d41e:	68db      	ldr	r3, [r3, #12]
 801d420:	63fb      	str	r3, [r7, #60]	@ 0x3c
  comp *sb = bib->comps;
 801d422:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801d424:	68db      	ldr	r3, [r3, #12]
 801d426:	63bb      	str	r3, [r7, #56]	@ 0x38

  check(bia);
  check(bib);

  /* clear things to start with */
  memset(biR->comps, 0, (size_t) ((n + t) * COMP_BYTE_SIZE));
 801d428:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801d42a:	68d8      	ldr	r0, [r3, #12]
 801d42c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 801d42e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801d430:	4413      	add	r3, r2
 801d432:	009b      	lsls	r3, r3, #2
 801d434:	461a      	mov	r2, r3
 801d436:	2100      	movs	r1, #0
 801d438:	f007 f828 	bl	802448c <memset>

  do {
    long_comp tmp;
    comp carry = 0;
 801d43c:	2300      	movs	r3, #0
 801d43e:	657b      	str	r3, [r7, #84]	@ 0x54
    int r_index = i;
 801d440:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801d442:	653b      	str	r3, [r7, #80]	@ 0x50
    j = 0;
 801d444:	2300      	movs	r3, #0
 801d446:	65bb      	str	r3, [r7, #88]	@ 0x58

    if (outer_partial && outer_partial - i > 0 && outer_partial < n) {
 801d448:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 801d44c:	2b00      	cmp	r3, #0
 801d44e:	d014      	beq.n	801d47a <regular_multiply+0x98>
 801d450:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 801d454:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801d456:	1ad3      	subs	r3, r2, r3
 801d458:	2b00      	cmp	r3, #0
 801d45a:	dd0e      	ble.n	801d47a <regular_multiply+0x98>
 801d45c:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 801d460:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801d462:	429a      	cmp	r2, r3
 801d464:	da09      	bge.n	801d47a <regular_multiply+0x98>
      r_index = outer_partial - 1;
 801d466:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 801d46a:	3b01      	subs	r3, #1
 801d46c:	653b      	str	r3, [r7, #80]	@ 0x50
      j = outer_partial - i - 1;
 801d46e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 801d472:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801d474:	1ad3      	subs	r3, r2, r3
 801d476:	3b01      	subs	r3, #1
 801d478:	65bb      	str	r3, [r7, #88]	@ 0x58
    }

    do {
      if (inner_partial && r_index >= inner_partial) {
 801d47a:	6a3b      	ldr	r3, [r7, #32]
 801d47c:	2b00      	cmp	r3, #0
 801d47e:	d003      	beq.n	801d488 <regular_multiply+0xa6>
 801d480:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 801d482:	6a3b      	ldr	r3, [r7, #32]
 801d484:	429a      	cmp	r2, r3
 801d486:	da5a      	bge.n	801d53e <regular_multiply+0x15c>
        break;
      }

      tmp = sr[r_index] + ((long_comp) sa[j]) * sb[i] + carry;
 801d488:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801d48a:	009a      	lsls	r2, r3, #2
 801d48c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801d48e:	4413      	add	r3, r2
 801d490:	681b      	ldr	r3, [r3, #0]
 801d492:	2200      	movs	r2, #0
 801d494:	61bb      	str	r3, [r7, #24]
 801d496:	61fa      	str	r2, [r7, #28]
 801d498:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801d49a:	009a      	lsls	r2, r3, #2
 801d49c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801d49e:	4413      	add	r3, r2
 801d4a0:	681b      	ldr	r3, [r3, #0]
 801d4a2:	2200      	movs	r2, #0
 801d4a4:	469a      	mov	sl, r3
 801d4a6:	4693      	mov	fp, r2
 801d4a8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801d4aa:	009a      	lsls	r2, r3, #2
 801d4ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d4ae:	4413      	add	r3, r2
 801d4b0:	681b      	ldr	r3, [r3, #0]
 801d4b2:	2200      	movs	r2, #0
 801d4b4:	613b      	str	r3, [r7, #16]
 801d4b6:	617a      	str	r2, [r7, #20]
 801d4b8:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 801d4bc:	4603      	mov	r3, r0
 801d4be:	fb03 f20b 	mul.w	r2, r3, fp
 801d4c2:	460b      	mov	r3, r1
 801d4c4:	fb0a f303 	mul.w	r3, sl, r3
 801d4c8:	4413      	add	r3, r2
 801d4ca:	4602      	mov	r2, r0
 801d4cc:	fbaa 4502 	umull	r4, r5, sl, r2
 801d4d0:	442b      	add	r3, r5
 801d4d2:	461d      	mov	r5, r3
 801d4d4:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 801d4d8:	460b      	mov	r3, r1
 801d4da:	eb13 0804 	adds.w	r8, r3, r4
 801d4de:	4613      	mov	r3, r2
 801d4e0:	eb43 0905 	adc.w	r9, r3, r5
 801d4e4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801d4e6:	2200      	movs	r2, #0
 801d4e8:	60bb      	str	r3, [r7, #8]
 801d4ea:	60fa      	str	r2, [r7, #12]
 801d4ec:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 801d4f0:	460b      	mov	r3, r1
 801d4f2:	eb18 0303 	adds.w	r3, r8, r3
 801d4f6:	603b      	str	r3, [r7, #0]
 801d4f8:	4613      	mov	r3, r2
 801d4fa:	eb49 0303 	adc.w	r3, r9, r3
 801d4fe:	607b      	str	r3, [r7, #4]
 801d500:	e9d7 2300 	ldrd	r2, r3, [r7]
 801d504:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
      sr[r_index++] = (comp) tmp; /* downsize */
 801d508:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 801d50a:	1c53      	adds	r3, r2, #1
 801d50c:	653b      	str	r3, [r7, #80]	@ 0x50
 801d50e:	4613      	mov	r3, r2
 801d510:	009a      	lsls	r2, r3, #2
 801d512:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801d514:	441a      	add	r2, r3
 801d516:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801d518:	6013      	str	r3, [r2, #0]
      carry = (comp) (tmp >> COMP_BIT_SIZE);
 801d51a:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 801d51e:	f04f 0000 	mov.w	r0, #0
 801d522:	f04f 0100 	mov.w	r1, #0
 801d526:	0018      	movs	r0, r3
 801d528:	2100      	movs	r1, #0
 801d52a:	4603      	mov	r3, r0
 801d52c:	657b      	str	r3, [r7, #84]	@ 0x54
    } while (++j < n);
 801d52e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801d530:	3301      	adds	r3, #1
 801d532:	65bb      	str	r3, [r7, #88]	@ 0x58
 801d534:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 801d536:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801d538:	429a      	cmp	r2, r3
 801d53a:	db9e      	blt.n	801d47a <regular_multiply+0x98>
 801d53c:	e000      	b.n	801d540 <regular_multiply+0x15e>
        break;
 801d53e:	bf00      	nop

    sr[r_index] = carry;
 801d540:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801d542:	009a      	lsls	r2, r3, #2
 801d544:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801d546:	441a      	add	r2, r3
 801d548:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801d54a:	6013      	str	r3, [r2, #0]
  } while (++i < t);
 801d54c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801d54e:	3301      	adds	r3, #1
 801d550:	65fb      	str	r3, [r7, #92]	@ 0x5c
 801d552:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 801d554:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801d556:	429a      	cmp	r2, r3
 801d558:	f6ff af70 	blt.w	801d43c <regular_multiply+0x5a>

  bi_free(ctx, bia);
 801d55c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 801d55e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 801d560:	f7ff f9fe 	bl	801c960 <bi_free>
  bi_free(ctx, bib);
 801d564:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 801d566:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 801d568:	f7ff f9fa 	bl	801c960 <bi_free>
  return trim(biR);
 801d56c:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 801d56e:	f000 f978 	bl	801d862 <trim>
 801d572:	4603      	mov	r3, r0
}
 801d574:	4618      	mov	r0, r3
 801d576:	3760      	adds	r7, #96	@ 0x60
 801d578:	46bd      	mov	sp, r7
 801d57a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0801d57e <bi_multiply>:
 * @param ctx [in]  The bigint session context.
 * @param bia [in]  A bigint.
 * @param bib [in]  Another bigint.
 * @return The result of the multiplication.
 */
NS_INTERNAL bigint *bi_multiply(BI_CTX *ctx, bigint *bia, bigint *bib) {
 801d57e:	b580      	push	{r7, lr}
 801d580:	b086      	sub	sp, #24
 801d582:	af02      	add	r7, sp, #8
 801d584:	60f8      	str	r0, [r7, #12]
 801d586:	60b9      	str	r1, [r7, #8]
 801d588:	607a      	str	r2, [r7, #4]
    return regular_multiply(ctx, bia, bib, 0, 0);
  }

  return karatsuba(ctx, bia, bib, 0);
#else
  return regular_multiply(ctx, bia, bib, 0, 0);
 801d58a:	2300      	movs	r3, #0
 801d58c:	9300      	str	r3, [sp, #0]
 801d58e:	2300      	movs	r3, #0
 801d590:	687a      	ldr	r2, [r7, #4]
 801d592:	68b9      	ldr	r1, [r7, #8]
 801d594:	68f8      	ldr	r0, [r7, #12]
 801d596:	f7ff ff24 	bl	801d3e2 <regular_multiply>
 801d59a:	4603      	mov	r3, r0
#endif
}
 801d59c:	4618      	mov	r0, r3
 801d59e:	3710      	adds	r7, #16
 801d5a0:	46bd      	mov	sp, r7
 801d5a2:	bd80      	pop	{r7, pc}

0801d5a4 <bi_compare>:
 * @brief Compare two bigints.
 * @param bia [in]  A bigint.
 * @param bib [in]  Another bigint.
 * @return -1 if smaller, 1 if larger and 0 if equal.
 */
NS_INTERNAL int bi_compare(bigint *bia, bigint *bib) {
 801d5a4:	b480      	push	{r7}
 801d5a6:	b087      	sub	sp, #28
 801d5a8:	af00      	add	r7, sp, #0
 801d5aa:	6078      	str	r0, [r7, #4]
 801d5ac:	6039      	str	r1, [r7, #0]
  int r, i;

  check(bia);
  check(bib);

  if (bia->size > bib->size)
 801d5ae:	687b      	ldr	r3, [r7, #4]
 801d5b0:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 801d5b4:	683b      	ldr	r3, [r7, #0]
 801d5b6:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801d5ba:	429a      	cmp	r2, r3
 801d5bc:	dd02      	ble.n	801d5c4 <bi_compare+0x20>
    r = 1;
 801d5be:	2301      	movs	r3, #1
 801d5c0:	617b      	str	r3, [r7, #20]
 801d5c2:	e03d      	b.n	801d640 <bi_compare+0x9c>
  else if (bia->size < bib->size)
 801d5c4:	687b      	ldr	r3, [r7, #4]
 801d5c6:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 801d5ca:	683b      	ldr	r3, [r7, #0]
 801d5cc:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801d5d0:	429a      	cmp	r2, r3
 801d5d2:	da03      	bge.n	801d5dc <bi_compare+0x38>
    r = -1;
 801d5d4:	f04f 33ff 	mov.w	r3, #4294967295
 801d5d8:	617b      	str	r3, [r7, #20]
 801d5da:	e031      	b.n	801d640 <bi_compare+0x9c>
  else {
    comp *a = bia->comps;
 801d5dc:	687b      	ldr	r3, [r7, #4]
 801d5de:	68db      	ldr	r3, [r3, #12]
 801d5e0:	60fb      	str	r3, [r7, #12]
    comp *b = bib->comps;
 801d5e2:	683b      	ldr	r3, [r7, #0]
 801d5e4:	68db      	ldr	r3, [r3, #12]
 801d5e6:	60bb      	str	r3, [r7, #8]

    /* Same number of components.  Compare starting from the high end
     * and working down. */
    r = 0;
 801d5e8:	2300      	movs	r3, #0
 801d5ea:	617b      	str	r3, [r7, #20]
    i = bia->size - 1;
 801d5ec:	687b      	ldr	r3, [r7, #4]
 801d5ee:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801d5f2:	3b01      	subs	r3, #1
 801d5f4:	613b      	str	r3, [r7, #16]

    do {
      if (a[i] > b[i]) {
 801d5f6:	693b      	ldr	r3, [r7, #16]
 801d5f8:	009b      	lsls	r3, r3, #2
 801d5fa:	68fa      	ldr	r2, [r7, #12]
 801d5fc:	4413      	add	r3, r2
 801d5fe:	681a      	ldr	r2, [r3, #0]
 801d600:	693b      	ldr	r3, [r7, #16]
 801d602:	009b      	lsls	r3, r3, #2
 801d604:	68b9      	ldr	r1, [r7, #8]
 801d606:	440b      	add	r3, r1
 801d608:	681b      	ldr	r3, [r3, #0]
 801d60a:	429a      	cmp	r2, r3
 801d60c:	d902      	bls.n	801d614 <bi_compare+0x70>
        r = 1;
 801d60e:	2301      	movs	r3, #1
 801d610:	617b      	str	r3, [r7, #20]
        break;
 801d612:	e015      	b.n	801d640 <bi_compare+0x9c>
      } else if (a[i] < b[i]) {
 801d614:	693b      	ldr	r3, [r7, #16]
 801d616:	009b      	lsls	r3, r3, #2
 801d618:	68fa      	ldr	r2, [r7, #12]
 801d61a:	4413      	add	r3, r2
 801d61c:	681a      	ldr	r2, [r3, #0]
 801d61e:	693b      	ldr	r3, [r7, #16]
 801d620:	009b      	lsls	r3, r3, #2
 801d622:	68b9      	ldr	r1, [r7, #8]
 801d624:	440b      	add	r3, r1
 801d626:	681b      	ldr	r3, [r3, #0]
 801d628:	429a      	cmp	r2, r3
 801d62a:	d203      	bcs.n	801d634 <bi_compare+0x90>
        r = -1;
 801d62c:	f04f 33ff 	mov.w	r3, #4294967295
 801d630:	617b      	str	r3, [r7, #20]
        break;
 801d632:	e005      	b.n	801d640 <bi_compare+0x9c>
      }
    } while (--i >= 0);
 801d634:	693b      	ldr	r3, [r7, #16]
 801d636:	3b01      	subs	r3, #1
 801d638:	613b      	str	r3, [r7, #16]
 801d63a:	693b      	ldr	r3, [r7, #16]
 801d63c:	2b00      	cmp	r3, #0
 801d63e:	dada      	bge.n	801d5f6 <bi_compare+0x52>
  }

  return r;
 801d640:	697b      	ldr	r3, [r7, #20]
}
 801d642:	4618      	mov	r0, r3
 801d644:	371c      	adds	r7, #28
 801d646:	46bd      	mov	sp, r7
 801d648:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d64c:	4770      	bx	lr

0801d64e <more_comps>:

/*
 * Allocate and zero more components.  Does not consume bi.
 */
static void more_comps(bigint *bi, int n) {
 801d64e:	b580      	push	{r7, lr}
 801d650:	b084      	sub	sp, #16
 801d652:	af00      	add	r7, sp, #0
 801d654:	6078      	str	r0, [r7, #4]
 801d656:	6039      	str	r1, [r7, #0]
  if (n > bi->max_comps) {
 801d658:	687b      	ldr	r3, [r7, #4]
 801d65a:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 801d65e:	461a      	mov	r2, r3
 801d660:	683b      	ldr	r3, [r7, #0]
 801d662:	4293      	cmp	r3, r2
 801d664:	dd2d      	ble.n	801d6c2 <more_comps+0x74>
    int max = MAX(bi->max_comps * 2, n);
 801d666:	687b      	ldr	r3, [r7, #4]
 801d668:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 801d66c:	005b      	lsls	r3, r3, #1
 801d66e:	683a      	ldr	r2, [r7, #0]
 801d670:	4293      	cmp	r3, r2
 801d672:	bfb8      	it	lt
 801d674:	4613      	movlt	r3, r2
 801d676:	60fb      	str	r3, [r7, #12]
    void *p = mg_calloc(1, (size_t) max * COMP_BYTE_SIZE);
 801d678:	68fb      	ldr	r3, [r7, #12]
 801d67a:	009b      	lsls	r3, r3, #2
 801d67c:	4619      	mov	r1, r3
 801d67e:	2001      	movs	r0, #1
 801d680:	f7e9 fbc7 	bl	8006e12 <mg_calloc>
 801d684:	60b8      	str	r0, [r7, #8]
    if (p != NULL && bi->size > 0) memcpy(p, bi->comps, (size_t) bi->max_comps * COMP_BYTE_SIZE);
 801d686:	68bb      	ldr	r3, [r7, #8]
 801d688:	2b00      	cmp	r3, #0
 801d68a:	d00e      	beq.n	801d6aa <more_comps+0x5c>
 801d68c:	687b      	ldr	r3, [r7, #4]
 801d68e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801d692:	2b00      	cmp	r3, #0
 801d694:	dd09      	ble.n	801d6aa <more_comps+0x5c>
 801d696:	687b      	ldr	r3, [r7, #4]
 801d698:	68d9      	ldr	r1, [r3, #12]
 801d69a:	687b      	ldr	r3, [r7, #4]
 801d69c:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 801d6a0:	009b      	lsls	r3, r3, #2
 801d6a2:	461a      	mov	r2, r3
 801d6a4:	68b8      	ldr	r0, [r7, #8]
 801d6a6:	f007 f86e 	bl	8024786 <memcpy>
    mg_free(bi->comps);
 801d6aa:	687b      	ldr	r3, [r7, #4]
 801d6ac:	68db      	ldr	r3, [r3, #12]
 801d6ae:	4618      	mov	r0, r3
 801d6b0:	f7e9 fba4 	bl	8006dfc <mg_free>
    bi->max_comps = (short) max;
 801d6b4:	68fb      	ldr	r3, [r7, #12]
 801d6b6:	b21a      	sxth	r2, r3
 801d6b8:	687b      	ldr	r3, [r7, #4]
 801d6ba:	80da      	strh	r2, [r3, #6]
    bi->comps = (comp *) p;
 801d6bc:	687b      	ldr	r3, [r7, #4]
 801d6be:	68ba      	ldr	r2, [r7, #8]
 801d6c0:	60da      	str	r2, [r3, #12]
  }

  if (n > bi->size) {
 801d6c2:	687b      	ldr	r3, [r7, #4]
 801d6c4:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801d6c8:	461a      	mov	r2, r3
 801d6ca:	683b      	ldr	r3, [r7, #0]
 801d6cc:	4293      	cmp	r3, r2
 801d6ce:	dd11      	ble.n	801d6f4 <more_comps+0xa6>
    memset(&bi->comps[bi->size], 0, (size_t) (n - bi->size) * COMP_BYTE_SIZE);
 801d6d0:	687b      	ldr	r3, [r7, #4]
 801d6d2:	68da      	ldr	r2, [r3, #12]
 801d6d4:	687b      	ldr	r3, [r7, #4]
 801d6d6:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801d6da:	009b      	lsls	r3, r3, #2
 801d6dc:	18d0      	adds	r0, r2, r3
 801d6de:	687b      	ldr	r3, [r7, #4]
 801d6e0:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801d6e4:	461a      	mov	r2, r3
 801d6e6:	683b      	ldr	r3, [r7, #0]
 801d6e8:	1a9b      	subs	r3, r3, r2
 801d6ea:	009b      	lsls	r3, r3, #2
 801d6ec:	461a      	mov	r2, r3
 801d6ee:	2100      	movs	r1, #0
 801d6f0:	f006 fecc 	bl	802448c <memset>
  }

  bi->size = (short) n;
 801d6f4:	683b      	ldr	r3, [r7, #0]
 801d6f6:	b21a      	sxth	r2, r3
 801d6f8:	687b      	ldr	r3, [r7, #4]
 801d6fa:	809a      	strh	r2, [r3, #4]
}
 801d6fc:	bf00      	nop
 801d6fe:	3710      	adds	r7, #16
 801d700:	46bd      	mov	sp, r7
 801d702:	bd80      	pop	{r7, pc}

0801d704 <alloc>:

/*
 * Make a new empty bigint. It may just use an old one if one is available.
 * Otherwise get one off the heap.
 */
static bigint *alloc(BI_CTX *ctx, int size) {
 801d704:	b580      	push	{r7, lr}
 801d706:	b084      	sub	sp, #16
 801d708:	af00      	add	r7, sp, #0
 801d70a:	6078      	str	r0, [r7, #4]
 801d70c:	6039      	str	r1, [r7, #0]
  bigint *biR;

  /* Can we recycle an old bigint? */
  if (ctx->free_list != NULL) {
 801d70e:	687b      	ldr	r3, [r7, #4]
 801d710:	685b      	ldr	r3, [r3, #4]
 801d712:	2b00      	cmp	r3, #0
 801d714:	d016      	beq.n	801d744 <alloc+0x40>
    biR = ctx->free_list;
 801d716:	687b      	ldr	r3, [r7, #4]
 801d718:	685b      	ldr	r3, [r3, #4]
 801d71a:	60fb      	str	r3, [r7, #12]
    ctx->free_list = biR->next;
 801d71c:	68fb      	ldr	r3, [r7, #12]
 801d71e:	681a      	ldr	r2, [r3, #0]
 801d720:	687b      	ldr	r3, [r7, #4]
 801d722:	605a      	str	r2, [r3, #4]
    ctx->free_count--;
 801d724:	687b      	ldr	r3, [r7, #4]
 801d726:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801d728:	1e5a      	subs	r2, r3, #1
 801d72a:	687b      	ldr	r3, [r7, #4]
 801d72c:	631a      	str	r2, [r3, #48]	@ 0x30

    if (biR->refs != 0) {
 801d72e:	68fb      	ldr	r3, [r7, #12]
 801d730:	689b      	ldr	r3, [r3, #8]
 801d732:	2b00      	cmp	r3, #0
 801d734:	d001      	beq.n	801d73a <alloc+0x36>
#ifdef CONFIG_SSL_FULL_MODE
      printf("alloc: refs was not 0\n");
#endif
      abort(); /* create a stack trace from a core dump */
 801d736:	f006 faa5 	bl	8023c84 <abort>
    }

    more_comps(biR, size);
 801d73a:	6839      	ldr	r1, [r7, #0]
 801d73c:	68f8      	ldr	r0, [r7, #12]
 801d73e:	f7ff ff86 	bl	801d64e <more_comps>
 801d742:	e011      	b.n	801d768 <alloc+0x64>
  } else {
    /* No free bigints available - create a new one. */
    biR = (bigint *) mg_calloc(1, sizeof(bigint));
 801d744:	2110      	movs	r1, #16
 801d746:	2001      	movs	r0, #1
 801d748:	f7e9 fb63 	bl	8006e12 <mg_calloc>
 801d74c:	60f8      	str	r0, [r7, #12]
    biR->comps = (comp *) mg_calloc(1, (size_t) size * COMP_BYTE_SIZE);
 801d74e:	683b      	ldr	r3, [r7, #0]
 801d750:	009b      	lsls	r3, r3, #2
 801d752:	4619      	mov	r1, r3
 801d754:	2001      	movs	r0, #1
 801d756:	f7e9 fb5c 	bl	8006e12 <mg_calloc>
 801d75a:	4602      	mov	r2, r0
 801d75c:	68fb      	ldr	r3, [r7, #12]
 801d75e:	60da      	str	r2, [r3, #12]
    biR->max_comps = (short) size; /* give some space to spare */
 801d760:	683b      	ldr	r3, [r7, #0]
 801d762:	b21a      	sxth	r2, r3
 801d764:	68fb      	ldr	r3, [r7, #12]
 801d766:	80da      	strh	r2, [r3, #6]
  }

  biR->size = (short) size;
 801d768:	683b      	ldr	r3, [r7, #0]
 801d76a:	b21a      	sxth	r2, r3
 801d76c:	68fb      	ldr	r3, [r7, #12]
 801d76e:	809a      	strh	r2, [r3, #4]
  biR->refs = 1;
 801d770:	68fb      	ldr	r3, [r7, #12]
 801d772:	2201      	movs	r2, #1
 801d774:	609a      	str	r2, [r3, #8]
  biR->next = NULL;
 801d776:	68fb      	ldr	r3, [r7, #12]
 801d778:	2200      	movs	r2, #0
 801d77a:	601a      	str	r2, [r3, #0]
  ctx->active_count++;
 801d77c:	687b      	ldr	r3, [r7, #4]
 801d77e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801d780:	1c5a      	adds	r2, r3, #1
 801d782:	687b      	ldr	r3, [r7, #4]
 801d784:	62da      	str	r2, [r3, #44]	@ 0x2c
  return biR;
 801d786:	68fb      	ldr	r3, [r7, #12]
}
 801d788:	4618      	mov	r0, r3
 801d78a:	3710      	adds	r7, #16
 801d78c:	46bd      	mov	sp, r7
 801d78e:	bd80      	pop	{r7, pc}

0801d790 <find_max_exp_index>:

/*
 * Work out the highest '1' bit in an exponent. Used when doing sliding-window
 * exponentiation.
 */
static int find_max_exp_index(bigint *biexp) {
 801d790:	b480      	push	{r7}
 801d792:	b087      	sub	sp, #28
 801d794:	af00      	add	r7, sp, #0
 801d796:	6078      	str	r0, [r7, #4]
  int i = COMP_BIT_SIZE - 1;
 801d798:	231f      	movs	r3, #31
 801d79a:	617b      	str	r3, [r7, #20]
  comp shift = COMP_RADIX / 2;
 801d79c:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 801d7a0:	613b      	str	r3, [r7, #16]
  comp test = biexp->comps[biexp->size - 1]; /* assume no leading zeroes */
 801d7a2:	687b      	ldr	r3, [r7, #4]
 801d7a4:	68da      	ldr	r2, [r3, #12]
 801d7a6:	687b      	ldr	r3, [r7, #4]
 801d7a8:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801d7ac:	4619      	mov	r1, r3
 801d7ae:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 801d7b2:	440b      	add	r3, r1
 801d7b4:	009b      	lsls	r3, r3, #2
 801d7b6:	4413      	add	r3, r2
 801d7b8:	681b      	ldr	r3, [r3, #0]
 801d7ba:	60fb      	str	r3, [r7, #12]

  check(biexp);

  do {
    if (test & shift) {
 801d7bc:	68fa      	ldr	r2, [r7, #12]
 801d7be:	693b      	ldr	r3, [r7, #16]
 801d7c0:	4013      	ands	r3, r2
 801d7c2:	2b00      	cmp	r3, #0
 801d7c4:	d007      	beq.n	801d7d6 <find_max_exp_index+0x46>
      return i + (biexp->size - 1) * COMP_BIT_SIZE;
 801d7c6:	687b      	ldr	r3, [r7, #4]
 801d7c8:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801d7cc:	3b01      	subs	r3, #1
 801d7ce:	015a      	lsls	r2, r3, #5
 801d7d0:	697b      	ldr	r3, [r7, #20]
 801d7d2:	4413      	add	r3, r2
 801d7d4:	e009      	b.n	801d7ea <find_max_exp_index+0x5a>
    }

    shift >>= 1;
 801d7d6:	693b      	ldr	r3, [r7, #16]
 801d7d8:	085b      	lsrs	r3, r3, #1
 801d7da:	613b      	str	r3, [r7, #16]
  } while (i-- != 0);
 801d7dc:	697b      	ldr	r3, [r7, #20]
 801d7de:	1e5a      	subs	r2, r3, #1
 801d7e0:	617a      	str	r2, [r7, #20]
 801d7e2:	2b00      	cmp	r3, #0
 801d7e4:	d1ea      	bne.n	801d7bc <find_max_exp_index+0x2c>

  return -1; /* error - must have been a leading 0 */
 801d7e6:	f04f 33ff 	mov.w	r3, #4294967295
}
 801d7ea:	4618      	mov	r0, r3
 801d7ec:	371c      	adds	r7, #28
 801d7ee:	46bd      	mov	sp, r7
 801d7f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d7f4:	4770      	bx	lr

0801d7f6 <exp_bit_is_one>:

/*
 * Is a particular bit is an exponent 1 or 0? Used when doing sliding-window
 * exponentiation.
 */
static int exp_bit_is_one(bigint *biexp, int offset) {
 801d7f6:	b480      	push	{r7}
 801d7f8:	b087      	sub	sp, #28
 801d7fa:	af00      	add	r7, sp, #0
 801d7fc:	6078      	str	r0, [r7, #4]
 801d7fe:	6039      	str	r1, [r7, #0]
  comp test = biexp->comps[offset / COMP_BIT_SIZE];
 801d800:	687b      	ldr	r3, [r7, #4]
 801d802:	68da      	ldr	r2, [r3, #12]
 801d804:	683b      	ldr	r3, [r7, #0]
 801d806:	2b00      	cmp	r3, #0
 801d808:	da00      	bge.n	801d80c <exp_bit_is_one+0x16>
 801d80a:	331f      	adds	r3, #31
 801d80c:	115b      	asrs	r3, r3, #5
 801d80e:	009b      	lsls	r3, r3, #2
 801d810:	4413      	add	r3, r2
 801d812:	681b      	ldr	r3, [r3, #0]
 801d814:	60fb      	str	r3, [r7, #12]
  int num_shifts = offset % COMP_BIT_SIZE;
 801d816:	683b      	ldr	r3, [r7, #0]
 801d818:	425a      	negs	r2, r3
 801d81a:	f003 031f 	and.w	r3, r3, #31
 801d81e:	f002 021f 	and.w	r2, r2, #31
 801d822:	bf58      	it	pl
 801d824:	4253      	negpl	r3, r2
 801d826:	60bb      	str	r3, [r7, #8]
  comp shift = 1;
 801d828:	2301      	movs	r3, #1
 801d82a:	617b      	str	r3, [r7, #20]
  int i;

  check(biexp);

  for (i = 0; i < num_shifts; i++) {
 801d82c:	2300      	movs	r3, #0
 801d82e:	613b      	str	r3, [r7, #16]
 801d830:	e005      	b.n	801d83e <exp_bit_is_one+0x48>
    shift <<= 1;
 801d832:	697b      	ldr	r3, [r7, #20]
 801d834:	005b      	lsls	r3, r3, #1
 801d836:	617b      	str	r3, [r7, #20]
  for (i = 0; i < num_shifts; i++) {
 801d838:	693b      	ldr	r3, [r7, #16]
 801d83a:	3301      	adds	r3, #1
 801d83c:	613b      	str	r3, [r7, #16]
 801d83e:	693a      	ldr	r2, [r7, #16]
 801d840:	68bb      	ldr	r3, [r7, #8]
 801d842:	429a      	cmp	r2, r3
 801d844:	dbf5      	blt.n	801d832 <exp_bit_is_one+0x3c>
  }

  return (test & shift) != 0;
 801d846:	68fa      	ldr	r2, [r7, #12]
 801d848:	697b      	ldr	r3, [r7, #20]
 801d84a:	4013      	ands	r3, r2
 801d84c:	2b00      	cmp	r3, #0
 801d84e:	bf14      	ite	ne
 801d850:	2301      	movne	r3, #1
 801d852:	2300      	moveq	r3, #0
 801d854:	b2db      	uxtb	r3, r3
}
 801d856:	4618      	mov	r0, r3
 801d858:	371c      	adds	r7, #28
 801d85a:	46bd      	mov	sp, r7
 801d85c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d860:	4770      	bx	lr

0801d862 <trim>:
#endif

/*
 * Delete any leading 0's (and allow for 0).
 */
static bigint *trim(bigint *bi) {
 801d862:	b480      	push	{r7}
 801d864:	b083      	sub	sp, #12
 801d866:	af00      	add	r7, sp, #0
 801d868:	6078      	str	r0, [r7, #4]
  check(bi);

  while (bi->comps[bi->size - 1] == 0 && bi->size > 1) {
 801d86a:	e008      	b.n	801d87e <trim+0x1c>
    bi->size--;
 801d86c:	687b      	ldr	r3, [r7, #4]
 801d86e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801d872:	b29b      	uxth	r3, r3
 801d874:	3b01      	subs	r3, #1
 801d876:	b29b      	uxth	r3, r3
 801d878:	b21a      	sxth	r2, r3
 801d87a:	687b      	ldr	r3, [r7, #4]
 801d87c:	809a      	strh	r2, [r3, #4]
  while (bi->comps[bi->size - 1] == 0 && bi->size > 1) {
 801d87e:	687b      	ldr	r3, [r7, #4]
 801d880:	68da      	ldr	r2, [r3, #12]
 801d882:	687b      	ldr	r3, [r7, #4]
 801d884:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801d888:	4619      	mov	r1, r3
 801d88a:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 801d88e:	440b      	add	r3, r1
 801d890:	009b      	lsls	r3, r3, #2
 801d892:	4413      	add	r3, r2
 801d894:	681b      	ldr	r3, [r3, #0]
 801d896:	2b00      	cmp	r3, #0
 801d898:	d104      	bne.n	801d8a4 <trim+0x42>
 801d89a:	687b      	ldr	r3, [r7, #4]
 801d89c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801d8a0:	2b01      	cmp	r3, #1
 801d8a2:	dce3      	bgt.n	801d86c <trim+0xa>
  }

  return bi;
 801d8a4:	687b      	ldr	r3, [r7, #4]
}
 801d8a6:	4618      	mov	r0, r3
 801d8a8:	370c      	adds	r7, #12
 801d8aa:	46bd      	mov	sp, r7
 801d8ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d8b0:	4770      	bx	lr

0801d8b2 <bi_mod_power>:
 * @param bi  [in]  The bigint on which to perform the mod power operation.
 * @param biexp [in] The bigint exponent.
 * @return The result of the mod exponentiation operation
 * @see bi_set_mod().
 */
NS_INTERNAL bigint *bi_mod_power(BI_CTX *ctx, bigint *bi, bigint *biexp) {
 801d8b2:	b590      	push	{r4, r7, lr}
 801d8b4:	b08b      	sub	sp, #44	@ 0x2c
 801d8b6:	af00      	add	r7, sp, #0
 801d8b8:	60f8      	str	r0, [r7, #12]
 801d8ba:	60b9      	str	r1, [r7, #8]
 801d8bc:	607a      	str	r2, [r7, #4]
  int i = find_max_exp_index(biexp), j, window_size = 1;
 801d8be:	6878      	ldr	r0, [r7, #4]
 801d8c0:	f7ff ff66 	bl	801d790 <find_max_exp_index>
 801d8c4:	6278      	str	r0, [r7, #36]	@ 0x24
 801d8c6:	2301      	movs	r3, #1
 801d8c8:	613b      	str	r3, [r7, #16]
  bigint *biR = int_to_bi(ctx, 1);
 801d8ca:	2101      	movs	r1, #1
 801d8cc:	68f8      	ldr	r0, [r7, #12]
 801d8ce:	f7ff f879 	bl	801c9c4 <int_to_bi>
 801d8d2:	61f8      	str	r0, [r7, #28]
    window_size++;

  /* work out the slide constants */
  precompute_slide_window(ctx, window_size, bi);
#else /* just one constant */
  ctx->g = (bigint **) mg_calloc(1, sizeof(bigint *));
 801d8d4:	2104      	movs	r1, #4
 801d8d6:	2001      	movs	r0, #1
 801d8d8:	f7e9 fa9b 	bl	8006e12 <mg_calloc>
 801d8dc:	4602      	mov	r2, r0
 801d8de:	68fb      	ldr	r3, [r7, #12]
 801d8e0:	625a      	str	r2, [r3, #36]	@ 0x24
  ctx->g[0] = bi_clone(ctx, bi);
 801d8e2:	68fb      	ldr	r3, [r7, #12]
 801d8e4:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 801d8e6:	68b9      	ldr	r1, [r7, #8]
 801d8e8:	68f8      	ldr	r0, [r7, #12]
 801d8ea:	f7ff f87e 	bl	801c9ea <bi_clone>
 801d8ee:	4603      	mov	r3, r0
 801d8f0:	6023      	str	r3, [r4, #0]
  ctx->window = 1;
 801d8f2:	68fb      	ldr	r3, [r7, #12]
 801d8f4:	2201      	movs	r2, #1
 801d8f6:	629a      	str	r2, [r3, #40]	@ 0x28
  bi_permanent(ctx->g[0]);
 801d8f8:	68fb      	ldr	r3, [r7, #12]
 801d8fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801d8fc:	681b      	ldr	r3, [r3, #0]
 801d8fe:	4618      	mov	r0, r3
 801d900:	f7ff f806 	bl	801c910 <bi_permanent>
#endif

  /* if sliding-window is off, then only one bit will be done at a time and
   * will reduce to standard left-to-right exponentiation */
  do {
    if (exp_bit_is_one(biexp, i)) {
 801d904:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 801d906:	6878      	ldr	r0, [r7, #4]
 801d908:	f7ff ff75 	bl	801d7f6 <exp_bit_is_one>
 801d90c:	4603      	mov	r3, r0
 801d90e:	2b00      	cmp	r3, #0
 801d910:	d06c      	beq.n	801d9ec <bi_mod_power+0x13a>
      int l = i - window_size + 1;
 801d912:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801d914:	693b      	ldr	r3, [r7, #16]
 801d916:	1ad3      	subs	r3, r2, r3
 801d918:	3301      	adds	r3, #1
 801d91a:	61bb      	str	r3, [r7, #24]
      int part_exp = 0;
 801d91c:	2300      	movs	r3, #0
 801d91e:	617b      	str	r3, [r7, #20]

      if (l < 0) /* LSB of exponent will always be 1 */
 801d920:	69bb      	ldr	r3, [r7, #24]
 801d922:	2b00      	cmp	r3, #0
 801d924:	da05      	bge.n	801d932 <bi_mod_power+0x80>
        l = 0;
 801d926:	2300      	movs	r3, #0
 801d928:	61bb      	str	r3, [r7, #24]
 801d92a:	e009      	b.n	801d940 <bi_mod_power+0x8e>
      else {
        while (exp_bit_is_one(biexp, l) == 0) l++; /* go back up */
 801d92c:	69bb      	ldr	r3, [r7, #24]
 801d92e:	3301      	adds	r3, #1
 801d930:	61bb      	str	r3, [r7, #24]
 801d932:	69b9      	ldr	r1, [r7, #24]
 801d934:	6878      	ldr	r0, [r7, #4]
 801d936:	f7ff ff5e 	bl	801d7f6 <exp_bit_is_one>
 801d93a:	4603      	mov	r3, r0
 801d93c:	2b00      	cmp	r3, #0
 801d93e:	d0f5      	beq.n	801d92c <bi_mod_power+0x7a>
      }

      /* build up the section of the exponent */
      for (j = i; j >= l; j--) {
 801d940:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801d942:	623b      	str	r3, [r7, #32]
 801d944:	e02a      	b.n	801d99c <bi_mod_power+0xea>
        biR = bi_residue(ctx, bi_square(ctx, biR));
 801d946:	69f8      	ldr	r0, [r7, #28]
 801d948:	f7fe ffca 	bl	801c8e0 <bi_copy>
 801d94c:	4603      	mov	r3, r0
 801d94e:	69fa      	ldr	r2, [r7, #28]
 801d950:	4619      	mov	r1, r3
 801d952:	68f8      	ldr	r0, [r7, #12]
 801d954:	f7ff fe13 	bl	801d57e <bi_multiply>
 801d958:	4601      	mov	r1, r0
 801d95a:	68fb      	ldr	r3, [r7, #12]
 801d95c:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 801d960:	68fa      	ldr	r2, [r7, #12]
 801d962:	3302      	adds	r3, #2
 801d964:	009b      	lsls	r3, r3, #2
 801d966:	4413      	add	r3, r2
 801d968:	685a      	ldr	r2, [r3, #4]
 801d96a:	2301      	movs	r3, #1
 801d96c:	68f8      	ldr	r0, [r7, #12]
 801d96e:	f7ff f991 	bl	801cc94 <bi_divide>
 801d972:	61f8      	str	r0, [r7, #28]
        if (exp_bit_is_one(biexp, j)) part_exp++;
 801d974:	6a39      	ldr	r1, [r7, #32]
 801d976:	6878      	ldr	r0, [r7, #4]
 801d978:	f7ff ff3d 	bl	801d7f6 <exp_bit_is_one>
 801d97c:	4603      	mov	r3, r0
 801d97e:	2b00      	cmp	r3, #0
 801d980:	d002      	beq.n	801d988 <bi_mod_power+0xd6>
 801d982:	697b      	ldr	r3, [r7, #20]
 801d984:	3301      	adds	r3, #1
 801d986:	617b      	str	r3, [r7, #20]

        if (j != l) part_exp <<= 1;
 801d988:	6a3a      	ldr	r2, [r7, #32]
 801d98a:	69bb      	ldr	r3, [r7, #24]
 801d98c:	429a      	cmp	r2, r3
 801d98e:	d002      	beq.n	801d996 <bi_mod_power+0xe4>
 801d990:	697b      	ldr	r3, [r7, #20]
 801d992:	005b      	lsls	r3, r3, #1
 801d994:	617b      	str	r3, [r7, #20]
      for (j = i; j >= l; j--) {
 801d996:	6a3b      	ldr	r3, [r7, #32]
 801d998:	3b01      	subs	r3, #1
 801d99a:	623b      	str	r3, [r7, #32]
 801d99c:	6a3a      	ldr	r2, [r7, #32]
 801d99e:	69bb      	ldr	r3, [r7, #24]
 801d9a0:	429a      	cmp	r2, r3
 801d9a2:	dad0      	bge.n	801d946 <bi_mod_power+0x94>
      }

      part_exp = (part_exp - 1) / 2; /* adjust for array */
 801d9a4:	697b      	ldr	r3, [r7, #20]
 801d9a6:	3b01      	subs	r3, #1
 801d9a8:	2b00      	cmp	r3, #0
 801d9aa:	da00      	bge.n	801d9ae <bi_mod_power+0xfc>
 801d9ac:	3301      	adds	r3, #1
 801d9ae:	105b      	asrs	r3, r3, #1
 801d9b0:	617b      	str	r3, [r7, #20]
      biR = bi_residue(ctx, bi_multiply(ctx, biR, ctx->g[part_exp]));
 801d9b2:	68fb      	ldr	r3, [r7, #12]
 801d9b4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801d9b6:	697b      	ldr	r3, [r7, #20]
 801d9b8:	009b      	lsls	r3, r3, #2
 801d9ba:	4413      	add	r3, r2
 801d9bc:	681b      	ldr	r3, [r3, #0]
 801d9be:	461a      	mov	r2, r3
 801d9c0:	69f9      	ldr	r1, [r7, #28]
 801d9c2:	68f8      	ldr	r0, [r7, #12]
 801d9c4:	f7ff fddb 	bl	801d57e <bi_multiply>
 801d9c8:	4601      	mov	r1, r0
 801d9ca:	68fb      	ldr	r3, [r7, #12]
 801d9cc:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 801d9d0:	68fa      	ldr	r2, [r7, #12]
 801d9d2:	3302      	adds	r3, #2
 801d9d4:	009b      	lsls	r3, r3, #2
 801d9d6:	4413      	add	r3, r2
 801d9d8:	685a      	ldr	r2, [r3, #4]
 801d9da:	2301      	movs	r3, #1
 801d9dc:	68f8      	ldr	r0, [r7, #12]
 801d9de:	f7ff f959 	bl	801cc94 <bi_divide>
 801d9e2:	61f8      	str	r0, [r7, #28]
      i = l - 1;
 801d9e4:	69bb      	ldr	r3, [r7, #24]
 801d9e6:	3b01      	subs	r3, #1
 801d9e8:	627b      	str	r3, [r7, #36]	@ 0x24
 801d9ea:	e019      	b.n	801da20 <bi_mod_power+0x16e>
    } else /* square it */
    {
      biR = bi_residue(ctx, bi_square(ctx, biR));
 801d9ec:	69f8      	ldr	r0, [r7, #28]
 801d9ee:	f7fe ff77 	bl	801c8e0 <bi_copy>
 801d9f2:	4603      	mov	r3, r0
 801d9f4:	69fa      	ldr	r2, [r7, #28]
 801d9f6:	4619      	mov	r1, r3
 801d9f8:	68f8      	ldr	r0, [r7, #12]
 801d9fa:	f7ff fdc0 	bl	801d57e <bi_multiply>
 801d9fe:	4601      	mov	r1, r0
 801da00:	68fb      	ldr	r3, [r7, #12]
 801da02:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 801da06:	68fa      	ldr	r2, [r7, #12]
 801da08:	3302      	adds	r3, #2
 801da0a:	009b      	lsls	r3, r3, #2
 801da0c:	4413      	add	r3, r2
 801da0e:	685a      	ldr	r2, [r3, #4]
 801da10:	2301      	movs	r3, #1
 801da12:	68f8      	ldr	r0, [r7, #12]
 801da14:	f7ff f93e 	bl	801cc94 <bi_divide>
 801da18:	61f8      	str	r0, [r7, #28]
      i--;
 801da1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801da1c:	3b01      	subs	r3, #1
 801da1e:	627b      	str	r3, [r7, #36]	@ 0x24
    }
  } while (i >= 0);
 801da20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801da22:	2b00      	cmp	r3, #0
 801da24:	f6bf af6e 	bge.w	801d904 <bi_mod_power+0x52>

  /* cleanup */
  for (i = 0; i < ctx->window; i++) {
 801da28:	2300      	movs	r3, #0
 801da2a:	627b      	str	r3, [r7, #36]	@ 0x24
 801da2c:	e015      	b.n	801da5a <bi_mod_power+0x1a8>
    bi_depermanent(ctx->g[i]);
 801da2e:	68fb      	ldr	r3, [r7, #12]
 801da30:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801da32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801da34:	009b      	lsls	r3, r3, #2
 801da36:	4413      	add	r3, r2
 801da38:	681b      	ldr	r3, [r3, #0]
 801da3a:	4618      	mov	r0, r3
 801da3c:	f7fe ff7c 	bl	801c938 <bi_depermanent>
    bi_free(ctx, ctx->g[i]);
 801da40:	68fb      	ldr	r3, [r7, #12]
 801da42:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801da44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801da46:	009b      	lsls	r3, r3, #2
 801da48:	4413      	add	r3, r2
 801da4a:	681b      	ldr	r3, [r3, #0]
 801da4c:	4619      	mov	r1, r3
 801da4e:	68f8      	ldr	r0, [r7, #12]
 801da50:	f7fe ff86 	bl	801c960 <bi_free>
  for (i = 0; i < ctx->window; i++) {
 801da54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801da56:	3301      	adds	r3, #1
 801da58:	627b      	str	r3, [r7, #36]	@ 0x24
 801da5a:	68fb      	ldr	r3, [r7, #12]
 801da5c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801da5e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801da60:	429a      	cmp	r2, r3
 801da62:	dbe4      	blt.n	801da2e <bi_mod_power+0x17c>
  }

  mg_free(ctx->g);
 801da64:	68fb      	ldr	r3, [r7, #12]
 801da66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801da68:	4618      	mov	r0, r3
 801da6a:	f7e9 f9c7 	bl	8006dfc <mg_free>
  bi_free(ctx, bi);
 801da6e:	68b9      	ldr	r1, [r7, #8]
 801da70:	68f8      	ldr	r0, [r7, #12]
 801da72:	f7fe ff75 	bl	801c960 <bi_free>
  bi_free(ctx, biexp);
 801da76:	6879      	ldr	r1, [r7, #4]
 801da78:	68f8      	ldr	r0, [r7, #12]
 801da7a:	f7fe ff71 	bl	801c960 <bi_free>
#if defined CONFIG_BIGINT_MONTGOMERY
  return ctx->use_classical ? biR : bi_mont(ctx, biR); /* convert back */
#else /* CONFIG_BIGINT_CLASSICAL or CONFIG_BIGINT_BARRETT */
  return biR;
 801da7e:	69fb      	ldr	r3, [r7, #28]
#endif
}
 801da80:	4618      	mov	r0, r3
 801da82:	372c      	adds	r7, #44	@ 0x2c
 801da84:	46bd      	mov	sp, r7
 801da86:	bd90      	pop	{r4, r7, pc}

0801da88 <mg_rsa_mod_pow>:
// - bi_export(c, nn, outdata, outsize) <-- frees nn
// - function calls
// - free bigints calling bi_free()
// - bi_terminate(c)                    <-- frees c

int mg_rsa_mod_pow(const uint8_t *mod, size_t modsz, const uint8_t *exp, size_t expsz, const uint8_t *msg, size_t msgsz, uint8_t *out, size_t outsz) {
 801da88:	b580      	push	{r7, lr}
 801da8a:	b08a      	sub	sp, #40	@ 0x28
 801da8c:	af00      	add	r7, sp, #0
 801da8e:	60f8      	str	r0, [r7, #12]
 801da90:	60b9      	str	r1, [r7, #8]
 801da92:	607a      	str	r2, [r7, #4]
 801da94:	603b      	str	r3, [r7, #0]
	BI_CTX *bi_ctx = bi_initialize();
 801da96:	f7fe feb8 	bl	801c80a <bi_initialize>
 801da9a:	6278      	str	r0, [r7, #36]	@ 0x24
	bigint *m1;
	bigint *n = bi_import(bi_ctx, mod, (int) modsz);
 801da9c:	68bb      	ldr	r3, [r7, #8]
 801da9e:	461a      	mov	r2, r3
 801daa0:	68f9      	ldr	r1, [r7, #12]
 801daa2:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801daa4:	f7ff fb85 	bl	801d1b2 <bi_import>
 801daa8:	6238      	str	r0, [r7, #32]
	bigint *e = bi_import(bi_ctx, exp, (int) expsz);
 801daaa:	683b      	ldr	r3, [r7, #0]
 801daac:	461a      	mov	r2, r3
 801daae:	6879      	ldr	r1, [r7, #4]
 801dab0:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801dab2:	f7ff fb7e 	bl	801d1b2 <bi_import>
 801dab6:	61f8      	str	r0, [r7, #28]
	bigint *h = bi_import(bi_ctx, msg, (int) msgsz);
 801dab8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801daba:	461a      	mov	r2, r3
 801dabc:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 801dabe:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801dac0:	f7ff fb77 	bl	801d1b2 <bi_import>
 801dac4:	61b8      	str	r0, [r7, #24]
	bi_set_mod(bi_ctx, n, 0);
 801dac6:	2200      	movs	r2, #0
 801dac8:	6a39      	ldr	r1, [r7, #32]
 801daca:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801dacc:	f7ff fc12 	bl	801d2f4 <bi_set_mod>
	m1 = bi_mod_power(bi_ctx, h, e);
 801dad0:	69fa      	ldr	r2, [r7, #28]
 801dad2:	69b9      	ldr	r1, [r7, #24]
 801dad4:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801dad6:	f7ff feec 	bl	801d8b2 <bi_mod_power>
 801dada:	6178      	str	r0, [r7, #20]
	bi_free_mod(bi_ctx, 0);
 801dadc:	2100      	movs	r1, #0
 801dade:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801dae0:	f7ff fc52 	bl	801d388 <bi_free_mod>
	bi_export(bi_ctx, m1, out, (int) outsz);
 801dae4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801dae6:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801dae8:	6979      	ldr	r1, [r7, #20]
 801daea:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801daec:	f7ff fbb2 	bl	801d254 <bi_export>
	bi_terminate(bi_ctx);
 801daf0:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801daf2:	f7fe feae 	bl	801c852 <bi_terminate>
	return 0;
 801daf6:	2300      	movs	r3, #0
}
 801daf8:	4618      	mov	r0, r3
 801dafa:	3728      	adds	r7, #40	@ 0x28
 801dafc:	46bd      	mov	sp, r7
 801dafe:	bd80      	pop	{r7, pc}

0801db00 <mg_uecc_vli_clear>:
  return 2 * curve->num_bytes;
}

#if !asm_clear
MG_UECC_VLI_API void mg_uecc_vli_clear(mg_uecc_word_t *vli,
                                       wordcount_t num_words) {
 801db00:	b480      	push	{r7}
 801db02:	b085      	sub	sp, #20
 801db04:	af00      	add	r7, sp, #0
 801db06:	6078      	str	r0, [r7, #4]
 801db08:	460b      	mov	r3, r1
 801db0a:	70fb      	strb	r3, [r7, #3]
  wordcount_t i;
  for (i = 0; i < num_words; ++i) {
 801db0c:	2300      	movs	r3, #0
 801db0e:	73fb      	strb	r3, [r7, #15]
 801db10:	e00a      	b.n	801db28 <mg_uecc_vli_clear+0x28>
    vli[i] = 0;
 801db12:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801db16:	009b      	lsls	r3, r3, #2
 801db18:	687a      	ldr	r2, [r7, #4]
 801db1a:	4413      	add	r3, r2
 801db1c:	2200      	movs	r2, #0
 801db1e:	601a      	str	r2, [r3, #0]
  for (i = 0; i < num_words; ++i) {
 801db20:	7bfb      	ldrb	r3, [r7, #15]
 801db22:	3301      	adds	r3, #1
 801db24:	b2db      	uxtb	r3, r3
 801db26:	73fb      	strb	r3, [r7, #15]
 801db28:	f997 200f 	ldrsb.w	r2, [r7, #15]
 801db2c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801db30:	429a      	cmp	r2, r3
 801db32:	dbee      	blt.n	801db12 <mg_uecc_vli_clear+0x12>
  }
}
 801db34:	bf00      	nop
 801db36:	bf00      	nop
 801db38:	3714      	adds	r7, #20
 801db3a:	46bd      	mov	sp, r7
 801db3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801db40:	4770      	bx	lr

0801db42 <mg_uecc_vli_isZero>:
#endif /* !asm_clear */

/* Constant-time comparison to zero - secure way to compare long integers */
/* Returns 1 if vli == 0, 0 otherwise. */
MG_UECC_VLI_API mg_uecc_word_t mg_uecc_vli_isZero(const mg_uecc_word_t *vli,
                                                  wordcount_t num_words) {
 801db42:	b480      	push	{r7}
 801db44:	b085      	sub	sp, #20
 801db46:	af00      	add	r7, sp, #0
 801db48:	6078      	str	r0, [r7, #4]
 801db4a:	460b      	mov	r3, r1
 801db4c:	70fb      	strb	r3, [r7, #3]
  mg_uecc_word_t bits = 0;
 801db4e:	2300      	movs	r3, #0
 801db50:	60fb      	str	r3, [r7, #12]
  wordcount_t i;
  for (i = 0; i < num_words; ++i) {
 801db52:	2300      	movs	r3, #0
 801db54:	72fb      	strb	r3, [r7, #11]
 801db56:	e00c      	b.n	801db72 <mg_uecc_vli_isZero+0x30>
    bits |= vli[i];
 801db58:	f997 300b 	ldrsb.w	r3, [r7, #11]
 801db5c:	009b      	lsls	r3, r3, #2
 801db5e:	687a      	ldr	r2, [r7, #4]
 801db60:	4413      	add	r3, r2
 801db62:	681b      	ldr	r3, [r3, #0]
 801db64:	68fa      	ldr	r2, [r7, #12]
 801db66:	4313      	orrs	r3, r2
 801db68:	60fb      	str	r3, [r7, #12]
  for (i = 0; i < num_words; ++i) {
 801db6a:	7afb      	ldrb	r3, [r7, #11]
 801db6c:	3301      	adds	r3, #1
 801db6e:	b2db      	uxtb	r3, r3
 801db70:	72fb      	strb	r3, [r7, #11]
 801db72:	f997 200b 	ldrsb.w	r2, [r7, #11]
 801db76:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801db7a:	429a      	cmp	r2, r3
 801db7c:	dbec      	blt.n	801db58 <mg_uecc_vli_isZero+0x16>
  }
  return (bits == 0);
 801db7e:	68fb      	ldr	r3, [r7, #12]
 801db80:	2b00      	cmp	r3, #0
 801db82:	bf0c      	ite	eq
 801db84:	2301      	moveq	r3, #1
 801db86:	2300      	movne	r3, #0
 801db88:	b2db      	uxtb	r3, r3
}
 801db8a:	4618      	mov	r0, r3
 801db8c:	3714      	adds	r7, #20
 801db8e:	46bd      	mov	sp, r7
 801db90:	f85d 7b04 	ldr.w	r7, [sp], #4
 801db94:	4770      	bx	lr

0801db96 <mg_uecc_vli_testBit>:

/* Returns nonzero if bit 'bit' of vli is set. */
MG_UECC_VLI_API mg_uecc_word_t mg_uecc_vli_testBit(const mg_uecc_word_t *vli,
                                                   bitcount_t bit) {
 801db96:	b480      	push	{r7}
 801db98:	b083      	sub	sp, #12
 801db9a:	af00      	add	r7, sp, #0
 801db9c:	6078      	str	r0, [r7, #4]
 801db9e:	460b      	mov	r3, r1
 801dba0:	807b      	strh	r3, [r7, #2]
  return (vli[bit >> MG_UECC_WORD_BITS_SHIFT] &
 801dba2:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 801dba6:	115b      	asrs	r3, r3, #5
 801dba8:	b21b      	sxth	r3, r3
 801dbaa:	009b      	lsls	r3, r3, #2
 801dbac:	687a      	ldr	r2, [r7, #4]
 801dbae:	4413      	add	r3, r2
 801dbb0:	681a      	ldr	r2, [r3, #0]
          ((mg_uecc_word_t) 1 << (bit & MG_UECC_WORD_BITS_MASK)));
 801dbb2:	887b      	ldrh	r3, [r7, #2]
 801dbb4:	f003 031f 	and.w	r3, r3, #31
 801dbb8:	2101      	movs	r1, #1
 801dbba:	fa01 f303 	lsl.w	r3, r1, r3
  return (vli[bit >> MG_UECC_WORD_BITS_SHIFT] &
 801dbbe:	4013      	ands	r3, r2
}
 801dbc0:	4618      	mov	r0, r3
 801dbc2:	370c      	adds	r7, #12
 801dbc4:	46bd      	mov	sp, r7
 801dbc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801dbca:	4770      	bx	lr

0801dbcc <vli_numDigits>:

/* Counts the number of words in vli. */
static wordcount_t vli_numDigits(const mg_uecc_word_t *vli,
                                 const wordcount_t max_words) {
 801dbcc:	b480      	push	{r7}
 801dbce:	b085      	sub	sp, #20
 801dbd0:	af00      	add	r7, sp, #0
 801dbd2:	6078      	str	r0, [r7, #4]
 801dbd4:	460b      	mov	r3, r1
 801dbd6:	70fb      	strb	r3, [r7, #3]
  wordcount_t i;
  /* Search from the end until we find a non-zero digit.
     We do it in reverse because we expect that most digits will be nonzero. */
  for (i = max_words - 1; i >= 0 && vli[i] == 0; --i) {
 801dbd8:	78fb      	ldrb	r3, [r7, #3]
 801dbda:	3b01      	subs	r3, #1
 801dbdc:	b2db      	uxtb	r3, r3
 801dbde:	73fb      	strb	r3, [r7, #15]
 801dbe0:	e003      	b.n	801dbea <vli_numDigits+0x1e>
 801dbe2:	7bfb      	ldrb	r3, [r7, #15]
 801dbe4:	3b01      	subs	r3, #1
 801dbe6:	b2db      	uxtb	r3, r3
 801dbe8:	73fb      	strb	r3, [r7, #15]
 801dbea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801dbee:	2b00      	cmp	r3, #0
 801dbf0:	db07      	blt.n	801dc02 <vli_numDigits+0x36>
 801dbf2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801dbf6:	009b      	lsls	r3, r3, #2
 801dbf8:	687a      	ldr	r2, [r7, #4]
 801dbfa:	4413      	add	r3, r2
 801dbfc:	681b      	ldr	r3, [r3, #0]
 801dbfe:	2b00      	cmp	r3, #0
 801dc00:	d0ef      	beq.n	801dbe2 <vli_numDigits+0x16>
  }

  return (i + 1);
 801dc02:	7bfb      	ldrb	r3, [r7, #15]
 801dc04:	3301      	adds	r3, #1
 801dc06:	b2db      	uxtb	r3, r3
 801dc08:	b25b      	sxtb	r3, r3
}
 801dc0a:	4618      	mov	r0, r3
 801dc0c:	3714      	adds	r7, #20
 801dc0e:	46bd      	mov	sp, r7
 801dc10:	f85d 7b04 	ldr.w	r7, [sp], #4
 801dc14:	4770      	bx	lr

0801dc16 <mg_uecc_vli_numBits>:

/* Counts the number of bits required to represent vli. */
MG_UECC_VLI_API bitcount_t mg_uecc_vli_numBits(const mg_uecc_word_t *vli,
                                               const wordcount_t max_words) {
 801dc16:	b580      	push	{r7, lr}
 801dc18:	b086      	sub	sp, #24
 801dc1a:	af00      	add	r7, sp, #0
 801dc1c:	6078      	str	r0, [r7, #4]
 801dc1e:	460b      	mov	r3, r1
 801dc20:	70fb      	strb	r3, [r7, #3]
  mg_uecc_word_t i;
  mg_uecc_word_t digit;

  wordcount_t num_digits = vli_numDigits(vli, max_words);
 801dc22:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801dc26:	4619      	mov	r1, r3
 801dc28:	6878      	ldr	r0, [r7, #4]
 801dc2a:	f7ff ffcf 	bl	801dbcc <vli_numDigits>
 801dc2e:	4603      	mov	r3, r0
 801dc30:	73fb      	strb	r3, [r7, #15]
  if (num_digits == 0) {
 801dc32:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801dc36:	2b00      	cmp	r3, #0
 801dc38:	d101      	bne.n	801dc3e <mg_uecc_vli_numBits+0x28>
    return 0;
 801dc3a:	2300      	movs	r3, #0
 801dc3c:	e020      	b.n	801dc80 <mg_uecc_vli_numBits+0x6a>
  }

  digit = vli[num_digits - 1];
 801dc3e:	f997 200f 	ldrsb.w	r2, [r7, #15]
 801dc42:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 801dc46:	4413      	add	r3, r2
 801dc48:	009b      	lsls	r3, r3, #2
 801dc4a:	687a      	ldr	r2, [r7, #4]
 801dc4c:	4413      	add	r3, r2
 801dc4e:	681b      	ldr	r3, [r3, #0]
 801dc50:	613b      	str	r3, [r7, #16]
  for (i = 0; digit; ++i) {
 801dc52:	2300      	movs	r3, #0
 801dc54:	617b      	str	r3, [r7, #20]
 801dc56:	e005      	b.n	801dc64 <mg_uecc_vli_numBits+0x4e>
    digit >>= 1;
 801dc58:	693b      	ldr	r3, [r7, #16]
 801dc5a:	085b      	lsrs	r3, r3, #1
 801dc5c:	613b      	str	r3, [r7, #16]
  for (i = 0; digit; ++i) {
 801dc5e:	697b      	ldr	r3, [r7, #20]
 801dc60:	3301      	adds	r3, #1
 801dc62:	617b      	str	r3, [r7, #20]
 801dc64:	693b      	ldr	r3, [r7, #16]
 801dc66:	2b00      	cmp	r3, #0
 801dc68:	d1f6      	bne.n	801dc58 <mg_uecc_vli_numBits+0x42>
  }

  return (((bitcount_t) ((num_digits - 1) << MG_UECC_WORD_BITS_SHIFT)) +
 801dc6a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801dc6e:	3b01      	subs	r3, #1
 801dc70:	b29b      	uxth	r3, r3
 801dc72:	015b      	lsls	r3, r3, #5
 801dc74:	b29a      	uxth	r2, r3
          (bitcount_t) i);
 801dc76:	697b      	ldr	r3, [r7, #20]
 801dc78:	b29b      	uxth	r3, r3
  return (((bitcount_t) ((num_digits - 1) << MG_UECC_WORD_BITS_SHIFT)) +
 801dc7a:	4413      	add	r3, r2
 801dc7c:	b29b      	uxth	r3, r3
 801dc7e:	b21b      	sxth	r3, r3
}
 801dc80:	4618      	mov	r0, r3
 801dc82:	3718      	adds	r7, #24
 801dc84:	46bd      	mov	sp, r7
 801dc86:	bd80      	pop	{r7, pc}

0801dc88 <mg_uecc_vli_set>:

/* Sets dest = src. */
#if !asm_set
MG_UECC_VLI_API void mg_uecc_vli_set(mg_uecc_word_t *dest,
                                     const mg_uecc_word_t *src,
                                     wordcount_t num_words) {
 801dc88:	b480      	push	{r7}
 801dc8a:	b087      	sub	sp, #28
 801dc8c:	af00      	add	r7, sp, #0
 801dc8e:	60f8      	str	r0, [r7, #12]
 801dc90:	60b9      	str	r1, [r7, #8]
 801dc92:	4613      	mov	r3, r2
 801dc94:	71fb      	strb	r3, [r7, #7]
  wordcount_t i;
  for (i = 0; i < num_words; ++i) {
 801dc96:	2300      	movs	r3, #0
 801dc98:	75fb      	strb	r3, [r7, #23]
 801dc9a:	e00f      	b.n	801dcbc <mg_uecc_vli_set+0x34>
    dest[i] = src[i];
 801dc9c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 801dca0:	009b      	lsls	r3, r3, #2
 801dca2:	68ba      	ldr	r2, [r7, #8]
 801dca4:	441a      	add	r2, r3
 801dca6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 801dcaa:	009b      	lsls	r3, r3, #2
 801dcac:	68f9      	ldr	r1, [r7, #12]
 801dcae:	440b      	add	r3, r1
 801dcb0:	6812      	ldr	r2, [r2, #0]
 801dcb2:	601a      	str	r2, [r3, #0]
  for (i = 0; i < num_words; ++i) {
 801dcb4:	7dfb      	ldrb	r3, [r7, #23]
 801dcb6:	3301      	adds	r3, #1
 801dcb8:	b2db      	uxtb	r3, r3
 801dcba:	75fb      	strb	r3, [r7, #23]
 801dcbc:	f997 2017 	ldrsb.w	r2, [r7, #23]
 801dcc0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801dcc4:	429a      	cmp	r2, r3
 801dcc6:	dbe9      	blt.n	801dc9c <mg_uecc_vli_set+0x14>
  }
}
 801dcc8:	bf00      	nop
 801dcca:	bf00      	nop
 801dccc:	371c      	adds	r7, #28
 801dcce:	46bd      	mov	sp, r7
 801dcd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801dcd4:	4770      	bx	lr

0801dcd6 <mg_uecc_vli_cmp_unsafe>:
#endif /* !asm_set */

/* Returns sign of left - right. */
static cmpresult_t mg_uecc_vli_cmp_unsafe(const mg_uecc_word_t *left,
                                          const mg_uecc_word_t *right,
                                          wordcount_t num_words) {
 801dcd6:	b480      	push	{r7}
 801dcd8:	b087      	sub	sp, #28
 801dcda:	af00      	add	r7, sp, #0
 801dcdc:	60f8      	str	r0, [r7, #12]
 801dcde:	60b9      	str	r1, [r7, #8]
 801dce0:	4613      	mov	r3, r2
 801dce2:	71fb      	strb	r3, [r7, #7]
  wordcount_t i;
  for (i = num_words - 1; i >= 0; --i) {
 801dce4:	79fb      	ldrb	r3, [r7, #7]
 801dce6:	3b01      	subs	r3, #1
 801dce8:	b2db      	uxtb	r3, r3
 801dcea:	75fb      	strb	r3, [r7, #23]
 801dcec:	e024      	b.n	801dd38 <mg_uecc_vli_cmp_unsafe+0x62>
    if (left[i] > right[i]) {
 801dcee:	f997 3017 	ldrsb.w	r3, [r7, #23]
 801dcf2:	009b      	lsls	r3, r3, #2
 801dcf4:	68fa      	ldr	r2, [r7, #12]
 801dcf6:	4413      	add	r3, r2
 801dcf8:	681a      	ldr	r2, [r3, #0]
 801dcfa:	f997 3017 	ldrsb.w	r3, [r7, #23]
 801dcfe:	009b      	lsls	r3, r3, #2
 801dd00:	68b9      	ldr	r1, [r7, #8]
 801dd02:	440b      	add	r3, r1
 801dd04:	681b      	ldr	r3, [r3, #0]
 801dd06:	429a      	cmp	r2, r3
 801dd08:	d901      	bls.n	801dd0e <mg_uecc_vli_cmp_unsafe+0x38>
      return 1;
 801dd0a:	2301      	movs	r3, #1
 801dd0c:	e019      	b.n	801dd42 <mg_uecc_vli_cmp_unsafe+0x6c>
    } else if (left[i] < right[i]) {
 801dd0e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 801dd12:	009b      	lsls	r3, r3, #2
 801dd14:	68fa      	ldr	r2, [r7, #12]
 801dd16:	4413      	add	r3, r2
 801dd18:	681a      	ldr	r2, [r3, #0]
 801dd1a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 801dd1e:	009b      	lsls	r3, r3, #2
 801dd20:	68b9      	ldr	r1, [r7, #8]
 801dd22:	440b      	add	r3, r1
 801dd24:	681b      	ldr	r3, [r3, #0]
 801dd26:	429a      	cmp	r2, r3
 801dd28:	d202      	bcs.n	801dd30 <mg_uecc_vli_cmp_unsafe+0x5a>
      return -1;
 801dd2a:	f04f 33ff 	mov.w	r3, #4294967295
 801dd2e:	e008      	b.n	801dd42 <mg_uecc_vli_cmp_unsafe+0x6c>
  for (i = num_words - 1; i >= 0; --i) {
 801dd30:	7dfb      	ldrb	r3, [r7, #23]
 801dd32:	3b01      	subs	r3, #1
 801dd34:	b2db      	uxtb	r3, r3
 801dd36:	75fb      	strb	r3, [r7, #23]
 801dd38:	f997 3017 	ldrsb.w	r3, [r7, #23]
 801dd3c:	2b00      	cmp	r3, #0
 801dd3e:	dad6      	bge.n	801dcee <mg_uecc_vli_cmp_unsafe+0x18>
    }
  }
  return 0;
 801dd40:	2300      	movs	r3, #0
}
 801dd42:	4618      	mov	r0, r3
 801dd44:	371c      	adds	r7, #28
 801dd46:	46bd      	mov	sp, r7
 801dd48:	f85d 7b04 	ldr.w	r7, [sp], #4
 801dd4c:	4770      	bx	lr

0801dd4e <mg_uecc_vli_equal>:

/* Constant-time comparison function - secure way to compare long integers */
/* Returns one if left == right, zero otherwise. */
MG_UECC_VLI_API mg_uecc_word_t mg_uecc_vli_equal(const mg_uecc_word_t *left,
                                                 const mg_uecc_word_t *right,
                                                 wordcount_t num_words) {
 801dd4e:	b480      	push	{r7}
 801dd50:	b087      	sub	sp, #28
 801dd52:	af00      	add	r7, sp, #0
 801dd54:	60f8      	str	r0, [r7, #12]
 801dd56:	60b9      	str	r1, [r7, #8]
 801dd58:	4613      	mov	r3, r2
 801dd5a:	71fb      	strb	r3, [r7, #7]
  mg_uecc_word_t diff = 0;
 801dd5c:	2300      	movs	r3, #0
 801dd5e:	617b      	str	r3, [r7, #20]
  wordcount_t i;
  for (i = num_words - 1; i >= 0; --i) {
 801dd60:	79fb      	ldrb	r3, [r7, #7]
 801dd62:	3b01      	subs	r3, #1
 801dd64:	b2db      	uxtb	r3, r3
 801dd66:	74fb      	strb	r3, [r7, #19]
 801dd68:	e013      	b.n	801dd92 <mg_uecc_vli_equal+0x44>
    diff |= (left[i] ^ right[i]);
 801dd6a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801dd6e:	009b      	lsls	r3, r3, #2
 801dd70:	68fa      	ldr	r2, [r7, #12]
 801dd72:	4413      	add	r3, r2
 801dd74:	681a      	ldr	r2, [r3, #0]
 801dd76:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801dd7a:	009b      	lsls	r3, r3, #2
 801dd7c:	68b9      	ldr	r1, [r7, #8]
 801dd7e:	440b      	add	r3, r1
 801dd80:	681b      	ldr	r3, [r3, #0]
 801dd82:	4053      	eors	r3, r2
 801dd84:	697a      	ldr	r2, [r7, #20]
 801dd86:	4313      	orrs	r3, r2
 801dd88:	617b      	str	r3, [r7, #20]
  for (i = num_words - 1; i >= 0; --i) {
 801dd8a:	7cfb      	ldrb	r3, [r7, #19]
 801dd8c:	3b01      	subs	r3, #1
 801dd8e:	b2db      	uxtb	r3, r3
 801dd90:	74fb      	strb	r3, [r7, #19]
 801dd92:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801dd96:	2b00      	cmp	r3, #0
 801dd98:	dae7      	bge.n	801dd6a <mg_uecc_vli_equal+0x1c>
  }
  return (diff == 0);
 801dd9a:	697b      	ldr	r3, [r7, #20]
 801dd9c:	2b00      	cmp	r3, #0
 801dd9e:	bf0c      	ite	eq
 801dda0:	2301      	moveq	r3, #1
 801dda2:	2300      	movne	r3, #0
 801dda4:	b2db      	uxtb	r3, r3
}
 801dda6:	4618      	mov	r0, r3
 801dda8:	371c      	adds	r7, #28
 801ddaa:	46bd      	mov	sp, r7
 801ddac:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ddb0:	4770      	bx	lr

0801ddb2 <mg_uecc_vli_cmp>:
                                               wordcount_t num_words);

/* Returns sign of left - right, in constant time. */
MG_UECC_VLI_API cmpresult_t mg_uecc_vli_cmp(const mg_uecc_word_t *left,
                                            const mg_uecc_word_t *right,
                                            wordcount_t num_words) {
 801ddb2:	b580      	push	{r7, lr}
 801ddb4:	b08e      	sub	sp, #56	@ 0x38
 801ddb6:	af00      	add	r7, sp, #0
 801ddb8:	60f8      	str	r0, [r7, #12]
 801ddba:	60b9      	str	r1, [r7, #8]
 801ddbc:	4613      	mov	r3, r2
 801ddbe:	71fb      	strb	r3, [r7, #7]
  mg_uecc_word_t tmp[MG_UECC_MAX_WORDS];
  mg_uecc_word_t neg = !!mg_uecc_vli_sub(tmp, left, right, num_words);
 801ddc0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801ddc4:	f107 0010 	add.w	r0, r7, #16
 801ddc8:	68ba      	ldr	r2, [r7, #8]
 801ddca:	68f9      	ldr	r1, [r7, #12]
 801ddcc:	f000 f896 	bl	801defc <mg_uecc_vli_sub>
 801ddd0:	4603      	mov	r3, r0
 801ddd2:	2b00      	cmp	r3, #0
 801ddd4:	bf14      	ite	ne
 801ddd6:	2301      	movne	r3, #1
 801ddd8:	2300      	moveq	r3, #0
 801ddda:	b2db      	uxtb	r3, r3
 801dddc:	637b      	str	r3, [r7, #52]	@ 0x34
  mg_uecc_word_t equal = mg_uecc_vli_isZero(tmp, num_words);
 801ddde:	f997 2007 	ldrsb.w	r2, [r7, #7]
 801dde2:	f107 0310 	add.w	r3, r7, #16
 801dde6:	4611      	mov	r1, r2
 801dde8:	4618      	mov	r0, r3
 801ddea:	f7ff feaa 	bl	801db42 <mg_uecc_vli_isZero>
 801ddee:	6338      	str	r0, [r7, #48]	@ 0x30
  return (cmpresult_t) (!equal - 2 * neg);
 801ddf0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801ddf2:	2b00      	cmp	r3, #0
 801ddf4:	bf0c      	ite	eq
 801ddf6:	2301      	moveq	r3, #1
 801ddf8:	2300      	movne	r3, #0
 801ddfa:	b2db      	uxtb	r3, r3
 801ddfc:	461a      	mov	r2, r3
 801ddfe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801de00:	b2db      	uxtb	r3, r3
 801de02:	005b      	lsls	r3, r3, #1
 801de04:	b2db      	uxtb	r3, r3
 801de06:	1ad3      	subs	r3, r2, r3
 801de08:	b2db      	uxtb	r3, r3
 801de0a:	b25b      	sxtb	r3, r3
}
 801de0c:	4618      	mov	r0, r3
 801de0e:	3738      	adds	r7, #56	@ 0x38
 801de10:	46bd      	mov	sp, r7
 801de12:	bd80      	pop	{r7, pc}

0801de14 <mg_uecc_vli_rshift1>:

/* Computes vli = vli >> 1. */
#if !asm_rshift1
MG_UECC_VLI_API void mg_uecc_vli_rshift1(mg_uecc_word_t *vli,
                                         wordcount_t num_words) {
 801de14:	b480      	push	{r7}
 801de16:	b087      	sub	sp, #28
 801de18:	af00      	add	r7, sp, #0
 801de1a:	6078      	str	r0, [r7, #4]
 801de1c:	460b      	mov	r3, r1
 801de1e:	70fb      	strb	r3, [r7, #3]
  mg_uecc_word_t *end = vli;
 801de20:	687b      	ldr	r3, [r7, #4]
 801de22:	613b      	str	r3, [r7, #16]
  mg_uecc_word_t carry = 0;
 801de24:	2300      	movs	r3, #0
 801de26:	617b      	str	r3, [r7, #20]

  vli += num_words;
 801de28:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801de2c:	009b      	lsls	r3, r3, #2
 801de2e:	687a      	ldr	r2, [r7, #4]
 801de30:	4413      	add	r3, r2
 801de32:	607b      	str	r3, [r7, #4]
  while (vli-- > end) {
 801de34:	e00b      	b.n	801de4e <mg_uecc_vli_rshift1+0x3a>
    mg_uecc_word_t temp = *vli;
 801de36:	687b      	ldr	r3, [r7, #4]
 801de38:	681b      	ldr	r3, [r3, #0]
 801de3a:	60fb      	str	r3, [r7, #12]
    *vli = (temp >> 1) | carry;
 801de3c:	68fb      	ldr	r3, [r7, #12]
 801de3e:	085a      	lsrs	r2, r3, #1
 801de40:	697b      	ldr	r3, [r7, #20]
 801de42:	431a      	orrs	r2, r3
 801de44:	687b      	ldr	r3, [r7, #4]
 801de46:	601a      	str	r2, [r3, #0]
    carry = temp << (MG_UECC_WORD_BITS - 1);
 801de48:	68fb      	ldr	r3, [r7, #12]
 801de4a:	07db      	lsls	r3, r3, #31
 801de4c:	617b      	str	r3, [r7, #20]
  while (vli-- > end) {
 801de4e:	687b      	ldr	r3, [r7, #4]
 801de50:	1f1a      	subs	r2, r3, #4
 801de52:	607a      	str	r2, [r7, #4]
 801de54:	693a      	ldr	r2, [r7, #16]
 801de56:	429a      	cmp	r2, r3
 801de58:	d3ed      	bcc.n	801de36 <mg_uecc_vli_rshift1+0x22>
  }
}
 801de5a:	bf00      	nop
 801de5c:	bf00      	nop
 801de5e:	371c      	adds	r7, #28
 801de60:	46bd      	mov	sp, r7
 801de62:	f85d 7b04 	ldr.w	r7, [sp], #4
 801de66:	4770      	bx	lr

0801de68 <mg_uecc_vli_add>:
/* Computes result = left + right, returning carry. Can modify in place. */
#if !asm_add
MG_UECC_VLI_API mg_uecc_word_t mg_uecc_vli_add(mg_uecc_word_t *result,
                                               const mg_uecc_word_t *left,
                                               const mg_uecc_word_t *right,
                                               wordcount_t num_words) {
 801de68:	b480      	push	{r7}
 801de6a:	b089      	sub	sp, #36	@ 0x24
 801de6c:	af00      	add	r7, sp, #0
 801de6e:	60f8      	str	r0, [r7, #12]
 801de70:	60b9      	str	r1, [r7, #8]
 801de72:	607a      	str	r2, [r7, #4]
 801de74:	70fb      	strb	r3, [r7, #3]
  mg_uecc_word_t carry = 0;
 801de76:	2300      	movs	r3, #0
 801de78:	61fb      	str	r3, [r7, #28]
  wordcount_t i;
  for (i = 0; i < num_words; ++i) {
 801de7a:	2300      	movs	r3, #0
 801de7c:	76fb      	strb	r3, [r7, #27]
 801de7e:	e030      	b.n	801dee2 <mg_uecc_vli_add+0x7a>
    mg_uecc_word_t sum = left[i] + right[i] + carry;
 801de80:	f997 301b 	ldrsb.w	r3, [r7, #27]
 801de84:	009b      	lsls	r3, r3, #2
 801de86:	68ba      	ldr	r2, [r7, #8]
 801de88:	4413      	add	r3, r2
 801de8a:	681a      	ldr	r2, [r3, #0]
 801de8c:	f997 301b 	ldrsb.w	r3, [r7, #27]
 801de90:	009b      	lsls	r3, r3, #2
 801de92:	6879      	ldr	r1, [r7, #4]
 801de94:	440b      	add	r3, r1
 801de96:	681b      	ldr	r3, [r3, #0]
 801de98:	4413      	add	r3, r2
 801de9a:	69fa      	ldr	r2, [r7, #28]
 801de9c:	4413      	add	r3, r2
 801de9e:	617b      	str	r3, [r7, #20]
    if (sum != left[i]) {
 801dea0:	f997 301b 	ldrsb.w	r3, [r7, #27]
 801dea4:	009b      	lsls	r3, r3, #2
 801dea6:	68ba      	ldr	r2, [r7, #8]
 801dea8:	4413      	add	r3, r2
 801deaa:	681b      	ldr	r3, [r3, #0]
 801deac:	697a      	ldr	r2, [r7, #20]
 801deae:	429a      	cmp	r2, r3
 801deb0:	d00c      	beq.n	801decc <mg_uecc_vli_add+0x64>
      carry = (sum < left[i]);
 801deb2:	f997 301b 	ldrsb.w	r3, [r7, #27]
 801deb6:	009b      	lsls	r3, r3, #2
 801deb8:	68ba      	ldr	r2, [r7, #8]
 801deba:	4413      	add	r3, r2
 801debc:	681b      	ldr	r3, [r3, #0]
 801debe:	697a      	ldr	r2, [r7, #20]
 801dec0:	429a      	cmp	r2, r3
 801dec2:	bf34      	ite	cc
 801dec4:	2301      	movcc	r3, #1
 801dec6:	2300      	movcs	r3, #0
 801dec8:	b2db      	uxtb	r3, r3
 801deca:	61fb      	str	r3, [r7, #28]
    }
    result[i] = sum;
 801decc:	f997 301b 	ldrsb.w	r3, [r7, #27]
 801ded0:	009b      	lsls	r3, r3, #2
 801ded2:	68fa      	ldr	r2, [r7, #12]
 801ded4:	4413      	add	r3, r2
 801ded6:	697a      	ldr	r2, [r7, #20]
 801ded8:	601a      	str	r2, [r3, #0]
  for (i = 0; i < num_words; ++i) {
 801deda:	7efb      	ldrb	r3, [r7, #27]
 801dedc:	3301      	adds	r3, #1
 801dede:	b2db      	uxtb	r3, r3
 801dee0:	76fb      	strb	r3, [r7, #27]
 801dee2:	f997 201b 	ldrsb.w	r2, [r7, #27]
 801dee6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801deea:	429a      	cmp	r2, r3
 801deec:	dbc8      	blt.n	801de80 <mg_uecc_vli_add+0x18>
  }
  return carry;
 801deee:	69fb      	ldr	r3, [r7, #28]
}
 801def0:	4618      	mov	r0, r3
 801def2:	3724      	adds	r7, #36	@ 0x24
 801def4:	46bd      	mov	sp, r7
 801def6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801defa:	4770      	bx	lr

0801defc <mg_uecc_vli_sub>:
/* Computes result = left - right, returning borrow. Can modify in place. */
#if !asm_sub
MG_UECC_VLI_API mg_uecc_word_t mg_uecc_vli_sub(mg_uecc_word_t *result,
                                               const mg_uecc_word_t *left,
                                               const mg_uecc_word_t *right,
                                               wordcount_t num_words) {
 801defc:	b480      	push	{r7}
 801defe:	b089      	sub	sp, #36	@ 0x24
 801df00:	af00      	add	r7, sp, #0
 801df02:	60f8      	str	r0, [r7, #12]
 801df04:	60b9      	str	r1, [r7, #8]
 801df06:	607a      	str	r2, [r7, #4]
 801df08:	70fb      	strb	r3, [r7, #3]
  mg_uecc_word_t borrow = 0;
 801df0a:	2300      	movs	r3, #0
 801df0c:	61fb      	str	r3, [r7, #28]
  wordcount_t i;
  for (i = 0; i < num_words; ++i) {
 801df0e:	2300      	movs	r3, #0
 801df10:	76fb      	strb	r3, [r7, #27]
 801df12:	e030      	b.n	801df76 <mg_uecc_vli_sub+0x7a>
    mg_uecc_word_t diff = left[i] - right[i] - borrow;
 801df14:	f997 301b 	ldrsb.w	r3, [r7, #27]
 801df18:	009b      	lsls	r3, r3, #2
 801df1a:	68ba      	ldr	r2, [r7, #8]
 801df1c:	4413      	add	r3, r2
 801df1e:	681a      	ldr	r2, [r3, #0]
 801df20:	f997 301b 	ldrsb.w	r3, [r7, #27]
 801df24:	009b      	lsls	r3, r3, #2
 801df26:	6879      	ldr	r1, [r7, #4]
 801df28:	440b      	add	r3, r1
 801df2a:	681b      	ldr	r3, [r3, #0]
 801df2c:	1ad2      	subs	r2, r2, r3
 801df2e:	69fb      	ldr	r3, [r7, #28]
 801df30:	1ad3      	subs	r3, r2, r3
 801df32:	617b      	str	r3, [r7, #20]
    if (diff != left[i]) {
 801df34:	f997 301b 	ldrsb.w	r3, [r7, #27]
 801df38:	009b      	lsls	r3, r3, #2
 801df3a:	68ba      	ldr	r2, [r7, #8]
 801df3c:	4413      	add	r3, r2
 801df3e:	681b      	ldr	r3, [r3, #0]
 801df40:	697a      	ldr	r2, [r7, #20]
 801df42:	429a      	cmp	r2, r3
 801df44:	d00c      	beq.n	801df60 <mg_uecc_vli_sub+0x64>
      borrow = (diff > left[i]);
 801df46:	f997 301b 	ldrsb.w	r3, [r7, #27]
 801df4a:	009b      	lsls	r3, r3, #2
 801df4c:	68ba      	ldr	r2, [r7, #8]
 801df4e:	4413      	add	r3, r2
 801df50:	681b      	ldr	r3, [r3, #0]
 801df52:	697a      	ldr	r2, [r7, #20]
 801df54:	429a      	cmp	r2, r3
 801df56:	bf8c      	ite	hi
 801df58:	2301      	movhi	r3, #1
 801df5a:	2300      	movls	r3, #0
 801df5c:	b2db      	uxtb	r3, r3
 801df5e:	61fb      	str	r3, [r7, #28]
    }
    result[i] = diff;
 801df60:	f997 301b 	ldrsb.w	r3, [r7, #27]
 801df64:	009b      	lsls	r3, r3, #2
 801df66:	68fa      	ldr	r2, [r7, #12]
 801df68:	4413      	add	r3, r2
 801df6a:	697a      	ldr	r2, [r7, #20]
 801df6c:	601a      	str	r2, [r3, #0]
  for (i = 0; i < num_words; ++i) {
 801df6e:	7efb      	ldrb	r3, [r7, #27]
 801df70:	3301      	adds	r3, #1
 801df72:	b2db      	uxtb	r3, r3
 801df74:	76fb      	strb	r3, [r7, #27]
 801df76:	f997 201b 	ldrsb.w	r2, [r7, #27]
 801df7a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801df7e:	429a      	cmp	r2, r3
 801df80:	dbc8      	blt.n	801df14 <mg_uecc_vli_sub+0x18>
  }
  return borrow;
 801df82:	69fb      	ldr	r3, [r7, #28]
}
 801df84:	4618      	mov	r0, r3
 801df86:	3724      	adds	r7, #36	@ 0x24
 801df88:	46bd      	mov	sp, r7
 801df8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801df8e:	4770      	bx	lr

0801df90 <muladd>:

#if !asm_mult || (MG_UECC_SQUARE_FUNC && !asm_square) ||               \
    (MG_UECC_SUPPORTS_secp256k1 && (MG_UECC_OPTIMIZATION_LEVEL > 0) && \
     ((MG_UECC_WORD_SIZE == 1) || (MG_UECC_WORD_SIZE == 8)))
static void muladd(mg_uecc_word_t a, mg_uecc_word_t b, mg_uecc_word_t *r0,
                   mg_uecc_word_t *r1, mg_uecc_word_t *r2) {
 801df90:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 801df94:	b091      	sub	sp, #68	@ 0x44
 801df96:	af00      	add	r7, sp, #0
 801df98:	62f8      	str	r0, [r7, #44]	@ 0x2c
 801df9a:	62b9      	str	r1, [r7, #40]	@ 0x28
 801df9c:	627a      	str	r2, [r7, #36]	@ 0x24
 801df9e:	623b      	str	r3, [r7, #32]

  *r0 += p0;
  *r1 += (p1 + (*r0 < p0));
  *r2 += ((*r1 < p1) || (*r1 == p1 && *r0 < p0));
#else
  mg_uecc_dword_t p = (mg_uecc_dword_t) a * b;
 801dfa0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801dfa2:	2200      	movs	r2, #0
 801dfa4:	4698      	mov	r8, r3
 801dfa6:	4691      	mov	r9, r2
 801dfa8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801dfaa:	2200      	movs	r2, #0
 801dfac:	469a      	mov	sl, r3
 801dfae:	4693      	mov	fp, r2
 801dfb0:	fb0a f209 	mul.w	r2, sl, r9
 801dfb4:	fb08 f30b 	mul.w	r3, r8, fp
 801dfb8:	4413      	add	r3, r2
 801dfba:	fba8 450a 	umull	r4, r5, r8, sl
 801dfbe:	442b      	add	r3, r5
 801dfc0:	461d      	mov	r5, r3
 801dfc2:	e9c7 450e 	strd	r4, r5, [r7, #56]	@ 0x38
 801dfc6:	e9c7 450e 	strd	r4, r5, [r7, #56]	@ 0x38
  mg_uecc_dword_t r01 = ((mg_uecc_dword_t) (*r1) << MG_UECC_WORD_BITS) | *r0;
 801dfca:	6a3b      	ldr	r3, [r7, #32]
 801dfcc:	681b      	ldr	r3, [r3, #0]
 801dfce:	2200      	movs	r2, #0
 801dfd0:	61bb      	str	r3, [r7, #24]
 801dfd2:	61fa      	str	r2, [r7, #28]
 801dfd4:	f04f 0200 	mov.w	r2, #0
 801dfd8:	f04f 0300 	mov.w	r3, #0
 801dfdc:	69b9      	ldr	r1, [r7, #24]
 801dfde:	000b      	movs	r3, r1
 801dfe0:	2200      	movs	r2, #0
 801dfe2:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 801dfe4:	6809      	ldr	r1, [r1, #0]
 801dfe6:	2000      	movs	r0, #0
 801dfe8:	6139      	str	r1, [r7, #16]
 801dfea:	6178      	str	r0, [r7, #20]
 801dfec:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 801dff0:	4621      	mov	r1, r4
 801dff2:	4311      	orrs	r1, r2
 801dff4:	60b9      	str	r1, [r7, #8]
 801dff6:	4629      	mov	r1, r5
 801dff8:	4319      	orrs	r1, r3
 801dffa:	60f9      	str	r1, [r7, #12]
 801dffc:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 801e000:	e9c7 340c 	strd	r3, r4, [r7, #48]	@ 0x30
  r01 += p;
 801e004:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 801e008:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 801e00c:	1884      	adds	r4, r0, r2
 801e00e:	603c      	str	r4, [r7, #0]
 801e010:	eb41 0303 	adc.w	r3, r1, r3
 801e014:	607b      	str	r3, [r7, #4]
 801e016:	e9d7 3400 	ldrd	r3, r4, [r7]
 801e01a:	e9c7 340c 	strd	r3, r4, [r7, #48]	@ 0x30
  *r2 += (r01 < p);
 801e01e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 801e020:	681c      	ldr	r4, [r3, #0]
 801e022:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 801e026:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 801e02a:	4290      	cmp	r0, r2
 801e02c:	eb71 0303 	sbcs.w	r3, r1, r3
 801e030:	bf34      	ite	cc
 801e032:	2301      	movcc	r3, #1
 801e034:	2300      	movcs	r3, #0
 801e036:	b2db      	uxtb	r3, r3
 801e038:	18e2      	adds	r2, r4, r3
 801e03a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 801e03c:	601a      	str	r2, [r3, #0]
  *r1 = (mg_uecc_word_t) (r01 >> MG_UECC_WORD_BITS);
 801e03e:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 801e042:	f04f 0200 	mov.w	r2, #0
 801e046:	f04f 0300 	mov.w	r3, #0
 801e04a:	000a      	movs	r2, r1
 801e04c:	2300      	movs	r3, #0
 801e04e:	6a3b      	ldr	r3, [r7, #32]
 801e050:	601a      	str	r2, [r3, #0]
  *r0 = (mg_uecc_word_t) r01;
 801e052:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801e054:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801e056:	601a      	str	r2, [r3, #0]
#endif
}
 801e058:	bf00      	nop
 801e05a:	3744      	adds	r7, #68	@ 0x44
 801e05c:	46bd      	mov	sp, r7
 801e05e:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 801e062:	4770      	bx	lr

0801e064 <mg_uecc_vli_mult>:

#if !asm_mult
MG_UECC_VLI_API void mg_uecc_vli_mult(mg_uecc_word_t *result,
                                      const mg_uecc_word_t *left,
                                      const mg_uecc_word_t *right,
                                      wordcount_t num_words) {
 801e064:	b590      	push	{r4, r7, lr}
 801e066:	b08b      	sub	sp, #44	@ 0x2c
 801e068:	af02      	add	r7, sp, #8
 801e06a:	60f8      	str	r0, [r7, #12]
 801e06c:	60b9      	str	r1, [r7, #8]
 801e06e:	607a      	str	r2, [r7, #4]
 801e070:	70fb      	strb	r3, [r7, #3]
  mg_uecc_word_t r0 = 0;
 801e072:	2300      	movs	r3, #0
 801e074:	61bb      	str	r3, [r7, #24]
  mg_uecc_word_t r1 = 0;
 801e076:	2300      	movs	r3, #0
 801e078:	617b      	str	r3, [r7, #20]
  mg_uecc_word_t r2 = 0;
 801e07a:	2300      	movs	r3, #0
 801e07c:	613b      	str	r3, [r7, #16]
  wordcount_t i, k;

  /* Compute each digit of result in sequence, maintaining the carries. */
  for (k = 0; k < num_words; ++k) {
 801e07e:	2300      	movs	r3, #0
 801e080:	77bb      	strb	r3, [r7, #30]
 801e082:	e036      	b.n	801e0f2 <mg_uecc_vli_mult+0x8e>
    for (i = 0; i <= k; ++i) {
 801e084:	2300      	movs	r3, #0
 801e086:	77fb      	strb	r3, [r7, #31]
 801e088:	e01c      	b.n	801e0c4 <mg_uecc_vli_mult+0x60>
      muladd(left[i], right[k - i], &r0, &r1, &r2);
 801e08a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 801e08e:	009b      	lsls	r3, r3, #2
 801e090:	68ba      	ldr	r2, [r7, #8]
 801e092:	4413      	add	r3, r2
 801e094:	6818      	ldr	r0, [r3, #0]
 801e096:	f997 201e 	ldrsb.w	r2, [r7, #30]
 801e09a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 801e09e:	1ad3      	subs	r3, r2, r3
 801e0a0:	009b      	lsls	r3, r3, #2
 801e0a2:	687a      	ldr	r2, [r7, #4]
 801e0a4:	4413      	add	r3, r2
 801e0a6:	6819      	ldr	r1, [r3, #0]
 801e0a8:	f107 0414 	add.w	r4, r7, #20
 801e0ac:	f107 0218 	add.w	r2, r7, #24
 801e0b0:	f107 0310 	add.w	r3, r7, #16
 801e0b4:	9300      	str	r3, [sp, #0]
 801e0b6:	4623      	mov	r3, r4
 801e0b8:	f7ff ff6a 	bl	801df90 <muladd>
    for (i = 0; i <= k; ++i) {
 801e0bc:	7ffb      	ldrb	r3, [r7, #31]
 801e0be:	3301      	adds	r3, #1
 801e0c0:	b2db      	uxtb	r3, r3
 801e0c2:	77fb      	strb	r3, [r7, #31]
 801e0c4:	f997 201f 	ldrsb.w	r2, [r7, #31]
 801e0c8:	f997 301e 	ldrsb.w	r3, [r7, #30]
 801e0cc:	429a      	cmp	r2, r3
 801e0ce:	dddc      	ble.n	801e08a <mg_uecc_vli_mult+0x26>
    }
    result[k] = r0;
 801e0d0:	f997 301e 	ldrsb.w	r3, [r7, #30]
 801e0d4:	009b      	lsls	r3, r3, #2
 801e0d6:	68fa      	ldr	r2, [r7, #12]
 801e0d8:	4413      	add	r3, r2
 801e0da:	69ba      	ldr	r2, [r7, #24]
 801e0dc:	601a      	str	r2, [r3, #0]
    r0 = r1;
 801e0de:	697b      	ldr	r3, [r7, #20]
 801e0e0:	61bb      	str	r3, [r7, #24]
    r1 = r2;
 801e0e2:	693b      	ldr	r3, [r7, #16]
 801e0e4:	617b      	str	r3, [r7, #20]
    r2 = 0;
 801e0e6:	2300      	movs	r3, #0
 801e0e8:	613b      	str	r3, [r7, #16]
  for (k = 0; k < num_words; ++k) {
 801e0ea:	7fbb      	ldrb	r3, [r7, #30]
 801e0ec:	3301      	adds	r3, #1
 801e0ee:	b2db      	uxtb	r3, r3
 801e0f0:	77bb      	strb	r3, [r7, #30]
 801e0f2:	f997 201e 	ldrsb.w	r2, [r7, #30]
 801e0f6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801e0fa:	429a      	cmp	r2, r3
 801e0fc:	dbc2      	blt.n	801e084 <mg_uecc_vli_mult+0x20>
  }
  for (k = num_words; k < num_words * 2 - 1; ++k) {
 801e0fe:	78fb      	ldrb	r3, [r7, #3]
 801e100:	77bb      	strb	r3, [r7, #30]
 801e102:	e03b      	b.n	801e17c <mg_uecc_vli_mult+0x118>
    for (i = (wordcount_t) ((k + 1) - num_words); i < num_words; ++i) {
 801e104:	7fba      	ldrb	r2, [r7, #30]
 801e106:	78fb      	ldrb	r3, [r7, #3]
 801e108:	1ad3      	subs	r3, r2, r3
 801e10a:	b2db      	uxtb	r3, r3
 801e10c:	3301      	adds	r3, #1
 801e10e:	b2db      	uxtb	r3, r3
 801e110:	77fb      	strb	r3, [r7, #31]
 801e112:	e01c      	b.n	801e14e <mg_uecc_vli_mult+0xea>
      muladd(left[i], right[k - i], &r0, &r1, &r2);
 801e114:	f997 301f 	ldrsb.w	r3, [r7, #31]
 801e118:	009b      	lsls	r3, r3, #2
 801e11a:	68ba      	ldr	r2, [r7, #8]
 801e11c:	4413      	add	r3, r2
 801e11e:	6818      	ldr	r0, [r3, #0]
 801e120:	f997 201e 	ldrsb.w	r2, [r7, #30]
 801e124:	f997 301f 	ldrsb.w	r3, [r7, #31]
 801e128:	1ad3      	subs	r3, r2, r3
 801e12a:	009b      	lsls	r3, r3, #2
 801e12c:	687a      	ldr	r2, [r7, #4]
 801e12e:	4413      	add	r3, r2
 801e130:	6819      	ldr	r1, [r3, #0]
 801e132:	f107 0414 	add.w	r4, r7, #20
 801e136:	f107 0218 	add.w	r2, r7, #24
 801e13a:	f107 0310 	add.w	r3, r7, #16
 801e13e:	9300      	str	r3, [sp, #0]
 801e140:	4623      	mov	r3, r4
 801e142:	f7ff ff25 	bl	801df90 <muladd>
    for (i = (wordcount_t) ((k + 1) - num_words); i < num_words; ++i) {
 801e146:	7ffb      	ldrb	r3, [r7, #31]
 801e148:	3301      	adds	r3, #1
 801e14a:	b2db      	uxtb	r3, r3
 801e14c:	77fb      	strb	r3, [r7, #31]
 801e14e:	f997 201f 	ldrsb.w	r2, [r7, #31]
 801e152:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801e156:	429a      	cmp	r2, r3
 801e158:	dbdc      	blt.n	801e114 <mg_uecc_vli_mult+0xb0>
    }
    result[k] = r0;
 801e15a:	f997 301e 	ldrsb.w	r3, [r7, #30]
 801e15e:	009b      	lsls	r3, r3, #2
 801e160:	68fa      	ldr	r2, [r7, #12]
 801e162:	4413      	add	r3, r2
 801e164:	69ba      	ldr	r2, [r7, #24]
 801e166:	601a      	str	r2, [r3, #0]
    r0 = r1;
 801e168:	697b      	ldr	r3, [r7, #20]
 801e16a:	61bb      	str	r3, [r7, #24]
    r1 = r2;
 801e16c:	693b      	ldr	r3, [r7, #16]
 801e16e:	617b      	str	r3, [r7, #20]
    r2 = 0;
 801e170:	2300      	movs	r3, #0
 801e172:	613b      	str	r3, [r7, #16]
  for (k = num_words; k < num_words * 2 - 1; ++k) {
 801e174:	7fbb      	ldrb	r3, [r7, #30]
 801e176:	3301      	adds	r3, #1
 801e178:	b2db      	uxtb	r3, r3
 801e17a:	77bb      	strb	r3, [r7, #30]
 801e17c:	f997 201e 	ldrsb.w	r2, [r7, #30]
 801e180:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801e184:	005b      	lsls	r3, r3, #1
 801e186:	3b01      	subs	r3, #1
 801e188:	429a      	cmp	r2, r3
 801e18a:	dbbb      	blt.n	801e104 <mg_uecc_vli_mult+0xa0>
  }
  result[num_words * 2 - 1] = r0;
 801e18c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801e190:	00db      	lsls	r3, r3, #3
 801e192:	3b04      	subs	r3, #4
 801e194:	68fa      	ldr	r2, [r7, #12]
 801e196:	4413      	add	r3, r2
 801e198:	69ba      	ldr	r2, [r7, #24]
 801e19a:	601a      	str	r2, [r3, #0]
}
 801e19c:	bf00      	nop
 801e19e:	3724      	adds	r7, #36	@ 0x24
 801e1a0:	46bd      	mov	sp, r7
 801e1a2:	bd90      	pop	{r4, r7, pc}

0801e1a4 <mg_uecc_vli_modAdd>:
   mod. */
MG_UECC_VLI_API void mg_uecc_vli_modAdd(mg_uecc_word_t *result,
                                        const mg_uecc_word_t *left,
                                        const mg_uecc_word_t *right,
                                        const mg_uecc_word_t *mod,
                                        wordcount_t num_words) {
 801e1a4:	b580      	push	{r7, lr}
 801e1a6:	b086      	sub	sp, #24
 801e1a8:	af00      	add	r7, sp, #0
 801e1aa:	60f8      	str	r0, [r7, #12]
 801e1ac:	60b9      	str	r1, [r7, #8]
 801e1ae:	607a      	str	r2, [r7, #4]
 801e1b0:	603b      	str	r3, [r7, #0]
  mg_uecc_word_t carry = mg_uecc_vli_add(result, left, right, num_words);
 801e1b2:	f997 3020 	ldrsb.w	r3, [r7, #32]
 801e1b6:	687a      	ldr	r2, [r7, #4]
 801e1b8:	68b9      	ldr	r1, [r7, #8]
 801e1ba:	68f8      	ldr	r0, [r7, #12]
 801e1bc:	f7ff fe54 	bl	801de68 <mg_uecc_vli_add>
 801e1c0:	6178      	str	r0, [r7, #20]
  if (carry || mg_uecc_vli_cmp_unsafe(mod, result, num_words) != 1) {
 801e1c2:	697b      	ldr	r3, [r7, #20]
 801e1c4:	2b00      	cmp	r3, #0
 801e1c6:	d109      	bne.n	801e1dc <mg_uecc_vli_modAdd+0x38>
 801e1c8:	f997 3020 	ldrsb.w	r3, [r7, #32]
 801e1cc:	461a      	mov	r2, r3
 801e1ce:	68f9      	ldr	r1, [r7, #12]
 801e1d0:	6838      	ldr	r0, [r7, #0]
 801e1d2:	f7ff fd80 	bl	801dcd6 <mg_uecc_vli_cmp_unsafe>
 801e1d6:	4603      	mov	r3, r0
 801e1d8:	2b01      	cmp	r3, #1
 801e1da:	d006      	beq.n	801e1ea <mg_uecc_vli_modAdd+0x46>
    /* result > mod (result = mod + remainder), so subtract mod to get
     * remainder. */
    mg_uecc_vli_sub(result, result, mod, num_words);
 801e1dc:	f997 3020 	ldrsb.w	r3, [r7, #32]
 801e1e0:	683a      	ldr	r2, [r7, #0]
 801e1e2:	68f9      	ldr	r1, [r7, #12]
 801e1e4:	68f8      	ldr	r0, [r7, #12]
 801e1e6:	f7ff fe89 	bl	801defc <mg_uecc_vli_sub>
  }
}
 801e1ea:	bf00      	nop
 801e1ec:	3718      	adds	r7, #24
 801e1ee:	46bd      	mov	sp, r7
 801e1f0:	bd80      	pop	{r7, pc}

0801e1f2 <mg_uecc_vli_modSub>:
   mod. */
MG_UECC_VLI_API void mg_uecc_vli_modSub(mg_uecc_word_t *result,
                                        const mg_uecc_word_t *left,
                                        const mg_uecc_word_t *right,
                                        const mg_uecc_word_t *mod,
                                        wordcount_t num_words) {
 801e1f2:	b580      	push	{r7, lr}
 801e1f4:	b086      	sub	sp, #24
 801e1f6:	af00      	add	r7, sp, #0
 801e1f8:	60f8      	str	r0, [r7, #12]
 801e1fa:	60b9      	str	r1, [r7, #8]
 801e1fc:	607a      	str	r2, [r7, #4]
 801e1fe:	603b      	str	r3, [r7, #0]
  mg_uecc_word_t l_borrow = mg_uecc_vli_sub(result, left, right, num_words);
 801e200:	f997 3020 	ldrsb.w	r3, [r7, #32]
 801e204:	687a      	ldr	r2, [r7, #4]
 801e206:	68b9      	ldr	r1, [r7, #8]
 801e208:	68f8      	ldr	r0, [r7, #12]
 801e20a:	f7ff fe77 	bl	801defc <mg_uecc_vli_sub>
 801e20e:	6178      	str	r0, [r7, #20]
  if (l_borrow) {
 801e210:	697b      	ldr	r3, [r7, #20]
 801e212:	2b00      	cmp	r3, #0
 801e214:	d006      	beq.n	801e224 <mg_uecc_vli_modSub+0x32>
    /* In this case, result == -diff == (max int) - diff. Since -x % d == d - x,
       we can get the correct result from result + mod (with overflow). */
    mg_uecc_vli_add(result, result, mod, num_words);
 801e216:	f997 3020 	ldrsb.w	r3, [r7, #32]
 801e21a:	683a      	ldr	r2, [r7, #0]
 801e21c:	68f9      	ldr	r1, [r7, #12]
 801e21e:	68f8      	ldr	r0, [r7, #12]
 801e220:	f7ff fe22 	bl	801de68 <mg_uecc_vli_add>
  }
}
 801e224:	bf00      	nop
 801e226:	3718      	adds	r7, #24
 801e228:	46bd      	mov	sp, r7
 801e22a:	bd80      	pop	{r7, pc}

0801e22c <mg_uecc_vli_mmod>:
/* Computes result = product % mod, where product is 2N words long. */
/* Currently only designed to work for curve_p or curve_n. */
MG_UECC_VLI_API void mg_uecc_vli_mmod(mg_uecc_word_t *result,
                                      mg_uecc_word_t *product,
                                      const mg_uecc_word_t *mod,
                                      wordcount_t num_words) {
 801e22c:	b590      	push	{r4, r7, lr}
 801e22e:	b0ad      	sub	sp, #180	@ 0xb4
 801e230:	af00      	add	r7, sp, #0
 801e232:	60f8      	str	r0, [r7, #12]
 801e234:	60b9      	str	r1, [r7, #8]
 801e236:	607a      	str	r2, [r7, #4]
 801e238:	70fb      	strb	r3, [r7, #3]
  mg_uecc_word_t mod_multiple[2 * MG_UECC_MAX_WORDS];
  mg_uecc_word_t tmp[2 * MG_UECC_MAX_WORDS];
  mg_uecc_word_t *v[2] = {tmp, product};
 801e23a:	f107 0318 	add.w	r3, r7, #24
 801e23e:	613b      	str	r3, [r7, #16]
 801e240:	68bb      	ldr	r3, [r7, #8]
 801e242:	617b      	str	r3, [r7, #20]
  mg_uecc_word_t index;

  /* Shift mod so its highest set bit is at the maximum position. */
  bitcount_t shift = (bitcount_t) ((num_words * 2 * MG_UECC_WORD_BITS) -
 801e244:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801e248:	b29b      	uxth	r3, r3
 801e24a:	019b      	lsls	r3, r3, #6
 801e24c:	b29c      	uxth	r4, r3
                                   mg_uecc_vli_numBits(mod, num_words));
 801e24e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801e252:	4619      	mov	r1, r3
 801e254:	6878      	ldr	r0, [r7, #4]
 801e256:	f7ff fcde 	bl	801dc16 <mg_uecc_vli_numBits>
 801e25a:	4603      	mov	r3, r0
 801e25c:	b29b      	uxth	r3, r3
  bitcount_t shift = (bitcount_t) ((num_words * 2 * MG_UECC_WORD_BITS) -
 801e25e:	1ae3      	subs	r3, r4, r3
 801e260:	b29b      	uxth	r3, r3
 801e262:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
  wordcount_t word_shift = (wordcount_t) (shift / MG_UECC_WORD_BITS);
 801e266:	f9b7 30aa 	ldrsh.w	r3, [r7, #170]	@ 0xaa
 801e26a:	2b00      	cmp	r3, #0
 801e26c:	da00      	bge.n	801e270 <mg_uecc_vli_mmod+0x44>
 801e26e:	331f      	adds	r3, #31
 801e270:	115b      	asrs	r3, r3, #5
 801e272:	b21b      	sxth	r3, r3
 801e274:	f887 309e 	strb.w	r3, [r7, #158]	@ 0x9e
  wordcount_t bit_shift = (wordcount_t) (shift % MG_UECC_WORD_BITS);
 801e278:	f9b7 30aa 	ldrsh.w	r3, [r7, #170]	@ 0xaa
 801e27c:	425a      	negs	r2, r3
 801e27e:	f003 031f 	and.w	r3, r3, #31
 801e282:	f002 021f 	and.w	r2, r2, #31
 801e286:	bf58      	it	pl
 801e288:	4253      	negpl	r3, r2
 801e28a:	b21b      	sxth	r3, r3
 801e28c:	f887 309d 	strb.w	r3, [r7, #157]	@ 0x9d
  mg_uecc_word_t carry = 0;
 801e290:	2300      	movs	r3, #0
 801e292:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  mg_uecc_vli_clear(mod_multiple, word_shift);
 801e296:	f997 209e 	ldrsb.w	r2, [r7, #158]	@ 0x9e
 801e29a:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 801e29e:	4611      	mov	r1, r2
 801e2a0:	4618      	mov	r0, r3
 801e2a2:	f7ff fc2d 	bl	801db00 <mg_uecc_vli_clear>
  if (bit_shift > 0) {
 801e2a6:	f997 309d 	ldrsb.w	r3, [r7, #157]	@ 0x9d
 801e2aa:	2b00      	cmp	r3, #0
 801e2ac:	dd34      	ble.n	801e318 <mg_uecc_vli_mmod+0xec>
    for (index = 0; index < (mg_uecc_word_t) num_words; ++index) {
 801e2ae:	2300      	movs	r3, #0
 801e2b0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 801e2b4:	e029      	b.n	801e30a <mg_uecc_vli_mmod+0xde>
      mod_multiple[(mg_uecc_word_t) word_shift + index] =
          (mg_uecc_word_t) (mod[index] << bit_shift) | carry;
 801e2b6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 801e2ba:	009b      	lsls	r3, r3, #2
 801e2bc:	687a      	ldr	r2, [r7, #4]
 801e2be:	4413      	add	r3, r2
 801e2c0:	681a      	ldr	r2, [r3, #0]
 801e2c2:	f997 309d 	ldrsb.w	r3, [r7, #157]	@ 0x9d
 801e2c6:	fa02 f103 	lsl.w	r1, r2, r3
      mod_multiple[(mg_uecc_word_t) word_shift + index] =
 801e2ca:	f997 209e 	ldrsb.w	r2, [r7, #158]	@ 0x9e
 801e2ce:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 801e2d2:	4413      	add	r3, r2
          (mg_uecc_word_t) (mod[index] << bit_shift) | carry;
 801e2d4:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 801e2d8:	430a      	orrs	r2, r1
      mod_multiple[(mg_uecc_word_t) word_shift + index] =
 801e2da:	009b      	lsls	r3, r3, #2
 801e2dc:	33b0      	adds	r3, #176	@ 0xb0
 801e2de:	443b      	add	r3, r7
 801e2e0:	f843 2c58 	str.w	r2, [r3, #-88]
      carry = mod[index] >> (MG_UECC_WORD_BITS - bit_shift);
 801e2e4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 801e2e8:	009b      	lsls	r3, r3, #2
 801e2ea:	687a      	ldr	r2, [r7, #4]
 801e2ec:	4413      	add	r3, r2
 801e2ee:	681a      	ldr	r2, [r3, #0]
 801e2f0:	f997 309d 	ldrsb.w	r3, [r7, #157]	@ 0x9d
 801e2f4:	f1c3 0320 	rsb	r3, r3, #32
 801e2f8:	fa22 f303 	lsr.w	r3, r2, r3
 801e2fc:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    for (index = 0; index < (mg_uecc_word_t) num_words; ++index) {
 801e300:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 801e304:	3301      	adds	r3, #1
 801e306:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 801e30a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801e30e:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 801e312:	429a      	cmp	r2, r3
 801e314:	d3cf      	bcc.n	801e2b6 <mg_uecc_vli_mmod+0x8a>
 801e316:	e00b      	b.n	801e330 <mg_uecc_vli_mmod+0x104>
    }
  } else {
    mg_uecc_vli_set(mod_multiple + word_shift, mod, num_words);
 801e318:	f997 309e 	ldrsb.w	r3, [r7, #158]	@ 0x9e
 801e31c:	009b      	lsls	r3, r3, #2
 801e31e:	f107 0258 	add.w	r2, r7, #88	@ 0x58
 801e322:	4413      	add	r3, r2
 801e324:	f997 2003 	ldrsb.w	r2, [r7, #3]
 801e328:	6879      	ldr	r1, [r7, #4]
 801e32a:	4618      	mov	r0, r3
 801e32c:	f7ff fcac 	bl	801dc88 <mg_uecc_vli_set>
  }

  for (index = 1; shift >= 0; --shift) {
 801e330:	2301      	movs	r3, #1
 801e332:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 801e336:	e09f      	b.n	801e478 <mg_uecc_vli_mmod+0x24c>
    mg_uecc_word_t borrow = 0;
 801e338:	2300      	movs	r3, #0
 801e33a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    wordcount_t i;
    for (i = 0; i < num_words * 2; ++i) {
 801e33e:	2300      	movs	r3, #0
 801e340:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f
 801e344:	e053      	b.n	801e3ee <mg_uecc_vli_mmod+0x1c2>
      mg_uecc_word_t diff = v[index][i] - mod_multiple[i] - borrow;
 801e346:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 801e34a:	009b      	lsls	r3, r3, #2
 801e34c:	33b0      	adds	r3, #176	@ 0xb0
 801e34e:	443b      	add	r3, r7
 801e350:	f853 2ca0 	ldr.w	r2, [r3, #-160]
 801e354:	f997 309f 	ldrsb.w	r3, [r7, #159]	@ 0x9f
 801e358:	009b      	lsls	r3, r3, #2
 801e35a:	4413      	add	r3, r2
 801e35c:	681a      	ldr	r2, [r3, #0]
 801e35e:	f997 309f 	ldrsb.w	r3, [r7, #159]	@ 0x9f
 801e362:	009b      	lsls	r3, r3, #2
 801e364:	33b0      	adds	r3, #176	@ 0xb0
 801e366:	443b      	add	r3, r7
 801e368:	f853 3c58 	ldr.w	r3, [r3, #-88]
 801e36c:	1ad2      	subs	r2, r2, r3
 801e36e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 801e372:	1ad3      	subs	r3, r2, r3
 801e374:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
      if (diff != v[index][i]) {
 801e378:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 801e37c:	009b      	lsls	r3, r3, #2
 801e37e:	33b0      	adds	r3, #176	@ 0xb0
 801e380:	443b      	add	r3, r7
 801e382:	f853 2ca0 	ldr.w	r2, [r3, #-160]
 801e386:	f997 309f 	ldrsb.w	r3, [r7, #159]	@ 0x9f
 801e38a:	009b      	lsls	r3, r3, #2
 801e38c:	4413      	add	r3, r2
 801e38e:	681b      	ldr	r3, [r3, #0]
 801e390:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 801e394:	429a      	cmp	r2, r3
 801e396:	d014      	beq.n	801e3c2 <mg_uecc_vli_mmod+0x196>
        borrow = (diff > v[index][i]);
 801e398:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 801e39c:	009b      	lsls	r3, r3, #2
 801e39e:	33b0      	adds	r3, #176	@ 0xb0
 801e3a0:	443b      	add	r3, r7
 801e3a2:	f853 2ca0 	ldr.w	r2, [r3, #-160]
 801e3a6:	f997 309f 	ldrsb.w	r3, [r7, #159]	@ 0x9f
 801e3aa:	009b      	lsls	r3, r3, #2
 801e3ac:	4413      	add	r3, r2
 801e3ae:	681b      	ldr	r3, [r3, #0]
 801e3b0:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 801e3b4:	429a      	cmp	r2, r3
 801e3b6:	bf8c      	ite	hi
 801e3b8:	2301      	movhi	r3, #1
 801e3ba:	2300      	movls	r3, #0
 801e3bc:	b2db      	uxtb	r3, r3
 801e3be:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
      }
      v[1 - index][i] = diff;
 801e3c2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 801e3c6:	f1c3 0301 	rsb	r3, r3, #1
 801e3ca:	009b      	lsls	r3, r3, #2
 801e3cc:	33b0      	adds	r3, #176	@ 0xb0
 801e3ce:	443b      	add	r3, r7
 801e3d0:	f853 2ca0 	ldr.w	r2, [r3, #-160]
 801e3d4:	f997 309f 	ldrsb.w	r3, [r7, #159]	@ 0x9f
 801e3d8:	009b      	lsls	r3, r3, #2
 801e3da:	4413      	add	r3, r2
 801e3dc:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 801e3e0:	601a      	str	r2, [r3, #0]
    for (i = 0; i < num_words * 2; ++i) {
 801e3e2:	f897 309f 	ldrb.w	r3, [r7, #159]	@ 0x9f
 801e3e6:	3301      	adds	r3, #1
 801e3e8:	b2db      	uxtb	r3, r3
 801e3ea:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f
 801e3ee:	f997 209f 	ldrsb.w	r2, [r7, #159]	@ 0x9f
 801e3f2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801e3f6:	005b      	lsls	r3, r3, #1
 801e3f8:	429a      	cmp	r2, r3
 801e3fa:	dba4      	blt.n	801e346 <mg_uecc_vli_mmod+0x11a>
    }
    index = !(index ^ borrow); /* Swap the index if there was no borrow */
 801e3fc:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 801e400:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 801e404:	429a      	cmp	r2, r3
 801e406:	bf0c      	ite	eq
 801e408:	2301      	moveq	r3, #1
 801e40a:	2300      	movne	r3, #0
 801e40c:	b2db      	uxtb	r3, r3
 801e40e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    mg_uecc_vli_rshift1(mod_multiple, num_words);
 801e412:	f997 2003 	ldrsb.w	r2, [r7, #3]
 801e416:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 801e41a:	4611      	mov	r1, r2
 801e41c:	4618      	mov	r0, r3
 801e41e:	f7ff fcf9 	bl	801de14 <mg_uecc_vli_rshift1>
    mod_multiple[num_words - 1] |= mod_multiple[num_words]
 801e422:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801e426:	3b01      	subs	r3, #1
 801e428:	009b      	lsls	r3, r3, #2
 801e42a:	33b0      	adds	r3, #176	@ 0xb0
 801e42c:	443b      	add	r3, r7
 801e42e:	f853 1c58 	ldr.w	r1, [r3, #-88]
 801e432:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801e436:	009b      	lsls	r3, r3, #2
 801e438:	33b0      	adds	r3, #176	@ 0xb0
 801e43a:	443b      	add	r3, r7
 801e43c:	f853 3c58 	ldr.w	r3, [r3, #-88]
                                   << (MG_UECC_WORD_BITS - 1);
 801e440:	07da      	lsls	r2, r3, #31
    mod_multiple[num_words - 1] |= mod_multiple[num_words]
 801e442:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801e446:	3b01      	subs	r3, #1
 801e448:	430a      	orrs	r2, r1
 801e44a:	009b      	lsls	r3, r3, #2
 801e44c:	33b0      	adds	r3, #176	@ 0xb0
 801e44e:	443b      	add	r3, r7
 801e450:	f843 2c58 	str.w	r2, [r3, #-88]
    mg_uecc_vli_rshift1(mod_multiple + num_words, num_words);
 801e454:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801e458:	009b      	lsls	r3, r3, #2
 801e45a:	f107 0258 	add.w	r2, r7, #88	@ 0x58
 801e45e:	4413      	add	r3, r2
 801e460:	f997 2003 	ldrsb.w	r2, [r7, #3]
 801e464:	4611      	mov	r1, r2
 801e466:	4618      	mov	r0, r3
 801e468:	f7ff fcd4 	bl	801de14 <mg_uecc_vli_rshift1>
  for (index = 1; shift >= 0; --shift) {
 801e46c:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	@ 0xaa
 801e470:	3b01      	subs	r3, #1
 801e472:	b29b      	uxth	r3, r3
 801e474:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
 801e478:	f9b7 30aa 	ldrsh.w	r3, [r7, #170]	@ 0xaa
 801e47c:	2b00      	cmp	r3, #0
 801e47e:	f6bf af5b 	bge.w	801e338 <mg_uecc_vli_mmod+0x10c>
  }
  mg_uecc_vli_set(result, v[index], num_words);
 801e482:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 801e486:	009b      	lsls	r3, r3, #2
 801e488:	33b0      	adds	r3, #176	@ 0xb0
 801e48a:	443b      	add	r3, r7
 801e48c:	f853 3ca0 	ldr.w	r3, [r3, #-160]
 801e490:	f997 2003 	ldrsb.w	r2, [r7, #3]
 801e494:	4619      	mov	r1, r3
 801e496:	68f8      	ldr	r0, [r7, #12]
 801e498:	f7ff fbf6 	bl	801dc88 <mg_uecc_vli_set>
}
 801e49c:	bf00      	nop
 801e49e:	37b4      	adds	r7, #180	@ 0xb4
 801e4a0:	46bd      	mov	sp, r7
 801e4a2:	bd90      	pop	{r4, r7, pc}

0801e4a4 <mg_uecc_vli_modMult>:
/* Computes result = (left * right) % mod. */
MG_UECC_VLI_API void mg_uecc_vli_modMult(mg_uecc_word_t *result,
                                         const mg_uecc_word_t *left,
                                         const mg_uecc_word_t *right,
                                         const mg_uecc_word_t *mod,
                                         wordcount_t num_words) {
 801e4a4:	b580      	push	{r7, lr}
 801e4a6:	b094      	sub	sp, #80	@ 0x50
 801e4a8:	af00      	add	r7, sp, #0
 801e4aa:	60f8      	str	r0, [r7, #12]
 801e4ac:	60b9      	str	r1, [r7, #8]
 801e4ae:	607a      	str	r2, [r7, #4]
 801e4b0:	603b      	str	r3, [r7, #0]
  mg_uecc_word_t product[2 * MG_UECC_MAX_WORDS];
  mg_uecc_vli_mult(product, left, right, num_words);
 801e4b2:	f997 3058 	ldrsb.w	r3, [r7, #88]	@ 0x58
 801e4b6:	f107 0010 	add.w	r0, r7, #16
 801e4ba:	687a      	ldr	r2, [r7, #4]
 801e4bc:	68b9      	ldr	r1, [r7, #8]
 801e4be:	f7ff fdd1 	bl	801e064 <mg_uecc_vli_mult>
  mg_uecc_vli_mmod(result, product, mod, num_words);
 801e4c2:	f997 3058 	ldrsb.w	r3, [r7, #88]	@ 0x58
 801e4c6:	f107 0110 	add.w	r1, r7, #16
 801e4ca:	683a      	ldr	r2, [r7, #0]
 801e4cc:	68f8      	ldr	r0, [r7, #12]
 801e4ce:	f7ff fead 	bl	801e22c <mg_uecc_vli_mmod>
}
 801e4d2:	bf00      	nop
 801e4d4:	3750      	adds	r7, #80	@ 0x50
 801e4d6:	46bd      	mov	sp, r7
 801e4d8:	bd80      	pop	{r7, pc}

0801e4da <mg_uecc_vli_modMult_fast>:

MG_UECC_VLI_API void mg_uecc_vli_modMult_fast(mg_uecc_word_t *result,
                                              const mg_uecc_word_t *left,
                                              const mg_uecc_word_t *right,
                                              MG_UECC_Curve curve) {
 801e4da:	b580      	push	{r7, lr}
 801e4dc:	b094      	sub	sp, #80	@ 0x50
 801e4de:	af00      	add	r7, sp, #0
 801e4e0:	60f8      	str	r0, [r7, #12]
 801e4e2:	60b9      	str	r1, [r7, #8]
 801e4e4:	607a      	str	r2, [r7, #4]
 801e4e6:	603b      	str	r3, [r7, #0]
  mg_uecc_word_t product[2 * MG_UECC_MAX_WORDS];
  mg_uecc_vli_mult(product, left, right, curve->num_words);
 801e4e8:	683b      	ldr	r3, [r7, #0]
 801e4ea:	f993 3000 	ldrsb.w	r3, [r3]
 801e4ee:	f107 0010 	add.w	r0, r7, #16
 801e4f2:	687a      	ldr	r2, [r7, #4]
 801e4f4:	68b9      	ldr	r1, [r7, #8]
 801e4f6:	f7ff fdb5 	bl	801e064 <mg_uecc_vli_mult>
#if (MG_UECC_OPTIMIZATION_LEVEL > 0)
  curve->mmod_fast(result, product);
 801e4fa:	683b      	ldr	r3, [r7, #0]
 801e4fc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 801e500:	f107 0210 	add.w	r2, r7, #16
 801e504:	4611      	mov	r1, r2
 801e506:	68f8      	ldr	r0, [r7, #12]
 801e508:	4798      	blx	r3
#else
  mg_uecc_vli_mmod(result, product, curve->p, curve->num_words);
#endif
}
 801e50a:	bf00      	nop
 801e50c:	3750      	adds	r7, #80	@ 0x50
 801e50e:	46bd      	mov	sp, r7
 801e510:	bd80      	pop	{r7, pc}

0801e512 <mg_uecc_vli_modSquare_fast>:
}
#endif /* MG_UECC_ENABLE_VLI_API */

MG_UECC_VLI_API void mg_uecc_vli_modSquare_fast(mg_uecc_word_t *result,
                                                const mg_uecc_word_t *left,
                                                MG_UECC_Curve curve) {
 801e512:	b580      	push	{r7, lr}
 801e514:	b084      	sub	sp, #16
 801e516:	af00      	add	r7, sp, #0
 801e518:	60f8      	str	r0, [r7, #12]
 801e51a:	60b9      	str	r1, [r7, #8]
 801e51c:	607a      	str	r2, [r7, #4]
  mg_uecc_vli_modMult_fast(result, left, left, curve);
 801e51e:	687b      	ldr	r3, [r7, #4]
 801e520:	68ba      	ldr	r2, [r7, #8]
 801e522:	68b9      	ldr	r1, [r7, #8]
 801e524:	68f8      	ldr	r0, [r7, #12]
 801e526:	f7ff ffd8 	bl	801e4da <mg_uecc_vli_modMult_fast>
}
 801e52a:	bf00      	nop
 801e52c:	3710      	adds	r7, #16
 801e52e:	46bd      	mov	sp, r7
 801e530:	bd80      	pop	{r7, pc}

0801e532 <vli_modInv_update>:

#endif /* MG_UECC_SQUARE_FUNC */

#define EVEN(vli) (!(vli[0] & 1))
static void vli_modInv_update(mg_uecc_word_t *uv, const mg_uecc_word_t *mod,
                              wordcount_t num_words) {
 801e532:	b580      	push	{r7, lr}
 801e534:	b086      	sub	sp, #24
 801e536:	af00      	add	r7, sp, #0
 801e538:	60f8      	str	r0, [r7, #12]
 801e53a:	60b9      	str	r1, [r7, #8]
 801e53c:	4613      	mov	r3, r2
 801e53e:	71fb      	strb	r3, [r7, #7]
  mg_uecc_word_t carry = 0;
 801e540:	2300      	movs	r3, #0
 801e542:	617b      	str	r3, [r7, #20]
  if (!EVEN(uv)) {
 801e544:	68fb      	ldr	r3, [r7, #12]
 801e546:	681b      	ldr	r3, [r3, #0]
 801e548:	f003 0301 	and.w	r3, r3, #1
 801e54c:	2b00      	cmp	r3, #0
 801e54e:	d007      	beq.n	801e560 <vli_modInv_update+0x2e>
    carry = mg_uecc_vli_add(uv, uv, mod, num_words);
 801e550:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801e554:	68ba      	ldr	r2, [r7, #8]
 801e556:	68f9      	ldr	r1, [r7, #12]
 801e558:	68f8      	ldr	r0, [r7, #12]
 801e55a:	f7ff fc85 	bl	801de68 <mg_uecc_vli_add>
 801e55e:	6178      	str	r0, [r7, #20]
  }
  mg_uecc_vli_rshift1(uv, num_words);
 801e560:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801e564:	4619      	mov	r1, r3
 801e566:	68f8      	ldr	r0, [r7, #12]
 801e568:	f7ff fc54 	bl	801de14 <mg_uecc_vli_rshift1>
  if (carry) {
 801e56c:	697b      	ldr	r3, [r7, #20]
 801e56e:	2b00      	cmp	r3, #0
 801e570:	d013      	beq.n	801e59a <vli_modInv_update+0x68>
    uv[num_words - 1] |= HIGH_BIT_SET;
 801e572:	f997 2007 	ldrsb.w	r2, [r7, #7]
 801e576:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 801e57a:	4413      	add	r3, r2
 801e57c:	009b      	lsls	r3, r3, #2
 801e57e:	68fa      	ldr	r2, [r7, #12]
 801e580:	4413      	add	r3, r2
 801e582:	681a      	ldr	r2, [r3, #0]
 801e584:	f997 1007 	ldrsb.w	r1, [r7, #7]
 801e588:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 801e58c:	440b      	add	r3, r1
 801e58e:	009b      	lsls	r3, r3, #2
 801e590:	68f9      	ldr	r1, [r7, #12]
 801e592:	440b      	add	r3, r1
 801e594:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 801e598:	601a      	str	r2, [r3, #0]
  }
}
 801e59a:	bf00      	nop
 801e59c:	3718      	adds	r7, #24
 801e59e:	46bd      	mov	sp, r7
 801e5a0:	bd80      	pop	{r7, pc}

0801e5a2 <mg_uecc_vli_modInv>:
/* Computes result = (1 / input) % mod. All VLIs are the same size.
   See "From Euclid's GCD to Montgomery Multiplication to the Great Divide" */
MG_UECC_VLI_API void mg_uecc_vli_modInv(mg_uecc_word_t *result,
                                        const mg_uecc_word_t *input,
                                        const mg_uecc_word_t *mod,
                                        wordcount_t num_words) {
 801e5a2:	b580      	push	{r7, lr}
 801e5a4:	b0a6      	sub	sp, #152	@ 0x98
 801e5a6:	af00      	add	r7, sp, #0
 801e5a8:	60f8      	str	r0, [r7, #12]
 801e5aa:	60b9      	str	r1, [r7, #8]
 801e5ac:	607a      	str	r2, [r7, #4]
 801e5ae:	70fb      	strb	r3, [r7, #3]
  mg_uecc_word_t a[MG_UECC_MAX_WORDS], b[MG_UECC_MAX_WORDS],
      u[MG_UECC_MAX_WORDS], v[MG_UECC_MAX_WORDS];
  cmpresult_t cmpResult;

  if (mg_uecc_vli_isZero(input, num_words)) {
 801e5b0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801e5b4:	4619      	mov	r1, r3
 801e5b6:	68b8      	ldr	r0, [r7, #8]
 801e5b8:	f7ff fac3 	bl	801db42 <mg_uecc_vli_isZero>
 801e5bc:	4603      	mov	r3, r0
 801e5be:	2b00      	cmp	r3, #0
 801e5c0:	d006      	beq.n	801e5d0 <mg_uecc_vli_modInv+0x2e>
    mg_uecc_vli_clear(result, num_words);
 801e5c2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801e5c6:	4619      	mov	r1, r3
 801e5c8:	68f8      	ldr	r0, [r7, #12]
 801e5ca:	f7ff fa99 	bl	801db00 <mg_uecc_vli_clear>
 801e5ce:	e0de      	b.n	801e78e <mg_uecc_vli_modInv+0x1ec>
    return;
  }

  mg_uecc_vli_set(a, input, num_words);
 801e5d0:	f997 2003 	ldrsb.w	r2, [r7, #3]
 801e5d4:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 801e5d8:	68b9      	ldr	r1, [r7, #8]
 801e5da:	4618      	mov	r0, r3
 801e5dc:	f7ff fb54 	bl	801dc88 <mg_uecc_vli_set>
  mg_uecc_vli_set(b, mod, num_words);
 801e5e0:	f997 2003 	ldrsb.w	r2, [r7, #3]
 801e5e4:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 801e5e8:	6879      	ldr	r1, [r7, #4]
 801e5ea:	4618      	mov	r0, r3
 801e5ec:	f7ff fb4c 	bl	801dc88 <mg_uecc_vli_set>
  mg_uecc_vli_clear(u, num_words);
 801e5f0:	f997 2003 	ldrsb.w	r2, [r7, #3]
 801e5f4:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 801e5f8:	4611      	mov	r1, r2
 801e5fa:	4618      	mov	r0, r3
 801e5fc:	f7ff fa80 	bl	801db00 <mg_uecc_vli_clear>
  u[0] = 1;
 801e600:	2301      	movs	r3, #1
 801e602:	637b      	str	r3, [r7, #52]	@ 0x34
  mg_uecc_vli_clear(v, num_words);
 801e604:	f997 2003 	ldrsb.w	r2, [r7, #3]
 801e608:	f107 0314 	add.w	r3, r7, #20
 801e60c:	4611      	mov	r1, r2
 801e60e:	4618      	mov	r0, r3
 801e610:	f7ff fa76 	bl	801db00 <mg_uecc_vli_clear>
  while ((cmpResult = mg_uecc_vli_cmp_unsafe(a, b, num_words)) != 0) {
 801e614:	e0a2      	b.n	801e75c <mg_uecc_vli_modInv+0x1ba>
    if (EVEN(a)) {
 801e616:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 801e618:	f003 0301 	and.w	r3, r3, #1
 801e61c:	2b00      	cmp	r3, #0
 801e61e:	d110      	bne.n	801e642 <mg_uecc_vli_modInv+0xa0>
      mg_uecc_vli_rshift1(a, num_words);
 801e620:	f997 2003 	ldrsb.w	r2, [r7, #3]
 801e624:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 801e628:	4611      	mov	r1, r2
 801e62a:	4618      	mov	r0, r3
 801e62c:	f7ff fbf2 	bl	801de14 <mg_uecc_vli_rshift1>
      vli_modInv_update(u, mod, num_words);
 801e630:	f997 2003 	ldrsb.w	r2, [r7, #3]
 801e634:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 801e638:	6879      	ldr	r1, [r7, #4]
 801e63a:	4618      	mov	r0, r3
 801e63c:	f7ff ff79 	bl	801e532 <vli_modInv_update>
 801e640:	e08c      	b.n	801e75c <mg_uecc_vli_modInv+0x1ba>
    } else if (EVEN(b)) {
 801e642:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801e644:	f003 0301 	and.w	r3, r3, #1
 801e648:	2b00      	cmp	r3, #0
 801e64a:	d110      	bne.n	801e66e <mg_uecc_vli_modInv+0xcc>
      mg_uecc_vli_rshift1(b, num_words);
 801e64c:	f997 2003 	ldrsb.w	r2, [r7, #3]
 801e650:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 801e654:	4611      	mov	r1, r2
 801e656:	4618      	mov	r0, r3
 801e658:	f7ff fbdc 	bl	801de14 <mg_uecc_vli_rshift1>
      vli_modInv_update(v, mod, num_words);
 801e65c:	f997 2003 	ldrsb.w	r2, [r7, #3]
 801e660:	f107 0314 	add.w	r3, r7, #20
 801e664:	6879      	ldr	r1, [r7, #4]
 801e666:	4618      	mov	r0, r3
 801e668:	f7ff ff63 	bl	801e532 <vli_modInv_update>
 801e66c:	e076      	b.n	801e75c <mg_uecc_vli_modInv+0x1ba>
    } else if (cmpResult > 0) {
 801e66e:	f997 3097 	ldrsb.w	r3, [r7, #151]	@ 0x97
 801e672:	2b00      	cmp	r3, #0
 801e674:	dd39      	ble.n	801e6ea <mg_uecc_vli_modInv+0x148>
      mg_uecc_vli_sub(a, a, b, num_words);
 801e676:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801e67a:	f107 0254 	add.w	r2, r7, #84	@ 0x54
 801e67e:	f107 0174 	add.w	r1, r7, #116	@ 0x74
 801e682:	f107 0074 	add.w	r0, r7, #116	@ 0x74
 801e686:	f7ff fc39 	bl	801defc <mg_uecc_vli_sub>
      mg_uecc_vli_rshift1(a, num_words);
 801e68a:	f997 2003 	ldrsb.w	r2, [r7, #3]
 801e68e:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 801e692:	4611      	mov	r1, r2
 801e694:	4618      	mov	r0, r3
 801e696:	f7ff fbbd 	bl	801de14 <mg_uecc_vli_rshift1>
      if (mg_uecc_vli_cmp_unsafe(u, v, num_words) < 0) {
 801e69a:	f997 2003 	ldrsb.w	r2, [r7, #3]
 801e69e:	f107 0114 	add.w	r1, r7, #20
 801e6a2:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 801e6a6:	4618      	mov	r0, r3
 801e6a8:	f7ff fb15 	bl	801dcd6 <mg_uecc_vli_cmp_unsafe>
 801e6ac:	4603      	mov	r3, r0
 801e6ae:	2b00      	cmp	r3, #0
 801e6b0:	da08      	bge.n	801e6c4 <mg_uecc_vli_modInv+0x122>
        mg_uecc_vli_add(u, u, mod, num_words);
 801e6b2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801e6b6:	f107 0134 	add.w	r1, r7, #52	@ 0x34
 801e6ba:	f107 0034 	add.w	r0, r7, #52	@ 0x34
 801e6be:	687a      	ldr	r2, [r7, #4]
 801e6c0:	f7ff fbd2 	bl	801de68 <mg_uecc_vli_add>
      }
      mg_uecc_vli_sub(u, u, v, num_words);
 801e6c4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801e6c8:	f107 0214 	add.w	r2, r7, #20
 801e6cc:	f107 0134 	add.w	r1, r7, #52	@ 0x34
 801e6d0:	f107 0034 	add.w	r0, r7, #52	@ 0x34
 801e6d4:	f7ff fc12 	bl	801defc <mg_uecc_vli_sub>
      vli_modInv_update(u, mod, num_words);
 801e6d8:	f997 2003 	ldrsb.w	r2, [r7, #3]
 801e6dc:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 801e6e0:	6879      	ldr	r1, [r7, #4]
 801e6e2:	4618      	mov	r0, r3
 801e6e4:	f7ff ff25 	bl	801e532 <vli_modInv_update>
 801e6e8:	e038      	b.n	801e75c <mg_uecc_vli_modInv+0x1ba>
    } else {
      mg_uecc_vli_sub(b, b, a, num_words);
 801e6ea:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801e6ee:	f107 0274 	add.w	r2, r7, #116	@ 0x74
 801e6f2:	f107 0154 	add.w	r1, r7, #84	@ 0x54
 801e6f6:	f107 0054 	add.w	r0, r7, #84	@ 0x54
 801e6fa:	f7ff fbff 	bl	801defc <mg_uecc_vli_sub>
      mg_uecc_vli_rshift1(b, num_words);
 801e6fe:	f997 2003 	ldrsb.w	r2, [r7, #3]
 801e702:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 801e706:	4611      	mov	r1, r2
 801e708:	4618      	mov	r0, r3
 801e70a:	f7ff fb83 	bl	801de14 <mg_uecc_vli_rshift1>
      if (mg_uecc_vli_cmp_unsafe(v, u, num_words) < 0) {
 801e70e:	f997 2003 	ldrsb.w	r2, [r7, #3]
 801e712:	f107 0134 	add.w	r1, r7, #52	@ 0x34
 801e716:	f107 0314 	add.w	r3, r7, #20
 801e71a:	4618      	mov	r0, r3
 801e71c:	f7ff fadb 	bl	801dcd6 <mg_uecc_vli_cmp_unsafe>
 801e720:	4603      	mov	r3, r0
 801e722:	2b00      	cmp	r3, #0
 801e724:	da08      	bge.n	801e738 <mg_uecc_vli_modInv+0x196>
        mg_uecc_vli_add(v, v, mod, num_words);
 801e726:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801e72a:	f107 0114 	add.w	r1, r7, #20
 801e72e:	f107 0014 	add.w	r0, r7, #20
 801e732:	687a      	ldr	r2, [r7, #4]
 801e734:	f7ff fb98 	bl	801de68 <mg_uecc_vli_add>
      }
      mg_uecc_vli_sub(v, v, u, num_words);
 801e738:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801e73c:	f107 0234 	add.w	r2, r7, #52	@ 0x34
 801e740:	f107 0114 	add.w	r1, r7, #20
 801e744:	f107 0014 	add.w	r0, r7, #20
 801e748:	f7ff fbd8 	bl	801defc <mg_uecc_vli_sub>
      vli_modInv_update(v, mod, num_words);
 801e74c:	f997 2003 	ldrsb.w	r2, [r7, #3]
 801e750:	f107 0314 	add.w	r3, r7, #20
 801e754:	6879      	ldr	r1, [r7, #4]
 801e756:	4618      	mov	r0, r3
 801e758:	f7ff feeb 	bl	801e532 <vli_modInv_update>
  while ((cmpResult = mg_uecc_vli_cmp_unsafe(a, b, num_words)) != 0) {
 801e75c:	f997 2003 	ldrsb.w	r2, [r7, #3]
 801e760:	f107 0154 	add.w	r1, r7, #84	@ 0x54
 801e764:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 801e768:	4618      	mov	r0, r3
 801e76a:	f7ff fab4 	bl	801dcd6 <mg_uecc_vli_cmp_unsafe>
 801e76e:	4603      	mov	r3, r0
 801e770:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
 801e774:	f997 3097 	ldrsb.w	r3, [r7, #151]	@ 0x97
 801e778:	2b00      	cmp	r3, #0
 801e77a:	f47f af4c 	bne.w	801e616 <mg_uecc_vli_modInv+0x74>
    }
  }
  mg_uecc_vli_set(result, u, num_words);
 801e77e:	f997 2003 	ldrsb.w	r2, [r7, #3]
 801e782:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 801e786:	4619      	mov	r1, r3
 801e788:	68f8      	ldr	r0, [r7, #12]
 801e78a:	f7ff fa7d 	bl	801dc88 <mg_uecc_vli_set>
}
 801e78e:	3798      	adds	r7, #152	@ 0x98
 801e790:	46bd      	mov	sp, r7
 801e792:	bd80      	pop	{r7, pc}

0801e794 <double_jacobian_default>:
#endif /* MG_UECC_WORD_SIZE */

#if MG_UECC_SUPPORTS_secp160r1 || MG_UECC_SUPPORTS_secp192r1 || \
    MG_UECC_SUPPORTS_secp224r1 || MG_UECC_SUPPORTS_secp256r1
static void double_jacobian_default(mg_uecc_word_t *X1, mg_uecc_word_t *Y1,
                                    mg_uecc_word_t *Z1, MG_UECC_Curve curve) {
 801e794:	b580      	push	{r7, lr}
 801e796:	b098      	sub	sp, #96	@ 0x60
 801e798:	af02      	add	r7, sp, #8
 801e79a:	60f8      	str	r0, [r7, #12]
 801e79c:	60b9      	str	r1, [r7, #8]
 801e79e:	607a      	str	r2, [r7, #4]
 801e7a0:	603b      	str	r3, [r7, #0]
  /* t1 = X, t2 = Y, t3 = Z */
  mg_uecc_word_t t4[MG_UECC_MAX_WORDS];
  mg_uecc_word_t t5[MG_UECC_MAX_WORDS];
  wordcount_t num_words = curve->num_words;
 801e7a2:	683b      	ldr	r3, [r7, #0]
 801e7a4:	781b      	ldrb	r3, [r3, #0]
 801e7a6:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

  if (mg_uecc_vli_isZero(Z1, num_words)) {
 801e7aa:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 801e7ae:	4619      	mov	r1, r3
 801e7b0:	6878      	ldr	r0, [r7, #4]
 801e7b2:	f7ff f9c6 	bl	801db42 <mg_uecc_vli_isZero>
 801e7b6:	4603      	mov	r3, r0
 801e7b8:	2b00      	cmp	r3, #0
 801e7ba:	f040 80e6 	bne.w	801e98a <double_jacobian_default+0x1f6>
    return;
  }

  mg_uecc_vli_modSquare_fast(t4, Y1, curve);   /* t4 = y1^2 */
 801e7be:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 801e7c2:	683a      	ldr	r2, [r7, #0]
 801e7c4:	68b9      	ldr	r1, [r7, #8]
 801e7c6:	4618      	mov	r0, r3
 801e7c8:	f7ff fea3 	bl	801e512 <mg_uecc_vli_modSquare_fast>
  mg_uecc_vli_modMult_fast(t5, X1, t4, curve); /* t5 = x1*y1^2 = A */
 801e7cc:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 801e7d0:	f107 0010 	add.w	r0, r7, #16
 801e7d4:	683b      	ldr	r3, [r7, #0]
 801e7d6:	68f9      	ldr	r1, [r7, #12]
 801e7d8:	f7ff fe7f 	bl	801e4da <mg_uecc_vli_modMult_fast>
  mg_uecc_vli_modSquare_fast(t4, t4, curve);   /* t4 = y1^4 */
 801e7dc:	f107 0130 	add.w	r1, r7, #48	@ 0x30
 801e7e0:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 801e7e4:	683a      	ldr	r2, [r7, #0]
 801e7e6:	4618      	mov	r0, r3
 801e7e8:	f7ff fe93 	bl	801e512 <mg_uecc_vli_modSquare_fast>
  mg_uecc_vli_modMult_fast(Y1, Y1, Z1, curve); /* t2 = y1*z1 = z3 */
 801e7ec:	683b      	ldr	r3, [r7, #0]
 801e7ee:	687a      	ldr	r2, [r7, #4]
 801e7f0:	68b9      	ldr	r1, [r7, #8]
 801e7f2:	68b8      	ldr	r0, [r7, #8]
 801e7f4:	f7ff fe71 	bl	801e4da <mg_uecc_vli_modMult_fast>
  mg_uecc_vli_modSquare_fast(Z1, Z1, curve);   /* t3 = z1^2 */
 801e7f8:	683a      	ldr	r2, [r7, #0]
 801e7fa:	6879      	ldr	r1, [r7, #4]
 801e7fc:	6878      	ldr	r0, [r7, #4]
 801e7fe:	f7ff fe88 	bl	801e512 <mg_uecc_vli_modSquare_fast>

  mg_uecc_vli_modAdd(X1, X1, Z1, curve->p, num_words); /* t1 = x1 + z1^2 */
 801e802:	683b      	ldr	r3, [r7, #0]
 801e804:	1d1a      	adds	r2, r3, #4
 801e806:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 801e80a:	9300      	str	r3, [sp, #0]
 801e80c:	4613      	mov	r3, r2
 801e80e:	687a      	ldr	r2, [r7, #4]
 801e810:	68f9      	ldr	r1, [r7, #12]
 801e812:	68f8      	ldr	r0, [r7, #12]
 801e814:	f7ff fcc6 	bl	801e1a4 <mg_uecc_vli_modAdd>
  mg_uecc_vli_modAdd(Z1, Z1, Z1, curve->p, num_words); /* t3 = 2*z1^2 */
 801e818:	683b      	ldr	r3, [r7, #0]
 801e81a:	1d1a      	adds	r2, r3, #4
 801e81c:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 801e820:	9300      	str	r3, [sp, #0]
 801e822:	4613      	mov	r3, r2
 801e824:	687a      	ldr	r2, [r7, #4]
 801e826:	6879      	ldr	r1, [r7, #4]
 801e828:	6878      	ldr	r0, [r7, #4]
 801e82a:	f7ff fcbb 	bl	801e1a4 <mg_uecc_vli_modAdd>
  mg_uecc_vli_modSub(Z1, X1, Z1, curve->p, num_words); /* t3 = x1 - z1^2 */
 801e82e:	683b      	ldr	r3, [r7, #0]
 801e830:	1d1a      	adds	r2, r3, #4
 801e832:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 801e836:	9300      	str	r3, [sp, #0]
 801e838:	4613      	mov	r3, r2
 801e83a:	687a      	ldr	r2, [r7, #4]
 801e83c:	68f9      	ldr	r1, [r7, #12]
 801e83e:	6878      	ldr	r0, [r7, #4]
 801e840:	f7ff fcd7 	bl	801e1f2 <mg_uecc_vli_modSub>
  mg_uecc_vli_modMult_fast(X1, X1, Z1, curve);         /* t1 = x1^2 - z1^4 */
 801e844:	683b      	ldr	r3, [r7, #0]
 801e846:	687a      	ldr	r2, [r7, #4]
 801e848:	68f9      	ldr	r1, [r7, #12]
 801e84a:	68f8      	ldr	r0, [r7, #12]
 801e84c:	f7ff fe45 	bl	801e4da <mg_uecc_vli_modMult_fast>

  mg_uecc_vli_modAdd(Z1, X1, X1, curve->p,
 801e850:	683b      	ldr	r3, [r7, #0]
 801e852:	1d1a      	adds	r2, r3, #4
 801e854:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 801e858:	9300      	str	r3, [sp, #0]
 801e85a:	4613      	mov	r3, r2
 801e85c:	68fa      	ldr	r2, [r7, #12]
 801e85e:	68f9      	ldr	r1, [r7, #12]
 801e860:	6878      	ldr	r0, [r7, #4]
 801e862:	f7ff fc9f 	bl	801e1a4 <mg_uecc_vli_modAdd>
                     num_words); /* t3 = 2*(x1^2 - z1^4) */
  mg_uecc_vli_modAdd(X1, X1, Z1, curve->p,
 801e866:	683b      	ldr	r3, [r7, #0]
 801e868:	1d1a      	adds	r2, r3, #4
 801e86a:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 801e86e:	9300      	str	r3, [sp, #0]
 801e870:	4613      	mov	r3, r2
 801e872:	687a      	ldr	r2, [r7, #4]
 801e874:	68f9      	ldr	r1, [r7, #12]
 801e876:	68f8      	ldr	r0, [r7, #12]
 801e878:	f7ff fc94 	bl	801e1a4 <mg_uecc_vli_modAdd>
                     num_words); /* t1 = 3*(x1^2 - z1^4) */
  if (mg_uecc_vli_testBit(X1, 0)) {
 801e87c:	2100      	movs	r1, #0
 801e87e:	68f8      	ldr	r0, [r7, #12]
 801e880:	f7ff f989 	bl	801db96 <mg_uecc_vli_testBit>
 801e884:	4603      	mov	r3, r0
 801e886:	2b00      	cmp	r3, #0
 801e888:	d024      	beq.n	801e8d4 <double_jacobian_default+0x140>
    mg_uecc_word_t l_carry = mg_uecc_vli_add(X1, X1, curve->p, num_words);
 801e88a:	683b      	ldr	r3, [r7, #0]
 801e88c:	1d1a      	adds	r2, r3, #4
 801e88e:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 801e892:	68f9      	ldr	r1, [r7, #12]
 801e894:	68f8      	ldr	r0, [r7, #12]
 801e896:	f7ff fae7 	bl	801de68 <mg_uecc_vli_add>
 801e89a:	6538      	str	r0, [r7, #80]	@ 0x50
    mg_uecc_vli_rshift1(X1, num_words);
 801e89c:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 801e8a0:	4619      	mov	r1, r3
 801e8a2:	68f8      	ldr	r0, [r7, #12]
 801e8a4:	f7ff fab6 	bl	801de14 <mg_uecc_vli_rshift1>
    X1[num_words - 1] |= l_carry << (MG_UECC_WORD_BITS - 1);
 801e8a8:	f997 2057 	ldrsb.w	r2, [r7, #87]	@ 0x57
 801e8ac:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 801e8b0:	4413      	add	r3, r2
 801e8b2:	009b      	lsls	r3, r3, #2
 801e8b4:	68fa      	ldr	r2, [r7, #12]
 801e8b6:	4413      	add	r3, r2
 801e8b8:	6819      	ldr	r1, [r3, #0]
 801e8ba:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801e8bc:	07da      	lsls	r2, r3, #31
 801e8be:	f997 0057 	ldrsb.w	r0, [r7, #87]	@ 0x57
 801e8c2:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 801e8c6:	4403      	add	r3, r0
 801e8c8:	009b      	lsls	r3, r3, #2
 801e8ca:	68f8      	ldr	r0, [r7, #12]
 801e8cc:	4403      	add	r3, r0
 801e8ce:	430a      	orrs	r2, r1
 801e8d0:	601a      	str	r2, [r3, #0]
 801e8d2:	e005      	b.n	801e8e0 <double_jacobian_default+0x14c>
  } else {
    mg_uecc_vli_rshift1(X1, num_words);
 801e8d4:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 801e8d8:	4619      	mov	r1, r3
 801e8da:	68f8      	ldr	r0, [r7, #12]
 801e8dc:	f7ff fa9a 	bl	801de14 <mg_uecc_vli_rshift1>
  }
  /* t1 = 3/2*(x1^2 - z1^4) = B */

  mg_uecc_vli_modSquare_fast(Z1, X1, curve);           /* t3 = B^2 */
 801e8e0:	683a      	ldr	r2, [r7, #0]
 801e8e2:	68f9      	ldr	r1, [r7, #12]
 801e8e4:	6878      	ldr	r0, [r7, #4]
 801e8e6:	f7ff fe14 	bl	801e512 <mg_uecc_vli_modSquare_fast>
  mg_uecc_vli_modSub(Z1, Z1, t5, curve->p, num_words); /* t3 = B^2 - A */
 801e8ea:	683b      	ldr	r3, [r7, #0]
 801e8ec:	1d19      	adds	r1, r3, #4
 801e8ee:	f107 0210 	add.w	r2, r7, #16
 801e8f2:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 801e8f6:	9300      	str	r3, [sp, #0]
 801e8f8:	460b      	mov	r3, r1
 801e8fa:	6879      	ldr	r1, [r7, #4]
 801e8fc:	6878      	ldr	r0, [r7, #4]
 801e8fe:	f7ff fc78 	bl	801e1f2 <mg_uecc_vli_modSub>
  mg_uecc_vli_modSub(Z1, Z1, t5, curve->p, num_words); /* t3 = B^2 - 2A = x3 */
 801e902:	683b      	ldr	r3, [r7, #0]
 801e904:	1d19      	adds	r1, r3, #4
 801e906:	f107 0210 	add.w	r2, r7, #16
 801e90a:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 801e90e:	9300      	str	r3, [sp, #0]
 801e910:	460b      	mov	r3, r1
 801e912:	6879      	ldr	r1, [r7, #4]
 801e914:	6878      	ldr	r0, [r7, #4]
 801e916:	f7ff fc6c 	bl	801e1f2 <mg_uecc_vli_modSub>
  mg_uecc_vli_modSub(t5, t5, Z1, curve->p, num_words); /* t5 = A - x3 */
 801e91a:	683b      	ldr	r3, [r7, #0]
 801e91c:	1d1a      	adds	r2, r3, #4
 801e91e:	f107 0110 	add.w	r1, r7, #16
 801e922:	f107 0010 	add.w	r0, r7, #16
 801e926:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 801e92a:	9300      	str	r3, [sp, #0]
 801e92c:	4613      	mov	r3, r2
 801e92e:	687a      	ldr	r2, [r7, #4]
 801e930:	f7ff fc5f 	bl	801e1f2 <mg_uecc_vli_modSub>
  mg_uecc_vli_modMult_fast(X1, X1, t5, curve);         /* t1 = B * (A - x3) */
 801e934:	f107 0210 	add.w	r2, r7, #16
 801e938:	683b      	ldr	r3, [r7, #0]
 801e93a:	68f9      	ldr	r1, [r7, #12]
 801e93c:	68f8      	ldr	r0, [r7, #12]
 801e93e:	f7ff fdcc 	bl	801e4da <mg_uecc_vli_modMult_fast>
  mg_uecc_vli_modSub(t4, X1, t4, curve->p,
 801e942:	683b      	ldr	r3, [r7, #0]
 801e944:	1d19      	adds	r1, r3, #4
 801e946:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 801e94a:	f107 0030 	add.w	r0, r7, #48	@ 0x30
 801e94e:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 801e952:	9300      	str	r3, [sp, #0]
 801e954:	460b      	mov	r3, r1
 801e956:	68f9      	ldr	r1, [r7, #12]
 801e958:	f7ff fc4b 	bl	801e1f2 <mg_uecc_vli_modSub>
                     num_words); /* t4 = B * (A - x3) - y1^4 = y3 */

  mg_uecc_vli_set(X1, Z1, num_words);
 801e95c:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 801e960:	461a      	mov	r2, r3
 801e962:	6879      	ldr	r1, [r7, #4]
 801e964:	68f8      	ldr	r0, [r7, #12]
 801e966:	f7ff f98f 	bl	801dc88 <mg_uecc_vli_set>
  mg_uecc_vli_set(Z1, Y1, num_words);
 801e96a:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 801e96e:	461a      	mov	r2, r3
 801e970:	68b9      	ldr	r1, [r7, #8]
 801e972:	6878      	ldr	r0, [r7, #4]
 801e974:	f7ff f988 	bl	801dc88 <mg_uecc_vli_set>
  mg_uecc_vli_set(Y1, t4, num_words);
 801e978:	f997 2057 	ldrsb.w	r2, [r7, #87]	@ 0x57
 801e97c:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 801e980:	4619      	mov	r1, r3
 801e982:	68b8      	ldr	r0, [r7, #8]
 801e984:	f7ff f980 	bl	801dc88 <mg_uecc_vli_set>
 801e988:	e000      	b.n	801e98c <double_jacobian_default+0x1f8>
    return;
 801e98a:	bf00      	nop
}
 801e98c:	3758      	adds	r7, #88	@ 0x58
 801e98e:	46bd      	mov	sp, r7
 801e990:	bd80      	pop	{r7, pc}

0801e992 <x_side_default>:

/* Computes result = x^3 + ax + b. result must not overlap x. */
static void x_side_default(mg_uecc_word_t *result, const mg_uecc_word_t *x,
                           MG_UECC_Curve curve) {
 801e992:	b580      	push	{r7, lr}
 801e994:	b090      	sub	sp, #64	@ 0x40
 801e996:	af02      	add	r7, sp, #8
 801e998:	60f8      	str	r0, [r7, #12]
 801e99a:	60b9      	str	r1, [r7, #8]
 801e99c:	607a      	str	r2, [r7, #4]
  mg_uecc_word_t _3[MG_UECC_MAX_WORDS] = {3}; /* -a = 3 */
 801e99e:	f107 0314 	add.w	r3, r7, #20
 801e9a2:	2220      	movs	r2, #32
 801e9a4:	2100      	movs	r1, #0
 801e9a6:	4618      	mov	r0, r3
 801e9a8:	f005 fd70 	bl	802448c <memset>
 801e9ac:	2303      	movs	r3, #3
 801e9ae:	617b      	str	r3, [r7, #20]
  wordcount_t num_words = curve->num_words;
 801e9b0:	687b      	ldr	r3, [r7, #4]
 801e9b2:	781b      	ldrb	r3, [r3, #0]
 801e9b4:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37

  mg_uecc_vli_modSquare_fast(result, x, curve);                /* r = x^2 */
 801e9b8:	687a      	ldr	r2, [r7, #4]
 801e9ba:	68b9      	ldr	r1, [r7, #8]
 801e9bc:	68f8      	ldr	r0, [r7, #12]
 801e9be:	f7ff fda8 	bl	801e512 <mg_uecc_vli_modSquare_fast>
  mg_uecc_vli_modSub(result, result, _3, curve->p, num_words); /* r = x^2 - 3 */
 801e9c2:	687b      	ldr	r3, [r7, #4]
 801e9c4:	1d19      	adds	r1, r3, #4
 801e9c6:	f107 0214 	add.w	r2, r7, #20
 801e9ca:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 801e9ce:	9300      	str	r3, [sp, #0]
 801e9d0:	460b      	mov	r3, r1
 801e9d2:	68f9      	ldr	r1, [r7, #12]
 801e9d4:	68f8      	ldr	r0, [r7, #12]
 801e9d6:	f7ff fc0c 	bl	801e1f2 <mg_uecc_vli_modSub>
  mg_uecc_vli_modMult_fast(result, result, x, curve); /* r = x^3 - 3x */
 801e9da:	687b      	ldr	r3, [r7, #4]
 801e9dc:	68ba      	ldr	r2, [r7, #8]
 801e9de:	68f9      	ldr	r1, [r7, #12]
 801e9e0:	68f8      	ldr	r0, [r7, #12]
 801e9e2:	f7ff fd7a 	bl	801e4da <mg_uecc_vli_modMult_fast>
  mg_uecc_vli_modAdd(result, result, curve->b, curve->p,
 801e9e6:	687b      	ldr	r3, [r7, #4]
 801e9e8:	f103 0284 	add.w	r2, r3, #132	@ 0x84
 801e9ec:	687b      	ldr	r3, [r7, #4]
 801e9ee:	1d19      	adds	r1, r3, #4
 801e9f0:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 801e9f4:	9300      	str	r3, [sp, #0]
 801e9f6:	460b      	mov	r3, r1
 801e9f8:	68f9      	ldr	r1, [r7, #12]
 801e9fa:	68f8      	ldr	r0, [r7, #12]
 801e9fc:	f7ff fbd2 	bl	801e1a4 <mg_uecc_vli_modAdd>
                     num_words); /* r = x^3 - 3x + b */
}
 801ea00:	bf00      	nop
 801ea02:	3738      	adds	r7, #56	@ 0x38
 801ea04:	46bd      	mov	sp, r7
 801ea06:	bd80      	pop	{r7, pc}

0801ea08 <mod_sqrt_default>:

#if MG_UECC_SUPPORT_COMPRESSED_POINT
#if MG_UECC_SUPPORTS_secp160r1 || MG_UECC_SUPPORTS_secp192r1 || \
    MG_UECC_SUPPORTS_secp256r1 || MG_UECC_SUPPORTS_secp256k1
/* Compute a = sqrt(a) (mod curve_p). */
static void mod_sqrt_default(mg_uecc_word_t *a, MG_UECC_Curve curve) {
 801ea08:	b580      	push	{r7, lr}
 801ea0a:	b094      	sub	sp, #80	@ 0x50
 801ea0c:	af00      	add	r7, sp, #0
 801ea0e:	6078      	str	r0, [r7, #4]
 801ea10:	6039      	str	r1, [r7, #0]
  bitcount_t i;
  mg_uecc_word_t p1[MG_UECC_MAX_WORDS] = {1};
 801ea12:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 801ea16:	2220      	movs	r2, #32
 801ea18:	2100      	movs	r1, #0
 801ea1a:	4618      	mov	r0, r3
 801ea1c:	f005 fd36 	bl	802448c <memset>
 801ea20:	2301      	movs	r3, #1
 801ea22:	62fb      	str	r3, [r7, #44]	@ 0x2c
  mg_uecc_word_t l_result[MG_UECC_MAX_WORDS] = {1};
 801ea24:	f107 030c 	add.w	r3, r7, #12
 801ea28:	2220      	movs	r2, #32
 801ea2a:	2100      	movs	r1, #0
 801ea2c:	4618      	mov	r0, r3
 801ea2e:	f005 fd2d 	bl	802448c <memset>
 801ea32:	2301      	movs	r3, #1
 801ea34:	60fb      	str	r3, [r7, #12]
  wordcount_t num_words = curve->num_words;
 801ea36:	683b      	ldr	r3, [r7, #0]
 801ea38:	781b      	ldrb	r3, [r3, #0]
 801ea3a:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d

  /* When curve->p == 3 (mod 4), we can compute
     sqrt(a) = a^((curve->p + 1) / 4) (mod curve->p). */
  mg_uecc_vli_add(p1, curve->p, p1, num_words); /* p1 = curve_p + 1 */
 801ea3e:	683b      	ldr	r3, [r7, #0]
 801ea40:	1d19      	adds	r1, r3, #4
 801ea42:	f997 304d 	ldrsb.w	r3, [r7, #77]	@ 0x4d
 801ea46:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 801ea4a:	f107 002c 	add.w	r0, r7, #44	@ 0x2c
 801ea4e:	f7ff fa0b 	bl	801de68 <mg_uecc_vli_add>
  for (i = mg_uecc_vli_numBits(p1, num_words) - 1; i > 1; --i) {
 801ea52:	f997 204d 	ldrsb.w	r2, [r7, #77]	@ 0x4d
 801ea56:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 801ea5a:	4611      	mov	r1, r2
 801ea5c:	4618      	mov	r0, r3
 801ea5e:	f7ff f8da 	bl	801dc16 <mg_uecc_vli_numBits>
 801ea62:	4603      	mov	r3, r0
 801ea64:	b29b      	uxth	r3, r3
 801ea66:	3b01      	subs	r3, #1
 801ea68:	b29b      	uxth	r3, r3
 801ea6a:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 801ea6e:	e020      	b.n	801eab2 <mod_sqrt_default+0xaa>
    mg_uecc_vli_modSquare_fast(l_result, l_result, curve);
 801ea70:	f107 010c 	add.w	r1, r7, #12
 801ea74:	f107 030c 	add.w	r3, r7, #12
 801ea78:	683a      	ldr	r2, [r7, #0]
 801ea7a:	4618      	mov	r0, r3
 801ea7c:	f7ff fd49 	bl	801e512 <mg_uecc_vli_modSquare_fast>
    if (mg_uecc_vli_testBit(p1, i)) {
 801ea80:	f9b7 204e 	ldrsh.w	r2, [r7, #78]	@ 0x4e
 801ea84:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 801ea88:	4611      	mov	r1, r2
 801ea8a:	4618      	mov	r0, r3
 801ea8c:	f7ff f883 	bl	801db96 <mg_uecc_vli_testBit>
 801ea90:	4603      	mov	r3, r0
 801ea92:	2b00      	cmp	r3, #0
 801ea94:	d007      	beq.n	801eaa6 <mod_sqrt_default+0x9e>
      mg_uecc_vli_modMult_fast(l_result, l_result, a, curve);
 801ea96:	f107 010c 	add.w	r1, r7, #12
 801ea9a:	f107 000c 	add.w	r0, r7, #12
 801ea9e:	683b      	ldr	r3, [r7, #0]
 801eaa0:	687a      	ldr	r2, [r7, #4]
 801eaa2:	f7ff fd1a 	bl	801e4da <mg_uecc_vli_modMult_fast>
  for (i = mg_uecc_vli_numBits(p1, num_words) - 1; i > 1; --i) {
 801eaa6:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 801eaaa:	3b01      	subs	r3, #1
 801eaac:	b29b      	uxth	r3, r3
 801eaae:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 801eab2:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	@ 0x4e
 801eab6:	2b01      	cmp	r3, #1
 801eab8:	dcda      	bgt.n	801ea70 <mod_sqrt_default+0x68>
    }
  }
  mg_uecc_vli_set(a, l_result, num_words);
 801eaba:	f997 204d 	ldrsb.w	r2, [r7, #77]	@ 0x4d
 801eabe:	f107 030c 	add.w	r3, r7, #12
 801eac2:	4619      	mov	r1, r3
 801eac4:	6878      	ldr	r0, [r7, #4]
 801eac6:	f7ff f8df 	bl	801dc88 <mg_uecc_vli_set>
}
 801eaca:	bf00      	nop
 801eacc:	3750      	adds	r7, #80	@ 0x50
 801eace:	46bd      	mov	sp, r7
 801ead0:	bd80      	pop	{r7, pc}
	...

0801ead4 <mg_uecc_secp256r1>:
#if (MG_UECC_OPTIMIZATION_LEVEL > 0)
    &vli_mmod_fast_secp256r1
#endif
};

MG_UECC_Curve mg_uecc_secp256r1(void) {
 801ead4:	b480      	push	{r7}
 801ead6:	af00      	add	r7, sp, #0
  return &curve_secp256r1;
 801ead8:	4b02      	ldr	r3, [pc, #8]	@ (801eae4 <mg_uecc_secp256r1+0x10>)
}
 801eada:	4618      	mov	r0, r3
 801eadc:	46bd      	mov	sp, r7
 801eade:	f85d 7b04 	ldr.w	r7, [sp], #4
 801eae2:	4770      	bx	lr
 801eae4:	080286e4 	.word	0x080286e4

0801eae8 <vli_mmod_fast_secp256r1>:
                               num_words_secp256r1);
    }
  }
}
#elif MG_UECC_WORD_SIZE == 4
static void vli_mmod_fast_secp256r1(uint32_t *result, uint32_t *product) {
 801eae8:	b580      	push	{r7, lr}
 801eaea:	b08c      	sub	sp, #48	@ 0x30
 801eaec:	af00      	add	r7, sp, #0
 801eaee:	6078      	str	r0, [r7, #4]
 801eaf0:	6039      	str	r1, [r7, #0]
  uint32_t tmp[num_words_secp256r1];
  int carry;

  /* t */
  mg_uecc_vli_set(result, product, num_words_secp256r1);
 801eaf2:	2208      	movs	r2, #8
 801eaf4:	6839      	ldr	r1, [r7, #0]
 801eaf6:	6878      	ldr	r0, [r7, #4]
 801eaf8:	f7ff f8c6 	bl	801dc88 <mg_uecc_vli_set>

  /* s1 */
  tmp[0] = tmp[1] = tmp[2] = 0;
 801eafc:	2300      	movs	r3, #0
 801eafe:	617b      	str	r3, [r7, #20]
 801eb00:	697b      	ldr	r3, [r7, #20]
 801eb02:	613b      	str	r3, [r7, #16]
 801eb04:	693b      	ldr	r3, [r7, #16]
 801eb06:	60fb      	str	r3, [r7, #12]
  tmp[3] = product[11];
 801eb08:	683b      	ldr	r3, [r7, #0]
 801eb0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801eb0c:	61bb      	str	r3, [r7, #24]
  tmp[4] = product[12];
 801eb0e:	683b      	ldr	r3, [r7, #0]
 801eb10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801eb12:	61fb      	str	r3, [r7, #28]
  tmp[5] = product[13];
 801eb14:	683b      	ldr	r3, [r7, #0]
 801eb16:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801eb18:	623b      	str	r3, [r7, #32]
  tmp[6] = product[14];
 801eb1a:	683b      	ldr	r3, [r7, #0]
 801eb1c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801eb1e:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp[7] = product[15];
 801eb20:	683b      	ldr	r3, [r7, #0]
 801eb22:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801eb24:	62bb      	str	r3, [r7, #40]	@ 0x28
  carry = (int) mg_uecc_vli_add(tmp, tmp, tmp, num_words_secp256r1);
 801eb26:	f107 020c 	add.w	r2, r7, #12
 801eb2a:	f107 010c 	add.w	r1, r7, #12
 801eb2e:	f107 000c 	add.w	r0, r7, #12
 801eb32:	2308      	movs	r3, #8
 801eb34:	f7ff f998 	bl	801de68 <mg_uecc_vli_add>
 801eb38:	4603      	mov	r3, r0
 801eb3a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  carry += (int) mg_uecc_vli_add(result, result, tmp, num_words_secp256r1);
 801eb3c:	f107 020c 	add.w	r2, r7, #12
 801eb40:	2308      	movs	r3, #8
 801eb42:	6879      	ldr	r1, [r7, #4]
 801eb44:	6878      	ldr	r0, [r7, #4]
 801eb46:	f7ff f98f 	bl	801de68 <mg_uecc_vli_add>
 801eb4a:	4603      	mov	r3, r0
 801eb4c:	461a      	mov	r2, r3
 801eb4e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801eb50:	4413      	add	r3, r2
 801eb52:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* s2 */
  tmp[3] = product[12];
 801eb54:	683b      	ldr	r3, [r7, #0]
 801eb56:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801eb58:	61bb      	str	r3, [r7, #24]
  tmp[4] = product[13];
 801eb5a:	683b      	ldr	r3, [r7, #0]
 801eb5c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801eb5e:	61fb      	str	r3, [r7, #28]
  tmp[5] = product[14];
 801eb60:	683b      	ldr	r3, [r7, #0]
 801eb62:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801eb64:	623b      	str	r3, [r7, #32]
  tmp[6] = product[15];
 801eb66:	683b      	ldr	r3, [r7, #0]
 801eb68:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801eb6a:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp[7] = 0;
 801eb6c:	2300      	movs	r3, #0
 801eb6e:	62bb      	str	r3, [r7, #40]	@ 0x28
  carry += (int) mg_uecc_vli_add(tmp, tmp, tmp, num_words_secp256r1);
 801eb70:	f107 020c 	add.w	r2, r7, #12
 801eb74:	f107 010c 	add.w	r1, r7, #12
 801eb78:	f107 000c 	add.w	r0, r7, #12
 801eb7c:	2308      	movs	r3, #8
 801eb7e:	f7ff f973 	bl	801de68 <mg_uecc_vli_add>
 801eb82:	4603      	mov	r3, r0
 801eb84:	461a      	mov	r2, r3
 801eb86:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801eb88:	4413      	add	r3, r2
 801eb8a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  carry += (int) mg_uecc_vli_add(result, result, tmp, num_words_secp256r1);
 801eb8c:	f107 020c 	add.w	r2, r7, #12
 801eb90:	2308      	movs	r3, #8
 801eb92:	6879      	ldr	r1, [r7, #4]
 801eb94:	6878      	ldr	r0, [r7, #4]
 801eb96:	f7ff f967 	bl	801de68 <mg_uecc_vli_add>
 801eb9a:	4603      	mov	r3, r0
 801eb9c:	461a      	mov	r2, r3
 801eb9e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801eba0:	4413      	add	r3, r2
 801eba2:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* s3 */
  tmp[0] = product[8];
 801eba4:	683b      	ldr	r3, [r7, #0]
 801eba6:	6a1b      	ldr	r3, [r3, #32]
 801eba8:	60fb      	str	r3, [r7, #12]
  tmp[1] = product[9];
 801ebaa:	683b      	ldr	r3, [r7, #0]
 801ebac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801ebae:	613b      	str	r3, [r7, #16]
  tmp[2] = product[10];
 801ebb0:	683b      	ldr	r3, [r7, #0]
 801ebb2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801ebb4:	617b      	str	r3, [r7, #20]
  tmp[3] = tmp[4] = tmp[5] = 0;
 801ebb6:	2300      	movs	r3, #0
 801ebb8:	623b      	str	r3, [r7, #32]
 801ebba:	6a3b      	ldr	r3, [r7, #32]
 801ebbc:	61fb      	str	r3, [r7, #28]
 801ebbe:	69fb      	ldr	r3, [r7, #28]
 801ebc0:	61bb      	str	r3, [r7, #24]
  tmp[6] = product[14];
 801ebc2:	683b      	ldr	r3, [r7, #0]
 801ebc4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801ebc6:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp[7] = product[15];
 801ebc8:	683b      	ldr	r3, [r7, #0]
 801ebca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801ebcc:	62bb      	str	r3, [r7, #40]	@ 0x28
  carry += (int) mg_uecc_vli_add(result, result, tmp, num_words_secp256r1);
 801ebce:	f107 020c 	add.w	r2, r7, #12
 801ebd2:	2308      	movs	r3, #8
 801ebd4:	6879      	ldr	r1, [r7, #4]
 801ebd6:	6878      	ldr	r0, [r7, #4]
 801ebd8:	f7ff f946 	bl	801de68 <mg_uecc_vli_add>
 801ebdc:	4603      	mov	r3, r0
 801ebde:	461a      	mov	r2, r3
 801ebe0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801ebe2:	4413      	add	r3, r2
 801ebe4:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* s4 */
  tmp[0] = product[9];
 801ebe6:	683b      	ldr	r3, [r7, #0]
 801ebe8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801ebea:	60fb      	str	r3, [r7, #12]
  tmp[1] = product[10];
 801ebec:	683b      	ldr	r3, [r7, #0]
 801ebee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801ebf0:	613b      	str	r3, [r7, #16]
  tmp[2] = product[11];
 801ebf2:	683b      	ldr	r3, [r7, #0]
 801ebf4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801ebf6:	617b      	str	r3, [r7, #20]
  tmp[3] = product[13];
 801ebf8:	683b      	ldr	r3, [r7, #0]
 801ebfa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801ebfc:	61bb      	str	r3, [r7, #24]
  tmp[4] = product[14];
 801ebfe:	683b      	ldr	r3, [r7, #0]
 801ec00:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801ec02:	61fb      	str	r3, [r7, #28]
  tmp[5] = product[15];
 801ec04:	683b      	ldr	r3, [r7, #0]
 801ec06:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801ec08:	623b      	str	r3, [r7, #32]
  tmp[6] = product[13];
 801ec0a:	683b      	ldr	r3, [r7, #0]
 801ec0c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801ec0e:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp[7] = product[8];
 801ec10:	683b      	ldr	r3, [r7, #0]
 801ec12:	6a1b      	ldr	r3, [r3, #32]
 801ec14:	62bb      	str	r3, [r7, #40]	@ 0x28
  carry += (int) mg_uecc_vli_add(result, result, tmp, num_words_secp256r1);
 801ec16:	f107 020c 	add.w	r2, r7, #12
 801ec1a:	2308      	movs	r3, #8
 801ec1c:	6879      	ldr	r1, [r7, #4]
 801ec1e:	6878      	ldr	r0, [r7, #4]
 801ec20:	f7ff f922 	bl	801de68 <mg_uecc_vli_add>
 801ec24:	4603      	mov	r3, r0
 801ec26:	461a      	mov	r2, r3
 801ec28:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801ec2a:	4413      	add	r3, r2
 801ec2c:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* d1 */
  tmp[0] = product[11];
 801ec2e:	683b      	ldr	r3, [r7, #0]
 801ec30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801ec32:	60fb      	str	r3, [r7, #12]
  tmp[1] = product[12];
 801ec34:	683b      	ldr	r3, [r7, #0]
 801ec36:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801ec38:	613b      	str	r3, [r7, #16]
  tmp[2] = product[13];
 801ec3a:	683b      	ldr	r3, [r7, #0]
 801ec3c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801ec3e:	617b      	str	r3, [r7, #20]
  tmp[3] = tmp[4] = tmp[5] = 0;
 801ec40:	2300      	movs	r3, #0
 801ec42:	623b      	str	r3, [r7, #32]
 801ec44:	6a3b      	ldr	r3, [r7, #32]
 801ec46:	61fb      	str	r3, [r7, #28]
 801ec48:	69fb      	ldr	r3, [r7, #28]
 801ec4a:	61bb      	str	r3, [r7, #24]
  tmp[6] = product[8];
 801ec4c:	683b      	ldr	r3, [r7, #0]
 801ec4e:	6a1b      	ldr	r3, [r3, #32]
 801ec50:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp[7] = product[10];
 801ec52:	683b      	ldr	r3, [r7, #0]
 801ec54:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801ec56:	62bb      	str	r3, [r7, #40]	@ 0x28
  carry -= (int) mg_uecc_vli_sub(result, result, tmp, num_words_secp256r1);
 801ec58:	f107 020c 	add.w	r2, r7, #12
 801ec5c:	2308      	movs	r3, #8
 801ec5e:	6879      	ldr	r1, [r7, #4]
 801ec60:	6878      	ldr	r0, [r7, #4]
 801ec62:	f7ff f94b 	bl	801defc <mg_uecc_vli_sub>
 801ec66:	4603      	mov	r3, r0
 801ec68:	461a      	mov	r2, r3
 801ec6a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801ec6c:	1a9b      	subs	r3, r3, r2
 801ec6e:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* d2 */
  tmp[0] = product[12];
 801ec70:	683b      	ldr	r3, [r7, #0]
 801ec72:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801ec74:	60fb      	str	r3, [r7, #12]
  tmp[1] = product[13];
 801ec76:	683b      	ldr	r3, [r7, #0]
 801ec78:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801ec7a:	613b      	str	r3, [r7, #16]
  tmp[2] = product[14];
 801ec7c:	683b      	ldr	r3, [r7, #0]
 801ec7e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801ec80:	617b      	str	r3, [r7, #20]
  tmp[3] = product[15];
 801ec82:	683b      	ldr	r3, [r7, #0]
 801ec84:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801ec86:	61bb      	str	r3, [r7, #24]
  tmp[4] = tmp[5] = 0;
 801ec88:	2300      	movs	r3, #0
 801ec8a:	623b      	str	r3, [r7, #32]
 801ec8c:	6a3b      	ldr	r3, [r7, #32]
 801ec8e:	61fb      	str	r3, [r7, #28]
  tmp[6] = product[9];
 801ec90:	683b      	ldr	r3, [r7, #0]
 801ec92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801ec94:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp[7] = product[11];
 801ec96:	683b      	ldr	r3, [r7, #0]
 801ec98:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801ec9a:	62bb      	str	r3, [r7, #40]	@ 0x28
  carry -= (int) mg_uecc_vli_sub(result, result, tmp, num_words_secp256r1);
 801ec9c:	f107 020c 	add.w	r2, r7, #12
 801eca0:	2308      	movs	r3, #8
 801eca2:	6879      	ldr	r1, [r7, #4]
 801eca4:	6878      	ldr	r0, [r7, #4]
 801eca6:	f7ff f929 	bl	801defc <mg_uecc_vli_sub>
 801ecaa:	4603      	mov	r3, r0
 801ecac:	461a      	mov	r2, r3
 801ecae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801ecb0:	1a9b      	subs	r3, r3, r2
 801ecb2:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* d3 */
  tmp[0] = product[13];
 801ecb4:	683b      	ldr	r3, [r7, #0]
 801ecb6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801ecb8:	60fb      	str	r3, [r7, #12]
  tmp[1] = product[14];
 801ecba:	683b      	ldr	r3, [r7, #0]
 801ecbc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801ecbe:	613b      	str	r3, [r7, #16]
  tmp[2] = product[15];
 801ecc0:	683b      	ldr	r3, [r7, #0]
 801ecc2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801ecc4:	617b      	str	r3, [r7, #20]
  tmp[3] = product[8];
 801ecc6:	683b      	ldr	r3, [r7, #0]
 801ecc8:	6a1b      	ldr	r3, [r3, #32]
 801ecca:	61bb      	str	r3, [r7, #24]
  tmp[4] = product[9];
 801eccc:	683b      	ldr	r3, [r7, #0]
 801ecce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801ecd0:	61fb      	str	r3, [r7, #28]
  tmp[5] = product[10];
 801ecd2:	683b      	ldr	r3, [r7, #0]
 801ecd4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801ecd6:	623b      	str	r3, [r7, #32]
  tmp[6] = 0;
 801ecd8:	2300      	movs	r3, #0
 801ecda:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp[7] = product[12];
 801ecdc:	683b      	ldr	r3, [r7, #0]
 801ecde:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801ece0:	62bb      	str	r3, [r7, #40]	@ 0x28
  carry -= (int) mg_uecc_vli_sub(result, result, tmp, num_words_secp256r1);
 801ece2:	f107 020c 	add.w	r2, r7, #12
 801ece6:	2308      	movs	r3, #8
 801ece8:	6879      	ldr	r1, [r7, #4]
 801ecea:	6878      	ldr	r0, [r7, #4]
 801ecec:	f7ff f906 	bl	801defc <mg_uecc_vli_sub>
 801ecf0:	4603      	mov	r3, r0
 801ecf2:	461a      	mov	r2, r3
 801ecf4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801ecf6:	1a9b      	subs	r3, r3, r2
 801ecf8:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* d4 */
  tmp[0] = product[14];
 801ecfa:	683b      	ldr	r3, [r7, #0]
 801ecfc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801ecfe:	60fb      	str	r3, [r7, #12]
  tmp[1] = product[15];
 801ed00:	683b      	ldr	r3, [r7, #0]
 801ed02:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801ed04:	613b      	str	r3, [r7, #16]
  tmp[2] = 0;
 801ed06:	2300      	movs	r3, #0
 801ed08:	617b      	str	r3, [r7, #20]
  tmp[3] = product[9];
 801ed0a:	683b      	ldr	r3, [r7, #0]
 801ed0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801ed0e:	61bb      	str	r3, [r7, #24]
  tmp[4] = product[10];
 801ed10:	683b      	ldr	r3, [r7, #0]
 801ed12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801ed14:	61fb      	str	r3, [r7, #28]
  tmp[5] = product[11];
 801ed16:	683b      	ldr	r3, [r7, #0]
 801ed18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801ed1a:	623b      	str	r3, [r7, #32]
  tmp[6] = 0;
 801ed1c:	2300      	movs	r3, #0
 801ed1e:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp[7] = product[13];
 801ed20:	683b      	ldr	r3, [r7, #0]
 801ed22:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801ed24:	62bb      	str	r3, [r7, #40]	@ 0x28
  carry -= (int) mg_uecc_vli_sub(result, result, tmp, num_words_secp256r1);
 801ed26:	f107 020c 	add.w	r2, r7, #12
 801ed2a:	2308      	movs	r3, #8
 801ed2c:	6879      	ldr	r1, [r7, #4]
 801ed2e:	6878      	ldr	r0, [r7, #4]
 801ed30:	f7ff f8e4 	bl	801defc <mg_uecc_vli_sub>
 801ed34:	4603      	mov	r3, r0
 801ed36:	461a      	mov	r2, r3
 801ed38:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801ed3a:	1a9b      	subs	r3, r3, r2
 801ed3c:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (carry < 0) {
 801ed3e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801ed40:	2b00      	cmp	r3, #0
 801ed42:	da19      	bge.n	801ed78 <vli_mmod_fast_secp256r1+0x290>
    do {
      carry += (int) mg_uecc_vli_add(result, result, curve_secp256r1.p,
 801ed44:	2308      	movs	r3, #8
 801ed46:	4a14      	ldr	r2, [pc, #80]	@ (801ed98 <vli_mmod_fast_secp256r1+0x2b0>)
 801ed48:	6879      	ldr	r1, [r7, #4]
 801ed4a:	6878      	ldr	r0, [r7, #4]
 801ed4c:	f7ff f88c 	bl	801de68 <mg_uecc_vli_add>
 801ed50:	4603      	mov	r3, r0
 801ed52:	461a      	mov	r2, r3
 801ed54:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801ed56:	4413      	add	r3, r2
 801ed58:	62fb      	str	r3, [r7, #44]	@ 0x2c
                                     num_words_secp256r1);
    } while (carry < 0);
 801ed5a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801ed5c:	2b00      	cmp	r3, #0
 801ed5e:	dbf1      	blt.n	801ed44 <vli_mmod_fast_secp256r1+0x25c>
                                           num_words_secp256r1) != 1) {
      carry -= (int) mg_uecc_vli_sub(result, result, curve_secp256r1.p,
                                     num_words_secp256r1);
    }
  }
}
 801ed60:	e015      	b.n	801ed8e <vli_mmod_fast_secp256r1+0x2a6>
      carry -= (int) mg_uecc_vli_sub(result, result, curve_secp256r1.p,
 801ed62:	2308      	movs	r3, #8
 801ed64:	4a0c      	ldr	r2, [pc, #48]	@ (801ed98 <vli_mmod_fast_secp256r1+0x2b0>)
 801ed66:	6879      	ldr	r1, [r7, #4]
 801ed68:	6878      	ldr	r0, [r7, #4]
 801ed6a:	f7ff f8c7 	bl	801defc <mg_uecc_vli_sub>
 801ed6e:	4603      	mov	r3, r0
 801ed70:	461a      	mov	r2, r3
 801ed72:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801ed74:	1a9b      	subs	r3, r3, r2
 801ed76:	62fb      	str	r3, [r7, #44]	@ 0x2c
    while (carry || mg_uecc_vli_cmp_unsafe(curve_secp256r1.p, result,
 801ed78:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801ed7a:	2b00      	cmp	r3, #0
 801ed7c:	d1f1      	bne.n	801ed62 <vli_mmod_fast_secp256r1+0x27a>
 801ed7e:	2208      	movs	r2, #8
 801ed80:	6879      	ldr	r1, [r7, #4]
 801ed82:	4805      	ldr	r0, [pc, #20]	@ (801ed98 <vli_mmod_fast_secp256r1+0x2b0>)
 801ed84:	f7fe ffa7 	bl	801dcd6 <mg_uecc_vli_cmp_unsafe>
 801ed88:	4603      	mov	r3, r0
 801ed8a:	2b01      	cmp	r3, #1
 801ed8c:	d1e9      	bne.n	801ed62 <vli_mmod_fast_secp256r1+0x27a>
}
 801ed8e:	bf00      	nop
 801ed90:	3730      	adds	r7, #48	@ 0x30
 801ed92:	46bd      	mov	sp, r7
 801ed94:	bd80      	pop	{r7, pc}
 801ed96:	bf00      	nop
 801ed98:	080286e8 	.word	0x080286e8

0801ed9c <apply_z>:
coordinates. From http://eprint.iacr.org/2011/338.pdf
*/

/* Modify (x1, y1) => (x1 * z^2, y1 * z^3) */
static void apply_z(mg_uecc_word_t *X1, mg_uecc_word_t *Y1,
                    const mg_uecc_word_t *const Z, MG_UECC_Curve curve) {
 801ed9c:	b580      	push	{r7, lr}
 801ed9e:	b08c      	sub	sp, #48	@ 0x30
 801eda0:	af00      	add	r7, sp, #0
 801eda2:	60f8      	str	r0, [r7, #12]
 801eda4:	60b9      	str	r1, [r7, #8]
 801eda6:	607a      	str	r2, [r7, #4]
 801eda8:	603b      	str	r3, [r7, #0]
  mg_uecc_word_t t1[MG_UECC_MAX_WORDS];

  mg_uecc_vli_modSquare_fast(t1, Z, curve);    /* z^2 */
 801edaa:	f107 0310 	add.w	r3, r7, #16
 801edae:	683a      	ldr	r2, [r7, #0]
 801edb0:	6879      	ldr	r1, [r7, #4]
 801edb2:	4618      	mov	r0, r3
 801edb4:	f7ff fbad 	bl	801e512 <mg_uecc_vli_modSquare_fast>
  mg_uecc_vli_modMult_fast(X1, X1, t1, curve); /* x1 * z^2 */
 801edb8:	f107 0210 	add.w	r2, r7, #16
 801edbc:	683b      	ldr	r3, [r7, #0]
 801edbe:	68f9      	ldr	r1, [r7, #12]
 801edc0:	68f8      	ldr	r0, [r7, #12]
 801edc2:	f7ff fb8a 	bl	801e4da <mg_uecc_vli_modMult_fast>
  mg_uecc_vli_modMult_fast(t1, t1, Z, curve);  /* z^3 */
 801edc6:	f107 0110 	add.w	r1, r7, #16
 801edca:	f107 0010 	add.w	r0, r7, #16
 801edce:	683b      	ldr	r3, [r7, #0]
 801edd0:	687a      	ldr	r2, [r7, #4]
 801edd2:	f7ff fb82 	bl	801e4da <mg_uecc_vli_modMult_fast>
  mg_uecc_vli_modMult_fast(Y1, Y1, t1, curve); /* y1 * z^3 */
 801edd6:	f107 0210 	add.w	r2, r7, #16
 801edda:	683b      	ldr	r3, [r7, #0]
 801eddc:	68b9      	ldr	r1, [r7, #8]
 801edde:	68b8      	ldr	r0, [r7, #8]
 801ede0:	f7ff fb7b 	bl	801e4da <mg_uecc_vli_modMult_fast>
}
 801ede4:	bf00      	nop
 801ede6:	3730      	adds	r7, #48	@ 0x30
 801ede8:	46bd      	mov	sp, r7
 801edea:	bd80      	pop	{r7, pc}

0801edec <XYcZ_initial_double>:

/* P = (x1, y1) => 2P, (x2, y2) => P' */
static void XYcZ_initial_double(mg_uecc_word_t *X1, mg_uecc_word_t *Y1,
                                mg_uecc_word_t *X2, mg_uecc_word_t *Y2,
                                const mg_uecc_word_t *const initial_Z,
                                MG_UECC_Curve curve) {
 801edec:	b590      	push	{r4, r7, lr}
 801edee:	b08f      	sub	sp, #60	@ 0x3c
 801edf0:	af00      	add	r7, sp, #0
 801edf2:	60f8      	str	r0, [r7, #12]
 801edf4:	60b9      	str	r1, [r7, #8]
 801edf6:	607a      	str	r2, [r7, #4]
 801edf8:	603b      	str	r3, [r7, #0]
  mg_uecc_word_t z[MG_UECC_MAX_WORDS];
  wordcount_t num_words = curve->num_words;
 801edfa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801edfc:	781b      	ldrb	r3, [r3, #0]
 801edfe:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  if (initial_Z) {
 801ee02:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801ee04:	2b00      	cmp	r3, #0
 801ee06:	d008      	beq.n	801ee1a <XYcZ_initial_double+0x2e>
    mg_uecc_vli_set(z, initial_Z, num_words);
 801ee08:	f997 2037 	ldrsb.w	r2, [r7, #55]	@ 0x37
 801ee0c:	f107 0314 	add.w	r3, r7, #20
 801ee10:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 801ee12:	4618      	mov	r0, r3
 801ee14:	f7fe ff38 	bl	801dc88 <mg_uecc_vli_set>
 801ee18:	e009      	b.n	801ee2e <XYcZ_initial_double+0x42>
  } else {
    mg_uecc_vli_clear(z, num_words);
 801ee1a:	f997 2037 	ldrsb.w	r2, [r7, #55]	@ 0x37
 801ee1e:	f107 0314 	add.w	r3, r7, #20
 801ee22:	4611      	mov	r1, r2
 801ee24:	4618      	mov	r0, r3
 801ee26:	f7fe fe6b 	bl	801db00 <mg_uecc_vli_clear>
    z[0] = 1;
 801ee2a:	2301      	movs	r3, #1
 801ee2c:	617b      	str	r3, [r7, #20]
  }

  mg_uecc_vli_set(X2, X1, num_words);
 801ee2e:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 801ee32:	461a      	mov	r2, r3
 801ee34:	68f9      	ldr	r1, [r7, #12]
 801ee36:	6878      	ldr	r0, [r7, #4]
 801ee38:	f7fe ff26 	bl	801dc88 <mg_uecc_vli_set>
  mg_uecc_vli_set(Y2, Y1, num_words);
 801ee3c:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 801ee40:	461a      	mov	r2, r3
 801ee42:	68b9      	ldr	r1, [r7, #8]
 801ee44:	6838      	ldr	r0, [r7, #0]
 801ee46:	f7fe ff1f 	bl	801dc88 <mg_uecc_vli_set>

  apply_z(X1, Y1, z, curve);
 801ee4a:	f107 0214 	add.w	r2, r7, #20
 801ee4e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801ee50:	68b9      	ldr	r1, [r7, #8]
 801ee52:	68f8      	ldr	r0, [r7, #12]
 801ee54:	f7ff ffa2 	bl	801ed9c <apply_z>
  curve->double_jacobian(X1, Y1, z, curve);
 801ee58:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801ee5a:	f8d3 40a4 	ldr.w	r4, [r3, #164]	@ 0xa4
 801ee5e:	f107 0214 	add.w	r2, r7, #20
 801ee62:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801ee64:	68b9      	ldr	r1, [r7, #8]
 801ee66:	68f8      	ldr	r0, [r7, #12]
 801ee68:	47a0      	blx	r4
  apply_z(X2, Y2, z, curve);
 801ee6a:	f107 0214 	add.w	r2, r7, #20
 801ee6e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801ee70:	6839      	ldr	r1, [r7, #0]
 801ee72:	6878      	ldr	r0, [r7, #4]
 801ee74:	f7ff ff92 	bl	801ed9c <apply_z>
}
 801ee78:	bf00      	nop
 801ee7a:	373c      	adds	r7, #60	@ 0x3c
 801ee7c:	46bd      	mov	sp, r7
 801ee7e:	bd90      	pop	{r4, r7, pc}

0801ee80 <XYcZ_add>:
/* Input P = (x1, y1, Z), Q = (x2, y2, Z)
   Output P' = (x1', y1', Z3), P + Q = (x3, y3, Z3)
   or P => P', Q => P + Q
*/
static void XYcZ_add(mg_uecc_word_t *X1, mg_uecc_word_t *Y1, mg_uecc_word_t *X2,
                     mg_uecc_word_t *Y2, MG_UECC_Curve curve) {
 801ee80:	b580      	push	{r7, lr}
 801ee82:	b090      	sub	sp, #64	@ 0x40
 801ee84:	af02      	add	r7, sp, #8
 801ee86:	60f8      	str	r0, [r7, #12]
 801ee88:	60b9      	str	r1, [r7, #8]
 801ee8a:	607a      	str	r2, [r7, #4]
 801ee8c:	603b      	str	r3, [r7, #0]
  /* t1 = X1, t2 = Y1, t3 = X2, t4 = Y2 */
  mg_uecc_word_t t5[MG_UECC_MAX_WORDS] = {0};
 801ee8e:	f107 0314 	add.w	r3, r7, #20
 801ee92:	2220      	movs	r2, #32
 801ee94:	2100      	movs	r1, #0
 801ee96:	4618      	mov	r0, r3
 801ee98:	f005 faf8 	bl	802448c <memset>
  wordcount_t num_words = curve->num_words;
 801ee9c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801ee9e:	781b      	ldrb	r3, [r3, #0]
 801eea0:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37

  mg_uecc_vli_modSub(t5, X2, X1, curve->p, num_words); /* t5 = x2 - x1 */
 801eea4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801eea6:	1d1a      	adds	r2, r3, #4
 801eea8:	f107 0014 	add.w	r0, r7, #20
 801eeac:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 801eeb0:	9300      	str	r3, [sp, #0]
 801eeb2:	4613      	mov	r3, r2
 801eeb4:	68fa      	ldr	r2, [r7, #12]
 801eeb6:	6879      	ldr	r1, [r7, #4]
 801eeb8:	f7ff f99b 	bl	801e1f2 <mg_uecc_vli_modSub>
  mg_uecc_vli_modSquare_fast(t5, t5, curve);   /* t5 = (x2 - x1)^2 = A */
 801eebc:	f107 0114 	add.w	r1, r7, #20
 801eec0:	f107 0314 	add.w	r3, r7, #20
 801eec4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 801eec6:	4618      	mov	r0, r3
 801eec8:	f7ff fb23 	bl	801e512 <mg_uecc_vli_modSquare_fast>
  mg_uecc_vli_modMult_fast(X1, X1, t5, curve); /* t1 = x1*A = B */
 801eecc:	f107 0214 	add.w	r2, r7, #20
 801eed0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801eed2:	68f9      	ldr	r1, [r7, #12]
 801eed4:	68f8      	ldr	r0, [r7, #12]
 801eed6:	f7ff fb00 	bl	801e4da <mg_uecc_vli_modMult_fast>
  mg_uecc_vli_modMult_fast(X2, X2, t5, curve); /* t3 = x2*A = C */
 801eeda:	f107 0214 	add.w	r2, r7, #20
 801eede:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801eee0:	6879      	ldr	r1, [r7, #4]
 801eee2:	6878      	ldr	r0, [r7, #4]
 801eee4:	f7ff faf9 	bl	801e4da <mg_uecc_vli_modMult_fast>
  mg_uecc_vli_modSub(Y2, Y2, Y1, curve->p, num_words); /* t4 = y2 - y1 */
 801eee8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801eeea:	1d1a      	adds	r2, r3, #4
 801eeec:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 801eef0:	9300      	str	r3, [sp, #0]
 801eef2:	4613      	mov	r3, r2
 801eef4:	68ba      	ldr	r2, [r7, #8]
 801eef6:	6839      	ldr	r1, [r7, #0]
 801eef8:	6838      	ldr	r0, [r7, #0]
 801eefa:	f7ff f97a 	bl	801e1f2 <mg_uecc_vli_modSub>
  mg_uecc_vli_modSquare_fast(t5, Y2, curve); /* t5 = (y2 - y1)^2 = D */
 801eefe:	f107 0314 	add.w	r3, r7, #20
 801ef02:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 801ef04:	6839      	ldr	r1, [r7, #0]
 801ef06:	4618      	mov	r0, r3
 801ef08:	f7ff fb03 	bl	801e512 <mg_uecc_vli_modSquare_fast>

  mg_uecc_vli_modSub(t5, t5, X1, curve->p, num_words); /* t5 = D - B */
 801ef0c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801ef0e:	1d1a      	adds	r2, r3, #4
 801ef10:	f107 0114 	add.w	r1, r7, #20
 801ef14:	f107 0014 	add.w	r0, r7, #20
 801ef18:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 801ef1c:	9300      	str	r3, [sp, #0]
 801ef1e:	4613      	mov	r3, r2
 801ef20:	68fa      	ldr	r2, [r7, #12]
 801ef22:	f7ff f966 	bl	801e1f2 <mg_uecc_vli_modSub>
  mg_uecc_vli_modSub(t5, t5, X2, curve->p, num_words); /* t5 = D - B - C = x3 */
 801ef26:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801ef28:	1d1a      	adds	r2, r3, #4
 801ef2a:	f107 0114 	add.w	r1, r7, #20
 801ef2e:	f107 0014 	add.w	r0, r7, #20
 801ef32:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 801ef36:	9300      	str	r3, [sp, #0]
 801ef38:	4613      	mov	r3, r2
 801ef3a:	687a      	ldr	r2, [r7, #4]
 801ef3c:	f7ff f959 	bl	801e1f2 <mg_uecc_vli_modSub>
  mg_uecc_vli_modSub(X2, X2, X1, curve->p, num_words); /* t3 = C - B */
 801ef40:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801ef42:	1d1a      	adds	r2, r3, #4
 801ef44:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 801ef48:	9300      	str	r3, [sp, #0]
 801ef4a:	4613      	mov	r3, r2
 801ef4c:	68fa      	ldr	r2, [r7, #12]
 801ef4e:	6879      	ldr	r1, [r7, #4]
 801ef50:	6878      	ldr	r0, [r7, #4]
 801ef52:	f7ff f94e 	bl	801e1f2 <mg_uecc_vli_modSub>
  mg_uecc_vli_modMult_fast(Y1, Y1, X2, curve);         /* t2 = y1*(C - B) */
 801ef56:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801ef58:	687a      	ldr	r2, [r7, #4]
 801ef5a:	68b9      	ldr	r1, [r7, #8]
 801ef5c:	68b8      	ldr	r0, [r7, #8]
 801ef5e:	f7ff fabc 	bl	801e4da <mg_uecc_vli_modMult_fast>
  mg_uecc_vli_modSub(X2, X1, t5, curve->p, num_words); /* t3 = B - x3 */
 801ef62:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801ef64:	1d19      	adds	r1, r3, #4
 801ef66:	f107 0214 	add.w	r2, r7, #20
 801ef6a:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 801ef6e:	9300      	str	r3, [sp, #0]
 801ef70:	460b      	mov	r3, r1
 801ef72:	68f9      	ldr	r1, [r7, #12]
 801ef74:	6878      	ldr	r0, [r7, #4]
 801ef76:	f7ff f93c 	bl	801e1f2 <mg_uecc_vli_modSub>
  mg_uecc_vli_modMult_fast(Y2, Y2, X2, curve); /* t4 = (y2 - y1)*(B - x3) */
 801ef7a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801ef7c:	687a      	ldr	r2, [r7, #4]
 801ef7e:	6839      	ldr	r1, [r7, #0]
 801ef80:	6838      	ldr	r0, [r7, #0]
 801ef82:	f7ff faaa 	bl	801e4da <mg_uecc_vli_modMult_fast>
  mg_uecc_vli_modSub(Y2, Y2, Y1, curve->p, num_words); /* t4 = y3 */
 801ef86:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801ef88:	1d1a      	adds	r2, r3, #4
 801ef8a:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 801ef8e:	9300      	str	r3, [sp, #0]
 801ef90:	4613      	mov	r3, r2
 801ef92:	68ba      	ldr	r2, [r7, #8]
 801ef94:	6839      	ldr	r1, [r7, #0]
 801ef96:	6838      	ldr	r0, [r7, #0]
 801ef98:	f7ff f92b 	bl	801e1f2 <mg_uecc_vli_modSub>

  mg_uecc_vli_set(X2, t5, num_words);
 801ef9c:	f997 2037 	ldrsb.w	r2, [r7, #55]	@ 0x37
 801efa0:	f107 0314 	add.w	r3, r7, #20
 801efa4:	4619      	mov	r1, r3
 801efa6:	6878      	ldr	r0, [r7, #4]
 801efa8:	f7fe fe6e 	bl	801dc88 <mg_uecc_vli_set>
}
 801efac:	bf00      	nop
 801efae:	3738      	adds	r7, #56	@ 0x38
 801efb0:	46bd      	mov	sp, r7
 801efb2:	bd80      	pop	{r7, pc}

0801efb4 <XYcZ_addC>:
   Output P + Q = (x3, y3, Z3), P - Q = (x3', y3', Z3)
   or P => P - Q, Q => P + Q
*/
static void XYcZ_addC(mg_uecc_word_t *X1, mg_uecc_word_t *Y1,
                      mg_uecc_word_t *X2, mg_uecc_word_t *Y2,
                      MG_UECC_Curve curve) {
 801efb4:	b590      	push	{r4, r7, lr}
 801efb6:	b0a1      	sub	sp, #132	@ 0x84
 801efb8:	af02      	add	r7, sp, #8
 801efba:	60f8      	str	r0, [r7, #12]
 801efbc:	60b9      	str	r1, [r7, #8]
 801efbe:	607a      	str	r2, [r7, #4]
 801efc0:	603b      	str	r3, [r7, #0]
  /* t1 = X1, t2 = Y1, t3 = X2, t4 = Y2 */
  mg_uecc_word_t t5[MG_UECC_MAX_WORDS] = {0};
 801efc2:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 801efc6:	2220      	movs	r2, #32
 801efc8:	2100      	movs	r1, #0
 801efca:	4618      	mov	r0, r3
 801efcc:	f005 fa5e 	bl	802448c <memset>
  mg_uecc_word_t t6[MG_UECC_MAX_WORDS];
  mg_uecc_word_t t7[MG_UECC_MAX_WORDS];
  wordcount_t num_words = curve->num_words;
 801efd0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 801efd4:	781b      	ldrb	r3, [r3, #0]
 801efd6:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77

  mg_uecc_vli_modSub(t5, X2, X1, curve->p, num_words); /* t5 = x2 - x1 */
 801efda:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 801efde:	1d1a      	adds	r2, r3, #4
 801efe0:	f107 0054 	add.w	r0, r7, #84	@ 0x54
 801efe4:	f997 3077 	ldrsb.w	r3, [r7, #119]	@ 0x77
 801efe8:	9300      	str	r3, [sp, #0]
 801efea:	4613      	mov	r3, r2
 801efec:	68fa      	ldr	r2, [r7, #12]
 801efee:	6879      	ldr	r1, [r7, #4]
 801eff0:	f7ff f8ff 	bl	801e1f2 <mg_uecc_vli_modSub>
  mg_uecc_vli_modSquare_fast(t5, t5, curve);   /* t5 = (x2 - x1)^2 = A */
 801eff4:	f107 0154 	add.w	r1, r7, #84	@ 0x54
 801eff8:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 801effc:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 801f000:	4618      	mov	r0, r3
 801f002:	f7ff fa86 	bl	801e512 <mg_uecc_vli_modSquare_fast>
  mg_uecc_vli_modMult_fast(X1, X1, t5, curve); /* t1 = x1*A = B */
 801f006:	f107 0254 	add.w	r2, r7, #84	@ 0x54
 801f00a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 801f00e:	68f9      	ldr	r1, [r7, #12]
 801f010:	68f8      	ldr	r0, [r7, #12]
 801f012:	f7ff fa62 	bl	801e4da <mg_uecc_vli_modMult_fast>
  mg_uecc_vli_modMult_fast(X2, X2, t5, curve); /* t3 = x2*A = C */
 801f016:	f107 0254 	add.w	r2, r7, #84	@ 0x54
 801f01a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 801f01e:	6879      	ldr	r1, [r7, #4]
 801f020:	6878      	ldr	r0, [r7, #4]
 801f022:	f7ff fa5a 	bl	801e4da <mg_uecc_vli_modMult_fast>
  mg_uecc_vli_modAdd(t5, Y2, Y1, curve->p, num_words); /* t5 = y2 + y1 */
 801f026:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 801f02a:	1d1a      	adds	r2, r3, #4
 801f02c:	f107 0054 	add.w	r0, r7, #84	@ 0x54
 801f030:	f997 3077 	ldrsb.w	r3, [r7, #119]	@ 0x77
 801f034:	9300      	str	r3, [sp, #0]
 801f036:	4613      	mov	r3, r2
 801f038:	68ba      	ldr	r2, [r7, #8]
 801f03a:	6839      	ldr	r1, [r7, #0]
 801f03c:	f7ff f8b2 	bl	801e1a4 <mg_uecc_vli_modAdd>
  mg_uecc_vli_modSub(Y2, Y2, Y1, curve->p, num_words); /* t4 = y2 - y1 */
 801f040:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 801f044:	1d1a      	adds	r2, r3, #4
 801f046:	f997 3077 	ldrsb.w	r3, [r7, #119]	@ 0x77
 801f04a:	9300      	str	r3, [sp, #0]
 801f04c:	4613      	mov	r3, r2
 801f04e:	68ba      	ldr	r2, [r7, #8]
 801f050:	6839      	ldr	r1, [r7, #0]
 801f052:	6838      	ldr	r0, [r7, #0]
 801f054:	f7ff f8cd 	bl	801e1f2 <mg_uecc_vli_modSub>

  mg_uecc_vli_modSub(t6, X2, X1, curve->p, num_words); /* t6 = C - B */
 801f058:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 801f05c:	1d1a      	adds	r2, r3, #4
 801f05e:	f107 0034 	add.w	r0, r7, #52	@ 0x34
 801f062:	f997 3077 	ldrsb.w	r3, [r7, #119]	@ 0x77
 801f066:	9300      	str	r3, [sp, #0]
 801f068:	4613      	mov	r3, r2
 801f06a:	68fa      	ldr	r2, [r7, #12]
 801f06c:	6879      	ldr	r1, [r7, #4]
 801f06e:	f7ff f8c0 	bl	801e1f2 <mg_uecc_vli_modSub>
  mg_uecc_vli_modMult_fast(Y1, Y1, t6, curve); /* t2 = y1 * (C - B) = E */
 801f072:	f107 0234 	add.w	r2, r7, #52	@ 0x34
 801f076:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 801f07a:	68b9      	ldr	r1, [r7, #8]
 801f07c:	68b8      	ldr	r0, [r7, #8]
 801f07e:	f7ff fa2c 	bl	801e4da <mg_uecc_vli_modMult_fast>
  mg_uecc_vli_modAdd(t6, X1, X2, curve->p, num_words); /* t6 = B + C */
 801f082:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 801f086:	1d1a      	adds	r2, r3, #4
 801f088:	f107 0034 	add.w	r0, r7, #52	@ 0x34
 801f08c:	f997 3077 	ldrsb.w	r3, [r7, #119]	@ 0x77
 801f090:	9300      	str	r3, [sp, #0]
 801f092:	4613      	mov	r3, r2
 801f094:	687a      	ldr	r2, [r7, #4]
 801f096:	68f9      	ldr	r1, [r7, #12]
 801f098:	f7ff f884 	bl	801e1a4 <mg_uecc_vli_modAdd>
  mg_uecc_vli_modSquare_fast(X2, Y2, curve); /* t3 = (y2 - y1)^2 = D */
 801f09c:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 801f0a0:	6839      	ldr	r1, [r7, #0]
 801f0a2:	6878      	ldr	r0, [r7, #4]
 801f0a4:	f7ff fa35 	bl	801e512 <mg_uecc_vli_modSquare_fast>
  mg_uecc_vli_modSub(X2, X2, t6, curve->p,
 801f0a8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 801f0ac:	1d19      	adds	r1, r3, #4
 801f0ae:	f107 0234 	add.w	r2, r7, #52	@ 0x34
 801f0b2:	f997 3077 	ldrsb.w	r3, [r7, #119]	@ 0x77
 801f0b6:	9300      	str	r3, [sp, #0]
 801f0b8:	460b      	mov	r3, r1
 801f0ba:	6879      	ldr	r1, [r7, #4]
 801f0bc:	6878      	ldr	r0, [r7, #4]
 801f0be:	f7ff f898 	bl	801e1f2 <mg_uecc_vli_modSub>
                     num_words); /* t3 = D - (B + C) = x3 */

  mg_uecc_vli_modSub(t7, X1, X2, curve->p, num_words); /* t7 = B - x3 */
 801f0c2:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 801f0c6:	1d1a      	adds	r2, r3, #4
 801f0c8:	f107 0014 	add.w	r0, r7, #20
 801f0cc:	f997 3077 	ldrsb.w	r3, [r7, #119]	@ 0x77
 801f0d0:	9300      	str	r3, [sp, #0]
 801f0d2:	4613      	mov	r3, r2
 801f0d4:	687a      	ldr	r2, [r7, #4]
 801f0d6:	68f9      	ldr	r1, [r7, #12]
 801f0d8:	f7ff f88b 	bl	801e1f2 <mg_uecc_vli_modSub>
  mg_uecc_vli_modMult_fast(Y2, Y2, t7, curve); /* t4 = (y2 - y1)*(B - x3) */
 801f0dc:	f107 0214 	add.w	r2, r7, #20
 801f0e0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 801f0e4:	6839      	ldr	r1, [r7, #0]
 801f0e6:	6838      	ldr	r0, [r7, #0]
 801f0e8:	f7ff f9f7 	bl	801e4da <mg_uecc_vli_modMult_fast>
  mg_uecc_vli_modSub(Y2, Y2, Y1, curve->p,
 801f0ec:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 801f0f0:	1d1a      	adds	r2, r3, #4
 801f0f2:	f997 3077 	ldrsb.w	r3, [r7, #119]	@ 0x77
 801f0f6:	9300      	str	r3, [sp, #0]
 801f0f8:	4613      	mov	r3, r2
 801f0fa:	68ba      	ldr	r2, [r7, #8]
 801f0fc:	6839      	ldr	r1, [r7, #0]
 801f0fe:	6838      	ldr	r0, [r7, #0]
 801f100:	f7ff f877 	bl	801e1f2 <mg_uecc_vli_modSub>
                     num_words); /* t4 = (y2 - y1)*(B - x3) - E = y3 */

  mg_uecc_vli_modSquare_fast(t7, t5, curve); /* t7 = (y2 + y1)^2 = F */
 801f104:	f107 0154 	add.w	r1, r7, #84	@ 0x54
 801f108:	f107 0314 	add.w	r3, r7, #20
 801f10c:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 801f110:	4618      	mov	r0, r3
 801f112:	f7ff f9fe 	bl	801e512 <mg_uecc_vli_modSquare_fast>
  mg_uecc_vli_modSub(t7, t7, t6, curve->p,
 801f116:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 801f11a:	1d1c      	adds	r4, r3, #4
 801f11c:	f107 0234 	add.w	r2, r7, #52	@ 0x34
 801f120:	f107 0114 	add.w	r1, r7, #20
 801f124:	f107 0014 	add.w	r0, r7, #20
 801f128:	f997 3077 	ldrsb.w	r3, [r7, #119]	@ 0x77
 801f12c:	9300      	str	r3, [sp, #0]
 801f12e:	4623      	mov	r3, r4
 801f130:	f7ff f85f 	bl	801e1f2 <mg_uecc_vli_modSub>
                     num_words); /* t7 = F - (B + C) = x3' */
  mg_uecc_vli_modSub(t6, t7, X1, curve->p, num_words); /* t6 = x3' - B */
 801f134:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 801f138:	1d1a      	adds	r2, r3, #4
 801f13a:	f107 0114 	add.w	r1, r7, #20
 801f13e:	f107 0034 	add.w	r0, r7, #52	@ 0x34
 801f142:	f997 3077 	ldrsb.w	r3, [r7, #119]	@ 0x77
 801f146:	9300      	str	r3, [sp, #0]
 801f148:	4613      	mov	r3, r2
 801f14a:	68fa      	ldr	r2, [r7, #12]
 801f14c:	f7ff f851 	bl	801e1f2 <mg_uecc_vli_modSub>
  mg_uecc_vli_modMult_fast(t6, t6, t5, curve); /* t6 = (y2+y1)*(x3' - B) */
 801f150:	f107 0254 	add.w	r2, r7, #84	@ 0x54
 801f154:	f107 0134 	add.w	r1, r7, #52	@ 0x34
 801f158:	f107 0034 	add.w	r0, r7, #52	@ 0x34
 801f15c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 801f160:	f7ff f9bb 	bl	801e4da <mg_uecc_vli_modMult_fast>
  mg_uecc_vli_modSub(Y1, t6, Y1, curve->p,
 801f164:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 801f168:	1d1a      	adds	r2, r3, #4
 801f16a:	f107 0134 	add.w	r1, r7, #52	@ 0x34
 801f16e:	f997 3077 	ldrsb.w	r3, [r7, #119]	@ 0x77
 801f172:	9300      	str	r3, [sp, #0]
 801f174:	4613      	mov	r3, r2
 801f176:	68ba      	ldr	r2, [r7, #8]
 801f178:	68b8      	ldr	r0, [r7, #8]
 801f17a:	f7ff f83a 	bl	801e1f2 <mg_uecc_vli_modSub>
                     num_words); /* t2 = (y2+y1)*(x3' - B) - E = y3' */

  mg_uecc_vli_set(X1, t7, num_words);
 801f17e:	f997 2077 	ldrsb.w	r2, [r7, #119]	@ 0x77
 801f182:	f107 0314 	add.w	r3, r7, #20
 801f186:	4619      	mov	r1, r3
 801f188:	68f8      	ldr	r0, [r7, #12]
 801f18a:	f7fe fd7d 	bl	801dc88 <mg_uecc_vli_set>
}
 801f18e:	bf00      	nop
 801f190:	377c      	adds	r7, #124	@ 0x7c
 801f192:	46bd      	mov	sp, r7
 801f194:	bd90      	pop	{r4, r7, pc}

0801f196 <EccPoint_mult>:

/* result may overlap point. */
static void EccPoint_mult(mg_uecc_word_t *result, const mg_uecc_word_t *point,
                          const mg_uecc_word_t *scalar,
                          const mg_uecc_word_t *initial_Z, bitcount_t num_bits,
                          MG_UECC_Curve curve) {
 801f196:	b590      	push	{r4, r7, lr}
 801f198:	b0b1      	sub	sp, #196	@ 0xc4
 801f19a:	af02      	add	r7, sp, #8
 801f19c:	60f8      	str	r0, [r7, #12]
 801f19e:	60b9      	str	r1, [r7, #8]
 801f1a0:	607a      	str	r2, [r7, #4]
 801f1a2:	603b      	str	r3, [r7, #0]
  mg_uecc_word_t Rx[2][MG_UECC_MAX_WORDS];
  mg_uecc_word_t Ry[2][MG_UECC_MAX_WORDS];
  mg_uecc_word_t z[MG_UECC_MAX_WORDS];
  bitcount_t i;
  mg_uecc_word_t nb;
  wordcount_t num_words = curve->num_words;
 801f1a4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 801f1a8:	781b      	ldrb	r3, [r3, #0]
 801f1aa:	f887 30b5 	strb.w	r3, [r7, #181]	@ 0xb5

  mg_uecc_vli_set(Rx[1], point, num_words);
 801f1ae:	f997 20b5 	ldrsb.w	r2, [r7, #181]	@ 0xb5
 801f1b2:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 801f1b6:	3320      	adds	r3, #32
 801f1b8:	68b9      	ldr	r1, [r7, #8]
 801f1ba:	4618      	mov	r0, r3
 801f1bc:	f7fe fd64 	bl	801dc88 <mg_uecc_vli_set>
  mg_uecc_vli_set(Ry[1], point + num_words, num_words);
 801f1c0:	f997 30b5 	ldrsb.w	r3, [r7, #181]	@ 0xb5
 801f1c4:	009b      	lsls	r3, r3, #2
 801f1c6:	68ba      	ldr	r2, [r7, #8]
 801f1c8:	18d1      	adds	r1, r2, r3
 801f1ca:	f997 20b5 	ldrsb.w	r2, [r7, #181]	@ 0xb5
 801f1ce:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 801f1d2:	3320      	adds	r3, #32
 801f1d4:	4618      	mov	r0, r3
 801f1d6:	f7fe fd57 	bl	801dc88 <mg_uecc_vli_set>

  XYcZ_initial_double(Rx[1], Ry[1], Rx[0], Ry[0], initial_Z, curve);
 801f1da:	f107 0430 	add.w	r4, r7, #48	@ 0x30
 801f1de:	f107 0270 	add.w	r2, r7, #112	@ 0x70
 801f1e2:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 801f1e6:	f103 0120 	add.w	r1, r3, #32
 801f1ea:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 801f1ee:	f103 0020 	add.w	r0, r3, #32
 801f1f2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 801f1f6:	9301      	str	r3, [sp, #4]
 801f1f8:	683b      	ldr	r3, [r7, #0]
 801f1fa:	9300      	str	r3, [sp, #0]
 801f1fc:	4623      	mov	r3, r4
 801f1fe:	f7ff fdf5 	bl	801edec <XYcZ_initial_double>

  for (i = num_bits - 2; i > 0; --i) {
 801f202:	f8b7 30c8 	ldrh.w	r3, [r7, #200]	@ 0xc8
 801f206:	3b02      	subs	r3, #2
 801f208:	b29b      	uxth	r3, r3
 801f20a:	f8a7 30b6 	strh.w	r3, [r7, #182]	@ 0xb6
 801f20e:	e059      	b.n	801f2c4 <EccPoint_mult+0x12e>
    nb = !mg_uecc_vli_testBit(scalar, i);
 801f210:	f9b7 30b6 	ldrsh.w	r3, [r7, #182]	@ 0xb6
 801f214:	4619      	mov	r1, r3
 801f216:	6878      	ldr	r0, [r7, #4]
 801f218:	f7fe fcbd 	bl	801db96 <mg_uecc_vli_testBit>
 801f21c:	4603      	mov	r3, r0
 801f21e:	2b00      	cmp	r3, #0
 801f220:	bf0c      	ite	eq
 801f222:	2301      	moveq	r3, #1
 801f224:	2300      	movne	r3, #0
 801f226:	b2db      	uxtb	r3, r3
 801f228:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    XYcZ_addC(Rx[1 - nb], Ry[1 - nb], Rx[nb], Ry[nb], curve);
 801f22c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 801f230:	f1c3 0301 	rsb	r3, r3, #1
 801f234:	f107 0270 	add.w	r2, r7, #112	@ 0x70
 801f238:	015b      	lsls	r3, r3, #5
 801f23a:	18d0      	adds	r0, r2, r3
 801f23c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 801f240:	f1c3 0301 	rsb	r3, r3, #1
 801f244:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 801f248:	015b      	lsls	r3, r3, #5
 801f24a:	18d1      	adds	r1, r2, r3
 801f24c:	f107 0270 	add.w	r2, r7, #112	@ 0x70
 801f250:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 801f254:	015b      	lsls	r3, r3, #5
 801f256:	18d4      	adds	r4, r2, r3
 801f258:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 801f25c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 801f260:	015b      	lsls	r3, r3, #5
 801f262:	441a      	add	r2, r3
 801f264:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 801f268:	9300      	str	r3, [sp, #0]
 801f26a:	4613      	mov	r3, r2
 801f26c:	4622      	mov	r2, r4
 801f26e:	f7ff fea1 	bl	801efb4 <XYcZ_addC>
    XYcZ_add(Rx[nb], Ry[nb], Rx[1 - nb], Ry[1 - nb], curve);
 801f272:	f107 0270 	add.w	r2, r7, #112	@ 0x70
 801f276:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 801f27a:	015b      	lsls	r3, r3, #5
 801f27c:	18d0      	adds	r0, r2, r3
 801f27e:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 801f282:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 801f286:	015b      	lsls	r3, r3, #5
 801f288:	18d1      	adds	r1, r2, r3
 801f28a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 801f28e:	f1c3 0301 	rsb	r3, r3, #1
 801f292:	f107 0270 	add.w	r2, r7, #112	@ 0x70
 801f296:	015b      	lsls	r3, r3, #5
 801f298:	18d4      	adds	r4, r2, r3
 801f29a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 801f29e:	f1c3 0301 	rsb	r3, r3, #1
 801f2a2:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 801f2a6:	015b      	lsls	r3, r3, #5
 801f2a8:	441a      	add	r2, r3
 801f2aa:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 801f2ae:	9300      	str	r3, [sp, #0]
 801f2b0:	4613      	mov	r3, r2
 801f2b2:	4622      	mov	r2, r4
 801f2b4:	f7ff fde4 	bl	801ee80 <XYcZ_add>
  for (i = num_bits - 2; i > 0; --i) {
 801f2b8:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	@ 0xb6
 801f2bc:	3b01      	subs	r3, #1
 801f2be:	b29b      	uxth	r3, r3
 801f2c0:	f8a7 30b6 	strh.w	r3, [r7, #182]	@ 0xb6
 801f2c4:	f9b7 30b6 	ldrsh.w	r3, [r7, #182]	@ 0xb6
 801f2c8:	2b00      	cmp	r3, #0
 801f2ca:	dca1      	bgt.n	801f210 <EccPoint_mult+0x7a>
  }

  nb = !mg_uecc_vli_testBit(scalar, 0);
 801f2cc:	2100      	movs	r1, #0
 801f2ce:	6878      	ldr	r0, [r7, #4]
 801f2d0:	f7fe fc61 	bl	801db96 <mg_uecc_vli_testBit>
 801f2d4:	4603      	mov	r3, r0
 801f2d6:	2b00      	cmp	r3, #0
 801f2d8:	bf0c      	ite	eq
 801f2da:	2301      	moveq	r3, #1
 801f2dc:	2300      	movne	r3, #0
 801f2de:	b2db      	uxtb	r3, r3
 801f2e0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  XYcZ_addC(Rx[1 - nb], Ry[1 - nb], Rx[nb], Ry[nb], curve);
 801f2e4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 801f2e8:	f1c3 0301 	rsb	r3, r3, #1
 801f2ec:	f107 0270 	add.w	r2, r7, #112	@ 0x70
 801f2f0:	015b      	lsls	r3, r3, #5
 801f2f2:	18d0      	adds	r0, r2, r3
 801f2f4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 801f2f8:	f1c3 0301 	rsb	r3, r3, #1
 801f2fc:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 801f300:	015b      	lsls	r3, r3, #5
 801f302:	18d1      	adds	r1, r2, r3
 801f304:	f107 0270 	add.w	r2, r7, #112	@ 0x70
 801f308:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 801f30c:	015b      	lsls	r3, r3, #5
 801f30e:	18d4      	adds	r4, r2, r3
 801f310:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 801f314:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 801f318:	015b      	lsls	r3, r3, #5
 801f31a:	441a      	add	r2, r3
 801f31c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 801f320:	9300      	str	r3, [sp, #0]
 801f322:	4613      	mov	r3, r2
 801f324:	4622      	mov	r2, r4
 801f326:	f7ff fe45 	bl	801efb4 <XYcZ_addC>

  /* Find final 1/Z value. */
  mg_uecc_vli_modSub(z, Rx[1], Rx[0], curve->p, num_words); /* X1 - X0 */
 801f32a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 801f32e:	1d1c      	adds	r4, r3, #4
 801f330:	f107 0270 	add.w	r2, r7, #112	@ 0x70
 801f334:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 801f338:	f103 0120 	add.w	r1, r3, #32
 801f33c:	f107 0010 	add.w	r0, r7, #16
 801f340:	f997 30b5 	ldrsb.w	r3, [r7, #181]	@ 0xb5
 801f344:	9300      	str	r3, [sp, #0]
 801f346:	4623      	mov	r3, r4
 801f348:	f7fe ff53 	bl	801e1f2 <mg_uecc_vli_modSub>
  mg_uecc_vli_modMult_fast(z, z, Ry[1 - nb], curve);        /* Yb * (X1 - X0) */
 801f34c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 801f350:	f1c3 0301 	rsb	r3, r3, #1
 801f354:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 801f358:	015b      	lsls	r3, r3, #5
 801f35a:	441a      	add	r2, r3
 801f35c:	f107 0110 	add.w	r1, r7, #16
 801f360:	f107 0010 	add.w	r0, r7, #16
 801f364:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 801f368:	f7ff f8b7 	bl	801e4da <mg_uecc_vli_modMult_fast>
  mg_uecc_vli_modMult_fast(z, z, point, curve);  /* xP * Yb * (X1 - X0) */
 801f36c:	f107 0110 	add.w	r1, r7, #16
 801f370:	f107 0010 	add.w	r0, r7, #16
 801f374:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 801f378:	68ba      	ldr	r2, [r7, #8]
 801f37a:	f7ff f8ae 	bl	801e4da <mg_uecc_vli_modMult_fast>
  mg_uecc_vli_modInv(z, z, curve->p, num_words); /* 1 / (xP * Yb * (X1 - X0)) */
 801f37e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 801f382:	1d1a      	adds	r2, r3, #4
 801f384:	f997 30b5 	ldrsb.w	r3, [r7, #181]	@ 0xb5
 801f388:	f107 0110 	add.w	r1, r7, #16
 801f38c:	f107 0010 	add.w	r0, r7, #16
 801f390:	f7ff f907 	bl	801e5a2 <mg_uecc_vli_modInv>
  /* yP / (xP * Yb * (X1 - X0)) */
  mg_uecc_vli_modMult_fast(z, z, point + num_words, curve);
 801f394:	f997 30b5 	ldrsb.w	r3, [r7, #181]	@ 0xb5
 801f398:	009b      	lsls	r3, r3, #2
 801f39a:	68ba      	ldr	r2, [r7, #8]
 801f39c:	441a      	add	r2, r3
 801f39e:	f107 0110 	add.w	r1, r7, #16
 801f3a2:	f107 0010 	add.w	r0, r7, #16
 801f3a6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 801f3aa:	f7ff f896 	bl	801e4da <mg_uecc_vli_modMult_fast>
  mg_uecc_vli_modMult_fast(z, z, Rx[1 - nb],
 801f3ae:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 801f3b2:	f1c3 0301 	rsb	r3, r3, #1
 801f3b6:	f107 0270 	add.w	r2, r7, #112	@ 0x70
 801f3ba:	015b      	lsls	r3, r3, #5
 801f3bc:	441a      	add	r2, r3
 801f3be:	f107 0110 	add.w	r1, r7, #16
 801f3c2:	f107 0010 	add.w	r0, r7, #16
 801f3c6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 801f3ca:	f7ff f886 	bl	801e4da <mg_uecc_vli_modMult_fast>
                           curve); /* Xb * yP / (xP * Yb * (X1 - X0)) */
  /* End 1/Z calculation */

  XYcZ_add(Rx[nb], Ry[nb], Rx[1 - nb], Ry[1 - nb], curve);
 801f3ce:	f107 0270 	add.w	r2, r7, #112	@ 0x70
 801f3d2:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 801f3d6:	015b      	lsls	r3, r3, #5
 801f3d8:	18d0      	adds	r0, r2, r3
 801f3da:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 801f3de:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 801f3e2:	015b      	lsls	r3, r3, #5
 801f3e4:	18d1      	adds	r1, r2, r3
 801f3e6:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 801f3ea:	f1c3 0301 	rsb	r3, r3, #1
 801f3ee:	f107 0270 	add.w	r2, r7, #112	@ 0x70
 801f3f2:	015b      	lsls	r3, r3, #5
 801f3f4:	18d4      	adds	r4, r2, r3
 801f3f6:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 801f3fa:	f1c3 0301 	rsb	r3, r3, #1
 801f3fe:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 801f402:	015b      	lsls	r3, r3, #5
 801f404:	441a      	add	r2, r3
 801f406:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 801f40a:	9300      	str	r3, [sp, #0]
 801f40c:	4613      	mov	r3, r2
 801f40e:	4622      	mov	r2, r4
 801f410:	f7ff fd36 	bl	801ee80 <XYcZ_add>
  apply_z(Rx[0], Ry[0], z, curve);
 801f414:	f107 0210 	add.w	r2, r7, #16
 801f418:	f107 0130 	add.w	r1, r7, #48	@ 0x30
 801f41c:	f107 0070 	add.w	r0, r7, #112	@ 0x70
 801f420:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 801f424:	f7ff fcba 	bl	801ed9c <apply_z>

  mg_uecc_vli_set(result, Rx[0], num_words);
 801f428:	f997 20b5 	ldrsb.w	r2, [r7, #181]	@ 0xb5
 801f42c:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 801f430:	4619      	mov	r1, r3
 801f432:	68f8      	ldr	r0, [r7, #12]
 801f434:	f7fe fc28 	bl	801dc88 <mg_uecc_vli_set>
  mg_uecc_vli_set(result + num_words, Ry[0], num_words);
 801f438:	f997 30b5 	ldrsb.w	r3, [r7, #181]	@ 0xb5
 801f43c:	009b      	lsls	r3, r3, #2
 801f43e:	68fa      	ldr	r2, [r7, #12]
 801f440:	4413      	add	r3, r2
 801f442:	f997 20b5 	ldrsb.w	r2, [r7, #181]	@ 0xb5
 801f446:	f107 0130 	add.w	r1, r7, #48	@ 0x30
 801f44a:	4618      	mov	r0, r3
 801f44c:	f7fe fc1c 	bl	801dc88 <mg_uecc_vli_set>
}
 801f450:	bf00      	nop
 801f452:	37bc      	adds	r7, #188	@ 0xbc
 801f454:	46bd      	mov	sp, r7
 801f456:	bd90      	pop	{r4, r7, pc}

0801f458 <regularize_k>:

static mg_uecc_word_t regularize_k(const mg_uecc_word_t *const k,
                                   mg_uecc_word_t *k0, mg_uecc_word_t *k1,
                                   MG_UECC_Curve curve) {
 801f458:	b580      	push	{r7, lr}
 801f45a:	b086      	sub	sp, #24
 801f45c:	af00      	add	r7, sp, #0
 801f45e:	60f8      	str	r0, [r7, #12]
 801f460:	60b9      	str	r1, [r7, #8]
 801f462:	607a      	str	r2, [r7, #4]
 801f464:	603b      	str	r3, [r7, #0]
  wordcount_t num_n_words = BITS_TO_WORDS(curve->num_n_bits);
 801f466:	683b      	ldr	r3, [r7, #0]
 801f468:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801f46c:	331f      	adds	r3, #31
 801f46e:	2b00      	cmp	r3, #0
 801f470:	da00      	bge.n	801f474 <regularize_k+0x1c>
 801f472:	331f      	adds	r3, #31
 801f474:	115b      	asrs	r3, r3, #5
 801f476:	75fb      	strb	r3, [r7, #23]
  bitcount_t num_n_bits = curve->num_n_bits;
 801f478:	683b      	ldr	r3, [r7, #0]
 801f47a:	885b      	ldrh	r3, [r3, #2]
 801f47c:	82bb      	strh	r3, [r7, #20]
  mg_uecc_word_t carry =
      mg_uecc_vli_add(k0, k, curve->n, num_n_words) ||
 801f47e:	683b      	ldr	r3, [r7, #0]
 801f480:	f103 0224 	add.w	r2, r3, #36	@ 0x24
 801f484:	f997 3017 	ldrsb.w	r3, [r7, #23]
 801f488:	68f9      	ldr	r1, [r7, #12]
 801f48a:	68b8      	ldr	r0, [r7, #8]
 801f48c:	f7fe fcec 	bl	801de68 <mg_uecc_vli_add>
 801f490:	4603      	mov	r3, r0
 801f492:	2b00      	cmp	r3, #0
 801f494:	d10f      	bne.n	801f4b6 <regularize_k+0x5e>
      (num_n_bits < ((bitcount_t) num_n_words * MG_UECC_WORD_SIZE * 8) &&
 801f496:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 801f49a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 801f49e:	015b      	lsls	r3, r3, #5
      mg_uecc_vli_add(k0, k, curve->n, num_n_words) ||
 801f4a0:	429a      	cmp	r2, r3
 801f4a2:	da0a      	bge.n	801f4ba <regularize_k+0x62>
       mg_uecc_vli_testBit(k0, num_n_bits));
 801f4a4:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 801f4a8:	4619      	mov	r1, r3
 801f4aa:	68b8      	ldr	r0, [r7, #8]
 801f4ac:	f7fe fb73 	bl	801db96 <mg_uecc_vli_testBit>
 801f4b0:	4603      	mov	r3, r0
      (num_n_bits < ((bitcount_t) num_n_words * MG_UECC_WORD_SIZE * 8) &&
 801f4b2:	2b00      	cmp	r3, #0
 801f4b4:	d001      	beq.n	801f4ba <regularize_k+0x62>
      mg_uecc_vli_add(k0, k, curve->n, num_n_words) ||
 801f4b6:	2301      	movs	r3, #1
 801f4b8:	e000      	b.n	801f4bc <regularize_k+0x64>
 801f4ba:	2300      	movs	r3, #0
  mg_uecc_word_t carry =
 801f4bc:	613b      	str	r3, [r7, #16]
  mg_uecc_vli_add(k1, k0, curve->n, num_n_words);
 801f4be:	683b      	ldr	r3, [r7, #0]
 801f4c0:	f103 0224 	add.w	r2, r3, #36	@ 0x24
 801f4c4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 801f4c8:	68b9      	ldr	r1, [r7, #8]
 801f4ca:	6878      	ldr	r0, [r7, #4]
 801f4cc:	f7fe fccc 	bl	801de68 <mg_uecc_vli_add>
  return carry;
 801f4d0:	693b      	ldr	r3, [r7, #16]
}
 801f4d2:	4618      	mov	r0, r3
 801f4d4:	3718      	adds	r7, #24
 801f4d6:	46bd      	mov	sp, r7
 801f4d8:	bd80      	pop	{r7, pc}
	...

0801f4dc <mg_uecc_generate_random_int>:

/* Generates a random integer in the range 0 < random < top.
   Both random and top have num_words words. */
MG_UECC_VLI_API int mg_uecc_generate_random_int(mg_uecc_word_t *random,
                                                const mg_uecc_word_t *top,
                                                wordcount_t num_words) {
 801f4dc:	b580      	push	{r7, lr}
 801f4de:	b088      	sub	sp, #32
 801f4e0:	af00      	add	r7, sp, #0
 801f4e2:	60f8      	str	r0, [r7, #12]
 801f4e4:	60b9      	str	r1, [r7, #8]
 801f4e6:	4613      	mov	r3, r2
 801f4e8:	71fb      	strb	r3, [r7, #7]
  mg_uecc_word_t mask = (mg_uecc_word_t) -1;
 801f4ea:	f04f 33ff 	mov.w	r3, #4294967295
 801f4ee:	61bb      	str	r3, [r7, #24]
  mg_uecc_word_t tries;
  bitcount_t num_bits = mg_uecc_vli_numBits(top, num_words);
 801f4f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801f4f4:	4619      	mov	r1, r3
 801f4f6:	68b8      	ldr	r0, [r7, #8]
 801f4f8:	f7fe fb8d 	bl	801dc16 <mg_uecc_vli_numBits>
 801f4fc:	4603      	mov	r3, r0
 801f4fe:	82fb      	strh	r3, [r7, #22]

  if (!g_rng_function) {
 801f500:	4b2a      	ldr	r3, [pc, #168]	@ (801f5ac <mg_uecc_generate_random_int+0xd0>)
 801f502:	681b      	ldr	r3, [r3, #0]
 801f504:	2b00      	cmp	r3, #0
 801f506:	d101      	bne.n	801f50c <mg_uecc_generate_random_int+0x30>
    return 0;
 801f508:	2300      	movs	r3, #0
 801f50a:	e04b      	b.n	801f5a4 <mg_uecc_generate_random_int+0xc8>
  }

  for (tries = 0; tries < MG_UECC_RNG_MAX_TRIES; ++tries) {
 801f50c:	2300      	movs	r3, #0
 801f50e:	61fb      	str	r3, [r7, #28]
 801f510:	e044      	b.n	801f59c <mg_uecc_generate_random_int+0xc0>
    if (!g_rng_function((uint8_t *) random,
 801f512:	4b26      	ldr	r3, [pc, #152]	@ (801f5ac <mg_uecc_generate_random_int+0xd0>)
 801f514:	681b      	ldr	r3, [r3, #0]
                        (unsigned int) (num_words * MG_UECC_WORD_SIZE))) {
 801f516:	f997 2007 	ldrsb.w	r2, [r7, #7]
 801f51a:	0092      	lsls	r2, r2, #2
    if (!g_rng_function((uint8_t *) random,
 801f51c:	4611      	mov	r1, r2
 801f51e:	68f8      	ldr	r0, [r7, #12]
 801f520:	4798      	blx	r3
 801f522:	4603      	mov	r3, r0
 801f524:	2b00      	cmp	r3, #0
 801f526:	d101      	bne.n	801f52c <mg_uecc_generate_random_int+0x50>
      return 0;
 801f528:	2300      	movs	r3, #0
 801f52a:	e03b      	b.n	801f5a4 <mg_uecc_generate_random_int+0xc8>
    }
    random[num_words - 1] &=
 801f52c:	f997 2007 	ldrsb.w	r2, [r7, #7]
 801f530:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 801f534:	4413      	add	r3, r2
 801f536:	009b      	lsls	r3, r3, #2
 801f538:	68fa      	ldr	r2, [r7, #12]
 801f53a:	4413      	add	r3, r2
 801f53c:	6819      	ldr	r1, [r3, #0]
        mask >> ((bitcount_t) (num_words * MG_UECC_WORD_SIZE * 8 - num_bits));
 801f53e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801f542:	b29b      	uxth	r3, r3
 801f544:	015b      	lsls	r3, r3, #5
 801f546:	b29a      	uxth	r2, r3
 801f548:	8afb      	ldrh	r3, [r7, #22]
 801f54a:	1ad3      	subs	r3, r2, r3
 801f54c:	b29b      	uxth	r3, r3
 801f54e:	b21b      	sxth	r3, r3
 801f550:	461a      	mov	r2, r3
 801f552:	69bb      	ldr	r3, [r7, #24]
 801f554:	fa23 f202 	lsr.w	r2, r3, r2
    random[num_words - 1] &=
 801f558:	f997 0007 	ldrsb.w	r0, [r7, #7]
 801f55c:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 801f560:	4403      	add	r3, r0
 801f562:	009b      	lsls	r3, r3, #2
 801f564:	68f8      	ldr	r0, [r7, #12]
 801f566:	4403      	add	r3, r0
 801f568:	400a      	ands	r2, r1
 801f56a:	601a      	str	r2, [r3, #0]
    if (!mg_uecc_vli_isZero(random, num_words) &&
 801f56c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801f570:	4619      	mov	r1, r3
 801f572:	68f8      	ldr	r0, [r7, #12]
 801f574:	f7fe fae5 	bl	801db42 <mg_uecc_vli_isZero>
 801f578:	4603      	mov	r3, r0
 801f57a:	2b00      	cmp	r3, #0
 801f57c:	d10b      	bne.n	801f596 <mg_uecc_generate_random_int+0xba>
        mg_uecc_vli_cmp(top, random, num_words) == 1) {
 801f57e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801f582:	461a      	mov	r2, r3
 801f584:	68f9      	ldr	r1, [r7, #12]
 801f586:	68b8      	ldr	r0, [r7, #8]
 801f588:	f7fe fc13 	bl	801ddb2 <mg_uecc_vli_cmp>
 801f58c:	4603      	mov	r3, r0
    if (!mg_uecc_vli_isZero(random, num_words) &&
 801f58e:	2b01      	cmp	r3, #1
 801f590:	d101      	bne.n	801f596 <mg_uecc_generate_random_int+0xba>
      return 1;
 801f592:	2301      	movs	r3, #1
 801f594:	e006      	b.n	801f5a4 <mg_uecc_generate_random_int+0xc8>
  for (tries = 0; tries < MG_UECC_RNG_MAX_TRIES; ++tries) {
 801f596:	69fb      	ldr	r3, [r7, #28]
 801f598:	3301      	adds	r3, #1
 801f59a:	61fb      	str	r3, [r7, #28]
 801f59c:	69fb      	ldr	r3, [r7, #28]
 801f59e:	2b3f      	cmp	r3, #63	@ 0x3f
 801f5a0:	d9b7      	bls.n	801f512 <mg_uecc_generate_random_int+0x36>
    }
  }
  return 0;
 801f5a2:	2300      	movs	r3, #0
}
 801f5a4:	4618      	mov	r0, r3
 801f5a6:	3720      	adds	r7, #32
 801f5a8:	46bd      	mov	sp, r7
 801f5aa:	bd80      	pop	{r7, pc}
 801f5ac:	20011ac8 	.word	0x20011ac8

0801f5b0 <mg_uecc_vli_nativeToBytes>:
}

#else

MG_UECC_VLI_API void mg_uecc_vli_nativeToBytes(uint8_t *bytes, int num_bytes,
                                               const mg_uecc_word_t *native) {
 801f5b0:	b480      	push	{r7}
 801f5b2:	b087      	sub	sp, #28
 801f5b4:	af00      	add	r7, sp, #0
 801f5b6:	60f8      	str	r0, [r7, #12]
 801f5b8:	60b9      	str	r1, [r7, #8]
 801f5ba:	607a      	str	r2, [r7, #4]
  int i;
  for (i = 0; i < num_bytes; ++i) {
 801f5bc:	2300      	movs	r3, #0
 801f5be:	617b      	str	r3, [r7, #20]
 801f5c0:	e018      	b.n	801f5f4 <mg_uecc_vli_nativeToBytes+0x44>
    unsigned b = (unsigned) (num_bytes - 1 - i);
 801f5c2:	68bb      	ldr	r3, [r7, #8]
 801f5c4:	1e5a      	subs	r2, r3, #1
 801f5c6:	697b      	ldr	r3, [r7, #20]
 801f5c8:	1ad3      	subs	r3, r2, r3
 801f5ca:	613b      	str	r3, [r7, #16]
    bytes[i] = (uint8_t) (native[b / MG_UECC_WORD_SIZE] >>
 801f5cc:	693b      	ldr	r3, [r7, #16]
 801f5ce:	f023 0303 	bic.w	r3, r3, #3
 801f5d2:	687a      	ldr	r2, [r7, #4]
 801f5d4:	4413      	add	r3, r2
 801f5d6:	681a      	ldr	r2, [r3, #0]
                          (8 * (b % MG_UECC_WORD_SIZE)));
 801f5d8:	693b      	ldr	r3, [r7, #16]
 801f5da:	f003 0303 	and.w	r3, r3, #3
 801f5de:	00db      	lsls	r3, r3, #3
    bytes[i] = (uint8_t) (native[b / MG_UECC_WORD_SIZE] >>
 801f5e0:	fa22 f103 	lsr.w	r1, r2, r3
 801f5e4:	697b      	ldr	r3, [r7, #20]
 801f5e6:	68fa      	ldr	r2, [r7, #12]
 801f5e8:	4413      	add	r3, r2
 801f5ea:	b2ca      	uxtb	r2, r1
 801f5ec:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < num_bytes; ++i) {
 801f5ee:	697b      	ldr	r3, [r7, #20]
 801f5f0:	3301      	adds	r3, #1
 801f5f2:	617b      	str	r3, [r7, #20]
 801f5f4:	697a      	ldr	r2, [r7, #20]
 801f5f6:	68bb      	ldr	r3, [r7, #8]
 801f5f8:	429a      	cmp	r2, r3
 801f5fa:	dbe2      	blt.n	801f5c2 <mg_uecc_vli_nativeToBytes+0x12>
  }
}
 801f5fc:	bf00      	nop
 801f5fe:	bf00      	nop
 801f600:	371c      	adds	r7, #28
 801f602:	46bd      	mov	sp, r7
 801f604:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f608:	4770      	bx	lr

0801f60a <mg_uecc_vli_bytesToNative>:

MG_UECC_VLI_API void mg_uecc_vli_bytesToNative(mg_uecc_word_t *native,
                                               const uint8_t *bytes,
                                               int num_bytes) {
 801f60a:	b580      	push	{r7, lr}
 801f60c:	b086      	sub	sp, #24
 801f60e:	af00      	add	r7, sp, #0
 801f610:	60f8      	str	r0, [r7, #12]
 801f612:	60b9      	str	r1, [r7, #8]
 801f614:	607a      	str	r2, [r7, #4]
  int i;
  mg_uecc_vli_clear(native,
                    (wordcount_t) ((num_bytes + (MG_UECC_WORD_SIZE - 1)) /
 801f616:	687b      	ldr	r3, [r7, #4]
 801f618:	3303      	adds	r3, #3
 801f61a:	2b00      	cmp	r3, #0
 801f61c:	da00      	bge.n	801f620 <mg_uecc_vli_bytesToNative+0x16>
 801f61e:	3303      	adds	r3, #3
 801f620:	109b      	asrs	r3, r3, #2
  mg_uecc_vli_clear(native,
 801f622:	b25b      	sxtb	r3, r3
 801f624:	4619      	mov	r1, r3
 801f626:	68f8      	ldr	r0, [r7, #12]
 801f628:	f7fe fa6a 	bl	801db00 <mg_uecc_vli_clear>
                                   MG_UECC_WORD_SIZE));
  for (i = 0; i < num_bytes; ++i) {
 801f62c:	2300      	movs	r3, #0
 801f62e:	617b      	str	r3, [r7, #20]
 801f630:	e01e      	b.n	801f670 <mg_uecc_vli_bytesToNative+0x66>
    unsigned b = (unsigned) (num_bytes - 1 - i);
 801f632:	687b      	ldr	r3, [r7, #4]
 801f634:	1e5a      	subs	r2, r3, #1
 801f636:	697b      	ldr	r3, [r7, #20]
 801f638:	1ad3      	subs	r3, r2, r3
 801f63a:	613b      	str	r3, [r7, #16]
    native[b / MG_UECC_WORD_SIZE] |= (mg_uecc_word_t) bytes[i]
 801f63c:	693b      	ldr	r3, [r7, #16]
 801f63e:	f023 0303 	bic.w	r3, r3, #3
 801f642:	68fa      	ldr	r2, [r7, #12]
 801f644:	4413      	add	r3, r2
 801f646:	6819      	ldr	r1, [r3, #0]
 801f648:	697b      	ldr	r3, [r7, #20]
 801f64a:	68ba      	ldr	r2, [r7, #8]
 801f64c:	4413      	add	r3, r2
 801f64e:	781b      	ldrb	r3, [r3, #0]
 801f650:	461a      	mov	r2, r3
                                     << (8 * (b % MG_UECC_WORD_SIZE));
 801f652:	693b      	ldr	r3, [r7, #16]
 801f654:	f003 0303 	and.w	r3, r3, #3
 801f658:	00db      	lsls	r3, r3, #3
 801f65a:	409a      	lsls	r2, r3
    native[b / MG_UECC_WORD_SIZE] |= (mg_uecc_word_t) bytes[i]
 801f65c:	693b      	ldr	r3, [r7, #16]
 801f65e:	f023 0303 	bic.w	r3, r3, #3
 801f662:	68f8      	ldr	r0, [r7, #12]
 801f664:	4403      	add	r3, r0
 801f666:	430a      	orrs	r2, r1
 801f668:	601a      	str	r2, [r3, #0]
  for (i = 0; i < num_bytes; ++i) {
 801f66a:	697b      	ldr	r3, [r7, #20]
 801f66c:	3301      	adds	r3, #1
 801f66e:	617b      	str	r3, [r7, #20]
 801f670:	697a      	ldr	r2, [r7, #20]
 801f672:	687b      	ldr	r3, [r7, #4]
 801f674:	429a      	cmp	r2, r3
 801f676:	dbdc      	blt.n	801f632 <mg_uecc_vli_bytesToNative+0x28>
  }
}
 801f678:	bf00      	nop
 801f67a:	bf00      	nop
 801f67c:	3718      	adds	r7, #24
 801f67e:	46bd      	mov	sp, r7
 801f680:	bd80      	pop	{r7, pc}

0801f682 <bits2int>:
}

/* -------- ECDSA code -------- */

static void bits2int(mg_uecc_word_t *native, const uint8_t *bits,
                     unsigned bits_size, MG_UECC_Curve curve) {
 801f682:	b580      	push	{r7, lr}
 801f684:	b08a      	sub	sp, #40	@ 0x28
 801f686:	af00      	add	r7, sp, #0
 801f688:	60f8      	str	r0, [r7, #12]
 801f68a:	60b9      	str	r1, [r7, #8]
 801f68c:	607a      	str	r2, [r7, #4]
 801f68e:	603b      	str	r3, [r7, #0]
  unsigned num_n_bytes = (unsigned) BITS_TO_BYTES(curve->num_n_bits);
 801f690:	683b      	ldr	r3, [r7, #0]
 801f692:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801f696:	3307      	adds	r3, #7
 801f698:	2b00      	cmp	r3, #0
 801f69a:	da00      	bge.n	801f69e <bits2int+0x1c>
 801f69c:	3307      	adds	r3, #7
 801f69e:	10db      	asrs	r3, r3, #3
 801f6a0:	61fb      	str	r3, [r7, #28]
  unsigned num_n_words = (unsigned) BITS_TO_WORDS(curve->num_n_bits);
 801f6a2:	683b      	ldr	r3, [r7, #0]
 801f6a4:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801f6a8:	331f      	adds	r3, #31
 801f6aa:	2b00      	cmp	r3, #0
 801f6ac:	da00      	bge.n	801f6b0 <bits2int+0x2e>
 801f6ae:	331f      	adds	r3, #31
 801f6b0:	115b      	asrs	r3, r3, #5
 801f6b2:	b25b      	sxtb	r3, r3
 801f6b4:	61bb      	str	r3, [r7, #24]
  int shift;
  mg_uecc_word_t carry;
  mg_uecc_word_t *ptr;

  if (bits_size > num_n_bytes) {
 801f6b6:	687a      	ldr	r2, [r7, #4]
 801f6b8:	69fb      	ldr	r3, [r7, #28]
 801f6ba:	429a      	cmp	r2, r3
 801f6bc:	d901      	bls.n	801f6c2 <bits2int+0x40>
    bits_size = num_n_bytes;
 801f6be:	69fb      	ldr	r3, [r7, #28]
 801f6c0:	607b      	str	r3, [r7, #4]
  }

  mg_uecc_vli_clear(native, (wordcount_t) num_n_words);
 801f6c2:	69bb      	ldr	r3, [r7, #24]
 801f6c4:	b25b      	sxtb	r3, r3
 801f6c6:	4619      	mov	r1, r3
 801f6c8:	68f8      	ldr	r0, [r7, #12]
 801f6ca:	f7fe fa19 	bl	801db00 <mg_uecc_vli_clear>
#if MG_UECC_VLI_NATIVE_LITTLE_ENDIAN
  bcopy((uint8_t *) native, bits, bits_size);
#else
  mg_uecc_vli_bytesToNative(native, bits, (int) bits_size);
 801f6ce:	687b      	ldr	r3, [r7, #4]
 801f6d0:	461a      	mov	r2, r3
 801f6d2:	68b9      	ldr	r1, [r7, #8]
 801f6d4:	68f8      	ldr	r0, [r7, #12]
 801f6d6:	f7ff ff98 	bl	801f60a <mg_uecc_vli_bytesToNative>
#endif
  if (bits_size * 8 <= (unsigned) curve->num_n_bits) {
 801f6da:	687b      	ldr	r3, [r7, #4]
 801f6dc:	00db      	lsls	r3, r3, #3
 801f6de:	683a      	ldr	r2, [r7, #0]
 801f6e0:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 801f6e4:	4293      	cmp	r3, r2
 801f6e6:	d93a      	bls.n	801f75e <bits2int+0xdc>
    return;
  }
  shift = (int) bits_size * 8 - curve->num_n_bits;
 801f6e8:	687b      	ldr	r3, [r7, #4]
 801f6ea:	00db      	lsls	r3, r3, #3
 801f6ec:	683a      	ldr	r2, [r7, #0]
 801f6ee:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 801f6f2:	1a9b      	subs	r3, r3, r2
 801f6f4:	617b      	str	r3, [r7, #20]
  carry = 0;
 801f6f6:	2300      	movs	r3, #0
 801f6f8:	627b      	str	r3, [r7, #36]	@ 0x24
  ptr = native + num_n_words;
 801f6fa:	69bb      	ldr	r3, [r7, #24]
 801f6fc:	009b      	lsls	r3, r3, #2
 801f6fe:	68fa      	ldr	r2, [r7, #12]
 801f700:	4413      	add	r3, r2
 801f702:	623b      	str	r3, [r7, #32]
  while (ptr-- > native) {
 801f704:	e010      	b.n	801f728 <bits2int+0xa6>
    mg_uecc_word_t temp = *ptr;
 801f706:	6a3b      	ldr	r3, [r7, #32]
 801f708:	681b      	ldr	r3, [r3, #0]
 801f70a:	613b      	str	r3, [r7, #16]
    *ptr = (temp >> shift) | carry;
 801f70c:	693a      	ldr	r2, [r7, #16]
 801f70e:	697b      	ldr	r3, [r7, #20]
 801f710:	40da      	lsrs	r2, r3
 801f712:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801f714:	431a      	orrs	r2, r3
 801f716:	6a3b      	ldr	r3, [r7, #32]
 801f718:	601a      	str	r2, [r3, #0]
    carry = temp << (MG_UECC_WORD_BITS - shift);
 801f71a:	697b      	ldr	r3, [r7, #20]
 801f71c:	f1c3 0320 	rsb	r3, r3, #32
 801f720:	693a      	ldr	r2, [r7, #16]
 801f722:	fa02 f303 	lsl.w	r3, r2, r3
 801f726:	627b      	str	r3, [r7, #36]	@ 0x24
  while (ptr-- > native) {
 801f728:	6a3b      	ldr	r3, [r7, #32]
 801f72a:	1f1a      	subs	r2, r3, #4
 801f72c:	623a      	str	r2, [r7, #32]
 801f72e:	68fa      	ldr	r2, [r7, #12]
 801f730:	429a      	cmp	r2, r3
 801f732:	d3e8      	bcc.n	801f706 <bits2int+0x84>
  }

  /* Reduce mod curve_n */
  if (mg_uecc_vli_cmp_unsafe(curve->n, native, (wordcount_t) num_n_words) !=
 801f734:	683b      	ldr	r3, [r7, #0]
 801f736:	3324      	adds	r3, #36	@ 0x24
 801f738:	69ba      	ldr	r2, [r7, #24]
 801f73a:	b252      	sxtb	r2, r2
 801f73c:	68f9      	ldr	r1, [r7, #12]
 801f73e:	4618      	mov	r0, r3
 801f740:	f7fe fac9 	bl	801dcd6 <mg_uecc_vli_cmp_unsafe>
 801f744:	4603      	mov	r3, r0
 801f746:	2b01      	cmp	r3, #1
 801f748:	d00a      	beq.n	801f760 <bits2int+0xde>
      1) {
    mg_uecc_vli_sub(native, native, curve->n, (wordcount_t) num_n_words);
 801f74a:	683b      	ldr	r3, [r7, #0]
 801f74c:	f103 0224 	add.w	r2, r3, #36	@ 0x24
 801f750:	69bb      	ldr	r3, [r7, #24]
 801f752:	b25b      	sxtb	r3, r3
 801f754:	68f9      	ldr	r1, [r7, #12]
 801f756:	68f8      	ldr	r0, [r7, #12]
 801f758:	f7fe fbd0 	bl	801defc <mg_uecc_vli_sub>
 801f75c:	e000      	b.n	801f760 <bits2int+0xde>
    return;
 801f75e:	bf00      	nop
  }
}
 801f760:	3728      	adds	r7, #40	@ 0x28
 801f762:	46bd      	mov	sp, r7
 801f764:	bd80      	pop	{r7, pc}
	...

0801f768 <mg_uecc_sign_with_k_internal>:

static int mg_uecc_sign_with_k_internal(const uint8_t *private_key,
                                        const uint8_t *message_hash,
                                        unsigned hash_size, mg_uecc_word_t *k,
                                        uint8_t *signature,
                                        MG_UECC_Curve curve) {
 801f768:	b590      	push	{r4, r7, lr}
 801f76a:	b0ad      	sub	sp, #180	@ 0xb4
 801f76c:	af02      	add	r7, sp, #8
 801f76e:	60f8      	str	r0, [r7, #12]
 801f770:	60b9      	str	r1, [r7, #8]
 801f772:	607a      	str	r2, [r7, #4]
 801f774:	603b      	str	r3, [r7, #0]
  mg_uecc_word_t tmp[MG_UECC_MAX_WORDS];
  mg_uecc_word_t s[MG_UECC_MAX_WORDS];
  mg_uecc_word_t *k2[2] = {tmp, s};
 801f776:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 801f77a:	657b      	str	r3, [r7, #84]	@ 0x54
 801f77c:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 801f780:	65bb      	str	r3, [r7, #88]	@ 0x58
  mg_uecc_word_t *initial_Z = 0;
 801f782:	2300      	movs	r3, #0
 801f784:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  mg_uecc_word_t *p = (mg_uecc_word_t *) signature;
#else
  mg_uecc_word_t p[MG_UECC_MAX_WORDS * 2];
#endif
  mg_uecc_word_t carry;
  wordcount_t num_words = curve->num_words;
 801f788:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 801f78c:	781b      	ldrb	r3, [r3, #0]
 801f78e:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
  wordcount_t num_n_words = BITS_TO_WORDS(curve->num_n_bits);
 801f792:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 801f796:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801f79a:	331f      	adds	r3, #31
 801f79c:	2b00      	cmp	r3, #0
 801f79e:	da00      	bge.n	801f7a2 <mg_uecc_sign_with_k_internal+0x3a>
 801f7a0:	331f      	adds	r3, #31
 801f7a2:	115b      	asrs	r3, r3, #5
 801f7a4:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
  bitcount_t num_n_bits = curve->num_n_bits;
 801f7a8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 801f7ac:	885b      	ldrh	r3, [r3, #2]
 801f7ae:	f8a7 30a0 	strh.w	r3, [r7, #160]	@ 0xa0

  /* Make sure 0 < k < curve_n */
  if (mg_uecc_vli_isZero(k, num_words) ||
 801f7b2:	f997 30a3 	ldrsb.w	r3, [r7, #163]	@ 0xa3
 801f7b6:	4619      	mov	r1, r3
 801f7b8:	6838      	ldr	r0, [r7, #0]
 801f7ba:	f7fe f9c2 	bl	801db42 <mg_uecc_vli_isZero>
 801f7be:	4603      	mov	r3, r0
 801f7c0:	2b00      	cmp	r3, #0
 801f7c2:	d10b      	bne.n	801f7dc <mg_uecc_sign_with_k_internal+0x74>
      mg_uecc_vli_cmp(curve->n, k, num_n_words) != 1) {
 801f7c4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 801f7c8:	3324      	adds	r3, #36	@ 0x24
 801f7ca:	f997 20a2 	ldrsb.w	r2, [r7, #162]	@ 0xa2
 801f7ce:	6839      	ldr	r1, [r7, #0]
 801f7d0:	4618      	mov	r0, r3
 801f7d2:	f7fe faee 	bl	801ddb2 <mg_uecc_vli_cmp>
 801f7d6:	4603      	mov	r3, r0
  if (mg_uecc_vli_isZero(k, num_words) ||
 801f7d8:	2b01      	cmp	r3, #1
 801f7da:	d001      	beq.n	801f7e0 <mg_uecc_sign_with_k_internal+0x78>
    return 0;
 801f7dc:	2300      	movs	r3, #0
 801f7de:	e128      	b.n	801fa32 <mg_uecc_sign_with_k_internal+0x2ca>
  }

  carry = regularize_k(k, tmp, s, curve);
 801f7e0:	f107 025c 	add.w	r2, r7, #92	@ 0x5c
 801f7e4:	f107 017c 	add.w	r1, r7, #124	@ 0x7c
 801f7e8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 801f7ec:	6838      	ldr	r0, [r7, #0]
 801f7ee:	f7ff fe33 	bl	801f458 <regularize_k>
 801f7f2:	f8c7 009c 	str.w	r0, [r7, #156]	@ 0x9c
  /* If an RNG function was specified, try to get a random initial Z value to
     improve protection against side-channel attacks. */
  if (g_rng_function) {
 801f7f6:	4b91      	ldr	r3, [pc, #580]	@ (801fa3c <mg_uecc_sign_with_k_internal+0x2d4>)
 801f7f8:	681b      	ldr	r3, [r3, #0]
 801f7fa:	2b00      	cmp	r3, #0
 801f7fc:	d01c      	beq.n	801f838 <mg_uecc_sign_with_k_internal+0xd0>
    if (!mg_uecc_generate_random_int(k2[carry], curve->p, num_words)) {
 801f7fe:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 801f802:	009b      	lsls	r3, r3, #2
 801f804:	33a8      	adds	r3, #168	@ 0xa8
 801f806:	443b      	add	r3, r7
 801f808:	f853 0c54 	ldr.w	r0, [r3, #-84]
 801f80c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 801f810:	3304      	adds	r3, #4
 801f812:	f997 20a3 	ldrsb.w	r2, [r7, #163]	@ 0xa3
 801f816:	4619      	mov	r1, r3
 801f818:	f7ff fe60 	bl	801f4dc <mg_uecc_generate_random_int>
 801f81c:	4603      	mov	r3, r0
 801f81e:	2b00      	cmp	r3, #0
 801f820:	d101      	bne.n	801f826 <mg_uecc_sign_with_k_internal+0xbe>
      return 0;
 801f822:	2300      	movs	r3, #0
 801f824:	e105      	b.n	801fa32 <mg_uecc_sign_with_k_internal+0x2ca>
    }
    initial_Z = k2[carry];
 801f826:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 801f82a:	009b      	lsls	r3, r3, #2
 801f82c:	33a8      	adds	r3, #168	@ 0xa8
 801f82e:	443b      	add	r3, r7
 801f830:	f853 3c54 	ldr.w	r3, [r3, #-84]
 801f834:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  }
  EccPoint_mult(p, curve->G, k2[!carry], initial_Z,
 801f838:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 801f83c:	f103 0144 	add.w	r1, r3, #68	@ 0x44
 801f840:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 801f844:	2b00      	cmp	r3, #0
 801f846:	bf0c      	ite	eq
 801f848:	2301      	moveq	r3, #1
 801f84a:	2300      	movne	r3, #0
 801f84c:	b2db      	uxtb	r3, r3
 801f84e:	009b      	lsls	r3, r3, #2
 801f850:	33a8      	adds	r3, #168	@ 0xa8
 801f852:	443b      	add	r3, r7
 801f854:	f853 4c54 	ldr.w	r4, [r3, #-84]
                (bitcount_t) (num_n_bits + 1), curve);
 801f858:	f8b7 30a0 	ldrh.w	r3, [r7, #160]	@ 0xa0
 801f85c:	3301      	adds	r3, #1
 801f85e:	b29b      	uxth	r3, r3
  EccPoint_mult(p, curve->G, k2[!carry], initial_Z,
 801f860:	b21b      	sxth	r3, r3
 801f862:	f107 0014 	add.w	r0, r7, #20
 801f866:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 801f86a:	9201      	str	r2, [sp, #4]
 801f86c:	9300      	str	r3, [sp, #0]
 801f86e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 801f872:	4622      	mov	r2, r4
 801f874:	f7ff fc8f 	bl	801f196 <EccPoint_mult>
  if (mg_uecc_vli_isZero(p, num_words)) {
 801f878:	f997 20a3 	ldrsb.w	r2, [r7, #163]	@ 0xa3
 801f87c:	f107 0314 	add.w	r3, r7, #20
 801f880:	4611      	mov	r1, r2
 801f882:	4618      	mov	r0, r3
 801f884:	f7fe f95d 	bl	801db42 <mg_uecc_vli_isZero>
 801f888:	4603      	mov	r3, r0
 801f88a:	2b00      	cmp	r3, #0
 801f88c:	d001      	beq.n	801f892 <mg_uecc_sign_with_k_internal+0x12a>
    return 0;
 801f88e:	2300      	movs	r3, #0
 801f890:	e0cf      	b.n	801fa32 <mg_uecc_sign_with_k_internal+0x2ca>
  }

  /* If an RNG function was specified, get a random number
     to prevent side channel analysis of k. */
  if (!g_rng_function) {
 801f892:	4b6a      	ldr	r3, [pc, #424]	@ (801fa3c <mg_uecc_sign_with_k_internal+0x2d4>)
 801f894:	681b      	ldr	r3, [r3, #0]
 801f896:	2b00      	cmp	r3, #0
 801f898:	d10a      	bne.n	801f8b0 <mg_uecc_sign_with_k_internal+0x148>
    mg_uecc_vli_clear(tmp, num_n_words);
 801f89a:	f997 20a2 	ldrsb.w	r2, [r7, #162]	@ 0xa2
 801f89e:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 801f8a2:	4611      	mov	r1, r2
 801f8a4:	4618      	mov	r0, r3
 801f8a6:	f7fe f92b 	bl	801db00 <mg_uecc_vli_clear>
    tmp[0] = 1;
 801f8aa:	2301      	movs	r3, #1
 801f8ac:	67fb      	str	r3, [r7, #124]	@ 0x7c
 801f8ae:	e00f      	b.n	801f8d0 <mg_uecc_sign_with_k_internal+0x168>
  } else if (!mg_uecc_generate_random_int(tmp, curve->n, num_n_words)) {
 801f8b0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 801f8b4:	f103 0124 	add.w	r1, r3, #36	@ 0x24
 801f8b8:	f997 20a2 	ldrsb.w	r2, [r7, #162]	@ 0xa2
 801f8bc:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 801f8c0:	4618      	mov	r0, r3
 801f8c2:	f7ff fe0b 	bl	801f4dc <mg_uecc_generate_random_int>
 801f8c6:	4603      	mov	r3, r0
 801f8c8:	2b00      	cmp	r3, #0
 801f8ca:	d101      	bne.n	801f8d0 <mg_uecc_sign_with_k_internal+0x168>
    return 0;
 801f8cc:	2300      	movs	r3, #0
 801f8ce:	e0b0      	b.n	801fa32 <mg_uecc_sign_with_k_internal+0x2ca>
  }

  /* Prevent side channel analysis of mg_uecc_vli_modInv() to determine
     bits of k / the private key by premultiplying by a random number */
  mg_uecc_vli_modMult(k, k, tmp, curve->n, num_n_words); /* k' = rand * k */
 801f8d0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 801f8d4:	f103 0124 	add.w	r1, r3, #36	@ 0x24
 801f8d8:	f107 027c 	add.w	r2, r7, #124	@ 0x7c
 801f8dc:	f997 30a2 	ldrsb.w	r3, [r7, #162]	@ 0xa2
 801f8e0:	9300      	str	r3, [sp, #0]
 801f8e2:	460b      	mov	r3, r1
 801f8e4:	6839      	ldr	r1, [r7, #0]
 801f8e6:	6838      	ldr	r0, [r7, #0]
 801f8e8:	f7fe fddc 	bl	801e4a4 <mg_uecc_vli_modMult>
  mg_uecc_vli_modInv(k, k, curve->n, num_n_words);       /* k = 1 / k' */
 801f8ec:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 801f8f0:	f103 0224 	add.w	r2, r3, #36	@ 0x24
 801f8f4:	f997 30a2 	ldrsb.w	r3, [r7, #162]	@ 0xa2
 801f8f8:	6839      	ldr	r1, [r7, #0]
 801f8fa:	6838      	ldr	r0, [r7, #0]
 801f8fc:	f7fe fe51 	bl	801e5a2 <mg_uecc_vli_modInv>
  mg_uecc_vli_modMult(k, k, tmp, curve->n, num_n_words); /* k = 1 / k */
 801f900:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 801f904:	f103 0124 	add.w	r1, r3, #36	@ 0x24
 801f908:	f107 027c 	add.w	r2, r7, #124	@ 0x7c
 801f90c:	f997 30a2 	ldrsb.w	r3, [r7, #162]	@ 0xa2
 801f910:	9300      	str	r3, [sp, #0]
 801f912:	460b      	mov	r3, r1
 801f914:	6839      	ldr	r1, [r7, #0]
 801f916:	6838      	ldr	r0, [r7, #0]
 801f918:	f7fe fdc4 	bl	801e4a4 <mg_uecc_vli_modMult>

#if MG_UECC_VLI_NATIVE_LITTLE_ENDIAN == 0
  mg_uecc_vli_nativeToBytes(signature, curve->num_bytes, p); /* store r */
 801f91c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 801f920:	f993 3001 	ldrsb.w	r3, [r3, #1]
 801f924:	4619      	mov	r1, r3
 801f926:	f107 0314 	add.w	r3, r7, #20
 801f92a:	461a      	mov	r2, r3
 801f92c:	f8d7 00b8 	ldr.w	r0, [r7, #184]	@ 0xb8
 801f930:	f7ff fe3e 	bl	801f5b0 <mg_uecc_vli_nativeToBytes>

#if MG_UECC_VLI_NATIVE_LITTLE_ENDIAN
  bcopy((uint8_t *) tmp, private_key, BITS_TO_BYTES(curve->num_n_bits));
#else
  mg_uecc_vli_bytesToNative(tmp, private_key,
                            BITS_TO_BYTES(curve->num_n_bits)); /* tmp = d */
 801f934:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 801f938:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801f93c:	3307      	adds	r3, #7
  mg_uecc_vli_bytesToNative(tmp, private_key,
 801f93e:	2b00      	cmp	r3, #0
 801f940:	da00      	bge.n	801f944 <mg_uecc_sign_with_k_internal+0x1dc>
 801f942:	3307      	adds	r3, #7
 801f944:	10db      	asrs	r3, r3, #3
 801f946:	461a      	mov	r2, r3
 801f948:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 801f94c:	68f9      	ldr	r1, [r7, #12]
 801f94e:	4618      	mov	r0, r3
 801f950:	f7ff fe5b 	bl	801f60a <mg_uecc_vli_bytesToNative>
#endif

  s[num_n_words - 1] = 0;
 801f954:	f997 30a2 	ldrsb.w	r3, [r7, #162]	@ 0xa2
 801f958:	3b01      	subs	r3, #1
 801f95a:	009b      	lsls	r3, r3, #2
 801f95c:	33a8      	adds	r3, #168	@ 0xa8
 801f95e:	443b      	add	r3, r7
 801f960:	2200      	movs	r2, #0
 801f962:	f843 2c4c 	str.w	r2, [r3, #-76]
  mg_uecc_vli_set(s, p, num_words);
 801f966:	f997 20a3 	ldrsb.w	r2, [r7, #163]	@ 0xa3
 801f96a:	f107 0114 	add.w	r1, r7, #20
 801f96e:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 801f972:	4618      	mov	r0, r3
 801f974:	f7fe f988 	bl	801dc88 <mg_uecc_vli_set>
  mg_uecc_vli_modMult(s, tmp, s, curve->n, num_n_words); /* s = r*d */
 801f978:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 801f97c:	f103 0424 	add.w	r4, r3, #36	@ 0x24
 801f980:	f107 025c 	add.w	r2, r7, #92	@ 0x5c
 801f984:	f107 017c 	add.w	r1, r7, #124	@ 0x7c
 801f988:	f107 005c 	add.w	r0, r7, #92	@ 0x5c
 801f98c:	f997 30a2 	ldrsb.w	r3, [r7, #162]	@ 0xa2
 801f990:	9300      	str	r3, [sp, #0]
 801f992:	4623      	mov	r3, r4
 801f994:	f7fe fd86 	bl	801e4a4 <mg_uecc_vli_modMult>

  bits2int(tmp, message_hash, hash_size, curve);
 801f998:	f107 007c 	add.w	r0, r7, #124	@ 0x7c
 801f99c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 801f9a0:	687a      	ldr	r2, [r7, #4]
 801f9a2:	68b9      	ldr	r1, [r7, #8]
 801f9a4:	f7ff fe6d 	bl	801f682 <bits2int>
  mg_uecc_vli_modAdd(s, tmp, s, curve->n, num_n_words); /* s = e + r*d */
 801f9a8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 801f9ac:	f103 0424 	add.w	r4, r3, #36	@ 0x24
 801f9b0:	f107 025c 	add.w	r2, r7, #92	@ 0x5c
 801f9b4:	f107 017c 	add.w	r1, r7, #124	@ 0x7c
 801f9b8:	f107 005c 	add.w	r0, r7, #92	@ 0x5c
 801f9bc:	f997 30a2 	ldrsb.w	r3, [r7, #162]	@ 0xa2
 801f9c0:	9300      	str	r3, [sp, #0]
 801f9c2:	4623      	mov	r3, r4
 801f9c4:	f7fe fbee 	bl	801e1a4 <mg_uecc_vli_modAdd>
  mg_uecc_vli_modMult(s, s, k, curve->n, num_n_words);  /* s = (e + r*d) / k */
 801f9c8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 801f9cc:	f103 0224 	add.w	r2, r3, #36	@ 0x24
 801f9d0:	f107 015c 	add.w	r1, r7, #92	@ 0x5c
 801f9d4:	f107 005c 	add.w	r0, r7, #92	@ 0x5c
 801f9d8:	f997 30a2 	ldrsb.w	r3, [r7, #162]	@ 0xa2
 801f9dc:	9300      	str	r3, [sp, #0]
 801f9de:	4613      	mov	r3, r2
 801f9e0:	683a      	ldr	r2, [r7, #0]
 801f9e2:	f7fe fd5f 	bl	801e4a4 <mg_uecc_vli_modMult>
  if (mg_uecc_vli_numBits(s, num_n_words) > (bitcount_t) curve->num_bytes * 8) {
 801f9e6:	f997 20a2 	ldrsb.w	r2, [r7, #162]	@ 0xa2
 801f9ea:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 801f9ee:	4611      	mov	r1, r2
 801f9f0:	4618      	mov	r0, r3
 801f9f2:	f7fe f910 	bl	801dc16 <mg_uecc_vli_numBits>
 801f9f6:	4603      	mov	r3, r0
 801f9f8:	461a      	mov	r2, r3
 801f9fa:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 801f9fe:	f993 3001 	ldrsb.w	r3, [r3, #1]
 801fa02:	00db      	lsls	r3, r3, #3
 801fa04:	429a      	cmp	r2, r3
 801fa06:	dd01      	ble.n	801fa0c <mg_uecc_sign_with_k_internal+0x2a4>
    return 0;
 801fa08:	2300      	movs	r3, #0
 801fa0a:	e012      	b.n	801fa32 <mg_uecc_sign_with_k_internal+0x2ca>
  }
#if MG_UECC_VLI_NATIVE_LITTLE_ENDIAN
  bcopy((uint8_t *) signature + curve->num_bytes, (uint8_t *) s,
        curve->num_bytes);
#else
  mg_uecc_vli_nativeToBytes(signature + curve->num_bytes, curve->num_bytes, s);
 801fa0c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 801fa10:	f993 3001 	ldrsb.w	r3, [r3, #1]
 801fa14:	461a      	mov	r2, r3
 801fa16:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 801fa1a:	1898      	adds	r0, r3, r2
 801fa1c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 801fa20:	f993 3001 	ldrsb.w	r3, [r3, #1]
 801fa24:	4619      	mov	r1, r3
 801fa26:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 801fa2a:	461a      	mov	r2, r3
 801fa2c:	f7ff fdc0 	bl	801f5b0 <mg_uecc_vli_nativeToBytes>
#endif
  return 1;
 801fa30:	2301      	movs	r3, #1
}
 801fa32:	4618      	mov	r0, r3
 801fa34:	37ac      	adds	r7, #172	@ 0xac
 801fa36:	46bd      	mov	sp, r7
 801fa38:	bd90      	pop	{r4, r7, pc}
 801fa3a:	bf00      	nop
 801fa3c:	20011ac8 	.word	0x20011ac8

0801fa40 <HMAC_init>:
}

/* Compute an HMAC using K as a key (as in RFC 6979). Note that K is always
   the same size as the hash result size. */
static void HMAC_init(const MG_UECC_HashContext *hash_context,
                      const uint8_t *K) {
 801fa40:	b580      	push	{r7, lr}
 801fa42:	b084      	sub	sp, #16
 801fa44:	af00      	add	r7, sp, #0
 801fa46:	6078      	str	r0, [r7, #4]
 801fa48:	6039      	str	r1, [r7, #0]
  uint8_t *pad = hash_context->tmp + 2 * hash_context->result_size;
 801fa4a:	687b      	ldr	r3, [r7, #4]
 801fa4c:	695a      	ldr	r2, [r3, #20]
 801fa4e:	687b      	ldr	r3, [r7, #4]
 801fa50:	691b      	ldr	r3, [r3, #16]
 801fa52:	005b      	lsls	r3, r3, #1
 801fa54:	4413      	add	r3, r2
 801fa56:	60bb      	str	r3, [r7, #8]
  unsigned i;
  for (i = 0; i < hash_context->result_size; ++i) pad[i] = K[i] ^ 0x36;
 801fa58:	2300      	movs	r3, #0
 801fa5a:	60fb      	str	r3, [r7, #12]
 801fa5c:	e00d      	b.n	801fa7a <HMAC_init+0x3a>
 801fa5e:	683a      	ldr	r2, [r7, #0]
 801fa60:	68fb      	ldr	r3, [r7, #12]
 801fa62:	4413      	add	r3, r2
 801fa64:	781a      	ldrb	r2, [r3, #0]
 801fa66:	68b9      	ldr	r1, [r7, #8]
 801fa68:	68fb      	ldr	r3, [r7, #12]
 801fa6a:	440b      	add	r3, r1
 801fa6c:	f082 0236 	eor.w	r2, r2, #54	@ 0x36
 801fa70:	b2d2      	uxtb	r2, r2
 801fa72:	701a      	strb	r2, [r3, #0]
 801fa74:	68fb      	ldr	r3, [r7, #12]
 801fa76:	3301      	adds	r3, #1
 801fa78:	60fb      	str	r3, [r7, #12]
 801fa7a:	687b      	ldr	r3, [r7, #4]
 801fa7c:	691b      	ldr	r3, [r3, #16]
 801fa7e:	68fa      	ldr	r2, [r7, #12]
 801fa80:	429a      	cmp	r2, r3
 801fa82:	d3ec      	bcc.n	801fa5e <HMAC_init+0x1e>
  for (; i < hash_context->block_size; ++i) pad[i] = 0x36;
 801fa84:	e007      	b.n	801fa96 <HMAC_init+0x56>
 801fa86:	68ba      	ldr	r2, [r7, #8]
 801fa88:	68fb      	ldr	r3, [r7, #12]
 801fa8a:	4413      	add	r3, r2
 801fa8c:	2236      	movs	r2, #54	@ 0x36
 801fa8e:	701a      	strb	r2, [r3, #0]
 801fa90:	68fb      	ldr	r3, [r7, #12]
 801fa92:	3301      	adds	r3, #1
 801fa94:	60fb      	str	r3, [r7, #12]
 801fa96:	687b      	ldr	r3, [r7, #4]
 801fa98:	68db      	ldr	r3, [r3, #12]
 801fa9a:	68fa      	ldr	r2, [r7, #12]
 801fa9c:	429a      	cmp	r2, r3
 801fa9e:	d3f2      	bcc.n	801fa86 <HMAC_init+0x46>

  hash_context->init_hash(hash_context);
 801faa0:	687b      	ldr	r3, [r7, #4]
 801faa2:	681b      	ldr	r3, [r3, #0]
 801faa4:	6878      	ldr	r0, [r7, #4]
 801faa6:	4798      	blx	r3
  hash_context->update_hash(hash_context, pad, hash_context->block_size);
 801faa8:	687b      	ldr	r3, [r7, #4]
 801faaa:	685b      	ldr	r3, [r3, #4]
 801faac:	687a      	ldr	r2, [r7, #4]
 801faae:	68d2      	ldr	r2, [r2, #12]
 801fab0:	68b9      	ldr	r1, [r7, #8]
 801fab2:	6878      	ldr	r0, [r7, #4]
 801fab4:	4798      	blx	r3
}
 801fab6:	bf00      	nop
 801fab8:	3710      	adds	r7, #16
 801faba:	46bd      	mov	sp, r7
 801fabc:	bd80      	pop	{r7, pc}

0801fabe <HMAC_update>:

static void HMAC_update(const MG_UECC_HashContext *hash_context,
                        const uint8_t *message, unsigned message_size) {
 801fabe:	b580      	push	{r7, lr}
 801fac0:	b084      	sub	sp, #16
 801fac2:	af00      	add	r7, sp, #0
 801fac4:	60f8      	str	r0, [r7, #12]
 801fac6:	60b9      	str	r1, [r7, #8]
 801fac8:	607a      	str	r2, [r7, #4]
  hash_context->update_hash(hash_context, message, message_size);
 801faca:	68fb      	ldr	r3, [r7, #12]
 801facc:	685b      	ldr	r3, [r3, #4]
 801face:	687a      	ldr	r2, [r7, #4]
 801fad0:	68b9      	ldr	r1, [r7, #8]
 801fad2:	68f8      	ldr	r0, [r7, #12]
 801fad4:	4798      	blx	r3
}
 801fad6:	bf00      	nop
 801fad8:	3710      	adds	r7, #16
 801fada:	46bd      	mov	sp, r7
 801fadc:	bd80      	pop	{r7, pc}

0801fade <HMAC_finish>:

static void HMAC_finish(const MG_UECC_HashContext *hash_context,
                        const uint8_t *K, uint8_t *result) {
 801fade:	b580      	push	{r7, lr}
 801fae0:	b086      	sub	sp, #24
 801fae2:	af00      	add	r7, sp, #0
 801fae4:	60f8      	str	r0, [r7, #12]
 801fae6:	60b9      	str	r1, [r7, #8]
 801fae8:	607a      	str	r2, [r7, #4]
  uint8_t *pad = hash_context->tmp + 2 * hash_context->result_size;
 801faea:	68fb      	ldr	r3, [r7, #12]
 801faec:	695a      	ldr	r2, [r3, #20]
 801faee:	68fb      	ldr	r3, [r7, #12]
 801faf0:	691b      	ldr	r3, [r3, #16]
 801faf2:	005b      	lsls	r3, r3, #1
 801faf4:	4413      	add	r3, r2
 801faf6:	613b      	str	r3, [r7, #16]
  unsigned i;
  for (i = 0; i < hash_context->result_size; ++i) pad[i] = K[i] ^ 0x5c;
 801faf8:	2300      	movs	r3, #0
 801fafa:	617b      	str	r3, [r7, #20]
 801fafc:	e00d      	b.n	801fb1a <HMAC_finish+0x3c>
 801fafe:	68ba      	ldr	r2, [r7, #8]
 801fb00:	697b      	ldr	r3, [r7, #20]
 801fb02:	4413      	add	r3, r2
 801fb04:	781a      	ldrb	r2, [r3, #0]
 801fb06:	6939      	ldr	r1, [r7, #16]
 801fb08:	697b      	ldr	r3, [r7, #20]
 801fb0a:	440b      	add	r3, r1
 801fb0c:	f082 025c 	eor.w	r2, r2, #92	@ 0x5c
 801fb10:	b2d2      	uxtb	r2, r2
 801fb12:	701a      	strb	r2, [r3, #0]
 801fb14:	697b      	ldr	r3, [r7, #20]
 801fb16:	3301      	adds	r3, #1
 801fb18:	617b      	str	r3, [r7, #20]
 801fb1a:	68fb      	ldr	r3, [r7, #12]
 801fb1c:	691b      	ldr	r3, [r3, #16]
 801fb1e:	697a      	ldr	r2, [r7, #20]
 801fb20:	429a      	cmp	r2, r3
 801fb22:	d3ec      	bcc.n	801fafe <HMAC_finish+0x20>
  for (; i < hash_context->block_size; ++i) pad[i] = 0x5c;
 801fb24:	e007      	b.n	801fb36 <HMAC_finish+0x58>
 801fb26:	693a      	ldr	r2, [r7, #16]
 801fb28:	697b      	ldr	r3, [r7, #20]
 801fb2a:	4413      	add	r3, r2
 801fb2c:	225c      	movs	r2, #92	@ 0x5c
 801fb2e:	701a      	strb	r2, [r3, #0]
 801fb30:	697b      	ldr	r3, [r7, #20]
 801fb32:	3301      	adds	r3, #1
 801fb34:	617b      	str	r3, [r7, #20]
 801fb36:	68fb      	ldr	r3, [r7, #12]
 801fb38:	68db      	ldr	r3, [r3, #12]
 801fb3a:	697a      	ldr	r2, [r7, #20]
 801fb3c:	429a      	cmp	r2, r3
 801fb3e:	d3f2      	bcc.n	801fb26 <HMAC_finish+0x48>

  hash_context->finish_hash(hash_context, result);
 801fb40:	68fb      	ldr	r3, [r7, #12]
 801fb42:	689b      	ldr	r3, [r3, #8]
 801fb44:	6879      	ldr	r1, [r7, #4]
 801fb46:	68f8      	ldr	r0, [r7, #12]
 801fb48:	4798      	blx	r3

  hash_context->init_hash(hash_context);
 801fb4a:	68fb      	ldr	r3, [r7, #12]
 801fb4c:	681b      	ldr	r3, [r3, #0]
 801fb4e:	68f8      	ldr	r0, [r7, #12]
 801fb50:	4798      	blx	r3
  hash_context->update_hash(hash_context, pad, hash_context->block_size);
 801fb52:	68fb      	ldr	r3, [r7, #12]
 801fb54:	685b      	ldr	r3, [r3, #4]
 801fb56:	68fa      	ldr	r2, [r7, #12]
 801fb58:	68d2      	ldr	r2, [r2, #12]
 801fb5a:	6939      	ldr	r1, [r7, #16]
 801fb5c:	68f8      	ldr	r0, [r7, #12]
 801fb5e:	4798      	blx	r3
  hash_context->update_hash(hash_context, result, hash_context->result_size);
 801fb60:	68fb      	ldr	r3, [r7, #12]
 801fb62:	685b      	ldr	r3, [r3, #4]
 801fb64:	68fa      	ldr	r2, [r7, #12]
 801fb66:	6912      	ldr	r2, [r2, #16]
 801fb68:	6879      	ldr	r1, [r7, #4]
 801fb6a:	68f8      	ldr	r0, [r7, #12]
 801fb6c:	4798      	blx	r3
  hash_context->finish_hash(hash_context, result);
 801fb6e:	68fb      	ldr	r3, [r7, #12]
 801fb70:	689b      	ldr	r3, [r3, #8]
 801fb72:	6879      	ldr	r1, [r7, #4]
 801fb74:	68f8      	ldr	r0, [r7, #12]
 801fb76:	4798      	blx	r3
}
 801fb78:	bf00      	nop
 801fb7a:	3718      	adds	r7, #24
 801fb7c:	46bd      	mov	sp, r7
 801fb7e:	bd80      	pop	{r7, pc}

0801fb80 <update_V>:

/* V = HMAC_K(V) */
static void update_V(const MG_UECC_HashContext *hash_context, uint8_t *K,
                     uint8_t *V) {
 801fb80:	b580      	push	{r7, lr}
 801fb82:	b084      	sub	sp, #16
 801fb84:	af00      	add	r7, sp, #0
 801fb86:	60f8      	str	r0, [r7, #12]
 801fb88:	60b9      	str	r1, [r7, #8]
 801fb8a:	607a      	str	r2, [r7, #4]
  HMAC_init(hash_context, K);
 801fb8c:	68b9      	ldr	r1, [r7, #8]
 801fb8e:	68f8      	ldr	r0, [r7, #12]
 801fb90:	f7ff ff56 	bl	801fa40 <HMAC_init>
  HMAC_update(hash_context, V, hash_context->result_size);
 801fb94:	68fb      	ldr	r3, [r7, #12]
 801fb96:	691b      	ldr	r3, [r3, #16]
 801fb98:	461a      	mov	r2, r3
 801fb9a:	6879      	ldr	r1, [r7, #4]
 801fb9c:	68f8      	ldr	r0, [r7, #12]
 801fb9e:	f7ff ff8e 	bl	801fabe <HMAC_update>
  HMAC_finish(hash_context, K, V);
 801fba2:	687a      	ldr	r2, [r7, #4]
 801fba4:	68b9      	ldr	r1, [r7, #8]
 801fba6:	68f8      	ldr	r0, [r7, #12]
 801fba8:	f7ff ff99 	bl	801fade <HMAC_finish>
}
 801fbac:	bf00      	nop
 801fbae:	3710      	adds	r7, #16
 801fbb0:	46bd      	mov	sp, r7
 801fbb2:	bd80      	pop	{r7, pc}

0801fbb4 <mg_uecc_sign_deterministic>:
   Layout of hash_context->tmp: <K> | <V> | (1 byte overlapped 0x00 or 0x01) /
   <HMAC pad> */
int mg_uecc_sign_deterministic(const uint8_t *private_key,
                               const uint8_t *message_hash, unsigned hash_size,
                               const MG_UECC_HashContext *hash_context,
                               uint8_t *signature, MG_UECC_Curve curve) {
 801fbb4:	b580      	push	{r7, lr}
 801fbb6:	b096      	sub	sp, #88	@ 0x58
 801fbb8:	af02      	add	r7, sp, #8
 801fbba:	60f8      	str	r0, [r7, #12]
 801fbbc:	60b9      	str	r1, [r7, #8]
 801fbbe:	607a      	str	r2, [r7, #4]
 801fbc0:	603b      	str	r3, [r7, #0]
  uint8_t *K = hash_context->tmp;
 801fbc2:	683b      	ldr	r3, [r7, #0]
 801fbc4:	695b      	ldr	r3, [r3, #20]
 801fbc6:	643b      	str	r3, [r7, #64]	@ 0x40
  uint8_t *V = K + hash_context->result_size;
 801fbc8:	683b      	ldr	r3, [r7, #0]
 801fbca:	691b      	ldr	r3, [r3, #16]
 801fbcc:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 801fbce:	4413      	add	r3, r2
 801fbd0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  wordcount_t num_bytes = curve->num_bytes;
 801fbd2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801fbd4:	785b      	ldrb	r3, [r3, #1]
 801fbd6:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
  wordcount_t num_n_words = BITS_TO_WORDS(curve->num_n_bits);
 801fbda:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801fbdc:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801fbe0:	331f      	adds	r3, #31
 801fbe2:	2b00      	cmp	r3, #0
 801fbe4:	da00      	bge.n	801fbe8 <mg_uecc_sign_deterministic+0x34>
 801fbe6:	331f      	adds	r3, #31
 801fbe8:	115b      	asrs	r3, r3, #5
 801fbea:	f887 303a 	strb.w	r3, [r7, #58]	@ 0x3a
  bitcount_t num_n_bits = curve->num_n_bits;
 801fbee:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801fbf0:	885b      	ldrh	r3, [r3, #2]
 801fbf2:	873b      	strh	r3, [r7, #56]	@ 0x38
  mg_uecc_word_t tries;
  unsigned i;
  for (i = 0; i < hash_context->result_size; ++i) {
 801fbf4:	2300      	movs	r3, #0
 801fbf6:	64bb      	str	r3, [r7, #72]	@ 0x48
 801fbf8:	e00c      	b.n	801fc14 <mg_uecc_sign_deterministic+0x60>
    V[i] = 0x01;
 801fbfa:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 801fbfc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801fbfe:	4413      	add	r3, r2
 801fc00:	2201      	movs	r2, #1
 801fc02:	701a      	strb	r2, [r3, #0]
    K[i] = 0;
 801fc04:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 801fc06:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801fc08:	4413      	add	r3, r2
 801fc0a:	2200      	movs	r2, #0
 801fc0c:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < hash_context->result_size; ++i) {
 801fc0e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801fc10:	3301      	adds	r3, #1
 801fc12:	64bb      	str	r3, [r7, #72]	@ 0x48
 801fc14:	683b      	ldr	r3, [r7, #0]
 801fc16:	691b      	ldr	r3, [r3, #16]
 801fc18:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 801fc1a:	429a      	cmp	r2, r3
 801fc1c:	d3ed      	bcc.n	801fbfa <mg_uecc_sign_deterministic+0x46>
  }

  /* K = HMAC_K(V || 0x00 || int2octets(x) || h(m)) */
  HMAC_init(hash_context, K);
 801fc1e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 801fc20:	6838      	ldr	r0, [r7, #0]
 801fc22:	f7ff ff0d 	bl	801fa40 <HMAC_init>
  V[hash_context->result_size] = 0x00;
 801fc26:	683b      	ldr	r3, [r7, #0]
 801fc28:	691b      	ldr	r3, [r3, #16]
 801fc2a:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 801fc2c:	4413      	add	r3, r2
 801fc2e:	2200      	movs	r2, #0
 801fc30:	701a      	strb	r2, [r3, #0]
  HMAC_update(hash_context, V, hash_context->result_size + 1);
 801fc32:	683b      	ldr	r3, [r7, #0]
 801fc34:	691b      	ldr	r3, [r3, #16]
 801fc36:	3301      	adds	r3, #1
 801fc38:	461a      	mov	r2, r3
 801fc3a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 801fc3c:	6838      	ldr	r0, [r7, #0]
 801fc3e:	f7ff ff3e 	bl	801fabe <HMAC_update>
  HMAC_update(hash_context, private_key, (unsigned int) num_bytes);
 801fc42:	f997 303b 	ldrsb.w	r3, [r7, #59]	@ 0x3b
 801fc46:	461a      	mov	r2, r3
 801fc48:	68f9      	ldr	r1, [r7, #12]
 801fc4a:	6838      	ldr	r0, [r7, #0]
 801fc4c:	f7ff ff37 	bl	801fabe <HMAC_update>
  HMAC_update(hash_context, message_hash, hash_size);
 801fc50:	687a      	ldr	r2, [r7, #4]
 801fc52:	68b9      	ldr	r1, [r7, #8]
 801fc54:	6838      	ldr	r0, [r7, #0]
 801fc56:	f7ff ff32 	bl	801fabe <HMAC_update>
  HMAC_finish(hash_context, K, K);
 801fc5a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 801fc5c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 801fc5e:	6838      	ldr	r0, [r7, #0]
 801fc60:	f7ff ff3d 	bl	801fade <HMAC_finish>

  update_V(hash_context, K, V);
 801fc64:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 801fc66:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 801fc68:	6838      	ldr	r0, [r7, #0]
 801fc6a:	f7ff ff89 	bl	801fb80 <update_V>

  /* K = HMAC_K(V || 0x01 || int2octets(x) || h(m)) */
  HMAC_init(hash_context, K);
 801fc6e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 801fc70:	6838      	ldr	r0, [r7, #0]
 801fc72:	f7ff fee5 	bl	801fa40 <HMAC_init>
  V[hash_context->result_size] = 0x01;
 801fc76:	683b      	ldr	r3, [r7, #0]
 801fc78:	691b      	ldr	r3, [r3, #16]
 801fc7a:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 801fc7c:	4413      	add	r3, r2
 801fc7e:	2201      	movs	r2, #1
 801fc80:	701a      	strb	r2, [r3, #0]
  HMAC_update(hash_context, V, hash_context->result_size + 1);
 801fc82:	683b      	ldr	r3, [r7, #0]
 801fc84:	691b      	ldr	r3, [r3, #16]
 801fc86:	3301      	adds	r3, #1
 801fc88:	461a      	mov	r2, r3
 801fc8a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 801fc8c:	6838      	ldr	r0, [r7, #0]
 801fc8e:	f7ff ff16 	bl	801fabe <HMAC_update>
  HMAC_update(hash_context, private_key, (unsigned int) num_bytes);
 801fc92:	f997 303b 	ldrsb.w	r3, [r7, #59]	@ 0x3b
 801fc96:	461a      	mov	r2, r3
 801fc98:	68f9      	ldr	r1, [r7, #12]
 801fc9a:	6838      	ldr	r0, [r7, #0]
 801fc9c:	f7ff ff0f 	bl	801fabe <HMAC_update>
  HMAC_update(hash_context, message_hash, hash_size);
 801fca0:	687a      	ldr	r2, [r7, #4]
 801fca2:	68b9      	ldr	r1, [r7, #8]
 801fca4:	6838      	ldr	r0, [r7, #0]
 801fca6:	f7ff ff0a 	bl	801fabe <HMAC_update>
  HMAC_finish(hash_context, K, K);
 801fcaa:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 801fcac:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 801fcae:	6838      	ldr	r0, [r7, #0]
 801fcb0:	f7ff ff15 	bl	801fade <HMAC_finish>

  update_V(hash_context, K, V);
 801fcb4:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 801fcb6:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 801fcb8:	6838      	ldr	r0, [r7, #0]
 801fcba:	f7ff ff61 	bl	801fb80 <update_V>

  for (tries = 0; tries < MG_UECC_RNG_MAX_TRIES; ++tries) {
 801fcbe:	2300      	movs	r3, #0
 801fcc0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 801fcc2:	e084      	b.n	801fdce <mg_uecc_sign_deterministic+0x21a>
    mg_uecc_word_t T[MG_UECC_MAX_WORDS];
    uint8_t *T_ptr = (uint8_t *) T;
 801fcc4:	f107 0310 	add.w	r3, r7, #16
 801fcc8:	637b      	str	r3, [r7, #52]	@ 0x34
    wordcount_t T_bytes = 0;
 801fcca:	2300      	movs	r3, #0
 801fccc:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    for (;;) {
      update_V(hash_context, K, V);
 801fcd0:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 801fcd2:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 801fcd4:	6838      	ldr	r0, [r7, #0]
 801fcd6:	f7ff ff53 	bl	801fb80 <update_V>
      for (i = 0; i < hash_context->result_size; ++i) {
 801fcda:	2300      	movs	r3, #0
 801fcdc:	64bb      	str	r3, [r7, #72]	@ 0x48
 801fcde:	e017      	b.n	801fd10 <mg_uecc_sign_deterministic+0x15c>
        T_ptr[T_bytes++] = V[i];
 801fce0:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 801fce2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801fce4:	441a      	add	r2, r3
 801fce6:	f997 1047 	ldrsb.w	r1, [r7, #71]	@ 0x47
 801fcea:	b2cb      	uxtb	r3, r1
 801fcec:	3301      	adds	r3, #1
 801fcee:	b2db      	uxtb	r3, r3
 801fcf0:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 801fcf4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801fcf6:	440b      	add	r3, r1
 801fcf8:	7812      	ldrb	r2, [r2, #0]
 801fcfa:	701a      	strb	r2, [r3, #0]
        if (T_bytes >= num_n_words * MG_UECC_WORD_SIZE) {
 801fcfc:	f997 2047 	ldrsb.w	r2, [r7, #71]	@ 0x47
 801fd00:	f997 303a 	ldrsb.w	r3, [r7, #58]	@ 0x3a
 801fd04:	009b      	lsls	r3, r3, #2
 801fd06:	429a      	cmp	r2, r3
 801fd08:	da08      	bge.n	801fd1c <mg_uecc_sign_deterministic+0x168>
      for (i = 0; i < hash_context->result_size; ++i) {
 801fd0a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801fd0c:	3301      	adds	r3, #1
 801fd0e:	64bb      	str	r3, [r7, #72]	@ 0x48
 801fd10:	683b      	ldr	r3, [r7, #0]
 801fd12:	691b      	ldr	r3, [r3, #16]
 801fd14:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 801fd16:	429a      	cmp	r2, r3
 801fd18:	d3e2      	bcc.n	801fce0 <mg_uecc_sign_deterministic+0x12c>
      update_V(hash_context, K, V);
 801fd1a:	e7d9      	b.n	801fcd0 <mg_uecc_sign_deterministic+0x11c>
          goto filled;
 801fd1c:	bf00      	nop
        }
      }
    }
  filled:
    if ((bitcount_t) num_n_words * MG_UECC_WORD_SIZE * 8 > num_n_bits) {
 801fd1e:	f997 303a 	ldrsb.w	r3, [r7, #58]	@ 0x3a
 801fd22:	015a      	lsls	r2, r3, #5
 801fd24:	f9b7 3038 	ldrsh.w	r3, [r7, #56]	@ 0x38
 801fd28:	429a      	cmp	r2, r3
 801fd2a:	dd20      	ble.n	801fd6e <mg_uecc_sign_deterministic+0x1ba>
      mg_uecc_word_t mask = (mg_uecc_word_t) -1;
 801fd2c:	f04f 33ff 	mov.w	r3, #4294967295
 801fd30:	633b      	str	r3, [r7, #48]	@ 0x30
      T[num_n_words - 1] &=
 801fd32:	f997 303a 	ldrsb.w	r3, [r7, #58]	@ 0x3a
 801fd36:	3b01      	subs	r3, #1
 801fd38:	009b      	lsls	r3, r3, #2
 801fd3a:	3350      	adds	r3, #80	@ 0x50
 801fd3c:	443b      	add	r3, r7
 801fd3e:	f853 1c40 	ldr.w	r1, [r3, #-64]
          mask >>
          ((bitcount_t) (num_n_words * MG_UECC_WORD_SIZE * 8 - num_n_bits));
 801fd42:	f997 303a 	ldrsb.w	r3, [r7, #58]	@ 0x3a
 801fd46:	b29b      	uxth	r3, r3
 801fd48:	015b      	lsls	r3, r3, #5
 801fd4a:	b29a      	uxth	r2, r3
 801fd4c:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 801fd4e:	1ad3      	subs	r3, r2, r3
 801fd50:	b29b      	uxth	r3, r3
 801fd52:	b21b      	sxth	r3, r3
 801fd54:	461a      	mov	r2, r3
          mask >>
 801fd56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801fd58:	fa23 f202 	lsr.w	r2, r3, r2
      T[num_n_words - 1] &=
 801fd5c:	f997 303a 	ldrsb.w	r3, [r7, #58]	@ 0x3a
 801fd60:	3b01      	subs	r3, #1
 801fd62:	400a      	ands	r2, r1
 801fd64:	009b      	lsls	r3, r3, #2
 801fd66:	3350      	adds	r3, #80	@ 0x50
 801fd68:	443b      	add	r3, r7
 801fd6a:	f843 2c40 	str.w	r2, [r3, #-64]
    }

    if (mg_uecc_sign_with_k_internal(private_key, message_hash, hash_size, T,
 801fd6e:	f107 0210 	add.w	r2, r7, #16
 801fd72:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801fd74:	9301      	str	r3, [sp, #4]
 801fd76:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801fd78:	9300      	str	r3, [sp, #0]
 801fd7a:	4613      	mov	r3, r2
 801fd7c:	687a      	ldr	r2, [r7, #4]
 801fd7e:	68b9      	ldr	r1, [r7, #8]
 801fd80:	68f8      	ldr	r0, [r7, #12]
 801fd82:	f7ff fcf1 	bl	801f768 <mg_uecc_sign_with_k_internal>
 801fd86:	4603      	mov	r3, r0
 801fd88:	2b00      	cmp	r3, #0
 801fd8a:	d001      	beq.n	801fd90 <mg_uecc_sign_deterministic+0x1dc>
                                     signature, curve)) {
      return 1;
 801fd8c:	2301      	movs	r3, #1
 801fd8e:	e023      	b.n	801fdd8 <mg_uecc_sign_deterministic+0x224>
    }

    /* K = HMAC_K(V || 0x00) */
    HMAC_init(hash_context, K);
 801fd90:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 801fd92:	6838      	ldr	r0, [r7, #0]
 801fd94:	f7ff fe54 	bl	801fa40 <HMAC_init>
    V[hash_context->result_size] = 0x00;
 801fd98:	683b      	ldr	r3, [r7, #0]
 801fd9a:	691b      	ldr	r3, [r3, #16]
 801fd9c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 801fd9e:	4413      	add	r3, r2
 801fda0:	2200      	movs	r2, #0
 801fda2:	701a      	strb	r2, [r3, #0]
    HMAC_update(hash_context, V, hash_context->result_size + 1);
 801fda4:	683b      	ldr	r3, [r7, #0]
 801fda6:	691b      	ldr	r3, [r3, #16]
 801fda8:	3301      	adds	r3, #1
 801fdaa:	461a      	mov	r2, r3
 801fdac:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 801fdae:	6838      	ldr	r0, [r7, #0]
 801fdb0:	f7ff fe85 	bl	801fabe <HMAC_update>
    HMAC_finish(hash_context, K, K);
 801fdb4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 801fdb6:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 801fdb8:	6838      	ldr	r0, [r7, #0]
 801fdba:	f7ff fe90 	bl	801fade <HMAC_finish>

    update_V(hash_context, K, V);
 801fdbe:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 801fdc0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 801fdc2:	6838      	ldr	r0, [r7, #0]
 801fdc4:	f7ff fedc 	bl	801fb80 <update_V>
  for (tries = 0; tries < MG_UECC_RNG_MAX_TRIES; ++tries) {
 801fdc8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801fdca:	3301      	adds	r3, #1
 801fdcc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 801fdce:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801fdd0:	2b3f      	cmp	r3, #63	@ 0x3f
 801fdd2:	f67f af77 	bls.w	801fcc4 <mg_uecc_sign_deterministic+0x110>
  }
  return 0;
 801fdd6:	2300      	movs	r3, #0
}
 801fdd8:	4618      	mov	r0, r3
 801fdda:	3750      	adds	r7, #80	@ 0x50
 801fddc:	46bd      	mov	sp, r7
 801fdde:	bd80      	pop	{r7, pc}

0801fde0 <smax>:

static bitcount_t smax(bitcount_t a, bitcount_t b) {
 801fde0:	b480      	push	{r7}
 801fde2:	b083      	sub	sp, #12
 801fde4:	af00      	add	r7, sp, #0
 801fde6:	4603      	mov	r3, r0
 801fde8:	460a      	mov	r2, r1
 801fdea:	80fb      	strh	r3, [r7, #6]
 801fdec:	4613      	mov	r3, r2
 801fdee:	80bb      	strh	r3, [r7, #4]
  return (a > b ? a : b);
 801fdf0:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 801fdf4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801fdf8:	4293      	cmp	r3, r2
 801fdfa:	bfb8      	it	lt
 801fdfc:	4613      	movlt	r3, r2
 801fdfe:	b21b      	sxth	r3, r3
}
 801fe00:	4618      	mov	r0, r3
 801fe02:	370c      	adds	r7, #12
 801fe04:	46bd      	mov	sp, r7
 801fe06:	f85d 7b04 	ldr.w	r7, [sp], #4
 801fe0a:	4770      	bx	lr

0801fe0c <mg_uecc_verify>:

int mg_uecc_verify(const uint8_t *public_key, const uint8_t *message_hash,
                   unsigned hash_size, const uint8_t *signature,
                   MG_UECC_Curve curve) {
 801fe0c:	b590      	push	{r4, r7, lr}
 801fe0e:	b0ff      	sub	sp, #508	@ 0x1fc
 801fe10:	af02      	add	r7, sp, #8
 801fe12:	f507 74f8 	add.w	r4, r7, #496	@ 0x1f0
 801fe16:	f5a4 74f2 	sub.w	r4, r4, #484	@ 0x1e4
 801fe1a:	6020      	str	r0, [r4, #0]
 801fe1c:	f507 70f8 	add.w	r0, r7, #496	@ 0x1f0
 801fe20:	f5a0 70f4 	sub.w	r0, r0, #488	@ 0x1e8
 801fe24:	6001      	str	r1, [r0, #0]
 801fe26:	f507 71f8 	add.w	r1, r7, #496	@ 0x1f0
 801fe2a:	f5a1 71f6 	sub.w	r1, r1, #492	@ 0x1ec
 801fe2e:	600a      	str	r2, [r1, #0]
 801fe30:	f507 72f8 	add.w	r2, r7, #496	@ 0x1f0
 801fe34:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 801fe38:	6013      	str	r3, [r2, #0]
  mg_uecc_word_t *_public = (mg_uecc_word_t *) public_key;
#else
  mg_uecc_word_t _public[MG_UECC_MAX_WORDS * 2];
#endif
  mg_uecc_word_t r[MG_UECC_MAX_WORDS], s[MG_UECC_MAX_WORDS];
  wordcount_t num_words = curve->num_words;
 801fe3a:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 801fe3e:	781b      	ldrb	r3, [r3, #0]
 801fe40:	f887 31ed 	strb.w	r3, [r7, #493]	@ 0x1ed
  wordcount_t num_n_words = BITS_TO_WORDS(curve->num_n_bits);
 801fe44:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 801fe48:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801fe4c:	331f      	adds	r3, #31
 801fe4e:	2b00      	cmp	r3, #0
 801fe50:	da00      	bge.n	801fe54 <mg_uecc_verify+0x48>
 801fe52:	331f      	adds	r3, #31
 801fe54:	115b      	asrs	r3, r3, #5
 801fe56:	f887 31ec 	strb.w	r3, [r7, #492]	@ 0x1ec

  rx[num_n_words - 1] = 0;
 801fe5a:	f997 31ec 	ldrsb.w	r3, [r7, #492]	@ 0x1ec
 801fe5e:	3b01      	subs	r3, #1
 801fe60:	009b      	lsls	r3, r3, #2
 801fe62:	f503 73f8 	add.w	r3, r3, #496	@ 0x1f0
 801fe66:	443b      	add	r3, r7
 801fe68:	2200      	movs	r2, #0
 801fe6a:	f843 2cd0 	str.w	r2, [r3, #-208]
  r[num_n_words - 1] = 0;
 801fe6e:	f997 31ec 	ldrsb.w	r3, [r7, #492]	@ 0x1ec
 801fe72:	1e5a      	subs	r2, r3, #1
 801fe74:	f507 73f8 	add.w	r3, r7, #496	@ 0x1f0
 801fe78:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 801fe7c:	2100      	movs	r1, #0
 801fe7e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  s[num_n_words - 1] = 0;
 801fe82:	f997 31ec 	ldrsb.w	r3, [r7, #492]	@ 0x1ec
 801fe86:	1e5a      	subs	r2, r3, #1
 801fe88:	f507 73f8 	add.w	r3, r7, #496	@ 0x1f0
 801fe8c:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 801fe90:	2100      	movs	r1, #0
 801fe92:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

#if MG_UECC_VLI_NATIVE_LITTLE_ENDIAN
  bcopy((uint8_t *) r, signature, curve->num_bytes);
  bcopy((uint8_t *) s, signature + curve->num_bytes, curve->num_bytes);
#else
  mg_uecc_vli_bytesToNative(_public, public_key, curve->num_bytes);
 801fe96:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 801fe9a:	f993 3001 	ldrsb.w	r3, [r3, #1]
 801fe9e:	461a      	mov	r2, r3
 801fea0:	f507 73f8 	add.w	r3, r7, #496	@ 0x1f0
 801fea4:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 801fea8:	f107 0050 	add.w	r0, r7, #80	@ 0x50
 801feac:	6819      	ldr	r1, [r3, #0]
 801feae:	f7ff fbac 	bl	801f60a <mg_uecc_vli_bytesToNative>
  mg_uecc_vli_bytesToNative(_public + num_words, public_key + curve->num_bytes,
 801feb2:	f997 31ed 	ldrsb.w	r3, [r7, #493]	@ 0x1ed
 801feb6:	009b      	lsls	r3, r3, #2
 801feb8:	f107 0250 	add.w	r2, r7, #80	@ 0x50
 801febc:	18d0      	adds	r0, r2, r3
 801febe:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 801fec2:	f993 3001 	ldrsb.w	r3, [r3, #1]
 801fec6:	461a      	mov	r2, r3
 801fec8:	f507 73f8 	add.w	r3, r7, #496	@ 0x1f0
 801fecc:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 801fed0:	681b      	ldr	r3, [r3, #0]
 801fed2:	1899      	adds	r1, r3, r2
                            curve->num_bytes);
 801fed4:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 801fed8:	f993 3001 	ldrsb.w	r3, [r3, #1]
  mg_uecc_vli_bytesToNative(_public + num_words, public_key + curve->num_bytes,
 801fedc:	461a      	mov	r2, r3
 801fede:	f7ff fb94 	bl	801f60a <mg_uecc_vli_bytesToNative>
  mg_uecc_vli_bytesToNative(r, signature, curve->num_bytes);
 801fee2:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 801fee6:	f993 3001 	ldrsb.w	r3, [r3, #1]
 801feea:	461a      	mov	r2, r3
 801feec:	f507 73f8 	add.w	r3, r7, #496	@ 0x1f0
 801fef0:	f5a3 73f8 	sub.w	r3, r3, #496	@ 0x1f0
 801fef4:	f107 0030 	add.w	r0, r7, #48	@ 0x30
 801fef8:	6819      	ldr	r1, [r3, #0]
 801fefa:	f7ff fb86 	bl	801f60a <mg_uecc_vli_bytesToNative>
  mg_uecc_vli_bytesToNative(s, signature + curve->num_bytes, curve->num_bytes);
 801fefe:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 801ff02:	f993 3001 	ldrsb.w	r3, [r3, #1]
 801ff06:	461a      	mov	r2, r3
 801ff08:	f507 73f8 	add.w	r3, r7, #496	@ 0x1f0
 801ff0c:	f5a3 73f8 	sub.w	r3, r3, #496	@ 0x1f0
 801ff10:	681b      	ldr	r3, [r3, #0]
 801ff12:	1899      	adds	r1, r3, r2
 801ff14:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 801ff18:	f993 3001 	ldrsb.w	r3, [r3, #1]
 801ff1c:	461a      	mov	r2, r3
 801ff1e:	f107 0310 	add.w	r3, r7, #16
 801ff22:	4618      	mov	r0, r3
 801ff24:	f7ff fb71 	bl	801f60a <mg_uecc_vli_bytesToNative>
#endif

  /* r, s must not be 0. */
  if (mg_uecc_vli_isZero(r, num_words) || mg_uecc_vli_isZero(s, num_words)) {
 801ff28:	f997 21ed 	ldrsb.w	r2, [r7, #493]	@ 0x1ed
 801ff2c:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 801ff30:	4611      	mov	r1, r2
 801ff32:	4618      	mov	r0, r3
 801ff34:	f7fd fe05 	bl	801db42 <mg_uecc_vli_isZero>
 801ff38:	4603      	mov	r3, r0
 801ff3a:	2b00      	cmp	r3, #0
 801ff3c:	d10a      	bne.n	801ff54 <mg_uecc_verify+0x148>
 801ff3e:	f997 21ed 	ldrsb.w	r2, [r7, #493]	@ 0x1ed
 801ff42:	f107 0310 	add.w	r3, r7, #16
 801ff46:	4611      	mov	r1, r2
 801ff48:	4618      	mov	r0, r3
 801ff4a:	f7fd fdfa 	bl	801db42 <mg_uecc_vli_isZero>
 801ff4e:	4603      	mov	r3, r0
 801ff50:	2b00      	cmp	r3, #0
 801ff52:	d001      	beq.n	801ff58 <mg_uecc_verify+0x14c>
    return 0;
 801ff54:	2300      	movs	r3, #0
 801ff56:	e220      	b.n	802039a <mg_uecc_verify+0x58e>
  }

  /* r, s must be < n. */
  if (mg_uecc_vli_cmp_unsafe(curve->n, r, num_n_words) != 1 ||
 801ff58:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 801ff5c:	3324      	adds	r3, #36	@ 0x24
 801ff5e:	f997 21ec 	ldrsb.w	r2, [r7, #492]	@ 0x1ec
 801ff62:	f107 0130 	add.w	r1, r7, #48	@ 0x30
 801ff66:	4618      	mov	r0, r3
 801ff68:	f7fd feb5 	bl	801dcd6 <mg_uecc_vli_cmp_unsafe>
 801ff6c:	4603      	mov	r3, r0
 801ff6e:	2b01      	cmp	r3, #1
 801ff70:	d10c      	bne.n	801ff8c <mg_uecc_verify+0x180>
      mg_uecc_vli_cmp_unsafe(curve->n, s, num_n_words) != 1) {
 801ff72:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 801ff76:	3324      	adds	r3, #36	@ 0x24
 801ff78:	f997 21ec 	ldrsb.w	r2, [r7, #492]	@ 0x1ec
 801ff7c:	f107 0110 	add.w	r1, r7, #16
 801ff80:	4618      	mov	r0, r3
 801ff82:	f7fd fea8 	bl	801dcd6 <mg_uecc_vli_cmp_unsafe>
 801ff86:	4603      	mov	r3, r0
  if (mg_uecc_vli_cmp_unsafe(curve->n, r, num_n_words) != 1 ||
 801ff88:	2b01      	cmp	r3, #1
 801ff8a:	d001      	beq.n	801ff90 <mg_uecc_verify+0x184>
    return 0;
 801ff8c:	2300      	movs	r3, #0
 801ff8e:	e204      	b.n	802039a <mg_uecc_verify+0x58e>
  }

  /* Calculate u1 and u2. */
  mg_uecc_vli_modInv(z, s, curve->n, num_n_words); /* z = 1/s */
 801ff90:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 801ff94:	f103 0224 	add.w	r2, r3, #36	@ 0x24
 801ff98:	f997 31ec 	ldrsb.w	r3, [r7, #492]	@ 0x1ec
 801ff9c:	f107 0110 	add.w	r1, r7, #16
 801ffa0:	f507 70c0 	add.w	r0, r7, #384	@ 0x180
 801ffa4:	f7fe fafd 	bl	801e5a2 <mg_uecc_vli_modInv>
  u1[num_n_words - 1] = 0;
 801ffa8:	f997 31ec 	ldrsb.w	r3, [r7, #492]	@ 0x1ec
 801ffac:	3b01      	subs	r3, #1
 801ffae:	009b      	lsls	r3, r3, #2
 801ffb0:	f503 73f8 	add.w	r3, r3, #496	@ 0x1f0
 801ffb4:	443b      	add	r3, r7
 801ffb6:	2200      	movs	r2, #0
 801ffb8:	f843 2c30 	str.w	r2, [r3, #-48]
  bits2int(u1, message_hash, hash_size, curve);
 801ffbc:	f507 73f8 	add.w	r3, r7, #496	@ 0x1f0
 801ffc0:	f5a3 72f6 	sub.w	r2, r3, #492	@ 0x1ec
 801ffc4:	f507 73f8 	add.w	r3, r7, #496	@ 0x1f0
 801ffc8:	f5a3 71f4 	sub.w	r1, r3, #488	@ 0x1e8
 801ffcc:	f507 70e0 	add.w	r0, r7, #448	@ 0x1c0
 801ffd0:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 801ffd4:	6812      	ldr	r2, [r2, #0]
 801ffd6:	6809      	ldr	r1, [r1, #0]
 801ffd8:	f7ff fb53 	bl	801f682 <bits2int>
  mg_uecc_vli_modMult(u1, u1, z, curve->n, num_n_words); /* u1 = e/s */
 801ffdc:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 801ffe0:	f103 0424 	add.w	r4, r3, #36	@ 0x24
 801ffe4:	f507 72c0 	add.w	r2, r7, #384	@ 0x180
 801ffe8:	f507 71e0 	add.w	r1, r7, #448	@ 0x1c0
 801ffec:	f507 70e0 	add.w	r0, r7, #448	@ 0x1c0
 801fff0:	f997 31ec 	ldrsb.w	r3, [r7, #492]	@ 0x1ec
 801fff4:	9300      	str	r3, [sp, #0]
 801fff6:	4623      	mov	r3, r4
 801fff8:	f7fe fa54 	bl	801e4a4 <mg_uecc_vli_modMult>
  mg_uecc_vli_modMult(u2, r, z, curve->n, num_n_words);  /* u2 = r/s */
 801fffc:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8020000:	f103 0424 	add.w	r4, r3, #36	@ 0x24
 8020004:	f507 72c0 	add.w	r2, r7, #384	@ 0x180
 8020008:	f107 0130 	add.w	r1, r7, #48	@ 0x30
 802000c:	f507 70d0 	add.w	r0, r7, #416	@ 0x1a0
 8020010:	f997 31ec 	ldrsb.w	r3, [r7, #492]	@ 0x1ec
 8020014:	9300      	str	r3, [sp, #0]
 8020016:	4623      	mov	r3, r4
 8020018:	f7fe fa44 	bl	801e4a4 <mg_uecc_vli_modMult>

  /* Calculate sum = G + Q. */
  mg_uecc_vli_set(sum, _public, num_words);
 802001c:	f997 21ed 	ldrsb.w	r2, [r7, #493]	@ 0x1ed
 8020020:	f107 0150 	add.w	r1, r7, #80	@ 0x50
 8020024:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8020028:	4618      	mov	r0, r3
 802002a:	f7fd fe2d 	bl	801dc88 <mg_uecc_vli_set>
  mg_uecc_vli_set(sum + num_words, _public + num_words, num_words);
 802002e:	f997 31ed 	ldrsb.w	r3, [r7, #493]	@ 0x1ed
 8020032:	009b      	lsls	r3, r3, #2
 8020034:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 8020038:	18d0      	adds	r0, r2, r3
 802003a:	f997 31ed 	ldrsb.w	r3, [r7, #493]	@ 0x1ed
 802003e:	009b      	lsls	r3, r3, #2
 8020040:	f107 0250 	add.w	r2, r7, #80	@ 0x50
 8020044:	4413      	add	r3, r2
 8020046:	f997 21ed 	ldrsb.w	r2, [r7, #493]	@ 0x1ed
 802004a:	4619      	mov	r1, r3
 802004c:	f7fd fe1c 	bl	801dc88 <mg_uecc_vli_set>
  mg_uecc_vli_set(tx, curve->G, num_words);
 8020050:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8020054:	f103 0144 	add.w	r1, r3, #68	@ 0x44
 8020058:	f997 21ed 	ldrsb.w	r2, [r7, #493]	@ 0x1ed
 802005c:	f107 03e0 	add.w	r3, r7, #224	@ 0xe0
 8020060:	4618      	mov	r0, r3
 8020062:	f7fd fe11 	bl	801dc88 <mg_uecc_vli_set>
  mg_uecc_vli_set(ty, curve->G + num_words, num_words);
 8020066:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 802006a:	f103 0244 	add.w	r2, r3, #68	@ 0x44
 802006e:	f997 31ed 	ldrsb.w	r3, [r7, #493]	@ 0x1ed
 8020072:	009b      	lsls	r3, r3, #2
 8020074:	18d1      	adds	r1, r2, r3
 8020076:	f997 21ed 	ldrsb.w	r2, [r7, #493]	@ 0x1ed
 802007a:	f107 03c0 	add.w	r3, r7, #192	@ 0xc0
 802007e:	4618      	mov	r0, r3
 8020080:	f7fd fe02 	bl	801dc88 <mg_uecc_vli_set>
  mg_uecc_vli_modSub(z, sum, tx, curve->p, num_words); /* z = x2 - x1 */
 8020084:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8020088:	1d1c      	adds	r4, r3, #4
 802008a:	f107 02e0 	add.w	r2, r7, #224	@ 0xe0
 802008e:	f507 71a0 	add.w	r1, r7, #320	@ 0x140
 8020092:	f507 70c0 	add.w	r0, r7, #384	@ 0x180
 8020096:	f997 31ed 	ldrsb.w	r3, [r7, #493]	@ 0x1ed
 802009a:	9300      	str	r3, [sp, #0]
 802009c:	4623      	mov	r3, r4
 802009e:	f7fe f8a8 	bl	801e1f2 <mg_uecc_vli_modSub>
  XYcZ_add(tx, ty, sum, sum + num_words, curve);
 80200a2:	f997 31ed 	ldrsb.w	r3, [r7, #493]	@ 0x1ed
 80200a6:	009b      	lsls	r3, r3, #2
 80200a8:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 80200ac:	18d4      	adds	r4, r2, r3
 80200ae:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 80200b2:	f107 01c0 	add.w	r1, r7, #192	@ 0xc0
 80200b6:	f107 00e0 	add.w	r0, r7, #224	@ 0xe0
 80200ba:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80200be:	9300      	str	r3, [sp, #0]
 80200c0:	4623      	mov	r3, r4
 80200c2:	f7fe fedd 	bl	801ee80 <XYcZ_add>
  mg_uecc_vli_modInv(z, z, curve->p, num_words); /* z = 1/z */
 80200c6:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80200ca:	1d1a      	adds	r2, r3, #4
 80200cc:	f997 31ed 	ldrsb.w	r3, [r7, #493]	@ 0x1ed
 80200d0:	f507 71c0 	add.w	r1, r7, #384	@ 0x180
 80200d4:	f507 70c0 	add.w	r0, r7, #384	@ 0x180
 80200d8:	f7fe fa63 	bl	801e5a2 <mg_uecc_vli_modInv>
  apply_z(sum, sum + num_words, z, curve);
 80200dc:	f997 31ed 	ldrsb.w	r3, [r7, #493]	@ 0x1ed
 80200e0:	009b      	lsls	r3, r3, #2
 80200e2:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 80200e6:	18d1      	adds	r1, r2, r3
 80200e8:	f507 72c0 	add.w	r2, r7, #384	@ 0x180
 80200ec:	f507 70a0 	add.w	r0, r7, #320	@ 0x140
 80200f0:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80200f4:	f7fe fe52 	bl	801ed9c <apply_z>

  /* Use Shamir's trick to calculate u1*G + u2*Q */
  points[0] = 0;
 80200f8:	f507 73f8 	add.w	r3, r7, #496	@ 0x1f0
 80200fc:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8020100:	2200      	movs	r2, #0
 8020102:	601a      	str	r2, [r3, #0]
  points[1] = curve->G;
 8020104:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8020108:	f103 0244 	add.w	r2, r3, #68	@ 0x44
 802010c:	f507 73f8 	add.w	r3, r7, #496	@ 0x1f0
 8020110:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8020114:	605a      	str	r2, [r3, #4]
  points[2] = _public;
 8020116:	f507 73f8 	add.w	r3, r7, #496	@ 0x1f0
 802011a:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 802011e:	f107 0250 	add.w	r2, r7, #80	@ 0x50
 8020122:	609a      	str	r2, [r3, #8]
  points[3] = sum;
 8020124:	f507 73f8 	add.w	r3, r7, #496	@ 0x1f0
 8020128:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 802012c:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 8020130:	60da      	str	r2, [r3, #12]
  num_bits = smax(mg_uecc_vli_numBits(u1, num_n_words),
 8020132:	f997 21ec 	ldrsb.w	r2, [r7, #492]	@ 0x1ec
 8020136:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 802013a:	4611      	mov	r1, r2
 802013c:	4618      	mov	r0, r3
 802013e:	f7fd fd6a 	bl	801dc16 <mg_uecc_vli_numBits>
 8020142:	4603      	mov	r3, r0
 8020144:	461c      	mov	r4, r3
 8020146:	f997 21ec 	ldrsb.w	r2, [r7, #492]	@ 0x1ec
 802014a:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 802014e:	4611      	mov	r1, r2
 8020150:	4618      	mov	r0, r3
 8020152:	f7fd fd60 	bl	801dc16 <mg_uecc_vli_numBits>
 8020156:	4603      	mov	r3, r0
 8020158:	4619      	mov	r1, r3
 802015a:	4620      	mov	r0, r4
 802015c:	f7ff fe40 	bl	801fde0 <smax>
 8020160:	4603      	mov	r3, r0
 8020162:	f8a7 31ea 	strh.w	r3, [r7, #490]	@ 0x1ea
                  mg_uecc_vli_numBits(u2, num_n_words));
  point =
      points[(!!mg_uecc_vli_testBit(u1, (bitcount_t) (num_bits - 1))) |
 8020166:	f8b7 31ea 	ldrh.w	r3, [r7, #490]	@ 0x1ea
 802016a:	3b01      	subs	r3, #1
 802016c:	b29b      	uxth	r3, r3
 802016e:	b21a      	sxth	r2, r3
 8020170:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8020174:	4611      	mov	r1, r2
 8020176:	4618      	mov	r0, r3
 8020178:	f7fd fd0d 	bl	801db96 <mg_uecc_vli_testBit>
 802017c:	4603      	mov	r3, r0
 802017e:	2b00      	cmp	r3, #0
 8020180:	bf14      	ite	ne
 8020182:	2301      	movne	r3, #1
 8020184:	2300      	moveq	r3, #0
 8020186:	b2db      	uxtb	r3, r3
 8020188:	461c      	mov	r4, r3
             ((!!mg_uecc_vli_testBit(u2, (bitcount_t) (num_bits - 1))) << 1)];
 802018a:	f8b7 31ea 	ldrh.w	r3, [r7, #490]	@ 0x1ea
 802018e:	3b01      	subs	r3, #1
 8020190:	b29b      	uxth	r3, r3
 8020192:	b21a      	sxth	r2, r3
 8020194:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8020198:	4611      	mov	r1, r2
 802019a:	4618      	mov	r0, r3
 802019c:	f7fd fcfb 	bl	801db96 <mg_uecc_vli_testBit>
 80201a0:	4603      	mov	r3, r0
 80201a2:	2b00      	cmp	r3, #0
 80201a4:	d001      	beq.n	80201aa <mg_uecc_verify+0x39e>
 80201a6:	2302      	movs	r3, #2
 80201a8:	e000      	b.n	80201ac <mg_uecc_verify+0x3a0>
 80201aa:	2300      	movs	r3, #0
      points[(!!mg_uecc_vli_testBit(u1, (bitcount_t) (num_bits - 1))) |
 80201ac:	ea43 0204 	orr.w	r2, r3, r4
  point =
 80201b0:	f507 73f8 	add.w	r3, r7, #496	@ 0x1f0
 80201b4:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 80201b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80201bc:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
  mg_uecc_vli_set(rx, point, num_words);
 80201c0:	f997 21ed 	ldrsb.w	r2, [r7, #493]	@ 0x1ed
 80201c4:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80201c8:	f8d7 11e4 	ldr.w	r1, [r7, #484]	@ 0x1e4
 80201cc:	4618      	mov	r0, r3
 80201ce:	f7fd fd5b 	bl	801dc88 <mg_uecc_vli_set>
  mg_uecc_vli_set(ry, point + num_words, num_words);
 80201d2:	f997 31ed 	ldrsb.w	r3, [r7, #493]	@ 0x1ed
 80201d6:	009b      	lsls	r3, r3, #2
 80201d8:	f8d7 21e4 	ldr.w	r2, [r7, #484]	@ 0x1e4
 80201dc:	18d1      	adds	r1, r2, r3
 80201de:	f997 21ed 	ldrsb.w	r2, [r7, #493]	@ 0x1ed
 80201e2:	f507 7380 	add.w	r3, r7, #256	@ 0x100
 80201e6:	4618      	mov	r0, r3
 80201e8:	f7fd fd4e 	bl	801dc88 <mg_uecc_vli_set>
  mg_uecc_vli_clear(z, num_words);
 80201ec:	f997 21ed 	ldrsb.w	r2, [r7, #493]	@ 0x1ed
 80201f0:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 80201f4:	4611      	mov	r1, r2
 80201f6:	4618      	mov	r0, r3
 80201f8:	f7fd fc82 	bl	801db00 <mg_uecc_vli_clear>
  z[0] = 1;
 80201fc:	2301      	movs	r3, #1
 80201fe:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180

  for (i = num_bits - 2; i >= 0; --i) {
 8020202:	f8b7 31ea 	ldrh.w	r3, [r7, #490]	@ 0x1ea
 8020206:	3b02      	subs	r3, #2
 8020208:	b29b      	uxth	r3, r3
 802020a:	f8a7 31ee 	strh.w	r3, [r7, #494]	@ 0x1ee
 802020e:	e087      	b.n	8020320 <mg_uecc_verify+0x514>
    mg_uecc_word_t index;
    curve->double_jacobian(rx, ry, z, curve);
 8020210:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8020214:	f8d3 40a4 	ldr.w	r4, [r3, #164]	@ 0xa4
 8020218:	f507 72c0 	add.w	r2, r7, #384	@ 0x180
 802021c:	f507 7180 	add.w	r1, r7, #256	@ 0x100
 8020220:	f507 7090 	add.w	r0, r7, #288	@ 0x120
 8020224:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8020228:	47a0      	blx	r4

    index = (!!mg_uecc_vli_testBit(u1, i)) |
 802022a:	f9b7 21ee 	ldrsh.w	r2, [r7, #494]	@ 0x1ee
 802022e:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8020232:	4611      	mov	r1, r2
 8020234:	4618      	mov	r0, r3
 8020236:	f7fd fcae 	bl	801db96 <mg_uecc_vli_testBit>
 802023a:	4603      	mov	r3, r0
 802023c:	2b00      	cmp	r3, #0
 802023e:	bf14      	ite	ne
 8020240:	2301      	movne	r3, #1
 8020242:	2300      	moveq	r3, #0
 8020244:	b2db      	uxtb	r3, r3
 8020246:	461c      	mov	r4, r3
            (mg_uecc_word_t) ((!!mg_uecc_vli_testBit(u2, i)) << 1);
 8020248:	f9b7 21ee 	ldrsh.w	r2, [r7, #494]	@ 0x1ee
 802024c:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8020250:	4611      	mov	r1, r2
 8020252:	4618      	mov	r0, r3
 8020254:	f7fd fc9f 	bl	801db96 <mg_uecc_vli_testBit>
 8020258:	4603      	mov	r3, r0
 802025a:	2b00      	cmp	r3, #0
 802025c:	d001      	beq.n	8020262 <mg_uecc_verify+0x456>
 802025e:	2302      	movs	r3, #2
 8020260:	e000      	b.n	8020264 <mg_uecc_verify+0x458>
 8020262:	2300      	movs	r3, #0
    index = (!!mg_uecc_vli_testBit(u1, i)) |
 8020264:	4323      	orrs	r3, r4
 8020266:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
    point = points[index];
 802026a:	f507 73f8 	add.w	r3, r7, #496	@ 0x1f0
 802026e:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8020272:	f8d7 21e0 	ldr.w	r2, [r7, #480]	@ 0x1e0
 8020276:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 802027a:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
    if (point) {
 802027e:	f8d7 31e4 	ldr.w	r3, [r7, #484]	@ 0x1e4
 8020282:	2b00      	cmp	r3, #0
 8020284:	d046      	beq.n	8020314 <mg_uecc_verify+0x508>
      mg_uecc_vli_set(tx, point, num_words);
 8020286:	f997 21ed 	ldrsb.w	r2, [r7, #493]	@ 0x1ed
 802028a:	f107 03e0 	add.w	r3, r7, #224	@ 0xe0
 802028e:	f8d7 11e4 	ldr.w	r1, [r7, #484]	@ 0x1e4
 8020292:	4618      	mov	r0, r3
 8020294:	f7fd fcf8 	bl	801dc88 <mg_uecc_vli_set>
      mg_uecc_vli_set(ty, point + num_words, num_words);
 8020298:	f997 31ed 	ldrsb.w	r3, [r7, #493]	@ 0x1ed
 802029c:	009b      	lsls	r3, r3, #2
 802029e:	f8d7 21e4 	ldr.w	r2, [r7, #484]	@ 0x1e4
 80202a2:	18d1      	adds	r1, r2, r3
 80202a4:	f997 21ed 	ldrsb.w	r2, [r7, #493]	@ 0x1ed
 80202a8:	f107 03c0 	add.w	r3, r7, #192	@ 0xc0
 80202ac:	4618      	mov	r0, r3
 80202ae:	f7fd fceb 	bl	801dc88 <mg_uecc_vli_set>
      apply_z(tx, ty, z, curve);
 80202b2:	f507 72c0 	add.w	r2, r7, #384	@ 0x180
 80202b6:	f107 01c0 	add.w	r1, r7, #192	@ 0xc0
 80202ba:	f107 00e0 	add.w	r0, r7, #224	@ 0xe0
 80202be:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80202c2:	f7fe fd6b 	bl	801ed9c <apply_z>
      mg_uecc_vli_modSub(tz, rx, tx, curve->p, num_words); /* Z = x2 - x1 */
 80202c6:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80202ca:	1d1c      	adds	r4, r3, #4
 80202cc:	f107 02e0 	add.w	r2, r7, #224	@ 0xe0
 80202d0:	f507 7190 	add.w	r1, r7, #288	@ 0x120
 80202d4:	f107 00a0 	add.w	r0, r7, #160	@ 0xa0
 80202d8:	f997 31ed 	ldrsb.w	r3, [r7, #493]	@ 0x1ed
 80202dc:	9300      	str	r3, [sp, #0]
 80202de:	4623      	mov	r3, r4
 80202e0:	f7fd ff87 	bl	801e1f2 <mg_uecc_vli_modSub>
      XYcZ_add(tx, ty, rx, ry, curve);
 80202e4:	f507 7480 	add.w	r4, r7, #256	@ 0x100
 80202e8:	f507 7290 	add.w	r2, r7, #288	@ 0x120
 80202ec:	f107 01c0 	add.w	r1, r7, #192	@ 0xc0
 80202f0:	f107 00e0 	add.w	r0, r7, #224	@ 0xe0
 80202f4:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80202f8:	9300      	str	r3, [sp, #0]
 80202fa:	4623      	mov	r3, r4
 80202fc:	f7fe fdc0 	bl	801ee80 <XYcZ_add>
      mg_uecc_vli_modMult_fast(z, z, tz, curve);
 8020300:	f107 02a0 	add.w	r2, r7, #160	@ 0xa0
 8020304:	f507 71c0 	add.w	r1, r7, #384	@ 0x180
 8020308:	f507 70c0 	add.w	r0, r7, #384	@ 0x180
 802030c:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8020310:	f7fe f8e3 	bl	801e4da <mg_uecc_vli_modMult_fast>
  for (i = num_bits - 2; i >= 0; --i) {
 8020314:	f8b7 31ee 	ldrh.w	r3, [r7, #494]	@ 0x1ee
 8020318:	3b01      	subs	r3, #1
 802031a:	b29b      	uxth	r3, r3
 802031c:	f8a7 31ee 	strh.w	r3, [r7, #494]	@ 0x1ee
 8020320:	f9b7 31ee 	ldrsh.w	r3, [r7, #494]	@ 0x1ee
 8020324:	2b00      	cmp	r3, #0
 8020326:	f6bf af73 	bge.w	8020210 <mg_uecc_verify+0x404>
    }
  }

  mg_uecc_vli_modInv(z, z, curve->p, num_words); /* Z = 1/Z */
 802032a:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 802032e:	1d1a      	adds	r2, r3, #4
 8020330:	f997 31ed 	ldrsb.w	r3, [r7, #493]	@ 0x1ed
 8020334:	f507 71c0 	add.w	r1, r7, #384	@ 0x180
 8020338:	f507 70c0 	add.w	r0, r7, #384	@ 0x180
 802033c:	f7fe f931 	bl	801e5a2 <mg_uecc_vli_modInv>
  apply_z(rx, ry, z, curve);
 8020340:	f507 72c0 	add.w	r2, r7, #384	@ 0x180
 8020344:	f507 7180 	add.w	r1, r7, #256	@ 0x100
 8020348:	f507 7090 	add.w	r0, r7, #288	@ 0x120
 802034c:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8020350:	f7fe fd24 	bl	801ed9c <apply_z>

  /* v = x1 (mod n) */
  if (mg_uecc_vli_cmp_unsafe(curve->n, rx, num_n_words) != 1) {
 8020354:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8020358:	3324      	adds	r3, #36	@ 0x24
 802035a:	f997 21ec 	ldrsb.w	r2, [r7, #492]	@ 0x1ec
 802035e:	f507 7190 	add.w	r1, r7, #288	@ 0x120
 8020362:	4618      	mov	r0, r3
 8020364:	f7fd fcb7 	bl	801dcd6 <mg_uecc_vli_cmp_unsafe>
 8020368:	4603      	mov	r3, r0
 802036a:	2b01      	cmp	r3, #1
 802036c:	d00b      	beq.n	8020386 <mg_uecc_verify+0x57a>
    mg_uecc_vli_sub(rx, rx, curve->n, num_n_words);
 802036e:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8020372:	f103 0224 	add.w	r2, r3, #36	@ 0x24
 8020376:	f997 31ec 	ldrsb.w	r3, [r7, #492]	@ 0x1ec
 802037a:	f507 7190 	add.w	r1, r7, #288	@ 0x120
 802037e:	f507 7090 	add.w	r0, r7, #288	@ 0x120
 8020382:	f7fd fdbb 	bl	801defc <mg_uecc_vli_sub>
  }

  /* Accept only if v == r. */
  return (int) (mg_uecc_vli_equal(rx, r, num_words));
 8020386:	f997 21ed 	ldrsb.w	r2, [r7, #493]	@ 0x1ed
 802038a:	f107 0130 	add.w	r1, r7, #48	@ 0x30
 802038e:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8020392:	4618      	mov	r0, r3
 8020394:	f7fd fcdb 	bl	801dd4e <mg_uecc_vli_equal>
 8020398:	4603      	mov	r3, r0
}
 802039a:	4618      	mov	r0, r3
 802039c:	f507 77fa 	add.w	r7, r7, #500	@ 0x1f4
 80203a0:	46bd      	mov	sp, r7
 80203a2:	bd90      	pop	{r4, r7, pc}

080203a4 <umaal>:
typedef int64_t sdlimb_t;

#define NLIMBS (256 / X25519_WBITS)
typedef limb_t mg_fe[NLIMBS];

static limb_t umaal(limb_t *carry, limb_t acc, limb_t mand, limb_t mier) {
 80203a4:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 80203a8:	b08f      	sub	sp, #60	@ 0x3c
 80203aa:	af00      	add	r7, sp, #0
 80203ac:	62f8      	str	r0, [r7, #44]	@ 0x2c
 80203ae:	62b9      	str	r1, [r7, #40]	@ 0x28
 80203b0:	627a      	str	r2, [r7, #36]	@ 0x24
 80203b2:	623b      	str	r3, [r7, #32]
  dlimb_t tmp = (dlimb_t) mand * mier + acc + *carry;
 80203b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80203b6:	2200      	movs	r2, #0
 80203b8:	469a      	mov	sl, r3
 80203ba:	4693      	mov	fp, r2
 80203bc:	6a3b      	ldr	r3, [r7, #32]
 80203be:	2200      	movs	r2, #0
 80203c0:	61bb      	str	r3, [r7, #24]
 80203c2:	61fa      	str	r2, [r7, #28]
 80203c4:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80203c8:	4603      	mov	r3, r0
 80203ca:	fb03 f20b 	mul.w	r2, r3, fp
 80203ce:	460b      	mov	r3, r1
 80203d0:	fb0a f303 	mul.w	r3, sl, r3
 80203d4:	4413      	add	r3, r2
 80203d6:	4602      	mov	r2, r0
 80203d8:	fbaa 4502 	umull	r4, r5, sl, r2
 80203dc:	442b      	add	r3, r5
 80203de:	461d      	mov	r5, r3
 80203e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80203e2:	2200      	movs	r2, #0
 80203e4:	613b      	str	r3, [r7, #16]
 80203e6:	617a      	str	r2, [r7, #20]
 80203e8:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80203ec:	460b      	mov	r3, r1
 80203ee:	eb14 0803 	adds.w	r8, r4, r3
 80203f2:	4613      	mov	r3, r2
 80203f4:	eb45 0903 	adc.w	r9, r5, r3
 80203f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80203fa:	681b      	ldr	r3, [r3, #0]
 80203fc:	2200      	movs	r2, #0
 80203fe:	60bb      	str	r3, [r7, #8]
 8020400:	60fa      	str	r2, [r7, #12]
 8020402:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8020406:	460b      	mov	r3, r1
 8020408:	eb18 0303 	adds.w	r3, r8, r3
 802040c:	603b      	str	r3, [r7, #0]
 802040e:	4613      	mov	r3, r2
 8020410:	eb49 0303 	adc.w	r3, r9, r3
 8020414:	607b      	str	r3, [r7, #4]
 8020416:	e9d7 3400 	ldrd	r3, r4, [r7]
 802041a:	e9c7 340c 	strd	r3, r4, [r7, #48]	@ 0x30
  *carry = (limb_t) (tmp >> X25519_WBITS);
 802041e:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 8020422:	f04f 0200 	mov.w	r2, #0
 8020426:	f04f 0300 	mov.w	r3, #0
 802042a:	000a      	movs	r2, r1
 802042c:	2300      	movs	r3, #0
 802042e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8020430:	601a      	str	r2, [r3, #0]
  return (limb_t) tmp;
 8020432:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
}
 8020434:	4618      	mov	r0, r3
 8020436:	373c      	adds	r7, #60	@ 0x3c
 8020438:	46bd      	mov	sp, r7
 802043a:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 802043e:	4770      	bx	lr

08020440 <adc>:

// These functions are implemented in terms of umaal on ARM
static limb_t adc(limb_t *carry, limb_t acc, limb_t mand) {
 8020440:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8020444:	b08b      	sub	sp, #44	@ 0x2c
 8020446:	af00      	add	r7, sp, #0
 8020448:	61f8      	str	r0, [r7, #28]
 802044a:	61b9      	str	r1, [r7, #24]
 802044c:	617a      	str	r2, [r7, #20]
  dlimb_t total = (dlimb_t) *carry + acc + mand;
 802044e:	69fb      	ldr	r3, [r7, #28]
 8020450:	681b      	ldr	r3, [r3, #0]
 8020452:	2200      	movs	r2, #0
 8020454:	60bb      	str	r3, [r7, #8]
 8020456:	60fa      	str	r2, [r7, #12]
 8020458:	69bb      	ldr	r3, [r7, #24]
 802045a:	2200      	movs	r2, #0
 802045c:	469a      	mov	sl, r3
 802045e:	4693      	mov	fp, r2
 8020460:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8020464:	460b      	mov	r3, r1
 8020466:	eb13 040a 	adds.w	r4, r3, sl
 802046a:	4613      	mov	r3, r2
 802046c:	eb43 050b 	adc.w	r5, r3, fp
 8020470:	697b      	ldr	r3, [r7, #20]
 8020472:	2200      	movs	r2, #0
 8020474:	4698      	mov	r8, r3
 8020476:	4691      	mov	r9, r2
 8020478:	eb14 0308 	adds.w	r3, r4, r8
 802047c:	603b      	str	r3, [r7, #0]
 802047e:	eb45 0309 	adc.w	r3, r5, r9
 8020482:	607b      	str	r3, [r7, #4]
 8020484:	e9d7 3400 	ldrd	r3, r4, [r7]
 8020488:	e9c7 3408 	strd	r3, r4, [r7, #32]
  *carry = (limb_t) (total >> X25519_WBITS);
 802048c:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8020490:	f04f 0200 	mov.w	r2, #0
 8020494:	f04f 0300 	mov.w	r3, #0
 8020498:	000a      	movs	r2, r1
 802049a:	2300      	movs	r3, #0
 802049c:	69fb      	ldr	r3, [r7, #28]
 802049e:	601a      	str	r2, [r3, #0]
  return (limb_t) total;
 80204a0:	6a3b      	ldr	r3, [r7, #32]
}
 80204a2:	4618      	mov	r0, r3
 80204a4:	372c      	adds	r7, #44	@ 0x2c
 80204a6:	46bd      	mov	sp, r7
 80204a8:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 80204ac:	4770      	bx	lr

080204ae <adc0>:

static limb_t adc0(limb_t *carry, limb_t acc) {
 80204ae:	e92d 03b0 	stmdb	sp!, {r4, r5, r7, r8, r9}
 80204b2:	b085      	sub	sp, #20
 80204b4:	af00      	add	r7, sp, #0
 80204b6:	6078      	str	r0, [r7, #4]
 80204b8:	6039      	str	r1, [r7, #0]
  dlimb_t total = (dlimb_t) *carry + acc;
 80204ba:	6879      	ldr	r1, [r7, #4]
 80204bc:	6809      	ldr	r1, [r1, #0]
 80204be:	2000      	movs	r0, #0
 80204c0:	460c      	mov	r4, r1
 80204c2:	4605      	mov	r5, r0
 80204c4:	6839      	ldr	r1, [r7, #0]
 80204c6:	2000      	movs	r0, #0
 80204c8:	460a      	mov	r2, r1
 80204ca:	4603      	mov	r3, r0
 80204cc:	eb14 0802 	adds.w	r8, r4, r2
 80204d0:	eb45 0903 	adc.w	r9, r5, r3
 80204d4:	e9c7 8902 	strd	r8, r9, [r7, #8]
  *carry = (limb_t) (total >> X25519_WBITS);
 80204d8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80204dc:	f04f 0200 	mov.w	r2, #0
 80204e0:	f04f 0300 	mov.w	r3, #0
 80204e4:	000a      	movs	r2, r1
 80204e6:	2300      	movs	r3, #0
 80204e8:	687b      	ldr	r3, [r7, #4]
 80204ea:	601a      	str	r2, [r3, #0]
  return (limb_t) total;
 80204ec:	68bb      	ldr	r3, [r7, #8]
}
 80204ee:	4618      	mov	r0, r3
 80204f0:	3714      	adds	r7, #20
 80204f2:	46bd      	mov	sp, r7
 80204f4:	e8bd 03b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9}
 80204f8:	4770      	bx	lr

080204fa <propagate>:

// - Precondition: carry is small.
// - Invariant: result of propagate is < 2^255 + 1 word
// - In particular, always less than 2p.
// - Also, output x >= min(x,19)
static void propagate(mg_fe x, limb_t over) {
 80204fa:	b590      	push	{r4, r7, lr}
 80204fc:	b085      	sub	sp, #20
 80204fe:	af00      	add	r7, sp, #0
 8020500:	6078      	str	r0, [r7, #4]
 8020502:	6039      	str	r1, [r7, #0]
  unsigned i;
  limb_t carry;
  over = x[NLIMBS - 1] >> (X25519_WBITS - 1) | over << 1;
 8020504:	687b      	ldr	r3, [r7, #4]
 8020506:	331c      	adds	r3, #28
 8020508:	681b      	ldr	r3, [r3, #0]
 802050a:	0fda      	lsrs	r2, r3, #31
 802050c:	683b      	ldr	r3, [r7, #0]
 802050e:	005b      	lsls	r3, r3, #1
 8020510:	4313      	orrs	r3, r2
 8020512:	603b      	str	r3, [r7, #0]
  x[NLIMBS - 1] &= ~((limb_t) 1 << (X25519_WBITS - 1));
 8020514:	687b      	ldr	r3, [r7, #4]
 8020516:	331c      	adds	r3, #28
 8020518:	681a      	ldr	r2, [r3, #0]
 802051a:	687b      	ldr	r3, [r7, #4]
 802051c:	331c      	adds	r3, #28
 802051e:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8020522:	601a      	str	r2, [r3, #0]

  carry = over * 19;
 8020524:	683a      	ldr	r2, [r7, #0]
 8020526:	4613      	mov	r3, r2
 8020528:	00db      	lsls	r3, r3, #3
 802052a:	4413      	add	r3, r2
 802052c:	005b      	lsls	r3, r3, #1
 802052e:	4413      	add	r3, r2
 8020530:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < NLIMBS; i++) {
 8020532:	2300      	movs	r3, #0
 8020534:	60fb      	str	r3, [r7, #12]
 8020536:	e012      	b.n	802055e <propagate+0x64>
    x[i] = adc0(&carry, x[i]);
 8020538:	68fb      	ldr	r3, [r7, #12]
 802053a:	009b      	lsls	r3, r3, #2
 802053c:	687a      	ldr	r2, [r7, #4]
 802053e:	4413      	add	r3, r2
 8020540:	6819      	ldr	r1, [r3, #0]
 8020542:	68fb      	ldr	r3, [r7, #12]
 8020544:	009b      	lsls	r3, r3, #2
 8020546:	687a      	ldr	r2, [r7, #4]
 8020548:	18d4      	adds	r4, r2, r3
 802054a:	f107 0308 	add.w	r3, r7, #8
 802054e:	4618      	mov	r0, r3
 8020550:	f7ff ffad 	bl	80204ae <adc0>
 8020554:	4603      	mov	r3, r0
 8020556:	6023      	str	r3, [r4, #0]
  for (i = 0; i < NLIMBS; i++) {
 8020558:	68fb      	ldr	r3, [r7, #12]
 802055a:	3301      	adds	r3, #1
 802055c:	60fb      	str	r3, [r7, #12]
 802055e:	68fb      	ldr	r3, [r7, #12]
 8020560:	2b07      	cmp	r3, #7
 8020562:	d9e9      	bls.n	8020538 <propagate+0x3e>
  }
}
 8020564:	bf00      	nop
 8020566:	bf00      	nop
 8020568:	3714      	adds	r7, #20
 802056a:	46bd      	mov	sp, r7
 802056c:	bd90      	pop	{r4, r7, pc}

0802056e <add>:

static void add(mg_fe out, const mg_fe a, const mg_fe b) {
 802056e:	b590      	push	{r4, r7, lr}
 8020570:	b087      	sub	sp, #28
 8020572:	af00      	add	r7, sp, #0
 8020574:	60f8      	str	r0, [r7, #12]
 8020576:	60b9      	str	r1, [r7, #8]
 8020578:	607a      	str	r2, [r7, #4]
  unsigned i;
  limb_t carry = 0;
 802057a:	2300      	movs	r3, #0
 802057c:	613b      	str	r3, [r7, #16]
  for (i = 0; i < NLIMBS; i++) {
 802057e:	2300      	movs	r3, #0
 8020580:	617b      	str	r3, [r7, #20]
 8020582:	e018      	b.n	80205b6 <add+0x48>
    out[i] = adc(&carry, a[i], b[i]);
 8020584:	697b      	ldr	r3, [r7, #20]
 8020586:	009b      	lsls	r3, r3, #2
 8020588:	68ba      	ldr	r2, [r7, #8]
 802058a:	4413      	add	r3, r2
 802058c:	6819      	ldr	r1, [r3, #0]
 802058e:	697b      	ldr	r3, [r7, #20]
 8020590:	009b      	lsls	r3, r3, #2
 8020592:	687a      	ldr	r2, [r7, #4]
 8020594:	4413      	add	r3, r2
 8020596:	6818      	ldr	r0, [r3, #0]
 8020598:	697b      	ldr	r3, [r7, #20]
 802059a:	009b      	lsls	r3, r3, #2
 802059c:	68fa      	ldr	r2, [r7, #12]
 802059e:	18d4      	adds	r4, r2, r3
 80205a0:	f107 0310 	add.w	r3, r7, #16
 80205a4:	4602      	mov	r2, r0
 80205a6:	4618      	mov	r0, r3
 80205a8:	f7ff ff4a 	bl	8020440 <adc>
 80205ac:	4603      	mov	r3, r0
 80205ae:	6023      	str	r3, [r4, #0]
  for (i = 0; i < NLIMBS; i++) {
 80205b0:	697b      	ldr	r3, [r7, #20]
 80205b2:	3301      	adds	r3, #1
 80205b4:	617b      	str	r3, [r7, #20]
 80205b6:	697b      	ldr	r3, [r7, #20]
 80205b8:	2b07      	cmp	r3, #7
 80205ba:	d9e3      	bls.n	8020584 <add+0x16>
  }
  propagate(out, carry);
 80205bc:	693b      	ldr	r3, [r7, #16]
 80205be:	4619      	mov	r1, r3
 80205c0:	68f8      	ldr	r0, [r7, #12]
 80205c2:	f7ff ff9a 	bl	80204fa <propagate>
}
 80205c6:	bf00      	nop
 80205c8:	371c      	adds	r7, #28
 80205ca:	46bd      	mov	sp, r7
 80205cc:	bd90      	pop	{r4, r7, pc}

080205ce <sub>:

static void sub(mg_fe out, const mg_fe a, const mg_fe b) {
 80205ce:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80205d2:	b08a      	sub	sp, #40	@ 0x28
 80205d4:	af00      	add	r7, sp, #0
 80205d6:	6178      	str	r0, [r7, #20]
 80205d8:	6139      	str	r1, [r7, #16]
 80205da:	60fa      	str	r2, [r7, #12]
  unsigned i;
  sdlimb_t carry = -38;
 80205dc:	f06f 0225 	mvn.w	r2, #37	@ 0x25
 80205e0:	f04f 33ff 	mov.w	r3, #4294967295
 80205e4:	e9c7 2306 	strd	r2, r3, [r7, #24]
  for (i = 0; i < NLIMBS; i++) {
 80205e8:	2300      	movs	r3, #0
 80205ea:	627b      	str	r3, [r7, #36]	@ 0x24
 80205ec:	e032      	b.n	8020654 <sub+0x86>
    carry = carry + a[i] - b[i];
 80205ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80205f0:	009b      	lsls	r3, r3, #2
 80205f2:	693a      	ldr	r2, [r7, #16]
 80205f4:	4413      	add	r3, r2
 80205f6:	681b      	ldr	r3, [r3, #0]
 80205f8:	2200      	movs	r2, #0
 80205fa:	4698      	mov	r8, r3
 80205fc:	4691      	mov	r9, r2
 80205fe:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8020602:	eb18 0402 	adds.w	r4, r8, r2
 8020606:	eb49 0503 	adc.w	r5, r9, r3
 802060a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 802060c:	009b      	lsls	r3, r3, #2
 802060e:	68fa      	ldr	r2, [r7, #12]
 8020610:	4413      	add	r3, r2
 8020612:	681b      	ldr	r3, [r3, #0]
 8020614:	2200      	movs	r2, #0
 8020616:	469a      	mov	sl, r3
 8020618:	4693      	mov	fp, r2
 802061a:	ebb4 030a 	subs.w	r3, r4, sl
 802061e:	603b      	str	r3, [r7, #0]
 8020620:	eb65 030b 	sbc.w	r3, r5, fp
 8020624:	607b      	str	r3, [r7, #4]
 8020626:	e9d7 2300 	ldrd	r2, r3, [r7]
 802062a:	e9c7 2306 	strd	r2, r3, [r7, #24]
    out[i] = (limb_t) carry;
 802062e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8020630:	009b      	lsls	r3, r3, #2
 8020632:	697a      	ldr	r2, [r7, #20]
 8020634:	4413      	add	r3, r2
 8020636:	69ba      	ldr	r2, [r7, #24]
 8020638:	601a      	str	r2, [r3, #0]
    carry >>= X25519_WBITS;
 802063a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 802063e:	f04f 0200 	mov.w	r2, #0
 8020642:	f04f 0300 	mov.w	r3, #0
 8020646:	000a      	movs	r2, r1
 8020648:	17cb      	asrs	r3, r1, #31
 802064a:	e9c7 2306 	strd	r2, r3, [r7, #24]
  for (i = 0; i < NLIMBS; i++) {
 802064e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8020650:	3301      	adds	r3, #1
 8020652:	627b      	str	r3, [r7, #36]	@ 0x24
 8020654:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8020656:	2b07      	cmp	r3, #7
 8020658:	d9c9      	bls.n	80205ee <sub+0x20>
  }
  propagate(out, (limb_t) (1 + carry));
 802065a:	69bb      	ldr	r3, [r7, #24]
 802065c:	3301      	adds	r3, #1
 802065e:	4619      	mov	r1, r3
 8020660:	6978      	ldr	r0, [r7, #20]
 8020662:	f7ff ff4a 	bl	80204fa <propagate>
}
 8020666:	bf00      	nop
 8020668:	3728      	adds	r7, #40	@ 0x28
 802066a:	46bd      	mov	sp, r7
 802066c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08020670 <mul>:

// `b` can contain less than 8 limbs, thus we use `limb_t *` instead of `mg_fe`
// to avoid build warnings
static void mul(mg_fe out, const mg_fe a, const limb_t *b, unsigned nb) {
 8020670:	b5b0      	push	{r4, r5, r7, lr}
 8020672:	b09a      	sub	sp, #104	@ 0x68
 8020674:	af00      	add	r7, sp, #0
 8020676:	60f8      	str	r0, [r7, #12]
 8020678:	60b9      	str	r1, [r7, #8]
 802067a:	607a      	str	r2, [r7, #4]
 802067c:	603b      	str	r3, [r7, #0]
  limb_t accum[2 * NLIMBS] = {0};
 802067e:	f107 031c 	add.w	r3, r7, #28
 8020682:	2240      	movs	r2, #64	@ 0x40
 8020684:	2100      	movs	r1, #0
 8020686:	4618      	mov	r0, r3
 8020688:	f003 ff00 	bl	802448c <memset>
  unsigned i, j;

  limb_t carry2;
  for (i = 0; i < nb; i++) {
 802068c:	2300      	movs	r3, #0
 802068e:	667b      	str	r3, [r7, #100]	@ 0x64
 8020690:	e03a      	b.n	8020708 <mul+0x98>
    limb_t mand = b[i];
 8020692:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8020694:	009b      	lsls	r3, r3, #2
 8020696:	687a      	ldr	r2, [r7, #4]
 8020698:	4413      	add	r3, r2
 802069a:	681b      	ldr	r3, [r3, #0]
 802069c:	65fb      	str	r3, [r7, #92]	@ 0x5c
    carry2 = 0;
 802069e:	2300      	movs	r3, #0
 80206a0:	61bb      	str	r3, [r7, #24]
    for (j = 0; j < NLIMBS; j++) {
 80206a2:	2300      	movs	r3, #0
 80206a4:	663b      	str	r3, [r7, #96]	@ 0x60
 80206a6:	e020      	b.n	80206ea <mul+0x7a>
      limb_t tmp;                        // "a" may be misaligned
      memcpy(&tmp, &a[j], sizeof(tmp));  // So make an aligned copy
 80206a8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80206aa:	009b      	lsls	r3, r3, #2
 80206ac:	68ba      	ldr	r2, [r7, #8]
 80206ae:	4413      	add	r3, r2
 80206b0:	681b      	ldr	r3, [r3, #0]
 80206b2:	617b      	str	r3, [r7, #20]
      accum[i + j] = umaal(&carry2, accum[i + j], mand, tmp);
 80206b4:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80206b6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80206b8:	4413      	add	r3, r2
 80206ba:	009b      	lsls	r3, r3, #2
 80206bc:	3368      	adds	r3, #104	@ 0x68
 80206be:	443b      	add	r3, r7
 80206c0:	f853 1c4c 	ldr.w	r1, [r3, #-76]
 80206c4:	697d      	ldr	r5, [r7, #20]
 80206c6:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80206c8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80206ca:	18d4      	adds	r4, r2, r3
 80206cc:	f107 0018 	add.w	r0, r7, #24
 80206d0:	462b      	mov	r3, r5
 80206d2:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80206d4:	f7ff fe66 	bl	80203a4 <umaal>
 80206d8:	4602      	mov	r2, r0
 80206da:	00a3      	lsls	r3, r4, #2
 80206dc:	3368      	adds	r3, #104	@ 0x68
 80206de:	443b      	add	r3, r7
 80206e0:	f843 2c4c 	str.w	r2, [r3, #-76]
    for (j = 0; j < NLIMBS; j++) {
 80206e4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80206e6:	3301      	adds	r3, #1
 80206e8:	663b      	str	r3, [r7, #96]	@ 0x60
 80206ea:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80206ec:	2b07      	cmp	r3, #7
 80206ee:	d9db      	bls.n	80206a8 <mul+0x38>
    }
    accum[i + j] = carry2;
 80206f0:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80206f2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80206f4:	4413      	add	r3, r2
 80206f6:	69ba      	ldr	r2, [r7, #24]
 80206f8:	009b      	lsls	r3, r3, #2
 80206fa:	3368      	adds	r3, #104	@ 0x68
 80206fc:	443b      	add	r3, r7
 80206fe:	f843 2c4c 	str.w	r2, [r3, #-76]
  for (i = 0; i < nb; i++) {
 8020702:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8020704:	3301      	adds	r3, #1
 8020706:	667b      	str	r3, [r7, #100]	@ 0x64
 8020708:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 802070a:	683b      	ldr	r3, [r7, #0]
 802070c:	429a      	cmp	r2, r3
 802070e:	d3c0      	bcc.n	8020692 <mul+0x22>
  }

  carry2 = 0;
 8020710:	2300      	movs	r3, #0
 8020712:	61bb      	str	r3, [r7, #24]
  for (j = 0; j < NLIMBS; j++) {
 8020714:	2300      	movs	r3, #0
 8020716:	663b      	str	r3, [r7, #96]	@ 0x60
 8020718:	e01b      	b.n	8020752 <mul+0xe2>
    out[j] = umaal(&carry2, accum[j], 38, accum[j + NLIMBS]);
 802071a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 802071c:	009b      	lsls	r3, r3, #2
 802071e:	3368      	adds	r3, #104	@ 0x68
 8020720:	443b      	add	r3, r7
 8020722:	f853 1c4c 	ldr.w	r1, [r3, #-76]
 8020726:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8020728:	3308      	adds	r3, #8
 802072a:	009b      	lsls	r3, r3, #2
 802072c:	3368      	adds	r3, #104	@ 0x68
 802072e:	443b      	add	r3, r7
 8020730:	f853 5c4c 	ldr.w	r5, [r3, #-76]
 8020734:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8020736:	009b      	lsls	r3, r3, #2
 8020738:	68fa      	ldr	r2, [r7, #12]
 802073a:	18d4      	adds	r4, r2, r3
 802073c:	f107 0018 	add.w	r0, r7, #24
 8020740:	462b      	mov	r3, r5
 8020742:	2226      	movs	r2, #38	@ 0x26
 8020744:	f7ff fe2e 	bl	80203a4 <umaal>
 8020748:	4603      	mov	r3, r0
 802074a:	6023      	str	r3, [r4, #0]
  for (j = 0; j < NLIMBS; j++) {
 802074c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 802074e:	3301      	adds	r3, #1
 8020750:	663b      	str	r3, [r7, #96]	@ 0x60
 8020752:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8020754:	2b07      	cmp	r3, #7
 8020756:	d9e0      	bls.n	802071a <mul+0xaa>
  }
  propagate(out, carry2);
 8020758:	69bb      	ldr	r3, [r7, #24]
 802075a:	4619      	mov	r1, r3
 802075c:	68f8      	ldr	r0, [r7, #12]
 802075e:	f7ff fecc 	bl	80204fa <propagate>
}
 8020762:	bf00      	nop
 8020764:	3768      	adds	r7, #104	@ 0x68
 8020766:	46bd      	mov	sp, r7
 8020768:	bdb0      	pop	{r4, r5, r7, pc}

0802076a <sqr>:

static void sqr(mg_fe out, const mg_fe a) {
 802076a:	b580      	push	{r7, lr}
 802076c:	b082      	sub	sp, #8
 802076e:	af00      	add	r7, sp, #0
 8020770:	6078      	str	r0, [r7, #4]
 8020772:	6039      	str	r1, [r7, #0]
  mul(out, a, a, NLIMBS);
 8020774:	2308      	movs	r3, #8
 8020776:	683a      	ldr	r2, [r7, #0]
 8020778:	6839      	ldr	r1, [r7, #0]
 802077a:	6878      	ldr	r0, [r7, #4]
 802077c:	f7ff ff78 	bl	8020670 <mul>
}
 8020780:	bf00      	nop
 8020782:	3708      	adds	r7, #8
 8020784:	46bd      	mov	sp, r7
 8020786:	bd80      	pop	{r7, pc}

08020788 <mul1>:
static void mul1(mg_fe out, const mg_fe a) {
 8020788:	b580      	push	{r7, lr}
 802078a:	b082      	sub	sp, #8
 802078c:	af00      	add	r7, sp, #0
 802078e:	6078      	str	r0, [r7, #4]
 8020790:	6039      	str	r1, [r7, #0]
  mul(out, a, out, NLIMBS);
 8020792:	2308      	movs	r3, #8
 8020794:	687a      	ldr	r2, [r7, #4]
 8020796:	6839      	ldr	r1, [r7, #0]
 8020798:	6878      	ldr	r0, [r7, #4]
 802079a:	f7ff ff69 	bl	8020670 <mul>
}
 802079e:	bf00      	nop
 80207a0:	3708      	adds	r7, #8
 80207a2:	46bd      	mov	sp, r7
 80207a4:	bd80      	pop	{r7, pc}

080207a6 <sqr1>:
static void sqr1(mg_fe a) {
 80207a6:	b580      	push	{r7, lr}
 80207a8:	b082      	sub	sp, #8
 80207aa:	af00      	add	r7, sp, #0
 80207ac:	6078      	str	r0, [r7, #4]
  mul1(a, a);
 80207ae:	6879      	ldr	r1, [r7, #4]
 80207b0:	6878      	ldr	r0, [r7, #4]
 80207b2:	f7ff ffe9 	bl	8020788 <mul1>
}
 80207b6:	bf00      	nop
 80207b8:	3708      	adds	r7, #8
 80207ba:	46bd      	mov	sp, r7
 80207bc:	bd80      	pop	{r7, pc}

080207be <condswap>:

static void condswap(limb_t a[2 * NLIMBS], limb_t b[2 * NLIMBS],
                     limb_t doswap) {
 80207be:	b480      	push	{r7}
 80207c0:	b087      	sub	sp, #28
 80207c2:	af00      	add	r7, sp, #0
 80207c4:	60f8      	str	r0, [r7, #12]
 80207c6:	60b9      	str	r1, [r7, #8]
 80207c8:	607a      	str	r2, [r7, #4]
  unsigned i;
  for (i = 0; i < 2 * NLIMBS; i++) {
 80207ca:	2300      	movs	r3, #0
 80207cc:	617b      	str	r3, [r7, #20]
 80207ce:	e028      	b.n	8020822 <condswap+0x64>
    limb_t xor_ab = (a[i] ^ b[i]) & doswap;
 80207d0:	697b      	ldr	r3, [r7, #20]
 80207d2:	009b      	lsls	r3, r3, #2
 80207d4:	68fa      	ldr	r2, [r7, #12]
 80207d6:	4413      	add	r3, r2
 80207d8:	681a      	ldr	r2, [r3, #0]
 80207da:	697b      	ldr	r3, [r7, #20]
 80207dc:	009b      	lsls	r3, r3, #2
 80207de:	68b9      	ldr	r1, [r7, #8]
 80207e0:	440b      	add	r3, r1
 80207e2:	681b      	ldr	r3, [r3, #0]
 80207e4:	4053      	eors	r3, r2
 80207e6:	687a      	ldr	r2, [r7, #4]
 80207e8:	4013      	ands	r3, r2
 80207ea:	613b      	str	r3, [r7, #16]
    a[i] ^= xor_ab;
 80207ec:	697b      	ldr	r3, [r7, #20]
 80207ee:	009b      	lsls	r3, r3, #2
 80207f0:	68fa      	ldr	r2, [r7, #12]
 80207f2:	4413      	add	r3, r2
 80207f4:	6819      	ldr	r1, [r3, #0]
 80207f6:	697b      	ldr	r3, [r7, #20]
 80207f8:	009b      	lsls	r3, r3, #2
 80207fa:	68fa      	ldr	r2, [r7, #12]
 80207fc:	4413      	add	r3, r2
 80207fe:	693a      	ldr	r2, [r7, #16]
 8020800:	404a      	eors	r2, r1
 8020802:	601a      	str	r2, [r3, #0]
    b[i] ^= xor_ab;
 8020804:	697b      	ldr	r3, [r7, #20]
 8020806:	009b      	lsls	r3, r3, #2
 8020808:	68ba      	ldr	r2, [r7, #8]
 802080a:	4413      	add	r3, r2
 802080c:	6819      	ldr	r1, [r3, #0]
 802080e:	697b      	ldr	r3, [r7, #20]
 8020810:	009b      	lsls	r3, r3, #2
 8020812:	68ba      	ldr	r2, [r7, #8]
 8020814:	4413      	add	r3, r2
 8020816:	693a      	ldr	r2, [r7, #16]
 8020818:	404a      	eors	r2, r1
 802081a:	601a      	str	r2, [r3, #0]
  for (i = 0; i < 2 * NLIMBS; i++) {
 802081c:	697b      	ldr	r3, [r7, #20]
 802081e:	3301      	adds	r3, #1
 8020820:	617b      	str	r3, [r7, #20]
 8020822:	697b      	ldr	r3, [r7, #20]
 8020824:	2b0f      	cmp	r3, #15
 8020826:	d9d3      	bls.n	80207d0 <condswap+0x12>
  }
}
 8020828:	bf00      	nop
 802082a:	bf00      	nop
 802082c:	371c      	adds	r7, #28
 802082e:	46bd      	mov	sp, r7
 8020830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020834:	4770      	bx	lr

08020836 <canon>:

// Canonicalize a field element x, reducing it to the least residue which is
// congruent to it mod 2^255-19
// - Precondition: x < 2^255 + 1 word
static limb_t canon(mg_fe x) {
 8020836:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802083a:	b08b      	sub	sp, #44	@ 0x2c
 802083c:	af00      	add	r7, sp, #0
 802083e:	60f8      	str	r0, [r7, #12]
  // First, add 19.
  unsigned i;
  limb_t carry0 = 19;
 8020840:	2313      	movs	r3, #19
 8020842:	617b      	str	r3, [r7, #20]
  limb_t res;
  sdlimb_t carry;
  for (i = 0; i < NLIMBS; i++) {
 8020844:	2300      	movs	r3, #0
 8020846:	627b      	str	r3, [r7, #36]	@ 0x24
 8020848:	e012      	b.n	8020870 <canon+0x3a>
    x[i] = adc0(&carry0, x[i]);
 802084a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 802084c:	009b      	lsls	r3, r3, #2
 802084e:	68fa      	ldr	r2, [r7, #12]
 8020850:	4413      	add	r3, r2
 8020852:	6819      	ldr	r1, [r3, #0]
 8020854:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8020856:	009b      	lsls	r3, r3, #2
 8020858:	68fa      	ldr	r2, [r7, #12]
 802085a:	18d6      	adds	r6, r2, r3
 802085c:	f107 0314 	add.w	r3, r7, #20
 8020860:	4618      	mov	r0, r3
 8020862:	f7ff fe24 	bl	80204ae <adc0>
 8020866:	4603      	mov	r3, r0
 8020868:	6033      	str	r3, [r6, #0]
  for (i = 0; i < NLIMBS; i++) {
 802086a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 802086c:	3301      	adds	r3, #1
 802086e:	627b      	str	r3, [r7, #36]	@ 0x24
 8020870:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8020872:	2b07      	cmp	r3, #7
 8020874:	d9e9      	bls.n	802084a <canon+0x14>
  }
  propagate(x, carry0);
 8020876:	697b      	ldr	r3, [r7, #20]
 8020878:	4619      	mov	r1, r3
 802087a:	68f8      	ldr	r0, [r7, #12]
 802087c:	f7ff fe3d 	bl	80204fa <propagate>
  // propagate does anything it adds 19.
  // - We know that the high bit must be clear, because either the input was ~
  // 2^255 + one word + 19 (in which case it propagates to at most 2 words) or
  // it was < 2^255. So now, if we subtract 19, we will get back to something in
  // [0,2^255-19).
  carry = -19;
 8020880:	f06f 0212 	mvn.w	r2, #18
 8020884:	f04f 33ff 	mov.w	r3, #4294967295
 8020888:	e9c7 2306 	strd	r2, r3, [r7, #24]
  res = 0;
 802088c:	2300      	movs	r3, #0
 802088e:	623b      	str	r3, [r7, #32]
  for (i = 0; i < NLIMBS; i++) {
 8020890:	2300      	movs	r3, #0
 8020892:	627b      	str	r3, [r7, #36]	@ 0x24
 8020894:	e02a      	b.n	80208ec <canon+0xb6>
    carry += x[i];
 8020896:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8020898:	009b      	lsls	r3, r3, #2
 802089a:	68fa      	ldr	r2, [r7, #12]
 802089c:	4413      	add	r3, r2
 802089e:	681b      	ldr	r3, [r3, #0]
 80208a0:	2200      	movs	r2, #0
 80208a2:	4698      	mov	r8, r3
 80208a4:	4691      	mov	r9, r2
 80208a6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80208aa:	eb12 0108 	adds.w	r1, r2, r8
 80208ae:	6039      	str	r1, [r7, #0]
 80208b0:	eb43 0309 	adc.w	r3, r3, r9
 80208b4:	607b      	str	r3, [r7, #4]
 80208b6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80208ba:	e9c7 2306 	strd	r2, r3, [r7, #24]
    res |= x[i] = (limb_t) carry;
 80208be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80208c0:	009b      	lsls	r3, r3, #2
 80208c2:	68fa      	ldr	r2, [r7, #12]
 80208c4:	4413      	add	r3, r2
 80208c6:	69ba      	ldr	r2, [r7, #24]
 80208c8:	601a      	str	r2, [r3, #0]
 80208ca:	681b      	ldr	r3, [r3, #0]
 80208cc:	6a3a      	ldr	r2, [r7, #32]
 80208ce:	4313      	orrs	r3, r2
 80208d0:	623b      	str	r3, [r7, #32]
    carry >>= X25519_WBITS;
 80208d2:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80208d6:	f04f 0200 	mov.w	r2, #0
 80208da:	f04f 0300 	mov.w	r3, #0
 80208de:	000a      	movs	r2, r1
 80208e0:	17cb      	asrs	r3, r1, #31
 80208e2:	e9c7 2306 	strd	r2, r3, [r7, #24]
  for (i = 0; i < NLIMBS; i++) {
 80208e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80208e8:	3301      	adds	r3, #1
 80208ea:	627b      	str	r3, [r7, #36]	@ 0x24
 80208ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80208ee:	2b07      	cmp	r3, #7
 80208f0:	d9d1      	bls.n	8020896 <canon+0x60>
  }
  return (limb_t) (((dlimb_t) res - 1) >> X25519_WBITS);
 80208f2:	6a3b      	ldr	r3, [r7, #32]
 80208f4:	2200      	movs	r2, #0
 80208f6:	461c      	mov	r4, r3
 80208f8:	4615      	mov	r5, r2
 80208fa:	f114 3aff 	adds.w	sl, r4, #4294967295
 80208fe:	f145 3bff 	adc.w	fp, r5, #4294967295
 8020902:	f04f 0200 	mov.w	r2, #0
 8020906:	f04f 0300 	mov.w	r3, #0
 802090a:	465a      	mov	r2, fp
 802090c:	2300      	movs	r3, #0
 802090e:	4613      	mov	r3, r2
}
 8020910:	4618      	mov	r0, r3
 8020912:	372c      	adds	r7, #44	@ 0x2c
 8020914:	46bd      	mov	sp, r7
 8020916:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

0802091c <ladder_part1>:

static const limb_t a24[1] = {121665};

static void ladder_part1(mg_fe xs[5]) {
 802091c:	b580      	push	{r7, lr}
 802091e:	b088      	sub	sp, #32
 8020920:	af00      	add	r7, sp, #0
 8020922:	6078      	str	r0, [r7, #4]
  limb_t *x2 = xs[0], *z2 = xs[1], *x3 = xs[2], *z3 = xs[3], *t1 = xs[4];
 8020924:	687b      	ldr	r3, [r7, #4]
 8020926:	61fb      	str	r3, [r7, #28]
 8020928:	687b      	ldr	r3, [r7, #4]
 802092a:	3320      	adds	r3, #32
 802092c:	61bb      	str	r3, [r7, #24]
 802092e:	687b      	ldr	r3, [r7, #4]
 8020930:	3340      	adds	r3, #64	@ 0x40
 8020932:	617b      	str	r3, [r7, #20]
 8020934:	687b      	ldr	r3, [r7, #4]
 8020936:	3360      	adds	r3, #96	@ 0x60
 8020938:	613b      	str	r3, [r7, #16]
 802093a:	687b      	ldr	r3, [r7, #4]
 802093c:	3380      	adds	r3, #128	@ 0x80
 802093e:	60fb      	str	r3, [r7, #12]
  add(t1, x2, z2);                                 // t1 = A
 8020940:	69ba      	ldr	r2, [r7, #24]
 8020942:	69f9      	ldr	r1, [r7, #28]
 8020944:	68f8      	ldr	r0, [r7, #12]
 8020946:	f7ff fe12 	bl	802056e <add>
  sub(z2, x2, z2);                                 // z2 = B
 802094a:	69ba      	ldr	r2, [r7, #24]
 802094c:	69f9      	ldr	r1, [r7, #28]
 802094e:	69b8      	ldr	r0, [r7, #24]
 8020950:	f7ff fe3d 	bl	80205ce <sub>
  add(x2, x3, z3);                                 // x2 = C
 8020954:	693a      	ldr	r2, [r7, #16]
 8020956:	6979      	ldr	r1, [r7, #20]
 8020958:	69f8      	ldr	r0, [r7, #28]
 802095a:	f7ff fe08 	bl	802056e <add>
  sub(z3, x3, z3);                                 // z3 = D
 802095e:	693a      	ldr	r2, [r7, #16]
 8020960:	6979      	ldr	r1, [r7, #20]
 8020962:	6938      	ldr	r0, [r7, #16]
 8020964:	f7ff fe33 	bl	80205ce <sub>
  mul1(z3, t1);                                    // z3 = DA
 8020968:	68f9      	ldr	r1, [r7, #12]
 802096a:	6938      	ldr	r0, [r7, #16]
 802096c:	f7ff ff0c 	bl	8020788 <mul1>
  mul1(x2, z2);                                    // x3 = BC
 8020970:	69b9      	ldr	r1, [r7, #24]
 8020972:	69f8      	ldr	r0, [r7, #28]
 8020974:	f7ff ff08 	bl	8020788 <mul1>
  add(x3, z3, x2);                                 // x3 = DA+CB
 8020978:	69fa      	ldr	r2, [r7, #28]
 802097a:	6939      	ldr	r1, [r7, #16]
 802097c:	6978      	ldr	r0, [r7, #20]
 802097e:	f7ff fdf6 	bl	802056e <add>
  sub(z3, z3, x2);                                 // z3 = DA-CB
 8020982:	69fa      	ldr	r2, [r7, #28]
 8020984:	6939      	ldr	r1, [r7, #16]
 8020986:	6938      	ldr	r0, [r7, #16]
 8020988:	f7ff fe21 	bl	80205ce <sub>
  sqr1(t1);                                        // t1 = AA
 802098c:	68f8      	ldr	r0, [r7, #12]
 802098e:	f7ff ff0a 	bl	80207a6 <sqr1>
  sqr1(z2);                                        // z2 = BB
 8020992:	69b8      	ldr	r0, [r7, #24]
 8020994:	f7ff ff07 	bl	80207a6 <sqr1>
  sub(x2, t1, z2);                                 // x2 = E = AA-BB
 8020998:	69ba      	ldr	r2, [r7, #24]
 802099a:	68f9      	ldr	r1, [r7, #12]
 802099c:	69f8      	ldr	r0, [r7, #28]
 802099e:	f7ff fe16 	bl	80205ce <sub>
  mul(z2, x2, a24, sizeof(a24) / sizeof(a24[0]));  // z2 = E*a24
 80209a2:	2301      	movs	r3, #1
 80209a4:	4a06      	ldr	r2, [pc, #24]	@ (80209c0 <ladder_part1+0xa4>)
 80209a6:	69f9      	ldr	r1, [r7, #28]
 80209a8:	69b8      	ldr	r0, [r7, #24]
 80209aa:	f7ff fe61 	bl	8020670 <mul>
  add(z2, z2, t1);                                 // z2 = E*a24 + AA
 80209ae:	68fa      	ldr	r2, [r7, #12]
 80209b0:	69b9      	ldr	r1, [r7, #24]
 80209b2:	69b8      	ldr	r0, [r7, #24]
 80209b4:	f7ff fddb 	bl	802056e <add>
}
 80209b8:	bf00      	nop
 80209ba:	3720      	adds	r7, #32
 80209bc:	46bd      	mov	sp, r7
 80209be:	bd80      	pop	{r7, pc}
 80209c0:	080287b8 	.word	0x080287b8

080209c4 <ladder_part2>:

static void ladder_part2(mg_fe xs[5], const mg_fe x1) {
 80209c4:	b580      	push	{r7, lr}
 80209c6:	b088      	sub	sp, #32
 80209c8:	af00      	add	r7, sp, #0
 80209ca:	6078      	str	r0, [r7, #4]
 80209cc:	6039      	str	r1, [r7, #0]
  limb_t *x2 = xs[0], *z2 = xs[1], *x3 = xs[2], *z3 = xs[3], *t1 = xs[4];
 80209ce:	687b      	ldr	r3, [r7, #4]
 80209d0:	61fb      	str	r3, [r7, #28]
 80209d2:	687b      	ldr	r3, [r7, #4]
 80209d4:	3320      	adds	r3, #32
 80209d6:	61bb      	str	r3, [r7, #24]
 80209d8:	687b      	ldr	r3, [r7, #4]
 80209da:	3340      	adds	r3, #64	@ 0x40
 80209dc:	617b      	str	r3, [r7, #20]
 80209de:	687b      	ldr	r3, [r7, #4]
 80209e0:	3360      	adds	r3, #96	@ 0x60
 80209e2:	613b      	str	r3, [r7, #16]
 80209e4:	687b      	ldr	r3, [r7, #4]
 80209e6:	3380      	adds	r3, #128	@ 0x80
 80209e8:	60fb      	str	r3, [r7, #12]
  sqr1(z3);         // z3 = (DA-CB)^2
 80209ea:	6938      	ldr	r0, [r7, #16]
 80209ec:	f7ff fedb 	bl	80207a6 <sqr1>
  mul1(z3, x1);     // z3 = x1 * (DA-CB)^2
 80209f0:	6839      	ldr	r1, [r7, #0]
 80209f2:	6938      	ldr	r0, [r7, #16]
 80209f4:	f7ff fec8 	bl	8020788 <mul1>
  sqr1(x3);         // x3 = (DA+CB)^2
 80209f8:	6978      	ldr	r0, [r7, #20]
 80209fa:	f7ff fed4 	bl	80207a6 <sqr1>
  mul1(z2, x2);     // z2 = AA*(E*a24+AA)
 80209fe:	69f9      	ldr	r1, [r7, #28]
 8020a00:	69b8      	ldr	r0, [r7, #24]
 8020a02:	f7ff fec1 	bl	8020788 <mul1>
  sub(x2, t1, x2);  // x2 = BB again
 8020a06:	69fa      	ldr	r2, [r7, #28]
 8020a08:	68f9      	ldr	r1, [r7, #12]
 8020a0a:	69f8      	ldr	r0, [r7, #28]
 8020a0c:	f7ff fddf 	bl	80205ce <sub>
  mul1(x2, t1);     // x2 = AA*BB
 8020a10:	68f9      	ldr	r1, [r7, #12]
 8020a12:	69f8      	ldr	r0, [r7, #28]
 8020a14:	f7ff feb8 	bl	8020788 <mul1>
}
 8020a18:	bf00      	nop
 8020a1a:	3720      	adds	r7, #32
 8020a1c:	46bd      	mov	sp, r7
 8020a1e:	bd80      	pop	{r7, pc}

08020a20 <x25519_core>:

static void x25519_core(mg_fe xs[5], const uint8_t scalar[X25519_BYTES],
                        const uint8_t *x1, int clamp) {
 8020a20:	b580      	push	{r7, lr}
 8020a22:	b094      	sub	sp, #80	@ 0x50
 8020a24:	af00      	add	r7, sp, #0
 8020a26:	60f8      	str	r0, [r7, #12]
 8020a28:	60b9      	str	r1, [r7, #8]
 8020a2a:	607a      	str	r2, [r7, #4]
 8020a2c:	603b      	str	r3, [r7, #0]
  int i;
  mg_fe x1_limbs;
  limb_t swap = 0;
 8020a2e:	2300      	movs	r3, #0
 8020a30:	64bb      	str	r3, [r7, #72]	@ 0x48
  limb_t *x2 = xs[0], *x3 = xs[2], *z3 = xs[3];
 8020a32:	68fb      	ldr	r3, [r7, #12]
 8020a34:	643b      	str	r3, [r7, #64]	@ 0x40
 8020a36:	68fb      	ldr	r3, [r7, #12]
 8020a38:	3340      	adds	r3, #64	@ 0x40
 8020a3a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8020a3c:	68fb      	ldr	r3, [r7, #12]
 8020a3e:	3360      	adds	r3, #96	@ 0x60
 8020a40:	63bb      	str	r3, [r7, #56]	@ 0x38
  memset(xs, 0, 4 * sizeof(mg_fe));
 8020a42:	2280      	movs	r2, #128	@ 0x80
 8020a44:	2100      	movs	r1, #0
 8020a46:	68f8      	ldr	r0, [r7, #12]
 8020a48:	f003 fd20 	bl	802448c <memset>
  x2[0] = z3[0] = 1;
 8020a4c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8020a4e:	2201      	movs	r2, #1
 8020a50:	601a      	str	r2, [r3, #0]
 8020a52:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8020a54:	681a      	ldr	r2, [r3, #0]
 8020a56:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8020a58:	601a      	str	r2, [r3, #0]
  for (i = 0; i < NLIMBS; i++) {
 8020a5a:	2300      	movs	r3, #0
 8020a5c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8020a5e:	e031      	b.n	8020ac4 <x25519_core+0xa4>
    x3[i] = x1_limbs[i] =
        MG_U32(x1[i * 4 + 3], x1[i * 4 + 2], x1[i * 4 + 1], x1[i * 4]);
 8020a60:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8020a62:	009b      	lsls	r3, r3, #2
 8020a64:	3303      	adds	r3, #3
 8020a66:	687a      	ldr	r2, [r7, #4]
 8020a68:	4413      	add	r3, r2
 8020a6a:	781b      	ldrb	r3, [r3, #0]
 8020a6c:	061a      	lsls	r2, r3, #24
 8020a6e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8020a70:	009b      	lsls	r3, r3, #2
 8020a72:	3302      	adds	r3, #2
 8020a74:	6879      	ldr	r1, [r7, #4]
 8020a76:	440b      	add	r3, r1
 8020a78:	781b      	ldrb	r3, [r3, #0]
 8020a7a:	041b      	lsls	r3, r3, #16
 8020a7c:	431a      	orrs	r2, r3
 8020a7e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8020a80:	009b      	lsls	r3, r3, #2
 8020a82:	3301      	adds	r3, #1
 8020a84:	6879      	ldr	r1, [r7, #4]
 8020a86:	440b      	add	r3, r1
 8020a88:	781b      	ldrb	r3, [r3, #0]
 8020a8a:	021b      	lsls	r3, r3, #8
 8020a8c:	4313      	orrs	r3, r2
 8020a8e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8020a90:	0092      	lsls	r2, r2, #2
 8020a92:	4611      	mov	r1, r2
 8020a94:	687a      	ldr	r2, [r7, #4]
 8020a96:	440a      	add	r2, r1
 8020a98:	7812      	ldrb	r2, [r2, #0]
 8020a9a:	431a      	orrs	r2, r3
    x3[i] = x1_limbs[i] =
 8020a9c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8020a9e:	009b      	lsls	r3, r3, #2
 8020aa0:	3350      	adds	r3, #80	@ 0x50
 8020aa2:	443b      	add	r3, r7
 8020aa4:	f843 2c3c 	str.w	r2, [r3, #-60]
 8020aa8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8020aaa:	009b      	lsls	r3, r3, #2
 8020aac:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8020aae:	441a      	add	r2, r3
 8020ab0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8020ab2:	009b      	lsls	r3, r3, #2
 8020ab4:	3350      	adds	r3, #80	@ 0x50
 8020ab6:	443b      	add	r3, r7
 8020ab8:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8020abc:	6013      	str	r3, [r2, #0]
  for (i = 0; i < NLIMBS; i++) {
 8020abe:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8020ac0:	3301      	adds	r3, #1
 8020ac2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8020ac4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8020ac6:	2b07      	cmp	r3, #7
 8020ac8:	ddca      	ble.n	8020a60 <x25519_core+0x40>
  }

  for (i = 255; i >= 0; i--) {
 8020aca:	23ff      	movs	r3, #255	@ 0xff
 8020acc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8020ace:	e049      	b.n	8020b64 <x25519_core+0x144>
    uint8_t bytei = scalar[i / 8];
 8020ad0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8020ad2:	2b00      	cmp	r3, #0
 8020ad4:	da00      	bge.n	8020ad8 <x25519_core+0xb8>
 8020ad6:	3307      	adds	r3, #7
 8020ad8:	10db      	asrs	r3, r3, #3
 8020ada:	461a      	mov	r2, r3
 8020adc:	68bb      	ldr	r3, [r7, #8]
 8020ade:	4413      	add	r3, r2
 8020ae0:	781b      	ldrb	r3, [r3, #0]
 8020ae2:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    limb_t doswap;
    if (clamp) {
 8020ae6:	683b      	ldr	r3, [r7, #0]
 8020ae8:	2b00      	cmp	r3, #0
 8020aea:	d01a      	beq.n	8020b22 <x25519_core+0x102>
      if (i / 8 == 0) {
 8020aec:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8020aee:	3307      	adds	r3, #7
 8020af0:	2b0e      	cmp	r3, #14
 8020af2:	d806      	bhi.n	8020b02 <x25519_core+0xe2>
        bytei &= (uint8_t) ~7U;
 8020af4:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8020af8:	f023 0307 	bic.w	r3, r3, #7
 8020afc:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8020b00:	e00f      	b.n	8020b22 <x25519_core+0x102>
      } else if (i / 8 == X25519_BYTES - 1) {
 8020b02:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8020b04:	3bf8      	subs	r3, #248	@ 0xf8
 8020b06:	2b07      	cmp	r3, #7
 8020b08:	d80b      	bhi.n	8020b22 <x25519_core+0x102>
        bytei &= 0x7F;
 8020b0a:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8020b0e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8020b12:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
        bytei |= 0x40;
 8020b16:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8020b1a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8020b1e:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
      }
    }
    doswap = 0 - (limb_t) ((bytei >> (i % 8)) & 1);
 8020b22:	f897 2047 	ldrb.w	r2, [r7, #71]	@ 0x47
 8020b26:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8020b28:	f003 0307 	and.w	r3, r3, #7
 8020b2c:	fa42 f303 	asr.w	r3, r2, r3
 8020b30:	f003 0301 	and.w	r3, r3, #1
 8020b34:	425b      	negs	r3, r3
 8020b36:	637b      	str	r3, [r7, #52]	@ 0x34
    condswap(x2, x3, swap ^ doswap);
 8020b38:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8020b3a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8020b3c:	4053      	eors	r3, r2
 8020b3e:	461a      	mov	r2, r3
 8020b40:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8020b42:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 8020b44:	f7ff fe3b 	bl	80207be <condswap>
    swap = doswap;
 8020b48:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8020b4a:	64bb      	str	r3, [r7, #72]	@ 0x48

    ladder_part1(xs);
 8020b4c:	68f8      	ldr	r0, [r7, #12]
 8020b4e:	f7ff fee5 	bl	802091c <ladder_part1>
    ladder_part2(xs, (const limb_t *) x1_limbs);
 8020b52:	f107 0314 	add.w	r3, r7, #20
 8020b56:	4619      	mov	r1, r3
 8020b58:	68f8      	ldr	r0, [r7, #12]
 8020b5a:	f7ff ff33 	bl	80209c4 <ladder_part2>
  for (i = 255; i >= 0; i--) {
 8020b5e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8020b60:	3b01      	subs	r3, #1
 8020b62:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8020b64:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8020b66:	2b00      	cmp	r3, #0
 8020b68:	dab2      	bge.n	8020ad0 <x25519_core+0xb0>
  }
  condswap(x2, x3, swap);
 8020b6a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8020b6c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8020b6e:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 8020b70:	f7ff fe25 	bl	80207be <condswap>
}
 8020b74:	bf00      	nop
 8020b76:	3750      	adds	r7, #80	@ 0x50
 8020b78:	46bd      	mov	sp, r7
 8020b7a:	bd80      	pop	{r7, pc}

08020b7c <mg_tls_x25519>:

int mg_tls_x25519(uint8_t out[X25519_BYTES], const uint8_t scalar[X25519_BYTES],
                  const uint8_t x1[X25519_BYTES], int clamp) {
 8020b7c:	b580      	push	{r7, lr}
 8020b7e:	b0be      	sub	sp, #248	@ 0xf8
 8020b80:	af00      	add	r7, sp, #0
 8020b82:	60f8      	str	r0, [r7, #12]
 8020b84:	60b9      	str	r1, [r7, #8]
 8020b86:	607a      	str	r2, [r7, #4]
 8020b88:	603b      	str	r3, [r7, #0]
  static const struct {
    uint8_t a, c, n;
  } steps[13] = {{2, 1, 1},  {2, 1, 1},  {4, 2, 3},  {2, 4, 6},  {3, 1, 1},
                 {3, 2, 12}, {4, 3, 25}, {2, 3, 25}, {2, 4, 50}, {3, 2, 125},
                 {3, 1, 2},  {3, 1, 2},  {3, 1, 1}};
  x25519_core(xs, scalar, x1, clamp);
 8020b8a:	f107 0034 	add.w	r0, r7, #52	@ 0x34
 8020b8e:	683b      	ldr	r3, [r7, #0]
 8020b90:	687a      	ldr	r2, [r7, #4]
 8020b92:	68b9      	ldr	r1, [r7, #8]
 8020b94:	f7ff ff44 	bl	8020a20 <x25519_core>

  // Precomputed inversion chain
  x2 = xs[0];
 8020b98:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8020b9c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  z2 = xs[1];
 8020ba0:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8020ba4:	3320      	adds	r3, #32
 8020ba6:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  z3 = xs[3];
 8020baa:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8020bae:	3360      	adds	r3, #96	@ 0x60
 8020bb0:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  prev = z2;
 8020bb4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8020bb8:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
  for (i = 0; i < 13; i++) {
 8020bbc:	2300      	movs	r3, #0
 8020bbe:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8020bc2:	e043      	b.n	8020c4c <mg_tls_x25519+0xd0>
    int j;
    limb_t *a = xs[steps[i].a];
 8020bc4:	4952      	ldr	r1, [pc, #328]	@ (8020d10 <mg_tls_x25519+0x194>)
 8020bc6:	f8d7 20f4 	ldr.w	r2, [r7, #244]	@ 0xf4
 8020bca:	4613      	mov	r3, r2
 8020bcc:	005b      	lsls	r3, r3, #1
 8020bce:	4413      	add	r3, r2
 8020bd0:	440b      	add	r3, r1
 8020bd2:	781b      	ldrb	r3, [r3, #0]
 8020bd4:	f107 0234 	add.w	r2, r7, #52	@ 0x34
 8020bd8:	015b      	lsls	r3, r3, #5
 8020bda:	4413      	add	r3, r2
 8020bdc:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    for (j = steps[i].n; j > 0; j--) {
 8020be0:	494b      	ldr	r1, [pc, #300]	@ (8020d10 <mg_tls_x25519+0x194>)
 8020be2:	f8d7 20f4 	ldr.w	r2, [r7, #244]	@ 0xf4
 8020be6:	4613      	mov	r3, r2
 8020be8:	005b      	lsls	r3, r3, #1
 8020bea:	4413      	add	r3, r2
 8020bec:	440b      	add	r3, r1
 8020bee:	3302      	adds	r3, #2
 8020bf0:	781b      	ldrb	r3, [r3, #0]
 8020bf2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8020bf6:	e00e      	b.n	8020c16 <mg_tls_x25519+0x9a>
      sqr(a, prev);
 8020bf8:	f8d7 10ec 	ldr.w	r1, [r7, #236]	@ 0xec
 8020bfc:	f8d7 00d4 	ldr.w	r0, [r7, #212]	@ 0xd4
 8020c00:	f7ff fdb3 	bl	802076a <sqr>
      prev = a;
 8020c04:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8020c08:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    for (j = steps[i].n; j > 0; j--) {
 8020c0c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8020c10:	3b01      	subs	r3, #1
 8020c12:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8020c16:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8020c1a:	2b00      	cmp	r3, #0
 8020c1c:	dcec      	bgt.n	8020bf8 <mg_tls_x25519+0x7c>
    }
    mul1(a, xs[steps[i].c]);
 8020c1e:	493c      	ldr	r1, [pc, #240]	@ (8020d10 <mg_tls_x25519+0x194>)
 8020c20:	f8d7 20f4 	ldr.w	r2, [r7, #244]	@ 0xf4
 8020c24:	4613      	mov	r3, r2
 8020c26:	005b      	lsls	r3, r3, #1
 8020c28:	4413      	add	r3, r2
 8020c2a:	440b      	add	r3, r1
 8020c2c:	3301      	adds	r3, #1
 8020c2e:	781b      	ldrb	r3, [r3, #0]
 8020c30:	f107 0234 	add.w	r2, r7, #52	@ 0x34
 8020c34:	015b      	lsls	r3, r3, #5
 8020c36:	4413      	add	r3, r2
 8020c38:	4619      	mov	r1, r3
 8020c3a:	f8d7 00d4 	ldr.w	r0, [r7, #212]	@ 0xd4
 8020c3e:	f7ff fda3 	bl	8020788 <mul1>
  for (i = 0; i < 13; i++) {
 8020c42:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8020c46:	3301      	adds	r3, #1
 8020c48:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8020c4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8020c50:	2b0c      	cmp	r3, #12
 8020c52:	ddb7      	ble.n	8020bc4 <mg_tls_x25519+0x48>
  }

  // Here prev = z3
  // x2 /= z2
  mul(out_limbs, x2, z3, NLIMBS);
 8020c54:	f107 0014 	add.w	r0, r7, #20
 8020c58:	2308      	movs	r3, #8
 8020c5a:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8020c5e:	f8d7 10e4 	ldr.w	r1, [r7, #228]	@ 0xe4
 8020c62:	f7ff fd05 	bl	8020670 <mul>
  ret = (int) canon(out_limbs);
 8020c66:	f107 0314 	add.w	r3, r7, #20
 8020c6a:	4618      	mov	r0, r3
 8020c6c:	f7ff fde3 	bl	8020836 <canon>
 8020c70:	4603      	mov	r3, r0
 8020c72:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
  if (!clamp) ret = 0;
 8020c76:	683b      	ldr	r3, [r7, #0]
 8020c78:	2b00      	cmp	r3, #0
 8020c7a:	d102      	bne.n	8020c82 <mg_tls_x25519+0x106>
 8020c7c:	2300      	movs	r3, #0
 8020c7e:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
  for (i = 0; i < NLIMBS; i++) {
 8020c82:	2300      	movs	r3, #0
 8020c84:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8020c88:	e038      	b.n	8020cfc <mg_tls_x25519+0x180>
    uint32_t n = out_limbs[i];
 8020c8a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8020c8e:	009b      	lsls	r3, r3, #2
 8020c90:	33f8      	adds	r3, #248	@ 0xf8
 8020c92:	443b      	add	r3, r7
 8020c94:	f853 3ce4 	ldr.w	r3, [r3, #-228]
 8020c98:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    out[i * 4] = (uint8_t) (n & 0xff);
 8020c9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8020ca0:	009b      	lsls	r3, r3, #2
 8020ca2:	461a      	mov	r2, r3
 8020ca4:	68fb      	ldr	r3, [r7, #12]
 8020ca6:	4413      	add	r3, r2
 8020ca8:	f8d7 20d8 	ldr.w	r2, [r7, #216]	@ 0xd8
 8020cac:	b2d2      	uxtb	r2, r2
 8020cae:	701a      	strb	r2, [r3, #0]
    out[i * 4 + 1] = (uint8_t) ((n >> 8) & 0xff);
 8020cb0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8020cb4:	0a19      	lsrs	r1, r3, #8
 8020cb6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8020cba:	009b      	lsls	r3, r3, #2
 8020cbc:	3301      	adds	r3, #1
 8020cbe:	68fa      	ldr	r2, [r7, #12]
 8020cc0:	4413      	add	r3, r2
 8020cc2:	b2ca      	uxtb	r2, r1
 8020cc4:	701a      	strb	r2, [r3, #0]
    out[i * 4 + 2] = (uint8_t) ((n >> 16) & 0xff);
 8020cc6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8020cca:	0c19      	lsrs	r1, r3, #16
 8020ccc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8020cd0:	009b      	lsls	r3, r3, #2
 8020cd2:	3302      	adds	r3, #2
 8020cd4:	68fa      	ldr	r2, [r7, #12]
 8020cd6:	4413      	add	r3, r2
 8020cd8:	b2ca      	uxtb	r2, r1
 8020cda:	701a      	strb	r2, [r3, #0]
    out[i * 4 + 3] = (uint8_t) ((n >> 24) & 0xff);
 8020cdc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8020ce0:	0e19      	lsrs	r1, r3, #24
 8020ce2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8020ce6:	009b      	lsls	r3, r3, #2
 8020ce8:	3303      	adds	r3, #3
 8020cea:	68fa      	ldr	r2, [r7, #12]
 8020cec:	4413      	add	r3, r2
 8020cee:	b2ca      	uxtb	r2, r1
 8020cf0:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < NLIMBS; i++) {
 8020cf2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8020cf6:	3301      	adds	r3, #1
 8020cf8:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8020cfc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8020d00:	2b07      	cmp	r3, #7
 8020d02:	ddc2      	ble.n	8020c8a <mg_tls_x25519+0x10e>
  }
  return ret;
 8020d04:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
}
 8020d08:	4618      	mov	r0, r3
 8020d0a:	37f8      	adds	r7, #248	@ 0xf8
 8020d0c:	46bd      	mov	sp, r7
 8020d0e:	bd80      	pop	{r7, pc}
 8020d10:	08028adc 	.word	0x08028adc

08020d14 <mg_url_is_ssl>:

struct url {
  size_t key, user, pass, host, port, uri, end;
};

int mg_url_is_ssl(const char *url) {
 8020d14:	b580      	push	{r7, lr}
 8020d16:	b082      	sub	sp, #8
 8020d18:	af00      	add	r7, sp, #0
 8020d1a:	6078      	str	r0, [r7, #4]
  return strncmp(url, "wss:", 4) == 0 || strncmp(url, "https:", 6) == 0 ||
 8020d1c:	2204      	movs	r2, #4
 8020d1e:	491b      	ldr	r1, [pc, #108]	@ (8020d8c <mg_url_is_ssl+0x78>)
 8020d20:	6878      	ldr	r0, [r7, #4]
 8020d22:	f003 fbc8 	bl	80244b6 <strncmp>
 8020d26:	4603      	mov	r3, r0
         strncmp(url, "mqtts:", 6) == 0 || strncmp(url, "ssl:", 4) == 0 ||
         strncmp(url, "tls:", 4) == 0 || strncmp(url, "tcps:", 5) == 0;
 8020d28:	2b00      	cmp	r3, #0
 8020d2a:	d027      	beq.n	8020d7c <mg_url_is_ssl+0x68>
  return strncmp(url, "wss:", 4) == 0 || strncmp(url, "https:", 6) == 0 ||
 8020d2c:	2206      	movs	r2, #6
 8020d2e:	4918      	ldr	r1, [pc, #96]	@ (8020d90 <mg_url_is_ssl+0x7c>)
 8020d30:	6878      	ldr	r0, [r7, #4]
 8020d32:	f003 fbc0 	bl	80244b6 <strncmp>
 8020d36:	4603      	mov	r3, r0
 8020d38:	2b00      	cmp	r3, #0
 8020d3a:	d01f      	beq.n	8020d7c <mg_url_is_ssl+0x68>
         strncmp(url, "mqtts:", 6) == 0 || strncmp(url, "ssl:", 4) == 0 ||
 8020d3c:	2206      	movs	r2, #6
 8020d3e:	4915      	ldr	r1, [pc, #84]	@ (8020d94 <mg_url_is_ssl+0x80>)
 8020d40:	6878      	ldr	r0, [r7, #4]
 8020d42:	f003 fbb8 	bl	80244b6 <strncmp>
 8020d46:	4603      	mov	r3, r0
  return strncmp(url, "wss:", 4) == 0 || strncmp(url, "https:", 6) == 0 ||
 8020d48:	2b00      	cmp	r3, #0
 8020d4a:	d017      	beq.n	8020d7c <mg_url_is_ssl+0x68>
         strncmp(url, "mqtts:", 6) == 0 || strncmp(url, "ssl:", 4) == 0 ||
 8020d4c:	2204      	movs	r2, #4
 8020d4e:	4912      	ldr	r1, [pc, #72]	@ (8020d98 <mg_url_is_ssl+0x84>)
 8020d50:	6878      	ldr	r0, [r7, #4]
 8020d52:	f003 fbb0 	bl	80244b6 <strncmp>
 8020d56:	4603      	mov	r3, r0
 8020d58:	2b00      	cmp	r3, #0
 8020d5a:	d00f      	beq.n	8020d7c <mg_url_is_ssl+0x68>
         strncmp(url, "tls:", 4) == 0 || strncmp(url, "tcps:", 5) == 0;
 8020d5c:	2204      	movs	r2, #4
 8020d5e:	490f      	ldr	r1, [pc, #60]	@ (8020d9c <mg_url_is_ssl+0x88>)
 8020d60:	6878      	ldr	r0, [r7, #4]
 8020d62:	f003 fba8 	bl	80244b6 <strncmp>
 8020d66:	4603      	mov	r3, r0
         strncmp(url, "mqtts:", 6) == 0 || strncmp(url, "ssl:", 4) == 0 ||
 8020d68:	2b00      	cmp	r3, #0
 8020d6a:	d007      	beq.n	8020d7c <mg_url_is_ssl+0x68>
         strncmp(url, "tls:", 4) == 0 || strncmp(url, "tcps:", 5) == 0;
 8020d6c:	2205      	movs	r2, #5
 8020d6e:	490c      	ldr	r1, [pc, #48]	@ (8020da0 <mg_url_is_ssl+0x8c>)
 8020d70:	6878      	ldr	r0, [r7, #4]
 8020d72:	f003 fba0 	bl	80244b6 <strncmp>
 8020d76:	4603      	mov	r3, r0
 8020d78:	2b00      	cmp	r3, #0
 8020d7a:	d101      	bne.n	8020d80 <mg_url_is_ssl+0x6c>
 8020d7c:	2301      	movs	r3, #1
 8020d7e:	e000      	b.n	8020d82 <mg_url_is_ssl+0x6e>
 8020d80:	2300      	movs	r3, #0
}
 8020d82:	4618      	mov	r0, r3
 8020d84:	3708      	adds	r7, #8
 8020d86:	46bd      	mov	sp, r7
 8020d88:	bd80      	pop	{r7, pc}
 8020d8a:	bf00      	nop
 8020d8c:	08027980 	.word	0x08027980
 8020d90:	08027988 	.word	0x08027988
 8020d94:	08027990 	.word	0x08027990
 8020d98:	08027998 	.word	0x08027998
 8020d9c:	080279a0 	.word	0x080279a0
 8020da0:	080279a8 	.word	0x080279a8

08020da4 <urlparse>:

static struct url urlparse(const char *url) {
 8020da4:	b5b0      	push	{r4, r5, r7, lr}
 8020da6:	b08a      	sub	sp, #40	@ 0x28
 8020da8:	af00      	add	r7, sp, #0
 8020daa:	6078      	str	r0, [r7, #4]
 8020dac:	6039      	str	r1, [r7, #0]
  size_t i;
  struct url u;
  memset(&u, 0, sizeof(u));
 8020dae:	f107 0308 	add.w	r3, r7, #8
 8020db2:	221c      	movs	r2, #28
 8020db4:	2100      	movs	r1, #0
 8020db6:	4618      	mov	r0, r3
 8020db8:	f003 fb68 	bl	802448c <memset>
  for (i = 0; url[i] != '\0'; i++) {
 8020dbc:	2300      	movs	r3, #0
 8020dbe:	627b      	str	r3, [r7, #36]	@ 0x24
 8020dc0:	e05b      	b.n	8020e7a <urlparse+0xd6>
    if (url[i] == '/' && i > 0 && u.host == 0 && url[i - 1] == '/') {
 8020dc2:	683a      	ldr	r2, [r7, #0]
 8020dc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8020dc6:	4413      	add	r3, r2
 8020dc8:	781b      	ldrb	r3, [r3, #0]
 8020dca:	2b2f      	cmp	r3, #47	@ 0x2f
 8020dcc:	d112      	bne.n	8020df4 <urlparse+0x50>
 8020dce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8020dd0:	2b00      	cmp	r3, #0
 8020dd2:	d00f      	beq.n	8020df4 <urlparse+0x50>
 8020dd4:	697b      	ldr	r3, [r7, #20]
 8020dd6:	2b00      	cmp	r3, #0
 8020dd8:	d10c      	bne.n	8020df4 <urlparse+0x50>
 8020dda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8020ddc:	3b01      	subs	r3, #1
 8020dde:	683a      	ldr	r2, [r7, #0]
 8020de0:	4413      	add	r3, r2
 8020de2:	781b      	ldrb	r3, [r3, #0]
 8020de4:	2b2f      	cmp	r3, #47	@ 0x2f
 8020de6:	d105      	bne.n	8020df4 <urlparse+0x50>
      u.host = i + 1;
 8020de8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8020dea:	3301      	adds	r3, #1
 8020dec:	617b      	str	r3, [r7, #20]
      u.port = 0;
 8020dee:	2300      	movs	r3, #0
 8020df0:	61bb      	str	r3, [r7, #24]
 8020df2:	e03f      	b.n	8020e74 <urlparse+0xd0>
    } else if (url[i] == ']') {
 8020df4:	683a      	ldr	r2, [r7, #0]
 8020df6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8020df8:	4413      	add	r3, r2
 8020dfa:	781b      	ldrb	r3, [r3, #0]
 8020dfc:	2b5d      	cmp	r3, #93	@ 0x5d
 8020dfe:	d102      	bne.n	8020e06 <urlparse+0x62>
      u.port = 0;  // IPv6 URLs, like http://[::1]/bar
 8020e00:	2300      	movs	r3, #0
 8020e02:	61bb      	str	r3, [r7, #24]
 8020e04:	e036      	b.n	8020e74 <urlparse+0xd0>
    } else if (url[i] == ':' && u.port == 0 && u.uri == 0) {
 8020e06:	683a      	ldr	r2, [r7, #0]
 8020e08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8020e0a:	4413      	add	r3, r2
 8020e0c:	781b      	ldrb	r3, [r3, #0]
 8020e0e:	2b3a      	cmp	r3, #58	@ 0x3a
 8020e10:	d109      	bne.n	8020e26 <urlparse+0x82>
 8020e12:	69bb      	ldr	r3, [r7, #24]
 8020e14:	2b00      	cmp	r3, #0
 8020e16:	d106      	bne.n	8020e26 <urlparse+0x82>
 8020e18:	69fb      	ldr	r3, [r7, #28]
 8020e1a:	2b00      	cmp	r3, #0
 8020e1c:	d103      	bne.n	8020e26 <urlparse+0x82>
      u.port = i + 1;
 8020e1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8020e20:	3301      	adds	r3, #1
 8020e22:	61bb      	str	r3, [r7, #24]
 8020e24:	e026      	b.n	8020e74 <urlparse+0xd0>
    } else if (url[i] == '@' && u.user == 0 && u.pass == 0 && u.uri == 0) {
 8020e26:	683a      	ldr	r2, [r7, #0]
 8020e28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8020e2a:	4413      	add	r3, r2
 8020e2c:	781b      	ldrb	r3, [r3, #0]
 8020e2e:	2b40      	cmp	r3, #64	@ 0x40
 8020e30:	d112      	bne.n	8020e58 <urlparse+0xb4>
 8020e32:	68fb      	ldr	r3, [r7, #12]
 8020e34:	2b00      	cmp	r3, #0
 8020e36:	d10f      	bne.n	8020e58 <urlparse+0xb4>
 8020e38:	693b      	ldr	r3, [r7, #16]
 8020e3a:	2b00      	cmp	r3, #0
 8020e3c:	d10c      	bne.n	8020e58 <urlparse+0xb4>
 8020e3e:	69fb      	ldr	r3, [r7, #28]
 8020e40:	2b00      	cmp	r3, #0
 8020e42:	d109      	bne.n	8020e58 <urlparse+0xb4>
      u.user = u.host;
 8020e44:	697b      	ldr	r3, [r7, #20]
 8020e46:	60fb      	str	r3, [r7, #12]
      u.pass = u.port;
 8020e48:	69bb      	ldr	r3, [r7, #24]
 8020e4a:	613b      	str	r3, [r7, #16]
      u.host = i + 1;
 8020e4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8020e4e:	3301      	adds	r3, #1
 8020e50:	617b      	str	r3, [r7, #20]
      u.port = 0;
 8020e52:	2300      	movs	r3, #0
 8020e54:	61bb      	str	r3, [r7, #24]
 8020e56:	e00d      	b.n	8020e74 <urlparse+0xd0>
    } else if (url[i] == '/' && u.host && u.uri == 0) {
 8020e58:	683a      	ldr	r2, [r7, #0]
 8020e5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8020e5c:	4413      	add	r3, r2
 8020e5e:	781b      	ldrb	r3, [r3, #0]
 8020e60:	2b2f      	cmp	r3, #47	@ 0x2f
 8020e62:	d107      	bne.n	8020e74 <urlparse+0xd0>
 8020e64:	697b      	ldr	r3, [r7, #20]
 8020e66:	2b00      	cmp	r3, #0
 8020e68:	d004      	beq.n	8020e74 <urlparse+0xd0>
 8020e6a:	69fb      	ldr	r3, [r7, #28]
 8020e6c:	2b00      	cmp	r3, #0
 8020e6e:	d101      	bne.n	8020e74 <urlparse+0xd0>
      u.uri = i;
 8020e70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8020e72:	61fb      	str	r3, [r7, #28]
  for (i = 0; url[i] != '\0'; i++) {
 8020e74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8020e76:	3301      	adds	r3, #1
 8020e78:	627b      	str	r3, [r7, #36]	@ 0x24
 8020e7a:	683a      	ldr	r2, [r7, #0]
 8020e7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8020e7e:	4413      	add	r3, r2
 8020e80:	781b      	ldrb	r3, [r3, #0]
 8020e82:	2b00      	cmp	r3, #0
 8020e84:	d19d      	bne.n	8020dc2 <urlparse+0x1e>
    }
  }
  u.end = i;
 8020e86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8020e88:	623b      	str	r3, [r7, #32]
#if 0
  printf("[%s] %d %d %d %d %d\n", url, u.user, u.pass, u.host, u.port, u.uri);
#endif
  return u;
 8020e8a:	687b      	ldr	r3, [r7, #4]
 8020e8c:	461d      	mov	r5, r3
 8020e8e:	f107 0408 	add.w	r4, r7, #8
 8020e92:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8020e94:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8020e96:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8020e9a:	e885 0007 	stmia.w	r5, {r0, r1, r2}
}
 8020e9e:	6878      	ldr	r0, [r7, #4]
 8020ea0:	3728      	adds	r7, #40	@ 0x28
 8020ea2:	46bd      	mov	sp, r7
 8020ea4:	bdb0      	pop	{r4, r5, r7, pc}

08020ea6 <mg_url_host>:

struct mg_str mg_url_host(const char *url) {
 8020ea6:	b580      	push	{r7, lr}
 8020ea8:	b08c      	sub	sp, #48	@ 0x30
 8020eaa:	af00      	add	r7, sp, #0
 8020eac:	6078      	str	r0, [r7, #4]
 8020eae:	6039      	str	r1, [r7, #0]
  struct url u = urlparse(url);
 8020eb0:	f107 0310 	add.w	r3, r7, #16
 8020eb4:	6839      	ldr	r1, [r7, #0]
 8020eb6:	4618      	mov	r0, r3
 8020eb8:	f7ff ff74 	bl	8020da4 <urlparse>
  size_t n = u.port  ? u.port - u.host - 1
 8020ebc:	6a3b      	ldr	r3, [r7, #32]
             : u.uri ? u.uri - u.host
 8020ebe:	2b00      	cmp	r3, #0
 8020ec0:	d004      	beq.n	8020ecc <mg_url_host+0x26>
  size_t n = u.port  ? u.port - u.host - 1
 8020ec2:	6a3a      	ldr	r2, [r7, #32]
 8020ec4:	69fb      	ldr	r3, [r7, #28]
 8020ec6:	1ad3      	subs	r3, r2, r3
             : u.uri ? u.uri - u.host
 8020ec8:	3b01      	subs	r3, #1
 8020eca:	e009      	b.n	8020ee0 <mg_url_host+0x3a>
 8020ecc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
                     : u.end - u.host;
 8020ece:	2b00      	cmp	r3, #0
 8020ed0:	d003      	beq.n	8020eda <mg_url_host+0x34>
             : u.uri ? u.uri - u.host
 8020ed2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8020ed4:	69fb      	ldr	r3, [r7, #28]
                     : u.end - u.host;
 8020ed6:	1ad3      	subs	r3, r2, r3
 8020ed8:	e002      	b.n	8020ee0 <mg_url_host+0x3a>
 8020eda:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8020edc:	69fb      	ldr	r3, [r7, #28]
 8020ede:	1ad3      	subs	r3, r2, r3
  size_t n = u.port  ? u.port - u.host - 1
 8020ee0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  struct mg_str s = mg_str_n(url + u.host, n);
 8020ee2:	69fb      	ldr	r3, [r7, #28]
 8020ee4:	683a      	ldr	r2, [r7, #0]
 8020ee6:	18d1      	adds	r1, r2, r3
 8020ee8:	f107 0308 	add.w	r3, r7, #8
 8020eec:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8020eee:	4618      	mov	r0, r3
 8020ef0:	f7f4 fd6b 	bl	80159ca <mg_str_n>
  return s;
 8020ef4:	687b      	ldr	r3, [r7, #4]
 8020ef6:	461a      	mov	r2, r3
 8020ef8:	f107 0308 	add.w	r3, r7, #8
 8020efc:	e893 0003 	ldmia.w	r3, {r0, r1}
 8020f00:	e882 0003 	stmia.w	r2, {r0, r1}
}
 8020f04:	6878      	ldr	r0, [r7, #4]
 8020f06:	3730      	adds	r7, #48	@ 0x30
 8020f08:	46bd      	mov	sp, r7
 8020f0a:	bd80      	pop	{r7, pc}

08020f0c <mg_url_port>:
const char *mg_url_uri(const char *url) {
  struct url u = urlparse(url);
  return u.uri ? url + u.uri : "/";
}

unsigned short mg_url_port(const char *url) {
 8020f0c:	b580      	push	{r7, lr}
 8020f0e:	b08a      	sub	sp, #40	@ 0x28
 8020f10:	af00      	add	r7, sp, #0
 8020f12:	6078      	str	r0, [r7, #4]
  struct url u = urlparse(url);
 8020f14:	f107 0308 	add.w	r3, r7, #8
 8020f18:	6879      	ldr	r1, [r7, #4]
 8020f1a:	4618      	mov	r0, r3
 8020f1c:	f7ff ff42 	bl	8020da4 <urlparse>
  unsigned short port = 0;
 8020f20:	2300      	movs	r3, #0
 8020f22:	84fb      	strh	r3, [r7, #38]	@ 0x26
  if (strncmp(url, "http:", 5) == 0 || strncmp(url, "ws:", 3) == 0) port = 80;
 8020f24:	2205      	movs	r2, #5
 8020f26:	4925      	ldr	r1, [pc, #148]	@ (8020fbc <mg_url_port+0xb0>)
 8020f28:	6878      	ldr	r0, [r7, #4]
 8020f2a:	f003 fac4 	bl	80244b6 <strncmp>
 8020f2e:	4603      	mov	r3, r0
 8020f30:	2b00      	cmp	r3, #0
 8020f32:	d007      	beq.n	8020f44 <mg_url_port+0x38>
 8020f34:	2203      	movs	r2, #3
 8020f36:	4922      	ldr	r1, [pc, #136]	@ (8020fc0 <mg_url_port+0xb4>)
 8020f38:	6878      	ldr	r0, [r7, #4]
 8020f3a:	f003 fabc 	bl	80244b6 <strncmp>
 8020f3e:	4603      	mov	r3, r0
 8020f40:	2b00      	cmp	r3, #0
 8020f42:	d101      	bne.n	8020f48 <mg_url_port+0x3c>
 8020f44:	2350      	movs	r3, #80	@ 0x50
 8020f46:	84fb      	strh	r3, [r7, #38]	@ 0x26
  if (strncmp(url, "wss:", 4) == 0 || strncmp(url, "https:", 6) == 0)
 8020f48:	2204      	movs	r2, #4
 8020f4a:	491e      	ldr	r1, [pc, #120]	@ (8020fc4 <mg_url_port+0xb8>)
 8020f4c:	6878      	ldr	r0, [r7, #4]
 8020f4e:	f003 fab2 	bl	80244b6 <strncmp>
 8020f52:	4603      	mov	r3, r0
 8020f54:	2b00      	cmp	r3, #0
 8020f56:	d007      	beq.n	8020f68 <mg_url_port+0x5c>
 8020f58:	2206      	movs	r2, #6
 8020f5a:	491b      	ldr	r1, [pc, #108]	@ (8020fc8 <mg_url_port+0xbc>)
 8020f5c:	6878      	ldr	r0, [r7, #4]
 8020f5e:	f003 faaa 	bl	80244b6 <strncmp>
 8020f62:	4603      	mov	r3, r0
 8020f64:	2b00      	cmp	r3, #0
 8020f66:	d102      	bne.n	8020f6e <mg_url_port+0x62>
    port = 443;
 8020f68:	f240 13bb 	movw	r3, #443	@ 0x1bb
 8020f6c:	84fb      	strh	r3, [r7, #38]	@ 0x26
  if (strncmp(url, "mqtt:", 5) == 0) port = 1883;
 8020f6e:	2205      	movs	r2, #5
 8020f70:	4916      	ldr	r1, [pc, #88]	@ (8020fcc <mg_url_port+0xc0>)
 8020f72:	6878      	ldr	r0, [r7, #4]
 8020f74:	f003 fa9f 	bl	80244b6 <strncmp>
 8020f78:	4603      	mov	r3, r0
 8020f7a:	2b00      	cmp	r3, #0
 8020f7c:	d102      	bne.n	8020f84 <mg_url_port+0x78>
 8020f7e:	f240 735b 	movw	r3, #1883	@ 0x75b
 8020f82:	84fb      	strh	r3, [r7, #38]	@ 0x26
  if (strncmp(url, "mqtts:", 6) == 0) port = 8883;
 8020f84:	2206      	movs	r2, #6
 8020f86:	4912      	ldr	r1, [pc, #72]	@ (8020fd0 <mg_url_port+0xc4>)
 8020f88:	6878      	ldr	r0, [r7, #4]
 8020f8a:	f003 fa94 	bl	80244b6 <strncmp>
 8020f8e:	4603      	mov	r3, r0
 8020f90:	2b00      	cmp	r3, #0
 8020f92:	d102      	bne.n	8020f9a <mg_url_port+0x8e>
 8020f94:	f242 23b3 	movw	r3, #8883	@ 0x22b3
 8020f98:	84fb      	strh	r3, [r7, #38]	@ 0x26
  if (u.port) port = (unsigned short) atoi(url + u.port);
 8020f9a:	69bb      	ldr	r3, [r7, #24]
 8020f9c:	2b00      	cmp	r3, #0
 8020f9e:	d007      	beq.n	8020fb0 <mg_url_port+0xa4>
 8020fa0:	69bb      	ldr	r3, [r7, #24]
 8020fa2:	687a      	ldr	r2, [r7, #4]
 8020fa4:	4413      	add	r3, r2
 8020fa6:	4618      	mov	r0, r3
 8020fa8:	f002 fe92 	bl	8023cd0 <atoi>
 8020fac:	4603      	mov	r3, r0
 8020fae:	84fb      	strh	r3, [r7, #38]	@ 0x26
  return port;
 8020fb0:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
}
 8020fb2:	4618      	mov	r0, r3
 8020fb4:	3728      	adds	r7, #40	@ 0x28
 8020fb6:	46bd      	mov	sp, r7
 8020fb8:	bd80      	pop	{r7, pc}
 8020fba:	bf00      	nop
 8020fbc:	080279b0 	.word	0x080279b0
 8020fc0:	080279b8 	.word	0x080279b8
 8020fc4:	08027980 	.word	0x08027980
 8020fc8:	08027988 	.word	0x08027988
 8020fcc:	080279bc 	.word	0x080279bc
 8020fd0:	08027990 	.word	0x08027990

08020fd4 <mg_bzero>:



// Not using memset for zeroing memory, cause it can be dropped by compiler
// See https://github.com/cesanta/mongoose/pull/1265
void mg_bzero(volatile unsigned char *buf, size_t len) {
 8020fd4:	b480      	push	{r7}
 8020fd6:	b083      	sub	sp, #12
 8020fd8:	af00      	add	r7, sp, #0
 8020fda:	6078      	str	r0, [r7, #4]
 8020fdc:	6039      	str	r1, [r7, #0]
  if (buf != NULL) {
 8020fde:	687b      	ldr	r3, [r7, #4]
 8020fe0:	2b00      	cmp	r3, #0
 8020fe2:	d00a      	beq.n	8020ffa <mg_bzero+0x26>
    while (len--) *buf++ = 0;
 8020fe4:	e004      	b.n	8020ff0 <mg_bzero+0x1c>
 8020fe6:	687b      	ldr	r3, [r7, #4]
 8020fe8:	1c5a      	adds	r2, r3, #1
 8020fea:	607a      	str	r2, [r7, #4]
 8020fec:	2200      	movs	r2, #0
 8020fee:	701a      	strb	r2, [r3, #0]
 8020ff0:	683b      	ldr	r3, [r7, #0]
 8020ff2:	1e5a      	subs	r2, r3, #1
 8020ff4:	603a      	str	r2, [r7, #0]
 8020ff6:	2b00      	cmp	r3, #0
 8020ff8:	d1f5      	bne.n	8020fe6 <mg_bzero+0x12>
  }
}
 8020ffa:	bf00      	nop
 8020ffc:	370c      	adds	r7, #12
 8020ffe:	46bd      	mov	sp, r7
 8021000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021004:	4770      	bx	lr
	...

08021008 <mg_crc32>:
                          : (char) ('0' + c - 52);     // numeric
  }
  return buf;
}

uint32_t mg_crc32(uint32_t crc, const char *buf, size_t len) {
 8021008:	b480      	push	{r7}
 802100a:	b087      	sub	sp, #28
 802100c:	af00      	add	r7, sp, #0
 802100e:	60f8      	str	r0, [r7, #12]
 8021010:	60b9      	str	r1, [r7, #8]
 8021012:	607a      	str	r2, [r7, #4]
  static const uint32_t crclut[16] = {
      // table for polynomial 0xEDB88320 (reflected)
      0x00000000, 0x1DB71064, 0x3B6E20C8, 0x26D930AC, 0x76DC4190, 0x6B6B51F4,
      0x4DB26158, 0x5005713C, 0xEDB88320, 0xF00F9344, 0xD6D6A3E8, 0xCB61B38C,
      0x9B64C2B0, 0x86D3D2D4, 0xA00AE278, 0xBDBDF21C};
  crc = ~crc;
 8021014:	68fb      	ldr	r3, [r7, #12]
 8021016:	43db      	mvns	r3, r3
 8021018:	60fb      	str	r3, [r7, #12]
  while (len--) {
 802101a:	e01f      	b.n	802105c <mg_crc32+0x54>
    uint8_t b = *(uint8_t *) buf++;
 802101c:	68bb      	ldr	r3, [r7, #8]
 802101e:	1c5a      	adds	r2, r3, #1
 8021020:	60ba      	str	r2, [r7, #8]
 8021022:	781b      	ldrb	r3, [r3, #0]
 8021024:	75fb      	strb	r3, [r7, #23]
    crc = crclut[(crc ^ b) & 0x0F] ^ (crc >> 4);
 8021026:	7dfa      	ldrb	r2, [r7, #23]
 8021028:	68fb      	ldr	r3, [r7, #12]
 802102a:	4053      	eors	r3, r2
 802102c:	f003 030f 	and.w	r3, r3, #15
 8021030:	4a11      	ldr	r2, [pc, #68]	@ (8021078 <mg_crc32+0x70>)
 8021032:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8021036:	68fb      	ldr	r3, [r7, #12]
 8021038:	091b      	lsrs	r3, r3, #4
 802103a:	4053      	eors	r3, r2
 802103c:	60fb      	str	r3, [r7, #12]
    crc = crclut[(crc ^ (b >> 4)) & 0x0F] ^ (crc >> 4);
 802103e:	7dfb      	ldrb	r3, [r7, #23]
 8021040:	091b      	lsrs	r3, r3, #4
 8021042:	b2db      	uxtb	r3, r3
 8021044:	461a      	mov	r2, r3
 8021046:	68fb      	ldr	r3, [r7, #12]
 8021048:	4053      	eors	r3, r2
 802104a:	f003 030f 	and.w	r3, r3, #15
 802104e:	4a0a      	ldr	r2, [pc, #40]	@ (8021078 <mg_crc32+0x70>)
 8021050:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8021054:	68fb      	ldr	r3, [r7, #12]
 8021056:	091b      	lsrs	r3, r3, #4
 8021058:	4053      	eors	r3, r2
 802105a:	60fb      	str	r3, [r7, #12]
  while (len--) {
 802105c:	687b      	ldr	r3, [r7, #4]
 802105e:	1e5a      	subs	r2, r3, #1
 8021060:	607a      	str	r2, [r7, #4]
 8021062:	2b00      	cmp	r3, #0
 8021064:	d1da      	bne.n	802101c <mg_crc32+0x14>
  }
  return ~crc;
 8021066:	68fb      	ldr	r3, [r7, #12]
 8021068:	43db      	mvns	r3, r3
}
 802106a:	4618      	mov	r0, r3
 802106c:	371c      	adds	r7, #28
 802106e:	46bd      	mov	sp, r7
 8021070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021074:	4770      	bx	lr
 8021076:	bf00      	nop
 8021078:	08028b04 	.word	0x08028b04

0802107c <mg_path_is_sane>:
    }
  }
  return allowed == '+';
}

bool mg_path_is_sane(const struct mg_str path) {
 802107c:	b480      	push	{r7}
 802107e:	b085      	sub	sp, #20
 8021080:	af00      	add	r7, sp, #0
 8021082:	463b      	mov	r3, r7
 8021084:	e883 0003 	stmia.w	r3, {r0, r1}
  const char *s = path.buf;
 8021088:	683b      	ldr	r3, [r7, #0]
 802108a:	60fb      	str	r3, [r7, #12]
  size_t n = path.len;
 802108c:	687b      	ldr	r3, [r7, #4]
 802108e:	60bb      	str	r3, [r7, #8]
  if (path.buf[0] == '~') return false;  // Starts with ~
 8021090:	683b      	ldr	r3, [r7, #0]
 8021092:	781b      	ldrb	r3, [r3, #0]
 8021094:	2b7e      	cmp	r3, #126	@ 0x7e
 8021096:	d101      	bne.n	802109c <mg_path_is_sane+0x20>
 8021098:	2300      	movs	r3, #0
 802109a:	e02f      	b.n	80210fc <mg_path_is_sane+0x80>
  if (path.buf[0] == '.' && path.buf[1] == '.') return false;  // Starts with ..
 802109c:	683b      	ldr	r3, [r7, #0]
 802109e:	781b      	ldrb	r3, [r3, #0]
 80210a0:	2b2e      	cmp	r3, #46	@ 0x2e
 80210a2:	d123      	bne.n	80210ec <mg_path_is_sane+0x70>
 80210a4:	683b      	ldr	r3, [r7, #0]
 80210a6:	3301      	adds	r3, #1
 80210a8:	781b      	ldrb	r3, [r3, #0]
 80210aa:	2b2e      	cmp	r3, #46	@ 0x2e
 80210ac:	d11e      	bne.n	80210ec <mg_path_is_sane+0x70>
 80210ae:	2300      	movs	r3, #0
 80210b0:	e024      	b.n	80210fc <mg_path_is_sane+0x80>
  for (; s[0] != '\0' && n > 0; s++, n--) {
    if ((s[0] == '/' || s[0] == '\\') && n >= 2) {   // Subdir?
 80210b2:	68fb      	ldr	r3, [r7, #12]
 80210b4:	781b      	ldrb	r3, [r3, #0]
 80210b6:	2b2f      	cmp	r3, #47	@ 0x2f
 80210b8:	d003      	beq.n	80210c2 <mg_path_is_sane+0x46>
 80210ba:	68fb      	ldr	r3, [r7, #12]
 80210bc:	781b      	ldrb	r3, [r3, #0]
 80210be:	2b5c      	cmp	r3, #92	@ 0x5c
 80210c0:	d10e      	bne.n	80210e0 <mg_path_is_sane+0x64>
 80210c2:	68bb      	ldr	r3, [r7, #8]
 80210c4:	2b01      	cmp	r3, #1
 80210c6:	d90b      	bls.n	80210e0 <mg_path_is_sane+0x64>
      if (s[1] == '.' && s[2] == '.') return false;  // Starts with ..
 80210c8:	68fb      	ldr	r3, [r7, #12]
 80210ca:	3301      	adds	r3, #1
 80210cc:	781b      	ldrb	r3, [r3, #0]
 80210ce:	2b2e      	cmp	r3, #46	@ 0x2e
 80210d0:	d106      	bne.n	80210e0 <mg_path_is_sane+0x64>
 80210d2:	68fb      	ldr	r3, [r7, #12]
 80210d4:	3302      	adds	r3, #2
 80210d6:	781b      	ldrb	r3, [r3, #0]
 80210d8:	2b2e      	cmp	r3, #46	@ 0x2e
 80210da:	d101      	bne.n	80210e0 <mg_path_is_sane+0x64>
 80210dc:	2300      	movs	r3, #0
 80210de:	e00d      	b.n	80210fc <mg_path_is_sane+0x80>
  for (; s[0] != '\0' && n > 0; s++, n--) {
 80210e0:	68fb      	ldr	r3, [r7, #12]
 80210e2:	3301      	adds	r3, #1
 80210e4:	60fb      	str	r3, [r7, #12]
 80210e6:	68bb      	ldr	r3, [r7, #8]
 80210e8:	3b01      	subs	r3, #1
 80210ea:	60bb      	str	r3, [r7, #8]
 80210ec:	68fb      	ldr	r3, [r7, #12]
 80210ee:	781b      	ldrb	r3, [r3, #0]
 80210f0:	2b00      	cmp	r3, #0
 80210f2:	d002      	beq.n	80210fa <mg_path_is_sane+0x7e>
 80210f4:	68bb      	ldr	r3, [r7, #8]
 80210f6:	2b00      	cmp	r3, #0
 80210f8:	d1db      	bne.n	80210b2 <mg_path_is_sane+0x36>
    }
  }
  return true;
 80210fa:	2301      	movs	r3, #1
}
 80210fc:	4618      	mov	r0, r3
 80210fe:	3714      	adds	r7, #20
 8021100:	46bd      	mov	sp, r7
 8021102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021106:	4770      	bx	lr

08021108 <mg_millis>:

#if MG_ENABLE_CUSTOM_MILLIS
#else
uint64_t mg_millis(void) {
 8021108:	b5b0      	push	{r4, r5, r7, lr}
 802110a:	af00      	add	r7, sp, #0
  return GetTickCount();
#elif MG_ARCH == MG_ARCH_PICOSDK
  return time_us_64() / 1000;
#elif MG_ARCH == MG_ARCH_ESP8266 || MG_ARCH == MG_ARCH_ESP32 || \
    MG_ARCH == MG_ARCH_FREERTOS
  return xTaskGetTickCount() * portTICK_PERIOD_MS;
 802110c:	f7e4 faac 	bl	8005668 <xTaskGetTickCount>
 8021110:	4603      	mov	r3, r0
 8021112:	2200      	movs	r2, #0
 8021114:	461c      	mov	r4, r3
 8021116:	4615      	mov	r5, r2
 8021118:	4622      	mov	r2, r4
 802111a:	462b      	mov	r3, r5
#elif defined(ARDUINO)
  return (uint64_t) millis();
#else
  return (uint64_t) (time(NULL) * 1000);
#endif
}
 802111c:	4610      	mov	r0, r2
 802111e:	4619      	mov	r1, r3
 8021120:	bdb0      	pop	{r4, r5, r7, pc}

08021122 <mg_ntohs>:
#endif

// network format equates big endian order
uint16_t mg_ntohs(uint16_t net) {
 8021122:	b480      	push	{r7}
 8021124:	b083      	sub	sp, #12
 8021126:	af00      	add	r7, sp, #0
 8021128:	4603      	mov	r3, r0
 802112a:	80fb      	strh	r3, [r7, #6]
  return MG_LOAD_BE16(&net);
 802112c:	1dbb      	adds	r3, r7, #6
 802112e:	781b      	ldrb	r3, [r3, #0]
 8021130:	b21b      	sxth	r3, r3
 8021132:	021b      	lsls	r3, r3, #8
 8021134:	b21a      	sxth	r2, r3
 8021136:	1dbb      	adds	r3, r7, #6
 8021138:	3301      	adds	r3, #1
 802113a:	781b      	ldrb	r3, [r3, #0]
 802113c:	b21b      	sxth	r3, r3
 802113e:	4313      	orrs	r3, r2
 8021140:	b21b      	sxth	r3, r3
 8021142:	b29b      	uxth	r3, r3
}
 8021144:	4618      	mov	r0, r3
 8021146:	370c      	adds	r7, #12
 8021148:	46bd      	mov	sp, r7
 802114a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802114e:	4770      	bx	lr

08021150 <mg_ntohl>:

uint32_t mg_ntohl(uint32_t net) {
 8021150:	b480      	push	{r7}
 8021152:	b083      	sub	sp, #12
 8021154:	af00      	add	r7, sp, #0
 8021156:	6078      	str	r0, [r7, #4]
  return MG_LOAD_BE32(&net);
 8021158:	1d3b      	adds	r3, r7, #4
 802115a:	781b      	ldrb	r3, [r3, #0]
 802115c:	061a      	lsls	r2, r3, #24
 802115e:	1d3b      	adds	r3, r7, #4
 8021160:	3301      	adds	r3, #1
 8021162:	781b      	ldrb	r3, [r3, #0]
 8021164:	041b      	lsls	r3, r3, #16
 8021166:	431a      	orrs	r2, r3
 8021168:	1d3b      	adds	r3, r7, #4
 802116a:	3302      	adds	r3, #2
 802116c:	781b      	ldrb	r3, [r3, #0]
 802116e:	021b      	lsls	r3, r3, #8
 8021170:	431a      	orrs	r2, r3
 8021172:	1d3b      	adds	r3, r7, #4
 8021174:	3303      	adds	r3, #3
 8021176:	781b      	ldrb	r3, [r3, #0]
 8021178:	4313      	orrs	r3, r2
}
 802117a:	4618      	mov	r0, r3
 802117c:	370c      	adds	r7, #12
 802117e:	46bd      	mov	sp, r7
 8021180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021184:	4770      	bx	lr
	...

08021188 <ws_handshake>:
  return len;
}

static void ws_handshake(struct mg_connection *c, const struct mg_str *wskey,
                         const struct mg_str *wsproto, const char *fmt,
                         va_list *ap) {
 8021188:	b580      	push	{r7, lr}
 802118a:	b0aa      	sub	sp, #168	@ 0xa8
 802118c:	af00      	add	r7, sp, #0
 802118e:	60f8      	str	r0, [r7, #12]
 8021190:	60b9      	str	r1, [r7, #8]
 8021192:	607a      	str	r2, [r7, #4]
 8021194:	603b      	str	r3, [r7, #0]
  const char *magic = "258EAFA5-E914-47DA-95CA-C5AB0DC85B11";
 8021196:	4b29      	ldr	r3, [pc, #164]	@ (802123c <ws_handshake+0xb4>)
 8021198:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  unsigned char sha[20], b64_sha[30];

  mg_sha1_ctx sha_ctx;
  mg_sha1_init(&sha_ctx);
 802119c:	f107 0314 	add.w	r3, r7, #20
 80211a0:	4618      	mov	r0, r3
 80211a2:	f7f2 fe39 	bl	8013e18 <mg_sha1_init>
  mg_sha1_update(&sha_ctx, (unsigned char *) wskey->buf, wskey->len);
 80211a6:	68bb      	ldr	r3, [r7, #8]
 80211a8:	6819      	ldr	r1, [r3, #0]
 80211aa:	68bb      	ldr	r3, [r7, #8]
 80211ac:	685a      	ldr	r2, [r3, #4]
 80211ae:	f107 0314 	add.w	r3, r7, #20
 80211b2:	4618      	mov	r0, r3
 80211b4:	f7f2 fe5a 	bl	8013e6c <mg_sha1_update>
  mg_sha1_update(&sha_ctx, (unsigned char *) magic, 36);
 80211b8:	f107 0314 	add.w	r3, r7, #20
 80211bc:	2224      	movs	r2, #36	@ 0x24
 80211be:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80211c2:	4618      	mov	r0, r3
 80211c4:	f7f2 fe52 	bl	8013e6c <mg_sha1_update>
  mg_sha1_final(sha, &sha_ctx);
 80211c8:	f107 0214 	add.w	r2, r7, #20
 80211cc:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 80211d0:	4611      	mov	r1, r2
 80211d2:	4618      	mov	r0, r3
 80211d4:	f7f2 feb0 	bl	8013f38 <mg_sha1_final>
  mg_base64_encode(sha, sizeof(sha), (char *) b64_sha, sizeof(b64_sha));
 80211d8:	f107 0270 	add.w	r2, r7, #112	@ 0x70
 80211dc:	f107 0090 	add.w	r0, r7, #144	@ 0x90
 80211e0:	231e      	movs	r3, #30
 80211e2:	2114      	movs	r1, #20
 80211e4:	f7e5 ff3c 	bl	8007060 <mg_base64_encode>
  mg_xprintf(mg_pfn_iobuf, &c->send,
 80211e8:	68fb      	ldr	r3, [r7, #12]
 80211ea:	f103 0150 	add.w	r1, r3, #80	@ 0x50
 80211ee:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 80211f2:	4a13      	ldr	r2, [pc, #76]	@ (8021240 <ws_handshake+0xb8>)
 80211f4:	4813      	ldr	r0, [pc, #76]	@ (8021244 <ws_handshake+0xbc>)
 80211f6:	f7e7 faf4 	bl	80087e2 <mg_xprintf>
             "HTTP/1.1 101 Switching Protocols\r\n"
             "Upgrade: websocket\r\n"
             "Connection: Upgrade\r\n"
             "Sec-WebSocket-Accept: %s\r\n",
             b64_sha);
  if (fmt != NULL) mg_vxprintf(mg_pfn_iobuf, &c->send, fmt, ap);
 80211fa:	683b      	ldr	r3, [r7, #0]
 80211fc:	2b00      	cmp	r3, #0
 80211fe:	d008      	beq.n	8021212 <ws_handshake+0x8a>
 8021200:	68fb      	ldr	r3, [r7, #12]
 8021202:	f103 0150 	add.w	r1, r3, #80	@ 0x50
 8021206:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 802120a:	683a      	ldr	r2, [r7, #0]
 802120c:	480d      	ldr	r0, [pc, #52]	@ (8021244 <ws_handshake+0xbc>)
 802120e:	f7e7 fb03 	bl	8008818 <mg_vxprintf>
  if (wsproto != NULL) {
 8021212:	687b      	ldr	r3, [r7, #4]
 8021214:	2b00      	cmp	r3, #0
 8021216:	d008      	beq.n	802122a <ws_handshake+0xa2>
    mg_printf(c, "Sec-WebSocket-Protocol: %.*s\r\n", (int) wsproto->len,
 8021218:	687b      	ldr	r3, [r7, #4]
 802121a:	685b      	ldr	r3, [r3, #4]
 802121c:	461a      	mov	r2, r3
              wsproto->buf);
 802121e:	687b      	ldr	r3, [r7, #4]
 8021220:	681b      	ldr	r3, [r3, #0]
    mg_printf(c, "Sec-WebSocket-Protocol: %.*s\r\n", (int) wsproto->len,
 8021222:	4909      	ldr	r1, [pc, #36]	@ (8021248 <ws_handshake+0xc0>)
 8021224:	68f8      	ldr	r0, [r7, #12]
 8021226:	f7ec f91d 	bl	800d464 <mg_printf>
  }
  mg_send(c, "\r\n", 2);
 802122a:	2202      	movs	r2, #2
 802122c:	4907      	ldr	r1, [pc, #28]	@ (802124c <ws_handshake+0xc4>)
 802122e:	68f8      	ldr	r0, [r7, #12]
 8021230:	f7f0 fe66 	bl	8011f00 <mg_send>
}
 8021234:	bf00      	nop
 8021236:	37a8      	adds	r7, #168	@ 0xa8
 8021238:	46bd      	mov	sp, r7
 802123a:	bd80      	pop	{r7, pc}
 802123c:	08027a00 	.word	0x08027a00
 8021240:	08027a28 	.word	0x08027a28
 8021244:	08012191 	.word	0x08012191
 8021248:	08027a90 	.word	0x08027a90
 802124c:	08025488 	.word	0x08025488

08021250 <be32>:

static uint32_t be32(const uint8_t *p) {
 8021250:	b480      	push	{r7}
 8021252:	b083      	sub	sp, #12
 8021254:	af00      	add	r7, sp, #0
 8021256:	6078      	str	r0, [r7, #4]
  return (((uint32_t) p[3]) << 0) | (((uint32_t) p[2]) << 8) |
 8021258:	687b      	ldr	r3, [r7, #4]
 802125a:	3303      	adds	r3, #3
 802125c:	781b      	ldrb	r3, [r3, #0]
 802125e:	461a      	mov	r2, r3
 8021260:	687b      	ldr	r3, [r7, #4]
 8021262:	3302      	adds	r3, #2
 8021264:	781b      	ldrb	r3, [r3, #0]
 8021266:	021b      	lsls	r3, r3, #8
 8021268:	431a      	orrs	r2, r3
         (((uint32_t) p[1]) << 16) | (((uint32_t) p[0]) << 24);
 802126a:	687b      	ldr	r3, [r7, #4]
 802126c:	3301      	adds	r3, #1
 802126e:	781b      	ldrb	r3, [r3, #0]
 8021270:	041b      	lsls	r3, r3, #16
  return (((uint32_t) p[3]) << 0) | (((uint32_t) p[2]) << 8) |
 8021272:	431a      	orrs	r2, r3
         (((uint32_t) p[1]) << 16) | (((uint32_t) p[0]) << 24);
 8021274:	687b      	ldr	r3, [r7, #4]
 8021276:	781b      	ldrb	r3, [r3, #0]
 8021278:	061b      	lsls	r3, r3, #24
 802127a:	4313      	orrs	r3, r2
}
 802127c:	4618      	mov	r0, r3
 802127e:	370c      	adds	r7, #12
 8021280:	46bd      	mov	sp, r7
 8021282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021286:	4770      	bx	lr

08021288 <ws_process>:

static size_t ws_process(uint8_t *buf, size_t len, struct ws_msg *msg) {
 8021288:	b5b0      	push	{r4, r5, r7, lr}
 802128a:	b08a      	sub	sp, #40	@ 0x28
 802128c:	af00      	add	r7, sp, #0
 802128e:	60f8      	str	r0, [r7, #12]
 8021290:	60b9      	str	r1, [r7, #8]
 8021292:	607a      	str	r2, [r7, #4]
  size_t i, n = 0, mask_len = 0;
 8021294:	2300      	movs	r3, #0
 8021296:	61fb      	str	r3, [r7, #28]
 8021298:	2300      	movs	r3, #0
 802129a:	623b      	str	r3, [r7, #32]
  memset(msg, 0, sizeof(*msg));
 802129c:	220c      	movs	r2, #12
 802129e:	2100      	movs	r1, #0
 80212a0:	6878      	ldr	r0, [r7, #4]
 80212a2:	f003 f8f3 	bl	802448c <memset>
  if (len >= 2) {
 80212a6:	68bb      	ldr	r3, [r7, #8]
 80212a8:	2b01      	cmp	r3, #1
 80212aa:	d953      	bls.n	8021354 <ws_process+0xcc>
    n = buf[1] & 0x7f;                // Frame length
 80212ac:	68fb      	ldr	r3, [r7, #12]
 80212ae:	3301      	adds	r3, #1
 80212b0:	781b      	ldrb	r3, [r3, #0]
 80212b2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80212b6:	61fb      	str	r3, [r7, #28]
    mask_len = buf[1] & 128 ? 4 : 0;  // last bit is a mask bit
 80212b8:	68fb      	ldr	r3, [r7, #12]
 80212ba:	3301      	adds	r3, #1
 80212bc:	781b      	ldrb	r3, [r3, #0]
 80212be:	b25b      	sxtb	r3, r3
 80212c0:	115b      	asrs	r3, r3, #5
 80212c2:	b25b      	sxtb	r3, r3
 80212c4:	f003 0304 	and.w	r3, r3, #4
 80212c8:	623b      	str	r3, [r7, #32]
    msg->flags = buf[0];
 80212ca:	68fb      	ldr	r3, [r7, #12]
 80212cc:	781a      	ldrb	r2, [r3, #0]
 80212ce:	687b      	ldr	r3, [r7, #4]
 80212d0:	701a      	strb	r2, [r3, #0]
    if (n < 126 && len >= mask_len) {
 80212d2:	69fb      	ldr	r3, [r7, #28]
 80212d4:	2b7d      	cmp	r3, #125	@ 0x7d
 80212d6:	d80b      	bhi.n	80212f0 <ws_process+0x68>
 80212d8:	68ba      	ldr	r2, [r7, #8]
 80212da:	6a3b      	ldr	r3, [r7, #32]
 80212dc:	429a      	cmp	r2, r3
 80212de:	d307      	bcc.n	80212f0 <ws_process+0x68>
      msg->data_len = n;
 80212e0:	687b      	ldr	r3, [r7, #4]
 80212e2:	69fa      	ldr	r2, [r7, #28]
 80212e4:	609a      	str	r2, [r3, #8]
      msg->header_len = 2 + mask_len;
 80212e6:	6a3b      	ldr	r3, [r7, #32]
 80212e8:	1c9a      	adds	r2, r3, #2
 80212ea:	687b      	ldr	r3, [r7, #4]
 80212ec:	605a      	str	r2, [r3, #4]
 80212ee:	e031      	b.n	8021354 <ws_process+0xcc>
    } else if (n == 126 && len >= 4 + mask_len) {
 80212f0:	69fb      	ldr	r3, [r7, #28]
 80212f2:	2b7e      	cmp	r3, #126	@ 0x7e
 80212f4:	d113      	bne.n	802131e <ws_process+0x96>
 80212f6:	6a3b      	ldr	r3, [r7, #32]
 80212f8:	3304      	adds	r3, #4
 80212fa:	68ba      	ldr	r2, [r7, #8]
 80212fc:	429a      	cmp	r2, r3
 80212fe:	d30e      	bcc.n	802131e <ws_process+0x96>
      msg->header_len = 4 + mask_len;
 8021300:	6a3b      	ldr	r3, [r7, #32]
 8021302:	1d1a      	adds	r2, r3, #4
 8021304:	687b      	ldr	r3, [r7, #4]
 8021306:	605a      	str	r2, [r3, #4]
      msg->data_len = (((size_t) buf[2]) << 8) | buf[3];
 8021308:	68fb      	ldr	r3, [r7, #12]
 802130a:	3302      	adds	r3, #2
 802130c:	781b      	ldrb	r3, [r3, #0]
 802130e:	021b      	lsls	r3, r3, #8
 8021310:	68fa      	ldr	r2, [r7, #12]
 8021312:	3203      	adds	r2, #3
 8021314:	7812      	ldrb	r2, [r2, #0]
 8021316:	431a      	orrs	r2, r3
 8021318:	687b      	ldr	r3, [r7, #4]
 802131a:	609a      	str	r2, [r3, #8]
 802131c:	e01a      	b.n	8021354 <ws_process+0xcc>
    } else if (len >= 10 + mask_len) {
 802131e:	6a3b      	ldr	r3, [r7, #32]
 8021320:	330a      	adds	r3, #10
 8021322:	68ba      	ldr	r2, [r7, #8]
 8021324:	429a      	cmp	r2, r3
 8021326:	d315      	bcc.n	8021354 <ws_process+0xcc>
      msg->header_len = 10 + mask_len;
 8021328:	6a3b      	ldr	r3, [r7, #32]
 802132a:	f103 020a 	add.w	r2, r3, #10
 802132e:	687b      	ldr	r3, [r7, #4]
 8021330:	605a      	str	r2, [r3, #4]
      msg->data_len =
          (size_t) (((uint64_t) be32(buf + 2) << 32) + be32(buf + 6));
 8021332:	68fb      	ldr	r3, [r7, #12]
 8021334:	3302      	adds	r3, #2
 8021336:	4618      	mov	r0, r3
 8021338:	f7ff ff8a 	bl	8021250 <be32>
 802133c:	4603      	mov	r3, r0
 802133e:	2200      	movs	r2, #0
 8021340:	461c      	mov	r4, r3
 8021342:	4615      	mov	r5, r2
 8021344:	68fb      	ldr	r3, [r7, #12]
 8021346:	3306      	adds	r3, #6
 8021348:	4618      	mov	r0, r3
 802134a:	f7ff ff81 	bl	8021250 <be32>
 802134e:	4602      	mov	r2, r0
      msg->data_len =
 8021350:	687b      	ldr	r3, [r7, #4]
 8021352:	609a      	str	r2, [r3, #8]
    }
  }
  // Sanity check, and integer overflow protection for the boundary check below
  // data_len should not be larger than 1 Gb
  if (msg->data_len > 1024 * 1024 * 1024) return 0;
 8021354:	687b      	ldr	r3, [r7, #4]
 8021356:	689b      	ldr	r3, [r3, #8]
 8021358:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 802135c:	d901      	bls.n	8021362 <ws_process+0xda>
 802135e:	2300      	movs	r3, #0
 8021360:	e036      	b.n	80213d0 <ws_process+0x148>
  if (msg->header_len + msg->data_len > len) return 0;
 8021362:	687b      	ldr	r3, [r7, #4]
 8021364:	685a      	ldr	r2, [r3, #4]
 8021366:	687b      	ldr	r3, [r7, #4]
 8021368:	689b      	ldr	r3, [r3, #8]
 802136a:	4413      	add	r3, r2
 802136c:	68ba      	ldr	r2, [r7, #8]
 802136e:	429a      	cmp	r2, r3
 8021370:	d201      	bcs.n	8021376 <ws_process+0xee>
 8021372:	2300      	movs	r3, #0
 8021374:	e02c      	b.n	80213d0 <ws_process+0x148>
  if (mask_len > 0) {
 8021376:	6a3b      	ldr	r3, [r7, #32]
 8021378:	2b00      	cmp	r3, #0
 802137a:	d024      	beq.n	80213c6 <ws_process+0x13e>
    uint8_t *p = buf + msg->header_len, *m = p - mask_len;
 802137c:	687b      	ldr	r3, [r7, #4]
 802137e:	685b      	ldr	r3, [r3, #4]
 8021380:	68fa      	ldr	r2, [r7, #12]
 8021382:	4413      	add	r3, r2
 8021384:	61bb      	str	r3, [r7, #24]
 8021386:	6a3b      	ldr	r3, [r7, #32]
 8021388:	425b      	negs	r3, r3
 802138a:	69ba      	ldr	r2, [r7, #24]
 802138c:	4413      	add	r3, r2
 802138e:	617b      	str	r3, [r7, #20]
    for (i = 0; i < msg->data_len; i++) p[i] ^= m[i & 3];
 8021390:	2300      	movs	r3, #0
 8021392:	627b      	str	r3, [r7, #36]	@ 0x24
 8021394:	e012      	b.n	80213bc <ws_process+0x134>
 8021396:	69ba      	ldr	r2, [r7, #24]
 8021398:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 802139a:	4413      	add	r3, r2
 802139c:	7819      	ldrb	r1, [r3, #0]
 802139e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80213a0:	f003 0303 	and.w	r3, r3, #3
 80213a4:	697a      	ldr	r2, [r7, #20]
 80213a6:	4413      	add	r3, r2
 80213a8:	781a      	ldrb	r2, [r3, #0]
 80213aa:	69b8      	ldr	r0, [r7, #24]
 80213ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80213ae:	4403      	add	r3, r0
 80213b0:	404a      	eors	r2, r1
 80213b2:	b2d2      	uxtb	r2, r2
 80213b4:	701a      	strb	r2, [r3, #0]
 80213b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80213b8:	3301      	adds	r3, #1
 80213ba:	627b      	str	r3, [r7, #36]	@ 0x24
 80213bc:	687b      	ldr	r3, [r7, #4]
 80213be:	689b      	ldr	r3, [r3, #8]
 80213c0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80213c2:	429a      	cmp	r2, r3
 80213c4:	d3e7      	bcc.n	8021396 <ws_process+0x10e>
  }
  return msg->header_len + msg->data_len;
 80213c6:	687b      	ldr	r3, [r7, #4]
 80213c8:	685a      	ldr	r2, [r3, #4]
 80213ca:	687b      	ldr	r3, [r7, #4]
 80213cc:	689b      	ldr	r3, [r3, #8]
 80213ce:	4413      	add	r3, r2
}
 80213d0:	4618      	mov	r0, r3
 80213d2:	3728      	adds	r7, #40	@ 0x28
 80213d4:	46bd      	mov	sp, r7
 80213d6:	bdb0      	pop	{r4, r5, r7, pc}

080213d8 <mkhdr>:

static size_t mkhdr(size_t len, int op, bool is_client, uint8_t *buf) {
 80213d8:	b5b0      	push	{r4, r5, r7, lr}
 80213da:	b088      	sub	sp, #32
 80213dc:	af00      	add	r7, sp, #0
 80213de:	60f8      	str	r0, [r7, #12]
 80213e0:	60b9      	str	r1, [r7, #8]
 80213e2:	603b      	str	r3, [r7, #0]
 80213e4:	4613      	mov	r3, r2
 80213e6:	71fb      	strb	r3, [r7, #7]
  size_t n = 0;
 80213e8:	2300      	movs	r3, #0
 80213ea:	61fb      	str	r3, [r7, #28]
  buf[0] = (uint8_t) (op | 128);
 80213ec:	68bb      	ldr	r3, [r7, #8]
 80213ee:	b25b      	sxtb	r3, r3
 80213f0:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80213f4:	b25b      	sxtb	r3, r3
 80213f6:	b2da      	uxtb	r2, r3
 80213f8:	683b      	ldr	r3, [r7, #0]
 80213fa:	701a      	strb	r2, [r3, #0]
  if (len < 126) {
 80213fc:	68fb      	ldr	r3, [r7, #12]
 80213fe:	2b7d      	cmp	r3, #125	@ 0x7d
 8021400:	d807      	bhi.n	8021412 <mkhdr+0x3a>
    buf[1] = (unsigned char) len;
 8021402:	683b      	ldr	r3, [r7, #0]
 8021404:	3301      	adds	r3, #1
 8021406:	68fa      	ldr	r2, [r7, #12]
 8021408:	b2d2      	uxtb	r2, r2
 802140a:	701a      	strb	r2, [r3, #0]
    n = 2;
 802140c:	2302      	movs	r3, #2
 802140e:	61fb      	str	r3, [r7, #28]
 8021410:	e038      	b.n	8021484 <mkhdr+0xac>
  } else if (len < 65536) {
 8021412:	68fb      	ldr	r3, [r7, #12]
 8021414:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8021418:	d211      	bcs.n	802143e <mkhdr+0x66>
    uint16_t tmp = mg_htons((uint16_t) len);
 802141a:	68fb      	ldr	r3, [r7, #12]
 802141c:	b29b      	uxth	r3, r3
 802141e:	4618      	mov	r0, r3
 8021420:	f7ff fe7f 	bl	8021122 <mg_ntohs>
 8021424:	4603      	mov	r3, r0
 8021426:	837b      	strh	r3, [r7, #26]
    buf[1] = 126;
 8021428:	683b      	ldr	r3, [r7, #0]
 802142a:	3301      	adds	r3, #1
 802142c:	227e      	movs	r2, #126	@ 0x7e
 802142e:	701a      	strb	r2, [r3, #0]
    memcpy(&buf[2], &tmp, sizeof(tmp));
 8021430:	683b      	ldr	r3, [r7, #0]
 8021432:	3302      	adds	r3, #2
 8021434:	8b7a      	ldrh	r2, [r7, #26]
 8021436:	801a      	strh	r2, [r3, #0]
    n = 4;
 8021438:	2304      	movs	r3, #4
 802143a:	61fb      	str	r3, [r7, #28]
 802143c:	e022      	b.n	8021484 <mkhdr+0xac>
  } else {
    uint32_t tmp;
    buf[1] = 127;
 802143e:	683b      	ldr	r3, [r7, #0]
 8021440:	3301      	adds	r3, #1
 8021442:	227f      	movs	r2, #127	@ 0x7f
 8021444:	701a      	strb	r2, [r3, #0]
    tmp = mg_htonl((uint32_t) (((uint64_t) len) >> 32));
 8021446:	68fb      	ldr	r3, [r7, #12]
 8021448:	2200      	movs	r2, #0
 802144a:	461c      	mov	r4, r3
 802144c:	4615      	mov	r5, r2
 802144e:	f04f 0200 	mov.w	r2, #0
 8021452:	f04f 0300 	mov.w	r3, #0
 8021456:	002a      	movs	r2, r5
 8021458:	2300      	movs	r3, #0
 802145a:	4613      	mov	r3, r2
 802145c:	4618      	mov	r0, r3
 802145e:	f7ff fe77 	bl	8021150 <mg_ntohl>
 8021462:	4603      	mov	r3, r0
 8021464:	617b      	str	r3, [r7, #20]
    memcpy(&buf[2], &tmp, sizeof(tmp));
 8021466:	683b      	ldr	r3, [r7, #0]
 8021468:	3302      	adds	r3, #2
 802146a:	697a      	ldr	r2, [r7, #20]
 802146c:	601a      	str	r2, [r3, #0]
    tmp = mg_htonl((uint32_t) (len & 0xffffffffU));
 802146e:	68f8      	ldr	r0, [r7, #12]
 8021470:	f7ff fe6e 	bl	8021150 <mg_ntohl>
 8021474:	4603      	mov	r3, r0
 8021476:	617b      	str	r3, [r7, #20]
    memcpy(&buf[6], &tmp, sizeof(tmp));
 8021478:	683b      	ldr	r3, [r7, #0]
 802147a:	3306      	adds	r3, #6
 802147c:	697a      	ldr	r2, [r7, #20]
 802147e:	601a      	str	r2, [r3, #0]
    n = 10;
 8021480:	230a      	movs	r3, #10
 8021482:	61fb      	str	r3, [r7, #28]
  }
  if (is_client) {
 8021484:	79fb      	ldrb	r3, [r7, #7]
 8021486:	2b00      	cmp	r3, #0
 8021488:	d012      	beq.n	80214b0 <mkhdr+0xd8>
    buf[1] |= 1 << 7;  // Set masking flag
 802148a:	683b      	ldr	r3, [r7, #0]
 802148c:	3301      	adds	r3, #1
 802148e:	781a      	ldrb	r2, [r3, #0]
 8021490:	683b      	ldr	r3, [r7, #0]
 8021492:	3301      	adds	r3, #1
 8021494:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8021498:	b2d2      	uxtb	r2, r2
 802149a:	701a      	strb	r2, [r3, #0]
    mg_random(&buf[n], 4);
 802149c:	683a      	ldr	r2, [r7, #0]
 802149e:	69fb      	ldr	r3, [r7, #28]
 80214a0:	4413      	add	r3, r2
 80214a2:	2104      	movs	r1, #4
 80214a4:	4618      	mov	r0, r3
 80214a6:	f7df f927 	bl	80006f8 <mg_random>
    n += 4;
 80214aa:	69fb      	ldr	r3, [r7, #28]
 80214ac:	3304      	adds	r3, #4
 80214ae:	61fb      	str	r3, [r7, #28]
  }
  return n;
 80214b0:	69fb      	ldr	r3, [r7, #28]
}
 80214b2:	4618      	mov	r0, r3
 80214b4:	3720      	adds	r7, #32
 80214b6:	46bd      	mov	sp, r7
 80214b8:	bdb0      	pop	{r4, r5, r7, pc}

080214ba <mg_ws_mask>:

static void mg_ws_mask(struct mg_connection *c, size_t len) {
 80214ba:	b480      	push	{r7}
 80214bc:	b087      	sub	sp, #28
 80214be:	af00      	add	r7, sp, #0
 80214c0:	6078      	str	r0, [r7, #4]
 80214c2:	6039      	str	r1, [r7, #0]
  if (c->is_client && c->send.buf != NULL) {
 80214c4:	687b      	ldr	r3, [r7, #4]
 80214c6:	f893 30b4 	ldrb.w	r3, [r3, #180]	@ 0xb4
 80214ca:	f003 0302 	and.w	r3, r3, #2
 80214ce:	b2db      	uxtb	r3, r3
 80214d0:	2b00      	cmp	r3, #0
 80214d2:	d028      	beq.n	8021526 <mg_ws_mask+0x6c>
 80214d4:	687b      	ldr	r3, [r7, #4]
 80214d6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80214d8:	2b00      	cmp	r3, #0
 80214da:	d024      	beq.n	8021526 <mg_ws_mask+0x6c>
    size_t i;
    uint8_t *p = c->send.buf + c->send.len - len, *mask = p - 4;
 80214dc:	687b      	ldr	r3, [r7, #4]
 80214de:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80214e0:	687b      	ldr	r3, [r7, #4]
 80214e2:	6d99      	ldr	r1, [r3, #88]	@ 0x58
 80214e4:	683b      	ldr	r3, [r7, #0]
 80214e6:	1acb      	subs	r3, r1, r3
 80214e8:	4413      	add	r3, r2
 80214ea:	613b      	str	r3, [r7, #16]
 80214ec:	693b      	ldr	r3, [r7, #16]
 80214ee:	3b04      	subs	r3, #4
 80214f0:	60fb      	str	r3, [r7, #12]
    for (i = 0; i < len; i++) p[i] ^= mask[i & 3];
 80214f2:	2300      	movs	r3, #0
 80214f4:	617b      	str	r3, [r7, #20]
 80214f6:	e012      	b.n	802151e <mg_ws_mask+0x64>
 80214f8:	693a      	ldr	r2, [r7, #16]
 80214fa:	697b      	ldr	r3, [r7, #20]
 80214fc:	4413      	add	r3, r2
 80214fe:	7819      	ldrb	r1, [r3, #0]
 8021500:	697b      	ldr	r3, [r7, #20]
 8021502:	f003 0303 	and.w	r3, r3, #3
 8021506:	68fa      	ldr	r2, [r7, #12]
 8021508:	4413      	add	r3, r2
 802150a:	781a      	ldrb	r2, [r3, #0]
 802150c:	6938      	ldr	r0, [r7, #16]
 802150e:	697b      	ldr	r3, [r7, #20]
 8021510:	4403      	add	r3, r0
 8021512:	404a      	eors	r2, r1
 8021514:	b2d2      	uxtb	r2, r2
 8021516:	701a      	strb	r2, [r3, #0]
 8021518:	697b      	ldr	r3, [r7, #20]
 802151a:	3301      	adds	r3, #1
 802151c:	617b      	str	r3, [r7, #20]
 802151e:	697a      	ldr	r2, [r7, #20]
 8021520:	683b      	ldr	r3, [r7, #0]
 8021522:	429a      	cmp	r2, r3
 8021524:	d3e8      	bcc.n	80214f8 <mg_ws_mask+0x3e>
  }
}
 8021526:	bf00      	nop
 8021528:	371c      	adds	r7, #28
 802152a:	46bd      	mov	sp, r7
 802152c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021530:	4770      	bx	lr
	...

08021534 <mg_ws_send>:

size_t mg_ws_send(struct mg_connection *c, const void *buf, size_t len,
                  int op) {
 8021534:	b580      	push	{r7, lr}
 8021536:	b08a      	sub	sp, #40	@ 0x28
 8021538:	af00      	add	r7, sp, #0
 802153a:	60f8      	str	r0, [r7, #12]
 802153c:	60b9      	str	r1, [r7, #8]
 802153e:	607a      	str	r2, [r7, #4]
 8021540:	603b      	str	r3, [r7, #0]
  uint8_t header[14];
  size_t header_len = mkhdr(len, op, c->is_client, header);
 8021542:	68fb      	ldr	r3, [r7, #12]
 8021544:	f893 30b4 	ldrb.w	r3, [r3, #180]	@ 0xb4
 8021548:	f3c3 0340 	ubfx	r3, r3, #1, #1
 802154c:	b2db      	uxtb	r3, r3
 802154e:	2b00      	cmp	r3, #0
 8021550:	bf14      	ite	ne
 8021552:	2301      	movne	r3, #1
 8021554:	2300      	moveq	r3, #0
 8021556:	b2da      	uxtb	r2, r3
 8021558:	f107 0314 	add.w	r3, r7, #20
 802155c:	6839      	ldr	r1, [r7, #0]
 802155e:	6878      	ldr	r0, [r7, #4]
 8021560:	f7ff ff3a 	bl	80213d8 <mkhdr>
 8021564:	6278      	str	r0, [r7, #36]	@ 0x24
  if (!mg_send(c, header, header_len)) return 0;
 8021566:	f107 0314 	add.w	r3, r7, #20
 802156a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 802156c:	4619      	mov	r1, r3
 802156e:	68f8      	ldr	r0, [r7, #12]
 8021570:	f7f0 fcc6 	bl	8011f00 <mg_send>
 8021574:	4603      	mov	r3, r0
 8021576:	f083 0301 	eor.w	r3, r3, #1
 802157a:	b2db      	uxtb	r3, r3
 802157c:	2b00      	cmp	r3, #0
 802157e:	d001      	beq.n	8021584 <mg_ws_send+0x50>
 8021580:	2300      	movs	r3, #0
 8021582:	e024      	b.n	80215ce <mg_ws_send+0x9a>
  if (!mg_send(c, buf, len)) return header_len;
 8021584:	687a      	ldr	r2, [r7, #4]
 8021586:	68b9      	ldr	r1, [r7, #8]
 8021588:	68f8      	ldr	r0, [r7, #12]
 802158a:	f7f0 fcb9 	bl	8011f00 <mg_send>
 802158e:	4603      	mov	r3, r0
 8021590:	f083 0301 	eor.w	r3, r3, #1
 8021594:	b2db      	uxtb	r3, r3
 8021596:	2b00      	cmp	r3, #0
 8021598:	d001      	beq.n	802159e <mg_ws_send+0x6a>
 802159a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 802159c:	e017      	b.n	80215ce <mg_ws_send+0x9a>
  MG_VERBOSE(("WS out: %d [%.*s]", (int) len, (int) len, buf));
 802159e:	4b0e      	ldr	r3, [pc, #56]	@ (80215d8 <mg_ws_send+0xa4>)
 80215a0:	681b      	ldr	r3, [r3, #0]
 80215a2:	2b03      	cmp	r3, #3
 80215a4:	dd0c      	ble.n	80215c0 <mg_ws_send+0x8c>
 80215a6:	4b0d      	ldr	r3, [pc, #52]	@ (80215dc <mg_ws_send+0xa8>)
 80215a8:	f644 72b7 	movw	r2, #20407	@ 0x4fb7
 80215ac:	490c      	ldr	r1, [pc, #48]	@ (80215e0 <mg_ws_send+0xac>)
 80215ae:	2004      	movs	r0, #4
 80215b0:	f7eb fdfc 	bl	800d1ac <mg_log_prefix>
 80215b4:	6879      	ldr	r1, [r7, #4]
 80215b6:	687a      	ldr	r2, [r7, #4]
 80215b8:	68bb      	ldr	r3, [r7, #8]
 80215ba:	480a      	ldr	r0, [pc, #40]	@ (80215e4 <mg_ws_send+0xb0>)
 80215bc:	f7eb fe46 	bl	800d24c <mg_log>
  mg_ws_mask(c, len);
 80215c0:	6879      	ldr	r1, [r7, #4]
 80215c2:	68f8      	ldr	r0, [r7, #12]
 80215c4:	f7ff ff79 	bl	80214ba <mg_ws_mask>
  return header_len + len;
 80215c8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80215ca:	687b      	ldr	r3, [r7, #4]
 80215cc:	4413      	add	r3, r2
}
 80215ce:	4618      	mov	r0, r3
 80215d0:	3728      	adds	r7, #40	@ 0x28
 80215d2:	46bd      	mov	sp, r7
 80215d4:	bd80      	pop	{r7, pc}
 80215d6:	bf00      	nop
 80215d8:	20000258 	.word	0x20000258
 80215dc:	08028b44 	.word	0x08028b44
 80215e0:	08025140 	.word	0x08025140
 80215e4:	08027ab0 	.word	0x08027ab0

080215e8 <mg_ws_client_handshake>:

static bool mg_ws_client_handshake(struct mg_connection *c) {
 80215e8:	b580      	push	{r7, lr}
 80215ea:	f5ad 7d0a 	sub.w	sp, sp, #552	@ 0x228
 80215ee:	af00      	add	r7, sp, #0
 80215f0:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 80215f4:	f5a3 7309 	sub.w	r3, r3, #548	@ 0x224
 80215f8:	6018      	str	r0, [r3, #0]
  int n = mg_http_get_request_len(c->recv.buf, c->recv.len);
 80215fa:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 80215fe:	f5a3 7309 	sub.w	r3, r3, #548	@ 0x224
 8021602:	681b      	ldr	r3, [r3, #0]
 8021604:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8021606:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 802160a:	f5a3 7309 	sub.w	r3, r3, #548	@ 0x224
 802160e:	681b      	ldr	r3, [r3, #0]
 8021610:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8021612:	4619      	mov	r1, r3
 8021614:	4610      	mov	r0, r2
 8021616:	f7e8 f945 	bl	80098a4 <mg_http_get_request_len>
 802161a:	f8c7 0224 	str.w	r0, [r7, #548]	@ 0x224
  if (n < 0) {
 802161e:	f8d7 3224 	ldr.w	r3, [r7, #548]	@ 0x224
 8021622:	2b00      	cmp	r3, #0
 8021624:	da08      	bge.n	8021638 <mg_ws_client_handshake+0x50>
    mg_error(c, "not http");  // Some just, not an HTTP request
 8021626:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 802162a:	f5a3 7309 	sub.w	r3, r3, #548	@ 0x224
 802162e:	4936      	ldr	r1, [pc, #216]	@ (8021708 <mg_ws_client_handshake+0x120>)
 8021630:	6818      	ldr	r0, [r3, #0]
 8021632:	f7e6 fc1f 	bl	8007e74 <mg_error>
 8021636:	e060      	b.n	80216fa <mg_ws_client_handshake+0x112>
  } else if (n > 0) {
 8021638:	f8d7 3224 	ldr.w	r3, [r7, #548]	@ 0x224
 802163c:	2b00      	cmp	r3, #0
 802163e:	dd5a      	ble.n	80216f6 <mg_ws_client_handshake+0x10e>
    if (n < 15 || memcmp(c->recv.buf + 9, "101", 3) != 0) {
 8021640:	f8d7 3224 	ldr.w	r3, [r7, #548]	@ 0x224
 8021644:	2b0e      	cmp	r3, #14
 8021646:	dd0e      	ble.n	8021666 <mg_ws_client_handshake+0x7e>
 8021648:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 802164c:	f5a3 7309 	sub.w	r3, r3, #548	@ 0x224
 8021650:	681b      	ldr	r3, [r3, #0]
 8021652:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8021654:	3309      	adds	r3, #9
 8021656:	2203      	movs	r2, #3
 8021658:	492c      	ldr	r1, [pc, #176]	@ (802170c <mg_ws_client_handshake+0x124>)
 802165a:	4618      	mov	r0, r3
 802165c:	f002 feec 	bl	8024438 <memcmp>
 8021660:	4603      	mov	r3, r0
 8021662:	2b00      	cmp	r3, #0
 8021664:	d008      	beq.n	8021678 <mg_ws_client_handshake+0x90>
      mg_error(c, "ws handshake error");
 8021666:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 802166a:	f5a3 7309 	sub.w	r3, r3, #548	@ 0x224
 802166e:	4928      	ldr	r1, [pc, #160]	@ (8021710 <mg_ws_client_handshake+0x128>)
 8021670:	6818      	ldr	r0, [r3, #0]
 8021672:	f7e6 fbff 	bl	8007e74 <mg_error>
 8021676:	e031      	b.n	80216dc <mg_ws_client_handshake+0xf4>
    } else {
      struct mg_http_message hm;
      if (mg_http_parse((char *) c->recv.buf, c->recv.len, &hm)) {
 8021678:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 802167c:	f5a3 7309 	sub.w	r3, r3, #548	@ 0x224
 8021680:	681b      	ldr	r3, [r3, #0]
 8021682:	6c18      	ldr	r0, [r3, #64]	@ 0x40
 8021684:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 8021688:	f5a3 7309 	sub.w	r3, r3, #548	@ 0x224
 802168c:	681b      	ldr	r3, [r3, #0]
 802168e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8021690:	f107 020c 	add.w	r2, r7, #12
 8021694:	4619      	mov	r1, r3
 8021696:	f7e8 fb0f 	bl	8009cb8 <mg_http_parse>
 802169a:	4603      	mov	r3, r0
 802169c:	2b00      	cmp	r3, #0
 802169e:	d015      	beq.n	80216cc <mg_ws_client_handshake+0xe4>
        c->is_websocket = 1;
 80216a0:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 80216a4:	f5a3 7309 	sub.w	r3, r3, #548	@ 0x224
 80216a8:	681a      	ldr	r2, [r3, #0]
 80216aa:	f892 30b5 	ldrb.w	r3, [r2, #181]	@ 0xb5
 80216ae:	f043 0302 	orr.w	r3, r3, #2
 80216b2:	f882 30b5 	strb.w	r3, [r2, #181]	@ 0xb5
        mg_call(c, MG_EV_WS_OPEN, &hm);
 80216b6:	f107 020c 	add.w	r2, r7, #12
 80216ba:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 80216be:	f5a3 7309 	sub.w	r3, r3, #548	@ 0x224
 80216c2:	210c      	movs	r1, #12
 80216c4:	6818      	ldr	r0, [r3, #0]
 80216c6:	f7e6 fbb3 	bl	8007e30 <mg_call>
 80216ca:	e007      	b.n	80216dc <mg_ws_client_handshake+0xf4>
      } else {
        mg_error(c, "ws handshake error");
 80216cc:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 80216d0:	f5a3 7309 	sub.w	r3, r3, #548	@ 0x224
 80216d4:	490e      	ldr	r1, [pc, #56]	@ (8021710 <mg_ws_client_handshake+0x128>)
 80216d6:	6818      	ldr	r0, [r3, #0]
 80216d8:	f7e6 fbcc 	bl	8007e74 <mg_error>
      }
    }
    mg_iobuf_del(&c->recv, 0, (size_t) n);
 80216dc:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 80216e0:	f5a3 7309 	sub.w	r3, r3, #548	@ 0x224
 80216e4:	681b      	ldr	r3, [r3, #0]
 80216e6:	3340      	adds	r3, #64	@ 0x40
 80216e8:	f8d7 2224 	ldr.w	r2, [r7, #548]	@ 0x224
 80216ec:	2100      	movs	r1, #0
 80216ee:	4618      	mov	r0, r3
 80216f0:	f7ea fe8e 	bl	800c410 <mg_iobuf_del>
 80216f4:	e001      	b.n	80216fa <mg_ws_client_handshake+0x112>
  } else {
    return true;  // Request is not yet received, quit event handler
 80216f6:	2301      	movs	r3, #1
 80216f8:	e000      	b.n	80216fc <mg_ws_client_handshake+0x114>
  }
  return false;  // Continue event handler
 80216fa:	2300      	movs	r3, #0
}
 80216fc:	4618      	mov	r0, r3
 80216fe:	f507 770a 	add.w	r7, r7, #552	@ 0x228
 8021702:	46bd      	mov	sp, r7
 8021704:	bd80      	pop	{r7, pc}
 8021706:	bf00      	nop
 8021708:	08027ac4 	.word	0x08027ac4
 802170c:	08027ad0 	.word	0x08027ad0
 8021710:	08027ad4 	.word	0x08027ad4

08021714 <mg_ws_cb>:

static void mg_ws_cb(struct mg_connection *c, int ev, void *ev_data) {
 8021714:	b580      	push	{r7, lr}
 8021716:	b090      	sub	sp, #64	@ 0x40
 8021718:	af00      	add	r7, sp, #0
 802171a:	6178      	str	r0, [r7, #20]
 802171c:	6139      	str	r1, [r7, #16]
 802171e:	60fa      	str	r2, [r7, #12]
  struct ws_msg msg;
  size_t ofs = (size_t) c->pfn_data;
 8021720:	697b      	ldr	r3, [r7, #20]
 8021722:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8021726:	63fb      	str	r3, [r7, #60]	@ 0x3c

  // assert(ofs < c->recv.len);
  if (ev == MG_EV_READ) {
 8021728:	693b      	ldr	r3, [r7, #16]
 802172a:	2b07      	cmp	r3, #7
 802172c:	f040 813c 	bne.w	80219a8 <mg_ws_cb+0x294>
    if (c->is_client && !c->is_websocket && mg_ws_client_handshake(c)) return;
 8021730:	697b      	ldr	r3, [r7, #20]
 8021732:	f893 30b4 	ldrb.w	r3, [r3, #180]	@ 0xb4
 8021736:	f003 0302 	and.w	r3, r3, #2
 802173a:	b2db      	uxtb	r3, r3
 802173c:	2b00      	cmp	r3, #0
 802173e:	f000 8120 	beq.w	8021982 <mg_ws_cb+0x26e>
 8021742:	697b      	ldr	r3, [r7, #20]
 8021744:	f893 30b5 	ldrb.w	r3, [r3, #181]	@ 0xb5
 8021748:	f003 0302 	and.w	r3, r3, #2
 802174c:	b2db      	uxtb	r3, r3
 802174e:	2b00      	cmp	r3, #0
 8021750:	f040 8117 	bne.w	8021982 <mg_ws_cb+0x26e>
 8021754:	6978      	ldr	r0, [r7, #20]
 8021756:	f7ff ff47 	bl	80215e8 <mg_ws_client_handshake>
 802175a:	4603      	mov	r3, r0
 802175c:	2b00      	cmp	r3, #0
 802175e:	f040 8122 	bne.w	80219a6 <mg_ws_cb+0x292>

    while (ws_process(c->recv.buf + ofs, c->recv.len - ofs, &msg) > 0) {
 8021762:	e10e      	b.n	8021982 <mg_ws_cb+0x26e>
      char *s = (char *) c->recv.buf + ofs + msg.header_len;
 8021764:	697b      	ldr	r3, [r7, #20]
 8021766:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8021768:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 802176a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 802176c:	440b      	add	r3, r1
 802176e:	4413      	add	r3, r2
 8021770:	637b      	str	r3, [r7, #52]	@ 0x34
      struct mg_ws_message m = {{s, msg.data_len}, msg.flags};
 8021772:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8021774:	61bb      	str	r3, [r7, #24]
 8021776:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8021778:	61fb      	str	r3, [r7, #28]
 802177a:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 802177e:	f887 3020 	strb.w	r3, [r7, #32]
      size_t len = msg.header_len + msg.data_len;
 8021782:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8021784:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8021786:	4413      	add	r3, r2
 8021788:	63bb      	str	r3, [r7, #56]	@ 0x38
      uint8_t final = msg.flags & 128, op = msg.flags & 15;
 802178a:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 802178e:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8021792:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
 8021796:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 802179a:	f003 030f 	and.w	r3, r3, #15
 802179e:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32
      // MG_VERBOSE ("fin %d op %d len %d [%.*s]", final, op,
      //                       (int) m.data.len, (int) m.data.len, m.data.buf));
      switch (op) {
 80217a2:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 80217a6:	2b0a      	cmp	r3, #10
 80217a8:	d877      	bhi.n	802189a <mg_ws_cb+0x186>
 80217aa:	a201      	add	r2, pc, #4	@ (adr r2, 80217b0 <mg_ws_cb+0x9c>)
 80217ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80217b0:	080217dd 	.word	0x080217dd
 80217b4:	08021837 	.word	0x08021837
 80217b8:	08021837 	.word	0x08021837
 80217bc:	0802189b 	.word	0x0802189b
 80217c0:	0802189b 	.word	0x0802189b
 80217c4:	0802189b 	.word	0x0802189b
 80217c8:	0802189b 	.word	0x0802189b
 80217cc:	0802189b 	.word	0x0802189b
 80217d0:	0802184f 	.word	0x0802184f
 80217d4:	080217ed 	.word	0x080217ed
 80217d8:	08021827 	.word	0x08021827
        case WEBSOCKET_OP_CONTINUE:
          mg_call(c, MG_EV_WS_CTL, &m);
 80217dc:	f107 0318 	add.w	r3, r7, #24
 80217e0:	461a      	mov	r2, r3
 80217e2:	210e      	movs	r1, #14
 80217e4:	6978      	ldr	r0, [r7, #20]
 80217e6:	f7e6 fb23 	bl	8007e30 <mg_call>
          break;
 80217ea:	e05f      	b.n	80218ac <mg_ws_cb+0x198>
        case WEBSOCKET_OP_PING:
          MG_DEBUG(("%s", "WS PONG"));
 80217ec:	4b70      	ldr	r3, [pc, #448]	@ (80219b0 <mg_ws_cb+0x29c>)
 80217ee:	681b      	ldr	r3, [r3, #0]
 80217f0:	2b02      	cmp	r3, #2
 80217f2:	dd0a      	ble.n	802180a <mg_ws_cb+0xf6>
 80217f4:	4b6f      	ldr	r3, [pc, #444]	@ (80219b4 <mg_ws_cb+0x2a0>)
 80217f6:	f644 72e7 	movw	r2, #20455	@ 0x4fe7
 80217fa:	496f      	ldr	r1, [pc, #444]	@ (80219b8 <mg_ws_cb+0x2a4>)
 80217fc:	2003      	movs	r0, #3
 80217fe:	f7eb fcd5 	bl	800d1ac <mg_log_prefix>
 8021802:	496e      	ldr	r1, [pc, #440]	@ (80219bc <mg_ws_cb+0x2a8>)
 8021804:	486e      	ldr	r0, [pc, #440]	@ (80219c0 <mg_ws_cb+0x2ac>)
 8021806:	f7eb fd21 	bl	800d24c <mg_log>
          mg_ws_send(c, s, msg.data_len, WEBSOCKET_OP_PONG);
 802180a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 802180c:	230a      	movs	r3, #10
 802180e:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8021810:	6978      	ldr	r0, [r7, #20]
 8021812:	f7ff fe8f 	bl	8021534 <mg_ws_send>
          mg_call(c, MG_EV_WS_CTL, &m);
 8021816:	f107 0318 	add.w	r3, r7, #24
 802181a:	461a      	mov	r2, r3
 802181c:	210e      	movs	r1, #14
 802181e:	6978      	ldr	r0, [r7, #20]
 8021820:	f7e6 fb06 	bl	8007e30 <mg_call>
          break;
 8021824:	e042      	b.n	80218ac <mg_ws_cb+0x198>
        case WEBSOCKET_OP_PONG:
          mg_call(c, MG_EV_WS_CTL, &m);
 8021826:	f107 0318 	add.w	r3, r7, #24
 802182a:	461a      	mov	r2, r3
 802182c:	210e      	movs	r1, #14
 802182e:	6978      	ldr	r0, [r7, #20]
 8021830:	f7e6 fafe 	bl	8007e30 <mg_call>
          break;
 8021834:	e03a      	b.n	80218ac <mg_ws_cb+0x198>
        case WEBSOCKET_OP_TEXT:
        case WEBSOCKET_OP_BINARY:
          if (final) mg_call(c, MG_EV_WS_MSG, &m);
 8021836:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 802183a:	2b00      	cmp	r3, #0
 802183c:	d035      	beq.n	80218aa <mg_ws_cb+0x196>
 802183e:	f107 0318 	add.w	r3, r7, #24
 8021842:	461a      	mov	r2, r3
 8021844:	210d      	movs	r1, #13
 8021846:	6978      	ldr	r0, [r7, #20]
 8021848:	f7e6 faf2 	bl	8007e30 <mg_call>
          break;
 802184c:	e02d      	b.n	80218aa <mg_ws_cb+0x196>
        case WEBSOCKET_OP_CLOSE:
          MG_DEBUG(("%lu WS CLOSE", c->id));
 802184e:	4b58      	ldr	r3, [pc, #352]	@ (80219b0 <mg_ws_cb+0x29c>)
 8021850:	681b      	ldr	r3, [r3, #0]
 8021852:	2b02      	cmp	r3, #2
 8021854:	dd0c      	ble.n	8021870 <mg_ws_cb+0x15c>
 8021856:	4b57      	ldr	r3, [pc, #348]	@ (80219b4 <mg_ws_cb+0x2a0>)
 8021858:	f644 72f3 	movw	r2, #20467	@ 0x4ff3
 802185c:	4956      	ldr	r1, [pc, #344]	@ (80219b8 <mg_ws_cb+0x2a4>)
 802185e:	2003      	movs	r0, #3
 8021860:	f7eb fca4 	bl	800d1ac <mg_log_prefix>
 8021864:	697b      	ldr	r3, [r7, #20]
 8021866:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8021868:	4619      	mov	r1, r3
 802186a:	4856      	ldr	r0, [pc, #344]	@ (80219c4 <mg_ws_cb+0x2b0>)
 802186c:	f7eb fcee 	bl	800d24c <mg_log>
          mg_call(c, MG_EV_WS_CTL, &m);
 8021870:	f107 0318 	add.w	r3, r7, #24
 8021874:	461a      	mov	r2, r3
 8021876:	210e      	movs	r1, #14
 8021878:	6978      	ldr	r0, [r7, #20]
 802187a:	f7e6 fad9 	bl	8007e30 <mg_call>
          // Echo the payload of the received CLOSE message back to the sender
          mg_ws_send(c, m.data.buf, m.data.len, WEBSOCKET_OP_CLOSE);
 802187e:	69b9      	ldr	r1, [r7, #24]
 8021880:	69fa      	ldr	r2, [r7, #28]
 8021882:	2308      	movs	r3, #8
 8021884:	6978      	ldr	r0, [r7, #20]
 8021886:	f7ff fe55 	bl	8021534 <mg_ws_send>
          c->is_draining = 1;
 802188a:	697a      	ldr	r2, [r7, #20]
 802188c:	f892 30b5 	ldrb.w	r3, [r2, #181]	@ 0xb5
 8021890:	f043 0310 	orr.w	r3, r3, #16
 8021894:	f882 30b5 	strb.w	r3, [r2, #181]	@ 0xb5
          break;
 8021898:	e008      	b.n	80218ac <mg_ws_cb+0x198>
        default:
          // Per RFC6455, close conn when an unknown op is recvd
          mg_error(c, "unknown WS op %d", op);
 802189a:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 802189e:	461a      	mov	r2, r3
 80218a0:	4949      	ldr	r1, [pc, #292]	@ (80219c8 <mg_ws_cb+0x2b4>)
 80218a2:	6978      	ldr	r0, [r7, #20]
 80218a4:	f7e6 fae6 	bl	8007e74 <mg_error>
          break;
 80218a8:	e000      	b.n	80218ac <mg_ws_cb+0x198>
          break;
 80218aa:	bf00      	nop
      }

      // Handle fragmented frames: strip header, keep in c->recv
      if (final == 0 || op == 0) {
 80218ac:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80218b0:	2b00      	cmp	r3, #0
 80218b2:	d003      	beq.n	80218bc <mg_ws_cb+0x1a8>
 80218b4:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 80218b8:	2b00      	cmp	r3, #0
 80218ba:	d11f      	bne.n	80218fc <mg_ws_cb+0x1e8>
        if (op) ofs++, len--, msg.header_len--;       // First frame
 80218bc:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 80218c0:	2b00      	cmp	r3, #0
 80218c2:	d008      	beq.n	80218d6 <mg_ws_cb+0x1c2>
 80218c4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80218c6:	3301      	adds	r3, #1
 80218c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80218ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80218cc:	3b01      	subs	r3, #1
 80218ce:	63bb      	str	r3, [r7, #56]	@ 0x38
 80218d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80218d2:	3b01      	subs	r3, #1
 80218d4:	62bb      	str	r3, [r7, #40]	@ 0x28
        mg_iobuf_del(&c->recv, ofs, msg.header_len);  // Strip header
 80218d6:	697b      	ldr	r3, [r7, #20]
 80218d8:	3340      	adds	r3, #64	@ 0x40
 80218da:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80218dc:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80218de:	4618      	mov	r0, r3
 80218e0:	f7ea fd96 	bl	800c410 <mg_iobuf_del>
        len -= msg.header_len;
 80218e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80218e6:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80218e8:	1ad3      	subs	r3, r2, r3
 80218ea:	63bb      	str	r3, [r7, #56]	@ 0x38
        ofs += len;
 80218ec:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80218ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80218f0:	4413      	add	r3, r2
 80218f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        c->pfn_data = (void *) ofs;
 80218f4:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80218f6:	697b      	ldr	r3, [r7, #20]
 80218f8:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        // MG_INFO(("FRAG %d [%.*s]", (int) ofs, (int) ofs, c->recv.buf));
      }
      // Remove non-fragmented frame
      if (final && op) mg_iobuf_del(&c->recv, ofs, len);
 80218fc:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8021900:	2b00      	cmp	r3, #0
 8021902:	d00a      	beq.n	802191a <mg_ws_cb+0x206>
 8021904:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 8021908:	2b00      	cmp	r3, #0
 802190a:	d006      	beq.n	802191a <mg_ws_cb+0x206>
 802190c:	697b      	ldr	r3, [r7, #20]
 802190e:	3340      	adds	r3, #64	@ 0x40
 8021910:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8021912:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8021914:	4618      	mov	r0, r3
 8021916:	f7ea fd7b 	bl	800c410 <mg_iobuf_del>
      // Last chunk of the fragmented frame
      if (final && !op && (ofs > 0)) {
 802191a:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 802191e:	2b00      	cmp	r3, #0
 8021920:	d02f      	beq.n	8021982 <mg_ws_cb+0x26e>
 8021922:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 8021926:	2b00      	cmp	r3, #0
 8021928:	d12b      	bne.n	8021982 <mg_ws_cb+0x26e>
 802192a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 802192c:	2b00      	cmp	r3, #0
 802192e:	d028      	beq.n	8021982 <mg_ws_cb+0x26e>
        m.flags = c->recv.buf[0];
 8021930:	697b      	ldr	r3, [r7, #20]
 8021932:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8021934:	781b      	ldrb	r3, [r3, #0]
 8021936:	f887 3020 	strb.w	r3, [r7, #32]
        m.data = mg_str_n((char *) &c->recv.buf[1], (size_t) (ofs - 1));
 802193a:	697b      	ldr	r3, [r7, #20]
 802193c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 802193e:	1c59      	adds	r1, r3, #1
 8021940:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8021942:	1e5a      	subs	r2, r3, #1
 8021944:	463b      	mov	r3, r7
 8021946:	4618      	mov	r0, r3
 8021948:	f7f4 f83f 	bl	80159ca <mg_str_n>
 802194c:	f107 0318 	add.w	r3, r7, #24
 8021950:	463a      	mov	r2, r7
 8021952:	e892 0003 	ldmia.w	r2, {r0, r1}
 8021956:	e883 0003 	stmia.w	r3, {r0, r1}
        mg_call(c, MG_EV_WS_MSG, &m);
 802195a:	f107 0318 	add.w	r3, r7, #24
 802195e:	461a      	mov	r2, r3
 8021960:	210d      	movs	r1, #13
 8021962:	6978      	ldr	r0, [r7, #20]
 8021964:	f7e6 fa64 	bl	8007e30 <mg_call>
        mg_iobuf_del(&c->recv, 0, ofs);
 8021968:	697b      	ldr	r3, [r7, #20]
 802196a:	3340      	adds	r3, #64	@ 0x40
 802196c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 802196e:	2100      	movs	r1, #0
 8021970:	4618      	mov	r0, r3
 8021972:	f7ea fd4d 	bl	800c410 <mg_iobuf_del>
        ofs = 0;
 8021976:	2300      	movs	r3, #0
 8021978:	63fb      	str	r3, [r7, #60]	@ 0x3c
        c->pfn_data = NULL;
 802197a:	697b      	ldr	r3, [r7, #20]
 802197c:	2200      	movs	r2, #0
 802197e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    while (ws_process(c->recv.buf + ofs, c->recv.len - ofs, &msg) > 0) {
 8021982:	697b      	ldr	r3, [r7, #20]
 8021984:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8021986:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8021988:	18d0      	adds	r0, r2, r3
 802198a:	697b      	ldr	r3, [r7, #20]
 802198c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 802198e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8021990:	1ad3      	subs	r3, r2, r3
 8021992:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 8021996:	4619      	mov	r1, r3
 8021998:	f7ff fc76 	bl	8021288 <ws_process>
 802199c:	4603      	mov	r3, r0
 802199e:	2b00      	cmp	r3, #0
 80219a0:	f47f aee0 	bne.w	8021764 <mg_ws_cb+0x50>
 80219a4:	e000      	b.n	80219a8 <mg_ws_cb+0x294>
    if (c->is_client && !c->is_websocket && mg_ws_client_handshake(c)) return;
 80219a6:	bf00      	nop
      }
    }
  }
  (void) ev_data;
}
 80219a8:	3740      	adds	r7, #64	@ 0x40
 80219aa:	46bd      	mov	sp, r7
 80219ac:	bd80      	pop	{r7, pc}
 80219ae:	bf00      	nop
 80219b0:	20000258 	.word	0x20000258
 80219b4:	08028b50 	.word	0x08028b50
 80219b8:	08025140 	.word	0x08025140
 80219bc:	08027ae8 	.word	0x08027ae8
 80219c0:	0802540c 	.word	0x0802540c
 80219c4:	08027af0 	.word	0x08027af0
 80219c8:	08027b00 	.word	0x08027b00

080219cc <mg_ws_upgrade>:
  }
  return c;
}

void mg_ws_upgrade(struct mg_connection *c, struct mg_http_message *hm,
                   const char *fmt, ...) {
 80219cc:	b40c      	push	{r2, r3}
 80219ce:	b580      	push	{r7, lr}
 80219d0:	b088      	sub	sp, #32
 80219d2:	af02      	add	r7, sp, #8
 80219d4:	6078      	str	r0, [r7, #4]
 80219d6:	6039      	str	r1, [r7, #0]
  struct mg_str *wskey = mg_http_get_header(hm, "Sec-WebSocket-Key");
 80219d8:	4924      	ldr	r1, [pc, #144]	@ (8021a6c <mg_ws_upgrade+0xa0>)
 80219da:	6838      	ldr	r0, [r7, #0]
 80219dc:	f7e7 ffb0 	bl	8009940 <mg_http_get_header>
 80219e0:	6178      	str	r0, [r7, #20]
  c->pfn = mg_ws_cb;
 80219e2:	687b      	ldr	r3, [r7, #4]
 80219e4:	4a22      	ldr	r2, [pc, #136]	@ (8021a70 <mg_ws_upgrade+0xa4>)
 80219e6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  c->pfn_data = NULL;
 80219ea:	687b      	ldr	r3, [r7, #4]
 80219ec:	2200      	movs	r2, #0
 80219ee:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  if (wskey == NULL) {
 80219f2:	697b      	ldr	r3, [r7, #20]
 80219f4:	2b00      	cmp	r3, #0
 80219f6:	d10e      	bne.n	8021a16 <mg_ws_upgrade+0x4a>
    mg_http_reply(c, 426, "", "WS upgrade expected\n");
 80219f8:	4b1e      	ldr	r3, [pc, #120]	@ (8021a74 <mg_ws_upgrade+0xa8>)
 80219fa:	4a1f      	ldr	r2, [pc, #124]	@ (8021a78 <mg_ws_upgrade+0xac>)
 80219fc:	f44f 71d5 	mov.w	r1, #426	@ 0x1aa
 8021a00:	6878      	ldr	r0, [r7, #4]
 8021a02:	f7e9 f813 	bl	800aa2c <mg_http_reply>
    c->is_draining = 1;
 8021a06:	687a      	ldr	r2, [r7, #4]
 8021a08:	f892 30b5 	ldrb.w	r3, [r2, #181]	@ 0xb5
 8021a0c:	f043 0310 	orr.w	r3, r3, #16
 8021a10:	f882 30b5 	strb.w	r3, [r2, #181]	@ 0xb5
    va_end(ap);
    c->is_websocket = 1;
    c->is_resp = 0;
    mg_call(c, MG_EV_WS_OPEN, hm);
  }
}
 8021a14:	e023      	b.n	8021a5e <mg_ws_upgrade+0x92>
    struct mg_str *wsproto = mg_http_get_header(hm, "Sec-WebSocket-Protocol");
 8021a16:	4919      	ldr	r1, [pc, #100]	@ (8021a7c <mg_ws_upgrade+0xb0>)
 8021a18:	6838      	ldr	r0, [r7, #0]
 8021a1a:	f7e7 ff91 	bl	8009940 <mg_http_get_header>
 8021a1e:	6138      	str	r0, [r7, #16]
    va_start(ap, fmt);
 8021a20:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8021a24:	60fb      	str	r3, [r7, #12]
    ws_handshake(c, wskey, wsproto, fmt, &ap);
 8021a26:	f107 030c 	add.w	r3, r7, #12
 8021a2a:	9300      	str	r3, [sp, #0]
 8021a2c:	6a3b      	ldr	r3, [r7, #32]
 8021a2e:	693a      	ldr	r2, [r7, #16]
 8021a30:	6979      	ldr	r1, [r7, #20]
 8021a32:	6878      	ldr	r0, [r7, #4]
 8021a34:	f7ff fba8 	bl	8021188 <ws_handshake>
    c->is_websocket = 1;
 8021a38:	687a      	ldr	r2, [r7, #4]
 8021a3a:	f892 30b5 	ldrb.w	r3, [r2, #181]	@ 0xb5
 8021a3e:	f043 0302 	orr.w	r3, r3, #2
 8021a42:	f882 30b5 	strb.w	r3, [r2, #181]	@ 0xb5
    c->is_resp = 0;
 8021a46:	687a      	ldr	r2, [r7, #4]
 8021a48:	f892 30b6 	ldrb.w	r3, [r2, #182]	@ 0xb6
 8021a4c:	f023 0301 	bic.w	r3, r3, #1
 8021a50:	f882 30b6 	strb.w	r3, [r2, #182]	@ 0xb6
    mg_call(c, MG_EV_WS_OPEN, hm);
 8021a54:	683a      	ldr	r2, [r7, #0]
 8021a56:	210c      	movs	r1, #12
 8021a58:	6878      	ldr	r0, [r7, #4]
 8021a5a:	f7e6 f9e9 	bl	8007e30 <mg_call>
}
 8021a5e:	bf00      	nop
 8021a60:	3718      	adds	r7, #24
 8021a62:	46bd      	mov	sp, r7
 8021a64:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8021a68:	b002      	add	sp, #8
 8021a6a:	4770      	bx	lr
 8021a6c:	08027b90 	.word	0x08027b90
 8021a70:	08021715 	.word	0x08021715
 8021a74:	08027ba4 	.word	0x08027ba4
 8021a78:	08025980 	.word	0x08025980
 8021a7c:	08027bbc 	.word	0x08027bbc

08021a80 <mg_phy_id_to_str>:
  MG_PHY_RTL8201_REG_RMSR = 16,  // in page 7
  MG_PHY_RTL8201_REG_PAGESEL = 31,
  MG_PHY_ICS189432_REG_POLL = 17
};

static const char *mg_phy_id_to_str(uint16_t id1, uint16_t id2) {
 8021a80:	b480      	push	{r7}
 8021a82:	b083      	sub	sp, #12
 8021a84:	af00      	add	r7, sp, #0
 8021a86:	4603      	mov	r3, r0
 8021a88:	460a      	mov	r2, r1
 8021a8a:	80fb      	strh	r3, [r7, #6]
 8021a8c:	4613      	mov	r3, r2
 8021a8e:	80bb      	strh	r3, [r7, #4]
  switch (id1) {
 8021a90:	88fb      	ldrh	r3, [r7, #6]
 8021a92:	2b22      	cmp	r3, #34	@ 0x22
 8021a94:	dc40      	bgt.n	8021b18 <mg_phy_id_to_str+0x98>
 8021a96:	2b07      	cmp	r3, #7
 8021a98:	db63      	blt.n	8021b62 <mg_phy_id_to_str+0xe2>
 8021a9a:	3b07      	subs	r3, #7
 8021a9c:	2b1b      	cmp	r3, #27
 8021a9e:	d860      	bhi.n	8021b62 <mg_phy_id_to_str+0xe2>
 8021aa0:	a201      	add	r2, pc, #4	@ (adr r2, 8021aa8 <mg_phy_id_to_str+0x28>)
 8021aa2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8021aa6:	bf00      	nop
 8021aa8:	08021b57 	.word	0x08021b57
 8021aac:	08021b63 	.word	0x08021b63
 8021ab0:	08021b63 	.word	0x08021b63
 8021ab4:	08021b63 	.word	0x08021b63
 8021ab8:	08021b63 	.word	0x08021b63
 8021abc:	08021b63 	.word	0x08021b63
 8021ac0:	08021b63 	.word	0x08021b63
 8021ac4:	08021b63 	.word	0x08021b63
 8021ac8:	08021b63 	.word	0x08021b63
 8021acc:	08021b63 	.word	0x08021b63
 8021ad0:	08021b63 	.word	0x08021b63
 8021ad4:	08021b63 	.word	0x08021b63
 8021ad8:	08021b63 	.word	0x08021b63
 8021adc:	08021b63 	.word	0x08021b63
 8021ae0:	08021b5f 	.word	0x08021b5f
 8021ae4:	08021b63 	.word	0x08021b63
 8021ae8:	08021b63 	.word	0x08021b63
 8021aec:	08021b63 	.word	0x08021b63
 8021af0:	08021b63 	.word	0x08021b63
 8021af4:	08021b63 	.word	0x08021b63
 8021af8:	08021b63 	.word	0x08021b63
 8021afc:	08021b5b 	.word	0x08021b5b
 8021b00:	08021b63 	.word	0x08021b63
 8021b04:	08021b63 	.word	0x08021b63
 8021b08:	08021b63 	.word	0x08021b63
 8021b0c:	08021b63 	.word	0x08021b63
 8021b10:	08021b63 	.word	0x08021b63
 8021b14:	08021b53 	.word	0x08021b53
 8021b18:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8021b1c:	d121      	bne.n	8021b62 <mg_phy_id_to_str+0xe2>
    case MG_PHY_DP83x:
      switch (id2) {
 8021b1e:	88bb      	ldrh	r3, [r7, #4]
 8021b20:	f24a 2231 	movw	r2, #41521	@ 0xa231
 8021b24:	4293      	cmp	r3, r2
 8021b26:	d00c      	beq.n	8021b42 <mg_phy_id_to_str+0xc2>
 8021b28:	f24a 2231 	movw	r2, #41521	@ 0xa231
 8021b2c:	4293      	cmp	r3, r2
 8021b2e:	dc0e      	bgt.n	8021b4e <mg_phy_id_to_str+0xce>
 8021b30:	f645 42a2 	movw	r2, #23714	@ 0x5ca2
 8021b34:	4293      	cmp	r3, r2
 8021b36:	d006      	beq.n	8021b46 <mg_phy_id_to_str+0xc6>
 8021b38:	f24a 1240 	movw	r2, #41280	@ 0xa140
 8021b3c:	4293      	cmp	r3, r2
 8021b3e:	d004      	beq.n	8021b4a <mg_phy_id_to_str+0xca>
 8021b40:	e005      	b.n	8021b4e <mg_phy_id_to_str+0xce>
        case MG_PHY_DP83867:
          return "DP83867";
 8021b42:	4b0b      	ldr	r3, [pc, #44]	@ (8021b70 <mg_phy_id_to_str+0xf0>)
 8021b44:	e00e      	b.n	8021b64 <mg_phy_id_to_str+0xe4>
        case MG_PHY_DP83848:
          return "DP83848";
 8021b46:	4b0b      	ldr	r3, [pc, #44]	@ (8021b74 <mg_phy_id_to_str+0xf4>)
 8021b48:	e00c      	b.n	8021b64 <mg_phy_id_to_str+0xe4>
        case MG_PHY_DP83825:
          return "DP83825";
 8021b4a:	4b0b      	ldr	r3, [pc, #44]	@ (8021b78 <mg_phy_id_to_str+0xf8>)
 8021b4c:	e00a      	b.n	8021b64 <mg_phy_id_to_str+0xe4>
        default:
          return "DP83x";
 8021b4e:	4b0b      	ldr	r3, [pc, #44]	@ (8021b7c <mg_phy_id_to_str+0xfc>)
 8021b50:	e008      	b.n	8021b64 <mg_phy_id_to_str+0xe4>
      }
    case MG_PHY_KSZ8x:
      return "KSZ8x";
 8021b52:	4b0b      	ldr	r3, [pc, #44]	@ (8021b80 <mg_phy_id_to_str+0x100>)
 8021b54:	e006      	b.n	8021b64 <mg_phy_id_to_str+0xe4>
    case MG_PHY_LAN87x:
      return "LAN87x";
 8021b56:	4b0b      	ldr	r3, [pc, #44]	@ (8021b84 <mg_phy_id_to_str+0x104>)
 8021b58:	e004      	b.n	8021b64 <mg_phy_id_to_str+0xe4>
    case MG_PHY_RTL8201:
      return "RTL8201";
 8021b5a:	4b0b      	ldr	r3, [pc, #44]	@ (8021b88 <mg_phy_id_to_str+0x108>)
 8021b5c:	e002      	b.n	8021b64 <mg_phy_id_to_str+0xe4>
    case MG_PHY_ICS1894x:
      return "ICS1894x";
 8021b5e:	4b0b      	ldr	r3, [pc, #44]	@ (8021b8c <mg_phy_id_to_str+0x10c>)
 8021b60:	e000      	b.n	8021b64 <mg_phy_id_to_str+0xe4>
    default:
      return "unknown";
 8021b62:	4b0b      	ldr	r3, [pc, #44]	@ (8021b90 <mg_phy_id_to_str+0x110>)
  }
  (void) id2;
}
 8021b64:	4618      	mov	r0, r3
 8021b66:	370c      	adds	r7, #12
 8021b68:	46bd      	mov	sp, r7
 8021b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021b6e:	4770      	bx	lr
 8021b70:	08027bd4 	.word	0x08027bd4
 8021b74:	08027bdc 	.word	0x08027bdc
 8021b78:	08027be4 	.word	0x08027be4
 8021b7c:	08027bec 	.word	0x08027bec
 8021b80:	08027bf4 	.word	0x08027bf4
 8021b84:	08027bfc 	.word	0x08027bfc
 8021b88:	08027c04 	.word	0x08027c04
 8021b8c:	08027c0c 	.word	0x08027c0c
 8021b90:	08027c18 	.word	0x08027c18

08021b94 <mg_phy_init>:

void mg_phy_init(struct mg_phy *phy, uint8_t phy_addr, uint8_t config) {
 8021b94:	b5b0      	push	{r4, r5, r7, lr}
 8021b96:	b084      	sub	sp, #16
 8021b98:	af00      	add	r7, sp, #0
 8021b9a:	6078      	str	r0, [r7, #4]
 8021b9c:	460b      	mov	r3, r1
 8021b9e:	70fb      	strb	r3, [r7, #3]
 8021ba0:	4613      	mov	r3, r2
 8021ba2:	70bb      	strb	r3, [r7, #2]
  uint16_t id1, id2;
  phy->write_reg(phy_addr, MG_PHY_REG_BCR, MG_BIT(15));  // Reset PHY
 8021ba4:	687b      	ldr	r3, [r7, #4]
 8021ba6:	685b      	ldr	r3, [r3, #4]
 8021ba8:	78f8      	ldrb	r0, [r7, #3]
 8021baa:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8021bae:	2100      	movs	r1, #0
 8021bb0:	4798      	blx	r3
  while (phy->read_reg(phy_addr, MG_PHY_REG_BCR) & MG_BIT(15)) (void) 0;
 8021bb2:	bf00      	nop
 8021bb4:	687b      	ldr	r3, [r7, #4]
 8021bb6:	681b      	ldr	r3, [r3, #0]
 8021bb8:	78fa      	ldrb	r2, [r7, #3]
 8021bba:	2100      	movs	r1, #0
 8021bbc:	4610      	mov	r0, r2
 8021bbe:	4798      	blx	r3
 8021bc0:	4603      	mov	r3, r0
 8021bc2:	b21b      	sxth	r3, r3
 8021bc4:	2b00      	cmp	r3, #0
 8021bc6:	dbf5      	blt.n	8021bb4 <mg_phy_init+0x20>
  // MG_PHY_REG_BCR[12]: Autonegotiation is default unless hw says otherwise

  id1 = phy->read_reg(phy_addr, MG_PHY_REG_ID1);
 8021bc8:	687b      	ldr	r3, [r7, #4]
 8021bca:	681b      	ldr	r3, [r3, #0]
 8021bcc:	78fa      	ldrb	r2, [r7, #3]
 8021bce:	2102      	movs	r1, #2
 8021bd0:	4610      	mov	r0, r2
 8021bd2:	4798      	blx	r3
 8021bd4:	4603      	mov	r3, r0
 8021bd6:	81fb      	strh	r3, [r7, #14]
  id2 = phy->read_reg(phy_addr, MG_PHY_REG_ID2);
 8021bd8:	687b      	ldr	r3, [r7, #4]
 8021bda:	681b      	ldr	r3, [r3, #0]
 8021bdc:	78fa      	ldrb	r2, [r7, #3]
 8021bde:	2103      	movs	r1, #3
 8021be0:	4610      	mov	r0, r2
 8021be2:	4798      	blx	r3
 8021be4:	4603      	mov	r3, r0
 8021be6:	81bb      	strh	r3, [r7, #12]
  MG_INFO(("PHY ID: %#04x %#04x (%s)", id1, id2, mg_phy_id_to_str(id1, id2)));
 8021be8:	4b42      	ldr	r3, [pc, #264]	@ (8021cf4 <mg_phy_init+0x160>)
 8021bea:	681b      	ldr	r3, [r3, #0]
 8021bec:	2b01      	cmp	r3, #1
 8021bee:	dd14      	ble.n	8021c1a <mg_phy_init+0x86>
 8021bf0:	4b41      	ldr	r3, [pc, #260]	@ (8021cf8 <mg_phy_init+0x164>)
 8021bf2:	f245 72f1 	movw	r2, #22513	@ 0x57f1
 8021bf6:	4941      	ldr	r1, [pc, #260]	@ (8021cfc <mg_phy_init+0x168>)
 8021bf8:	2002      	movs	r0, #2
 8021bfa:	f7eb fad7 	bl	800d1ac <mg_log_prefix>
 8021bfe:	89fc      	ldrh	r4, [r7, #14]
 8021c00:	89bd      	ldrh	r5, [r7, #12]
 8021c02:	89ba      	ldrh	r2, [r7, #12]
 8021c04:	89fb      	ldrh	r3, [r7, #14]
 8021c06:	4611      	mov	r1, r2
 8021c08:	4618      	mov	r0, r3
 8021c0a:	f7ff ff39 	bl	8021a80 <mg_phy_id_to_str>
 8021c0e:	4603      	mov	r3, r0
 8021c10:	462a      	mov	r2, r5
 8021c12:	4621      	mov	r1, r4
 8021c14:	483a      	ldr	r0, [pc, #232]	@ (8021d00 <mg_phy_init+0x16c>)
 8021c16:	f7eb fb19 	bl	800d24c <mg_log>

  if (id1 == MG_PHY_DP83x && id2 == MG_PHY_DP83867) {
 8021c1a:	89fb      	ldrh	r3, [r7, #14]
 8021c1c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8021c20:	d11f      	bne.n	8021c62 <mg_phy_init+0xce>
 8021c22:	89bb      	ldrh	r3, [r7, #12]
 8021c24:	f24a 2231 	movw	r2, #41521	@ 0xa231
 8021c28:	4293      	cmp	r3, r2
 8021c2a:	d11a      	bne.n	8021c62 <mg_phy_init+0xce>
    phy->write_reg(phy_addr, 0x0d, 0x1f);  // write 0x10d to IO_MUX_CFG (0x0170)
 8021c2c:	687b      	ldr	r3, [r7, #4]
 8021c2e:	685b      	ldr	r3, [r3, #4]
 8021c30:	78f8      	ldrb	r0, [r7, #3]
 8021c32:	221f      	movs	r2, #31
 8021c34:	210d      	movs	r1, #13
 8021c36:	4798      	blx	r3
    phy->write_reg(phy_addr, 0x0e, 0x170);
 8021c38:	687b      	ldr	r3, [r7, #4]
 8021c3a:	685b      	ldr	r3, [r3, #4]
 8021c3c:	78f8      	ldrb	r0, [r7, #3]
 8021c3e:	f44f 72b8 	mov.w	r2, #368	@ 0x170
 8021c42:	210e      	movs	r1, #14
 8021c44:	4798      	blx	r3
    phy->write_reg(phy_addr, 0x0d, 0x401f);
 8021c46:	687b      	ldr	r3, [r7, #4]
 8021c48:	685b      	ldr	r3, [r3, #4]
 8021c4a:	78f8      	ldrb	r0, [r7, #3]
 8021c4c:	f244 021f 	movw	r2, #16415	@ 0x401f
 8021c50:	210d      	movs	r1, #13
 8021c52:	4798      	blx	r3
    phy->write_reg(phy_addr, 0x0e, 0x10d);
 8021c54:	687b      	ldr	r3, [r7, #4]
 8021c56:	685b      	ldr	r3, [r3, #4]
 8021c58:	78f8      	ldrb	r0, [r7, #3]
 8021c5a:	f240 120d 	movw	r2, #269	@ 0x10d
 8021c5e:	210e      	movs	r1, #14
 8021c60:	4798      	blx	r3
  }

  if (config & MG_PHY_CLOCKS_MAC) {
 8021c62:	78bb      	ldrb	r3, [r7, #2]
 8021c64:	f003 0302 	and.w	r3, r3, #2
 8021c68:	2b00      	cmp	r3, #0
 8021c6a:	d12e      	bne.n	8021cca <mg_phy_init+0x136>
    // Use PHY crystal oscillator (preserve defaults)
    // nothing to do
  } else {  // MAC clocks PHY, PHY has no xtal
    // Enable 50 MHz external ref clock at XI (preserve defaults)
    if (id1 == MG_PHY_DP83x && id2 != MG_PHY_DP83867 && id2 != MG_PHY_DP83848) {
 8021c6c:	89fb      	ldrh	r3, [r7, #14]
 8021c6e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8021c72:	d110      	bne.n	8021c96 <mg_phy_init+0x102>
 8021c74:	89bb      	ldrh	r3, [r7, #12]
 8021c76:	f24a 2231 	movw	r2, #41521	@ 0xa231
 8021c7a:	4293      	cmp	r3, r2
 8021c7c:	d00b      	beq.n	8021c96 <mg_phy_init+0x102>
 8021c7e:	89bb      	ldrh	r3, [r7, #12]
 8021c80:	f645 42a2 	movw	r2, #23714	@ 0x5ca2
 8021c84:	4293      	cmp	r3, r2
 8021c86:	d006      	beq.n	8021c96 <mg_phy_init+0x102>
      phy->write_reg(phy_addr, MG_PHY_DP83x_REG_RCSR, MG_BIT(7) | MG_BIT(0));
 8021c88:	687b      	ldr	r3, [r7, #4]
 8021c8a:	685b      	ldr	r3, [r3, #4]
 8021c8c:	78f8      	ldrb	r0, [r7, #3]
 8021c8e:	2281      	movs	r2, #129	@ 0x81
 8021c90:	2117      	movs	r1, #23
 8021c92:	4798      	blx	r3
 8021c94:	e019      	b.n	8021cca <mg_phy_init+0x136>
    } else if (id1 == MG_PHY_KSZ8x) {
 8021c96:	89fb      	ldrh	r3, [r7, #14]
 8021c98:	2b22      	cmp	r3, #34	@ 0x22
 8021c9a:	d116      	bne.n	8021cca <mg_phy_init+0x136>
      // Disable isolation (override hw, it doesn't make sense at this point)
      // - #2848, some NXP boards set ISO, even though docs say they don't
      phy->write_reg(phy_addr, MG_PHY_REG_BCR,
 8021c9c:	687b      	ldr	r3, [r7, #4]
 8021c9e:	685c      	ldr	r4, [r3, #4]
                     (uint16_t) (phy->read_reg(phy_addr, MG_PHY_REG_BCR) &
 8021ca0:	687b      	ldr	r3, [r7, #4]
 8021ca2:	681b      	ldr	r3, [r3, #0]
 8021ca4:	78fa      	ldrb	r2, [r7, #3]
 8021ca6:	2100      	movs	r1, #0
 8021ca8:	4610      	mov	r0, r2
 8021caa:	4798      	blx	r3
 8021cac:	4603      	mov	r3, r0
      phy->write_reg(phy_addr, MG_PHY_REG_BCR,
 8021cae:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8021cb2:	b29a      	uxth	r2, r3
 8021cb4:	78fb      	ldrb	r3, [r7, #3]
 8021cb6:	2100      	movs	r1, #0
 8021cb8:	4618      	mov	r0, r3
 8021cba:	47a0      	blx	r4
                                 (uint16_t) ~MG_BIT(10)));
      // now do clock stuff
      phy->write_reg(phy_addr, MG_PHY_KSZ8x_REG_PC2R,
 8021cbc:	687b      	ldr	r3, [r7, #4]
 8021cbe:	685b      	ldr	r3, [r3, #4]
 8021cc0:	78f8      	ldrb	r0, [r7, #3]
 8021cc2:	f248 1280 	movw	r2, #33152	@ 0x8180
 8021cc6:	211f      	movs	r1, #31
 8021cc8:	4798      	blx	r3
      phy->write_reg(phy_addr, MG_PHY_RTL8201_REG_PAGESEL, 0);  // Select page 0
#endif
    }
  }

  if (config & MG_PHY_LEDS_ACTIVE_HIGH && id1 == MG_PHY_DP83x) {
 8021cca:	78bb      	ldrb	r3, [r7, #2]
 8021ccc:	f003 0301 	and.w	r3, r3, #1
 8021cd0:	2b00      	cmp	r3, #0
 8021cd2:	d00a      	beq.n	8021cea <mg_phy_init+0x156>
 8021cd4:	89fb      	ldrh	r3, [r7, #14]
 8021cd6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8021cda:	d106      	bne.n	8021cea <mg_phy_init+0x156>
    phy->write_reg(phy_addr, MG_PHY_DP83x_REG_LEDCR,
 8021cdc:	687b      	ldr	r3, [r7, #4]
 8021cde:	685b      	ldr	r3, [r3, #4]
 8021ce0:	78f8      	ldrb	r0, [r7, #3]
 8021ce2:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8021ce6:	2118      	movs	r1, #24
 8021ce8:	4798      	blx	r3
                   MG_BIT(9) | MG_BIT(7));  // LED status, active high
  }  // Other PHYs do not support this feature
}
 8021cea:	bf00      	nop
 8021cec:	3710      	adds	r7, #16
 8021cee:	46bd      	mov	sp, r7
 8021cf0:	bdb0      	pop	{r4, r5, r7, pc}
 8021cf2:	bf00      	nop
 8021cf4:	20000258 	.word	0x20000258
 8021cf8:	08028b5c 	.word	0x08028b5c
 8021cfc:	08025140 	.word	0x08025140
 8021d00:	08027c20 	.word	0x08027c20

08021d04 <mg_phy_up>:

bool mg_phy_up(struct mg_phy *phy, uint8_t phy_addr, bool *full_duplex,
               uint8_t *speed) {
 8021d04:	b580      	push	{r7, lr}
 8021d06:	b08a      	sub	sp, #40	@ 0x28
 8021d08:	af00      	add	r7, sp, #0
 8021d0a:	60f8      	str	r0, [r7, #12]
 8021d0c:	607a      	str	r2, [r7, #4]
 8021d0e:	603b      	str	r3, [r7, #0]
 8021d10:	460b      	mov	r3, r1
 8021d12:	72fb      	strb	r3, [r7, #11]
  bool up = false;
 8021d14:	2300      	movs	r3, #0
 8021d16:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  uint16_t bsr = phy->read_reg(phy_addr, MG_PHY_REG_BSR);
 8021d1a:	68fb      	ldr	r3, [r7, #12]
 8021d1c:	681b      	ldr	r3, [r3, #0]
 8021d1e:	7afa      	ldrb	r2, [r7, #11]
 8021d20:	2101      	movs	r1, #1
 8021d22:	4610      	mov	r0, r2
 8021d24:	4798      	blx	r3
 8021d26:	4603      	mov	r3, r0
 8021d28:	84fb      	strh	r3, [r7, #38]	@ 0x26
  if ((bsr & MG_BIT(5)) && !(bsr & MG_BIT(2)))  // some PHYs latch down events
 8021d2a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8021d2c:	f003 0320 	and.w	r3, r3, #32
 8021d30:	2b00      	cmp	r3, #0
 8021d32:	d00c      	beq.n	8021d4e <mg_phy_up+0x4a>
 8021d34:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8021d36:	f003 0304 	and.w	r3, r3, #4
 8021d3a:	2b00      	cmp	r3, #0
 8021d3c:	d107      	bne.n	8021d4e <mg_phy_up+0x4a>
    bsr = phy->read_reg(phy_addr, MG_PHY_REG_BSR);  // read again
 8021d3e:	68fb      	ldr	r3, [r7, #12]
 8021d40:	681b      	ldr	r3, [r3, #0]
 8021d42:	7afa      	ldrb	r2, [r7, #11]
 8021d44:	2101      	movs	r1, #1
 8021d46:	4610      	mov	r0, r2
 8021d48:	4798      	blx	r3
 8021d4a:	4603      	mov	r3, r0
 8021d4c:	84fb      	strh	r3, [r7, #38]	@ 0x26
  up = bsr & MG_BIT(2);
 8021d4e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8021d50:	f003 0304 	and.w	r3, r3, #4
 8021d54:	2b00      	cmp	r3, #0
 8021d56:	bf14      	ite	ne
 8021d58:	2301      	movne	r3, #1
 8021d5a:	2300      	moveq	r3, #0
 8021d5c:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  if (up && full_duplex != NULL && speed != NULL) {
 8021d60:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8021d64:	2b00      	cmp	r3, #0
 8021d66:	f000 80dc 	beq.w	8021f22 <mg_phy_up+0x21e>
 8021d6a:	687b      	ldr	r3, [r7, #4]
 8021d6c:	2b00      	cmp	r3, #0
 8021d6e:	f000 80d8 	beq.w	8021f22 <mg_phy_up+0x21e>
 8021d72:	683b      	ldr	r3, [r7, #0]
 8021d74:	2b00      	cmp	r3, #0
 8021d76:	f000 80d4 	beq.w	8021f22 <mg_phy_up+0x21e>
    uint16_t id1 = phy->read_reg(phy_addr, MG_PHY_REG_ID1);
 8021d7a:	68fb      	ldr	r3, [r7, #12]
 8021d7c:	681b      	ldr	r3, [r3, #0]
 8021d7e:	7afa      	ldrb	r2, [r7, #11]
 8021d80:	2102      	movs	r1, #2
 8021d82:	4610      	mov	r0, r2
 8021d84:	4798      	blx	r3
 8021d86:	4603      	mov	r3, r0
 8021d88:	847b      	strh	r3, [r7, #34]	@ 0x22
    if (id1 == MG_PHY_DP83x) {
 8021d8a:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8021d8c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8021d90:	d14b      	bne.n	8021e2a <mg_phy_up+0x126>
      uint16_t id2 = phy->read_reg(phy_addr, MG_PHY_REG_ID2);
 8021d92:	68fb      	ldr	r3, [r7, #12]
 8021d94:	681b      	ldr	r3, [r3, #0]
 8021d96:	7afa      	ldrb	r2, [r7, #11]
 8021d98:	2103      	movs	r1, #3
 8021d9a:	4610      	mov	r0, r2
 8021d9c:	4798      	blx	r3
 8021d9e:	4603      	mov	r3, r0
 8021da0:	833b      	strh	r3, [r7, #24]
      if (id2 == MG_PHY_DP83867) {
 8021da2:	8b3b      	ldrh	r3, [r7, #24]
 8021da4:	f24a 2231 	movw	r2, #41521	@ 0xa231
 8021da8:	4293      	cmp	r3, r2
 8021daa:	d120      	bne.n	8021dee <mg_phy_up+0xea>
        uint16_t physts = phy->read_reg(phy_addr, MG_PHY_DP83867_REG_PHYSTS);
 8021dac:	68fb      	ldr	r3, [r7, #12]
 8021dae:	681b      	ldr	r3, [r3, #0]
 8021db0:	7afa      	ldrb	r2, [r7, #11]
 8021db2:	2111      	movs	r1, #17
 8021db4:	4610      	mov	r0, r2
 8021db6:	4798      	blx	r3
 8021db8:	4603      	mov	r3, r0
 8021dba:	82bb      	strh	r3, [r7, #20]
        *full_duplex = physts & MG_BIT(13);
 8021dbc:	8abb      	ldrh	r3, [r7, #20]
 8021dbe:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8021dc2:	2b00      	cmp	r3, #0
 8021dc4:	bf14      	ite	ne
 8021dc6:	2301      	movne	r3, #1
 8021dc8:	2300      	moveq	r3, #0
 8021dca:	b2da      	uxtb	r2, r3
 8021dcc:	687b      	ldr	r3, [r7, #4]
 8021dce:	701a      	strb	r2, [r3, #0]
        *speed = (physts & MG_BIT(15))   ? MG_PHY_SPEED_1000M
 8021dd0:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8021dd4:	2b00      	cmp	r3, #0
 8021dd6:	db06      	blt.n	8021de6 <mg_phy_up+0xe2>
                 : (physts & MG_BIT(14)) ? MG_PHY_SPEED_100M
                                         : MG_PHY_SPEED_10M;
 8021dd8:	8abb      	ldrh	r3, [r7, #20]
 8021dda:	0b9b      	lsrs	r3, r3, #14
 8021ddc:	b2db      	uxtb	r3, r3
        *speed = (physts & MG_BIT(15))   ? MG_PHY_SPEED_1000M
 8021dde:	f003 0301 	and.w	r3, r3, #1
 8021de2:	b2da      	uxtb	r2, r3
 8021de4:	e000      	b.n	8021de8 <mg_phy_up+0xe4>
 8021de6:	2202      	movs	r2, #2
 8021de8:	683b      	ldr	r3, [r7, #0]
 8021dea:	701a      	strb	r2, [r3, #0]
 8021dec:	e099      	b.n	8021f22 <mg_phy_up+0x21e>
      } else {
        uint16_t physts = phy->read_reg(phy_addr, MG_PHY_DP83x_REG_PHYSTS);
 8021dee:	68fb      	ldr	r3, [r7, #12]
 8021df0:	681b      	ldr	r3, [r3, #0]
 8021df2:	7afa      	ldrb	r2, [r7, #11]
 8021df4:	2110      	movs	r1, #16
 8021df6:	4610      	mov	r0, r2
 8021df8:	4798      	blx	r3
 8021dfa:	4603      	mov	r3, r0
 8021dfc:	82fb      	strh	r3, [r7, #22]
        *full_duplex = physts & MG_BIT(2);
 8021dfe:	8afb      	ldrh	r3, [r7, #22]
 8021e00:	f003 0304 	and.w	r3, r3, #4
 8021e04:	2b00      	cmp	r3, #0
 8021e06:	bf14      	ite	ne
 8021e08:	2301      	movne	r3, #1
 8021e0a:	2300      	moveq	r3, #0
 8021e0c:	b2da      	uxtb	r2, r3
 8021e0e:	687b      	ldr	r3, [r7, #4]
 8021e10:	701a      	strb	r2, [r3, #0]
        *speed = (physts & MG_BIT(1)) ? MG_PHY_SPEED_10M : MG_PHY_SPEED_100M;
 8021e12:	8afb      	ldrh	r3, [r7, #22]
 8021e14:	f003 0302 	and.w	r3, r3, #2
 8021e18:	2b00      	cmp	r3, #0
 8021e1a:	bf0c      	ite	eq
 8021e1c:	2301      	moveq	r3, #1
 8021e1e:	2300      	movne	r3, #0
 8021e20:	b2db      	uxtb	r3, r3
 8021e22:	461a      	mov	r2, r3
 8021e24:	683b      	ldr	r3, [r7, #0]
 8021e26:	701a      	strb	r2, [r3, #0]
 8021e28:	e07b      	b.n	8021f22 <mg_phy_up+0x21e>
      }
    } else if (id1 == MG_PHY_KSZ8x) {
 8021e2a:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8021e2c:	2b22      	cmp	r3, #34	@ 0x22
 8021e2e:	d11d      	bne.n	8021e6c <mg_phy_up+0x168>
      uint16_t pc1r = phy->read_reg(phy_addr, MG_PHY_KSZ8x_REG_PC1R);
 8021e30:	68fb      	ldr	r3, [r7, #12]
 8021e32:	681b      	ldr	r3, [r3, #0]
 8021e34:	7afa      	ldrb	r2, [r7, #11]
 8021e36:	211e      	movs	r1, #30
 8021e38:	4610      	mov	r0, r2
 8021e3a:	4798      	blx	r3
 8021e3c:	4603      	mov	r3, r0
 8021e3e:	837b      	strh	r3, [r7, #26]
      *full_duplex = pc1r & MG_BIT(2);
 8021e40:	8b7b      	ldrh	r3, [r7, #26]
 8021e42:	f003 0304 	and.w	r3, r3, #4
 8021e46:	2b00      	cmp	r3, #0
 8021e48:	bf14      	ite	ne
 8021e4a:	2301      	movne	r3, #1
 8021e4c:	2300      	moveq	r3, #0
 8021e4e:	b2da      	uxtb	r2, r3
 8021e50:	687b      	ldr	r3, [r7, #4]
 8021e52:	701a      	strb	r2, [r3, #0]
      *speed = (pc1r & 3) == 1 ? MG_PHY_SPEED_10M : MG_PHY_SPEED_100M;
 8021e54:	8b7b      	ldrh	r3, [r7, #26]
 8021e56:	f003 0303 	and.w	r3, r3, #3
 8021e5a:	2b01      	cmp	r3, #1
 8021e5c:	bf14      	ite	ne
 8021e5e:	2301      	movne	r3, #1
 8021e60:	2300      	moveq	r3, #0
 8021e62:	b2db      	uxtb	r3, r3
 8021e64:	461a      	mov	r2, r3
 8021e66:	683b      	ldr	r3, [r7, #0]
 8021e68:	701a      	strb	r2, [r3, #0]
 8021e6a:	e05a      	b.n	8021f22 <mg_phy_up+0x21e>
    } else if (id1 == MG_PHY_LAN87x) {
 8021e6c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8021e6e:	2b07      	cmp	r3, #7
 8021e70:	d11a      	bne.n	8021ea8 <mg_phy_up+0x1a4>
      uint16_t scsr = phy->read_reg(phy_addr, MG_PHY_LAN87x_REG_SCSR);
 8021e72:	68fb      	ldr	r3, [r7, #12]
 8021e74:	681b      	ldr	r3, [r3, #0]
 8021e76:	7afa      	ldrb	r2, [r7, #11]
 8021e78:	211f      	movs	r1, #31
 8021e7a:	4610      	mov	r0, r2
 8021e7c:	4798      	blx	r3
 8021e7e:	4603      	mov	r3, r0
 8021e80:	83bb      	strh	r3, [r7, #28]
      *full_duplex = scsr & MG_BIT(4);
 8021e82:	8bbb      	ldrh	r3, [r7, #28]
 8021e84:	f003 0310 	and.w	r3, r3, #16
 8021e88:	2b00      	cmp	r3, #0
 8021e8a:	bf14      	ite	ne
 8021e8c:	2301      	movne	r3, #1
 8021e8e:	2300      	moveq	r3, #0
 8021e90:	b2da      	uxtb	r2, r3
 8021e92:	687b      	ldr	r3, [r7, #4]
 8021e94:	701a      	strb	r2, [r3, #0]
      *speed = (scsr & MG_BIT(3)) ? MG_PHY_SPEED_100M : MG_PHY_SPEED_10M;
 8021e96:	8bbb      	ldrh	r3, [r7, #28]
 8021e98:	08db      	lsrs	r3, r3, #3
 8021e9a:	b2db      	uxtb	r3, r3
 8021e9c:	f003 0301 	and.w	r3, r3, #1
 8021ea0:	b2da      	uxtb	r2, r3
 8021ea2:	683b      	ldr	r3, [r7, #0]
 8021ea4:	701a      	strb	r2, [r3, #0]
 8021ea6:	e03c      	b.n	8021f22 <mg_phy_up+0x21e>
    } else if (id1 == MG_PHY_RTL8201) {
 8021ea8:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8021eaa:	2b1c      	cmp	r3, #28
 8021eac:	d11a      	bne.n	8021ee4 <mg_phy_up+0x1e0>
      uint16_t bcr = phy->read_reg(phy_addr, MG_PHY_REG_BCR);
 8021eae:	68fb      	ldr	r3, [r7, #12]
 8021eb0:	681b      	ldr	r3, [r3, #0]
 8021eb2:	7afa      	ldrb	r2, [r7, #11]
 8021eb4:	2100      	movs	r1, #0
 8021eb6:	4610      	mov	r0, r2
 8021eb8:	4798      	blx	r3
 8021eba:	4603      	mov	r3, r0
 8021ebc:	83fb      	strh	r3, [r7, #30]
      *full_duplex = bcr & MG_BIT(8);
 8021ebe:	8bfb      	ldrh	r3, [r7, #30]
 8021ec0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8021ec4:	2b00      	cmp	r3, #0
 8021ec6:	bf14      	ite	ne
 8021ec8:	2301      	movne	r3, #1
 8021eca:	2300      	moveq	r3, #0
 8021ecc:	b2da      	uxtb	r2, r3
 8021ece:	687b      	ldr	r3, [r7, #4]
 8021ed0:	701a      	strb	r2, [r3, #0]
      *speed = (bcr & MG_BIT(13)) ? MG_PHY_SPEED_100M : MG_PHY_SPEED_10M;
 8021ed2:	8bfb      	ldrh	r3, [r7, #30]
 8021ed4:	0b5b      	lsrs	r3, r3, #13
 8021ed6:	b2db      	uxtb	r3, r3
 8021ed8:	f003 0301 	and.w	r3, r3, #1
 8021edc:	b2da      	uxtb	r2, r3
 8021ede:	683b      	ldr	r3, [r7, #0]
 8021ee0:	701a      	strb	r2, [r3, #0]
 8021ee2:	e01e      	b.n	8021f22 <mg_phy_up+0x21e>
    } else if (id1 == MG_PHY_ICS1894x) {
 8021ee4:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8021ee6:	2b15      	cmp	r3, #21
 8021ee8:	d11b      	bne.n	8021f22 <mg_phy_up+0x21e>
      uint16_t poll_reg = phy->read_reg(phy_addr, MG_PHY_ICS189432_REG_POLL);
 8021eea:	68fb      	ldr	r3, [r7, #12]
 8021eec:	681b      	ldr	r3, [r3, #0]
 8021eee:	7afa      	ldrb	r2, [r7, #11]
 8021ef0:	2111      	movs	r1, #17
 8021ef2:	4610      	mov	r0, r2
 8021ef4:	4798      	blx	r3
 8021ef6:	4603      	mov	r3, r0
 8021ef8:	843b      	strh	r3, [r7, #32]
      *full_duplex = poll_reg & MG_BIT(14);
 8021efa:	8c3b      	ldrh	r3, [r7, #32]
 8021efc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8021f00:	2b00      	cmp	r3, #0
 8021f02:	bf14      	ite	ne
 8021f04:	2301      	movne	r3, #1
 8021f06:	2300      	moveq	r3, #0
 8021f08:	b2da      	uxtb	r2, r3
 8021f0a:	687b      	ldr	r3, [r7, #4]
 8021f0c:	701a      	strb	r2, [r3, #0]
      *speed = (poll_reg & MG_BIT(15)) ? MG_PHY_SPEED_100M : MG_PHY_SPEED_10M;
 8021f0e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8021f12:	13db      	asrs	r3, r3, #15
 8021f14:	b21b      	sxth	r3, r3
 8021f16:	b2db      	uxtb	r3, r3
 8021f18:	f003 0301 	and.w	r3, r3, #1
 8021f1c:	b2da      	uxtb	r2, r3
 8021f1e:	683b      	ldr	r3, [r7, #0]
 8021f20:	701a      	strb	r2, [r3, #0]
    }
  }
  return up;
 8021f22:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
}
 8021f26:	4618      	mov	r0, r3
 8021f28:	3728      	adds	r7, #40	@ 0x28
 8021f2a:	46bd      	mov	sp, r7
 8021f2c:	bd80      	pop	{r7, pc}
	...

08021f30 <eth_read_phy>:
static uint8_t s_txno;                               // Current TX descriptor
static uint8_t s_rxno;                               // Current RX descriptor

static struct mg_tcpip_if *s_ifp;  // MIP interface

static uint16_t eth_read_phy(uint8_t addr, uint8_t reg) {
 8021f30:	b480      	push	{r7}
 8021f32:	b083      	sub	sp, #12
 8021f34:	af00      	add	r7, sp, #0
 8021f36:	4603      	mov	r3, r0
 8021f38:	460a      	mov	r2, r1
 8021f3a:	71fb      	strb	r3, [r7, #7]
 8021f3c:	4613      	mov	r3, r2
 8021f3e:	71bb      	strb	r3, [r7, #6]
  ETH->MACMIIAR &= (7 << 2);
 8021f40:	4b12      	ldr	r3, [pc, #72]	@ (8021f8c <eth_read_phy+0x5c>)
 8021f42:	691b      	ldr	r3, [r3, #16]
 8021f44:	4a11      	ldr	r2, [pc, #68]	@ (8021f8c <eth_read_phy+0x5c>)
 8021f46:	f003 031c 	and.w	r3, r3, #28
 8021f4a:	6113      	str	r3, [r2, #16]
  ETH->MACMIIAR |= ((uint32_t) addr << 11) | ((uint32_t) reg << 6);
 8021f4c:	4b0f      	ldr	r3, [pc, #60]	@ (8021f8c <eth_read_phy+0x5c>)
 8021f4e:	691a      	ldr	r2, [r3, #16]
 8021f50:	79fb      	ldrb	r3, [r7, #7]
 8021f52:	02d9      	lsls	r1, r3, #11
 8021f54:	79bb      	ldrb	r3, [r7, #6]
 8021f56:	019b      	lsls	r3, r3, #6
 8021f58:	430b      	orrs	r3, r1
 8021f5a:	490c      	ldr	r1, [pc, #48]	@ (8021f8c <eth_read_phy+0x5c>)
 8021f5c:	4313      	orrs	r3, r2
 8021f5e:	610b      	str	r3, [r1, #16]
  ETH->MACMIIAR |= MG_BIT(0);
 8021f60:	4b0a      	ldr	r3, [pc, #40]	@ (8021f8c <eth_read_phy+0x5c>)
 8021f62:	691b      	ldr	r3, [r3, #16]
 8021f64:	4a09      	ldr	r2, [pc, #36]	@ (8021f8c <eth_read_phy+0x5c>)
 8021f66:	f043 0301 	orr.w	r3, r3, #1
 8021f6a:	6113      	str	r3, [r2, #16]
  while (ETH->MACMIIAR & MG_BIT(0)) (void) 0;
 8021f6c:	bf00      	nop
 8021f6e:	4b07      	ldr	r3, [pc, #28]	@ (8021f8c <eth_read_phy+0x5c>)
 8021f70:	691b      	ldr	r3, [r3, #16]
 8021f72:	f003 0301 	and.w	r3, r3, #1
 8021f76:	2b00      	cmp	r3, #0
 8021f78:	d1f9      	bne.n	8021f6e <eth_read_phy+0x3e>
  return ETH->MACMIIDR & 0xffff;
 8021f7a:	4b04      	ldr	r3, [pc, #16]	@ (8021f8c <eth_read_phy+0x5c>)
 8021f7c:	695b      	ldr	r3, [r3, #20]
 8021f7e:	b29b      	uxth	r3, r3
}
 8021f80:	4618      	mov	r0, r3
 8021f82:	370c      	adds	r7, #12
 8021f84:	46bd      	mov	sp, r7
 8021f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021f8a:	4770      	bx	lr
 8021f8c:	40028000 	.word	0x40028000

08021f90 <eth_write_phy>:

static void eth_write_phy(uint8_t addr, uint8_t reg, uint16_t val) {
 8021f90:	b480      	push	{r7}
 8021f92:	b083      	sub	sp, #12
 8021f94:	af00      	add	r7, sp, #0
 8021f96:	4603      	mov	r3, r0
 8021f98:	71fb      	strb	r3, [r7, #7]
 8021f9a:	460b      	mov	r3, r1
 8021f9c:	71bb      	strb	r3, [r7, #6]
 8021f9e:	4613      	mov	r3, r2
 8021fa0:	80bb      	strh	r3, [r7, #4]
  ETH->MACMIIDR = val;
 8021fa2:	4a14      	ldr	r2, [pc, #80]	@ (8021ff4 <eth_write_phy+0x64>)
 8021fa4:	88bb      	ldrh	r3, [r7, #4]
 8021fa6:	6153      	str	r3, [r2, #20]
  ETH->MACMIIAR &= (7 << 2);
 8021fa8:	4b12      	ldr	r3, [pc, #72]	@ (8021ff4 <eth_write_phy+0x64>)
 8021faa:	691b      	ldr	r3, [r3, #16]
 8021fac:	4a11      	ldr	r2, [pc, #68]	@ (8021ff4 <eth_write_phy+0x64>)
 8021fae:	f003 031c 	and.w	r3, r3, #28
 8021fb2:	6113      	str	r3, [r2, #16]
  ETH->MACMIIAR |= ((uint32_t) addr << 11) | ((uint32_t) reg << 6) | MG_BIT(1);
 8021fb4:	4b0f      	ldr	r3, [pc, #60]	@ (8021ff4 <eth_write_phy+0x64>)
 8021fb6:	691a      	ldr	r2, [r3, #16]
 8021fb8:	79fb      	ldrb	r3, [r7, #7]
 8021fba:	02d9      	lsls	r1, r3, #11
 8021fbc:	79bb      	ldrb	r3, [r7, #6]
 8021fbe:	019b      	lsls	r3, r3, #6
 8021fc0:	430b      	orrs	r3, r1
 8021fc2:	4313      	orrs	r3, r2
 8021fc4:	4a0b      	ldr	r2, [pc, #44]	@ (8021ff4 <eth_write_phy+0x64>)
 8021fc6:	f043 0302 	orr.w	r3, r3, #2
 8021fca:	6113      	str	r3, [r2, #16]
  ETH->MACMIIAR |= MG_BIT(0);
 8021fcc:	4b09      	ldr	r3, [pc, #36]	@ (8021ff4 <eth_write_phy+0x64>)
 8021fce:	691b      	ldr	r3, [r3, #16]
 8021fd0:	4a08      	ldr	r2, [pc, #32]	@ (8021ff4 <eth_write_phy+0x64>)
 8021fd2:	f043 0301 	orr.w	r3, r3, #1
 8021fd6:	6113      	str	r3, [r2, #16]
  while (ETH->MACMIIAR & MG_BIT(0)) (void) 0;
 8021fd8:	bf00      	nop
 8021fda:	4b06      	ldr	r3, [pc, #24]	@ (8021ff4 <eth_write_phy+0x64>)
 8021fdc:	691b      	ldr	r3, [r3, #16]
 8021fde:	f003 0301 	and.w	r3, r3, #1
 8021fe2:	2b00      	cmp	r3, #0
 8021fe4:	d1f9      	bne.n	8021fda <eth_write_phy+0x4a>
}
 8021fe6:	bf00      	nop
 8021fe8:	bf00      	nop
 8021fea:	370c      	adds	r7, #12
 8021fec:	46bd      	mov	sp, r7
 8021fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021ff2:	4770      	bx	lr
 8021ff4:	40028000 	.word	0x40028000

08021ff8 <get_hclk>:

static uint32_t get_hclk(void) {
 8021ff8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8021ffc:	b08d      	sub	sp, #52	@ 0x34
 8021ffe:	af00      	add	r7, sp, #0
  struct rcc {
    volatile uint32_t CR, PLLCFGR, CFGR;
  } *rcc = (struct rcc *) 0x40023800;
 8022000:	4e3c      	ldr	r6, [pc, #240]	@ (80220f4 <get_hclk+0xfc>)
 8022002:	62be      	str	r6, [r7, #40]	@ 0x28
  uint32_t clk = 0, hsi = 16000000 /* 16 MHz */, hse = 8000000 /* 8MHz */;
 8022004:	2600      	movs	r6, #0
 8022006:	62fe      	str	r6, [r7, #44]	@ 0x2c
 8022008:	4e3b      	ldr	r6, [pc, #236]	@ (80220f8 <get_hclk+0x100>)
 802200a:	627e      	str	r6, [r7, #36]	@ 0x24
 802200c:	4e3b      	ldr	r6, [pc, #236]	@ (80220fc <get_hclk+0x104>)
 802200e:	623e      	str	r6, [r7, #32]

  if (rcc->CFGR & (1 << 2)) {
 8022010:	6abe      	ldr	r6, [r7, #40]	@ 0x28
 8022012:	68b6      	ldr	r6, [r6, #8]
 8022014:	f006 0604 	and.w	r6, r6, #4
 8022018:	2e00      	cmp	r6, #0
 802201a:	d002      	beq.n	8022022 <get_hclk+0x2a>
    clk = hse;
 802201c:	6a3b      	ldr	r3, [r7, #32]
 802201e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8022020:	e049      	b.n	80220b6 <get_hclk+0xbe>
  } else if (rcc->CFGR & (1 << 3)) {
 8022022:	6abe      	ldr	r6, [r7, #40]	@ 0x28
 8022024:	68b6      	ldr	r6, [r6, #8]
 8022026:	f006 0608 	and.w	r6, r6, #8
 802202a:	2e00      	cmp	r6, #0
 802202c:	d041      	beq.n	80220b2 <get_hclk+0xba>
    uint32_t vco, m, n, p;
    m = (rcc->PLLCFGR & (0x3f << 0)) >> 0;
 802202e:	6abe      	ldr	r6, [r7, #40]	@ 0x28
 8022030:	6876      	ldr	r6, [r6, #4]
 8022032:	f006 063f 	and.w	r6, r6, #63	@ 0x3f
 8022036:	61fe      	str	r6, [r7, #28]
    n = (rcc->PLLCFGR & (0x1ff << 6)) >> 6;
 8022038:	6abe      	ldr	r6, [r7, #40]	@ 0x28
 802203a:	6876      	ldr	r6, [r6, #4]
 802203c:	09b6      	lsrs	r6, r6, #6
 802203e:	f3c6 0608 	ubfx	r6, r6, #0, #9
 8022042:	61be      	str	r6, [r7, #24]
    p = (((rcc->PLLCFGR & (3 << 16)) >> 16) + 1) * 2;
 8022044:	6abe      	ldr	r6, [r7, #40]	@ 0x28
 8022046:	6876      	ldr	r6, [r6, #4]
 8022048:	0c36      	lsrs	r6, r6, #16
 802204a:	f006 0603 	and.w	r6, r6, #3
 802204e:	3601      	adds	r6, #1
 8022050:	0076      	lsls	r6, r6, #1
 8022052:	617e      	str	r6, [r7, #20]
    clk = (rcc->PLLCFGR & (1 << 22)) ? hse : hsi;
 8022054:	6abe      	ldr	r6, [r7, #40]	@ 0x28
 8022056:	6876      	ldr	r6, [r6, #4]
 8022058:	f406 0680 	and.w	r6, r6, #4194304	@ 0x400000
 802205c:	2e00      	cmp	r6, #0
 802205e:	d001      	beq.n	8022064 <get_hclk+0x6c>
 8022060:	6a3e      	ldr	r6, [r7, #32]
 8022062:	e000      	b.n	8022066 <get_hclk+0x6e>
 8022064:	6a7e      	ldr	r6, [r7, #36]	@ 0x24
 8022066:	62fe      	str	r6, [r7, #44]	@ 0x2c
    vco = (uint32_t) ((uint64_t) clk * n / m);
 8022068:	6afe      	ldr	r6, [r7, #44]	@ 0x2c
 802206a:	f04f 0c00 	mov.w	ip, #0
 802206e:	4634      	mov	r4, r6
 8022070:	4665      	mov	r5, ip
 8022072:	69be      	ldr	r6, [r7, #24]
 8022074:	f04f 0c00 	mov.w	ip, #0
 8022078:	4632      	mov	r2, r6
 802207a:	4663      	mov	r3, ip
 802207c:	fb02 fc05 	mul.w	ip, r2, r5
 8022080:	fb04 f603 	mul.w	r6, r4, r3
 8022084:	4466      	add	r6, ip
 8022086:	fba4 0102 	umull	r0, r1, r4, r2
 802208a:	1873      	adds	r3, r6, r1
 802208c:	4619      	mov	r1, r3
 802208e:	69fb      	ldr	r3, [r7, #28]
 8022090:	2200      	movs	r2, #0
 8022092:	4698      	mov	r8, r3
 8022094:	4691      	mov	r9, r2
 8022096:	4642      	mov	r2, r8
 8022098:	464b      	mov	r3, r9
 802209a:	f7de f939 	bl	8000310 <__aeabi_uldivmod>
 802209e:	4602      	mov	r2, r0
 80220a0:	460b      	mov	r3, r1
 80220a2:	4613      	mov	r3, r2
 80220a4:	613b      	str	r3, [r7, #16]
    clk = vco / p;
 80220a6:	693a      	ldr	r2, [r7, #16]
 80220a8:	697b      	ldr	r3, [r7, #20]
 80220aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80220ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80220b0:	e001      	b.n	80220b6 <get_hclk+0xbe>
  } else {
    clk = hsi;
 80220b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80220b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  uint32_t hpre = (rcc->CFGR & (15 << 4)) >> 4;
 80220b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80220b8:	689b      	ldr	r3, [r3, #8]
 80220ba:	091b      	lsrs	r3, r3, #4
 80220bc:	f003 030f 	and.w	r3, r3, #15
 80220c0:	60fb      	str	r3, [r7, #12]
  if (hpre < 8) return clk;
 80220c2:	68fb      	ldr	r3, [r7, #12]
 80220c4:	2b07      	cmp	r3, #7
 80220c6:	d801      	bhi.n	80220cc <get_hclk+0xd4>
 80220c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80220ca:	e00e      	b.n	80220ea <get_hclk+0xf2>

  uint8_t ahbptab[8] = {1, 2, 3, 4, 6, 7, 8, 9};  // log2(div)
 80220cc:	4a0c      	ldr	r2, [pc, #48]	@ (8022100 <get_hclk+0x108>)
 80220ce:	1d3b      	adds	r3, r7, #4
 80220d0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80220d4:	e883 0003 	stmia.w	r3, {r0, r1}
  return ((uint32_t) clk) >> ahbptab[hpre - 8];
 80220d8:	68fb      	ldr	r3, [r7, #12]
 80220da:	3b08      	subs	r3, #8
 80220dc:	3330      	adds	r3, #48	@ 0x30
 80220de:	443b      	add	r3, r7
 80220e0:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 80220e4:	461a      	mov	r2, r3
 80220e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80220e8:	40d3      	lsrs	r3, r2
}
 80220ea:	4618      	mov	r0, r3
 80220ec:	3734      	adds	r7, #52	@ 0x34
 80220ee:	46bd      	mov	sp, r7
 80220f0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80220f4:	40023800 	.word	0x40023800
 80220f8:	00f42400 	.word	0x00f42400
 80220fc:	007a1200 	.word	0x007a1200
 8022100:	08027c3c 	.word	0x08027c3c

08022104 <guess_mdc_cr>:
//  specify a range of frequencies and activate one of a series of dividers to
//  keep the MDC clock safely below 2.5MHz. We guess a divider setting based on
//  HCLK with a +5% drift. If the user uses a different clock from our
//  defaults, needs to set the macros on top Valid for STM32F74xxx/75xxx
//  (38.8.1) and STM32F42xxx/43xxx (33.8.1) (both 4.5% worst case drift)
static int guess_mdc_cr(void) {
 8022104:	b580      	push	{r7, lr}
 8022106:	b088      	sub	sp, #32
 8022108:	af00      	add	r7, sp, #0
  uint8_t crs[] = {2, 3, 0, 1, 4, 5};          // ETH->MACMIIAR::CR values
 802210a:	4a34      	ldr	r2, [pc, #208]	@ (80221dc <guess_mdc_cr+0xd8>)
 802210c:	f107 030c 	add.w	r3, r7, #12
 8022110:	e892 0003 	ldmia.w	r2, {r0, r1}
 8022114:	6018      	str	r0, [r3, #0]
 8022116:	3304      	adds	r3, #4
 8022118:	8019      	strh	r1, [r3, #0]
  uint8_t div[] = {16, 26, 42, 62, 102, 124};  // Respective HCLK dividers
 802211a:	4a31      	ldr	r2, [pc, #196]	@ (80221e0 <guess_mdc_cr+0xdc>)
 802211c:	1d3b      	adds	r3, r7, #4
 802211e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8022122:	6018      	str	r0, [r3, #0]
 8022124:	3304      	adds	r3, #4
 8022126:	8019      	strh	r1, [r3, #0]
  uint32_t hclk = get_hclk();                  // Guess system HCLK
 8022128:	f7ff ff66 	bl	8021ff8 <get_hclk>
 802212c:	6178      	str	r0, [r7, #20]
  int result = -1;                             // Invalid CR value
 802212e:	f04f 33ff 	mov.w	r3, #4294967295
 8022132:	61fb      	str	r3, [r7, #28]
  if (hclk < 25000000) {
 8022134:	697b      	ldr	r3, [r7, #20]
 8022136:	4a2b      	ldr	r2, [pc, #172]	@ (80221e4 <guess_mdc_cr+0xe0>)
 8022138:	4293      	cmp	r3, r2
 802213a:	d80e      	bhi.n	802215a <guess_mdc_cr+0x56>
    MG_ERROR(("HCLK too low"));
 802213c:	4b2a      	ldr	r3, [pc, #168]	@ (80221e8 <guess_mdc_cr+0xe4>)
 802213e:	681b      	ldr	r3, [r3, #0]
 8022140:	2b00      	cmp	r3, #0
 8022142:	dd36      	ble.n	80221b2 <guess_mdc_cr+0xae>
 8022144:	4b29      	ldr	r3, [pc, #164]	@ (80221ec <guess_mdc_cr+0xe8>)
 8022146:	f645 6230 	movw	r2, #24112	@ 0x5e30
 802214a:	4929      	ldr	r1, [pc, #164]	@ (80221f0 <guess_mdc_cr+0xec>)
 802214c:	2001      	movs	r0, #1
 802214e:	f7eb f82d 	bl	800d1ac <mg_log_prefix>
 8022152:	4828      	ldr	r0, [pc, #160]	@ (80221f4 <guess_mdc_cr+0xf0>)
 8022154:	f7eb f87a 	bl	800d24c <mg_log>
 8022158:	e02b      	b.n	80221b2 <guess_mdc_cr+0xae>
  } else {
    for (int i = 0; i < 6; i++) {
 802215a:	2300      	movs	r3, #0
 802215c:	61bb      	str	r3, [r7, #24]
 802215e:	e014      	b.n	802218a <guess_mdc_cr+0x86>
      if (hclk / div[i] <= 2375000UL /* 2.5MHz - 5% */) {
 8022160:	1d3a      	adds	r2, r7, #4
 8022162:	69bb      	ldr	r3, [r7, #24]
 8022164:	4413      	add	r3, r2
 8022166:	781b      	ldrb	r3, [r3, #0]
 8022168:	461a      	mov	r2, r3
 802216a:	697b      	ldr	r3, [r7, #20]
 802216c:	fbb3 f3f2 	udiv	r3, r3, r2
 8022170:	4a21      	ldr	r2, [pc, #132]	@ (80221f8 <guess_mdc_cr+0xf4>)
 8022172:	4293      	cmp	r3, r2
 8022174:	d806      	bhi.n	8022184 <guess_mdc_cr+0x80>
        result = crs[i];
 8022176:	f107 020c 	add.w	r2, r7, #12
 802217a:	69bb      	ldr	r3, [r7, #24]
 802217c:	4413      	add	r3, r2
 802217e:	781b      	ldrb	r3, [r3, #0]
 8022180:	61fb      	str	r3, [r7, #28]
        break;
 8022182:	e005      	b.n	8022190 <guess_mdc_cr+0x8c>
    for (int i = 0; i < 6; i++) {
 8022184:	69bb      	ldr	r3, [r7, #24]
 8022186:	3301      	adds	r3, #1
 8022188:	61bb      	str	r3, [r7, #24]
 802218a:	69bb      	ldr	r3, [r7, #24]
 802218c:	2b05      	cmp	r3, #5
 802218e:	dde7      	ble.n	8022160 <guess_mdc_cr+0x5c>
      }
    }
    if (result < 0) MG_ERROR(("HCLK too high"));
 8022190:	69fb      	ldr	r3, [r7, #28]
 8022192:	2b00      	cmp	r3, #0
 8022194:	da0d      	bge.n	80221b2 <guess_mdc_cr+0xae>
 8022196:	4b14      	ldr	r3, [pc, #80]	@ (80221e8 <guess_mdc_cr+0xe4>)
 8022198:	681b      	ldr	r3, [r3, #0]
 802219a:	2b00      	cmp	r3, #0
 802219c:	dd09      	ble.n	80221b2 <guess_mdc_cr+0xae>
 802219e:	4b13      	ldr	r3, [pc, #76]	@ (80221ec <guess_mdc_cr+0xe8>)
 80221a0:	f645 6238 	movw	r2, #24120	@ 0x5e38
 80221a4:	4912      	ldr	r1, [pc, #72]	@ (80221f0 <guess_mdc_cr+0xec>)
 80221a6:	2001      	movs	r0, #1
 80221a8:	f7eb f800 	bl	800d1ac <mg_log_prefix>
 80221ac:	4813      	ldr	r0, [pc, #76]	@ (80221fc <guess_mdc_cr+0xf8>)
 80221ae:	f7eb f84d 	bl	800d24c <mg_log>
  }
  MG_DEBUG(("HCLK: %u, CR: %d", hclk, result));
 80221b2:	4b0d      	ldr	r3, [pc, #52]	@ (80221e8 <guess_mdc_cr+0xe4>)
 80221b4:	681b      	ldr	r3, [r3, #0]
 80221b6:	2b02      	cmp	r3, #2
 80221b8:	dd0b      	ble.n	80221d2 <guess_mdc_cr+0xce>
 80221ba:	4b0c      	ldr	r3, [pc, #48]	@ (80221ec <guess_mdc_cr+0xe8>)
 80221bc:	f645 623a 	movw	r2, #24122	@ 0x5e3a
 80221c0:	490b      	ldr	r1, [pc, #44]	@ (80221f0 <guess_mdc_cr+0xec>)
 80221c2:	2003      	movs	r0, #3
 80221c4:	f7ea fff2 	bl	800d1ac <mg_log_prefix>
 80221c8:	69fa      	ldr	r2, [r7, #28]
 80221ca:	6979      	ldr	r1, [r7, #20]
 80221cc:	480c      	ldr	r0, [pc, #48]	@ (8022200 <guess_mdc_cr+0xfc>)
 80221ce:	f7eb f83d 	bl	800d24c <mg_log>
  return result;
 80221d2:	69fb      	ldr	r3, [r7, #28]
}
 80221d4:	4618      	mov	r0, r3
 80221d6:	3720      	adds	r7, #32
 80221d8:	46bd      	mov	sp, r7
 80221da:	bd80      	pop	{r7, pc}
 80221dc:	08027c78 	.word	0x08027c78
 80221e0:	08027c80 	.word	0x08027c80
 80221e4:	017d783f 	.word	0x017d783f
 80221e8:	20000258 	.word	0x20000258
 80221ec:	08028b68 	.word	0x08028b68
 80221f0:	08025140 	.word	0x08025140
 80221f4:	08027c44 	.word	0x08027c44
 80221f8:	00243d58 	.word	0x00243d58
 80221fc:	08027c54 	.word	0x08027c54
 8022200:	08027c64 	.word	0x08027c64

08022204 <mg_tcpip_driver_stm32f_init>:

static bool mg_tcpip_driver_stm32f_init(struct mg_tcpip_if *ifp) {
 8022204:	b580      	push	{r7, lr}
 8022206:	b08a      	sub	sp, #40	@ 0x28
 8022208:	af00      	add	r7, sp, #0
 802220a:	6078      	str	r0, [r7, #4]
  struct mg_tcpip_driver_stm32f_data *d =
 802220c:	687b      	ldr	r3, [r7, #4]
 802220e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8022210:	61fb      	str	r3, [r7, #28]
      (struct mg_tcpip_driver_stm32f_data *) ifp->driver_data;
  uint8_t phy_addr = d == NULL ? 0 : d->phy_addr;
 8022212:	69fb      	ldr	r3, [r7, #28]
 8022214:	2b00      	cmp	r3, #0
 8022216:	d002      	beq.n	802221e <mg_tcpip_driver_stm32f_init+0x1a>
 8022218:	69fb      	ldr	r3, [r7, #28]
 802221a:	791b      	ldrb	r3, [r3, #4]
 802221c:	e000      	b.n	8022220 <mg_tcpip_driver_stm32f_init+0x1c>
 802221e:	2300      	movs	r3, #0
 8022220:	76fb      	strb	r3, [r7, #27]
  s_ifp = ifp;
 8022222:	4a6f      	ldr	r2, [pc, #444]	@ (80223e0 <mg_tcpip_driver_stm32f_init+0x1dc>)
 8022224:	687b      	ldr	r3, [r7, #4]
 8022226:	6013      	str	r3, [r2, #0]

  // Init RX descriptors
  for (int i = 0; i < ETH_DESC_CNT; i++) {
 8022228:	2300      	movs	r3, #0
 802222a:	627b      	str	r3, [r7, #36]	@ 0x24
 802222c:	e032      	b.n	8022294 <mg_tcpip_driver_stm32f_init+0x90>
    s_rxdesc[i][0] = MG_BIT(31);                         // Own
 802222e:	4a6d      	ldr	r2, [pc, #436]	@ (80223e4 <mg_tcpip_driver_stm32f_init+0x1e0>)
 8022230:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8022232:	011b      	lsls	r3, r3, #4
 8022234:	4413      	add	r3, r2
 8022236:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 802223a:	601a      	str	r2, [r3, #0]
    s_rxdesc[i][1] = sizeof(s_rxbuf[i]) | MG_BIT(14);    // 2nd address chained
 802223c:	4a69      	ldr	r2, [pc, #420]	@ (80223e4 <mg_tcpip_driver_stm32f_init+0x1e0>)
 802223e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8022240:	011b      	lsls	r3, r3, #4
 8022242:	4413      	add	r3, r2
 8022244:	3304      	adds	r3, #4
 8022246:	f244 6204 	movw	r2, #17924	@ 0x4604
 802224a:	601a      	str	r2, [r3, #0]
    s_rxdesc[i][2] = (uint32_t) (uintptr_t) s_rxbuf[i];  // Point to data buffer
 802224c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 802224e:	f240 6204 	movw	r2, #1540	@ 0x604
 8022252:	fb02 f303 	mul.w	r3, r2, r3
 8022256:	4a64      	ldr	r2, [pc, #400]	@ (80223e8 <mg_tcpip_driver_stm32f_init+0x1e4>)
 8022258:	4413      	add	r3, r2
 802225a:	4619      	mov	r1, r3
 802225c:	4a61      	ldr	r2, [pc, #388]	@ (80223e4 <mg_tcpip_driver_stm32f_init+0x1e0>)
 802225e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8022260:	011b      	lsls	r3, r3, #4
 8022262:	4413      	add	r3, r2
 8022264:	3308      	adds	r3, #8
 8022266:	6019      	str	r1, [r3, #0]
    s_rxdesc[i][3] =
        (uint32_t) (uintptr_t) s_rxdesc[(i + 1) % ETH_DESC_CNT];  // Chain
 8022268:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 802226a:	3301      	adds	r3, #1
 802226c:	425a      	negs	r2, r3
 802226e:	f003 0303 	and.w	r3, r3, #3
 8022272:	f002 0203 	and.w	r2, r2, #3
 8022276:	bf58      	it	pl
 8022278:	4253      	negpl	r3, r2
 802227a:	011b      	lsls	r3, r3, #4
 802227c:	4a59      	ldr	r2, [pc, #356]	@ (80223e4 <mg_tcpip_driver_stm32f_init+0x1e0>)
 802227e:	4413      	add	r3, r2
 8022280:	4619      	mov	r1, r3
    s_rxdesc[i][3] =
 8022282:	4a58      	ldr	r2, [pc, #352]	@ (80223e4 <mg_tcpip_driver_stm32f_init+0x1e0>)
 8022284:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8022286:	011b      	lsls	r3, r3, #4
 8022288:	4413      	add	r3, r2
 802228a:	330c      	adds	r3, #12
 802228c:	6019      	str	r1, [r3, #0]
  for (int i = 0; i < ETH_DESC_CNT; i++) {
 802228e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8022290:	3301      	adds	r3, #1
 8022292:	627b      	str	r3, [r7, #36]	@ 0x24
 8022294:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8022296:	2b03      	cmp	r3, #3
 8022298:	ddc9      	ble.n	802222e <mg_tcpip_driver_stm32f_init+0x2a>
  }

  // Init TX descriptors
  for (int i = 0; i < ETH_DESC_CNT; i++) {
 802229a:	2300      	movs	r3, #0
 802229c:	623b      	str	r3, [r7, #32]
 802229e:	e023      	b.n	80222e8 <mg_tcpip_driver_stm32f_init+0xe4>
    s_txdesc[i][2] = (uint32_t) (uintptr_t) s_txbuf[i];  // Buf pointer
 80222a0:	6a3b      	ldr	r3, [r7, #32]
 80222a2:	f240 6204 	movw	r2, #1540	@ 0x604
 80222a6:	fb02 f303 	mul.w	r3, r2, r3
 80222aa:	4a50      	ldr	r2, [pc, #320]	@ (80223ec <mg_tcpip_driver_stm32f_init+0x1e8>)
 80222ac:	4413      	add	r3, r2
 80222ae:	4619      	mov	r1, r3
 80222b0:	4a4f      	ldr	r2, [pc, #316]	@ (80223f0 <mg_tcpip_driver_stm32f_init+0x1ec>)
 80222b2:	6a3b      	ldr	r3, [r7, #32]
 80222b4:	011b      	lsls	r3, r3, #4
 80222b6:	4413      	add	r3, r2
 80222b8:	3308      	adds	r3, #8
 80222ba:	6019      	str	r1, [r3, #0]
    s_txdesc[i][3] =
        (uint32_t) (uintptr_t) s_txdesc[(i + 1) % ETH_DESC_CNT];  // Chain
 80222bc:	6a3b      	ldr	r3, [r7, #32]
 80222be:	3301      	adds	r3, #1
 80222c0:	425a      	negs	r2, r3
 80222c2:	f003 0303 	and.w	r3, r3, #3
 80222c6:	f002 0203 	and.w	r2, r2, #3
 80222ca:	bf58      	it	pl
 80222cc:	4253      	negpl	r3, r2
 80222ce:	011b      	lsls	r3, r3, #4
 80222d0:	4a47      	ldr	r2, [pc, #284]	@ (80223f0 <mg_tcpip_driver_stm32f_init+0x1ec>)
 80222d2:	4413      	add	r3, r2
 80222d4:	4619      	mov	r1, r3
    s_txdesc[i][3] =
 80222d6:	4a46      	ldr	r2, [pc, #280]	@ (80223f0 <mg_tcpip_driver_stm32f_init+0x1ec>)
 80222d8:	6a3b      	ldr	r3, [r7, #32]
 80222da:	011b      	lsls	r3, r3, #4
 80222dc:	4413      	add	r3, r2
 80222de:	330c      	adds	r3, #12
 80222e0:	6019      	str	r1, [r3, #0]
  for (int i = 0; i < ETH_DESC_CNT; i++) {
 80222e2:	6a3b      	ldr	r3, [r7, #32]
 80222e4:	3301      	adds	r3, #1
 80222e6:	623b      	str	r3, [r7, #32]
 80222e8:	6a3b      	ldr	r3, [r7, #32]
 80222ea:	2b03      	cmp	r3, #3
 80222ec:	ddd8      	ble.n	80222a0 <mg_tcpip_driver_stm32f_init+0x9c>
  }

  ETH->DMABMR |= MG_BIT(0);                         // Software reset
 80222ee:	4b41      	ldr	r3, [pc, #260]	@ (80223f4 <mg_tcpip_driver_stm32f_init+0x1f0>)
 80222f0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80222f4:	681b      	ldr	r3, [r3, #0]
 80222f6:	4a3f      	ldr	r2, [pc, #252]	@ (80223f4 <mg_tcpip_driver_stm32f_init+0x1f0>)
 80222f8:	f043 0301 	orr.w	r3, r3, #1
 80222fc:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8022300:	6013      	str	r3, [r2, #0]
  while ((ETH->DMABMR & MG_BIT(0)) != 0) (void) 0;  // Wait until done
 8022302:	bf00      	nop
 8022304:	4b3b      	ldr	r3, [pc, #236]	@ (80223f4 <mg_tcpip_driver_stm32f_init+0x1f0>)
 8022306:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 802230a:	681b      	ldr	r3, [r3, #0]
 802230c:	f003 0301 	and.w	r3, r3, #1
 8022310:	2b00      	cmp	r3, #0
 8022312:	d1f7      	bne.n	8022304 <mg_tcpip_driver_stm32f_init+0x100>

  // Set MDC clock divider. If user told us the value, use it. Otherwise, guess
  int cr = (d == NULL || d->mdc_cr < 0) ? guess_mdc_cr() : d->mdc_cr;
 8022314:	69fb      	ldr	r3, [r7, #28]
 8022316:	2b00      	cmp	r3, #0
 8022318:	d003      	beq.n	8022322 <mg_tcpip_driver_stm32f_init+0x11e>
 802231a:	69fb      	ldr	r3, [r7, #28]
 802231c:	681b      	ldr	r3, [r3, #0]
 802231e:	2b00      	cmp	r3, #0
 8022320:	da03      	bge.n	802232a <mg_tcpip_driver_stm32f_init+0x126>
 8022322:	f7ff feef 	bl	8022104 <guess_mdc_cr>
 8022326:	4603      	mov	r3, r0
 8022328:	e001      	b.n	802232e <mg_tcpip_driver_stm32f_init+0x12a>
 802232a:	69fb      	ldr	r3, [r7, #28]
 802232c:	681b      	ldr	r3, [r3, #0]
 802232e:	617b      	str	r3, [r7, #20]
  ETH->MACMIIAR = ((uint32_t) cr & 7) << 2;
 8022330:	697b      	ldr	r3, [r7, #20]
 8022332:	009b      	lsls	r3, r3, #2
 8022334:	4a2f      	ldr	r2, [pc, #188]	@ (80223f4 <mg_tcpip_driver_stm32f_init+0x1f0>)
 8022336:	f003 031c 	and.w	r3, r3, #28
 802233a:	6113      	str	r3, [r2, #16]

  // NOTE(cpq): we do not use extended descriptor bit 7, and do not use
  // hardware checksum. Therefore, descriptor size is 4, not 8
  // ETH->DMABMR = MG_BIT(13) | MG_BIT(16) | MG_BIT(22) | MG_BIT(23) |
  // MG_BIT(25);
  ETH->MACIMR = MG_BIT(3) | MG_BIT(9);  // Mask timestamp & PMT IT
 802233c:	4b2d      	ldr	r3, [pc, #180]	@ (80223f4 <mg_tcpip_driver_stm32f_init+0x1f0>)
 802233e:	f44f 7202 	mov.w	r2, #520	@ 0x208
 8022342:	63da      	str	r2, [r3, #60]	@ 0x3c
  ETH->MACFCR = MG_BIT(7);              // Disable zero quarta pause
 8022344:	4b2b      	ldr	r3, [pc, #172]	@ (80223f4 <mg_tcpip_driver_stm32f_init+0x1f0>)
 8022346:	2280      	movs	r2, #128	@ 0x80
 8022348:	619a      	str	r2, [r3, #24]
  ETH->MACFFR = MG_BIT(10);             // Perfect filtering
 802234a:	4b2a      	ldr	r3, [pc, #168]	@ (80223f4 <mg_tcpip_driver_stm32f_init+0x1f0>)
 802234c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8022350:	605a      	str	r2, [r3, #4]
  struct mg_phy phy = {eth_read_phy, eth_write_phy};
 8022352:	4a29      	ldr	r2, [pc, #164]	@ (80223f8 <mg_tcpip_driver_stm32f_init+0x1f4>)
 8022354:	f107 030c 	add.w	r3, r7, #12
 8022358:	e892 0003 	ldmia.w	r2, {r0, r1}
 802235c:	e883 0003 	stmia.w	r3, {r0, r1}
  mg_phy_init(&phy, phy_addr, MG_PHY_CLOCKS_MAC);
 8022360:	7ef9      	ldrb	r1, [r7, #27]
 8022362:	f107 030c 	add.w	r3, r7, #12
 8022366:	2202      	movs	r2, #2
 8022368:	4618      	mov	r0, r3
 802236a:	f7ff fc13 	bl	8021b94 <mg_phy_init>
  ETH->DMARDLAR = (uint32_t) (uintptr_t) s_rxdesc;  // RX descriptors
 802236e:	4a21      	ldr	r2, [pc, #132]	@ (80223f4 <mg_tcpip_driver_stm32f_init+0x1f0>)
 8022370:	4b1c      	ldr	r3, [pc, #112]	@ (80223e4 <mg_tcpip_driver_stm32f_init+0x1e0>)
 8022372:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8022376:	60d3      	str	r3, [r2, #12]
  ETH->DMATDLAR = (uint32_t) (uintptr_t) s_txdesc;  // RX descriptors
 8022378:	4a1e      	ldr	r2, [pc, #120]	@ (80223f4 <mg_tcpip_driver_stm32f_init+0x1f0>)
 802237a:	4b1d      	ldr	r3, [pc, #116]	@ (80223f0 <mg_tcpip_driver_stm32f_init+0x1ec>)
 802237c:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8022380:	6113      	str	r3, [r2, #16]
  ETH->DMAIER = MG_BIT(6) | MG_BIT(16);             // RIE, NISE
 8022382:	4b1c      	ldr	r3, [pc, #112]	@ (80223f4 <mg_tcpip_driver_stm32f_init+0x1f0>)
 8022384:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8022388:	461a      	mov	r2, r3
 802238a:	4b1c      	ldr	r3, [pc, #112]	@ (80223fc <mg_tcpip_driver_stm32f_init+0x1f8>)
 802238c:	61d3      	str	r3, [r2, #28]
  ETH->MACCR =
 802238e:	4b19      	ldr	r3, [pc, #100]	@ (80223f4 <mg_tcpip_driver_stm32f_init+0x1f0>)
 8022390:	f644 020c 	movw	r2, #18444	@ 0x480c
 8022394:	601a      	str	r2, [r3, #0]
      MG_BIT(2) | MG_BIT(3) | MG_BIT(11) | MG_BIT(14);  // RE, TE, Duplex, Fast
  ETH->DMAOMR =
 8022396:	4b17      	ldr	r3, [pc, #92]	@ (80223f4 <mg_tcpip_driver_stm32f_init+0x1f0>)
 8022398:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 802239c:	461a      	mov	r2, r3
 802239e:	4b18      	ldr	r3, [pc, #96]	@ (8022400 <mg_tcpip_driver_stm32f_init+0x1fc>)
 80223a0:	6193      	str	r3, [r2, #24]
      MG_BIT(1) | MG_BIT(13) | MG_BIT(21) | MG_BIT(25);  // SR, ST, TSF, RSF

  // MAC address filtering
  ETH->MACA0HR = ((uint32_t) ifp->mac[5] << 8U) | ifp->mac[4];
 80223a2:	687b      	ldr	r3, [r7, #4]
 80223a4:	795b      	ldrb	r3, [r3, #5]
 80223a6:	021b      	lsls	r3, r3, #8
 80223a8:	687a      	ldr	r2, [r7, #4]
 80223aa:	7912      	ldrb	r2, [r2, #4]
 80223ac:	4611      	mov	r1, r2
 80223ae:	4a11      	ldr	r2, [pc, #68]	@ (80223f4 <mg_tcpip_driver_stm32f_init+0x1f0>)
 80223b0:	430b      	orrs	r3, r1
 80223b2:	6413      	str	r3, [r2, #64]	@ 0x40
  ETH->MACA0LR = (uint32_t) (ifp->mac[3] << 24) |
 80223b4:	687b      	ldr	r3, [r7, #4]
 80223b6:	78db      	ldrb	r3, [r3, #3]
 80223b8:	061a      	lsls	r2, r3, #24
                 ((uint32_t) ifp->mac[2] << 16) |
 80223ba:	687b      	ldr	r3, [r7, #4]
 80223bc:	789b      	ldrb	r3, [r3, #2]
 80223be:	041b      	lsls	r3, r3, #16
  ETH->MACA0LR = (uint32_t) (ifp->mac[3] << 24) |
 80223c0:	431a      	orrs	r2, r3
                 ((uint32_t) ifp->mac[1] << 8) | ifp->mac[0];
 80223c2:	687b      	ldr	r3, [r7, #4]
 80223c4:	785b      	ldrb	r3, [r3, #1]
 80223c6:	021b      	lsls	r3, r3, #8
                 ((uint32_t) ifp->mac[2] << 16) |
 80223c8:	4313      	orrs	r3, r2
                 ((uint32_t) ifp->mac[1] << 8) | ifp->mac[0];
 80223ca:	687a      	ldr	r2, [r7, #4]
 80223cc:	7812      	ldrb	r2, [r2, #0]
 80223ce:	4611      	mov	r1, r2
  ETH->MACA0LR = (uint32_t) (ifp->mac[3] << 24) |
 80223d0:	4a08      	ldr	r2, [pc, #32]	@ (80223f4 <mg_tcpip_driver_stm32f_init+0x1f0>)
                 ((uint32_t) ifp->mac[1] << 8) | ifp->mac[0];
 80223d2:	430b      	orrs	r3, r1
  ETH->MACA0LR = (uint32_t) (ifp->mac[3] << 24) |
 80223d4:	6453      	str	r3, [r2, #68]	@ 0x44
  return true;
 80223d6:	2301      	movs	r3, #1
}
 80223d8:	4618      	mov	r0, r3
 80223da:	3728      	adds	r7, #40	@ 0x28
 80223dc:	46bd      	mov	sp, r7
 80223de:	bd80      	pop	{r7, pc}
 80223e0:	20014b70 	.word	0x20014b70
 80223e4:	20011acc 	.word	0x20011acc
 80223e8:	20011b4c 	.word	0x20011b4c
 80223ec:	2001335c 	.word	0x2001335c
 80223f0:	20011b0c 	.word	0x20011b0c
 80223f4:	40028000 	.word	0x40028000
 80223f8:	08027c88 	.word	0x08027c88
 80223fc:	00010040 	.word	0x00010040
 8022400:	02202002 	.word	0x02202002

08022404 <mg_tcpip_driver_stm32f_tx>:

static size_t mg_tcpip_driver_stm32f_tx(const void *buf, size_t len,
                                        struct mg_tcpip_if *ifp) {
 8022404:	b580      	push	{r7, lr}
 8022406:	b084      	sub	sp, #16
 8022408:	af00      	add	r7, sp, #0
 802240a:	60f8      	str	r0, [r7, #12]
 802240c:	60b9      	str	r1, [r7, #8]
 802240e:	607a      	str	r2, [r7, #4]
  if (len > sizeof(s_txbuf[s_txno])) {
 8022410:	68bb      	ldr	r3, [r7, #8]
 8022412:	f240 6204 	movw	r2, #1540	@ 0x604
 8022416:	4293      	cmp	r3, r2
 8022418:	d912      	bls.n	8022440 <mg_tcpip_driver_stm32f_tx+0x3c>
    MG_ERROR(("Frame too big, %ld", (long) len));
 802241a:	4b3f      	ldr	r3, [pc, #252]	@ (8022518 <mg_tcpip_driver_stm32f_tx+0x114>)
 802241c:	681b      	ldr	r3, [r3, #0]
 802241e:	2b00      	cmp	r3, #0
 8022420:	dd0b      	ble.n	802243a <mg_tcpip_driver_stm32f_tx+0x36>
 8022422:	4b3e      	ldr	r3, [pc, #248]	@ (802251c <mg_tcpip_driver_stm32f_tx+0x118>)
 8022424:	f645 6277 	movw	r2, #24183	@ 0x5e77
 8022428:	493d      	ldr	r1, [pc, #244]	@ (8022520 <mg_tcpip_driver_stm32f_tx+0x11c>)
 802242a:	2001      	movs	r0, #1
 802242c:	f7ea febe 	bl	800d1ac <mg_log_prefix>
 8022430:	68bb      	ldr	r3, [r7, #8]
 8022432:	4619      	mov	r1, r3
 8022434:	483b      	ldr	r0, [pc, #236]	@ (8022524 <mg_tcpip_driver_stm32f_tx+0x120>)
 8022436:	f7ea ff09 	bl	800d24c <mg_log>
    len = 0;  // Frame is too big
 802243a:	2300      	movs	r3, #0
 802243c:	60bb      	str	r3, [r7, #8]
 802243e:	e058      	b.n	80224f2 <mg_tcpip_driver_stm32f_tx+0xee>
  } else if ((s_txdesc[s_txno][0] & MG_BIT(31))) {
 8022440:	4b39      	ldr	r3, [pc, #228]	@ (8022528 <mg_tcpip_driver_stm32f_tx+0x124>)
 8022442:	781b      	ldrb	r3, [r3, #0]
 8022444:	4a39      	ldr	r2, [pc, #228]	@ (802252c <mg_tcpip_driver_stm32f_tx+0x128>)
 8022446:	011b      	lsls	r3, r3, #4
 8022448:	4413      	add	r3, r2
 802244a:	681b      	ldr	r3, [r3, #0]
 802244c:	2b00      	cmp	r3, #0
 802244e:	da17      	bge.n	8022480 <mg_tcpip_driver_stm32f_tx+0x7c>
    ifp->nerr++;
 8022450:	687b      	ldr	r3, [r7, #4]
 8022452:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8022456:	1c5a      	adds	r2, r3, #1
 8022458:	687b      	ldr	r3, [r7, #4]
 802245a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    MG_ERROR(("No free descriptors"));
 802245e:	4b2e      	ldr	r3, [pc, #184]	@ (8022518 <mg_tcpip_driver_stm32f_tx+0x114>)
 8022460:	681b      	ldr	r3, [r3, #0]
 8022462:	2b00      	cmp	r3, #0
 8022464:	dd09      	ble.n	802247a <mg_tcpip_driver_stm32f_tx+0x76>
 8022466:	4b2d      	ldr	r3, [pc, #180]	@ (802251c <mg_tcpip_driver_stm32f_tx+0x118>)
 8022468:	f645 627b 	movw	r2, #24187	@ 0x5e7b
 802246c:	492c      	ldr	r1, [pc, #176]	@ (8022520 <mg_tcpip_driver_stm32f_tx+0x11c>)
 802246e:	2001      	movs	r0, #1
 8022470:	f7ea fe9c 	bl	800d1ac <mg_log_prefix>
 8022474:	482e      	ldr	r0, [pc, #184]	@ (8022530 <mg_tcpip_driver_stm32f_tx+0x12c>)
 8022476:	f7ea fee9 	bl	800d24c <mg_log>
    // printf("D0 %lx SR %lx\n", (long) s_txdesc[0][0], (long) ETH->DMASR);
    len = 0;  // All descriptors are busy, fail
 802247a:	2300      	movs	r3, #0
 802247c:	60bb      	str	r3, [r7, #8]
 802247e:	e038      	b.n	80224f2 <mg_tcpip_driver_stm32f_tx+0xee>
  } else {
    memcpy(s_txbuf[s_txno], buf, len);                           // Copy data
 8022480:	4b29      	ldr	r3, [pc, #164]	@ (8022528 <mg_tcpip_driver_stm32f_tx+0x124>)
 8022482:	781b      	ldrb	r3, [r3, #0]
 8022484:	461a      	mov	r2, r3
 8022486:	f240 6304 	movw	r3, #1540	@ 0x604
 802248a:	fb02 f303 	mul.w	r3, r2, r3
 802248e:	4a29      	ldr	r2, [pc, #164]	@ (8022534 <mg_tcpip_driver_stm32f_tx+0x130>)
 8022490:	4413      	add	r3, r2
 8022492:	68ba      	ldr	r2, [r7, #8]
 8022494:	68f9      	ldr	r1, [r7, #12]
 8022496:	4618      	mov	r0, r3
 8022498:	f002 f975 	bl	8024786 <memcpy>
    s_txdesc[s_txno][1] = (uint32_t) len;                        // Set data len
 802249c:	4b22      	ldr	r3, [pc, #136]	@ (8022528 <mg_tcpip_driver_stm32f_tx+0x124>)
 802249e:	781b      	ldrb	r3, [r3, #0]
 80224a0:	4a22      	ldr	r2, [pc, #136]	@ (802252c <mg_tcpip_driver_stm32f_tx+0x128>)
 80224a2:	011b      	lsls	r3, r3, #4
 80224a4:	4413      	add	r3, r2
 80224a6:	3304      	adds	r3, #4
 80224a8:	68ba      	ldr	r2, [r7, #8]
 80224aa:	601a      	str	r2, [r3, #0]
    s_txdesc[s_txno][0] = MG_BIT(20) | MG_BIT(28) | MG_BIT(29);  // Chain,FS,LS
 80224ac:	4b1e      	ldr	r3, [pc, #120]	@ (8022528 <mg_tcpip_driver_stm32f_tx+0x124>)
 80224ae:	781b      	ldrb	r3, [r3, #0]
 80224b0:	4a1e      	ldr	r2, [pc, #120]	@ (802252c <mg_tcpip_driver_stm32f_tx+0x128>)
 80224b2:	011b      	lsls	r3, r3, #4
 80224b4:	4413      	add	r3, r2
 80224b6:	4a20      	ldr	r2, [pc, #128]	@ (8022538 <mg_tcpip_driver_stm32f_tx+0x134>)
 80224b8:	601a      	str	r2, [r3, #0]
    s_txdesc[s_txno][0] |= MG_BIT(31);  // Set OWN bit - let DMA take over
 80224ba:	4b1b      	ldr	r3, [pc, #108]	@ (8022528 <mg_tcpip_driver_stm32f_tx+0x124>)
 80224bc:	781b      	ldrb	r3, [r3, #0]
 80224be:	4a1b      	ldr	r2, [pc, #108]	@ (802252c <mg_tcpip_driver_stm32f_tx+0x128>)
 80224c0:	011b      	lsls	r3, r3, #4
 80224c2:	4413      	add	r3, r2
 80224c4:	681b      	ldr	r3, [r3, #0]
 80224c6:	4a18      	ldr	r2, [pc, #96]	@ (8022528 <mg_tcpip_driver_stm32f_tx+0x124>)
 80224c8:	7812      	ldrb	r2, [r2, #0]
 80224ca:	4610      	mov	r0, r2
 80224cc:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80224d0:	4916      	ldr	r1, [pc, #88]	@ (802252c <mg_tcpip_driver_stm32f_tx+0x128>)
 80224d2:	0103      	lsls	r3, r0, #4
 80224d4:	440b      	add	r3, r1
 80224d6:	601a      	str	r2, [r3, #0]
    if (++s_txno >= ETH_DESC_CNT) s_txno = 0;
 80224d8:	4b13      	ldr	r3, [pc, #76]	@ (8022528 <mg_tcpip_driver_stm32f_tx+0x124>)
 80224da:	781b      	ldrb	r3, [r3, #0]
 80224dc:	3301      	adds	r3, #1
 80224de:	b2da      	uxtb	r2, r3
 80224e0:	4b11      	ldr	r3, [pc, #68]	@ (8022528 <mg_tcpip_driver_stm32f_tx+0x124>)
 80224e2:	701a      	strb	r2, [r3, #0]
 80224e4:	4b10      	ldr	r3, [pc, #64]	@ (8022528 <mg_tcpip_driver_stm32f_tx+0x124>)
 80224e6:	781b      	ldrb	r3, [r3, #0]
 80224e8:	2b03      	cmp	r3, #3
 80224ea:	d902      	bls.n	80224f2 <mg_tcpip_driver_stm32f_tx+0xee>
 80224ec:	4b0e      	ldr	r3, [pc, #56]	@ (8022528 <mg_tcpip_driver_stm32f_tx+0x124>)
 80224ee:	2200      	movs	r2, #0
 80224f0:	701a      	strb	r2, [r3, #0]
  }
  MG_DSB();                            // ensure descriptors have been written
 80224f2:	f3bf 8f4f 	dsb	sy
  ETH->DMASR = MG_BIT(2) | MG_BIT(5);  // Clear any prior TBUS/TUS
 80224f6:	4b11      	ldr	r3, [pc, #68]	@ (802253c <mg_tcpip_driver_stm32f_tx+0x138>)
 80224f8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80224fc:	461a      	mov	r2, r3
 80224fe:	2324      	movs	r3, #36	@ 0x24
 8022500:	6153      	str	r3, [r2, #20]
  ETH->DMATPDR = 0;                    // and resume
 8022502:	4b0e      	ldr	r3, [pc, #56]	@ (802253c <mg_tcpip_driver_stm32f_tx+0x138>)
 8022504:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8022508:	461a      	mov	r2, r3
 802250a:	2300      	movs	r3, #0
 802250c:	6053      	str	r3, [r2, #4]
  return len;
 802250e:	68bb      	ldr	r3, [r7, #8]
}
 8022510:	4618      	mov	r0, r3
 8022512:	3710      	adds	r7, #16
 8022514:	46bd      	mov	sp, r7
 8022516:	bd80      	pop	{r7, pc}
 8022518:	20000258 	.word	0x20000258
 802251c:	08028b78 	.word	0x08028b78
 8022520:	08025140 	.word	0x08025140
 8022524:	08027c90 	.word	0x08027c90
 8022528:	20014b6c 	.word	0x20014b6c
 802252c:	20011b0c 	.word	0x20011b0c
 8022530:	08027ca4 	.word	0x08027ca4
 8022534:	2001335c 	.word	0x2001335c
 8022538:	30100000 	.word	0x30100000
 802253c:	40028000 	.word	0x40028000

08022540 <mg_tcpip_driver_stm32f_update_hash_table>:

static void mg_tcpip_driver_stm32f_update_hash_table(struct mg_tcpip_if *ifp) {
 8022540:	b480      	push	{r7}
 8022542:	b083      	sub	sp, #12
 8022544:	af00      	add	r7, sp, #0
 8022546:	6078      	str	r0, [r7, #4]
  // TODO(): read database, rebuild hash table
  ETH->MACA1LR = (uint32_t) mcast_addr[3] << 24 |
 8022548:	4b12      	ldr	r3, [pc, #72]	@ (8022594 <mg_tcpip_driver_stm32f_update_hash_table+0x54>)
 802254a:	78db      	ldrb	r3, [r3, #3]
 802254c:	061a      	lsls	r2, r3, #24
                 (uint32_t) mcast_addr[2] << 16 |
 802254e:	4b11      	ldr	r3, [pc, #68]	@ (8022594 <mg_tcpip_driver_stm32f_update_hash_table+0x54>)
 8022550:	789b      	ldrb	r3, [r3, #2]
 8022552:	041b      	lsls	r3, r3, #16
  ETH->MACA1LR = (uint32_t) mcast_addr[3] << 24 |
 8022554:	431a      	orrs	r2, r3
                 (uint32_t) mcast_addr[1] << 8 | (uint32_t) mcast_addr[0];
 8022556:	4b0f      	ldr	r3, [pc, #60]	@ (8022594 <mg_tcpip_driver_stm32f_update_hash_table+0x54>)
 8022558:	785b      	ldrb	r3, [r3, #1]
 802255a:	021b      	lsls	r3, r3, #8
                 (uint32_t) mcast_addr[2] << 16 |
 802255c:	4313      	orrs	r3, r2
                 (uint32_t) mcast_addr[1] << 8 | (uint32_t) mcast_addr[0];
 802255e:	4a0d      	ldr	r2, [pc, #52]	@ (8022594 <mg_tcpip_driver_stm32f_update_hash_table+0x54>)
 8022560:	7812      	ldrb	r2, [r2, #0]
 8022562:	4611      	mov	r1, r2
  ETH->MACA1LR = (uint32_t) mcast_addr[3] << 24 |
 8022564:	4a0c      	ldr	r2, [pc, #48]	@ (8022598 <mg_tcpip_driver_stm32f_update_hash_table+0x58>)
                 (uint32_t) mcast_addr[1] << 8 | (uint32_t) mcast_addr[0];
 8022566:	430b      	orrs	r3, r1
  ETH->MACA1LR = (uint32_t) mcast_addr[3] << 24 |
 8022568:	64d3      	str	r3, [r2, #76]	@ 0x4c
  ETH->MACA1HR = (uint32_t) mcast_addr[5] << 8 | (uint32_t) mcast_addr[4];
 802256a:	4b0a      	ldr	r3, [pc, #40]	@ (8022594 <mg_tcpip_driver_stm32f_update_hash_table+0x54>)
 802256c:	795b      	ldrb	r3, [r3, #5]
 802256e:	021b      	lsls	r3, r3, #8
 8022570:	4a08      	ldr	r2, [pc, #32]	@ (8022594 <mg_tcpip_driver_stm32f_update_hash_table+0x54>)
 8022572:	7912      	ldrb	r2, [r2, #4]
 8022574:	4611      	mov	r1, r2
 8022576:	4a08      	ldr	r2, [pc, #32]	@ (8022598 <mg_tcpip_driver_stm32f_update_hash_table+0x58>)
 8022578:	430b      	orrs	r3, r1
 802257a:	6493      	str	r3, [r2, #72]	@ 0x48
  ETH->MACA1HR |= MG_BIT(31);  // AE
 802257c:	4b06      	ldr	r3, [pc, #24]	@ (8022598 <mg_tcpip_driver_stm32f_update_hash_table+0x58>)
 802257e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8022580:	4a05      	ldr	r2, [pc, #20]	@ (8022598 <mg_tcpip_driver_stm32f_update_hash_table+0x58>)
 8022582:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8022586:	6493      	str	r3, [r2, #72]	@ 0x48
  (void) ifp;
}
 8022588:	bf00      	nop
 802258a:	370c      	adds	r7, #12
 802258c:	46bd      	mov	sp, r7
 802258e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022592:	4770      	bx	lr
 8022594:	20000260 	.word	0x20000260
 8022598:	40028000 	.word	0x40028000

0802259c <mg_tcpip_driver_stm32f_poll>:

static bool mg_tcpip_driver_stm32f_poll(struct mg_tcpip_if *ifp, bool s1) {
 802259c:	b580      	push	{r7, lr}
 802259e:	b088      	sub	sp, #32
 80225a0:	af00      	add	r7, sp, #0
 80225a2:	6078      	str	r0, [r7, #4]
 80225a4:	460b      	mov	r3, r1
 80225a6:	70fb      	strb	r3, [r7, #3]
  if (ifp->update_mac_hash_table) {
 80225a8:	687b      	ldr	r3, [r7, #4]
 80225aa:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
 80225ae:	2b00      	cmp	r3, #0
 80225b0:	d006      	beq.n	80225c0 <mg_tcpip_driver_stm32f_poll+0x24>
    mg_tcpip_driver_stm32f_update_hash_table(ifp);
 80225b2:	6878      	ldr	r0, [r7, #4]
 80225b4:	f7ff ffc4 	bl	8022540 <mg_tcpip_driver_stm32f_update_hash_table>
    ifp->update_mac_hash_table = false;
 80225b8:	687b      	ldr	r3, [r7, #4]
 80225ba:	2200      	movs	r2, #0
 80225bc:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23
  }
  if (!s1) return false;
 80225c0:	78fb      	ldrb	r3, [r7, #3]
 80225c2:	f083 0301 	eor.w	r3, r3, #1
 80225c6:	b2db      	uxtb	r3, r3
 80225c8:	2b00      	cmp	r3, #0
 80225ca:	d001      	beq.n	80225d0 <mg_tcpip_driver_stm32f_poll+0x34>
 80225cc:	2300      	movs	r3, #0
 80225ce:	e063      	b.n	8022698 <mg_tcpip_driver_stm32f_poll+0xfc>
  struct mg_tcpip_driver_stm32f_data *d =
 80225d0:	687b      	ldr	r3, [r7, #4]
 80225d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80225d4:	61bb      	str	r3, [r7, #24]
      (struct mg_tcpip_driver_stm32f_data *) ifp->driver_data;
  uint8_t phy_addr = d == NULL ? 0 : d->phy_addr;
 80225d6:	69bb      	ldr	r3, [r7, #24]
 80225d8:	2b00      	cmp	r3, #0
 80225da:	d002      	beq.n	80225e2 <mg_tcpip_driver_stm32f_poll+0x46>
 80225dc:	69bb      	ldr	r3, [r7, #24]
 80225de:	791b      	ldrb	r3, [r3, #4]
 80225e0:	e000      	b.n	80225e4 <mg_tcpip_driver_stm32f_poll+0x48>
 80225e2:	2300      	movs	r3, #0
 80225e4:	75fb      	strb	r3, [r7, #23]
  uint8_t speed = MG_PHY_SPEED_10M;
 80225e6:	2300      	movs	r3, #0
 80225e8:	757b      	strb	r3, [r7, #21]
  bool up = false, full_duplex = false;
 80225ea:	2300      	movs	r3, #0
 80225ec:	75bb      	strb	r3, [r7, #22]
 80225ee:	2300      	movs	r3, #0
 80225f0:	753b      	strb	r3, [r7, #20]
  struct mg_phy phy = {eth_read_phy, eth_write_phy};
 80225f2:	4a2b      	ldr	r2, [pc, #172]	@ (80226a0 <mg_tcpip_driver_stm32f_poll+0x104>)
 80225f4:	f107 030c 	add.w	r3, r7, #12
 80225f8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80225fc:	e883 0003 	stmia.w	r3, {r0, r1}
  up = mg_phy_up(&phy, phy_addr, &full_duplex, &speed);
 8022600:	f107 0315 	add.w	r3, r7, #21
 8022604:	f107 0214 	add.w	r2, r7, #20
 8022608:	7df9      	ldrb	r1, [r7, #23]
 802260a:	f107 000c 	add.w	r0, r7, #12
 802260e:	f7ff fb79 	bl	8021d04 <mg_phy_up>
 8022612:	4603      	mov	r3, r0
 8022614:	75bb      	strb	r3, [r7, #22]
  if ((ifp->state == MG_TCPIP_STATE_DOWN) && up) {  // link state just went up
 8022616:	687b      	ldr	r3, [r7, #4]
 8022618:	f893 3094 	ldrb.w	r3, [r3, #148]	@ 0x94
 802261c:	2b00      	cmp	r3, #0
 802261e:	d13a      	bne.n	8022696 <mg_tcpip_driver_stm32f_poll+0xfa>
 8022620:	7dbb      	ldrb	r3, [r7, #22]
 8022622:	2b00      	cmp	r3, #0
 8022624:	d037      	beq.n	8022696 <mg_tcpip_driver_stm32f_poll+0xfa>
    // tmp = reg with flags set to the most likely situation: 100M full-duplex
    // if(link is slow or half) set flags otherwise
    // reg = tmp
    uint32_t maccr = ETH->MACCR | MG_BIT(14) | MG_BIT(11);  // 100M, Full-duplex
 8022626:	4b1f      	ldr	r3, [pc, #124]	@ (80226a4 <mg_tcpip_driver_stm32f_poll+0x108>)
 8022628:	681b      	ldr	r3, [r3, #0]
 802262a:	f443 4390 	orr.w	r3, r3, #18432	@ 0x4800
 802262e:	61fb      	str	r3, [r7, #28]
    if (speed == MG_PHY_SPEED_10M) maccr &= ~MG_BIT(14);    // 10M
 8022630:	7d7b      	ldrb	r3, [r7, #21]
 8022632:	2b00      	cmp	r3, #0
 8022634:	d103      	bne.n	802263e <mg_tcpip_driver_stm32f_poll+0xa2>
 8022636:	69fb      	ldr	r3, [r7, #28]
 8022638:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 802263c:	61fb      	str	r3, [r7, #28]
    if (full_duplex == false) maccr &= ~MG_BIT(11);         // Half-duplex
 802263e:	7d3b      	ldrb	r3, [r7, #20]
 8022640:	f083 0301 	eor.w	r3, r3, #1
 8022644:	b2db      	uxtb	r3, r3
 8022646:	2b00      	cmp	r3, #0
 8022648:	d003      	beq.n	8022652 <mg_tcpip_driver_stm32f_poll+0xb6>
 802264a:	69fb      	ldr	r3, [r7, #28]
 802264c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8022650:	61fb      	str	r3, [r7, #28]
    ETH->MACCR = maccr;  // IRQ handler does not fiddle with this register
 8022652:	4a14      	ldr	r2, [pc, #80]	@ (80226a4 <mg_tcpip_driver_stm32f_poll+0x108>)
 8022654:	69fb      	ldr	r3, [r7, #28]
 8022656:	6013      	str	r3, [r2, #0]
    MG_DEBUG(("Link is %uM %s-duplex", maccr & MG_BIT(14) ? 100 : 10,
 8022658:	4b13      	ldr	r3, [pc, #76]	@ (80226a8 <mg_tcpip_driver_stm32f_poll+0x10c>)
 802265a:	681b      	ldr	r3, [r3, #0]
 802265c:	2b02      	cmp	r3, #2
 802265e:	dd1a      	ble.n	8022696 <mg_tcpip_driver_stm32f_poll+0xfa>
 8022660:	4b12      	ldr	r3, [pc, #72]	@ (80226ac <mg_tcpip_driver_stm32f_poll+0x110>)
 8022662:	f645 62aa 	movw	r2, #24234	@ 0x5eaa
 8022666:	4912      	ldr	r1, [pc, #72]	@ (80226b0 <mg_tcpip_driver_stm32f_poll+0x114>)
 8022668:	2003      	movs	r0, #3
 802266a:	f7ea fd9f 	bl	800d1ac <mg_log_prefix>
 802266e:	69fb      	ldr	r3, [r7, #28]
 8022670:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8022674:	2b00      	cmp	r3, #0
 8022676:	d001      	beq.n	802267c <mg_tcpip_driver_stm32f_poll+0xe0>
 8022678:	2164      	movs	r1, #100	@ 0x64
 802267a:	e000      	b.n	802267e <mg_tcpip_driver_stm32f_poll+0xe2>
 802267c:	210a      	movs	r1, #10
 802267e:	69fb      	ldr	r3, [r7, #28]
 8022680:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8022684:	2b00      	cmp	r3, #0
 8022686:	d001      	beq.n	802268c <mg_tcpip_driver_stm32f_poll+0xf0>
 8022688:	4b0a      	ldr	r3, [pc, #40]	@ (80226b4 <mg_tcpip_driver_stm32f_poll+0x118>)
 802268a:	e000      	b.n	802268e <mg_tcpip_driver_stm32f_poll+0xf2>
 802268c:	4b0a      	ldr	r3, [pc, #40]	@ (80226b8 <mg_tcpip_driver_stm32f_poll+0x11c>)
 802268e:	461a      	mov	r2, r3
 8022690:	480a      	ldr	r0, [pc, #40]	@ (80226bc <mg_tcpip_driver_stm32f_poll+0x120>)
 8022692:	f7ea fddb 	bl	800d24c <mg_log>
              maccr & MG_BIT(11) ? "full" : "half"));
  }
  return up;
 8022696:	7dbb      	ldrb	r3, [r7, #22]
}
 8022698:	4618      	mov	r0, r3
 802269a:	3720      	adds	r7, #32
 802269c:	46bd      	mov	sp, r7
 802269e:	bd80      	pop	{r7, pc}
 80226a0:	08027c88 	.word	0x08027c88
 80226a4:	40028000 	.word	0x40028000
 80226a8:	20000258 	.word	0x20000258
 80226ac:	08028b94 	.word	0x08028b94
 80226b0:	08025140 	.word	0x08025140
 80226b4:	08027cb8 	.word	0x08027cb8
 80226b8:	08027cc0 	.word	0x08027cc0
 80226bc:	08027cc8 	.word	0x08027cc8

080226c0 <ETH_IRQHandler>:

#ifdef __riscv
__attribute__((interrupt()))  // For RISCV CH32V307, which share the same MAC
#endif
void ETH_IRQHandler(void);
void ETH_IRQHandler(void) {
 80226c0:	b580      	push	{r7, lr}
 80226c2:	b082      	sub	sp, #8
 80226c4:	af00      	add	r7, sp, #0
  if (ETH->DMASR & MG_BIT(6)) {           // Frame received, loop
 80226c6:	4b3d      	ldr	r3, [pc, #244]	@ (80227bc <ETH_IRQHandler+0xfc>)
 80226c8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80226cc:	695b      	ldr	r3, [r3, #20]
 80226ce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80226d2:	2b00      	cmp	r3, #0
 80226d4:	d061      	beq.n	802279a <ETH_IRQHandler+0xda>
    ETH->DMASR = MG_BIT(16) | MG_BIT(6);  // Clear flag
 80226d6:	4b39      	ldr	r3, [pc, #228]	@ (80227bc <ETH_IRQHandler+0xfc>)
 80226d8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80226dc:	461a      	mov	r2, r3
 80226de:	4b38      	ldr	r3, [pc, #224]	@ (80227c0 <ETH_IRQHandler+0x100>)
 80226e0:	6153      	str	r3, [r2, #20]
    for (uint32_t i = 0; i < 10; i++) {   // read as they arrive but not forever
 80226e2:	2300      	movs	r3, #0
 80226e4:	607b      	str	r3, [r7, #4]
 80226e6:	e053      	b.n	8022790 <ETH_IRQHandler+0xd0>
      if (s_rxdesc[s_rxno][0] & MG_BIT(31)) break;  // exit when done
 80226e8:	4b36      	ldr	r3, [pc, #216]	@ (80227c4 <ETH_IRQHandler+0x104>)
 80226ea:	781b      	ldrb	r3, [r3, #0]
 80226ec:	4a36      	ldr	r2, [pc, #216]	@ (80227c8 <ETH_IRQHandler+0x108>)
 80226ee:	011b      	lsls	r3, r3, #4
 80226f0:	4413      	add	r3, r2
 80226f2:	681b      	ldr	r3, [r3, #0]
 80226f4:	2b00      	cmp	r3, #0
 80226f6:	db4f      	blt.n	8022798 <ETH_IRQHandler+0xd8>
      if (((s_rxdesc[s_rxno][0] & (MG_BIT(8) | MG_BIT(9))) ==
 80226f8:	4b32      	ldr	r3, [pc, #200]	@ (80227c4 <ETH_IRQHandler+0x104>)
 80226fa:	781b      	ldrb	r3, [r3, #0]
 80226fc:	4a32      	ldr	r2, [pc, #200]	@ (80227c8 <ETH_IRQHandler+0x108>)
 80226fe:	011b      	lsls	r3, r3, #4
 8022700:	4413      	add	r3, r2
 8022702:	681b      	ldr	r3, [r3, #0]
 8022704:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8022708:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 802270c:	d128      	bne.n	8022760 <ETH_IRQHandler+0xa0>
           (MG_BIT(8) | MG_BIT(9))) &&
          !(s_rxdesc[s_rxno][0] & MG_BIT(15))) {  // skip partial/errored frames
 802270e:	4b2d      	ldr	r3, [pc, #180]	@ (80227c4 <ETH_IRQHandler+0x104>)
 8022710:	781b      	ldrb	r3, [r3, #0]
 8022712:	4a2d      	ldr	r2, [pc, #180]	@ (80227c8 <ETH_IRQHandler+0x108>)
 8022714:	011b      	lsls	r3, r3, #4
 8022716:	4413      	add	r3, r2
 8022718:	681b      	ldr	r3, [r3, #0]
 802271a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
           (MG_BIT(8) | MG_BIT(9))) &&
 802271e:	2b00      	cmp	r3, #0
 8022720:	d11e      	bne.n	8022760 <ETH_IRQHandler+0xa0>
        uint32_t len = ((s_rxdesc[s_rxno][0] >> 16) & (MG_BIT(14) - 1));
 8022722:	4b28      	ldr	r3, [pc, #160]	@ (80227c4 <ETH_IRQHandler+0x104>)
 8022724:	781b      	ldrb	r3, [r3, #0]
 8022726:	4a28      	ldr	r2, [pc, #160]	@ (80227c8 <ETH_IRQHandler+0x108>)
 8022728:	011b      	lsls	r3, r3, #4
 802272a:	4413      	add	r3, r2
 802272c:	681b      	ldr	r3, [r3, #0]
 802272e:	0c1b      	lsrs	r3, r3, #16
 8022730:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8022734:	603b      	str	r3, [r7, #0]
        //  printf("%lx %lu %lx %.8lx\n", s_rxno, len, s_rxdesc[s_rxno][0],
        //  ETH->DMASR);
        mg_tcpip_qwrite(s_rxbuf[s_rxno], len > 4 ? len - 4 : len, s_ifp);
 8022736:	4b23      	ldr	r3, [pc, #140]	@ (80227c4 <ETH_IRQHandler+0x104>)
 8022738:	781b      	ldrb	r3, [r3, #0]
 802273a:	461a      	mov	r2, r3
 802273c:	f240 6304 	movw	r3, #1540	@ 0x604
 8022740:	fb02 f303 	mul.w	r3, r2, r3
 8022744:	4a21      	ldr	r2, [pc, #132]	@ (80227cc <ETH_IRQHandler+0x10c>)
 8022746:	1898      	adds	r0, r3, r2
 8022748:	683b      	ldr	r3, [r7, #0]
 802274a:	2b04      	cmp	r3, #4
 802274c:	d902      	bls.n	8022754 <ETH_IRQHandler+0x94>
 802274e:	683b      	ldr	r3, [r7, #0]
 8022750:	3b04      	subs	r3, #4
 8022752:	e000      	b.n	8022756 <ETH_IRQHandler+0x96>
 8022754:	683b      	ldr	r3, [r7, #0]
 8022756:	4a1e      	ldr	r2, [pc, #120]	@ (80227d0 <ETH_IRQHandler+0x110>)
 8022758:	6812      	ldr	r2, [r2, #0]
 802275a:	4619      	mov	r1, r3
 802275c:	f7ee fefa 	bl	8011554 <mg_tcpip_qwrite>
      }
      s_rxdesc[s_rxno][0] = MG_BIT(31);
 8022760:	4b18      	ldr	r3, [pc, #96]	@ (80227c4 <ETH_IRQHandler+0x104>)
 8022762:	781b      	ldrb	r3, [r3, #0]
 8022764:	4a18      	ldr	r2, [pc, #96]	@ (80227c8 <ETH_IRQHandler+0x108>)
 8022766:	011b      	lsls	r3, r3, #4
 8022768:	4413      	add	r3, r2
 802276a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 802276e:	601a      	str	r2, [r3, #0]
      if (++s_rxno >= ETH_DESC_CNT) s_rxno = 0;
 8022770:	4b14      	ldr	r3, [pc, #80]	@ (80227c4 <ETH_IRQHandler+0x104>)
 8022772:	781b      	ldrb	r3, [r3, #0]
 8022774:	3301      	adds	r3, #1
 8022776:	b2da      	uxtb	r2, r3
 8022778:	4b12      	ldr	r3, [pc, #72]	@ (80227c4 <ETH_IRQHandler+0x104>)
 802277a:	701a      	strb	r2, [r3, #0]
 802277c:	4b11      	ldr	r3, [pc, #68]	@ (80227c4 <ETH_IRQHandler+0x104>)
 802277e:	781b      	ldrb	r3, [r3, #0]
 8022780:	2b03      	cmp	r3, #3
 8022782:	d902      	bls.n	802278a <ETH_IRQHandler+0xca>
 8022784:	4b0f      	ldr	r3, [pc, #60]	@ (80227c4 <ETH_IRQHandler+0x104>)
 8022786:	2200      	movs	r2, #0
 8022788:	701a      	strb	r2, [r3, #0]
    for (uint32_t i = 0; i < 10; i++) {   // read as they arrive but not forever
 802278a:	687b      	ldr	r3, [r7, #4]
 802278c:	3301      	adds	r3, #1
 802278e:	607b      	str	r3, [r7, #4]
 8022790:	687b      	ldr	r3, [r7, #4]
 8022792:	2b09      	cmp	r3, #9
 8022794:	d9a8      	bls.n	80226e8 <ETH_IRQHandler+0x28>
 8022796:	e000      	b.n	802279a <ETH_IRQHandler+0xda>
      if (s_rxdesc[s_rxno][0] & MG_BIT(31)) break;  // exit when done
 8022798:	bf00      	nop
    }
  }
  // Cleanup flags
  ETH->DMASR = MG_BIT(16)    // NIS, normal interrupt summary
 802279a:	4b08      	ldr	r3, [pc, #32]	@ (80227bc <ETH_IRQHandler+0xfc>)
 802279c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80227a0:	461a      	mov	r2, r3
 80227a2:	4b0c      	ldr	r3, [pc, #48]	@ (80227d4 <ETH_IRQHandler+0x114>)
 80227a4:	6153      	str	r3, [r2, #20]
               | MG_BIT(7);  // Clear possible RBUS while processing
  ETH->DMARPDR = 0;          // and resume RX
 80227a6:	4b05      	ldr	r3, [pc, #20]	@ (80227bc <ETH_IRQHandler+0xfc>)
 80227a8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80227ac:	461a      	mov	r2, r3
 80227ae:	2300      	movs	r3, #0
 80227b0:	6093      	str	r3, [r2, #8]
}
 80227b2:	bf00      	nop
 80227b4:	3708      	adds	r7, #8
 80227b6:	46bd      	mov	sp, r7
 80227b8:	bd80      	pop	{r7, pc}
 80227ba:	bf00      	nop
 80227bc:	40028000 	.word	0x40028000
 80227c0:	00010040 	.word	0x00010040
 80227c4:	20014b6d 	.word	0x20014b6d
 80227c8:	20011acc 	.word	0x20011acc
 80227cc:	20011b4c 	.word	0x20011b4c
 80227d0:	20014b70 	.word	0x20014b70
 80227d4:	00010080 	.word	0x00010080

080227d8 <scmp>:
} packed_files[] = {
  {"/web_root/index.html.gz", v1, sizeof(v1), 1761600759},
  {NULL, NULL, 0, 0}
};

static int scmp(const char *a, const char *b) {
 80227d8:	b480      	push	{r7}
 80227da:	b083      	sub	sp, #12
 80227dc:	af00      	add	r7, sp, #0
 80227de:	6078      	str	r0, [r7, #4]
 80227e0:	6039      	str	r1, [r7, #0]
  while (*a && (*a == *b)) a++, b++;
 80227e2:	e005      	b.n	80227f0 <scmp+0x18>
 80227e4:	687b      	ldr	r3, [r7, #4]
 80227e6:	3301      	adds	r3, #1
 80227e8:	607b      	str	r3, [r7, #4]
 80227ea:	683b      	ldr	r3, [r7, #0]
 80227ec:	3301      	adds	r3, #1
 80227ee:	603b      	str	r3, [r7, #0]
 80227f0:	687b      	ldr	r3, [r7, #4]
 80227f2:	781b      	ldrb	r3, [r3, #0]
 80227f4:	2b00      	cmp	r3, #0
 80227f6:	d005      	beq.n	8022804 <scmp+0x2c>
 80227f8:	687b      	ldr	r3, [r7, #4]
 80227fa:	781a      	ldrb	r2, [r3, #0]
 80227fc:	683b      	ldr	r3, [r7, #0]
 80227fe:	781b      	ldrb	r3, [r3, #0]
 8022800:	429a      	cmp	r2, r3
 8022802:	d0ef      	beq.n	80227e4 <scmp+0xc>
  return *(const unsigned char *) a - *(const unsigned char *) b;
 8022804:	687b      	ldr	r3, [r7, #4]
 8022806:	781b      	ldrb	r3, [r3, #0]
 8022808:	461a      	mov	r2, r3
 802280a:	683b      	ldr	r3, [r7, #0]
 802280c:	781b      	ldrb	r3, [r3, #0]
 802280e:	1ad3      	subs	r3, r2, r3
}
 8022810:	4618      	mov	r0, r3
 8022812:	370c      	adds	r7, #12
 8022814:	46bd      	mov	sp, r7
 8022816:	f85d 7b04 	ldr.w	r7, [sp], #4
 802281a:	4770      	bx	lr

0802281c <mg_unlist>:
const char *mg_unlist(size_t no) {
 802281c:	b480      	push	{r7}
 802281e:	b083      	sub	sp, #12
 8022820:	af00      	add	r7, sp, #0
 8022822:	6078      	str	r0, [r7, #4]
  return packed_files[no].name;
 8022824:	4906      	ldr	r1, [pc, #24]	@ (8022840 <mg_unlist+0x24>)
 8022826:	687a      	ldr	r2, [r7, #4]
 8022828:	4613      	mov	r3, r2
 802282a:	005b      	lsls	r3, r3, #1
 802282c:	4413      	add	r3, r2
 802282e:	00db      	lsls	r3, r3, #3
 8022830:	440b      	add	r3, r1
 8022832:	681b      	ldr	r3, [r3, #0]
}
 8022834:	4618      	mov	r0, r3
 8022836:	370c      	adds	r7, #12
 8022838:	46bd      	mov	sp, r7
 802283a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802283e:	4770      	bx	lr
 8022840:	080357e0 	.word	0x080357e0

08022844 <mg_unpack>:
const char *mg_unpack(const char *name, size_t *size, time_t *mtime) {
 8022844:	b580      	push	{r7, lr}
 8022846:	b086      	sub	sp, #24
 8022848:	af00      	add	r7, sp, #0
 802284a:	60f8      	str	r0, [r7, #12]
 802284c:	60b9      	str	r1, [r7, #8]
 802284e:	607a      	str	r2, [r7, #4]
  const struct packed_file *p;
  for (p = packed_files; p->name != NULL; p++) {
 8022850:	4b16      	ldr	r3, [pc, #88]	@ (80228ac <mg_unpack+0x68>)
 8022852:	617b      	str	r3, [r7, #20]
 8022854:	e020      	b.n	8022898 <mg_unpack+0x54>
    if (scmp(p->name, name) != 0) continue;
 8022856:	697b      	ldr	r3, [r7, #20]
 8022858:	681b      	ldr	r3, [r3, #0]
 802285a:	68f9      	ldr	r1, [r7, #12]
 802285c:	4618      	mov	r0, r3
 802285e:	f7ff ffbb 	bl	80227d8 <scmp>
 8022862:	4603      	mov	r3, r0
 8022864:	2b00      	cmp	r3, #0
 8022866:	d113      	bne.n	8022890 <mg_unpack+0x4c>
    if (size != NULL) *size = p->size - 1;
 8022868:	68bb      	ldr	r3, [r7, #8]
 802286a:	2b00      	cmp	r3, #0
 802286c:	d004      	beq.n	8022878 <mg_unpack+0x34>
 802286e:	697b      	ldr	r3, [r7, #20]
 8022870:	689b      	ldr	r3, [r3, #8]
 8022872:	1e5a      	subs	r2, r3, #1
 8022874:	68bb      	ldr	r3, [r7, #8]
 8022876:	601a      	str	r2, [r3, #0]
    if (mtime != NULL) *mtime = p->mtime;
 8022878:	687b      	ldr	r3, [r7, #4]
 802287a:	2b00      	cmp	r3, #0
 802287c:	d005      	beq.n	802288a <mg_unpack+0x46>
 802287e:	697b      	ldr	r3, [r7, #20]
 8022880:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8022884:	6879      	ldr	r1, [r7, #4]
 8022886:	e9c1 2300 	strd	r2, r3, [r1]
    return (const char *) p->data;
 802288a:	697b      	ldr	r3, [r7, #20]
 802288c:	685b      	ldr	r3, [r3, #4]
 802288e:	e008      	b.n	80228a2 <mg_unpack+0x5e>
    if (scmp(p->name, name) != 0) continue;
 8022890:	bf00      	nop
  for (p = packed_files; p->name != NULL; p++) {
 8022892:	697b      	ldr	r3, [r7, #20]
 8022894:	3318      	adds	r3, #24
 8022896:	617b      	str	r3, [r7, #20]
 8022898:	697b      	ldr	r3, [r7, #20]
 802289a:	681b      	ldr	r3, [r3, #0]
 802289c:	2b00      	cmp	r3, #0
 802289e:	d1da      	bne.n	8022856 <mg_unpack+0x12>
  }
  return NULL;
 80228a0:	2300      	movs	r3, #0
}
 80228a2:	4618      	mov	r0, r3
 80228a4:	3718      	adds	r7, #24
 80228a6:	46bd      	mov	sp, r7
 80228a8:	bd80      	pop	{r7, pc}
 80228aa:	bf00      	nop
 80228ac:	080357e0 	.word	0x080357e0

080228b0 <glue_get_leds>:

// Default mock implementation of the API callbacks

#include "mongoose_glue.h"
static struct leds s_leds = {"RELEASED", false};
void glue_get_leds(struct leds *data) {
 80228b0:	b4b0      	push	{r4, r5, r7}
 80228b2:	b083      	sub	sp, #12
 80228b4:	af00      	add	r7, sp, #0
 80228b6:	6078      	str	r0, [r7, #4]
  *data = s_leds;  // Sync with your device
 80228b8:	687b      	ldr	r3, [r7, #4]
 80228ba:	4a06      	ldr	r2, [pc, #24]	@ (80228d4 <glue_get_leds+0x24>)
 80228bc:	461c      	mov	r4, r3
 80228be:	4615      	mov	r5, r2
 80228c0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80228c2:	6020      	str	r0, [r4, #0]
 80228c4:	6061      	str	r1, [r4, #4]
 80228c6:	60a2      	str	r2, [r4, #8]
 80228c8:	60e3      	str	r3, [r4, #12]
}
 80228ca:	bf00      	nop
 80228cc:	370c      	adds	r7, #12
 80228ce:	46bd      	mov	sp, r7
 80228d0:	bcb0      	pop	{r4, r5, r7}
 80228d2:	4770      	bx	lr
 80228d4:	20000298 	.word	0x20000298

080228d8 <glue_set_leds>:
void glue_set_leds(struct leds *data) {
 80228d8:	b490      	push	{r4, r7}
 80228da:	b082      	sub	sp, #8
 80228dc:	af00      	add	r7, sp, #0
 80228de:	6078      	str	r0, [r7, #4]
  s_leds = *data; // Sync with your device
 80228e0:	4a06      	ldr	r2, [pc, #24]	@ (80228fc <glue_set_leds+0x24>)
 80228e2:	687b      	ldr	r3, [r7, #4]
 80228e4:	4614      	mov	r4, r2
 80228e6:	6818      	ldr	r0, [r3, #0]
 80228e8:	6859      	ldr	r1, [r3, #4]
 80228ea:	689a      	ldr	r2, [r3, #8]
 80228ec:	68db      	ldr	r3, [r3, #12]
 80228ee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
}
 80228f0:	bf00      	nop
 80228f2:	3708      	adds	r7, #8
 80228f4:	46bd      	mov	sp, r7
 80228f6:	bc90      	pop	{r4, r7}
 80228f8:	4770      	bx	lr
 80228fa:	bf00      	nop
 80228fc:	20000298 	.word	0x20000298

08022900 <get_api_handler>:

static struct apihandler *s_apihandlers[] = {
  (struct apihandler *) &s_apihandler_leds
};

static struct apihandler *get_api_handler(struct mg_str name) {
 8022900:	b580      	push	{r7, lr}
 8022902:	b086      	sub	sp, #24
 8022904:	af00      	add	r7, sp, #0
 8022906:	463b      	mov	r3, r7
 8022908:	e883 0003 	stmia.w	r3, {r0, r1}
  size_t num_handlers = sizeof(s_apihandlers) / sizeof(s_apihandlers[0]);
 802290c:	2301      	movs	r3, #1
 802290e:	613b      	str	r3, [r7, #16]
  size_t i;
  if (name.len == 0) return NULL;
 8022910:	687b      	ldr	r3, [r7, #4]
 8022912:	2b00      	cmp	r3, #0
 8022914:	d101      	bne.n	802291a <get_api_handler+0x1a>
 8022916:	2300      	movs	r3, #0
 8022918:	e039      	b.n	802298e <get_api_handler+0x8e>
  if (num_handlers == 0) return NULL;
 802291a:	693b      	ldr	r3, [r7, #16]
 802291c:	2b00      	cmp	r3, #0
 802291e:	d101      	bne.n	8022924 <get_api_handler+0x24>
 8022920:	2300      	movs	r3, #0
 8022922:	e034      	b.n	802298e <get_api_handler+0x8e>
  for (i = 0; i < num_handlers; i++) {
 8022924:	2300      	movs	r3, #0
 8022926:	617b      	str	r3, [r7, #20]
 8022928:	e02c      	b.n	8022984 <get_api_handler+0x84>
    struct apihandler *h = s_apihandlers[i];
 802292a:	4a1b      	ldr	r2, [pc, #108]	@ (8022998 <get_api_handler+0x98>)
 802292c:	697b      	ldr	r3, [r7, #20]
 802292e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8022932:	60fb      	str	r3, [r7, #12]
    size_t n = strlen(h->name);
 8022934:	68fb      	ldr	r3, [r7, #12]
 8022936:	681b      	ldr	r3, [r3, #0]
 8022938:	4618      	mov	r0, r3
 802293a:	f7dd fce1 	bl	8000300 <strlen>
 802293e:	60b8      	str	r0, [r7, #8]
    if (n > name.len) continue;
 8022940:	687b      	ldr	r3, [r7, #4]
 8022942:	68ba      	ldr	r2, [r7, #8]
 8022944:	429a      	cmp	r2, r3
 8022946:	d815      	bhi.n	8022974 <get_api_handler+0x74>
    if (strncmp(name.buf, h->name, n) != 0) continue;
 8022948:	6838      	ldr	r0, [r7, #0]
 802294a:	68fb      	ldr	r3, [r7, #12]
 802294c:	681b      	ldr	r3, [r3, #0]
 802294e:	68ba      	ldr	r2, [r7, #8]
 8022950:	4619      	mov	r1, r3
 8022952:	f001 fdb0 	bl	80244b6 <strncmp>
 8022956:	4603      	mov	r3, r0
 8022958:	2b00      	cmp	r3, #0
 802295a:	d10d      	bne.n	8022978 <get_api_handler+0x78>
    if (name.len > n && name.buf[n] != '/') continue;
 802295c:	687b      	ldr	r3, [r7, #4]
 802295e:	68ba      	ldr	r2, [r7, #8]
 8022960:	429a      	cmp	r2, r3
 8022962:	d205      	bcs.n	8022970 <get_api_handler+0x70>
 8022964:	683a      	ldr	r2, [r7, #0]
 8022966:	68bb      	ldr	r3, [r7, #8]
 8022968:	4413      	add	r3, r2
 802296a:	781b      	ldrb	r3, [r3, #0]
 802296c:	2b2f      	cmp	r3, #47	@ 0x2f
 802296e:	d105      	bne.n	802297c <get_api_handler+0x7c>
    return h;
 8022970:	68fb      	ldr	r3, [r7, #12]
 8022972:	e00c      	b.n	802298e <get_api_handler+0x8e>
    if (n > name.len) continue;
 8022974:	bf00      	nop
 8022976:	e002      	b.n	802297e <get_api_handler+0x7e>
    if (strncmp(name.buf, h->name, n) != 0) continue;
 8022978:	bf00      	nop
 802297a:	e000      	b.n	802297e <get_api_handler+0x7e>
    if (name.len > n && name.buf[n] != '/') continue;
 802297c:	bf00      	nop
  for (i = 0; i < num_handlers; i++) {
 802297e:	697b      	ldr	r3, [r7, #20]
 8022980:	3301      	adds	r3, #1
 8022982:	617b      	str	r3, [r7, #20]
 8022984:	697a      	ldr	r2, [r7, #20]
 8022986:	693b      	ldr	r3, [r7, #16]
 8022988:	429a      	cmp	r2, r3
 802298a:	d3ce      	bcc.n	802292a <get_api_handler+0x2a>
  }
  return NULL;
 802298c:	2300      	movs	r3, #0
}
 802298e:	4618      	mov	r0, r3
 8022990:	3718      	adds	r7, #24
 8022992:	46bd      	mov	sp, r7
 8022994:	bd80      	pop	{r7, pc}
 8022996:	bf00      	nop
 8022998:	20000318 	.word	0x20000318

0802299c <find_handler>:

static struct apihandler *find_handler(struct mg_http_message *hm) {
 802299c:	b580      	push	{r7, lr}
 802299e:	b084      	sub	sp, #16
 80229a0:	af00      	add	r7, sp, #0
 80229a2:	6078      	str	r0, [r7, #4]
  if (hm->uri.len < 6 || strncmp(hm->uri.buf, "/api/", 5) != 0) return NULL;
 80229a4:	687b      	ldr	r3, [r7, #4]
 80229a6:	68db      	ldr	r3, [r3, #12]
 80229a8:	2b05      	cmp	r3, #5
 80229aa:	d909      	bls.n	80229c0 <find_handler+0x24>
 80229ac:	687b      	ldr	r3, [r7, #4]
 80229ae:	689b      	ldr	r3, [r3, #8]
 80229b0:	2205      	movs	r2, #5
 80229b2:	490f      	ldr	r1, [pc, #60]	@ (80229f0 <find_handler+0x54>)
 80229b4:	4618      	mov	r0, r3
 80229b6:	f001 fd7e 	bl	80244b6 <strncmp>
 80229ba:	4603      	mov	r3, r0
 80229bc:	2b00      	cmp	r3, #0
 80229be:	d001      	beq.n	80229c4 <find_handler+0x28>
 80229c0:	2300      	movs	r3, #0
 80229c2:	e011      	b.n	80229e8 <find_handler+0x4c>
  return get_api_handler(mg_str_n(hm->uri.buf + 5, hm->uri.len - 5));
 80229c4:	687b      	ldr	r3, [r7, #4]
 80229c6:	689b      	ldr	r3, [r3, #8]
 80229c8:	1d59      	adds	r1, r3, #5
 80229ca:	687b      	ldr	r3, [r7, #4]
 80229cc:	68db      	ldr	r3, [r3, #12]
 80229ce:	1f5a      	subs	r2, r3, #5
 80229d0:	f107 0308 	add.w	r3, r7, #8
 80229d4:	4618      	mov	r0, r3
 80229d6:	f7f2 fff8 	bl	80159ca <mg_str_n>
 80229da:	f107 0308 	add.w	r3, r7, #8
 80229de:	e893 0003 	ldmia.w	r3, {r0, r1}
 80229e2:	f7ff ff8d 	bl	8022900 <get_api_handler>
 80229e6:	4603      	mov	r3, r0
}
 80229e8:	4618      	mov	r0, r3
 80229ea:	3710      	adds	r7, #16
 80229ec:	46bd      	mov	sp, r7
 80229ee:	bd80      	pop	{r7, pc}
 80229f0:	08027d28 	.word	0x08027d28

080229f4 <mg_json_get_str2>:

void mg_json_get_str2(struct mg_str json, const char *path, char *buf,
                      size_t len) {
 80229f4:	b590      	push	{r4, r7, lr}
 80229f6:	b089      	sub	sp, #36	@ 0x24
 80229f8:	af00      	add	r7, sp, #0
 80229fa:	f107 0408 	add.w	r4, r7, #8
 80229fe:	e884 0003 	stmia.w	r4, {r0, r1}
 8022a02:	607a      	str	r2, [r7, #4]
 8022a04:	603b      	str	r3, [r7, #0]
  struct mg_str s = mg_json_get_tok(json, path);
 8022a06:	f107 0010 	add.w	r0, r7, #16
 8022a0a:	687b      	ldr	r3, [r7, #4]
 8022a0c:	f107 0208 	add.w	r2, r7, #8
 8022a10:	ca06      	ldmia	r2, {r1, r2}
 8022a12:	f7ea fa67 	bl	800cee4 <mg_json_get_tok>
  if (s.len > 1 && s.buf[0] == '"') {
 8022a16:	697b      	ldr	r3, [r7, #20]
 8022a18:	2b01      	cmp	r3, #1
 8022a1a:	d913      	bls.n	8022a44 <mg_json_get_str2+0x50>
 8022a1c:	693b      	ldr	r3, [r7, #16]
 8022a1e:	781b      	ldrb	r3, [r3, #0]
 8022a20:	2b22      	cmp	r3, #34	@ 0x22
 8022a22:	d10f      	bne.n	8022a44 <mg_json_get_str2+0x50>
    mg_json_unescape(mg_str_n(s.buf + 1, s.len - 2), buf, len);
 8022a24:	693b      	ldr	r3, [r7, #16]
 8022a26:	1c59      	adds	r1, r3, #1
 8022a28:	697b      	ldr	r3, [r7, #20]
 8022a2a:	1e9a      	subs	r2, r3, #2
 8022a2c:	f107 0318 	add.w	r3, r7, #24
 8022a30:	4618      	mov	r0, r3
 8022a32:	f7f2 ffca 	bl	80159ca <mg_str_n>
 8022a36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8022a38:	683a      	ldr	r2, [r7, #0]
 8022a3a:	f107 0118 	add.w	r1, r7, #24
 8022a3e:	c903      	ldmia	r1, {r0, r1}
 8022a40:	f7ea faf6 	bl	800d030 <mg_json_unescape>
  }
}
 8022a44:	bf00      	nop
 8022a46:	3724      	adds	r7, #36	@ 0x24
 8022a48:	46bd      	mov	sp, r7
 8022a4a:	bd90      	pop	{r4, r7, pc}

08022a4c <mongoose_set_http_handlers>:

void mongoose_set_http_handlers(const char *name, ...) {
 8022a4c:	b40f      	push	{r0, r1, r2, r3}
 8022a4e:	b580      	push	{r7, lr}
 8022a50:	b084      	sub	sp, #16
 8022a52:	af00      	add	r7, sp, #0
  struct apihandler *h = get_api_handler(mg_str(name));
 8022a54:	1d3b      	adds	r3, r7, #4
 8022a56:	69b9      	ldr	r1, [r7, #24]
 8022a58:	4618      	mov	r0, r3
 8022a5a:	f7f2 ff99 	bl	8015990 <mg_str_s>
 8022a5e:	1d3b      	adds	r3, r7, #4
 8022a60:	e893 0003 	ldmia.w	r3, {r0, r1}
 8022a64:	f7ff ff4c 	bl	8022900 <get_api_handler>
 8022a68:	60f8      	str	r0, [r7, #12]
  va_list ap;
  va_start(ap, name);
 8022a6a:	f107 031c 	add.w	r3, r7, #28
 8022a6e:	603b      	str	r3, [r7, #0]
  if (h == NULL) {
 8022a70:	68fb      	ldr	r3, [r7, #12]
 8022a72:	2b00      	cmp	r3, #0
 8022a74:	d10f      	bne.n	8022a96 <mongoose_set_http_handlers+0x4a>
    MG_ERROR(("No API with name [%s]", name));
 8022a76:	4b4e      	ldr	r3, [pc, #312]	@ (8022bb0 <mongoose_set_http_handlers+0x164>)
 8022a78:	681b      	ldr	r3, [r3, #0]
 8022a7a:	2b00      	cmp	r3, #0
 8022a7c:	f340 8090 	ble.w	8022ba0 <mongoose_set_http_handlers+0x154>
 8022a80:	4b4c      	ldr	r3, [pc, #304]	@ (8022bb4 <mongoose_set_http_handlers+0x168>)
 8022a82:	22b0      	movs	r2, #176	@ 0xb0
 8022a84:	494c      	ldr	r1, [pc, #304]	@ (8022bb8 <mongoose_set_http_handlers+0x16c>)
 8022a86:	2001      	movs	r0, #1
 8022a88:	f7ea fb90 	bl	800d1ac <mg_log_prefix>
 8022a8c:	69b9      	ldr	r1, [r7, #24]
 8022a8e:	484b      	ldr	r0, [pc, #300]	@ (8022bbc <mongoose_set_http_handlers+0x170>)
 8022a90:	f7ea fbdc 	bl	800d24c <mg_log>
        va_arg(ap, mongoose_custom_reply_t);
  } else {
    MG_ERROR(("Setting [%s] failed: not implemented", name));
  }
  va_end(ap);
}
 8022a94:	e084      	b.n	8022ba0 <mongoose_set_http_handlers+0x154>
  } else if (strcmp(h->type, "data") == 0) {
 8022a96:	68fb      	ldr	r3, [r7, #12]
 8022a98:	685b      	ldr	r3, [r3, #4]
 8022a9a:	4949      	ldr	r1, [pc, #292]	@ (8022bc0 <mongoose_set_http_handlers+0x174>)
 8022a9c:	4618      	mov	r0, r3
 8022a9e:	f7dd fbcf 	bl	8000240 <strcmp>
 8022aa2:	4603      	mov	r3, r0
 8022aa4:	2b00      	cmp	r3, #0
 8022aa6:	d10c      	bne.n	8022ac2 <mongoose_set_http_handlers+0x76>
    ((struct apihandler_data *) h)->getter = va_arg(ap, mongoose_data_func_t);
 8022aa8:	683b      	ldr	r3, [r7, #0]
 8022aaa:	1d1a      	adds	r2, r3, #4
 8022aac:	603a      	str	r2, [r7, #0]
 8022aae:	681a      	ldr	r2, [r3, #0]
 8022ab0:	68fb      	ldr	r3, [r7, #12]
 8022ab2:	621a      	str	r2, [r3, #32]
    ((struct apihandler_data *) h)->setter = va_arg(ap, mongoose_data_func_t);
 8022ab4:	683b      	ldr	r3, [r7, #0]
 8022ab6:	1d1a      	adds	r2, r3, #4
 8022ab8:	603a      	str	r2, [r7, #0]
 8022aba:	681a      	ldr	r2, [r3, #0]
 8022abc:	68fb      	ldr	r3, [r7, #12]
 8022abe:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8022ac0:	e06e      	b.n	8022ba0 <mongoose_set_http_handlers+0x154>
  } else if (strcmp(h->type, "action") == 0) {
 8022ac2:	68fb      	ldr	r3, [r7, #12]
 8022ac4:	685b      	ldr	r3, [r3, #4]
 8022ac6:	493f      	ldr	r1, [pc, #252]	@ (8022bc4 <mongoose_set_http_handlers+0x178>)
 8022ac8:	4618      	mov	r0, r3
 8022aca:	f7dd fbb9 	bl	8000240 <strcmp>
 8022ace:	4603      	mov	r3, r0
 8022ad0:	2b00      	cmp	r3, #0
 8022ad2:	d10c      	bne.n	8022aee <mongoose_set_http_handlers+0xa2>
        va_arg(ap, mongoose_action_checker_t);
 8022ad4:	683b      	ldr	r3, [r7, #0]
 8022ad6:	1d1a      	adds	r2, r3, #4
 8022ad8:	603a      	str	r2, [r7, #0]
 8022ada:	681a      	ldr	r2, [r3, #0]
    ((struct apihandler_action *) h)->checker =
 8022adc:	68fb      	ldr	r3, [r7, #12]
 8022ade:	619a      	str	r2, [r3, #24]
        va_arg(ap, mongoose_action_starter_t);
 8022ae0:	683b      	ldr	r3, [r7, #0]
 8022ae2:	1d1a      	adds	r2, r3, #4
 8022ae4:	603a      	str	r2, [r7, #0]
 8022ae6:	681a      	ldr	r2, [r3, #0]
    ((struct apihandler_action *) h)->starter =
 8022ae8:	68fb      	ldr	r3, [r7, #12]
 8022aea:	61da      	str	r2, [r3, #28]
}
 8022aec:	e058      	b.n	8022ba0 <mongoose_set_http_handlers+0x154>
  } else if (strcmp(h->type, "file") == 0) {
 8022aee:	68fb      	ldr	r3, [r7, #12]
 8022af0:	685b      	ldr	r3, [r3, #4]
 8022af2:	4935      	ldr	r1, [pc, #212]	@ (8022bc8 <mongoose_set_http_handlers+0x17c>)
 8022af4:	4618      	mov	r0, r3
 8022af6:	f7dd fba3 	bl	8000240 <strcmp>
 8022afa:	4603      	mov	r3, r0
 8022afc:	2b00      	cmp	r3, #0
 8022afe:	d10c      	bne.n	8022b1a <mongoose_set_http_handlers+0xce>
    ((struct apihandler_file *) h)->opener = va_arg(ap, mongoose_file_opener_t);
 8022b00:	683b      	ldr	r3, [r7, #0]
 8022b02:	1d1a      	adds	r2, r3, #4
 8022b04:	603a      	str	r2, [r7, #0]
 8022b06:	681a      	ldr	r2, [r3, #0]
 8022b08:	68fb      	ldr	r3, [r7, #12]
 8022b0a:	619a      	str	r2, [r3, #24]
    ((struct apihandler_file *) h)->server = va_arg(ap, mongoose_file_server_t);
 8022b0c:	683b      	ldr	r3, [r7, #0]
 8022b0e:	1d1a      	adds	r2, r3, #4
 8022b10:	603a      	str	r2, [r7, #0]
 8022b12:	681a      	ldr	r2, [r3, #0]
 8022b14:	68fb      	ldr	r3, [r7, #12]
 8022b16:	61da      	str	r2, [r3, #28]
}
 8022b18:	e042      	b.n	8022ba0 <mongoose_set_http_handlers+0x154>
  } else if (strcmp(h->type, "ota") == 0 || strcmp(h->type, "upload") == 0) {
 8022b1a:	68fb      	ldr	r3, [r7, #12]
 8022b1c:	685b      	ldr	r3, [r3, #4]
 8022b1e:	492b      	ldr	r1, [pc, #172]	@ (8022bcc <mongoose_set_http_handlers+0x180>)
 8022b20:	4618      	mov	r0, r3
 8022b22:	f7dd fb8d 	bl	8000240 <strcmp>
 8022b26:	4603      	mov	r3, r0
 8022b28:	2b00      	cmp	r3, #0
 8022b2a:	d008      	beq.n	8022b3e <mongoose_set_http_handlers+0xf2>
 8022b2c:	68fb      	ldr	r3, [r7, #12]
 8022b2e:	685b      	ldr	r3, [r3, #4]
 8022b30:	4927      	ldr	r1, [pc, #156]	@ (8022bd0 <mongoose_set_http_handlers+0x184>)
 8022b32:	4618      	mov	r0, r3
 8022b34:	f7dd fb84 	bl	8000240 <strcmp>
 8022b38:	4603      	mov	r3, r0
 8022b3a:	2b00      	cmp	r3, #0
 8022b3c:	d112      	bne.n	8022b64 <mongoose_set_http_handlers+0x118>
    ((struct apihandler_ota *) h)->opener = va_arg(ap, mongoose_ota_opener_t);
 8022b3e:	683b      	ldr	r3, [r7, #0]
 8022b40:	1d1a      	adds	r2, r3, #4
 8022b42:	603a      	str	r2, [r7, #0]
 8022b44:	681a      	ldr	r2, [r3, #0]
 8022b46:	68fb      	ldr	r3, [r7, #12]
 8022b48:	619a      	str	r2, [r3, #24]
    ((struct apihandler_ota *) h)->closer = va_arg(ap, mongoose_ota_closer_t);
 8022b4a:	683b      	ldr	r3, [r7, #0]
 8022b4c:	1d1a      	adds	r2, r3, #4
 8022b4e:	603a      	str	r2, [r7, #0]
 8022b50:	681a      	ldr	r2, [r3, #0]
 8022b52:	68fb      	ldr	r3, [r7, #12]
 8022b54:	61da      	str	r2, [r3, #28]
    ((struct apihandler_ota *) h)->writer = va_arg(ap, mongoose_ota_writer_t);
 8022b56:	683b      	ldr	r3, [r7, #0]
 8022b58:	1d1a      	adds	r2, r3, #4
 8022b5a:	603a      	str	r2, [r7, #0]
 8022b5c:	681a      	ldr	r2, [r3, #0]
 8022b5e:	68fb      	ldr	r3, [r7, #12]
 8022b60:	621a      	str	r2, [r3, #32]
}
 8022b62:	e01d      	b.n	8022ba0 <mongoose_set_http_handlers+0x154>
  } else if (strcmp(h->type, "custom") == 0) {
 8022b64:	68fb      	ldr	r3, [r7, #12]
 8022b66:	685b      	ldr	r3, [r3, #4]
 8022b68:	491a      	ldr	r1, [pc, #104]	@ (8022bd4 <mongoose_set_http_handlers+0x188>)
 8022b6a:	4618      	mov	r0, r3
 8022b6c:	f7dd fb68 	bl	8000240 <strcmp>
 8022b70:	4603      	mov	r3, r0
 8022b72:	2b00      	cmp	r3, #0
 8022b74:	d106      	bne.n	8022b84 <mongoose_set_http_handlers+0x138>
        va_arg(ap, mongoose_custom_reply_t);
 8022b76:	683b      	ldr	r3, [r7, #0]
 8022b78:	1d1a      	adds	r2, r3, #4
 8022b7a:	603a      	str	r2, [r7, #0]
 8022b7c:	681a      	ldr	r2, [r3, #0]
    ((struct apihandler_custom *) h)->reply =
 8022b7e:	68fb      	ldr	r3, [r7, #12]
 8022b80:	619a      	str	r2, [r3, #24]
}
 8022b82:	e00d      	b.n	8022ba0 <mongoose_set_http_handlers+0x154>
    MG_ERROR(("Setting [%s] failed: not implemented", name));
 8022b84:	4b0a      	ldr	r3, [pc, #40]	@ (8022bb0 <mongoose_set_http_handlers+0x164>)
 8022b86:	681b      	ldr	r3, [r3, #0]
 8022b88:	2b00      	cmp	r3, #0
 8022b8a:	dd09      	ble.n	8022ba0 <mongoose_set_http_handlers+0x154>
 8022b8c:	4b09      	ldr	r3, [pc, #36]	@ (8022bb4 <mongoose_set_http_handlers+0x168>)
 8022b8e:	22c4      	movs	r2, #196	@ 0xc4
 8022b90:	4909      	ldr	r1, [pc, #36]	@ (8022bb8 <mongoose_set_http_handlers+0x16c>)
 8022b92:	2001      	movs	r0, #1
 8022b94:	f7ea fb0a 	bl	800d1ac <mg_log_prefix>
 8022b98:	69b9      	ldr	r1, [r7, #24]
 8022b9a:	480f      	ldr	r0, [pc, #60]	@ (8022bd8 <mongoose_set_http_handlers+0x18c>)
 8022b9c:	f7ea fb56 	bl	800d24c <mg_log>
}
 8022ba0:	bf00      	nop
 8022ba2:	3710      	adds	r7, #16
 8022ba4:	46bd      	mov	sp, r7
 8022ba6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8022baa:	b004      	add	sp, #16
 8022bac:	4770      	bx	lr
 8022bae:	bf00      	nop
 8022bb0:	20000258 	.word	0x20000258
 8022bb4:	08035810 	.word	0x08035810
 8022bb8:	08027d30 	.word	0x08027d30
 8022bbc:	08027d4c 	.word	0x08027d4c
 8022bc0:	08027d20 	.word	0x08027d20
 8022bc4:	08027d64 	.word	0x08027d64
 8022bc8:	08027d6c 	.word	0x08027d6c
 8022bcc:	08027d74 	.word	0x08027d74
 8022bd0:	08027d78 	.word	0x08027d78
 8022bd4:	08027d80 	.word	0x08027d80
 8022bd8:	08027d88 	.word	0x08027d88

08022bdc <close_uploaded_file>:
struct action_state {
  char marker;       // Tells that we're an action connection
  bool (*fn)(void);  // Action status function
};

static void close_uploaded_file(struct upload_state *us) {
 8022bdc:	b580      	push	{r7, lr}
 8022bde:	b082      	sub	sp, #8
 8022be0:	af00      	add	r7, sp, #0
 8022be2:	6078      	str	r0, [r7, #4]
  us->marker = 0;
 8022be4:	687b      	ldr	r3, [r7, #4]
 8022be6:	2200      	movs	r2, #0
 8022be8:	701a      	strb	r2, [r3, #0]
  if (us->fn_close != NULL && us->fp != NULL) {
 8022bea:	687b      	ldr	r3, [r7, #4]
 8022bec:	691b      	ldr	r3, [r3, #16]
 8022bee:	2b00      	cmp	r3, #0
 8022bf0:	d00c      	beq.n	8022c0c <close_uploaded_file+0x30>
 8022bf2:	687b      	ldr	r3, [r7, #4]
 8022bf4:	68db      	ldr	r3, [r3, #12]
 8022bf6:	2b00      	cmp	r3, #0
 8022bf8:	d008      	beq.n	8022c0c <close_uploaded_file+0x30>
    us->fn_close(us->fp);
 8022bfa:	687b      	ldr	r3, [r7, #4]
 8022bfc:	691b      	ldr	r3, [r3, #16]
 8022bfe:	687a      	ldr	r2, [r7, #4]
 8022c00:	68d2      	ldr	r2, [r2, #12]
 8022c02:	4610      	mov	r0, r2
 8022c04:	4798      	blx	r3
    us->fp = NULL;
 8022c06:	687b      	ldr	r3, [r7, #4]
 8022c08:	2200      	movs	r2, #0
 8022c0a:	60da      	str	r2, [r3, #12]
  }
  memset(us, 0, sizeof(*us));
 8022c0c:	2218      	movs	r2, #24
 8022c0e:	2100      	movs	r1, #0
 8022c10:	6878      	ldr	r0, [r7, #4]
 8022c12:	f001 fc3b 	bl	802448c <memset>
}
 8022c16:	bf00      	nop
 8022c18:	3708      	adds	r7, #8
 8022c1a:	46bd      	mov	sp, r7
 8022c1c:	bd80      	pop	{r7, pc}
	...

08022c20 <file_closer>:

static bool file_closer(void *p) {
 8022c20:	b580      	push	{r7, lr}
 8022c22:	b082      	sub	sp, #8
 8022c24:	af00      	add	r7, sp, #0
 8022c26:	6078      	str	r0, [r7, #4]
  mg_fs_close((struct mg_fd *) p);
 8022c28:	6878      	ldr	r0, [r7, #4]
 8022c2a:	f7e6 f9c0 	bl	8008fae <mg_fs_close>
  MG_INFO(("AAAAAAAAA %p", p));
 8022c2e:	4b0a      	ldr	r3, [pc, #40]	@ (8022c58 <file_closer+0x38>)
 8022c30:	681b      	ldr	r3, [r3, #0]
 8022c32:	2b01      	cmp	r3, #1
 8022c34:	dd0a      	ble.n	8022c4c <file_closer+0x2c>
 8022c36:	4b09      	ldr	r3, [pc, #36]	@ (8022c5c <file_closer+0x3c>)
 8022c38:	f44f 7294 	mov.w	r2, #296	@ 0x128
 8022c3c:	4908      	ldr	r1, [pc, #32]	@ (8022c60 <file_closer+0x40>)
 8022c3e:	2002      	movs	r0, #2
 8022c40:	f7ea fab4 	bl	800d1ac <mg_log_prefix>
 8022c44:	6879      	ldr	r1, [r7, #4]
 8022c46:	4807      	ldr	r0, [pc, #28]	@ (8022c64 <file_closer+0x44>)
 8022c48:	f7ea fb00 	bl	800d24c <mg_log>
  return true;
 8022c4c:	2301      	movs	r3, #1
}
 8022c4e:	4618      	mov	r0, r3
 8022c50:	3708      	adds	r7, #8
 8022c52:	46bd      	mov	sp, r7
 8022c54:	bd80      	pop	{r7, pc}
 8022c56:	bf00      	nop
 8022c58:	20000258 	.word	0x20000258
 8022c5c:	0803582c 	.word	0x0803582c
 8022c60:	08027d30 	.word	0x08027d30
 8022c64:	08027db0 	.word	0x08027db0

08022c68 <file_writer>:

static bool file_writer(void *p, void *buf, size_t len) {
 8022c68:	b580      	push	{r7, lr}
 8022c6a:	b086      	sub	sp, #24
 8022c6c:	af00      	add	r7, sp, #0
 8022c6e:	60f8      	str	r0, [r7, #12]
 8022c70:	60b9      	str	r1, [r7, #8]
 8022c72:	607a      	str	r2, [r7, #4]
  struct mg_fd *fd = (struct mg_fd *) p;
 8022c74:	68fb      	ldr	r3, [r7, #12]
 8022c76:	617b      	str	r3, [r7, #20]
  size_t written = fd->fs->wr(fd->fd, buf, len);
 8022c78:	697b      	ldr	r3, [r7, #20]
 8022c7a:	685b      	ldr	r3, [r3, #4]
 8022c7c:	695b      	ldr	r3, [r3, #20]
 8022c7e:	697a      	ldr	r2, [r7, #20]
 8022c80:	6810      	ldr	r0, [r2, #0]
 8022c82:	687a      	ldr	r2, [r7, #4]
 8022c84:	68b9      	ldr	r1, [r7, #8]
 8022c86:	4798      	blx	r3
 8022c88:	6138      	str	r0, [r7, #16]
  MG_INFO(("AAAAAAAAA %lu", written));
 8022c8a:	4b0d      	ldr	r3, [pc, #52]	@ (8022cc0 <file_writer+0x58>)
 8022c8c:	681b      	ldr	r3, [r3, #0]
 8022c8e:	2b01      	cmp	r3, #1
 8022c90:	dd0a      	ble.n	8022ca8 <file_writer+0x40>
 8022c92:	4b0c      	ldr	r3, [pc, #48]	@ (8022cc4 <file_writer+0x5c>)
 8022c94:	f240 122f 	movw	r2, #303	@ 0x12f
 8022c98:	490b      	ldr	r1, [pc, #44]	@ (8022cc8 <file_writer+0x60>)
 8022c9a:	2002      	movs	r0, #2
 8022c9c:	f7ea fa86 	bl	800d1ac <mg_log_prefix>
 8022ca0:	6939      	ldr	r1, [r7, #16]
 8022ca2:	480a      	ldr	r0, [pc, #40]	@ (8022ccc <file_writer+0x64>)
 8022ca4:	f7ea fad2 	bl	800d24c <mg_log>
  return written == len;
 8022ca8:	693a      	ldr	r2, [r7, #16]
 8022caa:	687b      	ldr	r3, [r7, #4]
 8022cac:	429a      	cmp	r2, r3
 8022cae:	bf0c      	ite	eq
 8022cb0:	2301      	moveq	r3, #1
 8022cb2:	2300      	movne	r3, #0
 8022cb4:	b2db      	uxtb	r3, r3
}
 8022cb6:	4618      	mov	r0, r3
 8022cb8:	3718      	adds	r7, #24
 8022cba:	46bd      	mov	sp, r7
 8022cbc:	bd80      	pop	{r7, pc}
 8022cbe:	bf00      	nop
 8022cc0:	20000258 	.word	0x20000258
 8022cc4:	08035838 	.word	0x08035838
 8022cc8:	08027d30 	.word	0x08027d30
 8022ccc:	08027dc0 	.word	0x08027dc0

08022cd0 <upload_handler>:

static void upload_handler(struct mg_connection *c, int ev, void *ev_data) {
 8022cd0:	b590      	push	{r4, r7, lr}
 8022cd2:	b08d      	sub	sp, #52	@ 0x34
 8022cd4:	af04      	add	r7, sp, #16
 8022cd6:	60f8      	str	r0, [r7, #12]
 8022cd8:	60b9      	str	r1, [r7, #8]
 8022cda:	607a      	str	r2, [r7, #4]
  struct upload_state *us = (struct upload_state *) c->data;
 8022cdc:	68fb      	ldr	r3, [r7, #12]
 8022cde:	3390      	adds	r3, #144	@ 0x90
 8022ce0:	61fb      	str	r3, [r7, #28]
        c, "FAILURE: sizeof(c->data) == %lu, need %lu. Set -DMG_DATA_SIZE=XXX",
        sizeof(c->data), sizeof(*us));
    return;
  }
  // Catch uploaded file data for both MG_EV_READ and MG_EV_HTTP_HDRS
  if (us->marker == 'U' && ev == MG_EV_READ && us->expected > 0 &&
 8022ce2:	69fb      	ldr	r3, [r7, #28]
 8022ce4:	781b      	ldrb	r3, [r3, #0]
 8022ce6:	2b55      	cmp	r3, #85	@ 0x55
 8022ce8:	f040 80ae 	bne.w	8022e48 <upload_handler+0x178>
 8022cec:	68bb      	ldr	r3, [r7, #8]
 8022cee:	2b07      	cmp	r3, #7
 8022cf0:	f040 80aa 	bne.w	8022e48 <upload_handler+0x178>
 8022cf4:	69fb      	ldr	r3, [r7, #28]
 8022cf6:	685b      	ldr	r3, [r3, #4]
 8022cf8:	2b00      	cmp	r3, #0
 8022cfa:	f000 80a5 	beq.w	8022e48 <upload_handler+0x178>
      c->recv.len > 0) {
 8022cfe:	68fb      	ldr	r3, [r7, #12]
 8022d00:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
  if (us->marker == 'U' && ev == MG_EV_READ && us->expected > 0 &&
 8022d02:	2b00      	cmp	r3, #0
 8022d04:	f000 80a0 	beq.w	8022e48 <upload_handler+0x178>
    size_t alignment = 512;  // Maximum flash write granularity (iMXRT, Pico)
 8022d08:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8022d0c:	61bb      	str	r3, [r7, #24]
    size_t aligned = (us->received + c->recv.len < us->expected)
 8022d0e:	69fb      	ldr	r3, [r7, #28]
 8022d10:	689a      	ldr	r2, [r3, #8]
 8022d12:	68fb      	ldr	r3, [r7, #12]
 8022d14:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8022d16:	441a      	add	r2, r3
 8022d18:	69fb      	ldr	r3, [r7, #28]
 8022d1a:	685b      	ldr	r3, [r3, #4]
                         ? aligned = MG_ROUND_DOWN(c->recv.len, alignment)
                         : c->recv.len;  // Last write can be unaligned
 8022d1c:	429a      	cmp	r2, r3
 8022d1e:	d210      	bcs.n	8022d42 <upload_handler+0x72>
                         ? aligned = MG_ROUND_DOWN(c->recv.len, alignment)
 8022d20:	69bb      	ldr	r3, [r7, #24]
 8022d22:	2b00      	cmp	r3, #0
 8022d24:	d102      	bne.n	8022d2c <upload_handler+0x5c>
 8022d26:	68fb      	ldr	r3, [r7, #12]
 8022d28:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8022d2a:	e007      	b.n	8022d3c <upload_handler+0x6c>
 8022d2c:	68fb      	ldr	r3, [r7, #12]
 8022d2e:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8022d30:	69bb      	ldr	r3, [r7, #24]
 8022d32:	fbb2 f3f3 	udiv	r3, r2, r3
 8022d36:	69ba      	ldr	r2, [r7, #24]
 8022d38:	fb02 f303 	mul.w	r3, r2, r3
 8022d3c:	617b      	str	r3, [r7, #20]
                         : c->recv.len;  // Last write can be unaligned
 8022d3e:	697b      	ldr	r3, [r7, #20]
 8022d40:	e001      	b.n	8022d46 <upload_handler+0x76>
 8022d42:	68fb      	ldr	r3, [r7, #12]
 8022d44:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
    size_t aligned = (us->received + c->recv.len < us->expected)
 8022d46:	617b      	str	r3, [r7, #20]
    bool ok = aligned > 0 ? us->fn_write(us->fp, c->recv.buf, aligned) : true;
 8022d48:	697b      	ldr	r3, [r7, #20]
 8022d4a:	2b00      	cmp	r3, #0
 8022d4c:	d00a      	beq.n	8022d64 <upload_handler+0x94>
 8022d4e:	69fb      	ldr	r3, [r7, #28]
 8022d50:	695b      	ldr	r3, [r3, #20]
 8022d52:	69fa      	ldr	r2, [r7, #28]
 8022d54:	68d0      	ldr	r0, [r2, #12]
 8022d56:	68fa      	ldr	r2, [r7, #12]
 8022d58:	6c11      	ldr	r1, [r2, #64]	@ 0x40
 8022d5a:	697a      	ldr	r2, [r7, #20]
 8022d5c:	4798      	blx	r3
 8022d5e:	4603      	mov	r3, r0
 8022d60:	2b00      	cmp	r3, #0
 8022d62:	d001      	beq.n	8022d68 <upload_handler+0x98>
 8022d64:	2301      	movs	r3, #1
 8022d66:	e000      	b.n	8022d6a <upload_handler+0x9a>
 8022d68:	2300      	movs	r3, #0
 8022d6a:	74fb      	strb	r3, [r7, #19]
    us->received += aligned;
 8022d6c:	69fb      	ldr	r3, [r7, #28]
 8022d6e:	689a      	ldr	r2, [r3, #8]
 8022d70:	697b      	ldr	r3, [r7, #20]
 8022d72:	441a      	add	r2, r3
 8022d74:	69fb      	ldr	r3, [r7, #28]
 8022d76:	609a      	str	r2, [r3, #8]
    MG_DEBUG(("%lu chunk: %lu/%lu, %lu/%lu, ok: %d", c->id, aligned,
 8022d78:	4b3a      	ldr	r3, [pc, #232]	@ (8022e64 <upload_handler+0x194>)
 8022d7a:	681b      	ldr	r3, [r3, #0]
 8022d7c:	2b02      	cmp	r3, #2
 8022d7e:	dd18      	ble.n	8022db2 <upload_handler+0xe2>
 8022d80:	4b39      	ldr	r3, [pc, #228]	@ (8022e68 <upload_handler+0x198>)
 8022d82:	f44f 72a2 	mov.w	r2, #324	@ 0x144
 8022d86:	4939      	ldr	r1, [pc, #228]	@ (8022e6c <upload_handler+0x19c>)
 8022d88:	2003      	movs	r0, #3
 8022d8a:	f7ea fa0f 	bl	800d1ac <mg_log_prefix>
 8022d8e:	68fb      	ldr	r3, [r7, #12]
 8022d90:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8022d92:	68fb      	ldr	r3, [r7, #12]
 8022d94:	6c9c      	ldr	r4, [r3, #72]	@ 0x48
 8022d96:	69fb      	ldr	r3, [r7, #28]
 8022d98:	689b      	ldr	r3, [r3, #8]
 8022d9a:	69fa      	ldr	r2, [r7, #28]
 8022d9c:	6852      	ldr	r2, [r2, #4]
 8022d9e:	7cf9      	ldrb	r1, [r7, #19]
 8022da0:	9102      	str	r1, [sp, #8]
 8022da2:	9201      	str	r2, [sp, #4]
 8022da4:	9300      	str	r3, [sp, #0]
 8022da6:	4623      	mov	r3, r4
 8022da8:	697a      	ldr	r2, [r7, #20]
 8022daa:	4601      	mov	r1, r0
 8022dac:	4830      	ldr	r0, [pc, #192]	@ (8022e70 <upload_handler+0x1a0>)
 8022dae:	f7ea fa4d 	bl	800d24c <mg_log>
              c->recv.len, us->received, us->expected, ok));
    mg_iobuf_del(&c->recv, 0, aligned);  // Delete received data
 8022db2:	68fb      	ldr	r3, [r7, #12]
 8022db4:	3340      	adds	r3, #64	@ 0x40
 8022db6:	697a      	ldr	r2, [r7, #20]
 8022db8:	2100      	movs	r1, #0
 8022dba:	4618      	mov	r0, r3
 8022dbc:	f7e9 fb28 	bl	800c410 <mg_iobuf_del>
    if (ok == false) {
 8022dc0:	7cfb      	ldrb	r3, [r7, #19]
 8022dc2:	f083 0301 	eor.w	r3, r3, #1
 8022dc6:	b2db      	uxtb	r3, r3
 8022dc8:	2b00      	cmp	r3, #0
 8022dca:	d011      	beq.n	8022df0 <upload_handler+0x120>
      mg_http_reply(c, 400, "", "Upload error\n");
 8022dcc:	4b29      	ldr	r3, [pc, #164]	@ (8022e74 <upload_handler+0x1a4>)
 8022dce:	4a2a      	ldr	r2, [pc, #168]	@ (8022e78 <upload_handler+0x1a8>)
 8022dd0:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8022dd4:	68f8      	ldr	r0, [r7, #12]
 8022dd6:	f7e7 fe29 	bl	800aa2c <mg_http_reply>
      close_uploaded_file(us);
 8022dda:	69f8      	ldr	r0, [r7, #28]
 8022ddc:	f7ff fefe 	bl	8022bdc <close_uploaded_file>
      c->is_draining = 1;  // Close connection when response it sent
 8022de0:	68fa      	ldr	r2, [r7, #12]
 8022de2:	f892 30b5 	ldrb.w	r3, [r2, #181]	@ 0xb5
 8022de6:	f043 0310 	orr.w	r3, r3, #16
 8022dea:	f882 30b5 	strb.w	r3, [r2, #181]	@ 0xb5
 8022dee:	e02b      	b.n	8022e48 <upload_handler+0x178>
    } else if (us->received >= us->expected) {
 8022df0:	69fb      	ldr	r3, [r7, #28]
 8022df2:	689a      	ldr	r2, [r3, #8]
 8022df4:	69fb      	ldr	r3, [r7, #28]
 8022df6:	685b      	ldr	r3, [r3, #4]
 8022df8:	429a      	cmp	r2, r3
 8022dfa:	d325      	bcc.n	8022e48 <upload_handler+0x178>
      // Uploaded everything. Send response back
      MG_INFO(("%lu done, %lu bytes", c->id, us->received));
 8022dfc:	4b19      	ldr	r3, [pc, #100]	@ (8022e64 <upload_handler+0x194>)
 8022dfe:	681b      	ldr	r3, [r3, #0]
 8022e00:	2b01      	cmp	r3, #1
 8022e02:	dd0e      	ble.n	8022e22 <upload_handler+0x152>
 8022e04:	4b18      	ldr	r3, [pc, #96]	@ (8022e68 <upload_handler+0x198>)
 8022e06:	f240 124d 	movw	r2, #333	@ 0x14d
 8022e0a:	4918      	ldr	r1, [pc, #96]	@ (8022e6c <upload_handler+0x19c>)
 8022e0c:	2002      	movs	r0, #2
 8022e0e:	f7ea f9cd 	bl	800d1ac <mg_log_prefix>
 8022e12:	68fb      	ldr	r3, [r7, #12]
 8022e14:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 8022e16:	69fb      	ldr	r3, [r7, #28]
 8022e18:	689b      	ldr	r3, [r3, #8]
 8022e1a:	461a      	mov	r2, r3
 8022e1c:	4817      	ldr	r0, [pc, #92]	@ (8022e7c <upload_handler+0x1ac>)
 8022e1e:	f7ea fa15 	bl	800d24c <mg_log>
      mg_http_reply(c, 200, NULL, "%lu ok\n", us->received);
 8022e22:	69fb      	ldr	r3, [r7, #28]
 8022e24:	689b      	ldr	r3, [r3, #8]
 8022e26:	9300      	str	r3, [sp, #0]
 8022e28:	4b15      	ldr	r3, [pc, #84]	@ (8022e80 <upload_handler+0x1b0>)
 8022e2a:	2200      	movs	r2, #0
 8022e2c:	21c8      	movs	r1, #200	@ 0xc8
 8022e2e:	68f8      	ldr	r0, [r7, #12]
 8022e30:	f7e7 fdfc 	bl	800aa2c <mg_http_reply>
      close_uploaded_file(us);
 8022e34:	69f8      	ldr	r0, [r7, #28]
 8022e36:	f7ff fed1 	bl	8022bdc <close_uploaded_file>
      c->is_draining = 1;  // Close connection when response it sent
 8022e3a:	68fa      	ldr	r2, [r7, #12]
 8022e3c:	f892 30b5 	ldrb.w	r3, [r2, #181]	@ 0xb5
 8022e40:	f043 0310 	orr.w	r3, r3, #16
 8022e44:	f882 30b5 	strb.w	r3, [r2, #181]	@ 0xb5
    }
  }

  // Close uploading file descriptor
  if (us->marker == 'U' && ev == MG_EV_CLOSE) close_uploaded_file(us);
 8022e48:	69fb      	ldr	r3, [r7, #28]
 8022e4a:	781b      	ldrb	r3, [r3, #0]
 8022e4c:	2b55      	cmp	r3, #85	@ 0x55
 8022e4e:	d105      	bne.n	8022e5c <upload_handler+0x18c>
 8022e50:	68bb      	ldr	r3, [r7, #8]
 8022e52:	2b09      	cmp	r3, #9
 8022e54:	d102      	bne.n	8022e5c <upload_handler+0x18c>
 8022e56:	69f8      	ldr	r0, [r7, #28]
 8022e58:	f7ff fec0 	bl	8022bdc <close_uploaded_file>
  (void) ev_data;
}
 8022e5c:	3724      	adds	r7, #36	@ 0x24
 8022e5e:	46bd      	mov	sp, r7
 8022e60:	bd90      	pop	{r4, r7, pc}
 8022e62:	bf00      	nop
 8022e64:	20000258 	.word	0x20000258
 8022e68:	08035844 	.word	0x08035844
 8022e6c:	08027d30 	.word	0x08027d30
 8022e70:	08027dd0 	.word	0x08027dd0
 8022e74:	08027df4 	.word	0x08027df4
 8022e78:	08027e04 	.word	0x08027e04
 8022e7c:	08027e08 	.word	0x08027e08
 8022e80:	08027e1c 	.word	0x08027e1c

08022e84 <get_file_name_from_uri>:

static void get_file_name_from_uri(struct mg_str uri, char *buf, size_t len) {
 8022e84:	b590      	push	{r4, r7, lr}
 8022e86:	b08f      	sub	sp, #60	@ 0x3c
 8022e88:	af02      	add	r7, sp, #8
 8022e8a:	f107 0408 	add.w	r4, r7, #8
 8022e8e:	e884 0003 	stmia.w	r4, {r0, r1}
 8022e92:	607a      	str	r2, [r7, #4]
 8022e94:	603b      	str	r3, [r7, #0]
  struct mg_str parts[3];
  memset(parts, 0, sizeof(parts));           // Init match parts
 8022e96:	f107 0310 	add.w	r3, r7, #16
 8022e9a:	2218      	movs	r2, #24
 8022e9c:	2100      	movs	r1, #0
 8022e9e:	4618      	mov	r0, r3
 8022ea0:	f001 faf4 	bl	802448c <memset>
  mg_match(uri, mg_str("/api/*/#"), parts);  // Fetch file name
 8022ea4:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8022ea8:	490d      	ldr	r1, [pc, #52]	@ (8022ee0 <get_file_name_from_uri+0x5c>)
 8022eaa:	4618      	mov	r0, r3
 8022eac:	f7f2 fd70 	bl	8015990 <mg_str_s>
 8022eb0:	f107 0310 	add.w	r3, r7, #16
 8022eb4:	9300      	str	r3, [sp, #0]
 8022eb6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8022eba:	cb0c      	ldmia	r3, {r2, r3}
 8022ebc:	f107 0108 	add.w	r1, r7, #8
 8022ec0:	c903      	ldmia	r1, {r0, r1}
 8022ec2:	f7f2 fe6e 	bl	8015ba2 <mg_match>
  mg_url_decode(parts[1].buf, parts[1].len, buf, len, 0);
 8022ec6:	69b8      	ldr	r0, [r7, #24]
 8022ec8:	69f9      	ldr	r1, [r7, #28]
 8022eca:	2300      	movs	r3, #0
 8022ecc:	9300      	str	r3, [sp, #0]
 8022ece:	683b      	ldr	r3, [r7, #0]
 8022ed0:	687a      	ldr	r2, [r7, #4]
 8022ed2:	f7e6 fc42 	bl	800975a <mg_url_decode>
}
 8022ed6:	bf00      	nop
 8022ed8:	3734      	adds	r7, #52	@ 0x34
 8022eda:	46bd      	mov	sp, r7
 8022edc:	bd90      	pop	{r4, r7, pc}
 8022ede:	bf00      	nop
 8022ee0:	08027e24 	.word	0x08027e24

08022ee4 <prep_upload>:

static void prep_upload(struct mg_connection *c, struct mg_http_message *hm,
                        void *(*fn_open)(char *, size_t),
                        bool (*fn_close)(void *),
                        bool (*fn_write)(void *, void *, size_t)) {
 8022ee4:	b580      	push	{r7, lr}
 8022ee6:	b0a6      	sub	sp, #152	@ 0x98
 8022ee8:	af00      	add	r7, sp, #0
 8022eea:	60f8      	str	r0, [r7, #12]
 8022eec:	60b9      	str	r1, [r7, #8]
 8022eee:	607a      	str	r2, [r7, #4]
 8022ef0:	603b      	str	r3, [r7, #0]
  struct upload_state *us = (struct upload_state *) c->data;
 8022ef2:	68fb      	ldr	r3, [r7, #12]
 8022ef4:	3390      	adds	r3, #144	@ 0x90
 8022ef6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  char path[MG_PATH_MAX];
  memset(us, 0, sizeof(*us));  // Cleanup upload state
 8022efa:	2218      	movs	r2, #24
 8022efc:	2100      	movs	r1, #0
 8022efe:	f8d7 0094 	ldr.w	r0, [r7, #148]	@ 0x94
 8022f02:	f001 fac3 	bl	802448c <memset>
  get_file_name_from_uri(hm->uri, path, sizeof(path));
 8022f06:	f107 0214 	add.w	r2, r7, #20
 8022f0a:	68b9      	ldr	r1, [r7, #8]
 8022f0c:	2380      	movs	r3, #128	@ 0x80
 8022f0e:	3108      	adds	r1, #8
 8022f10:	c903      	ldmia	r1, {r0, r1}
 8022f12:	f7ff ffb7 	bl	8022e84 <get_file_name_from_uri>
  us->fp = fn_open(path, hm->body.len);
 8022f16:	68bb      	ldr	r3, [r7, #8]
 8022f18:	f8d3 1204 	ldr.w	r1, [r3, #516]	@ 0x204
 8022f1c:	f107 0214 	add.w	r2, r7, #20
 8022f20:	687b      	ldr	r3, [r7, #4]
 8022f22:	4610      	mov	r0, r2
 8022f24:	4798      	blx	r3
 8022f26:	4602      	mov	r2, r0
 8022f28:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8022f2c:	60da      	str	r2, [r3, #12]
  MG_DEBUG(("file: [%s] size: %lu fp: %p", path, hm->body.len, us->fp));
 8022f2e:	4b2d      	ldr	r3, [pc, #180]	@ (8022fe4 <prep_upload+0x100>)
 8022f30:	681b      	ldr	r3, [r3, #0]
 8022f32:	2b02      	cmp	r3, #2
 8022f34:	dd11      	ble.n	8022f5a <prep_upload+0x76>
 8022f36:	4b2c      	ldr	r3, [pc, #176]	@ (8022fe8 <prep_upload+0x104>)
 8022f38:	f240 1269 	movw	r2, #361	@ 0x169
 8022f3c:	492b      	ldr	r1, [pc, #172]	@ (8022fec <prep_upload+0x108>)
 8022f3e:	2003      	movs	r0, #3
 8022f40:	f7ea f934 	bl	800d1ac <mg_log_prefix>
 8022f44:	68bb      	ldr	r3, [r7, #8]
 8022f46:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8022f4a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8022f4e:	68db      	ldr	r3, [r3, #12]
 8022f50:	f107 0114 	add.w	r1, r7, #20
 8022f54:	4826      	ldr	r0, [pc, #152]	@ (8022ff0 <prep_upload+0x10c>)
 8022f56:	f7ea f979 	bl	800d24c <mg_log>
  us->marker = 'U';  // Mark us as an upload connection
 8022f5a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8022f5e:	2255      	movs	r2, #85	@ 0x55
 8022f60:	701a      	strb	r2, [r3, #0]
  if (us->fp == NULL) {
 8022f62:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8022f66:	68db      	ldr	r3, [r3, #12]
 8022f68:	2b00      	cmp	r3, #0
 8022f6a:	d10e      	bne.n	8022f8a <prep_upload+0xa6>
    mg_http_reply(c, 400, JSON_HEADERS, "File open error\n");
 8022f6c:	4b21      	ldr	r3, [pc, #132]	@ (8022ff4 <prep_upload+0x110>)
 8022f6e:	4a22      	ldr	r2, [pc, #136]	@ (8022ff8 <prep_upload+0x114>)
 8022f70:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8022f74:	68f8      	ldr	r0, [r7, #12]
 8022f76:	f7e7 fd59 	bl	800aa2c <mg_http_reply>
    c->is_draining = 1;
 8022f7a:	68fa      	ldr	r2, [r7, #12]
 8022f7c:	f892 30b5 	ldrb.w	r3, [r2, #181]	@ 0xb5
 8022f80:	f043 0310 	orr.w	r3, r3, #16
 8022f84:	f882 30b5 	strb.w	r3, [r2, #181]	@ 0xb5
    mg_iobuf_del(&c->recv, 0, hm->head.len);  // Delete HTTP headers
    c->fn = upload_handler;                   // Change event handler function
    c->pfn = NULL;                            // Detach HTTP handler
    mg_call(c, MG_EV_READ, &c->recv.len);     // Write initial data
  }
}
 8022f88:	e027      	b.n	8022fda <prep_upload+0xf6>
    us->expected = hm->body.len;              // Store number of bytes we expect
 8022f8a:	68bb      	ldr	r3, [r7, #8]
 8022f8c:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8022f90:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8022f94:	605a      	str	r2, [r3, #4]
    us->fn_close = fn_close;                  // Store closing function
 8022f96:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8022f9a:	683a      	ldr	r2, [r7, #0]
 8022f9c:	611a      	str	r2, [r3, #16]
    us->fn_write = fn_write;                  // Store writing function
 8022f9e:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8022fa2:	f8d7 20a0 	ldr.w	r2, [r7, #160]	@ 0xa0
 8022fa6:	615a      	str	r2, [r3, #20]
    mg_iobuf_del(&c->recv, 0, hm->head.len);  // Delete HTTP headers
 8022fa8:	68fb      	ldr	r3, [r7, #12]
 8022faa:	f103 0040 	add.w	r0, r3, #64	@ 0x40
 8022fae:	68bb      	ldr	r3, [r7, #8]
 8022fb0:	f8d3 320c 	ldr.w	r3, [r3, #524]	@ 0x20c
 8022fb4:	461a      	mov	r2, r3
 8022fb6:	2100      	movs	r1, #0
 8022fb8:	f7e9 fa2a 	bl	800c410 <mg_iobuf_del>
    c->fn = upload_handler;                   // Change event handler function
 8022fbc:	68fb      	ldr	r3, [r7, #12]
 8022fbe:	4a0f      	ldr	r2, [pc, #60]	@ (8022ffc <prep_upload+0x118>)
 8022fc0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    c->pfn = NULL;                            // Detach HTTP handler
 8022fc4:	68fb      	ldr	r3, [r7, #12]
 8022fc6:	2200      	movs	r2, #0
 8022fc8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    mg_call(c, MG_EV_READ, &c->recv.len);     // Write initial data
 8022fcc:	68fb      	ldr	r3, [r7, #12]
 8022fce:	3348      	adds	r3, #72	@ 0x48
 8022fd0:	461a      	mov	r2, r3
 8022fd2:	2107      	movs	r1, #7
 8022fd4:	68f8      	ldr	r0, [r7, #12]
 8022fd6:	f7e4 ff2b 	bl	8007e30 <mg_call>
}
 8022fda:	bf00      	nop
 8022fdc:	3798      	adds	r7, #152	@ 0x98
 8022fde:	46bd      	mov	sp, r7
 8022fe0:	bd80      	pop	{r7, pc}
 8022fe2:	bf00      	nop
 8022fe4:	20000258 	.word	0x20000258
 8022fe8:	08035854 	.word	0x08035854
 8022fec:	08027d30 	.word	0x08027d30
 8022ff0:	08027e30 	.word	0x08027e30
 8022ff4:	08027e4c 	.word	0x08027e4c
 8022ff8:	08027e60 	.word	0x08027e60
 8022ffc:	08022cd1 	.word	0x08022cd1

08023000 <handle_uploads>:

static void handle_uploads(struct mg_connection *c, int ev, void *ev_data) {
 8023000:	b580      	push	{r7, lr}
 8023002:	b08e      	sub	sp, #56	@ 0x38
 8023004:	af02      	add	r7, sp, #8
 8023006:	60f8      	str	r0, [r7, #12]
 8023008:	60b9      	str	r1, [r7, #8]
 802300a:	607a      	str	r2, [r7, #4]
  struct upload_state *us = (struct upload_state *) c->data;
 802300c:	68fb      	ldr	r3, [r7, #12]
 802300e:	3390      	adds	r3, #144	@ 0x90
 8023010:	62fb      	str	r3, [r7, #44]	@ 0x2c
  struct mg_http_message *hm = (struct mg_http_message *) ev_data;
 8023012:	687b      	ldr	r3, [r7, #4]
 8023014:	62bb      	str	r3, [r7, #40]	@ 0x28

  // Catch /upload requests early, without buffering whole body
  // When we receive MG_EV_HTTP_HDRS event, that means we've received all
  // HTTP headers but not necessarily full HTTP body
  if (ev == MG_EV_HTTP_HDRS && us->marker == 0 &&
 8023016:	68bb      	ldr	r3, [r7, #8]
 8023018:	2b0a      	cmp	r3, #10
 802301a:	d153      	bne.n	80230c4 <handle_uploads+0xc4>
 802301c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 802301e:	781b      	ldrb	r3, [r3, #0]
 8023020:	2b00      	cmp	r3, #0
 8023022:	d14f      	bne.n	80230c4 <handle_uploads+0xc4>
      mg_strcmp(hm->method, mg_str("POST")) == 0) {
 8023024:	f107 0314 	add.w	r3, r7, #20
 8023028:	4928      	ldr	r1, [pc, #160]	@ (80230cc <handle_uploads+0xcc>)
 802302a:	4618      	mov	r0, r3
 802302c:	f7f2 fcb0 	bl	8015990 <mg_str_s>
 8023030:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8023032:	f107 0314 	add.w	r3, r7, #20
 8023036:	cb0c      	ldmia	r3, {r2, r3}
 8023038:	c903      	ldmia	r1, {r0, r1}
 802303a:	f7f2 fd29 	bl	8015a90 <mg_strcmp>
 802303e:	4603      	mov	r3, r0
  if (ev == MG_EV_HTTP_HDRS && us->marker == 0 &&
 8023040:	2b00      	cmp	r3, #0
 8023042:	d13f      	bne.n	80230c4 <handle_uploads+0xc4>
    struct apihandler *h = find_handler(hm);
 8023044:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8023046:	f7ff fca9 	bl	802299c <find_handler>
 802304a:	6278      	str	r0, [r7, #36]	@ 0x24
    if (h != NULL &&
 802304c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 802304e:	2b00      	cmp	r3, #0
 8023050:	d021      	beq.n	8023096 <handle_uploads+0x96>
        (strcmp(h->type, "upload") == 0 || strcmp(h->type, "ota") == 0)) {
 8023052:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8023054:	685b      	ldr	r3, [r3, #4]
 8023056:	491e      	ldr	r1, [pc, #120]	@ (80230d0 <handle_uploads+0xd0>)
 8023058:	4618      	mov	r0, r3
 802305a:	f7dd f8f1 	bl	8000240 <strcmp>
 802305e:	4603      	mov	r3, r0
    if (h != NULL &&
 8023060:	2b00      	cmp	r3, #0
 8023062:	d008      	beq.n	8023076 <handle_uploads+0x76>
        (strcmp(h->type, "upload") == 0 || strcmp(h->type, "ota") == 0)) {
 8023064:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8023066:	685b      	ldr	r3, [r3, #4]
 8023068:	491a      	ldr	r1, [pc, #104]	@ (80230d4 <handle_uploads+0xd4>)
 802306a:	4618      	mov	r0, r3
 802306c:	f7dd f8e8 	bl	8000240 <strcmp>
 8023070:	4603      	mov	r3, r0
 8023072:	2b00      	cmp	r3, #0
 8023074:	d10f      	bne.n	8023096 <handle_uploads+0x96>
      struct apihandler_upload *hu = (struct apihandler_upload *) h;
 8023076:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8023078:	623b      	str	r3, [r7, #32]
      prep_upload(c, hm, hu->opener, hu->closer, hu->writer);
 802307a:	6a3b      	ldr	r3, [r7, #32]
 802307c:	699a      	ldr	r2, [r3, #24]
 802307e:	6a3b      	ldr	r3, [r7, #32]
 8023080:	69d9      	ldr	r1, [r3, #28]
 8023082:	6a3b      	ldr	r3, [r7, #32]
 8023084:	6a1b      	ldr	r3, [r3, #32]
 8023086:	9300      	str	r3, [sp, #0]
 8023088:	460b      	mov	r3, r1
 802308a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 802308c:	68f8      	ldr	r0, [r7, #12]
 802308e:	f7ff ff29 	bl	8022ee4 <prep_upload>
        (strcmp(h->type, "upload") == 0 || strcmp(h->type, "ota") == 0)) {
 8023092:	bf00      	nop
    } else if (h != NULL && strcmp(h->type, "file") == 0) {
      struct apihandler_file *hf = (struct apihandler_file *) h;
      prep_upload(c, hm, hf->opener, file_closer, file_writer);
    }
  }
}
 8023094:	e016      	b.n	80230c4 <handle_uploads+0xc4>
    } else if (h != NULL && strcmp(h->type, "file") == 0) {
 8023096:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8023098:	2b00      	cmp	r3, #0
 802309a:	d013      	beq.n	80230c4 <handle_uploads+0xc4>
 802309c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 802309e:	685b      	ldr	r3, [r3, #4]
 80230a0:	490d      	ldr	r1, [pc, #52]	@ (80230d8 <handle_uploads+0xd8>)
 80230a2:	4618      	mov	r0, r3
 80230a4:	f7dd f8cc 	bl	8000240 <strcmp>
 80230a8:	4603      	mov	r3, r0
 80230aa:	2b00      	cmp	r3, #0
 80230ac:	d10a      	bne.n	80230c4 <handle_uploads+0xc4>
      struct apihandler_file *hf = (struct apihandler_file *) h;
 80230ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80230b0:	61fb      	str	r3, [r7, #28]
      prep_upload(c, hm, hf->opener, file_closer, file_writer);
 80230b2:	69fb      	ldr	r3, [r7, #28]
 80230b4:	699a      	ldr	r2, [r3, #24]
 80230b6:	4b09      	ldr	r3, [pc, #36]	@ (80230dc <handle_uploads+0xdc>)
 80230b8:	9300      	str	r3, [sp, #0]
 80230ba:	4b09      	ldr	r3, [pc, #36]	@ (80230e0 <handle_uploads+0xe0>)
 80230bc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80230be:	68f8      	ldr	r0, [r7, #12]
 80230c0:	f7ff ff10 	bl	8022ee4 <prep_upload>
}
 80230c4:	bf00      	nop
 80230c6:	3730      	adds	r7, #48	@ 0x30
 80230c8:	46bd      	mov	sp, r7
 80230ca:	bd80      	pop	{r7, pc}
 80230cc:	08027e9c 	.word	0x08027e9c
 80230d0:	08027d78 	.word	0x08027d78
 80230d4:	08027d74 	.word	0x08027d74
 80230d8:	08027d6c 	.word	0x08027d6c
 80230dc:	08022c69 	.word	0x08022c69
 80230e0:	08022c21 	.word	0x08022c21

080230e4 <handle_action>:

static void handle_action(struct mg_connection *c, struct mg_http_message *hm,
                          bool (*check_fn)(void),
                          void (*start_fn)(struct mg_str)) {
 80230e4:	b580      	push	{r7, lr}
 80230e6:	b088      	sub	sp, #32
 80230e8:	af02      	add	r7, sp, #8
 80230ea:	60f8      	str	r0, [r7, #12]
 80230ec:	60b9      	str	r1, [r7, #8]
 80230ee:	607a      	str	r2, [r7, #4]
 80230f0:	603b      	str	r3, [r7, #0]
  if (hm->body.len > 0) {
 80230f2:	68bb      	ldr	r3, [r7, #8]
 80230f4:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 80230f8:	2b00      	cmp	r3, #0
 80230fa:	d01c      	beq.n	8023136 <handle_action+0x52>
    start_fn(hm->body);
 80230fc:	68ba      	ldr	r2, [r7, #8]
 80230fe:	683b      	ldr	r3, [r7, #0]
 8023100:	f502 7200 	add.w	r2, r2, #512	@ 0x200
 8023104:	e892 0003 	ldmia.w	r2, {r0, r1}
 8023108:	4798      	blx	r3
    if (check_fn()) {
 802310a:	687b      	ldr	r3, [r7, #4]
 802310c:	4798      	blx	r3
 802310e:	4603      	mov	r3, r0
 8023110:	2b00      	cmp	r3, #0
 8023112:	d009      	beq.n	8023128 <handle_action+0x44>
      struct action_state *as = (struct action_state *) c->data;
 8023114:	68fb      	ldr	r3, [r7, #12]
 8023116:	3390      	adds	r3, #144	@ 0x90
 8023118:	617b      	str	r3, [r7, #20]
      as->marker = 'A';
 802311a:	697b      	ldr	r3, [r7, #20]
 802311c:	2241      	movs	r2, #65	@ 0x41
 802311e:	701a      	strb	r2, [r3, #0]
      as->fn = check_fn;
 8023120:	697b      	ldr	r3, [r7, #20]
 8023122:	687a      	ldr	r2, [r7, #4]
 8023124:	605a      	str	r2, [r3, #4]
      mg_http_reply(c, 200, JSON_HEADERS, "false");
    }
  } else {
    mg_http_reply(c, 200, JSON_HEADERS, "%s", check_fn() ? "true" : "false");
  }
}
 8023126:	e015      	b.n	8023154 <handle_action+0x70>
      mg_http_reply(c, 200, JSON_HEADERS, "false");
 8023128:	4b0c      	ldr	r3, [pc, #48]	@ (802315c <handle_action+0x78>)
 802312a:	4a0d      	ldr	r2, [pc, #52]	@ (8023160 <handle_action+0x7c>)
 802312c:	21c8      	movs	r1, #200	@ 0xc8
 802312e:	68f8      	ldr	r0, [r7, #12]
 8023130:	f7e7 fc7c 	bl	800aa2c <mg_http_reply>
}
 8023134:	e00e      	b.n	8023154 <handle_action+0x70>
    mg_http_reply(c, 200, JSON_HEADERS, "%s", check_fn() ? "true" : "false");
 8023136:	687b      	ldr	r3, [r7, #4]
 8023138:	4798      	blx	r3
 802313a:	4603      	mov	r3, r0
 802313c:	2b00      	cmp	r3, #0
 802313e:	d001      	beq.n	8023144 <handle_action+0x60>
 8023140:	4b08      	ldr	r3, [pc, #32]	@ (8023164 <handle_action+0x80>)
 8023142:	e000      	b.n	8023146 <handle_action+0x62>
 8023144:	4b05      	ldr	r3, [pc, #20]	@ (802315c <handle_action+0x78>)
 8023146:	9300      	str	r3, [sp, #0]
 8023148:	4b07      	ldr	r3, [pc, #28]	@ (8023168 <handle_action+0x84>)
 802314a:	4a05      	ldr	r2, [pc, #20]	@ (8023160 <handle_action+0x7c>)
 802314c:	21c8      	movs	r1, #200	@ 0xc8
 802314e:	68f8      	ldr	r0, [r7, #12]
 8023150:	f7e7 fc6c 	bl	800aa2c <mg_http_reply>
}
 8023154:	bf00      	nop
 8023156:	3718      	adds	r7, #24
 8023158:	46bd      	mov	sp, r7
 802315a:	bd80      	pop	{r7, pc}
 802315c:	08027ea4 	.word	0x08027ea4
 8023160:	08027e60 	.word	0x08027e60
 8023164:	08027eac 	.word	0x08027eac
 8023168:	08027eb4 	.word	0x08027eb4

0802316c <print_struct>:

size_t print_struct(void (*out)(char, void *), void *ptr, va_list *ap) {
 802316c:	b580      	push	{r7, lr}
 802316e:	b08e      	sub	sp, #56	@ 0x38
 8023170:	af04      	add	r7, sp, #16
 8023172:	60f8      	str	r0, [r7, #12]
 8023174:	60b9      	str	r1, [r7, #8]
 8023176:	607a      	str	r2, [r7, #4]
  const struct attribute *a = va_arg(*ap, struct attribute *);
 8023178:	687b      	ldr	r3, [r7, #4]
 802317a:	681b      	ldr	r3, [r3, #0]
 802317c:	1d19      	adds	r1, r3, #4
 802317e:	687a      	ldr	r2, [r7, #4]
 8023180:	6011      	str	r1, [r2, #0]
 8023182:	681b      	ldr	r3, [r3, #0]
 8023184:	61bb      	str	r3, [r7, #24]
  char *data = va_arg(*ap, char *);
 8023186:	687b      	ldr	r3, [r7, #4]
 8023188:	681b      	ldr	r3, [r3, #0]
 802318a:	1d19      	adds	r1, r3, #4
 802318c:	687a      	ldr	r2, [r7, #4]
 802318e:	6011      	str	r1, [r2, #0]
 8023190:	681b      	ldr	r3, [r3, #0]
 8023192:	617b      	str	r3, [r7, #20]
  size_t i, len = 0;
 8023194:	2300      	movs	r3, #0
 8023196:	623b      	str	r3, [r7, #32]
  for (i = 0; a[i].name != NULL; i++) {
 8023198:	2300      	movs	r3, #0
 802319a:	627b      	str	r3, [r7, #36]	@ 0x24
 802319c:	e0bf      	b.n	802331e <print_struct+0x1b2>
    char *attrptr = data + a[i].offset;
 802319e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80231a0:	4613      	mov	r3, r2
 80231a2:	005b      	lsls	r3, r3, #1
 80231a4:	4413      	add	r3, r2
 80231a6:	00db      	lsls	r3, r3, #3
 80231a8:	461a      	mov	r2, r3
 80231aa:	69bb      	ldr	r3, [r7, #24]
 80231ac:	4413      	add	r3, r2
 80231ae:	68db      	ldr	r3, [r3, #12]
 80231b0:	697a      	ldr	r2, [r7, #20]
 80231b2:	4413      	add	r3, r2
 80231b4:	613b      	str	r3, [r7, #16]
    len += mg_xprintf(out, ptr, "%s%m:", i == 0 ? "" : ",", MG_ESC(a[i].name));
 80231b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80231b8:	2b00      	cmp	r3, #0
 80231ba:	d101      	bne.n	80231c0 <print_struct+0x54>
 80231bc:	4960      	ldr	r1, [pc, #384]	@ (8023340 <print_struct+0x1d4>)
 80231be:	e000      	b.n	80231c2 <print_struct+0x56>
 80231c0:	4960      	ldr	r1, [pc, #384]	@ (8023344 <print_struct+0x1d8>)
 80231c2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80231c4:	4613      	mov	r3, r2
 80231c6:	005b      	lsls	r3, r3, #1
 80231c8:	4413      	add	r3, r2
 80231ca:	00db      	lsls	r3, r3, #3
 80231cc:	461a      	mov	r2, r3
 80231ce:	69bb      	ldr	r3, [r7, #24]
 80231d0:	4413      	add	r3, r2
 80231d2:	681b      	ldr	r3, [r3, #0]
 80231d4:	9302      	str	r3, [sp, #8]
 80231d6:	2300      	movs	r3, #0
 80231d8:	9301      	str	r3, [sp, #4]
 80231da:	4b5b      	ldr	r3, [pc, #364]	@ (8023348 <print_struct+0x1dc>)
 80231dc:	9300      	str	r3, [sp, #0]
 80231de:	460b      	mov	r3, r1
 80231e0:	4a5a      	ldr	r2, [pc, #360]	@ (802334c <print_struct+0x1e0>)
 80231e2:	68b9      	ldr	r1, [r7, #8]
 80231e4:	68f8      	ldr	r0, [r7, #12]
 80231e6:	f7e5 fafc 	bl	80087e2 <mg_xprintf>
 80231ea:	4602      	mov	r2, r0
 80231ec:	6a3b      	ldr	r3, [r7, #32]
 80231ee:	4413      	add	r3, r2
 80231f0:	623b      	str	r3, [r7, #32]
    if (strcmp(a[i].type, "int") == 0) {
 80231f2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80231f4:	4613      	mov	r3, r2
 80231f6:	005b      	lsls	r3, r3, #1
 80231f8:	4413      	add	r3, r2
 80231fa:	00db      	lsls	r3, r3, #3
 80231fc:	461a      	mov	r2, r3
 80231fe:	69bb      	ldr	r3, [r7, #24]
 8023200:	4413      	add	r3, r2
 8023202:	685b      	ldr	r3, [r3, #4]
 8023204:	4952      	ldr	r1, [pc, #328]	@ (8023350 <print_struct+0x1e4>)
 8023206:	4618      	mov	r0, r3
 8023208:	f7dd f81a 	bl	8000240 <strcmp>
 802320c:	4603      	mov	r3, r0
 802320e:	2b00      	cmp	r3, #0
 8023210:	d10b      	bne.n	802322a <print_struct+0xbe>
      len += mg_xprintf(out, ptr, "%d", *(int *) attrptr);
 8023212:	693b      	ldr	r3, [r7, #16]
 8023214:	681b      	ldr	r3, [r3, #0]
 8023216:	4a4f      	ldr	r2, [pc, #316]	@ (8023354 <print_struct+0x1e8>)
 8023218:	68b9      	ldr	r1, [r7, #8]
 802321a:	68f8      	ldr	r0, [r7, #12]
 802321c:	f7e5 fae1 	bl	80087e2 <mg_xprintf>
 8023220:	4602      	mov	r2, r0
 8023222:	6a3b      	ldr	r3, [r7, #32]
 8023224:	4413      	add	r3, r2
 8023226:	623b      	str	r3, [r7, #32]
 8023228:	e076      	b.n	8023318 <print_struct+0x1ac>
    } else if (strcmp(a[i].type, "double") == 0) {
 802322a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 802322c:	4613      	mov	r3, r2
 802322e:	005b      	lsls	r3, r3, #1
 8023230:	4413      	add	r3, r2
 8023232:	00db      	lsls	r3, r3, #3
 8023234:	461a      	mov	r2, r3
 8023236:	69bb      	ldr	r3, [r7, #24]
 8023238:	4413      	add	r3, r2
 802323a:	685b      	ldr	r3, [r3, #4]
 802323c:	4946      	ldr	r1, [pc, #280]	@ (8023358 <print_struct+0x1ec>)
 802323e:	4618      	mov	r0, r3
 8023240:	f7dc fffe 	bl	8000240 <strcmp>
 8023244:	4603      	mov	r3, r0
 8023246:	2b00      	cmp	r3, #0
 8023248:	d11d      	bne.n	8023286 <print_struct+0x11a>
      const char *fmt = a[i].format;
 802324a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 802324c:	4613      	mov	r3, r2
 802324e:	005b      	lsls	r3, r3, #1
 8023250:	4413      	add	r3, r2
 8023252:	00db      	lsls	r3, r3, #3
 8023254:	461a      	mov	r2, r3
 8023256:	69bb      	ldr	r3, [r7, #24]
 8023258:	4413      	add	r3, r2
 802325a:	689b      	ldr	r3, [r3, #8]
 802325c:	61fb      	str	r3, [r7, #28]
      if (fmt == NULL) fmt = "%g";
 802325e:	69fb      	ldr	r3, [r7, #28]
 8023260:	2b00      	cmp	r3, #0
 8023262:	d101      	bne.n	8023268 <print_struct+0xfc>
 8023264:	4b3d      	ldr	r3, [pc, #244]	@ (802335c <print_struct+0x1f0>)
 8023266:	61fb      	str	r3, [r7, #28]
      len += mg_xprintf(out, ptr, fmt, *(double *) attrptr);
 8023268:	693b      	ldr	r3, [r7, #16]
 802326a:	e9d3 2300 	ldrd	r2, r3, [r3]
 802326e:	e9cd 2300 	strd	r2, r3, [sp]
 8023272:	69fa      	ldr	r2, [r7, #28]
 8023274:	68b9      	ldr	r1, [r7, #8]
 8023276:	68f8      	ldr	r0, [r7, #12]
 8023278:	f7e5 fab3 	bl	80087e2 <mg_xprintf>
 802327c:	4602      	mov	r2, r0
 802327e:	6a3b      	ldr	r3, [r7, #32]
 8023280:	4413      	add	r3, r2
 8023282:	623b      	str	r3, [r7, #32]
 8023284:	e048      	b.n	8023318 <print_struct+0x1ac>
    } else if (strcmp(a[i].type, "bool") == 0) {
 8023286:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8023288:	4613      	mov	r3, r2
 802328a:	005b      	lsls	r3, r3, #1
 802328c:	4413      	add	r3, r2
 802328e:	00db      	lsls	r3, r3, #3
 8023290:	461a      	mov	r2, r3
 8023292:	69bb      	ldr	r3, [r7, #24]
 8023294:	4413      	add	r3, r2
 8023296:	685b      	ldr	r3, [r3, #4]
 8023298:	4931      	ldr	r1, [pc, #196]	@ (8023360 <print_struct+0x1f4>)
 802329a:	4618      	mov	r0, r3
 802329c:	f7dc ffd0 	bl	8000240 <strcmp>
 80232a0:	4603      	mov	r3, r0
 80232a2:	2b00      	cmp	r3, #0
 80232a4:	d110      	bne.n	80232c8 <print_struct+0x15c>
      len += mg_xprintf(out, ptr, "%s", *(bool *) attrptr ? "true" : "false");
 80232a6:	693b      	ldr	r3, [r7, #16]
 80232a8:	781b      	ldrb	r3, [r3, #0]
 80232aa:	2b00      	cmp	r3, #0
 80232ac:	d001      	beq.n	80232b2 <print_struct+0x146>
 80232ae:	4b2d      	ldr	r3, [pc, #180]	@ (8023364 <print_struct+0x1f8>)
 80232b0:	e000      	b.n	80232b4 <print_struct+0x148>
 80232b2:	4b2d      	ldr	r3, [pc, #180]	@ (8023368 <print_struct+0x1fc>)
 80232b4:	4a2d      	ldr	r2, [pc, #180]	@ (802336c <print_struct+0x200>)
 80232b6:	68b9      	ldr	r1, [r7, #8]
 80232b8:	68f8      	ldr	r0, [r7, #12]
 80232ba:	f7e5 fa92 	bl	80087e2 <mg_xprintf>
 80232be:	4602      	mov	r2, r0
 80232c0:	6a3b      	ldr	r3, [r7, #32]
 80232c2:	4413      	add	r3, r2
 80232c4:	623b      	str	r3, [r7, #32]
 80232c6:	e027      	b.n	8023318 <print_struct+0x1ac>
    } else if (strcmp(a[i].type, "string") == 0) {
 80232c8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80232ca:	4613      	mov	r3, r2
 80232cc:	005b      	lsls	r3, r3, #1
 80232ce:	4413      	add	r3, r2
 80232d0:	00db      	lsls	r3, r3, #3
 80232d2:	461a      	mov	r2, r3
 80232d4:	69bb      	ldr	r3, [r7, #24]
 80232d6:	4413      	add	r3, r2
 80232d8:	685b      	ldr	r3, [r3, #4]
 80232da:	4925      	ldr	r1, [pc, #148]	@ (8023370 <print_struct+0x204>)
 80232dc:	4618      	mov	r0, r3
 80232de:	f7dc ffaf 	bl	8000240 <strcmp>
 80232e2:	4603      	mov	r3, r0
 80232e4:	2b00      	cmp	r3, #0
 80232e6:	d10e      	bne.n	8023306 <print_struct+0x19a>
      len += mg_xprintf(out, ptr, "%m", MG_ESC(attrptr));
 80232e8:	693b      	ldr	r3, [r7, #16]
 80232ea:	9301      	str	r3, [sp, #4]
 80232ec:	2300      	movs	r3, #0
 80232ee:	9300      	str	r3, [sp, #0]
 80232f0:	4b15      	ldr	r3, [pc, #84]	@ (8023348 <print_struct+0x1dc>)
 80232f2:	4a20      	ldr	r2, [pc, #128]	@ (8023374 <print_struct+0x208>)
 80232f4:	68b9      	ldr	r1, [r7, #8]
 80232f6:	68f8      	ldr	r0, [r7, #12]
 80232f8:	f7e5 fa73 	bl	80087e2 <mg_xprintf>
 80232fc:	4602      	mov	r2, r0
 80232fe:	6a3b      	ldr	r3, [r7, #32]
 8023300:	4413      	add	r3, r2
 8023302:	623b      	str	r3, [r7, #32]
 8023304:	e008      	b.n	8023318 <print_struct+0x1ac>
    } else {
      len += mg_xprintf(out, ptr, "null");
 8023306:	4a1c      	ldr	r2, [pc, #112]	@ (8023378 <print_struct+0x20c>)
 8023308:	68b9      	ldr	r1, [r7, #8]
 802330a:	68f8      	ldr	r0, [r7, #12]
 802330c:	f7e5 fa69 	bl	80087e2 <mg_xprintf>
 8023310:	4602      	mov	r2, r0
 8023312:	6a3b      	ldr	r3, [r7, #32]
 8023314:	4413      	add	r3, r2
 8023316:	623b      	str	r3, [r7, #32]
  for (i = 0; a[i].name != NULL; i++) {
 8023318:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 802331a:	3301      	adds	r3, #1
 802331c:	627b      	str	r3, [r7, #36]	@ 0x24
 802331e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8023320:	4613      	mov	r3, r2
 8023322:	005b      	lsls	r3, r3, #1
 8023324:	4413      	add	r3, r2
 8023326:	00db      	lsls	r3, r3, #3
 8023328:	461a      	mov	r2, r3
 802332a:	69bb      	ldr	r3, [r7, #24]
 802332c:	4413      	add	r3, r2
 802332e:	681b      	ldr	r3, [r3, #0]
 8023330:	2b00      	cmp	r3, #0
 8023332:	f47f af34 	bne.w	802319e <print_struct+0x32>
    }
  }
  return len;
 8023336:	6a3b      	ldr	r3, [r7, #32]
}
 8023338:	4618      	mov	r0, r3
 802333a:	3728      	adds	r7, #40	@ 0x28
 802333c:	46bd      	mov	sp, r7
 802333e:	bd80      	pop	{r7, pc}
 8023340:	08027e04 	.word	0x08027e04
 8023344:	08027eb8 	.word	0x08027eb8
 8023348:	080126b9 	.word	0x080126b9
 802334c:	08027ebc 	.word	0x08027ebc
 8023350:	08027ec4 	.word	0x08027ec4
 8023354:	08027ec8 	.word	0x08027ec8
 8023358:	08027ecc 	.word	0x08027ecc
 802335c:	08027ed4 	.word	0x08027ed4
 8023360:	08027d10 	.word	0x08027d10
 8023364:	08027eac 	.word	0x08027eac
 8023368:	08027ea4 	.word	0x08027ea4
 802336c:	08027eb4 	.word	0x08027eb4
 8023370:	08027d04 	.word	0x08027d04
 8023374:	08027ed8 	.word	0x08027ed8
 8023378:	08027edc 	.word	0x08027edc

0802337c <handle_object>:

static void handle_object(struct mg_connection *c, struct mg_http_message *hm,
                          struct apihandler_data *h) {
 802337c:	b580      	push	{r7, lr}
 802337e:	b0a8      	sub	sp, #160	@ 0xa0
 8023380:	af04      	add	r7, sp, #16
 8023382:	60f8      	str	r0, [r7, #12]
 8023384:	60b9      	str	r1, [r7, #8]
 8023386:	607a      	str	r2, [r7, #4]
  void *data = calloc(1, h->data_size);
 8023388:	687b      	ldr	r3, [r7, #4]
 802338a:	69db      	ldr	r3, [r3, #28]
 802338c:	4619      	mov	r1, r3
 802338e:	2001      	movs	r0, #1
 8023390:	f000 fca2 	bl	8023cd8 <calloc>
 8023394:	4603      	mov	r3, r0
 8023396:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  h->getter(data);
 802339a:	687b      	ldr	r3, [r7, #4]
 802339c:	6a1b      	ldr	r3, [r3, #32]
 802339e:	f8d7 0088 	ldr.w	r0, [r7, #136]	@ 0x88
 80233a2:	4798      	blx	r3
  if (hm->body.len > 0 && h->data_size > 0) {
 80233a4:	68bb      	ldr	r3, [r7, #8]
 80233a6:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 80233aa:	2b00      	cmp	r3, #0
 80233ac:	f000 80da 	beq.w	8023564 <handle_object+0x1e8>
 80233b0:	687b      	ldr	r3, [r7, #4]
 80233b2:	69db      	ldr	r3, [r3, #28]
 80233b4:	2b00      	cmp	r3, #0
 80233b6:	f000 80d5 	beq.w	8023564 <handle_object+0x1e8>
    char *tmp = calloc(1, h->data_size);
 80233ba:	687b      	ldr	r3, [r7, #4]
 80233bc:	69db      	ldr	r3, [r3, #28]
 80233be:	4619      	mov	r1, r3
 80233c0:	2001      	movs	r0, #1
 80233c2:	f000 fc89 	bl	8023cd8 <calloc>
 80233c6:	4603      	mov	r3, r0
 80233c8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    size_t i;
    memcpy(tmp, data, h->data_size);
 80233cc:	687b      	ldr	r3, [r7, #4]
 80233ce:	69db      	ldr	r3, [r3, #28]
 80233d0:	461a      	mov	r2, r3
 80233d2:	f8d7 1088 	ldr.w	r1, [r7, #136]	@ 0x88
 80233d6:	f8d7 0084 	ldr.w	r0, [r7, #132]	@ 0x84
 80233da:	f001 f9d4 	bl	8024786 <memcpy>
    for (i = 0; h->attributes[i].name != NULL; i++) {
 80233de:	2300      	movs	r3, #0
 80233e0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80233e4:	e08e      	b.n	8023504 <handle_object+0x188>
      const struct attribute *a = &h->attributes[i];
 80233e6:	687b      	ldr	r3, [r7, #4]
 80233e8:	6999      	ldr	r1, [r3, #24]
 80233ea:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 80233ee:	4613      	mov	r3, r2
 80233f0:	005b      	lsls	r3, r3, #1
 80233f2:	4413      	add	r3, r2
 80233f4:	00db      	lsls	r3, r3, #3
 80233f6:	440b      	add	r3, r1
 80233f8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
      char jpath[100];
      mg_snprintf(jpath, sizeof(jpath), "$.%s", a->name);
 80233fc:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8023400:	681b      	ldr	r3, [r3, #0]
 8023402:	f107 0010 	add.w	r0, r7, #16
 8023406:	4a62      	ldr	r2, [pc, #392]	@ (8023590 <handle_object+0x214>)
 8023408:	2164      	movs	r1, #100	@ 0x64
 802340a:	f7ee fef9 	bl	8012200 <mg_snprintf>
      if (strcmp(a->type, "int") == 0) {
 802340e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8023412:	685b      	ldr	r3, [r3, #4]
 8023414:	495f      	ldr	r1, [pc, #380]	@ (8023594 <handle_object+0x218>)
 8023416:	4618      	mov	r0, r3
 8023418:	f7dc ff12 	bl	8000240 <strcmp>
 802341c:	4603      	mov	r3, r0
 802341e:	2b00      	cmp	r3, #0
 8023420:	d11c      	bne.n	802345c <handle_object+0xe0>
        double d;
        if (mg_json_get_num(hm->body, jpath, &d)) {
 8023422:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 8023426:	f107 0210 	add.w	r2, r7, #16
 802342a:	68b9      	ldr	r1, [r7, #8]
 802342c:	f501 7100 	add.w	r1, r1, #512	@ 0x200
 8023430:	c903      	ldmia	r1, {r0, r1}
 8023432:	f7e9 fd7c 	bl	800cf2e <mg_json_get_num>
 8023436:	4603      	mov	r3, r0
 8023438:	2b00      	cmp	r3, #0
 802343a:	d05e      	beq.n	80234fa <handle_object+0x17e>
          int v = (int) d;
 802343c:	ed97 7b1e 	vldr	d7, [r7, #120]	@ 0x78
 8023440:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8023444:	ee17 3a90 	vmov	r3, s15
 8023448:	677b      	str	r3, [r7, #116]	@ 0x74
          memcpy(tmp + a->offset, &v, sizeof(v));
 802344a:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 802344e:	68db      	ldr	r3, [r3, #12]
 8023450:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8023454:	4413      	add	r3, r2
 8023456:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8023458:	601a      	str	r2, [r3, #0]
 802345a:	e04e      	b.n	80234fa <handle_object+0x17e>
        }
      } else if (strcmp(a->type, "bool") == 0) {
 802345c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8023460:	685b      	ldr	r3, [r3, #4]
 8023462:	494d      	ldr	r1, [pc, #308]	@ (8023598 <handle_object+0x21c>)
 8023464:	4618      	mov	r0, r3
 8023466:	f7dc feeb 	bl	8000240 <strcmp>
 802346a:	4603      	mov	r3, r0
 802346c:	2b00      	cmp	r3, #0
 802346e:	d10e      	bne.n	802348e <handle_object+0x112>
        mg_json_get_bool(hm->body, jpath, (bool *) (tmp + a->offset));
 8023470:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8023474:	68db      	ldr	r3, [r3, #12]
 8023476:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 802347a:	4413      	add	r3, r2
 802347c:	f107 0210 	add.w	r2, r7, #16
 8023480:	68b9      	ldr	r1, [r7, #8]
 8023482:	f501 7100 	add.w	r1, r1, #512	@ 0x200
 8023486:	c903      	ldmia	r1, {r0, r1}
 8023488:	f7e9 fd96 	bl	800cfb8 <mg_json_get_bool>
 802348c:	e035      	b.n	80234fa <handle_object+0x17e>
      } else if (strcmp(a->type, "double") == 0) {
 802348e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8023492:	685b      	ldr	r3, [r3, #4]
 8023494:	4941      	ldr	r1, [pc, #260]	@ (802359c <handle_object+0x220>)
 8023496:	4618      	mov	r0, r3
 8023498:	f7dc fed2 	bl	8000240 <strcmp>
 802349c:	4603      	mov	r3, r0
 802349e:	2b00      	cmp	r3, #0
 80234a0:	d10e      	bne.n	80234c0 <handle_object+0x144>
        mg_json_get_num(hm->body, jpath, (double *) (tmp + a->offset));
 80234a2:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80234a6:	68db      	ldr	r3, [r3, #12]
 80234a8:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 80234ac:	4413      	add	r3, r2
 80234ae:	f107 0210 	add.w	r2, r7, #16
 80234b2:	68b9      	ldr	r1, [r7, #8]
 80234b4:	f501 7100 	add.w	r1, r1, #512	@ 0x200
 80234b8:	c903      	ldmia	r1, {r0, r1}
 80234ba:	f7e9 fd38 	bl	800cf2e <mg_json_get_num>
 80234be:	e01c      	b.n	80234fa <handle_object+0x17e>
      } else if (strcmp(a->type, "string") == 0) {
 80234c0:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80234c4:	685b      	ldr	r3, [r3, #4]
 80234c6:	4936      	ldr	r1, [pc, #216]	@ (80235a0 <handle_object+0x224>)
 80234c8:	4618      	mov	r0, r3
 80234ca:	f7dc feb9 	bl	8000240 <strcmp>
 80234ce:	4603      	mov	r3, r0
 80234d0:	2b00      	cmp	r3, #0
 80234d2:	d112      	bne.n	80234fa <handle_object+0x17e>
        mg_json_get_str2(hm->body, jpath, tmp + a->offset, a->size);
 80234d4:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80234d8:	68db      	ldr	r3, [r3, #12]
 80234da:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 80234de:	18d0      	adds	r0, r2, r3
 80234e0:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80234e4:	691b      	ldr	r3, [r3, #16]
 80234e6:	f107 0210 	add.w	r2, r7, #16
 80234ea:	68b9      	ldr	r1, [r7, #8]
 80234ec:	9300      	str	r3, [sp, #0]
 80234ee:	4603      	mov	r3, r0
 80234f0:	f501 7100 	add.w	r1, r1, #512	@ 0x200
 80234f4:	c903      	ldmia	r1, {r0, r1}
 80234f6:	f7ff fa7d 	bl	80229f4 <mg_json_get_str2>
    for (i = 0; h->attributes[i].name != NULL; i++) {
 80234fa:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80234fe:	3301      	adds	r3, #1
 8023500:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8023504:	687b      	ldr	r3, [r7, #4]
 8023506:	6999      	ldr	r1, [r3, #24]
 8023508:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 802350c:	4613      	mov	r3, r2
 802350e:	005b      	lsls	r3, r3, #1
 8023510:	4413      	add	r3, r2
 8023512:	00db      	lsls	r3, r3, #3
 8023514:	440b      	add	r3, r1
 8023516:	681b      	ldr	r3, [r3, #0]
 8023518:	2b00      	cmp	r3, #0
 802351a:	f47f af64 	bne.w	80233e6 <handle_object+0x6a>
      }
    }
    // If structure changes, increment version
    if (memcmp(data, tmp, h->data_size) != 0) s_device_change_version++;
 802351e:	687b      	ldr	r3, [r7, #4]
 8023520:	69db      	ldr	r3, [r3, #28]
 8023522:	461a      	mov	r2, r3
 8023524:	f8d7 1084 	ldr.w	r1, [r7, #132]	@ 0x84
 8023528:	f8d7 0088 	ldr.w	r0, [r7, #136]	@ 0x88
 802352c:	f000 ff84 	bl	8024438 <memcmp>
 8023530:	4603      	mov	r3, r0
 8023532:	2b00      	cmp	r3, #0
 8023534:	d004      	beq.n	8023540 <handle_object+0x1c4>
 8023536:	4b1b      	ldr	r3, [pc, #108]	@ (80235a4 <handle_object+0x228>)
 8023538:	681b      	ldr	r3, [r3, #0]
 802353a:	3301      	adds	r3, #1
 802353c:	4a19      	ldr	r2, [pc, #100]	@ (80235a4 <handle_object+0x228>)
 802353e:	6013      	str	r3, [r2, #0]
    if (h->setter != NULL) h->setter(tmp);  // Can be NULL if readonly
 8023540:	687b      	ldr	r3, [r7, #4]
 8023542:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8023544:	2b00      	cmp	r3, #0
 8023546:	d004      	beq.n	8023552 <handle_object+0x1d6>
 8023548:	687b      	ldr	r3, [r7, #4]
 802354a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 802354c:	f8d7 0084 	ldr.w	r0, [r7, #132]	@ 0x84
 8023550:	4798      	blx	r3
    free(tmp);
 8023552:	f8d7 0084 	ldr.w	r0, [r7, #132]	@ 0x84
 8023556:	f000 fbe3 	bl	8023d20 <free>
    h->getter(data);  // Re-sync again after setting
 802355a:	687b      	ldr	r3, [r7, #4]
 802355c:	6a1b      	ldr	r3, [r3, #32]
 802355e:	f8d7 0088 	ldr.w	r0, [r7, #136]	@ 0x88
 8023562:	4798      	blx	r3
  }
  mg_http_reply(c, 200, JSON_HEADERS, "{%M}\n", print_struct, h->attributes,
 8023564:	687b      	ldr	r3, [r7, #4]
 8023566:	699b      	ldr	r3, [r3, #24]
 8023568:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 802356c:	9202      	str	r2, [sp, #8]
 802356e:	9301      	str	r3, [sp, #4]
 8023570:	4b0d      	ldr	r3, [pc, #52]	@ (80235a8 <handle_object+0x22c>)
 8023572:	9300      	str	r3, [sp, #0]
 8023574:	4b0d      	ldr	r3, [pc, #52]	@ (80235ac <handle_object+0x230>)
 8023576:	4a0e      	ldr	r2, [pc, #56]	@ (80235b0 <handle_object+0x234>)
 8023578:	21c8      	movs	r1, #200	@ 0xc8
 802357a:	68f8      	ldr	r0, [r7, #12]
 802357c:	f7e7 fa56 	bl	800aa2c <mg_http_reply>
                data);
  free(data);
 8023580:	f8d7 0088 	ldr.w	r0, [r7, #136]	@ 0x88
 8023584:	f000 fbcc 	bl	8023d20 <free>
}
 8023588:	bf00      	nop
 802358a:	3790      	adds	r7, #144	@ 0x90
 802358c:	46bd      	mov	sp, r7
 802358e:	bd80      	pop	{r7, pc}
 8023590:	08027ee4 	.word	0x08027ee4
 8023594:	08027ec4 	.word	0x08027ec4
 8023598:	08027d10 	.word	0x08027d10
 802359c:	08027ecc 	.word	0x08027ecc
 80235a0:	08027d04 	.word	0x08027d04
 80235a4:	20014c5c 	.word	0x20014c5c
 80235a8:	0802316d 	.word	0x0802316d
 80235ac:	08027eec 	.word	0x08027eec
 80235b0:	08027e60 	.word	0x08027e60

080235b4 <print_array>:

static size_t print_array(void (*out)(char, void *), void *ptr, va_list *ap) {
 80235b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80235b8:	b093      	sub	sp, #76	@ 0x4c
 80235ba:	af02      	add	r7, sp, #8
 80235bc:	6178      	str	r0, [r7, #20]
 80235be:	6139      	str	r1, [r7, #16]
 80235c0:	60fa      	str	r2, [r7, #12]
  struct apihandler_array *ha = va_arg(*ap, struct apihandler_array *);
 80235c2:	68fb      	ldr	r3, [r7, #12]
 80235c4:	681b      	ldr	r3, [r3, #0]
 80235c6:	1d19      	adds	r1, r3, #4
 80235c8:	68fa      	ldr	r2, [r7, #12]
 80235ca:	6011      	str	r1, [r2, #0]
 80235cc:	681b      	ldr	r3, [r3, #0]
 80235ce:	637b      	str	r3, [r7, #52]	@ 0x34
  uint64_t size = *va_arg(*ap, uint64_t *);
 80235d0:	68fb      	ldr	r3, [r7, #12]
 80235d2:	681b      	ldr	r3, [r3, #0]
 80235d4:	1d19      	adds	r1, r3, #4
 80235d6:	68fa      	ldr	r2, [r7, #12]
 80235d8:	6011      	str	r1, [r2, #0]
 80235da:	681b      	ldr	r3, [r3, #0]
 80235dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80235e0:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
  uint64_t start = *va_arg(*ap, uint64_t *);
 80235e4:	68fb      	ldr	r3, [r7, #12]
 80235e6:	681b      	ldr	r3, [r3, #0]
 80235e8:	1d19      	adds	r1, r3, #4
 80235ea:	68fa      	ldr	r2, [r7, #12]
 80235ec:	6011      	str	r1, [r2, #0]
 80235ee:	681b      	ldr	r3, [r3, #0]
 80235f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80235f4:	e9c7 2308 	strd	r2, r3, [r7, #32]
  size_t i, max = 20, len = 0;
 80235f8:	2314      	movs	r3, #20
 80235fa:	61fb      	str	r3, [r7, #28]
 80235fc:	2300      	movs	r3, #0
 80235fe:	63bb      	str	r3, [r7, #56]	@ 0x38
  void *data = calloc(1, ha->data_size);
 8023600:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8023602:	69db      	ldr	r3, [r3, #28]
 8023604:	4619      	mov	r1, r3
 8023606:	2001      	movs	r0, #1
 8023608:	f000 fb66 	bl	8023cd8 <calloc>
 802360c:	4603      	mov	r3, r0
 802360e:	61bb      	str	r3, [r7, #24]
  for (i = 0; i < max && start + i < size; i++) {
 8023610:	2300      	movs	r3, #0
 8023612:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8023614:	e02f      	b.n	8023676 <print_array+0xc2>
    ha->getter(start + i, data);
 8023616:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8023618:	6a1e      	ldr	r6, [r3, #32]
 802361a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 802361c:	2200      	movs	r2, #0
 802361e:	469a      	mov	sl, r3
 8023620:	4693      	mov	fp, r2
 8023622:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8023626:	eb1a 0102 	adds.w	r1, sl, r2
 802362a:	6039      	str	r1, [r7, #0]
 802362c:	eb4b 0303 	adc.w	r3, fp, r3
 8023630:	607b      	str	r3, [r7, #4]
 8023632:	69ba      	ldr	r2, [r7, #24]
 8023634:	e9d7 0100 	ldrd	r0, r1, [r7]
 8023638:	47b0      	blx	r6
    if (i > 0) len += mg_xprintf(out, ptr, ",");
 802363a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 802363c:	2b00      	cmp	r3, #0
 802363e:	d008      	beq.n	8023652 <print_array+0x9e>
 8023640:	4a1b      	ldr	r2, [pc, #108]	@ (80236b0 <print_array+0xfc>)
 8023642:	6939      	ldr	r1, [r7, #16]
 8023644:	6978      	ldr	r0, [r7, #20]
 8023646:	f7e5 f8cc 	bl	80087e2 <mg_xprintf>
 802364a:	4602      	mov	r2, r0
 802364c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 802364e:	4413      	add	r3, r2
 8023650:	63bb      	str	r3, [r7, #56]	@ 0x38
    len += mg_xprintf(out, ptr, "{%M}", print_struct, ha->attributes, data);
 8023652:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8023654:	699b      	ldr	r3, [r3, #24]
 8023656:	69ba      	ldr	r2, [r7, #24]
 8023658:	9201      	str	r2, [sp, #4]
 802365a:	9300      	str	r3, [sp, #0]
 802365c:	4b15      	ldr	r3, [pc, #84]	@ (80236b4 <print_array+0x100>)
 802365e:	4a16      	ldr	r2, [pc, #88]	@ (80236b8 <print_array+0x104>)
 8023660:	6939      	ldr	r1, [r7, #16]
 8023662:	6978      	ldr	r0, [r7, #20]
 8023664:	f7e5 f8bd 	bl	80087e2 <mg_xprintf>
 8023668:	4602      	mov	r2, r0
 802366a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 802366c:	4413      	add	r3, r2
 802366e:	63bb      	str	r3, [r7, #56]	@ 0x38
  for (i = 0; i < max && start + i < size; i++) {
 8023670:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8023672:	3301      	adds	r3, #1
 8023674:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8023676:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8023678:	69fb      	ldr	r3, [r7, #28]
 802367a:	429a      	cmp	r2, r3
 802367c:	d20f      	bcs.n	802369e <print_array+0xea>
 802367e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8023680:	2200      	movs	r2, #0
 8023682:	4698      	mov	r8, r3
 8023684:	4691      	mov	r9, r2
 8023686:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 802368a:	eb18 0402 	adds.w	r4, r8, r2
 802368e:	eb49 0503 	adc.w	r5, r9, r3
 8023692:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8023696:	4294      	cmp	r4, r2
 8023698:	eb75 0303 	sbcs.w	r3, r5, r3
 802369c:	d3bb      	bcc.n	8023616 <print_array+0x62>
  }
  free(data);
 802369e:	69b8      	ldr	r0, [r7, #24]
 80236a0:	f000 fb3e 	bl	8023d20 <free>
  return len;
 80236a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 80236a6:	4618      	mov	r0, r3
 80236a8:	3744      	adds	r7, #68	@ 0x44
 80236aa:	46bd      	mov	sp, r7
 80236ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80236b0:	08027eb8 	.word	0x08027eb8
 80236b4:	0802316d 	.word	0x0802316d
 80236b8:	08027ef4 	.word	0x08027ef4

080236bc <handle_array>:

static void handle_array(struct mg_connection *c, struct mg_http_message *hm,
                         struct apihandler_array *h) {
 80236bc:	b590      	push	{r4, r7, lr}
 80236be:	b0a9      	sub	sp, #164	@ 0xa4
 80236c0:	af14      	add	r7, sp, #80	@ 0x50
 80236c2:	60f8      	str	r0, [r7, #12]
 80236c4:	60b9      	str	r1, [r7, #8]
 80236c6:	607a      	str	r2, [r7, #4]
  char buf[40] = "";
 80236c8:	f107 0320 	add.w	r3, r7, #32
 80236cc:	2228      	movs	r2, #40	@ 0x28
 80236ce:	2100      	movs	r1, #0
 80236d0:	4618      	mov	r0, r3
 80236d2:	f000 fedb 	bl	802448c <memset>
  uint64_t size = h->sizer();
 80236d6:	687b      	ldr	r3, [r7, #4]
 80236d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80236da:	4798      	blx	r3
 80236dc:	4602      	mov	r2, r0
 80236de:	460b      	mov	r3, r1
 80236e0:	e9c7 2306 	strd	r2, r3, [r7, #24]
  uint64_t start = 0;
 80236e4:	f04f 0200 	mov.w	r2, #0
 80236e8:	f04f 0300 	mov.w	r3, #0
 80236ec:	e9c7 2304 	strd	r2, r3, [r7, #16]
  mg_http_get_var(&hm->query, "start", buf, sizeof(buf));
 80236f0:	68bb      	ldr	r3, [r7, #8]
 80236f2:	f103 0010 	add.w	r0, r3, #16
 80236f6:	f107 0220 	add.w	r2, r7, #32
 80236fa:	2328      	movs	r3, #40	@ 0x28
 80236fc:	4927      	ldr	r1, [pc, #156]	@ (802379c <handle_array+0xe0>)
 80236fe:	f7e5 ffb7 	bl	8009670 <mg_http_get_var>
  if (!mg_str_to_num(mg_str(buf), 10, &start, sizeof(start))) start = 0;
 8023702:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8023706:	f107 0220 	add.w	r2, r7, #32
 802370a:	4611      	mov	r1, r2
 802370c:	4618      	mov	r0, r3
 802370e:	f7f2 f93f 	bl	8015990 <mg_str_s>
 8023712:	f107 0310 	add.w	r3, r7, #16
 8023716:	2208      	movs	r2, #8
 8023718:	9200      	str	r2, [sp, #0]
 802371a:	220a      	movs	r2, #10
 802371c:	f107 0148 	add.w	r1, r7, #72	@ 0x48
 8023720:	c903      	ldmia	r1, {r0, r1}
 8023722:	f7f2 fb8f 	bl	8015e44 <mg_str_to_num>
 8023726:	4603      	mov	r3, r0
 8023728:	f083 0301 	eor.w	r3, r3, #1
 802372c:	b2db      	uxtb	r3, r3
 802372e:	2b00      	cmp	r3, #0
 8023730:	d005      	beq.n	802373e <handle_array+0x82>
 8023732:	f04f 0200 	mov.w	r2, #0
 8023736:	f04f 0300 	mov.w	r3, #0
 802373a:	e9c7 2304 	strd	r2, r3, [r7, #16]
  mg_http_reply(c, 200, JSON_HEADERS, "{%m:%llu, %m:%llu, %m:[%M]}\n",
 802373e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8023742:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8023746:	f107 0410 	add.w	r4, r7, #16
 802374a:	9412      	str	r4, [sp, #72]	@ 0x48
 802374c:	f107 0418 	add.w	r4, r7, #24
 8023750:	9411      	str	r4, [sp, #68]	@ 0x44
 8023752:	687c      	ldr	r4, [r7, #4]
 8023754:	9410      	str	r4, [sp, #64]	@ 0x40
 8023756:	4c12      	ldr	r4, [pc, #72]	@ (80237a0 <handle_array+0xe4>)
 8023758:	940f      	str	r4, [sp, #60]	@ 0x3c
 802375a:	4c12      	ldr	r4, [pc, #72]	@ (80237a4 <handle_array+0xe8>)
 802375c:	940e      	str	r4, [sp, #56]	@ 0x38
 802375e:	2400      	movs	r4, #0
 8023760:	940d      	str	r4, [sp, #52]	@ 0x34
 8023762:	4c11      	ldr	r4, [pc, #68]	@ (80237a8 <handle_array+0xec>)
 8023764:	940c      	str	r4, [sp, #48]	@ 0x30
 8023766:	e9cd 010a 	strd	r0, r1, [sp, #40]	@ 0x28
 802376a:	490c      	ldr	r1, [pc, #48]	@ (802379c <handle_array+0xe0>)
 802376c:	9108      	str	r1, [sp, #32]
 802376e:	2100      	movs	r1, #0
 8023770:	9107      	str	r1, [sp, #28]
 8023772:	490d      	ldr	r1, [pc, #52]	@ (80237a8 <handle_array+0xec>)
 8023774:	9106      	str	r1, [sp, #24]
 8023776:	e9cd 2304 	strd	r2, r3, [sp, #16]
 802377a:	4b0c      	ldr	r3, [pc, #48]	@ (80237ac <handle_array+0xf0>)
 802377c:	9302      	str	r3, [sp, #8]
 802377e:	2300      	movs	r3, #0
 8023780:	9301      	str	r3, [sp, #4]
 8023782:	4b09      	ldr	r3, [pc, #36]	@ (80237a8 <handle_array+0xec>)
 8023784:	9300      	str	r3, [sp, #0]
 8023786:	4b0a      	ldr	r3, [pc, #40]	@ (80237b0 <handle_array+0xf4>)
 8023788:	4a0a      	ldr	r2, [pc, #40]	@ (80237b4 <handle_array+0xf8>)
 802378a:	21c8      	movs	r1, #200	@ 0xc8
 802378c:	68f8      	ldr	r0, [r7, #12]
 802378e:	f7e7 f94d 	bl	800aa2c <mg_http_reply>
                MG_ESC("size"), size, MG_ESC("start"), start, MG_ESC("data"),
                print_array, h, &size, &start);
}
 8023792:	bf00      	nop
 8023794:	3754      	adds	r7, #84	@ 0x54
 8023796:	46bd      	mov	sp, r7
 8023798:	bd90      	pop	{r4, r7, pc}
 802379a:	bf00      	nop
 802379c:	08027efc 	.word	0x08027efc
 80237a0:	080235b5 	.word	0x080235b5
 80237a4:	08027d20 	.word	0x08027d20
 80237a8:	080126b9 	.word	0x080126b9
 80237ac:	08027f24 	.word	0x08027f24
 80237b0:	08027f04 	.word	0x08027f04
 80237b4:	08027e60 	.word	0x08027e60

080237b8 <handle_file>:
  }
  return len;
}

static void handle_file(struct mg_connection *c, struct mg_http_message *hm,
                        struct apihandler_file *hf) {
 80237b8:	b580      	push	{r7, lr}
 80237ba:	b0a4      	sub	sp, #144	@ 0x90
 80237bc:	af00      	add	r7, sp, #0
 80237be:	60f8      	str	r0, [r7, #12]
 80237c0:	60b9      	str	r1, [r7, #8]
 80237c2:	607a      	str	r2, [r7, #4]
  char path[MG_PATH_MAX];
  get_file_name_from_uri(hm->uri, path, sizeof(path));
 80237c4:	f107 0210 	add.w	r2, r7, #16
 80237c8:	68b9      	ldr	r1, [r7, #8]
 80237ca:	2380      	movs	r3, #128	@ 0x80
 80237cc:	3108      	adds	r1, #8
 80237ce:	c903      	ldmia	r1, {r0, r1}
 80237d0:	f7ff fb58 	bl	8022e84 <get_file_name_from_uri>
  hf->server(c, hm, path);
 80237d4:	687b      	ldr	r3, [r7, #4]
 80237d6:	69db      	ldr	r3, [r3, #28]
 80237d8:	f107 0210 	add.w	r2, r7, #16
 80237dc:	68b9      	ldr	r1, [r7, #8]
 80237de:	68f8      	ldr	r0, [r7, #12]
 80237e0:	4798      	blx	r3
}
 80237e2:	bf00      	nop
 80237e4:	3790      	adds	r7, #144	@ 0x90
 80237e6:	46bd      	mov	sp, r7
 80237e8:	bd80      	pop	{r7, pc}
	...

080237ec <handle_api_call>:

static void handle_api_call(struct mg_connection *c, struct mg_http_message *hm,
                            struct apihandler *h) {
 80237ec:	b580      	push	{r7, lr}
 80237ee:	b088      	sub	sp, #32
 80237f0:	af02      	add	r7, sp, #8
 80237f2:	60f8      	str	r0, [r7, #12]
 80237f4:	60b9      	str	r1, [r7, #8]
 80237f6:	607a      	str	r2, [r7, #4]
  if (strcmp(h->type, "object") == 0 || strcmp(h->type, "data") == 0) {
 80237f8:	687b      	ldr	r3, [r7, #4]
 80237fa:	685b      	ldr	r3, [r3, #4]
 80237fc:	4932      	ldr	r1, [pc, #200]	@ (80238c8 <handle_api_call+0xdc>)
 80237fe:	4618      	mov	r0, r3
 8023800:	f7dc fd1e 	bl	8000240 <strcmp>
 8023804:	4603      	mov	r3, r0
 8023806:	2b00      	cmp	r3, #0
 8023808:	d008      	beq.n	802381c <handle_api_call+0x30>
 802380a:	687b      	ldr	r3, [r7, #4]
 802380c:	685b      	ldr	r3, [r3, #4]
 802380e:	492f      	ldr	r1, [pc, #188]	@ (80238cc <handle_api_call+0xe0>)
 8023810:	4618      	mov	r0, r3
 8023812:	f7dc fd15 	bl	8000240 <strcmp>
 8023816:	4603      	mov	r3, r0
 8023818:	2b00      	cmp	r3, #0
 802381a:	d105      	bne.n	8023828 <handle_api_call+0x3c>
    handle_object(c, hm, (struct apihandler_data *) h);
 802381c:	687a      	ldr	r2, [r7, #4]
 802381e:	68b9      	ldr	r1, [r7, #8]
 8023820:	68f8      	ldr	r0, [r7, #12]
 8023822:	f7ff fdab 	bl	802337c <handle_object>
  } else if (strcmp(h->type, "custom") == 0) {
    ((struct apihandler_custom *) h)->reply(c, hm);
  } else {
    mg_http_reply(c, 500, JSON_HEADERS, "API type %s unknown\n", h->type);
  }
}
 8023826:	e04a      	b.n	80238be <handle_api_call+0xd2>
  } else if (strcmp(h->type, "array") == 0) {
 8023828:	687b      	ldr	r3, [r7, #4]
 802382a:	685b      	ldr	r3, [r3, #4]
 802382c:	4928      	ldr	r1, [pc, #160]	@ (80238d0 <handle_api_call+0xe4>)
 802382e:	4618      	mov	r0, r3
 8023830:	f7dc fd06 	bl	8000240 <strcmp>
 8023834:	4603      	mov	r3, r0
 8023836:	2b00      	cmp	r3, #0
 8023838:	d105      	bne.n	8023846 <handle_api_call+0x5a>
    handle_array(c, hm, (struct apihandler_array *) h);
 802383a:	687a      	ldr	r2, [r7, #4]
 802383c:	68b9      	ldr	r1, [r7, #8]
 802383e:	68f8      	ldr	r0, [r7, #12]
 8023840:	f7ff ff3c 	bl	80236bc <handle_array>
}
 8023844:	e03b      	b.n	80238be <handle_api_call+0xd2>
  } else if (strcmp(h->type, "action") == 0) {
 8023846:	687b      	ldr	r3, [r7, #4]
 8023848:	685b      	ldr	r3, [r3, #4]
 802384a:	4922      	ldr	r1, [pc, #136]	@ (80238d4 <handle_api_call+0xe8>)
 802384c:	4618      	mov	r0, r3
 802384e:	f7dc fcf7 	bl	8000240 <strcmp>
 8023852:	4603      	mov	r3, r0
 8023854:	2b00      	cmp	r3, #0
 8023856:	d10a      	bne.n	802386e <handle_api_call+0x82>
    struct apihandler_action *ha = (struct apihandler_action *) h;
 8023858:	687b      	ldr	r3, [r7, #4]
 802385a:	617b      	str	r3, [r7, #20]
    handle_action(c, hm, ha->checker, ha->starter);
 802385c:	697b      	ldr	r3, [r7, #20]
 802385e:	699a      	ldr	r2, [r3, #24]
 8023860:	697b      	ldr	r3, [r7, #20]
 8023862:	69db      	ldr	r3, [r3, #28]
 8023864:	68b9      	ldr	r1, [r7, #8]
 8023866:	68f8      	ldr	r0, [r7, #12]
 8023868:	f7ff fc3c 	bl	80230e4 <handle_action>
}
 802386c:	e027      	b.n	80238be <handle_api_call+0xd2>
  } else if (strcmp(h->type, "file") == 0) {
 802386e:	687b      	ldr	r3, [r7, #4]
 8023870:	685b      	ldr	r3, [r3, #4]
 8023872:	4919      	ldr	r1, [pc, #100]	@ (80238d8 <handle_api_call+0xec>)
 8023874:	4618      	mov	r0, r3
 8023876:	f7dc fce3 	bl	8000240 <strcmp>
 802387a:	4603      	mov	r3, r0
 802387c:	2b00      	cmp	r3, #0
 802387e:	d105      	bne.n	802388c <handle_api_call+0xa0>
    handle_file(c, hm, (struct apihandler_file *) h);
 8023880:	687a      	ldr	r2, [r7, #4]
 8023882:	68b9      	ldr	r1, [r7, #8]
 8023884:	68f8      	ldr	r0, [r7, #12]
 8023886:	f7ff ff97 	bl	80237b8 <handle_file>
}
 802388a:	e018      	b.n	80238be <handle_api_call+0xd2>
  } else if (strcmp(h->type, "custom") == 0) {
 802388c:	687b      	ldr	r3, [r7, #4]
 802388e:	685b      	ldr	r3, [r3, #4]
 8023890:	4912      	ldr	r1, [pc, #72]	@ (80238dc <handle_api_call+0xf0>)
 8023892:	4618      	mov	r0, r3
 8023894:	f7dc fcd4 	bl	8000240 <strcmp>
 8023898:	4603      	mov	r3, r0
 802389a:	2b00      	cmp	r3, #0
 802389c:	d105      	bne.n	80238aa <handle_api_call+0xbe>
    ((struct apihandler_custom *) h)->reply(c, hm);
 802389e:	687b      	ldr	r3, [r7, #4]
 80238a0:	699b      	ldr	r3, [r3, #24]
 80238a2:	68b9      	ldr	r1, [r7, #8]
 80238a4:	68f8      	ldr	r0, [r7, #12]
 80238a6:	4798      	blx	r3
}
 80238a8:	e009      	b.n	80238be <handle_api_call+0xd2>
    mg_http_reply(c, 500, JSON_HEADERS, "API type %s unknown\n", h->type);
 80238aa:	687b      	ldr	r3, [r7, #4]
 80238ac:	685b      	ldr	r3, [r3, #4]
 80238ae:	9300      	str	r3, [sp, #0]
 80238b0:	4b0b      	ldr	r3, [pc, #44]	@ (80238e0 <handle_api_call+0xf4>)
 80238b2:	4a0c      	ldr	r2, [pc, #48]	@ (80238e4 <handle_api_call+0xf8>)
 80238b4:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 80238b8:	68f8      	ldr	r0, [r7, #12]
 80238ba:	f7e7 f8b7 	bl	800aa2c <mg_http_reply>
}
 80238be:	bf00      	nop
 80238c0:	3718      	adds	r7, #24
 80238c2:	46bd      	mov	sp, r7
 80238c4:	bd80      	pop	{r7, pc}
 80238c6:	bf00      	nop
 80238c8:	08027f38 	.word	0x08027f38
 80238cc:	08027d20 	.word	0x08027d20
 80238d0:	08027f40 	.word	0x08027f40
 80238d4:	08027d64 	.word	0x08027d64
 80238d8:	08027d6c 	.word	0x08027d6c
 80238dc:	08027d80 	.word	0x08027d80
 80238e0:	08027f48 	.word	0x08027f48
 80238e4:	08027e60 	.word	0x08027e60

080238e8 <http_ev_handler>:
void glue_update_state(void) {
  s_device_change_version++;
}

// Mongoose event handler function, gets called by the mg_mgr_poll()
static void http_ev_handler(struct mg_connection *c, int ev, void *ev_data) {
 80238e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80238ea:	b0a9      	sub	sp, #164	@ 0xa4
 80238ec:	af06      	add	r7, sp, #24
 80238ee:	61f8      	str	r0, [r7, #28]
 80238f0:	61b9      	str	r1, [r7, #24]
 80238f2:	617a      	str	r2, [r7, #20]
  if (ev == MG_EV_HTTP_HDRS && c->data[0] == 0) {
 80238f4:	69bb      	ldr	r3, [r7, #24]
 80238f6:	2b0a      	cmp	r3, #10
    }
#endif
  }

  // We're checking c->is_websocket cause WS connection use c->data
  if (c->is_websocket == 0) handle_uploads(c, ev, ev_data);
 80238f8:	69fb      	ldr	r3, [r7, #28]
 80238fa:	f893 30b5 	ldrb.w	r3, [r3, #181]	@ 0xb5
 80238fe:	f003 0302 	and.w	r3, r3, #2
 8023902:	b2db      	uxtb	r3, r3
 8023904:	2b00      	cmp	r3, #0
 8023906:	d104      	bne.n	8023912 <http_ev_handler+0x2a>
 8023908:	697a      	ldr	r2, [r7, #20]
 802390a:	69b9      	ldr	r1, [r7, #24]
 802390c:	69f8      	ldr	r0, [r7, #28]
 802390e:	f7ff fb77 	bl	8023000 <handle_uploads>
  if (ev == MG_EV_POLL && c->is_websocket == 0 && c->data[0] == 'A') {
 8023912:	69bb      	ldr	r3, [r7, #24]
 8023914:	2b02      	cmp	r3, #2
 8023916:	d128      	bne.n	802396a <http_ev_handler+0x82>
 8023918:	69fb      	ldr	r3, [r7, #28]
 802391a:	f893 30b5 	ldrb.w	r3, [r3, #181]	@ 0xb5
 802391e:	f003 0302 	and.w	r3, r3, #2
 8023922:	b2db      	uxtb	r3, r3
 8023924:	2b00      	cmp	r3, #0
 8023926:	d120      	bne.n	802396a <http_ev_handler+0x82>
 8023928:	69fb      	ldr	r3, [r7, #28]
 802392a:	f893 3090 	ldrb.w	r3, [r3, #144]	@ 0x90
 802392e:	2b41      	cmp	r3, #65	@ 0x41
 8023930:	d11b      	bne.n	802396a <http_ev_handler+0x82>
    // Check if action in progress is complete
    struct action_state *as = (struct action_state *) c->data;
 8023932:	69fb      	ldr	r3, [r7, #28]
 8023934:	3390      	adds	r3, #144	@ 0x90
 8023936:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    if (as->fn() == false) {
 802393a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 802393e:	685b      	ldr	r3, [r3, #4]
 8023940:	4798      	blx	r3
 8023942:	4603      	mov	r3, r0
 8023944:	f083 0301 	eor.w	r3, r3, #1
 8023948:	b2db      	uxtb	r3, r3
 802394a:	2b00      	cmp	r3, #0
 802394c:	f000 80df 	beq.w	8023b0e <http_ev_handler+0x226>
      mg_http_reply(c, 200, JSON_HEADERS, "true");
 8023950:	4b96      	ldr	r3, [pc, #600]	@ (8023bac <http_ev_handler+0x2c4>)
 8023952:	4a97      	ldr	r2, [pc, #604]	@ (8023bb0 <http_ev_handler+0x2c8>)
 8023954:	21c8      	movs	r1, #200	@ 0xc8
 8023956:	69f8      	ldr	r0, [r7, #28]
 8023958:	f7e7 f868 	bl	800aa2c <mg_http_reply>
      memset(as, 0, sizeof(*as));
 802395c:	2208      	movs	r2, #8
 802395e:	2100      	movs	r1, #0
 8023960:	f8d7 0084 	ldr.w	r0, [r7, #132]	@ 0x84
 8023964:	f000 fd92 	bl	802448c <memset>
  if (ev == MG_EV_POLL && c->is_websocket == 0 && c->data[0] == 'A') {
 8023968:	e0d1      	b.n	8023b0e <http_ev_handler+0x226>
    }
  } else if (ev == MG_EV_HTTP_MSG && c->is_websocket == 0 && c->data[0] == 0) {
 802396a:	69bb      	ldr	r3, [r7, #24]
 802396c:	2b0b      	cmp	r3, #11
 802396e:	f040 8096 	bne.w	8023a9e <http_ev_handler+0x1b6>
 8023972:	69fb      	ldr	r3, [r7, #28]
 8023974:	f893 30b5 	ldrb.w	r3, [r3, #181]	@ 0xb5
 8023978:	f003 0302 	and.w	r3, r3, #2
 802397c:	b2db      	uxtb	r3, r3
 802397e:	2b00      	cmp	r3, #0
 8023980:	f040 808d 	bne.w	8023a9e <http_ev_handler+0x1b6>
 8023984:	69fb      	ldr	r3, [r7, #28]
 8023986:	f893 3090 	ldrb.w	r3, [r3, #144]	@ 0x90
 802398a:	2b00      	cmp	r3, #0
 802398c:	f040 8087 	bne.w	8023a9e <http_ev_handler+0x1b6>
    struct mg_http_message *hm = (struct mg_http_message *) ev_data;
 8023990:	697b      	ldr	r3, [r7, #20]
 8023992:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
#if WIZARD_ENABLE_HTTP || WIZARD_ENABLE_HTTPS
    struct apihandler *h = find_handler(hm);
 8023996:	f8d7 0080 	ldr.w	r0, [r7, #128]	@ 0x80
 802399a:	f7fe ffff 	bl	802299c <find_handler>
 802399e:	67f8      	str	r0, [r7, #124]	@ 0x7c
      handle_login(c, u);
    } else if (mg_match(hm->uri, mg_str("/api/logout"), NULL)) {
      handle_logout(c);
    } else
#endif
        if (mg_match(hm->uri, mg_str("/api/ok"), NULL)) {
 80239a0:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 80239a4:	4983      	ldr	r1, [pc, #524]	@ (8023bb4 <http_ev_handler+0x2cc>)
 80239a6:	4618      	mov	r0, r3
 80239a8:	f7f1 fff2 	bl	8015990 <mg_str_s>
 80239ac:	f8d7 1080 	ldr.w	r1, [r7, #128]	@ 0x80
 80239b0:	2300      	movs	r3, #0
 80239b2:	9300      	str	r3, [sp, #0]
 80239b4:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 80239b8:	cb0c      	ldmia	r3, {r2, r3}
 80239ba:	3108      	adds	r1, #8
 80239bc:	c903      	ldmia	r1, {r0, r1}
 80239be:	f7f2 f8f0 	bl	8015ba2 <mg_match>
 80239c2:	4603      	mov	r3, r0
 80239c4:	2b00      	cmp	r3, #0
 80239c6:	d006      	beq.n	80239d6 <http_ev_handler+0xee>
      mg_http_reply(c, 200, JSON_HEADERS, "true\n");
 80239c8:	4b7b      	ldr	r3, [pc, #492]	@ (8023bb8 <http_ev_handler+0x2d0>)
 80239ca:	4a79      	ldr	r2, [pc, #484]	@ (8023bb0 <http_ev_handler+0x2c8>)
 80239cc:	21c8      	movs	r1, #200	@ 0xc8
 80239ce:	69f8      	ldr	r0, [r7, #28]
 80239d0:	f7e7 f82c 	bl	800aa2c <mg_http_reply>
  } else if (ev == MG_EV_HTTP_MSG && c->is_websocket == 0 && c->data[0] == 0) {
 80239d4:	e09d      	b.n	8023b12 <http_ev_handler+0x22a>
    } else if (mg_match(hm->uri, mg_str("/websocket"), NULL)) {
 80239d6:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 80239da:	4978      	ldr	r1, [pc, #480]	@ (8023bbc <http_ev_handler+0x2d4>)
 80239dc:	4618      	mov	r0, r3
 80239de:	f7f1 ffd7 	bl	8015990 <mg_str_s>
 80239e2:	f8d7 1080 	ldr.w	r1, [r7, #128]	@ 0x80
 80239e6:	2300      	movs	r3, #0
 80239e8:	9300      	str	r3, [sp, #0]
 80239ea:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 80239ee:	cb0c      	ldmia	r3, {r2, r3}
 80239f0:	3108      	adds	r1, #8
 80239f2:	c903      	ldmia	r1, {r0, r1}
 80239f4:	f7f2 f8d5 	bl	8015ba2 <mg_match>
 80239f8:	4603      	mov	r3, r0
 80239fa:	2b00      	cmp	r3, #0
 80239fc:	d006      	beq.n	8023a0c <http_ev_handler+0x124>
      mg_ws_upgrade(c, hm, NULL);
 80239fe:	2200      	movs	r2, #0
 8023a00:	f8d7 1080 	ldr.w	r1, [r7, #128]	@ 0x80
 8023a04:	69f8      	ldr	r0, [r7, #28]
 8023a06:	f7fd ffe1 	bl	80219cc <mg_ws_upgrade>
  } else if (ev == MG_EV_HTTP_MSG && c->is_websocket == 0 && c->data[0] == 0) {
 8023a0a:	e082      	b.n	8023b12 <http_ev_handler+0x22a>
    } else if (mg_match(hm->uri, mg_str("/api/heartbeat"), NULL)) {
 8023a0c:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8023a10:	496b      	ldr	r1, [pc, #428]	@ (8023bc0 <http_ev_handler+0x2d8>)
 8023a12:	4618      	mov	r0, r3
 8023a14:	f7f1 ffbc 	bl	8015990 <mg_str_s>
 8023a18:	f8d7 1080 	ldr.w	r1, [r7, #128]	@ 0x80
 8023a1c:	2300      	movs	r3, #0
 8023a1e:	9300      	str	r3, [sp, #0]
 8023a20:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8023a24:	cb0c      	ldmia	r3, {r2, r3}
 8023a26:	3108      	adds	r1, #8
 8023a28:	c903      	ldmia	r1, {r0, r1}
 8023a2a:	f7f2 f8ba 	bl	8015ba2 <mg_match>
 8023a2e:	4603      	mov	r3, r0
 8023a30:	2b00      	cmp	r3, #0
 8023a32:	d00f      	beq.n	8023a54 <http_ev_handler+0x16c>
      mg_http_reply(c, 200, JSON_HEADERS, "{%m:%lu}\n", MG_ESC("version"),
 8023a34:	4b63      	ldr	r3, [pc, #396]	@ (8023bc4 <http_ev_handler+0x2dc>)
 8023a36:	681b      	ldr	r3, [r3, #0]
 8023a38:	9303      	str	r3, [sp, #12]
 8023a3a:	4b63      	ldr	r3, [pc, #396]	@ (8023bc8 <http_ev_handler+0x2e0>)
 8023a3c:	9302      	str	r3, [sp, #8]
 8023a3e:	2300      	movs	r3, #0
 8023a40:	9301      	str	r3, [sp, #4]
 8023a42:	4b62      	ldr	r3, [pc, #392]	@ (8023bcc <http_ev_handler+0x2e4>)
 8023a44:	9300      	str	r3, [sp, #0]
 8023a46:	4b62      	ldr	r3, [pc, #392]	@ (8023bd0 <http_ev_handler+0x2e8>)
 8023a48:	4a59      	ldr	r2, [pc, #356]	@ (8023bb0 <http_ev_handler+0x2c8>)
 8023a4a:	21c8      	movs	r1, #200	@ 0xc8
 8023a4c:	69f8      	ldr	r0, [r7, #28]
 8023a4e:	f7e6 ffed 	bl	800aa2c <mg_http_reply>
  } else if (ev == MG_EV_HTTP_MSG && c->is_websocket == 0 && c->data[0] == 0) {
 8023a52:	e05e      	b.n	8023b12 <http_ev_handler+0x22a>
                    s_device_change_version);
    } else if (h != NULL) {
 8023a54:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8023a56:	2b00      	cmp	r3, #0
 8023a58:	d006      	beq.n	8023a68 <http_ev_handler+0x180>
      handle_api_call(c, hm, h);
 8023a5a:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8023a5c:	f8d7 1080 	ldr.w	r1, [r7, #128]	@ 0x80
 8023a60:	69f8      	ldr	r0, [r7, #28]
 8023a62:	f7ff fec3 	bl	80237ec <handle_api_call>
  } else if (ev == MG_EV_HTTP_MSG && c->is_websocket == 0 && c->data[0] == 0) {
 8023a66:	e054      	b.n	8023b12 <http_ev_handler+0x22a>
    } else if (c->data[0] == 0)
 8023a68:	69fb      	ldr	r3, [r7, #28]
 8023a6a:	f893 3090 	ldrb.w	r3, [r3, #144]	@ 0x90
 8023a6e:	2b00      	cmp	r3, #0
 8023a70:	d14f      	bne.n	8023b12 <http_ev_handler+0x22a>
#endif  // WIZARD_ENABLE_HTTP || WIZARD_ENABLE_HTTPS
    {
#if WIZARD_ENABLE_HTTP_UI
      struct mg_http_serve_opts opts;
      memset(&opts, 0, sizeof(opts));
 8023a72:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8023a76:	2218      	movs	r2, #24
 8023a78:	2100      	movs	r1, #0
 8023a7a:	4618      	mov	r0, r3
 8023a7c:	f000 fd06 	bl	802448c <memset>
      opts.root_dir = "/web_root/";
 8023a80:	4b54      	ldr	r3, [pc, #336]	@ (8023bd4 <http_ev_handler+0x2ec>)
 8023a82:	64bb      	str	r3, [r7, #72]	@ 0x48
      opts.fs = &mg_fs_packed;
 8023a84:	4b54      	ldr	r3, [pc, #336]	@ (8023bd8 <http_ev_handler+0x2f0>)
 8023a86:	65fb      	str	r3, [r7, #92]	@ 0x5c
      opts.extra_headers = NO_CACHE_HEADERS;
 8023a88:	4b54      	ldr	r3, [pc, #336]	@ (8023bdc <http_ev_handler+0x2f4>)
 8023a8a:	653b      	str	r3, [r7, #80]	@ 0x50
      mg_http_serve_dir(c, hm, &opts);
 8023a8c:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8023a90:	461a      	mov	r2, r3
 8023a92:	f8d7 1080 	ldr.w	r1, [r7, #128]	@ 0x80
 8023a96:	69f8      	ldr	r0, [r7, #28]
 8023a98:	f7e7 fee0 	bl	800b85c <mg_http_serve_dir>
  } else if (ev == MG_EV_HTTP_MSG && c->is_websocket == 0 && c->data[0] == 0) {
 8023a9c:	e039      	b.n	8023b12 <http_ev_handler+0x22a>
#else
      mg_http_reply(c, 200, "", ":)\n");
#endif  // WIZARD_ENABLE_HTTP_UI
    }
  } else if (ev == MG_EV_WS_MSG || ev == MG_EV_WS_CTL) {
 8023a9e:	69bb      	ldr	r3, [r7, #24]
 8023aa0:	2b0d      	cmp	r3, #13
 8023aa2:	d037      	beq.n	8023b14 <http_ev_handler+0x22c>
 8023aa4:	69bb      	ldr	r3, [r7, #24]
 8023aa6:	2b0e      	cmp	r3, #14
 8023aa8:	d034      	beq.n	8023b14 <http_ev_handler+0x22c>
    // Ignore received data
  } else if (ev == MG_EV_ACCEPT) {
 8023aaa:	69bb      	ldr	r3, [r7, #24]
 8023aac:	2b05      	cmp	r3, #5
 8023aae:	d131      	bne.n	8023b14 <http_ev_handler+0x22c>
    if (c->fn_data != NULL) {  // TLS listener
 8023ab0:	69fb      	ldr	r3, [r7, #28]
 8023ab2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8023ab6:	2b00      	cmp	r3, #0
 8023ab8:	d02c      	beq.n	8023b14 <http_ev_handler+0x22c>
      struct mg_tls_opts opts;
      memset(&opts, 0, sizeof(opts));
 8023aba:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8023abe:	2224      	movs	r2, #36	@ 0x24
 8023ac0:	2100      	movs	r1, #0
 8023ac2:	4618      	mov	r0, r3
 8023ac4:	f000 fce2 	bl	802448c <memset>
      opts.cert = mg_str(TLS_CERT);
 8023ac8:	f107 0308 	add.w	r3, r7, #8
 8023acc:	4944      	ldr	r1, [pc, #272]	@ (8023be0 <http_ev_handler+0x2f8>)
 8023ace:	4618      	mov	r0, r3
 8023ad0:	f7f1 ff5e 	bl	8015990 <mg_str_s>
 8023ad4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8023ad8:	f107 0208 	add.w	r2, r7, #8
 8023adc:	e892 0003 	ldmia.w	r2, {r0, r1}
 8023ae0:	e883 0003 	stmia.w	r3, {r0, r1}
      opts.key = mg_str(TLS_KEY);
 8023ae4:	f107 0308 	add.w	r3, r7, #8
 8023ae8:	493e      	ldr	r1, [pc, #248]	@ (8023be4 <http_ev_handler+0x2fc>)
 8023aea:	4618      	mov	r0, r3
 8023aec:	f7f1 ff50 	bl	8015990 <mg_str_s>
 8023af0:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8023af4:	f107 0208 	add.w	r2, r7, #8
 8023af8:	e892 0003 	ldmia.w	r2, {r0, r1}
 8023afc:	e883 0003 	stmia.w	r3, {r0, r1}
      mg_tls_init(c, &opts);
 8023b00:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8023b04:	4619      	mov	r1, r3
 8023b06:	69f8      	ldr	r0, [r7, #28]
 8023b08:	f7f6 fbd4 	bl	801a2b4 <mg_tls_init>
 8023b0c:	e002      	b.n	8023b14 <http_ev_handler+0x22c>
  if (ev == MG_EV_POLL && c->is_websocket == 0 && c->data[0] == 'A') {
 8023b0e:	bf00      	nop
 8023b10:	e000      	b.n	8023b14 <http_ev_handler+0x22c>
  } else if (ev == MG_EV_HTTP_MSG && c->is_websocket == 0 && c->data[0] == 0) {
 8023b12:	bf00      	nop
    }
  }

  if (ev == MG_EV_HTTP_MSG) {
 8023b14:	69bb      	ldr	r3, [r7, #24]
 8023b16:	2b0b      	cmp	r3, #11
 8023b18:	d143      	bne.n	8023ba2 <http_ev_handler+0x2ba>
    // Show this request
    struct mg_http_message *hm = (struct mg_http_message *) ev_data;
 8023b1a:	697b      	ldr	r3, [r7, #20]
 8023b1c:	67bb      	str	r3, [r7, #120]	@ 0x78
    MG_DEBUG(("%lu %.*s %.*s %lu -> %.*s %lu", c->id, hm->method.len,
 8023b1e:	4b32      	ldr	r3, [pc, #200]	@ (8023be8 <http_ev_handler+0x300>)
 8023b20:	681b      	ldr	r3, [r3, #0]
 8023b22:	2b02      	cmp	r3, #2
 8023b24:	dd2d      	ble.n	8023b82 <http_ev_handler+0x29a>
 8023b26:	4b31      	ldr	r3, [pc, #196]	@ (8023bec <http_ev_handler+0x304>)
 8023b28:	f240 226e 	movw	r2, #622	@ 0x26e
 8023b2c:	4930      	ldr	r1, [pc, #192]	@ (8023bf0 <http_ev_handler+0x308>)
 8023b2e:	2003      	movs	r0, #3
 8023b30:	f7e9 fb3c 	bl	800d1ac <mg_log_prefix>
 8023b34:	69fb      	ldr	r3, [r7, #28]
 8023b36:	6bde      	ldr	r6, [r3, #60]	@ 0x3c
 8023b38:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8023b3a:	685b      	ldr	r3, [r3, #4]
 8023b3c:	607b      	str	r3, [r7, #4]
 8023b3e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8023b40:	681b      	ldr	r3, [r3, #0]
 8023b42:	603b      	str	r3, [r7, #0]
 8023b44:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8023b46:	68db      	ldr	r3, [r3, #12]
 8023b48:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 8023b4a:	6892      	ldr	r2, [r2, #8]
 8023b4c:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 8023b4e:	f8d1 1204 	ldr.w	r1, [r1, #516]	@ 0x204
 8023b52:	69f8      	ldr	r0, [r7, #28]
 8023b54:	6d80      	ldr	r0, [r0, #88]	@ 0x58
 8023b56:	280f      	cmp	r0, #15
 8023b58:	d901      	bls.n	8023b5e <http_ev_handler+0x276>
 8023b5a:	2003      	movs	r0, #3
 8023b5c:	e000      	b.n	8023b60 <http_ev_handler+0x278>
 8023b5e:	2000      	movs	r0, #0
 8023b60:	69fc      	ldr	r4, [r7, #28]
 8023b62:	6d24      	ldr	r4, [r4, #80]	@ 0x50
 8023b64:	3409      	adds	r4, #9
 8023b66:	69fd      	ldr	r5, [r7, #28]
 8023b68:	6dad      	ldr	r5, [r5, #88]	@ 0x58
 8023b6a:	9505      	str	r5, [sp, #20]
 8023b6c:	9404      	str	r4, [sp, #16]
 8023b6e:	9003      	str	r0, [sp, #12]
 8023b70:	9102      	str	r1, [sp, #8]
 8023b72:	9201      	str	r2, [sp, #4]
 8023b74:	9300      	str	r3, [sp, #0]
 8023b76:	683b      	ldr	r3, [r7, #0]
 8023b78:	687a      	ldr	r2, [r7, #4]
 8023b7a:	4631      	mov	r1, r6
 8023b7c:	481d      	ldr	r0, [pc, #116]	@ (8023bf4 <http_ev_handler+0x30c>)
 8023b7e:	f7e9 fb65 	bl	800d24c <mg_log>
              hm->method.buf, hm->uri.len, hm->uri.buf, hm->body.len,
              c->send.len > 15 ? 3 : 0, &c->send.buf[9], c->send.len));
    if (c->data[0] == 'Z') {
 8023b82:	69fb      	ldr	r3, [r7, #28]
 8023b84:	f893 3090 	ldrb.w	r3, [r3, #144]	@ 0x90
 8023b88:	2b5a      	cmp	r3, #90	@ 0x5a
 8023b8a:	d10a      	bne.n	8023ba2 <http_ev_handler+0x2ba>
      c->data[0] = 0;
 8023b8c:	69fb      	ldr	r3, [r7, #28]
 8023b8e:	2200      	movs	r2, #0
 8023b90:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90
      c->is_resp = 0;
 8023b94:	69fa      	ldr	r2, [r7, #28]
 8023b96:	f892 30b6 	ldrb.w	r3, [r2, #182]	@ 0xb6
 8023b9a:	f023 0301 	bic.w	r3, r3, #1
 8023b9e:	f882 30b6 	strb.w	r3, [r2, #182]	@ 0xb6
    }
  }
}
 8023ba2:	bf00      	nop
 8023ba4:	378c      	adds	r7, #140	@ 0x8c
 8023ba6:	46bd      	mov	sp, r7
 8023ba8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8023baa:	bf00      	nop
 8023bac:	08027eac 	.word	0x08027eac
 8023bb0:	08027e60 	.word	0x08027e60
 8023bb4:	08027f60 	.word	0x08027f60
 8023bb8:	08027f68 	.word	0x08027f68
 8023bbc:	08027f70 	.word	0x08027f70
 8023bc0:	08027f7c 	.word	0x08027f7c
 8023bc4:	20014c5c 	.word	0x20014c5c
 8023bc8:	08027f98 	.word	0x08027f98
 8023bcc:	080126b9 	.word	0x080126b9
 8023bd0:	08027f8c 	.word	0x08027f8c
 8023bd4:	08027fa0 	.word	0x08027fa0
 8023bd8:	20000010 	.word	0x20000010
 8023bdc:	08027fac 	.word	0x08027fac
 8023be0:	08027fc8 	.word	0x08027fc8
 8023be4:	080281a4 	.word	0x080281a4
 8023be8:	20000258 	.word	0x20000258
 8023bec:	08035860 	.word	0x08035860
 8023bf0:	08027d30 	.word	0x08027d30
 8023bf4:	08028288 	.word	0x08028288

08023bf8 <mongoose_init>:
void glue_mdns_update_name(const char *newname) {
  strncpy(s_mdns_name, newname, sizeof(s_mdns_name));
}
#endif  // WIZARD_ENABLE_MDNS

void mongoose_init(void) {
 8023bf8:	b580      	push	{r7, lr}
 8023bfa:	af00      	add	r7, sp, #0
  mg_mgr_init(&g_mgr);      // Initialise event manager
 8023bfc:	4814      	ldr	r0, [pc, #80]	@ (8023c50 <mongoose_init+0x58>)
 8023bfe:	f7ea f8b5 	bl	800dd6c <mg_mgr_init>
  mg_log_set(MG_LL_DEBUG);  // Set log level to debug
 8023c02:	4b14      	ldr	r3, [pc, #80]	@ (8023c54 <mongoose_init+0x5c>)
 8023c04:	2203      	movs	r2, #3
 8023c06:	601a      	str	r2, [r3, #0]

#if WIZARD_ENABLE_HTTP
  MG_INFO(("Starting HTTP listener"));
 8023c08:	4b12      	ldr	r3, [pc, #72]	@ (8023c54 <mongoose_init+0x5c>)
 8023c0a:	681b      	ldr	r3, [r3, #0]
 8023c0c:	2b01      	cmp	r3, #1
 8023c0e:	dd09      	ble.n	8023c24 <mongoose_init+0x2c>
 8023c10:	4b11      	ldr	r3, [pc, #68]	@ (8023c58 <mongoose_init+0x60>)
 8023c12:	f240 32a3 	movw	r2, #931	@ 0x3a3
 8023c16:	4911      	ldr	r1, [pc, #68]	@ (8023c5c <mongoose_init+0x64>)
 8023c18:	2002      	movs	r0, #2
 8023c1a:	f7e9 fac7 	bl	800d1ac <mg_log_prefix>
 8023c1e:	4810      	ldr	r0, [pc, #64]	@ (8023c60 <mongoose_init+0x68>)
 8023c20:	f7e9 fb14 	bl	800d24c <mg_log>
  mg_http_listen(&g_mgr, HTTP_URL, http_ev_handler, NULL);
 8023c24:	2300      	movs	r3, #0
 8023c26:	4a0f      	ldr	r2, [pc, #60]	@ (8023c64 <mongoose_init+0x6c>)
 8023c28:	490f      	ldr	r1, [pc, #60]	@ (8023c68 <mongoose_init+0x70>)
 8023c2a:	4809      	ldr	r0, [pc, #36]	@ (8023c50 <mongoose_init+0x58>)
 8023c2c:	f7e8 fada 	bl	800c1e4 <mg_http_listen>
  MG_INFO(("Starting MDNS (domain name: %s.local)", s_mdns_name));
  mg_mdns_listen(&g_mgr, s_mdns_name);
#endif

  glue_lock_init();
  MG_INFO(("Mongoose init complete"));
 8023c30:	4b08      	ldr	r3, [pc, #32]	@ (8023c54 <mongoose_init+0x5c>)
 8023c32:	681b      	ldr	r3, [r3, #0]
 8023c34:	2b01      	cmp	r3, #1
 8023c36:	dd09      	ble.n	8023c4c <mongoose_init+0x54>
 8023c38:	4b07      	ldr	r3, [pc, #28]	@ (8023c58 <mongoose_init+0x60>)
 8023c3a:	f240 32cd 	movw	r2, #973	@ 0x3cd
 8023c3e:	4907      	ldr	r1, [pc, #28]	@ (8023c5c <mongoose_init+0x64>)
 8023c40:	2002      	movs	r0, #2
 8023c42:	f7e9 fab3 	bl	800d1ac <mg_log_prefix>
 8023c46:	4809      	ldr	r0, [pc, #36]	@ (8023c6c <mongoose_init+0x74>)
 8023c48:	f7e9 fb00 	bl	800d24c <mg_log>
}
 8023c4c:	bf00      	nop
 8023c4e:	bd80      	pop	{r7, pc}
 8023c50:	20014c18 	.word	0x20014c18
 8023c54:	20000258 	.word	0x20000258
 8023c58:	08035870 	.word	0x08035870
 8023c5c:	08027d30 	.word	0x08027d30
 8023c60:	080282cc 	.word	0x080282cc
 8023c64:	080238e9 	.word	0x080238e9
 8023c68:	080282e4 	.word	0x080282e4
 8023c6c:	080282f8 	.word	0x080282f8

08023c70 <mongoose_poll>:

void mongoose_poll(void) {
 8023c70:	b580      	push	{r7, lr}
 8023c72:	af00      	add	r7, sp, #0
  glue_lock();
  mg_mgr_poll(&g_mgr, 10);
 8023c74:	210a      	movs	r1, #10
 8023c76:	4802      	ldr	r0, [pc, #8]	@ (8023c80 <mongoose_poll+0x10>)
 8023c78:	f7ee f80c 	bl	8011c94 <mg_mgr_poll>
#if WIZARD_ENABLE_WEBSOCKET
  send_websocket_data();
#endif
  glue_unlock();
}
 8023c7c:	bf00      	nop
 8023c7e:	bd80      	pop	{r7, pc}
 8023c80:	20014c18 	.word	0x20014c18

08023c84 <abort>:
 8023c84:	b508      	push	{r3, lr}
 8023c86:	2006      	movs	r0, #6
 8023c88:	f000 fc78 	bl	802457c <raise>
 8023c8c:	2001      	movs	r0, #1
 8023c8e:	f7dd f975 	bl	8000f7c <_exit>
	...

08023c94 <__assert_func>:
 8023c94:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8023c96:	4614      	mov	r4, r2
 8023c98:	461a      	mov	r2, r3
 8023c9a:	4b09      	ldr	r3, [pc, #36]	@ (8023cc0 <__assert_func+0x2c>)
 8023c9c:	681b      	ldr	r3, [r3, #0]
 8023c9e:	4605      	mov	r5, r0
 8023ca0:	68d8      	ldr	r0, [r3, #12]
 8023ca2:	b14c      	cbz	r4, 8023cb8 <__assert_func+0x24>
 8023ca4:	4b07      	ldr	r3, [pc, #28]	@ (8023cc4 <__assert_func+0x30>)
 8023ca6:	9100      	str	r1, [sp, #0]
 8023ca8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8023cac:	4906      	ldr	r1, [pc, #24]	@ (8023cc8 <__assert_func+0x34>)
 8023cae:	462b      	mov	r3, r5
 8023cb0:	f000 fa42 	bl	8024138 <fiprintf>
 8023cb4:	f7ff ffe6 	bl	8023c84 <abort>
 8023cb8:	4b04      	ldr	r3, [pc, #16]	@ (8023ccc <__assert_func+0x38>)
 8023cba:	461c      	mov	r4, r3
 8023cbc:	e7f3      	b.n	8023ca6 <__assert_func+0x12>
 8023cbe:	bf00      	nop
 8023cc0:	20000328 	.word	0x20000328
 8023cc4:	0803587e 	.word	0x0803587e
 8023cc8:	0803588b 	.word	0x0803588b
 8023ccc:	080358b9 	.word	0x080358b9

08023cd0 <atoi>:
 8023cd0:	220a      	movs	r2, #10
 8023cd2:	2100      	movs	r1, #0
 8023cd4:	f000 b982 	b.w	8023fdc <strtol>

08023cd8 <calloc>:
 8023cd8:	4b02      	ldr	r3, [pc, #8]	@ (8023ce4 <calloc+0xc>)
 8023cda:	460a      	mov	r2, r1
 8023cdc:	4601      	mov	r1, r0
 8023cde:	6818      	ldr	r0, [r3, #0]
 8023ce0:	f000 b802 	b.w	8023ce8 <_calloc_r>
 8023ce4:	20000328 	.word	0x20000328

08023ce8 <_calloc_r>:
 8023ce8:	b570      	push	{r4, r5, r6, lr}
 8023cea:	fba1 5402 	umull	r5, r4, r1, r2
 8023cee:	b934      	cbnz	r4, 8023cfe <_calloc_r+0x16>
 8023cf0:	4629      	mov	r1, r5
 8023cf2:	f000 f83f 	bl	8023d74 <_malloc_r>
 8023cf6:	4606      	mov	r6, r0
 8023cf8:	b928      	cbnz	r0, 8023d06 <_calloc_r+0x1e>
 8023cfa:	4630      	mov	r0, r6
 8023cfc:	bd70      	pop	{r4, r5, r6, pc}
 8023cfe:	220c      	movs	r2, #12
 8023d00:	6002      	str	r2, [r0, #0]
 8023d02:	2600      	movs	r6, #0
 8023d04:	e7f9      	b.n	8023cfa <_calloc_r+0x12>
 8023d06:	462a      	mov	r2, r5
 8023d08:	4621      	mov	r1, r4
 8023d0a:	f000 fbbf 	bl	802448c <memset>
 8023d0e:	e7f4      	b.n	8023cfa <_calloc_r+0x12>

08023d10 <malloc>:
 8023d10:	4b02      	ldr	r3, [pc, #8]	@ (8023d1c <malloc+0xc>)
 8023d12:	4601      	mov	r1, r0
 8023d14:	6818      	ldr	r0, [r3, #0]
 8023d16:	f000 b82d 	b.w	8023d74 <_malloc_r>
 8023d1a:	bf00      	nop
 8023d1c:	20000328 	.word	0x20000328

08023d20 <free>:
 8023d20:	4b02      	ldr	r3, [pc, #8]	@ (8023d2c <free+0xc>)
 8023d22:	4601      	mov	r1, r0
 8023d24:	6818      	ldr	r0, [r3, #0]
 8023d26:	f000 bd3d 	b.w	80247a4 <_free_r>
 8023d2a:	bf00      	nop
 8023d2c:	20000328 	.word	0x20000328

08023d30 <sbrk_aligned>:
 8023d30:	b570      	push	{r4, r5, r6, lr}
 8023d32:	4e0f      	ldr	r6, [pc, #60]	@ (8023d70 <sbrk_aligned+0x40>)
 8023d34:	460c      	mov	r4, r1
 8023d36:	6831      	ldr	r1, [r6, #0]
 8023d38:	4605      	mov	r5, r0
 8023d3a:	b911      	cbnz	r1, 8023d42 <sbrk_aligned+0x12>
 8023d3c:	f000 fccc 	bl	80246d8 <_sbrk_r>
 8023d40:	6030      	str	r0, [r6, #0]
 8023d42:	4621      	mov	r1, r4
 8023d44:	4628      	mov	r0, r5
 8023d46:	f000 fcc7 	bl	80246d8 <_sbrk_r>
 8023d4a:	1c43      	adds	r3, r0, #1
 8023d4c:	d103      	bne.n	8023d56 <sbrk_aligned+0x26>
 8023d4e:	f04f 34ff 	mov.w	r4, #4294967295
 8023d52:	4620      	mov	r0, r4
 8023d54:	bd70      	pop	{r4, r5, r6, pc}
 8023d56:	1cc4      	adds	r4, r0, #3
 8023d58:	f024 0403 	bic.w	r4, r4, #3
 8023d5c:	42a0      	cmp	r0, r4
 8023d5e:	d0f8      	beq.n	8023d52 <sbrk_aligned+0x22>
 8023d60:	1a21      	subs	r1, r4, r0
 8023d62:	4628      	mov	r0, r5
 8023d64:	f000 fcb8 	bl	80246d8 <_sbrk_r>
 8023d68:	3001      	adds	r0, #1
 8023d6a:	d1f2      	bne.n	8023d52 <sbrk_aligned+0x22>
 8023d6c:	e7ef      	b.n	8023d4e <sbrk_aligned+0x1e>
 8023d6e:	bf00      	nop
 8023d70:	20014c60 	.word	0x20014c60

08023d74 <_malloc_r>:
 8023d74:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8023d78:	1ccd      	adds	r5, r1, #3
 8023d7a:	f025 0503 	bic.w	r5, r5, #3
 8023d7e:	3508      	adds	r5, #8
 8023d80:	2d0c      	cmp	r5, #12
 8023d82:	bf38      	it	cc
 8023d84:	250c      	movcc	r5, #12
 8023d86:	2d00      	cmp	r5, #0
 8023d88:	4606      	mov	r6, r0
 8023d8a:	db01      	blt.n	8023d90 <_malloc_r+0x1c>
 8023d8c:	42a9      	cmp	r1, r5
 8023d8e:	d904      	bls.n	8023d9a <_malloc_r+0x26>
 8023d90:	230c      	movs	r3, #12
 8023d92:	6033      	str	r3, [r6, #0]
 8023d94:	2000      	movs	r0, #0
 8023d96:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8023d9a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8023e70 <_malloc_r+0xfc>
 8023d9e:	f000 f869 	bl	8023e74 <__malloc_lock>
 8023da2:	f8d8 3000 	ldr.w	r3, [r8]
 8023da6:	461c      	mov	r4, r3
 8023da8:	bb44      	cbnz	r4, 8023dfc <_malloc_r+0x88>
 8023daa:	4629      	mov	r1, r5
 8023dac:	4630      	mov	r0, r6
 8023dae:	f7ff ffbf 	bl	8023d30 <sbrk_aligned>
 8023db2:	1c43      	adds	r3, r0, #1
 8023db4:	4604      	mov	r4, r0
 8023db6:	d158      	bne.n	8023e6a <_malloc_r+0xf6>
 8023db8:	f8d8 4000 	ldr.w	r4, [r8]
 8023dbc:	4627      	mov	r7, r4
 8023dbe:	2f00      	cmp	r7, #0
 8023dc0:	d143      	bne.n	8023e4a <_malloc_r+0xd6>
 8023dc2:	2c00      	cmp	r4, #0
 8023dc4:	d04b      	beq.n	8023e5e <_malloc_r+0xea>
 8023dc6:	6823      	ldr	r3, [r4, #0]
 8023dc8:	4639      	mov	r1, r7
 8023dca:	4630      	mov	r0, r6
 8023dcc:	eb04 0903 	add.w	r9, r4, r3
 8023dd0:	f000 fc82 	bl	80246d8 <_sbrk_r>
 8023dd4:	4581      	cmp	r9, r0
 8023dd6:	d142      	bne.n	8023e5e <_malloc_r+0xea>
 8023dd8:	6821      	ldr	r1, [r4, #0]
 8023dda:	1a6d      	subs	r5, r5, r1
 8023ddc:	4629      	mov	r1, r5
 8023dde:	4630      	mov	r0, r6
 8023de0:	f7ff ffa6 	bl	8023d30 <sbrk_aligned>
 8023de4:	3001      	adds	r0, #1
 8023de6:	d03a      	beq.n	8023e5e <_malloc_r+0xea>
 8023de8:	6823      	ldr	r3, [r4, #0]
 8023dea:	442b      	add	r3, r5
 8023dec:	6023      	str	r3, [r4, #0]
 8023dee:	f8d8 3000 	ldr.w	r3, [r8]
 8023df2:	685a      	ldr	r2, [r3, #4]
 8023df4:	bb62      	cbnz	r2, 8023e50 <_malloc_r+0xdc>
 8023df6:	f8c8 7000 	str.w	r7, [r8]
 8023dfa:	e00f      	b.n	8023e1c <_malloc_r+0xa8>
 8023dfc:	6822      	ldr	r2, [r4, #0]
 8023dfe:	1b52      	subs	r2, r2, r5
 8023e00:	d420      	bmi.n	8023e44 <_malloc_r+0xd0>
 8023e02:	2a0b      	cmp	r2, #11
 8023e04:	d917      	bls.n	8023e36 <_malloc_r+0xc2>
 8023e06:	1961      	adds	r1, r4, r5
 8023e08:	42a3      	cmp	r3, r4
 8023e0a:	6025      	str	r5, [r4, #0]
 8023e0c:	bf18      	it	ne
 8023e0e:	6059      	strne	r1, [r3, #4]
 8023e10:	6863      	ldr	r3, [r4, #4]
 8023e12:	bf08      	it	eq
 8023e14:	f8c8 1000 	streq.w	r1, [r8]
 8023e18:	5162      	str	r2, [r4, r5]
 8023e1a:	604b      	str	r3, [r1, #4]
 8023e1c:	4630      	mov	r0, r6
 8023e1e:	f000 f82f 	bl	8023e80 <__malloc_unlock>
 8023e22:	f104 000b 	add.w	r0, r4, #11
 8023e26:	1d23      	adds	r3, r4, #4
 8023e28:	f020 0007 	bic.w	r0, r0, #7
 8023e2c:	1ac2      	subs	r2, r0, r3
 8023e2e:	bf1c      	itt	ne
 8023e30:	1a1b      	subne	r3, r3, r0
 8023e32:	50a3      	strne	r3, [r4, r2]
 8023e34:	e7af      	b.n	8023d96 <_malloc_r+0x22>
 8023e36:	6862      	ldr	r2, [r4, #4]
 8023e38:	42a3      	cmp	r3, r4
 8023e3a:	bf0c      	ite	eq
 8023e3c:	f8c8 2000 	streq.w	r2, [r8]
 8023e40:	605a      	strne	r2, [r3, #4]
 8023e42:	e7eb      	b.n	8023e1c <_malloc_r+0xa8>
 8023e44:	4623      	mov	r3, r4
 8023e46:	6864      	ldr	r4, [r4, #4]
 8023e48:	e7ae      	b.n	8023da8 <_malloc_r+0x34>
 8023e4a:	463c      	mov	r4, r7
 8023e4c:	687f      	ldr	r7, [r7, #4]
 8023e4e:	e7b6      	b.n	8023dbe <_malloc_r+0x4a>
 8023e50:	461a      	mov	r2, r3
 8023e52:	685b      	ldr	r3, [r3, #4]
 8023e54:	42a3      	cmp	r3, r4
 8023e56:	d1fb      	bne.n	8023e50 <_malloc_r+0xdc>
 8023e58:	2300      	movs	r3, #0
 8023e5a:	6053      	str	r3, [r2, #4]
 8023e5c:	e7de      	b.n	8023e1c <_malloc_r+0xa8>
 8023e5e:	230c      	movs	r3, #12
 8023e60:	6033      	str	r3, [r6, #0]
 8023e62:	4630      	mov	r0, r6
 8023e64:	f000 f80c 	bl	8023e80 <__malloc_unlock>
 8023e68:	e794      	b.n	8023d94 <_malloc_r+0x20>
 8023e6a:	6005      	str	r5, [r0, #0]
 8023e6c:	e7d6      	b.n	8023e1c <_malloc_r+0xa8>
 8023e6e:	bf00      	nop
 8023e70:	20014c64 	.word	0x20014c64

08023e74 <__malloc_lock>:
 8023e74:	4801      	ldr	r0, [pc, #4]	@ (8023e7c <__malloc_lock+0x8>)
 8023e76:	f000 bc7c 	b.w	8024772 <__retarget_lock_acquire_recursive>
 8023e7a:	bf00      	nop
 8023e7c:	20014da8 	.word	0x20014da8

08023e80 <__malloc_unlock>:
 8023e80:	4801      	ldr	r0, [pc, #4]	@ (8023e88 <__malloc_unlock+0x8>)
 8023e82:	f000 bc77 	b.w	8024774 <__retarget_lock_release_recursive>
 8023e86:	bf00      	nop
 8023e88:	20014da8 	.word	0x20014da8

08023e8c <srand>:
 8023e8c:	b538      	push	{r3, r4, r5, lr}
 8023e8e:	4b10      	ldr	r3, [pc, #64]	@ (8023ed0 <srand+0x44>)
 8023e90:	681d      	ldr	r5, [r3, #0]
 8023e92:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8023e94:	4604      	mov	r4, r0
 8023e96:	b9b3      	cbnz	r3, 8023ec6 <srand+0x3a>
 8023e98:	2018      	movs	r0, #24
 8023e9a:	f7ff ff39 	bl	8023d10 <malloc>
 8023e9e:	4602      	mov	r2, r0
 8023ea0:	6328      	str	r0, [r5, #48]	@ 0x30
 8023ea2:	b920      	cbnz	r0, 8023eae <srand+0x22>
 8023ea4:	4b0b      	ldr	r3, [pc, #44]	@ (8023ed4 <srand+0x48>)
 8023ea6:	480c      	ldr	r0, [pc, #48]	@ (8023ed8 <srand+0x4c>)
 8023ea8:	2146      	movs	r1, #70	@ 0x46
 8023eaa:	f7ff fef3 	bl	8023c94 <__assert_func>
 8023eae:	490b      	ldr	r1, [pc, #44]	@ (8023edc <srand+0x50>)
 8023eb0:	4b0b      	ldr	r3, [pc, #44]	@ (8023ee0 <srand+0x54>)
 8023eb2:	e9c0 1300 	strd	r1, r3, [r0]
 8023eb6:	4b0b      	ldr	r3, [pc, #44]	@ (8023ee4 <srand+0x58>)
 8023eb8:	6083      	str	r3, [r0, #8]
 8023eba:	230b      	movs	r3, #11
 8023ebc:	8183      	strh	r3, [r0, #12]
 8023ebe:	2100      	movs	r1, #0
 8023ec0:	2001      	movs	r0, #1
 8023ec2:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8023ec6:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8023ec8:	2200      	movs	r2, #0
 8023eca:	611c      	str	r4, [r3, #16]
 8023ecc:	615a      	str	r2, [r3, #20]
 8023ece:	bd38      	pop	{r3, r4, r5, pc}
 8023ed0:	20000328 	.word	0x20000328
 8023ed4:	080358ba 	.word	0x080358ba
 8023ed8:	080358d1 	.word	0x080358d1
 8023edc:	abcd330e 	.word	0xabcd330e
 8023ee0:	e66d1234 	.word	0xe66d1234
 8023ee4:	0005deec 	.word	0x0005deec

08023ee8 <_strtol_l.isra.0>:
 8023ee8:	2b24      	cmp	r3, #36	@ 0x24
 8023eea:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8023eee:	4686      	mov	lr, r0
 8023ef0:	4690      	mov	r8, r2
 8023ef2:	d801      	bhi.n	8023ef8 <_strtol_l.isra.0+0x10>
 8023ef4:	2b01      	cmp	r3, #1
 8023ef6:	d106      	bne.n	8023f06 <_strtol_l.isra.0+0x1e>
 8023ef8:	f000 fc10 	bl	802471c <__errno>
 8023efc:	2316      	movs	r3, #22
 8023efe:	6003      	str	r3, [r0, #0]
 8023f00:	2000      	movs	r0, #0
 8023f02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8023f06:	4834      	ldr	r0, [pc, #208]	@ (8023fd8 <_strtol_l.isra.0+0xf0>)
 8023f08:	460d      	mov	r5, r1
 8023f0a:	462a      	mov	r2, r5
 8023f0c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8023f10:	5d06      	ldrb	r6, [r0, r4]
 8023f12:	f016 0608 	ands.w	r6, r6, #8
 8023f16:	d1f8      	bne.n	8023f0a <_strtol_l.isra.0+0x22>
 8023f18:	2c2d      	cmp	r4, #45	@ 0x2d
 8023f1a:	d110      	bne.n	8023f3e <_strtol_l.isra.0+0x56>
 8023f1c:	782c      	ldrb	r4, [r5, #0]
 8023f1e:	2601      	movs	r6, #1
 8023f20:	1c95      	adds	r5, r2, #2
 8023f22:	f033 0210 	bics.w	r2, r3, #16
 8023f26:	d115      	bne.n	8023f54 <_strtol_l.isra.0+0x6c>
 8023f28:	2c30      	cmp	r4, #48	@ 0x30
 8023f2a:	d10d      	bne.n	8023f48 <_strtol_l.isra.0+0x60>
 8023f2c:	782a      	ldrb	r2, [r5, #0]
 8023f2e:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8023f32:	2a58      	cmp	r2, #88	@ 0x58
 8023f34:	d108      	bne.n	8023f48 <_strtol_l.isra.0+0x60>
 8023f36:	786c      	ldrb	r4, [r5, #1]
 8023f38:	3502      	adds	r5, #2
 8023f3a:	2310      	movs	r3, #16
 8023f3c:	e00a      	b.n	8023f54 <_strtol_l.isra.0+0x6c>
 8023f3e:	2c2b      	cmp	r4, #43	@ 0x2b
 8023f40:	bf04      	itt	eq
 8023f42:	782c      	ldrbeq	r4, [r5, #0]
 8023f44:	1c95      	addeq	r5, r2, #2
 8023f46:	e7ec      	b.n	8023f22 <_strtol_l.isra.0+0x3a>
 8023f48:	2b00      	cmp	r3, #0
 8023f4a:	d1f6      	bne.n	8023f3a <_strtol_l.isra.0+0x52>
 8023f4c:	2c30      	cmp	r4, #48	@ 0x30
 8023f4e:	bf14      	ite	ne
 8023f50:	230a      	movne	r3, #10
 8023f52:	2308      	moveq	r3, #8
 8023f54:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8023f58:	f10c 3cff 	add.w	ip, ip, #4294967295
 8023f5c:	2200      	movs	r2, #0
 8023f5e:	fbbc f9f3 	udiv	r9, ip, r3
 8023f62:	4610      	mov	r0, r2
 8023f64:	fb03 ca19 	mls	sl, r3, r9, ip
 8023f68:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8023f6c:	2f09      	cmp	r7, #9
 8023f6e:	d80f      	bhi.n	8023f90 <_strtol_l.isra.0+0xa8>
 8023f70:	463c      	mov	r4, r7
 8023f72:	42a3      	cmp	r3, r4
 8023f74:	dd1b      	ble.n	8023fae <_strtol_l.isra.0+0xc6>
 8023f76:	1c57      	adds	r7, r2, #1
 8023f78:	d007      	beq.n	8023f8a <_strtol_l.isra.0+0xa2>
 8023f7a:	4581      	cmp	r9, r0
 8023f7c:	d314      	bcc.n	8023fa8 <_strtol_l.isra.0+0xc0>
 8023f7e:	d101      	bne.n	8023f84 <_strtol_l.isra.0+0x9c>
 8023f80:	45a2      	cmp	sl, r4
 8023f82:	db11      	blt.n	8023fa8 <_strtol_l.isra.0+0xc0>
 8023f84:	fb00 4003 	mla	r0, r0, r3, r4
 8023f88:	2201      	movs	r2, #1
 8023f8a:	f815 4b01 	ldrb.w	r4, [r5], #1
 8023f8e:	e7eb      	b.n	8023f68 <_strtol_l.isra.0+0x80>
 8023f90:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8023f94:	2f19      	cmp	r7, #25
 8023f96:	d801      	bhi.n	8023f9c <_strtol_l.isra.0+0xb4>
 8023f98:	3c37      	subs	r4, #55	@ 0x37
 8023f9a:	e7ea      	b.n	8023f72 <_strtol_l.isra.0+0x8a>
 8023f9c:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8023fa0:	2f19      	cmp	r7, #25
 8023fa2:	d804      	bhi.n	8023fae <_strtol_l.isra.0+0xc6>
 8023fa4:	3c57      	subs	r4, #87	@ 0x57
 8023fa6:	e7e4      	b.n	8023f72 <_strtol_l.isra.0+0x8a>
 8023fa8:	f04f 32ff 	mov.w	r2, #4294967295
 8023fac:	e7ed      	b.n	8023f8a <_strtol_l.isra.0+0xa2>
 8023fae:	1c53      	adds	r3, r2, #1
 8023fb0:	d108      	bne.n	8023fc4 <_strtol_l.isra.0+0xdc>
 8023fb2:	2322      	movs	r3, #34	@ 0x22
 8023fb4:	f8ce 3000 	str.w	r3, [lr]
 8023fb8:	4660      	mov	r0, ip
 8023fba:	f1b8 0f00 	cmp.w	r8, #0
 8023fbe:	d0a0      	beq.n	8023f02 <_strtol_l.isra.0+0x1a>
 8023fc0:	1e69      	subs	r1, r5, #1
 8023fc2:	e006      	b.n	8023fd2 <_strtol_l.isra.0+0xea>
 8023fc4:	b106      	cbz	r6, 8023fc8 <_strtol_l.isra.0+0xe0>
 8023fc6:	4240      	negs	r0, r0
 8023fc8:	f1b8 0f00 	cmp.w	r8, #0
 8023fcc:	d099      	beq.n	8023f02 <_strtol_l.isra.0+0x1a>
 8023fce:	2a00      	cmp	r2, #0
 8023fd0:	d1f6      	bne.n	8023fc0 <_strtol_l.isra.0+0xd8>
 8023fd2:	f8c8 1000 	str.w	r1, [r8]
 8023fd6:	e794      	b.n	8023f02 <_strtol_l.isra.0+0x1a>
 8023fd8:	0803595d 	.word	0x0803595d

08023fdc <strtol>:
 8023fdc:	4613      	mov	r3, r2
 8023fde:	460a      	mov	r2, r1
 8023fe0:	4601      	mov	r1, r0
 8023fe2:	4802      	ldr	r0, [pc, #8]	@ (8023fec <strtol+0x10>)
 8023fe4:	6800      	ldr	r0, [r0, #0]
 8023fe6:	f7ff bf7f 	b.w	8023ee8 <_strtol_l.isra.0>
 8023fea:	bf00      	nop
 8023fec:	20000328 	.word	0x20000328

08023ff0 <std>:
 8023ff0:	2300      	movs	r3, #0
 8023ff2:	b510      	push	{r4, lr}
 8023ff4:	4604      	mov	r4, r0
 8023ff6:	e9c0 3300 	strd	r3, r3, [r0]
 8023ffa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8023ffe:	6083      	str	r3, [r0, #8]
 8024000:	8181      	strh	r1, [r0, #12]
 8024002:	6643      	str	r3, [r0, #100]	@ 0x64
 8024004:	81c2      	strh	r2, [r0, #14]
 8024006:	6183      	str	r3, [r0, #24]
 8024008:	4619      	mov	r1, r3
 802400a:	2208      	movs	r2, #8
 802400c:	305c      	adds	r0, #92	@ 0x5c
 802400e:	f000 fa3d 	bl	802448c <memset>
 8024012:	4b0d      	ldr	r3, [pc, #52]	@ (8024048 <std+0x58>)
 8024014:	6263      	str	r3, [r4, #36]	@ 0x24
 8024016:	4b0d      	ldr	r3, [pc, #52]	@ (802404c <std+0x5c>)
 8024018:	62a3      	str	r3, [r4, #40]	@ 0x28
 802401a:	4b0d      	ldr	r3, [pc, #52]	@ (8024050 <std+0x60>)
 802401c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 802401e:	4b0d      	ldr	r3, [pc, #52]	@ (8024054 <std+0x64>)
 8024020:	6323      	str	r3, [r4, #48]	@ 0x30
 8024022:	4b0d      	ldr	r3, [pc, #52]	@ (8024058 <std+0x68>)
 8024024:	6224      	str	r4, [r4, #32]
 8024026:	429c      	cmp	r4, r3
 8024028:	d006      	beq.n	8024038 <std+0x48>
 802402a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 802402e:	4294      	cmp	r4, r2
 8024030:	d002      	beq.n	8024038 <std+0x48>
 8024032:	33d0      	adds	r3, #208	@ 0xd0
 8024034:	429c      	cmp	r4, r3
 8024036:	d105      	bne.n	8024044 <std+0x54>
 8024038:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 802403c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8024040:	f000 bb96 	b.w	8024770 <__retarget_lock_init_recursive>
 8024044:	bd10      	pop	{r4, pc}
 8024046:	bf00      	nop
 8024048:	08024289 	.word	0x08024289
 802404c:	080242ab 	.word	0x080242ab
 8024050:	080242e3 	.word	0x080242e3
 8024054:	08024307 	.word	0x08024307
 8024058:	20014c68 	.word	0x20014c68

0802405c <stdio_exit_handler>:
 802405c:	4a02      	ldr	r2, [pc, #8]	@ (8024068 <stdio_exit_handler+0xc>)
 802405e:	4903      	ldr	r1, [pc, #12]	@ (802406c <stdio_exit_handler+0x10>)
 8024060:	4803      	ldr	r0, [pc, #12]	@ (8024070 <stdio_exit_handler+0x14>)
 8024062:	f000 b87b 	b.w	802415c <_fwalk_sglue>
 8024066:	bf00      	nop
 8024068:	2000031c 	.word	0x2000031c
 802406c:	08024edd 	.word	0x08024edd
 8024070:	2000032c 	.word	0x2000032c

08024074 <cleanup_stdio>:
 8024074:	6841      	ldr	r1, [r0, #4]
 8024076:	4b0c      	ldr	r3, [pc, #48]	@ (80240a8 <cleanup_stdio+0x34>)
 8024078:	4299      	cmp	r1, r3
 802407a:	b510      	push	{r4, lr}
 802407c:	4604      	mov	r4, r0
 802407e:	d001      	beq.n	8024084 <cleanup_stdio+0x10>
 8024080:	f000 ff2c 	bl	8024edc <_fflush_r>
 8024084:	68a1      	ldr	r1, [r4, #8]
 8024086:	4b09      	ldr	r3, [pc, #36]	@ (80240ac <cleanup_stdio+0x38>)
 8024088:	4299      	cmp	r1, r3
 802408a:	d002      	beq.n	8024092 <cleanup_stdio+0x1e>
 802408c:	4620      	mov	r0, r4
 802408e:	f000 ff25 	bl	8024edc <_fflush_r>
 8024092:	68e1      	ldr	r1, [r4, #12]
 8024094:	4b06      	ldr	r3, [pc, #24]	@ (80240b0 <cleanup_stdio+0x3c>)
 8024096:	4299      	cmp	r1, r3
 8024098:	d004      	beq.n	80240a4 <cleanup_stdio+0x30>
 802409a:	4620      	mov	r0, r4
 802409c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80240a0:	f000 bf1c 	b.w	8024edc <_fflush_r>
 80240a4:	bd10      	pop	{r4, pc}
 80240a6:	bf00      	nop
 80240a8:	20014c68 	.word	0x20014c68
 80240ac:	20014cd0 	.word	0x20014cd0
 80240b0:	20014d38 	.word	0x20014d38

080240b4 <global_stdio_init.part.0>:
 80240b4:	b510      	push	{r4, lr}
 80240b6:	4b0b      	ldr	r3, [pc, #44]	@ (80240e4 <global_stdio_init.part.0+0x30>)
 80240b8:	4c0b      	ldr	r4, [pc, #44]	@ (80240e8 <global_stdio_init.part.0+0x34>)
 80240ba:	4a0c      	ldr	r2, [pc, #48]	@ (80240ec <global_stdio_init.part.0+0x38>)
 80240bc:	601a      	str	r2, [r3, #0]
 80240be:	4620      	mov	r0, r4
 80240c0:	2200      	movs	r2, #0
 80240c2:	2104      	movs	r1, #4
 80240c4:	f7ff ff94 	bl	8023ff0 <std>
 80240c8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80240cc:	2201      	movs	r2, #1
 80240ce:	2109      	movs	r1, #9
 80240d0:	f7ff ff8e 	bl	8023ff0 <std>
 80240d4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80240d8:	2202      	movs	r2, #2
 80240da:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80240de:	2112      	movs	r1, #18
 80240e0:	f7ff bf86 	b.w	8023ff0 <std>
 80240e4:	20014da0 	.word	0x20014da0
 80240e8:	20014c68 	.word	0x20014c68
 80240ec:	0802405d 	.word	0x0802405d

080240f0 <__sfp_lock_acquire>:
 80240f0:	4801      	ldr	r0, [pc, #4]	@ (80240f8 <__sfp_lock_acquire+0x8>)
 80240f2:	f000 bb3e 	b.w	8024772 <__retarget_lock_acquire_recursive>
 80240f6:	bf00      	nop
 80240f8:	20014da9 	.word	0x20014da9

080240fc <__sfp_lock_release>:
 80240fc:	4801      	ldr	r0, [pc, #4]	@ (8024104 <__sfp_lock_release+0x8>)
 80240fe:	f000 bb39 	b.w	8024774 <__retarget_lock_release_recursive>
 8024102:	bf00      	nop
 8024104:	20014da9 	.word	0x20014da9

08024108 <__sinit>:
 8024108:	b510      	push	{r4, lr}
 802410a:	4604      	mov	r4, r0
 802410c:	f7ff fff0 	bl	80240f0 <__sfp_lock_acquire>
 8024110:	6a23      	ldr	r3, [r4, #32]
 8024112:	b11b      	cbz	r3, 802411c <__sinit+0x14>
 8024114:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8024118:	f7ff bff0 	b.w	80240fc <__sfp_lock_release>
 802411c:	4b04      	ldr	r3, [pc, #16]	@ (8024130 <__sinit+0x28>)
 802411e:	6223      	str	r3, [r4, #32]
 8024120:	4b04      	ldr	r3, [pc, #16]	@ (8024134 <__sinit+0x2c>)
 8024122:	681b      	ldr	r3, [r3, #0]
 8024124:	2b00      	cmp	r3, #0
 8024126:	d1f5      	bne.n	8024114 <__sinit+0xc>
 8024128:	f7ff ffc4 	bl	80240b4 <global_stdio_init.part.0>
 802412c:	e7f2      	b.n	8024114 <__sinit+0xc>
 802412e:	bf00      	nop
 8024130:	08024075 	.word	0x08024075
 8024134:	20014da0 	.word	0x20014da0

08024138 <fiprintf>:
 8024138:	b40e      	push	{r1, r2, r3}
 802413a:	b503      	push	{r0, r1, lr}
 802413c:	4601      	mov	r1, r0
 802413e:	ab03      	add	r3, sp, #12
 8024140:	4805      	ldr	r0, [pc, #20]	@ (8024158 <fiprintf+0x20>)
 8024142:	f853 2b04 	ldr.w	r2, [r3], #4
 8024146:	6800      	ldr	r0, [r0, #0]
 8024148:	9301      	str	r3, [sp, #4]
 802414a:	f000 fb9f 	bl	802488c <_vfiprintf_r>
 802414e:	b002      	add	sp, #8
 8024150:	f85d eb04 	ldr.w	lr, [sp], #4
 8024154:	b003      	add	sp, #12
 8024156:	4770      	bx	lr
 8024158:	20000328 	.word	0x20000328

0802415c <_fwalk_sglue>:
 802415c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8024160:	4607      	mov	r7, r0
 8024162:	4688      	mov	r8, r1
 8024164:	4614      	mov	r4, r2
 8024166:	2600      	movs	r6, #0
 8024168:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 802416c:	f1b9 0901 	subs.w	r9, r9, #1
 8024170:	d505      	bpl.n	802417e <_fwalk_sglue+0x22>
 8024172:	6824      	ldr	r4, [r4, #0]
 8024174:	2c00      	cmp	r4, #0
 8024176:	d1f7      	bne.n	8024168 <_fwalk_sglue+0xc>
 8024178:	4630      	mov	r0, r6
 802417a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802417e:	89ab      	ldrh	r3, [r5, #12]
 8024180:	2b01      	cmp	r3, #1
 8024182:	d907      	bls.n	8024194 <_fwalk_sglue+0x38>
 8024184:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8024188:	3301      	adds	r3, #1
 802418a:	d003      	beq.n	8024194 <_fwalk_sglue+0x38>
 802418c:	4629      	mov	r1, r5
 802418e:	4638      	mov	r0, r7
 8024190:	47c0      	blx	r8
 8024192:	4306      	orrs	r6, r0
 8024194:	3568      	adds	r5, #104	@ 0x68
 8024196:	e7e9      	b.n	802416c <_fwalk_sglue+0x10>

08024198 <iprintf>:
 8024198:	b40f      	push	{r0, r1, r2, r3}
 802419a:	b507      	push	{r0, r1, r2, lr}
 802419c:	4906      	ldr	r1, [pc, #24]	@ (80241b8 <iprintf+0x20>)
 802419e:	ab04      	add	r3, sp, #16
 80241a0:	6808      	ldr	r0, [r1, #0]
 80241a2:	f853 2b04 	ldr.w	r2, [r3], #4
 80241a6:	6881      	ldr	r1, [r0, #8]
 80241a8:	9301      	str	r3, [sp, #4]
 80241aa:	f000 fb6f 	bl	802488c <_vfiprintf_r>
 80241ae:	b003      	add	sp, #12
 80241b0:	f85d eb04 	ldr.w	lr, [sp], #4
 80241b4:	b004      	add	sp, #16
 80241b6:	4770      	bx	lr
 80241b8:	20000328 	.word	0x20000328

080241bc <putchar>:
 80241bc:	4b02      	ldr	r3, [pc, #8]	@ (80241c8 <putchar+0xc>)
 80241be:	4601      	mov	r1, r0
 80241c0:	6818      	ldr	r0, [r3, #0]
 80241c2:	6882      	ldr	r2, [r0, #8]
 80241c4:	f000 bf14 	b.w	8024ff0 <_putc_r>
 80241c8:	20000328 	.word	0x20000328

080241cc <_puts_r>:
 80241cc:	6a03      	ldr	r3, [r0, #32]
 80241ce:	b570      	push	{r4, r5, r6, lr}
 80241d0:	6884      	ldr	r4, [r0, #8]
 80241d2:	4605      	mov	r5, r0
 80241d4:	460e      	mov	r6, r1
 80241d6:	b90b      	cbnz	r3, 80241dc <_puts_r+0x10>
 80241d8:	f7ff ff96 	bl	8024108 <__sinit>
 80241dc:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80241de:	07db      	lsls	r3, r3, #31
 80241e0:	d405      	bmi.n	80241ee <_puts_r+0x22>
 80241e2:	89a3      	ldrh	r3, [r4, #12]
 80241e4:	0598      	lsls	r0, r3, #22
 80241e6:	d402      	bmi.n	80241ee <_puts_r+0x22>
 80241e8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80241ea:	f000 fac2 	bl	8024772 <__retarget_lock_acquire_recursive>
 80241ee:	89a3      	ldrh	r3, [r4, #12]
 80241f0:	0719      	lsls	r1, r3, #28
 80241f2:	d502      	bpl.n	80241fa <_puts_r+0x2e>
 80241f4:	6923      	ldr	r3, [r4, #16]
 80241f6:	2b00      	cmp	r3, #0
 80241f8:	d135      	bne.n	8024266 <_puts_r+0x9a>
 80241fa:	4621      	mov	r1, r4
 80241fc:	4628      	mov	r0, r5
 80241fe:	f000 f8c5 	bl	802438c <__swsetup_r>
 8024202:	b380      	cbz	r0, 8024266 <_puts_r+0x9a>
 8024204:	f04f 35ff 	mov.w	r5, #4294967295
 8024208:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 802420a:	07da      	lsls	r2, r3, #31
 802420c:	d405      	bmi.n	802421a <_puts_r+0x4e>
 802420e:	89a3      	ldrh	r3, [r4, #12]
 8024210:	059b      	lsls	r3, r3, #22
 8024212:	d402      	bmi.n	802421a <_puts_r+0x4e>
 8024214:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8024216:	f000 faad 	bl	8024774 <__retarget_lock_release_recursive>
 802421a:	4628      	mov	r0, r5
 802421c:	bd70      	pop	{r4, r5, r6, pc}
 802421e:	2b00      	cmp	r3, #0
 8024220:	da04      	bge.n	802422c <_puts_r+0x60>
 8024222:	69a2      	ldr	r2, [r4, #24]
 8024224:	429a      	cmp	r2, r3
 8024226:	dc17      	bgt.n	8024258 <_puts_r+0x8c>
 8024228:	290a      	cmp	r1, #10
 802422a:	d015      	beq.n	8024258 <_puts_r+0x8c>
 802422c:	6823      	ldr	r3, [r4, #0]
 802422e:	1c5a      	adds	r2, r3, #1
 8024230:	6022      	str	r2, [r4, #0]
 8024232:	7019      	strb	r1, [r3, #0]
 8024234:	68a3      	ldr	r3, [r4, #8]
 8024236:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 802423a:	3b01      	subs	r3, #1
 802423c:	60a3      	str	r3, [r4, #8]
 802423e:	2900      	cmp	r1, #0
 8024240:	d1ed      	bne.n	802421e <_puts_r+0x52>
 8024242:	2b00      	cmp	r3, #0
 8024244:	da11      	bge.n	802426a <_puts_r+0x9e>
 8024246:	4622      	mov	r2, r4
 8024248:	210a      	movs	r1, #10
 802424a:	4628      	mov	r0, r5
 802424c:	f000 f85f 	bl	802430e <__swbuf_r>
 8024250:	3001      	adds	r0, #1
 8024252:	d0d7      	beq.n	8024204 <_puts_r+0x38>
 8024254:	250a      	movs	r5, #10
 8024256:	e7d7      	b.n	8024208 <_puts_r+0x3c>
 8024258:	4622      	mov	r2, r4
 802425a:	4628      	mov	r0, r5
 802425c:	f000 f857 	bl	802430e <__swbuf_r>
 8024260:	3001      	adds	r0, #1
 8024262:	d1e7      	bne.n	8024234 <_puts_r+0x68>
 8024264:	e7ce      	b.n	8024204 <_puts_r+0x38>
 8024266:	3e01      	subs	r6, #1
 8024268:	e7e4      	b.n	8024234 <_puts_r+0x68>
 802426a:	6823      	ldr	r3, [r4, #0]
 802426c:	1c5a      	adds	r2, r3, #1
 802426e:	6022      	str	r2, [r4, #0]
 8024270:	220a      	movs	r2, #10
 8024272:	701a      	strb	r2, [r3, #0]
 8024274:	e7ee      	b.n	8024254 <_puts_r+0x88>
	...

08024278 <puts>:
 8024278:	4b02      	ldr	r3, [pc, #8]	@ (8024284 <puts+0xc>)
 802427a:	4601      	mov	r1, r0
 802427c:	6818      	ldr	r0, [r3, #0]
 802427e:	f7ff bfa5 	b.w	80241cc <_puts_r>
 8024282:	bf00      	nop
 8024284:	20000328 	.word	0x20000328

08024288 <__sread>:
 8024288:	b510      	push	{r4, lr}
 802428a:	460c      	mov	r4, r1
 802428c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8024290:	f000 f9fc 	bl	802468c <_read_r>
 8024294:	2800      	cmp	r0, #0
 8024296:	bfab      	itete	ge
 8024298:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 802429a:	89a3      	ldrhlt	r3, [r4, #12]
 802429c:	181b      	addge	r3, r3, r0
 802429e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80242a2:	bfac      	ite	ge
 80242a4:	6563      	strge	r3, [r4, #84]	@ 0x54
 80242a6:	81a3      	strhlt	r3, [r4, #12]
 80242a8:	bd10      	pop	{r4, pc}

080242aa <__swrite>:
 80242aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80242ae:	461f      	mov	r7, r3
 80242b0:	898b      	ldrh	r3, [r1, #12]
 80242b2:	05db      	lsls	r3, r3, #23
 80242b4:	4605      	mov	r5, r0
 80242b6:	460c      	mov	r4, r1
 80242b8:	4616      	mov	r6, r2
 80242ba:	d505      	bpl.n	80242c8 <__swrite+0x1e>
 80242bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80242c0:	2302      	movs	r3, #2
 80242c2:	2200      	movs	r2, #0
 80242c4:	f000 f9d0 	bl	8024668 <_lseek_r>
 80242c8:	89a3      	ldrh	r3, [r4, #12]
 80242ca:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80242ce:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80242d2:	81a3      	strh	r3, [r4, #12]
 80242d4:	4632      	mov	r2, r6
 80242d6:	463b      	mov	r3, r7
 80242d8:	4628      	mov	r0, r5
 80242da:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80242de:	f000 ba0b 	b.w	80246f8 <_write_r>

080242e2 <__sseek>:
 80242e2:	b510      	push	{r4, lr}
 80242e4:	460c      	mov	r4, r1
 80242e6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80242ea:	f000 f9bd 	bl	8024668 <_lseek_r>
 80242ee:	1c43      	adds	r3, r0, #1
 80242f0:	89a3      	ldrh	r3, [r4, #12]
 80242f2:	bf15      	itete	ne
 80242f4:	6560      	strne	r0, [r4, #84]	@ 0x54
 80242f6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80242fa:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80242fe:	81a3      	strheq	r3, [r4, #12]
 8024300:	bf18      	it	ne
 8024302:	81a3      	strhne	r3, [r4, #12]
 8024304:	bd10      	pop	{r4, pc}

08024306 <__sclose>:
 8024306:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802430a:	f000 b93f 	b.w	802458c <_close_r>

0802430e <__swbuf_r>:
 802430e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8024310:	460e      	mov	r6, r1
 8024312:	4614      	mov	r4, r2
 8024314:	4605      	mov	r5, r0
 8024316:	b118      	cbz	r0, 8024320 <__swbuf_r+0x12>
 8024318:	6a03      	ldr	r3, [r0, #32]
 802431a:	b90b      	cbnz	r3, 8024320 <__swbuf_r+0x12>
 802431c:	f7ff fef4 	bl	8024108 <__sinit>
 8024320:	69a3      	ldr	r3, [r4, #24]
 8024322:	60a3      	str	r3, [r4, #8]
 8024324:	89a3      	ldrh	r3, [r4, #12]
 8024326:	071a      	lsls	r2, r3, #28
 8024328:	d501      	bpl.n	802432e <__swbuf_r+0x20>
 802432a:	6923      	ldr	r3, [r4, #16]
 802432c:	b943      	cbnz	r3, 8024340 <__swbuf_r+0x32>
 802432e:	4621      	mov	r1, r4
 8024330:	4628      	mov	r0, r5
 8024332:	f000 f82b 	bl	802438c <__swsetup_r>
 8024336:	b118      	cbz	r0, 8024340 <__swbuf_r+0x32>
 8024338:	f04f 37ff 	mov.w	r7, #4294967295
 802433c:	4638      	mov	r0, r7
 802433e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8024340:	6823      	ldr	r3, [r4, #0]
 8024342:	6922      	ldr	r2, [r4, #16]
 8024344:	1a98      	subs	r0, r3, r2
 8024346:	6963      	ldr	r3, [r4, #20]
 8024348:	b2f6      	uxtb	r6, r6
 802434a:	4283      	cmp	r3, r0
 802434c:	4637      	mov	r7, r6
 802434e:	dc05      	bgt.n	802435c <__swbuf_r+0x4e>
 8024350:	4621      	mov	r1, r4
 8024352:	4628      	mov	r0, r5
 8024354:	f000 fdc2 	bl	8024edc <_fflush_r>
 8024358:	2800      	cmp	r0, #0
 802435a:	d1ed      	bne.n	8024338 <__swbuf_r+0x2a>
 802435c:	68a3      	ldr	r3, [r4, #8]
 802435e:	3b01      	subs	r3, #1
 8024360:	60a3      	str	r3, [r4, #8]
 8024362:	6823      	ldr	r3, [r4, #0]
 8024364:	1c5a      	adds	r2, r3, #1
 8024366:	6022      	str	r2, [r4, #0]
 8024368:	701e      	strb	r6, [r3, #0]
 802436a:	6962      	ldr	r2, [r4, #20]
 802436c:	1c43      	adds	r3, r0, #1
 802436e:	429a      	cmp	r2, r3
 8024370:	d004      	beq.n	802437c <__swbuf_r+0x6e>
 8024372:	89a3      	ldrh	r3, [r4, #12]
 8024374:	07db      	lsls	r3, r3, #31
 8024376:	d5e1      	bpl.n	802433c <__swbuf_r+0x2e>
 8024378:	2e0a      	cmp	r6, #10
 802437a:	d1df      	bne.n	802433c <__swbuf_r+0x2e>
 802437c:	4621      	mov	r1, r4
 802437e:	4628      	mov	r0, r5
 8024380:	f000 fdac 	bl	8024edc <_fflush_r>
 8024384:	2800      	cmp	r0, #0
 8024386:	d0d9      	beq.n	802433c <__swbuf_r+0x2e>
 8024388:	e7d6      	b.n	8024338 <__swbuf_r+0x2a>
	...

0802438c <__swsetup_r>:
 802438c:	b538      	push	{r3, r4, r5, lr}
 802438e:	4b29      	ldr	r3, [pc, #164]	@ (8024434 <__swsetup_r+0xa8>)
 8024390:	4605      	mov	r5, r0
 8024392:	6818      	ldr	r0, [r3, #0]
 8024394:	460c      	mov	r4, r1
 8024396:	b118      	cbz	r0, 80243a0 <__swsetup_r+0x14>
 8024398:	6a03      	ldr	r3, [r0, #32]
 802439a:	b90b      	cbnz	r3, 80243a0 <__swsetup_r+0x14>
 802439c:	f7ff feb4 	bl	8024108 <__sinit>
 80243a0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80243a4:	0719      	lsls	r1, r3, #28
 80243a6:	d422      	bmi.n	80243ee <__swsetup_r+0x62>
 80243a8:	06da      	lsls	r2, r3, #27
 80243aa:	d407      	bmi.n	80243bc <__swsetup_r+0x30>
 80243ac:	2209      	movs	r2, #9
 80243ae:	602a      	str	r2, [r5, #0]
 80243b0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80243b4:	81a3      	strh	r3, [r4, #12]
 80243b6:	f04f 30ff 	mov.w	r0, #4294967295
 80243ba:	e033      	b.n	8024424 <__swsetup_r+0x98>
 80243bc:	0758      	lsls	r0, r3, #29
 80243be:	d512      	bpl.n	80243e6 <__swsetup_r+0x5a>
 80243c0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80243c2:	b141      	cbz	r1, 80243d6 <__swsetup_r+0x4a>
 80243c4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80243c8:	4299      	cmp	r1, r3
 80243ca:	d002      	beq.n	80243d2 <__swsetup_r+0x46>
 80243cc:	4628      	mov	r0, r5
 80243ce:	f000 f9e9 	bl	80247a4 <_free_r>
 80243d2:	2300      	movs	r3, #0
 80243d4:	6363      	str	r3, [r4, #52]	@ 0x34
 80243d6:	89a3      	ldrh	r3, [r4, #12]
 80243d8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80243dc:	81a3      	strh	r3, [r4, #12]
 80243de:	2300      	movs	r3, #0
 80243e0:	6063      	str	r3, [r4, #4]
 80243e2:	6923      	ldr	r3, [r4, #16]
 80243e4:	6023      	str	r3, [r4, #0]
 80243e6:	89a3      	ldrh	r3, [r4, #12]
 80243e8:	f043 0308 	orr.w	r3, r3, #8
 80243ec:	81a3      	strh	r3, [r4, #12]
 80243ee:	6923      	ldr	r3, [r4, #16]
 80243f0:	b94b      	cbnz	r3, 8024406 <__swsetup_r+0x7a>
 80243f2:	89a3      	ldrh	r3, [r4, #12]
 80243f4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80243f8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80243fc:	d003      	beq.n	8024406 <__swsetup_r+0x7a>
 80243fe:	4621      	mov	r1, r4
 8024400:	4628      	mov	r0, r5
 8024402:	f000 fdb9 	bl	8024f78 <__smakebuf_r>
 8024406:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802440a:	f013 0201 	ands.w	r2, r3, #1
 802440e:	d00a      	beq.n	8024426 <__swsetup_r+0x9a>
 8024410:	2200      	movs	r2, #0
 8024412:	60a2      	str	r2, [r4, #8]
 8024414:	6962      	ldr	r2, [r4, #20]
 8024416:	4252      	negs	r2, r2
 8024418:	61a2      	str	r2, [r4, #24]
 802441a:	6922      	ldr	r2, [r4, #16]
 802441c:	b942      	cbnz	r2, 8024430 <__swsetup_r+0xa4>
 802441e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8024422:	d1c5      	bne.n	80243b0 <__swsetup_r+0x24>
 8024424:	bd38      	pop	{r3, r4, r5, pc}
 8024426:	0799      	lsls	r1, r3, #30
 8024428:	bf58      	it	pl
 802442a:	6962      	ldrpl	r2, [r4, #20]
 802442c:	60a2      	str	r2, [r4, #8]
 802442e:	e7f4      	b.n	802441a <__swsetup_r+0x8e>
 8024430:	2000      	movs	r0, #0
 8024432:	e7f7      	b.n	8024424 <__swsetup_r+0x98>
 8024434:	20000328 	.word	0x20000328

08024438 <memcmp>:
 8024438:	b510      	push	{r4, lr}
 802443a:	3901      	subs	r1, #1
 802443c:	4402      	add	r2, r0
 802443e:	4290      	cmp	r0, r2
 8024440:	d101      	bne.n	8024446 <memcmp+0xe>
 8024442:	2000      	movs	r0, #0
 8024444:	e005      	b.n	8024452 <memcmp+0x1a>
 8024446:	7803      	ldrb	r3, [r0, #0]
 8024448:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 802444c:	42a3      	cmp	r3, r4
 802444e:	d001      	beq.n	8024454 <memcmp+0x1c>
 8024450:	1b18      	subs	r0, r3, r4
 8024452:	bd10      	pop	{r4, pc}
 8024454:	3001      	adds	r0, #1
 8024456:	e7f2      	b.n	802443e <memcmp+0x6>

08024458 <memmove>:
 8024458:	4288      	cmp	r0, r1
 802445a:	b510      	push	{r4, lr}
 802445c:	eb01 0402 	add.w	r4, r1, r2
 8024460:	d902      	bls.n	8024468 <memmove+0x10>
 8024462:	4284      	cmp	r4, r0
 8024464:	4623      	mov	r3, r4
 8024466:	d807      	bhi.n	8024478 <memmove+0x20>
 8024468:	1e43      	subs	r3, r0, #1
 802446a:	42a1      	cmp	r1, r4
 802446c:	d008      	beq.n	8024480 <memmove+0x28>
 802446e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8024472:	f803 2f01 	strb.w	r2, [r3, #1]!
 8024476:	e7f8      	b.n	802446a <memmove+0x12>
 8024478:	4402      	add	r2, r0
 802447a:	4601      	mov	r1, r0
 802447c:	428a      	cmp	r2, r1
 802447e:	d100      	bne.n	8024482 <memmove+0x2a>
 8024480:	bd10      	pop	{r4, pc}
 8024482:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8024486:	f802 4d01 	strb.w	r4, [r2, #-1]!
 802448a:	e7f7      	b.n	802447c <memmove+0x24>

0802448c <memset>:
 802448c:	4402      	add	r2, r0
 802448e:	4603      	mov	r3, r0
 8024490:	4293      	cmp	r3, r2
 8024492:	d100      	bne.n	8024496 <memset+0xa>
 8024494:	4770      	bx	lr
 8024496:	f803 1b01 	strb.w	r1, [r3], #1
 802449a:	e7f9      	b.n	8024490 <memset+0x4>

0802449c <strchr>:
 802449c:	b2c9      	uxtb	r1, r1
 802449e:	4603      	mov	r3, r0
 80244a0:	4618      	mov	r0, r3
 80244a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80244a6:	b112      	cbz	r2, 80244ae <strchr+0x12>
 80244a8:	428a      	cmp	r2, r1
 80244aa:	d1f9      	bne.n	80244a0 <strchr+0x4>
 80244ac:	4770      	bx	lr
 80244ae:	2900      	cmp	r1, #0
 80244b0:	bf18      	it	ne
 80244b2:	2000      	movne	r0, #0
 80244b4:	4770      	bx	lr

080244b6 <strncmp>:
 80244b6:	b510      	push	{r4, lr}
 80244b8:	b16a      	cbz	r2, 80244d6 <strncmp+0x20>
 80244ba:	3901      	subs	r1, #1
 80244bc:	1884      	adds	r4, r0, r2
 80244be:	f810 2b01 	ldrb.w	r2, [r0], #1
 80244c2:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 80244c6:	429a      	cmp	r2, r3
 80244c8:	d103      	bne.n	80244d2 <strncmp+0x1c>
 80244ca:	42a0      	cmp	r0, r4
 80244cc:	d001      	beq.n	80244d2 <strncmp+0x1c>
 80244ce:	2a00      	cmp	r2, #0
 80244d0:	d1f5      	bne.n	80244be <strncmp+0x8>
 80244d2:	1ad0      	subs	r0, r2, r3
 80244d4:	bd10      	pop	{r4, pc}
 80244d6:	4610      	mov	r0, r2
 80244d8:	e7fc      	b.n	80244d4 <strncmp+0x1e>

080244da <strncpy>:
 80244da:	b510      	push	{r4, lr}
 80244dc:	3901      	subs	r1, #1
 80244de:	4603      	mov	r3, r0
 80244e0:	b132      	cbz	r2, 80244f0 <strncpy+0x16>
 80244e2:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80244e6:	f803 4b01 	strb.w	r4, [r3], #1
 80244ea:	3a01      	subs	r2, #1
 80244ec:	2c00      	cmp	r4, #0
 80244ee:	d1f7      	bne.n	80244e0 <strncpy+0x6>
 80244f0:	441a      	add	r2, r3
 80244f2:	2100      	movs	r1, #0
 80244f4:	4293      	cmp	r3, r2
 80244f6:	d100      	bne.n	80244fa <strncpy+0x20>
 80244f8:	bd10      	pop	{r4, pc}
 80244fa:	f803 1b01 	strb.w	r1, [r3], #1
 80244fe:	e7f9      	b.n	80244f4 <strncpy+0x1a>

08024500 <strrchr>:
 8024500:	b538      	push	{r3, r4, r5, lr}
 8024502:	f011 04ff 	ands.w	r4, r1, #255	@ 0xff
 8024506:	4603      	mov	r3, r0
 8024508:	d10e      	bne.n	8024528 <strrchr+0x28>
 802450a:	4621      	mov	r1, r4
 802450c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8024510:	f7ff bfc4 	b.w	802449c <strchr>
 8024514:	1c43      	adds	r3, r0, #1
 8024516:	4605      	mov	r5, r0
 8024518:	4621      	mov	r1, r4
 802451a:	4618      	mov	r0, r3
 802451c:	f7ff ffbe 	bl	802449c <strchr>
 8024520:	2800      	cmp	r0, #0
 8024522:	d1f7      	bne.n	8024514 <strrchr+0x14>
 8024524:	4628      	mov	r0, r5
 8024526:	bd38      	pop	{r3, r4, r5, pc}
 8024528:	2500      	movs	r5, #0
 802452a:	e7f5      	b.n	8024518 <strrchr+0x18>

0802452c <_raise_r>:
 802452c:	291f      	cmp	r1, #31
 802452e:	b538      	push	{r3, r4, r5, lr}
 8024530:	4605      	mov	r5, r0
 8024532:	460c      	mov	r4, r1
 8024534:	d904      	bls.n	8024540 <_raise_r+0x14>
 8024536:	2316      	movs	r3, #22
 8024538:	6003      	str	r3, [r0, #0]
 802453a:	f04f 30ff 	mov.w	r0, #4294967295
 802453e:	bd38      	pop	{r3, r4, r5, pc}
 8024540:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8024542:	b112      	cbz	r2, 802454a <_raise_r+0x1e>
 8024544:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8024548:	b94b      	cbnz	r3, 802455e <_raise_r+0x32>
 802454a:	4628      	mov	r0, r5
 802454c:	f000 f8c2 	bl	80246d4 <_getpid_r>
 8024550:	4622      	mov	r2, r4
 8024552:	4601      	mov	r1, r0
 8024554:	4628      	mov	r0, r5
 8024556:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 802455a:	f000 b8a9 	b.w	80246b0 <_kill_r>
 802455e:	2b01      	cmp	r3, #1
 8024560:	d00a      	beq.n	8024578 <_raise_r+0x4c>
 8024562:	1c59      	adds	r1, r3, #1
 8024564:	d103      	bne.n	802456e <_raise_r+0x42>
 8024566:	2316      	movs	r3, #22
 8024568:	6003      	str	r3, [r0, #0]
 802456a:	2001      	movs	r0, #1
 802456c:	e7e7      	b.n	802453e <_raise_r+0x12>
 802456e:	2100      	movs	r1, #0
 8024570:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8024574:	4620      	mov	r0, r4
 8024576:	4798      	blx	r3
 8024578:	2000      	movs	r0, #0
 802457a:	e7e0      	b.n	802453e <_raise_r+0x12>

0802457c <raise>:
 802457c:	4b02      	ldr	r3, [pc, #8]	@ (8024588 <raise+0xc>)
 802457e:	4601      	mov	r1, r0
 8024580:	6818      	ldr	r0, [r3, #0]
 8024582:	f7ff bfd3 	b.w	802452c <_raise_r>
 8024586:	bf00      	nop
 8024588:	20000328 	.word	0x20000328

0802458c <_close_r>:
 802458c:	b538      	push	{r3, r4, r5, lr}
 802458e:	4d06      	ldr	r5, [pc, #24]	@ (80245a8 <_close_r+0x1c>)
 8024590:	2300      	movs	r3, #0
 8024592:	4604      	mov	r4, r0
 8024594:	4608      	mov	r0, r1
 8024596:	602b      	str	r3, [r5, #0]
 8024598:	f7dc fd18 	bl	8000fcc <_close>
 802459c:	1c43      	adds	r3, r0, #1
 802459e:	d102      	bne.n	80245a6 <_close_r+0x1a>
 80245a0:	682b      	ldr	r3, [r5, #0]
 80245a2:	b103      	cbz	r3, 80245a6 <_close_r+0x1a>
 80245a4:	6023      	str	r3, [r4, #0]
 80245a6:	bd38      	pop	{r3, r4, r5, pc}
 80245a8:	20014da4 	.word	0x20014da4

080245ac <_reclaim_reent>:
 80245ac:	4b2d      	ldr	r3, [pc, #180]	@ (8024664 <_reclaim_reent+0xb8>)
 80245ae:	681b      	ldr	r3, [r3, #0]
 80245b0:	4283      	cmp	r3, r0
 80245b2:	b570      	push	{r4, r5, r6, lr}
 80245b4:	4604      	mov	r4, r0
 80245b6:	d053      	beq.n	8024660 <_reclaim_reent+0xb4>
 80245b8:	69c3      	ldr	r3, [r0, #28]
 80245ba:	b31b      	cbz	r3, 8024604 <_reclaim_reent+0x58>
 80245bc:	68db      	ldr	r3, [r3, #12]
 80245be:	b163      	cbz	r3, 80245da <_reclaim_reent+0x2e>
 80245c0:	2500      	movs	r5, #0
 80245c2:	69e3      	ldr	r3, [r4, #28]
 80245c4:	68db      	ldr	r3, [r3, #12]
 80245c6:	5959      	ldr	r1, [r3, r5]
 80245c8:	b9b1      	cbnz	r1, 80245f8 <_reclaim_reent+0x4c>
 80245ca:	3504      	adds	r5, #4
 80245cc:	2d80      	cmp	r5, #128	@ 0x80
 80245ce:	d1f8      	bne.n	80245c2 <_reclaim_reent+0x16>
 80245d0:	69e3      	ldr	r3, [r4, #28]
 80245d2:	4620      	mov	r0, r4
 80245d4:	68d9      	ldr	r1, [r3, #12]
 80245d6:	f000 f8e5 	bl	80247a4 <_free_r>
 80245da:	69e3      	ldr	r3, [r4, #28]
 80245dc:	6819      	ldr	r1, [r3, #0]
 80245de:	b111      	cbz	r1, 80245e6 <_reclaim_reent+0x3a>
 80245e0:	4620      	mov	r0, r4
 80245e2:	f000 f8df 	bl	80247a4 <_free_r>
 80245e6:	69e3      	ldr	r3, [r4, #28]
 80245e8:	689d      	ldr	r5, [r3, #8]
 80245ea:	b15d      	cbz	r5, 8024604 <_reclaim_reent+0x58>
 80245ec:	4629      	mov	r1, r5
 80245ee:	4620      	mov	r0, r4
 80245f0:	682d      	ldr	r5, [r5, #0]
 80245f2:	f000 f8d7 	bl	80247a4 <_free_r>
 80245f6:	e7f8      	b.n	80245ea <_reclaim_reent+0x3e>
 80245f8:	680e      	ldr	r6, [r1, #0]
 80245fa:	4620      	mov	r0, r4
 80245fc:	f000 f8d2 	bl	80247a4 <_free_r>
 8024600:	4631      	mov	r1, r6
 8024602:	e7e1      	b.n	80245c8 <_reclaim_reent+0x1c>
 8024604:	6961      	ldr	r1, [r4, #20]
 8024606:	b111      	cbz	r1, 802460e <_reclaim_reent+0x62>
 8024608:	4620      	mov	r0, r4
 802460a:	f000 f8cb 	bl	80247a4 <_free_r>
 802460e:	69e1      	ldr	r1, [r4, #28]
 8024610:	b111      	cbz	r1, 8024618 <_reclaim_reent+0x6c>
 8024612:	4620      	mov	r0, r4
 8024614:	f000 f8c6 	bl	80247a4 <_free_r>
 8024618:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 802461a:	b111      	cbz	r1, 8024622 <_reclaim_reent+0x76>
 802461c:	4620      	mov	r0, r4
 802461e:	f000 f8c1 	bl	80247a4 <_free_r>
 8024622:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8024624:	b111      	cbz	r1, 802462c <_reclaim_reent+0x80>
 8024626:	4620      	mov	r0, r4
 8024628:	f000 f8bc 	bl	80247a4 <_free_r>
 802462c:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 802462e:	b111      	cbz	r1, 8024636 <_reclaim_reent+0x8a>
 8024630:	4620      	mov	r0, r4
 8024632:	f000 f8b7 	bl	80247a4 <_free_r>
 8024636:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8024638:	b111      	cbz	r1, 8024640 <_reclaim_reent+0x94>
 802463a:	4620      	mov	r0, r4
 802463c:	f000 f8b2 	bl	80247a4 <_free_r>
 8024640:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8024642:	b111      	cbz	r1, 802464a <_reclaim_reent+0x9e>
 8024644:	4620      	mov	r0, r4
 8024646:	f000 f8ad 	bl	80247a4 <_free_r>
 802464a:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 802464c:	b111      	cbz	r1, 8024654 <_reclaim_reent+0xa8>
 802464e:	4620      	mov	r0, r4
 8024650:	f000 f8a8 	bl	80247a4 <_free_r>
 8024654:	6a23      	ldr	r3, [r4, #32]
 8024656:	b11b      	cbz	r3, 8024660 <_reclaim_reent+0xb4>
 8024658:	4620      	mov	r0, r4
 802465a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 802465e:	4718      	bx	r3
 8024660:	bd70      	pop	{r4, r5, r6, pc}
 8024662:	bf00      	nop
 8024664:	20000328 	.word	0x20000328

08024668 <_lseek_r>:
 8024668:	b538      	push	{r3, r4, r5, lr}
 802466a:	4d07      	ldr	r5, [pc, #28]	@ (8024688 <_lseek_r+0x20>)
 802466c:	4604      	mov	r4, r0
 802466e:	4608      	mov	r0, r1
 8024670:	4611      	mov	r1, r2
 8024672:	2200      	movs	r2, #0
 8024674:	602a      	str	r2, [r5, #0]
 8024676:	461a      	mov	r2, r3
 8024678:	f7dc fccf 	bl	800101a <_lseek>
 802467c:	1c43      	adds	r3, r0, #1
 802467e:	d102      	bne.n	8024686 <_lseek_r+0x1e>
 8024680:	682b      	ldr	r3, [r5, #0]
 8024682:	b103      	cbz	r3, 8024686 <_lseek_r+0x1e>
 8024684:	6023      	str	r3, [r4, #0]
 8024686:	bd38      	pop	{r3, r4, r5, pc}
 8024688:	20014da4 	.word	0x20014da4

0802468c <_read_r>:
 802468c:	b538      	push	{r3, r4, r5, lr}
 802468e:	4d07      	ldr	r5, [pc, #28]	@ (80246ac <_read_r+0x20>)
 8024690:	4604      	mov	r4, r0
 8024692:	4608      	mov	r0, r1
 8024694:	4611      	mov	r1, r2
 8024696:	2200      	movs	r2, #0
 8024698:	602a      	str	r2, [r5, #0]
 802469a:	461a      	mov	r2, r3
 802469c:	f7dc fc79 	bl	8000f92 <_read>
 80246a0:	1c43      	adds	r3, r0, #1
 80246a2:	d102      	bne.n	80246aa <_read_r+0x1e>
 80246a4:	682b      	ldr	r3, [r5, #0]
 80246a6:	b103      	cbz	r3, 80246aa <_read_r+0x1e>
 80246a8:	6023      	str	r3, [r4, #0]
 80246aa:	bd38      	pop	{r3, r4, r5, pc}
 80246ac:	20014da4 	.word	0x20014da4

080246b0 <_kill_r>:
 80246b0:	b538      	push	{r3, r4, r5, lr}
 80246b2:	4d07      	ldr	r5, [pc, #28]	@ (80246d0 <_kill_r+0x20>)
 80246b4:	2300      	movs	r3, #0
 80246b6:	4604      	mov	r4, r0
 80246b8:	4608      	mov	r0, r1
 80246ba:	4611      	mov	r1, r2
 80246bc:	602b      	str	r3, [r5, #0]
 80246be:	f7dc fc4d 	bl	8000f5c <_kill>
 80246c2:	1c43      	adds	r3, r0, #1
 80246c4:	d102      	bne.n	80246cc <_kill_r+0x1c>
 80246c6:	682b      	ldr	r3, [r5, #0]
 80246c8:	b103      	cbz	r3, 80246cc <_kill_r+0x1c>
 80246ca:	6023      	str	r3, [r4, #0]
 80246cc:	bd38      	pop	{r3, r4, r5, pc}
 80246ce:	bf00      	nop
 80246d0:	20014da4 	.word	0x20014da4

080246d4 <_getpid_r>:
 80246d4:	f7dc bc3a 	b.w	8000f4c <_getpid>

080246d8 <_sbrk_r>:
 80246d8:	b538      	push	{r3, r4, r5, lr}
 80246da:	4d06      	ldr	r5, [pc, #24]	@ (80246f4 <_sbrk_r+0x1c>)
 80246dc:	2300      	movs	r3, #0
 80246de:	4604      	mov	r4, r0
 80246e0:	4608      	mov	r0, r1
 80246e2:	602b      	str	r3, [r5, #0]
 80246e4:	f7dc fca6 	bl	8001034 <_sbrk>
 80246e8:	1c43      	adds	r3, r0, #1
 80246ea:	d102      	bne.n	80246f2 <_sbrk_r+0x1a>
 80246ec:	682b      	ldr	r3, [r5, #0]
 80246ee:	b103      	cbz	r3, 80246f2 <_sbrk_r+0x1a>
 80246f0:	6023      	str	r3, [r4, #0]
 80246f2:	bd38      	pop	{r3, r4, r5, pc}
 80246f4:	20014da4 	.word	0x20014da4

080246f8 <_write_r>:
 80246f8:	b538      	push	{r3, r4, r5, lr}
 80246fa:	4d07      	ldr	r5, [pc, #28]	@ (8024718 <_write_r+0x20>)
 80246fc:	4604      	mov	r4, r0
 80246fe:	4608      	mov	r0, r1
 8024700:	4611      	mov	r1, r2
 8024702:	2200      	movs	r2, #0
 8024704:	602a      	str	r2, [r5, #0]
 8024706:	461a      	mov	r2, r3
 8024708:	f7dc f824 	bl	8000754 <_write>
 802470c:	1c43      	adds	r3, r0, #1
 802470e:	d102      	bne.n	8024716 <_write_r+0x1e>
 8024710:	682b      	ldr	r3, [r5, #0]
 8024712:	b103      	cbz	r3, 8024716 <_write_r+0x1e>
 8024714:	6023      	str	r3, [r4, #0]
 8024716:	bd38      	pop	{r3, r4, r5, pc}
 8024718:	20014da4 	.word	0x20014da4

0802471c <__errno>:
 802471c:	4b01      	ldr	r3, [pc, #4]	@ (8024724 <__errno+0x8>)
 802471e:	6818      	ldr	r0, [r3, #0]
 8024720:	4770      	bx	lr
 8024722:	bf00      	nop
 8024724:	20000328 	.word	0x20000328

08024728 <__libc_init_array>:
 8024728:	b570      	push	{r4, r5, r6, lr}
 802472a:	4d0d      	ldr	r5, [pc, #52]	@ (8024760 <__libc_init_array+0x38>)
 802472c:	4c0d      	ldr	r4, [pc, #52]	@ (8024764 <__libc_init_array+0x3c>)
 802472e:	1b64      	subs	r4, r4, r5
 8024730:	10a4      	asrs	r4, r4, #2
 8024732:	2600      	movs	r6, #0
 8024734:	42a6      	cmp	r6, r4
 8024736:	d109      	bne.n	802474c <__libc_init_array+0x24>
 8024738:	4d0b      	ldr	r5, [pc, #44]	@ (8024768 <__libc_init_array+0x40>)
 802473a:	4c0c      	ldr	r4, [pc, #48]	@ (802476c <__libc_init_array+0x44>)
 802473c:	f000 fcae 	bl	802509c <_init>
 8024740:	1b64      	subs	r4, r4, r5
 8024742:	10a4      	asrs	r4, r4, #2
 8024744:	2600      	movs	r6, #0
 8024746:	42a6      	cmp	r6, r4
 8024748:	d105      	bne.n	8024756 <__libc_init_array+0x2e>
 802474a:	bd70      	pop	{r4, r5, r6, pc}
 802474c:	f855 3b04 	ldr.w	r3, [r5], #4
 8024750:	4798      	blx	r3
 8024752:	3601      	adds	r6, #1
 8024754:	e7ee      	b.n	8024734 <__libc_init_array+0xc>
 8024756:	f855 3b04 	ldr.w	r3, [r5], #4
 802475a:	4798      	blx	r3
 802475c:	3601      	adds	r6, #1
 802475e:	e7f2      	b.n	8024746 <__libc_init_array+0x1e>
 8024760:	08035a68 	.word	0x08035a68
 8024764:	08035a68 	.word	0x08035a68
 8024768:	08035a68 	.word	0x08035a68
 802476c:	08035a6c 	.word	0x08035a6c

08024770 <__retarget_lock_init_recursive>:
 8024770:	4770      	bx	lr

08024772 <__retarget_lock_acquire_recursive>:
 8024772:	4770      	bx	lr

08024774 <__retarget_lock_release_recursive>:
 8024774:	4770      	bx	lr

08024776 <strcpy>:
 8024776:	4603      	mov	r3, r0
 8024778:	f811 2b01 	ldrb.w	r2, [r1], #1
 802477c:	f803 2b01 	strb.w	r2, [r3], #1
 8024780:	2a00      	cmp	r2, #0
 8024782:	d1f9      	bne.n	8024778 <strcpy+0x2>
 8024784:	4770      	bx	lr

08024786 <memcpy>:
 8024786:	440a      	add	r2, r1
 8024788:	4291      	cmp	r1, r2
 802478a:	f100 33ff 	add.w	r3, r0, #4294967295
 802478e:	d100      	bne.n	8024792 <memcpy+0xc>
 8024790:	4770      	bx	lr
 8024792:	b510      	push	{r4, lr}
 8024794:	f811 4b01 	ldrb.w	r4, [r1], #1
 8024798:	f803 4f01 	strb.w	r4, [r3, #1]!
 802479c:	4291      	cmp	r1, r2
 802479e:	d1f9      	bne.n	8024794 <memcpy+0xe>
 80247a0:	bd10      	pop	{r4, pc}
	...

080247a4 <_free_r>:
 80247a4:	b538      	push	{r3, r4, r5, lr}
 80247a6:	4605      	mov	r5, r0
 80247a8:	2900      	cmp	r1, #0
 80247aa:	d041      	beq.n	8024830 <_free_r+0x8c>
 80247ac:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80247b0:	1f0c      	subs	r4, r1, #4
 80247b2:	2b00      	cmp	r3, #0
 80247b4:	bfb8      	it	lt
 80247b6:	18e4      	addlt	r4, r4, r3
 80247b8:	f7ff fb5c 	bl	8023e74 <__malloc_lock>
 80247bc:	4a1d      	ldr	r2, [pc, #116]	@ (8024834 <_free_r+0x90>)
 80247be:	6813      	ldr	r3, [r2, #0]
 80247c0:	b933      	cbnz	r3, 80247d0 <_free_r+0x2c>
 80247c2:	6063      	str	r3, [r4, #4]
 80247c4:	6014      	str	r4, [r2, #0]
 80247c6:	4628      	mov	r0, r5
 80247c8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80247cc:	f7ff bb58 	b.w	8023e80 <__malloc_unlock>
 80247d0:	42a3      	cmp	r3, r4
 80247d2:	d908      	bls.n	80247e6 <_free_r+0x42>
 80247d4:	6820      	ldr	r0, [r4, #0]
 80247d6:	1821      	adds	r1, r4, r0
 80247d8:	428b      	cmp	r3, r1
 80247da:	bf01      	itttt	eq
 80247dc:	6819      	ldreq	r1, [r3, #0]
 80247de:	685b      	ldreq	r3, [r3, #4]
 80247e0:	1809      	addeq	r1, r1, r0
 80247e2:	6021      	streq	r1, [r4, #0]
 80247e4:	e7ed      	b.n	80247c2 <_free_r+0x1e>
 80247e6:	461a      	mov	r2, r3
 80247e8:	685b      	ldr	r3, [r3, #4]
 80247ea:	b10b      	cbz	r3, 80247f0 <_free_r+0x4c>
 80247ec:	42a3      	cmp	r3, r4
 80247ee:	d9fa      	bls.n	80247e6 <_free_r+0x42>
 80247f0:	6811      	ldr	r1, [r2, #0]
 80247f2:	1850      	adds	r0, r2, r1
 80247f4:	42a0      	cmp	r0, r4
 80247f6:	d10b      	bne.n	8024810 <_free_r+0x6c>
 80247f8:	6820      	ldr	r0, [r4, #0]
 80247fa:	4401      	add	r1, r0
 80247fc:	1850      	adds	r0, r2, r1
 80247fe:	4283      	cmp	r3, r0
 8024800:	6011      	str	r1, [r2, #0]
 8024802:	d1e0      	bne.n	80247c6 <_free_r+0x22>
 8024804:	6818      	ldr	r0, [r3, #0]
 8024806:	685b      	ldr	r3, [r3, #4]
 8024808:	6053      	str	r3, [r2, #4]
 802480a:	4408      	add	r0, r1
 802480c:	6010      	str	r0, [r2, #0]
 802480e:	e7da      	b.n	80247c6 <_free_r+0x22>
 8024810:	d902      	bls.n	8024818 <_free_r+0x74>
 8024812:	230c      	movs	r3, #12
 8024814:	602b      	str	r3, [r5, #0]
 8024816:	e7d6      	b.n	80247c6 <_free_r+0x22>
 8024818:	6820      	ldr	r0, [r4, #0]
 802481a:	1821      	adds	r1, r4, r0
 802481c:	428b      	cmp	r3, r1
 802481e:	bf04      	itt	eq
 8024820:	6819      	ldreq	r1, [r3, #0]
 8024822:	685b      	ldreq	r3, [r3, #4]
 8024824:	6063      	str	r3, [r4, #4]
 8024826:	bf04      	itt	eq
 8024828:	1809      	addeq	r1, r1, r0
 802482a:	6021      	streq	r1, [r4, #0]
 802482c:	6054      	str	r4, [r2, #4]
 802482e:	e7ca      	b.n	80247c6 <_free_r+0x22>
 8024830:	bd38      	pop	{r3, r4, r5, pc}
 8024832:	bf00      	nop
 8024834:	20014c64 	.word	0x20014c64

08024838 <__sfputc_r>:
 8024838:	6893      	ldr	r3, [r2, #8]
 802483a:	3b01      	subs	r3, #1
 802483c:	2b00      	cmp	r3, #0
 802483e:	b410      	push	{r4}
 8024840:	6093      	str	r3, [r2, #8]
 8024842:	da08      	bge.n	8024856 <__sfputc_r+0x1e>
 8024844:	6994      	ldr	r4, [r2, #24]
 8024846:	42a3      	cmp	r3, r4
 8024848:	db01      	blt.n	802484e <__sfputc_r+0x16>
 802484a:	290a      	cmp	r1, #10
 802484c:	d103      	bne.n	8024856 <__sfputc_r+0x1e>
 802484e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8024852:	f7ff bd5c 	b.w	802430e <__swbuf_r>
 8024856:	6813      	ldr	r3, [r2, #0]
 8024858:	1c58      	adds	r0, r3, #1
 802485a:	6010      	str	r0, [r2, #0]
 802485c:	7019      	strb	r1, [r3, #0]
 802485e:	4608      	mov	r0, r1
 8024860:	f85d 4b04 	ldr.w	r4, [sp], #4
 8024864:	4770      	bx	lr

08024866 <__sfputs_r>:
 8024866:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8024868:	4606      	mov	r6, r0
 802486a:	460f      	mov	r7, r1
 802486c:	4614      	mov	r4, r2
 802486e:	18d5      	adds	r5, r2, r3
 8024870:	42ac      	cmp	r4, r5
 8024872:	d101      	bne.n	8024878 <__sfputs_r+0x12>
 8024874:	2000      	movs	r0, #0
 8024876:	e007      	b.n	8024888 <__sfputs_r+0x22>
 8024878:	f814 1b01 	ldrb.w	r1, [r4], #1
 802487c:	463a      	mov	r2, r7
 802487e:	4630      	mov	r0, r6
 8024880:	f7ff ffda 	bl	8024838 <__sfputc_r>
 8024884:	1c43      	adds	r3, r0, #1
 8024886:	d1f3      	bne.n	8024870 <__sfputs_r+0xa>
 8024888:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0802488c <_vfiprintf_r>:
 802488c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024890:	460d      	mov	r5, r1
 8024892:	b09d      	sub	sp, #116	@ 0x74
 8024894:	4614      	mov	r4, r2
 8024896:	4698      	mov	r8, r3
 8024898:	4606      	mov	r6, r0
 802489a:	b118      	cbz	r0, 80248a4 <_vfiprintf_r+0x18>
 802489c:	6a03      	ldr	r3, [r0, #32]
 802489e:	b90b      	cbnz	r3, 80248a4 <_vfiprintf_r+0x18>
 80248a0:	f7ff fc32 	bl	8024108 <__sinit>
 80248a4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80248a6:	07d9      	lsls	r1, r3, #31
 80248a8:	d405      	bmi.n	80248b6 <_vfiprintf_r+0x2a>
 80248aa:	89ab      	ldrh	r3, [r5, #12]
 80248ac:	059a      	lsls	r2, r3, #22
 80248ae:	d402      	bmi.n	80248b6 <_vfiprintf_r+0x2a>
 80248b0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80248b2:	f7ff ff5e 	bl	8024772 <__retarget_lock_acquire_recursive>
 80248b6:	89ab      	ldrh	r3, [r5, #12]
 80248b8:	071b      	lsls	r3, r3, #28
 80248ba:	d501      	bpl.n	80248c0 <_vfiprintf_r+0x34>
 80248bc:	692b      	ldr	r3, [r5, #16]
 80248be:	b99b      	cbnz	r3, 80248e8 <_vfiprintf_r+0x5c>
 80248c0:	4629      	mov	r1, r5
 80248c2:	4630      	mov	r0, r6
 80248c4:	f7ff fd62 	bl	802438c <__swsetup_r>
 80248c8:	b170      	cbz	r0, 80248e8 <_vfiprintf_r+0x5c>
 80248ca:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80248cc:	07dc      	lsls	r4, r3, #31
 80248ce:	d504      	bpl.n	80248da <_vfiprintf_r+0x4e>
 80248d0:	f04f 30ff 	mov.w	r0, #4294967295
 80248d4:	b01d      	add	sp, #116	@ 0x74
 80248d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80248da:	89ab      	ldrh	r3, [r5, #12]
 80248dc:	0598      	lsls	r0, r3, #22
 80248de:	d4f7      	bmi.n	80248d0 <_vfiprintf_r+0x44>
 80248e0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80248e2:	f7ff ff47 	bl	8024774 <__retarget_lock_release_recursive>
 80248e6:	e7f3      	b.n	80248d0 <_vfiprintf_r+0x44>
 80248e8:	2300      	movs	r3, #0
 80248ea:	9309      	str	r3, [sp, #36]	@ 0x24
 80248ec:	2320      	movs	r3, #32
 80248ee:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80248f2:	f8cd 800c 	str.w	r8, [sp, #12]
 80248f6:	2330      	movs	r3, #48	@ 0x30
 80248f8:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8024aa8 <_vfiprintf_r+0x21c>
 80248fc:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8024900:	f04f 0901 	mov.w	r9, #1
 8024904:	4623      	mov	r3, r4
 8024906:	469a      	mov	sl, r3
 8024908:	f813 2b01 	ldrb.w	r2, [r3], #1
 802490c:	b10a      	cbz	r2, 8024912 <_vfiprintf_r+0x86>
 802490e:	2a25      	cmp	r2, #37	@ 0x25
 8024910:	d1f9      	bne.n	8024906 <_vfiprintf_r+0x7a>
 8024912:	ebba 0b04 	subs.w	fp, sl, r4
 8024916:	d00b      	beq.n	8024930 <_vfiprintf_r+0xa4>
 8024918:	465b      	mov	r3, fp
 802491a:	4622      	mov	r2, r4
 802491c:	4629      	mov	r1, r5
 802491e:	4630      	mov	r0, r6
 8024920:	f7ff ffa1 	bl	8024866 <__sfputs_r>
 8024924:	3001      	adds	r0, #1
 8024926:	f000 80a7 	beq.w	8024a78 <_vfiprintf_r+0x1ec>
 802492a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 802492c:	445a      	add	r2, fp
 802492e:	9209      	str	r2, [sp, #36]	@ 0x24
 8024930:	f89a 3000 	ldrb.w	r3, [sl]
 8024934:	2b00      	cmp	r3, #0
 8024936:	f000 809f 	beq.w	8024a78 <_vfiprintf_r+0x1ec>
 802493a:	2300      	movs	r3, #0
 802493c:	f04f 32ff 	mov.w	r2, #4294967295
 8024940:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8024944:	f10a 0a01 	add.w	sl, sl, #1
 8024948:	9304      	str	r3, [sp, #16]
 802494a:	9307      	str	r3, [sp, #28]
 802494c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8024950:	931a      	str	r3, [sp, #104]	@ 0x68
 8024952:	4654      	mov	r4, sl
 8024954:	2205      	movs	r2, #5
 8024956:	f814 1b01 	ldrb.w	r1, [r4], #1
 802495a:	4853      	ldr	r0, [pc, #332]	@ (8024aa8 <_vfiprintf_r+0x21c>)
 802495c:	f7db fc80 	bl	8000260 <memchr>
 8024960:	9a04      	ldr	r2, [sp, #16]
 8024962:	b9d8      	cbnz	r0, 802499c <_vfiprintf_r+0x110>
 8024964:	06d1      	lsls	r1, r2, #27
 8024966:	bf44      	itt	mi
 8024968:	2320      	movmi	r3, #32
 802496a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 802496e:	0713      	lsls	r3, r2, #28
 8024970:	bf44      	itt	mi
 8024972:	232b      	movmi	r3, #43	@ 0x2b
 8024974:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8024978:	f89a 3000 	ldrb.w	r3, [sl]
 802497c:	2b2a      	cmp	r3, #42	@ 0x2a
 802497e:	d015      	beq.n	80249ac <_vfiprintf_r+0x120>
 8024980:	9a07      	ldr	r2, [sp, #28]
 8024982:	4654      	mov	r4, sl
 8024984:	2000      	movs	r0, #0
 8024986:	f04f 0c0a 	mov.w	ip, #10
 802498a:	4621      	mov	r1, r4
 802498c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8024990:	3b30      	subs	r3, #48	@ 0x30
 8024992:	2b09      	cmp	r3, #9
 8024994:	d94b      	bls.n	8024a2e <_vfiprintf_r+0x1a2>
 8024996:	b1b0      	cbz	r0, 80249c6 <_vfiprintf_r+0x13a>
 8024998:	9207      	str	r2, [sp, #28]
 802499a:	e014      	b.n	80249c6 <_vfiprintf_r+0x13a>
 802499c:	eba0 0308 	sub.w	r3, r0, r8
 80249a0:	fa09 f303 	lsl.w	r3, r9, r3
 80249a4:	4313      	orrs	r3, r2
 80249a6:	9304      	str	r3, [sp, #16]
 80249a8:	46a2      	mov	sl, r4
 80249aa:	e7d2      	b.n	8024952 <_vfiprintf_r+0xc6>
 80249ac:	9b03      	ldr	r3, [sp, #12]
 80249ae:	1d19      	adds	r1, r3, #4
 80249b0:	681b      	ldr	r3, [r3, #0]
 80249b2:	9103      	str	r1, [sp, #12]
 80249b4:	2b00      	cmp	r3, #0
 80249b6:	bfbb      	ittet	lt
 80249b8:	425b      	neglt	r3, r3
 80249ba:	f042 0202 	orrlt.w	r2, r2, #2
 80249be:	9307      	strge	r3, [sp, #28]
 80249c0:	9307      	strlt	r3, [sp, #28]
 80249c2:	bfb8      	it	lt
 80249c4:	9204      	strlt	r2, [sp, #16]
 80249c6:	7823      	ldrb	r3, [r4, #0]
 80249c8:	2b2e      	cmp	r3, #46	@ 0x2e
 80249ca:	d10a      	bne.n	80249e2 <_vfiprintf_r+0x156>
 80249cc:	7863      	ldrb	r3, [r4, #1]
 80249ce:	2b2a      	cmp	r3, #42	@ 0x2a
 80249d0:	d132      	bne.n	8024a38 <_vfiprintf_r+0x1ac>
 80249d2:	9b03      	ldr	r3, [sp, #12]
 80249d4:	1d1a      	adds	r2, r3, #4
 80249d6:	681b      	ldr	r3, [r3, #0]
 80249d8:	9203      	str	r2, [sp, #12]
 80249da:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80249de:	3402      	adds	r4, #2
 80249e0:	9305      	str	r3, [sp, #20]
 80249e2:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8024ab8 <_vfiprintf_r+0x22c>
 80249e6:	7821      	ldrb	r1, [r4, #0]
 80249e8:	2203      	movs	r2, #3
 80249ea:	4650      	mov	r0, sl
 80249ec:	f7db fc38 	bl	8000260 <memchr>
 80249f0:	b138      	cbz	r0, 8024a02 <_vfiprintf_r+0x176>
 80249f2:	9b04      	ldr	r3, [sp, #16]
 80249f4:	eba0 000a 	sub.w	r0, r0, sl
 80249f8:	2240      	movs	r2, #64	@ 0x40
 80249fa:	4082      	lsls	r2, r0
 80249fc:	4313      	orrs	r3, r2
 80249fe:	3401      	adds	r4, #1
 8024a00:	9304      	str	r3, [sp, #16]
 8024a02:	f814 1b01 	ldrb.w	r1, [r4], #1
 8024a06:	4829      	ldr	r0, [pc, #164]	@ (8024aac <_vfiprintf_r+0x220>)
 8024a08:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8024a0c:	2206      	movs	r2, #6
 8024a0e:	f7db fc27 	bl	8000260 <memchr>
 8024a12:	2800      	cmp	r0, #0
 8024a14:	d03f      	beq.n	8024a96 <_vfiprintf_r+0x20a>
 8024a16:	4b26      	ldr	r3, [pc, #152]	@ (8024ab0 <_vfiprintf_r+0x224>)
 8024a18:	bb1b      	cbnz	r3, 8024a62 <_vfiprintf_r+0x1d6>
 8024a1a:	9b03      	ldr	r3, [sp, #12]
 8024a1c:	3307      	adds	r3, #7
 8024a1e:	f023 0307 	bic.w	r3, r3, #7
 8024a22:	3308      	adds	r3, #8
 8024a24:	9303      	str	r3, [sp, #12]
 8024a26:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8024a28:	443b      	add	r3, r7
 8024a2a:	9309      	str	r3, [sp, #36]	@ 0x24
 8024a2c:	e76a      	b.n	8024904 <_vfiprintf_r+0x78>
 8024a2e:	fb0c 3202 	mla	r2, ip, r2, r3
 8024a32:	460c      	mov	r4, r1
 8024a34:	2001      	movs	r0, #1
 8024a36:	e7a8      	b.n	802498a <_vfiprintf_r+0xfe>
 8024a38:	2300      	movs	r3, #0
 8024a3a:	3401      	adds	r4, #1
 8024a3c:	9305      	str	r3, [sp, #20]
 8024a3e:	4619      	mov	r1, r3
 8024a40:	f04f 0c0a 	mov.w	ip, #10
 8024a44:	4620      	mov	r0, r4
 8024a46:	f810 2b01 	ldrb.w	r2, [r0], #1
 8024a4a:	3a30      	subs	r2, #48	@ 0x30
 8024a4c:	2a09      	cmp	r2, #9
 8024a4e:	d903      	bls.n	8024a58 <_vfiprintf_r+0x1cc>
 8024a50:	2b00      	cmp	r3, #0
 8024a52:	d0c6      	beq.n	80249e2 <_vfiprintf_r+0x156>
 8024a54:	9105      	str	r1, [sp, #20]
 8024a56:	e7c4      	b.n	80249e2 <_vfiprintf_r+0x156>
 8024a58:	fb0c 2101 	mla	r1, ip, r1, r2
 8024a5c:	4604      	mov	r4, r0
 8024a5e:	2301      	movs	r3, #1
 8024a60:	e7f0      	b.n	8024a44 <_vfiprintf_r+0x1b8>
 8024a62:	ab03      	add	r3, sp, #12
 8024a64:	9300      	str	r3, [sp, #0]
 8024a66:	462a      	mov	r2, r5
 8024a68:	4b12      	ldr	r3, [pc, #72]	@ (8024ab4 <_vfiprintf_r+0x228>)
 8024a6a:	a904      	add	r1, sp, #16
 8024a6c:	4630      	mov	r0, r6
 8024a6e:	f3af 8000 	nop.w
 8024a72:	4607      	mov	r7, r0
 8024a74:	1c78      	adds	r0, r7, #1
 8024a76:	d1d6      	bne.n	8024a26 <_vfiprintf_r+0x19a>
 8024a78:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8024a7a:	07d9      	lsls	r1, r3, #31
 8024a7c:	d405      	bmi.n	8024a8a <_vfiprintf_r+0x1fe>
 8024a7e:	89ab      	ldrh	r3, [r5, #12]
 8024a80:	059a      	lsls	r2, r3, #22
 8024a82:	d402      	bmi.n	8024a8a <_vfiprintf_r+0x1fe>
 8024a84:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8024a86:	f7ff fe75 	bl	8024774 <__retarget_lock_release_recursive>
 8024a8a:	89ab      	ldrh	r3, [r5, #12]
 8024a8c:	065b      	lsls	r3, r3, #25
 8024a8e:	f53f af1f 	bmi.w	80248d0 <_vfiprintf_r+0x44>
 8024a92:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8024a94:	e71e      	b.n	80248d4 <_vfiprintf_r+0x48>
 8024a96:	ab03      	add	r3, sp, #12
 8024a98:	9300      	str	r3, [sp, #0]
 8024a9a:	462a      	mov	r2, r5
 8024a9c:	4b05      	ldr	r3, [pc, #20]	@ (8024ab4 <_vfiprintf_r+0x228>)
 8024a9e:	a904      	add	r1, sp, #16
 8024aa0:	4630      	mov	r0, r6
 8024aa2:	f000 f879 	bl	8024b98 <_printf_i>
 8024aa6:	e7e4      	b.n	8024a72 <_vfiprintf_r+0x1e6>
 8024aa8:	08035929 	.word	0x08035929
 8024aac:	08035933 	.word	0x08035933
 8024ab0:	00000000 	.word	0x00000000
 8024ab4:	08024867 	.word	0x08024867
 8024ab8:	0803592f 	.word	0x0803592f

08024abc <_printf_common>:
 8024abc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8024ac0:	4616      	mov	r6, r2
 8024ac2:	4698      	mov	r8, r3
 8024ac4:	688a      	ldr	r2, [r1, #8]
 8024ac6:	690b      	ldr	r3, [r1, #16]
 8024ac8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8024acc:	4293      	cmp	r3, r2
 8024ace:	bfb8      	it	lt
 8024ad0:	4613      	movlt	r3, r2
 8024ad2:	6033      	str	r3, [r6, #0]
 8024ad4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8024ad8:	4607      	mov	r7, r0
 8024ada:	460c      	mov	r4, r1
 8024adc:	b10a      	cbz	r2, 8024ae2 <_printf_common+0x26>
 8024ade:	3301      	adds	r3, #1
 8024ae0:	6033      	str	r3, [r6, #0]
 8024ae2:	6823      	ldr	r3, [r4, #0]
 8024ae4:	0699      	lsls	r1, r3, #26
 8024ae6:	bf42      	ittt	mi
 8024ae8:	6833      	ldrmi	r3, [r6, #0]
 8024aea:	3302      	addmi	r3, #2
 8024aec:	6033      	strmi	r3, [r6, #0]
 8024aee:	6825      	ldr	r5, [r4, #0]
 8024af0:	f015 0506 	ands.w	r5, r5, #6
 8024af4:	d106      	bne.n	8024b04 <_printf_common+0x48>
 8024af6:	f104 0a19 	add.w	sl, r4, #25
 8024afa:	68e3      	ldr	r3, [r4, #12]
 8024afc:	6832      	ldr	r2, [r6, #0]
 8024afe:	1a9b      	subs	r3, r3, r2
 8024b00:	42ab      	cmp	r3, r5
 8024b02:	dc26      	bgt.n	8024b52 <_printf_common+0x96>
 8024b04:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8024b08:	6822      	ldr	r2, [r4, #0]
 8024b0a:	3b00      	subs	r3, #0
 8024b0c:	bf18      	it	ne
 8024b0e:	2301      	movne	r3, #1
 8024b10:	0692      	lsls	r2, r2, #26
 8024b12:	d42b      	bmi.n	8024b6c <_printf_common+0xb0>
 8024b14:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8024b18:	4641      	mov	r1, r8
 8024b1a:	4638      	mov	r0, r7
 8024b1c:	47c8      	blx	r9
 8024b1e:	3001      	adds	r0, #1
 8024b20:	d01e      	beq.n	8024b60 <_printf_common+0xa4>
 8024b22:	6823      	ldr	r3, [r4, #0]
 8024b24:	6922      	ldr	r2, [r4, #16]
 8024b26:	f003 0306 	and.w	r3, r3, #6
 8024b2a:	2b04      	cmp	r3, #4
 8024b2c:	bf02      	ittt	eq
 8024b2e:	68e5      	ldreq	r5, [r4, #12]
 8024b30:	6833      	ldreq	r3, [r6, #0]
 8024b32:	1aed      	subeq	r5, r5, r3
 8024b34:	68a3      	ldr	r3, [r4, #8]
 8024b36:	bf0c      	ite	eq
 8024b38:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8024b3c:	2500      	movne	r5, #0
 8024b3e:	4293      	cmp	r3, r2
 8024b40:	bfc4      	itt	gt
 8024b42:	1a9b      	subgt	r3, r3, r2
 8024b44:	18ed      	addgt	r5, r5, r3
 8024b46:	2600      	movs	r6, #0
 8024b48:	341a      	adds	r4, #26
 8024b4a:	42b5      	cmp	r5, r6
 8024b4c:	d11a      	bne.n	8024b84 <_printf_common+0xc8>
 8024b4e:	2000      	movs	r0, #0
 8024b50:	e008      	b.n	8024b64 <_printf_common+0xa8>
 8024b52:	2301      	movs	r3, #1
 8024b54:	4652      	mov	r2, sl
 8024b56:	4641      	mov	r1, r8
 8024b58:	4638      	mov	r0, r7
 8024b5a:	47c8      	blx	r9
 8024b5c:	3001      	adds	r0, #1
 8024b5e:	d103      	bne.n	8024b68 <_printf_common+0xac>
 8024b60:	f04f 30ff 	mov.w	r0, #4294967295
 8024b64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8024b68:	3501      	adds	r5, #1
 8024b6a:	e7c6      	b.n	8024afa <_printf_common+0x3e>
 8024b6c:	18e1      	adds	r1, r4, r3
 8024b6e:	1c5a      	adds	r2, r3, #1
 8024b70:	2030      	movs	r0, #48	@ 0x30
 8024b72:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8024b76:	4422      	add	r2, r4
 8024b78:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8024b7c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8024b80:	3302      	adds	r3, #2
 8024b82:	e7c7      	b.n	8024b14 <_printf_common+0x58>
 8024b84:	2301      	movs	r3, #1
 8024b86:	4622      	mov	r2, r4
 8024b88:	4641      	mov	r1, r8
 8024b8a:	4638      	mov	r0, r7
 8024b8c:	47c8      	blx	r9
 8024b8e:	3001      	adds	r0, #1
 8024b90:	d0e6      	beq.n	8024b60 <_printf_common+0xa4>
 8024b92:	3601      	adds	r6, #1
 8024b94:	e7d9      	b.n	8024b4a <_printf_common+0x8e>
	...

08024b98 <_printf_i>:
 8024b98:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8024b9c:	7e0f      	ldrb	r7, [r1, #24]
 8024b9e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8024ba0:	2f78      	cmp	r7, #120	@ 0x78
 8024ba2:	4691      	mov	r9, r2
 8024ba4:	4680      	mov	r8, r0
 8024ba6:	460c      	mov	r4, r1
 8024ba8:	469a      	mov	sl, r3
 8024baa:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8024bae:	d807      	bhi.n	8024bc0 <_printf_i+0x28>
 8024bb0:	2f62      	cmp	r7, #98	@ 0x62
 8024bb2:	d80a      	bhi.n	8024bca <_printf_i+0x32>
 8024bb4:	2f00      	cmp	r7, #0
 8024bb6:	f000 80d1 	beq.w	8024d5c <_printf_i+0x1c4>
 8024bba:	2f58      	cmp	r7, #88	@ 0x58
 8024bbc:	f000 80b8 	beq.w	8024d30 <_printf_i+0x198>
 8024bc0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8024bc4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8024bc8:	e03a      	b.n	8024c40 <_printf_i+0xa8>
 8024bca:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8024bce:	2b15      	cmp	r3, #21
 8024bd0:	d8f6      	bhi.n	8024bc0 <_printf_i+0x28>
 8024bd2:	a101      	add	r1, pc, #4	@ (adr r1, 8024bd8 <_printf_i+0x40>)
 8024bd4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8024bd8:	08024c31 	.word	0x08024c31
 8024bdc:	08024c45 	.word	0x08024c45
 8024be0:	08024bc1 	.word	0x08024bc1
 8024be4:	08024bc1 	.word	0x08024bc1
 8024be8:	08024bc1 	.word	0x08024bc1
 8024bec:	08024bc1 	.word	0x08024bc1
 8024bf0:	08024c45 	.word	0x08024c45
 8024bf4:	08024bc1 	.word	0x08024bc1
 8024bf8:	08024bc1 	.word	0x08024bc1
 8024bfc:	08024bc1 	.word	0x08024bc1
 8024c00:	08024bc1 	.word	0x08024bc1
 8024c04:	08024d43 	.word	0x08024d43
 8024c08:	08024c6f 	.word	0x08024c6f
 8024c0c:	08024cfd 	.word	0x08024cfd
 8024c10:	08024bc1 	.word	0x08024bc1
 8024c14:	08024bc1 	.word	0x08024bc1
 8024c18:	08024d65 	.word	0x08024d65
 8024c1c:	08024bc1 	.word	0x08024bc1
 8024c20:	08024c6f 	.word	0x08024c6f
 8024c24:	08024bc1 	.word	0x08024bc1
 8024c28:	08024bc1 	.word	0x08024bc1
 8024c2c:	08024d05 	.word	0x08024d05
 8024c30:	6833      	ldr	r3, [r6, #0]
 8024c32:	1d1a      	adds	r2, r3, #4
 8024c34:	681b      	ldr	r3, [r3, #0]
 8024c36:	6032      	str	r2, [r6, #0]
 8024c38:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8024c3c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8024c40:	2301      	movs	r3, #1
 8024c42:	e09c      	b.n	8024d7e <_printf_i+0x1e6>
 8024c44:	6833      	ldr	r3, [r6, #0]
 8024c46:	6820      	ldr	r0, [r4, #0]
 8024c48:	1d19      	adds	r1, r3, #4
 8024c4a:	6031      	str	r1, [r6, #0]
 8024c4c:	0606      	lsls	r6, r0, #24
 8024c4e:	d501      	bpl.n	8024c54 <_printf_i+0xbc>
 8024c50:	681d      	ldr	r5, [r3, #0]
 8024c52:	e003      	b.n	8024c5c <_printf_i+0xc4>
 8024c54:	0645      	lsls	r5, r0, #25
 8024c56:	d5fb      	bpl.n	8024c50 <_printf_i+0xb8>
 8024c58:	f9b3 5000 	ldrsh.w	r5, [r3]
 8024c5c:	2d00      	cmp	r5, #0
 8024c5e:	da03      	bge.n	8024c68 <_printf_i+0xd0>
 8024c60:	232d      	movs	r3, #45	@ 0x2d
 8024c62:	426d      	negs	r5, r5
 8024c64:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8024c68:	4858      	ldr	r0, [pc, #352]	@ (8024dcc <_printf_i+0x234>)
 8024c6a:	230a      	movs	r3, #10
 8024c6c:	e011      	b.n	8024c92 <_printf_i+0xfa>
 8024c6e:	6821      	ldr	r1, [r4, #0]
 8024c70:	6833      	ldr	r3, [r6, #0]
 8024c72:	0608      	lsls	r0, r1, #24
 8024c74:	f853 5b04 	ldr.w	r5, [r3], #4
 8024c78:	d402      	bmi.n	8024c80 <_printf_i+0xe8>
 8024c7a:	0649      	lsls	r1, r1, #25
 8024c7c:	bf48      	it	mi
 8024c7e:	b2ad      	uxthmi	r5, r5
 8024c80:	2f6f      	cmp	r7, #111	@ 0x6f
 8024c82:	4852      	ldr	r0, [pc, #328]	@ (8024dcc <_printf_i+0x234>)
 8024c84:	6033      	str	r3, [r6, #0]
 8024c86:	bf14      	ite	ne
 8024c88:	230a      	movne	r3, #10
 8024c8a:	2308      	moveq	r3, #8
 8024c8c:	2100      	movs	r1, #0
 8024c8e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8024c92:	6866      	ldr	r6, [r4, #4]
 8024c94:	60a6      	str	r6, [r4, #8]
 8024c96:	2e00      	cmp	r6, #0
 8024c98:	db05      	blt.n	8024ca6 <_printf_i+0x10e>
 8024c9a:	6821      	ldr	r1, [r4, #0]
 8024c9c:	432e      	orrs	r6, r5
 8024c9e:	f021 0104 	bic.w	r1, r1, #4
 8024ca2:	6021      	str	r1, [r4, #0]
 8024ca4:	d04b      	beq.n	8024d3e <_printf_i+0x1a6>
 8024ca6:	4616      	mov	r6, r2
 8024ca8:	fbb5 f1f3 	udiv	r1, r5, r3
 8024cac:	fb03 5711 	mls	r7, r3, r1, r5
 8024cb0:	5dc7      	ldrb	r7, [r0, r7]
 8024cb2:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8024cb6:	462f      	mov	r7, r5
 8024cb8:	42bb      	cmp	r3, r7
 8024cba:	460d      	mov	r5, r1
 8024cbc:	d9f4      	bls.n	8024ca8 <_printf_i+0x110>
 8024cbe:	2b08      	cmp	r3, #8
 8024cc0:	d10b      	bne.n	8024cda <_printf_i+0x142>
 8024cc2:	6823      	ldr	r3, [r4, #0]
 8024cc4:	07df      	lsls	r7, r3, #31
 8024cc6:	d508      	bpl.n	8024cda <_printf_i+0x142>
 8024cc8:	6923      	ldr	r3, [r4, #16]
 8024cca:	6861      	ldr	r1, [r4, #4]
 8024ccc:	4299      	cmp	r1, r3
 8024cce:	bfde      	ittt	le
 8024cd0:	2330      	movle	r3, #48	@ 0x30
 8024cd2:	f806 3c01 	strble.w	r3, [r6, #-1]
 8024cd6:	f106 36ff 	addle.w	r6, r6, #4294967295
 8024cda:	1b92      	subs	r2, r2, r6
 8024cdc:	6122      	str	r2, [r4, #16]
 8024cde:	f8cd a000 	str.w	sl, [sp]
 8024ce2:	464b      	mov	r3, r9
 8024ce4:	aa03      	add	r2, sp, #12
 8024ce6:	4621      	mov	r1, r4
 8024ce8:	4640      	mov	r0, r8
 8024cea:	f7ff fee7 	bl	8024abc <_printf_common>
 8024cee:	3001      	adds	r0, #1
 8024cf0:	d14a      	bne.n	8024d88 <_printf_i+0x1f0>
 8024cf2:	f04f 30ff 	mov.w	r0, #4294967295
 8024cf6:	b004      	add	sp, #16
 8024cf8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8024cfc:	6823      	ldr	r3, [r4, #0]
 8024cfe:	f043 0320 	orr.w	r3, r3, #32
 8024d02:	6023      	str	r3, [r4, #0]
 8024d04:	4832      	ldr	r0, [pc, #200]	@ (8024dd0 <_printf_i+0x238>)
 8024d06:	2778      	movs	r7, #120	@ 0x78
 8024d08:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8024d0c:	6823      	ldr	r3, [r4, #0]
 8024d0e:	6831      	ldr	r1, [r6, #0]
 8024d10:	061f      	lsls	r7, r3, #24
 8024d12:	f851 5b04 	ldr.w	r5, [r1], #4
 8024d16:	d402      	bmi.n	8024d1e <_printf_i+0x186>
 8024d18:	065f      	lsls	r7, r3, #25
 8024d1a:	bf48      	it	mi
 8024d1c:	b2ad      	uxthmi	r5, r5
 8024d1e:	6031      	str	r1, [r6, #0]
 8024d20:	07d9      	lsls	r1, r3, #31
 8024d22:	bf44      	itt	mi
 8024d24:	f043 0320 	orrmi.w	r3, r3, #32
 8024d28:	6023      	strmi	r3, [r4, #0]
 8024d2a:	b11d      	cbz	r5, 8024d34 <_printf_i+0x19c>
 8024d2c:	2310      	movs	r3, #16
 8024d2e:	e7ad      	b.n	8024c8c <_printf_i+0xf4>
 8024d30:	4826      	ldr	r0, [pc, #152]	@ (8024dcc <_printf_i+0x234>)
 8024d32:	e7e9      	b.n	8024d08 <_printf_i+0x170>
 8024d34:	6823      	ldr	r3, [r4, #0]
 8024d36:	f023 0320 	bic.w	r3, r3, #32
 8024d3a:	6023      	str	r3, [r4, #0]
 8024d3c:	e7f6      	b.n	8024d2c <_printf_i+0x194>
 8024d3e:	4616      	mov	r6, r2
 8024d40:	e7bd      	b.n	8024cbe <_printf_i+0x126>
 8024d42:	6833      	ldr	r3, [r6, #0]
 8024d44:	6825      	ldr	r5, [r4, #0]
 8024d46:	6961      	ldr	r1, [r4, #20]
 8024d48:	1d18      	adds	r0, r3, #4
 8024d4a:	6030      	str	r0, [r6, #0]
 8024d4c:	062e      	lsls	r6, r5, #24
 8024d4e:	681b      	ldr	r3, [r3, #0]
 8024d50:	d501      	bpl.n	8024d56 <_printf_i+0x1be>
 8024d52:	6019      	str	r1, [r3, #0]
 8024d54:	e002      	b.n	8024d5c <_printf_i+0x1c4>
 8024d56:	0668      	lsls	r0, r5, #25
 8024d58:	d5fb      	bpl.n	8024d52 <_printf_i+0x1ba>
 8024d5a:	8019      	strh	r1, [r3, #0]
 8024d5c:	2300      	movs	r3, #0
 8024d5e:	6123      	str	r3, [r4, #16]
 8024d60:	4616      	mov	r6, r2
 8024d62:	e7bc      	b.n	8024cde <_printf_i+0x146>
 8024d64:	6833      	ldr	r3, [r6, #0]
 8024d66:	1d1a      	adds	r2, r3, #4
 8024d68:	6032      	str	r2, [r6, #0]
 8024d6a:	681e      	ldr	r6, [r3, #0]
 8024d6c:	6862      	ldr	r2, [r4, #4]
 8024d6e:	2100      	movs	r1, #0
 8024d70:	4630      	mov	r0, r6
 8024d72:	f7db fa75 	bl	8000260 <memchr>
 8024d76:	b108      	cbz	r0, 8024d7c <_printf_i+0x1e4>
 8024d78:	1b80      	subs	r0, r0, r6
 8024d7a:	6060      	str	r0, [r4, #4]
 8024d7c:	6863      	ldr	r3, [r4, #4]
 8024d7e:	6123      	str	r3, [r4, #16]
 8024d80:	2300      	movs	r3, #0
 8024d82:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8024d86:	e7aa      	b.n	8024cde <_printf_i+0x146>
 8024d88:	6923      	ldr	r3, [r4, #16]
 8024d8a:	4632      	mov	r2, r6
 8024d8c:	4649      	mov	r1, r9
 8024d8e:	4640      	mov	r0, r8
 8024d90:	47d0      	blx	sl
 8024d92:	3001      	adds	r0, #1
 8024d94:	d0ad      	beq.n	8024cf2 <_printf_i+0x15a>
 8024d96:	6823      	ldr	r3, [r4, #0]
 8024d98:	079b      	lsls	r3, r3, #30
 8024d9a:	d413      	bmi.n	8024dc4 <_printf_i+0x22c>
 8024d9c:	68e0      	ldr	r0, [r4, #12]
 8024d9e:	9b03      	ldr	r3, [sp, #12]
 8024da0:	4298      	cmp	r0, r3
 8024da2:	bfb8      	it	lt
 8024da4:	4618      	movlt	r0, r3
 8024da6:	e7a6      	b.n	8024cf6 <_printf_i+0x15e>
 8024da8:	2301      	movs	r3, #1
 8024daa:	4632      	mov	r2, r6
 8024dac:	4649      	mov	r1, r9
 8024dae:	4640      	mov	r0, r8
 8024db0:	47d0      	blx	sl
 8024db2:	3001      	adds	r0, #1
 8024db4:	d09d      	beq.n	8024cf2 <_printf_i+0x15a>
 8024db6:	3501      	adds	r5, #1
 8024db8:	68e3      	ldr	r3, [r4, #12]
 8024dba:	9903      	ldr	r1, [sp, #12]
 8024dbc:	1a5b      	subs	r3, r3, r1
 8024dbe:	42ab      	cmp	r3, r5
 8024dc0:	dcf2      	bgt.n	8024da8 <_printf_i+0x210>
 8024dc2:	e7eb      	b.n	8024d9c <_printf_i+0x204>
 8024dc4:	2500      	movs	r5, #0
 8024dc6:	f104 0619 	add.w	r6, r4, #25
 8024dca:	e7f5      	b.n	8024db8 <_printf_i+0x220>
 8024dcc:	0803593a 	.word	0x0803593a
 8024dd0:	0803594b 	.word	0x0803594b

08024dd4 <__sflush_r>:
 8024dd4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8024dd8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8024ddc:	0716      	lsls	r6, r2, #28
 8024dde:	4605      	mov	r5, r0
 8024de0:	460c      	mov	r4, r1
 8024de2:	d454      	bmi.n	8024e8e <__sflush_r+0xba>
 8024de4:	684b      	ldr	r3, [r1, #4]
 8024de6:	2b00      	cmp	r3, #0
 8024de8:	dc02      	bgt.n	8024df0 <__sflush_r+0x1c>
 8024dea:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8024dec:	2b00      	cmp	r3, #0
 8024dee:	dd48      	ble.n	8024e82 <__sflush_r+0xae>
 8024df0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8024df2:	2e00      	cmp	r6, #0
 8024df4:	d045      	beq.n	8024e82 <__sflush_r+0xae>
 8024df6:	2300      	movs	r3, #0
 8024df8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8024dfc:	682f      	ldr	r7, [r5, #0]
 8024dfe:	6a21      	ldr	r1, [r4, #32]
 8024e00:	602b      	str	r3, [r5, #0]
 8024e02:	d030      	beq.n	8024e66 <__sflush_r+0x92>
 8024e04:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8024e06:	89a3      	ldrh	r3, [r4, #12]
 8024e08:	0759      	lsls	r1, r3, #29
 8024e0a:	d505      	bpl.n	8024e18 <__sflush_r+0x44>
 8024e0c:	6863      	ldr	r3, [r4, #4]
 8024e0e:	1ad2      	subs	r2, r2, r3
 8024e10:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8024e12:	b10b      	cbz	r3, 8024e18 <__sflush_r+0x44>
 8024e14:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8024e16:	1ad2      	subs	r2, r2, r3
 8024e18:	2300      	movs	r3, #0
 8024e1a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8024e1c:	6a21      	ldr	r1, [r4, #32]
 8024e1e:	4628      	mov	r0, r5
 8024e20:	47b0      	blx	r6
 8024e22:	1c43      	adds	r3, r0, #1
 8024e24:	89a3      	ldrh	r3, [r4, #12]
 8024e26:	d106      	bne.n	8024e36 <__sflush_r+0x62>
 8024e28:	6829      	ldr	r1, [r5, #0]
 8024e2a:	291d      	cmp	r1, #29
 8024e2c:	d82b      	bhi.n	8024e86 <__sflush_r+0xb2>
 8024e2e:	4a2a      	ldr	r2, [pc, #168]	@ (8024ed8 <__sflush_r+0x104>)
 8024e30:	40ca      	lsrs	r2, r1
 8024e32:	07d6      	lsls	r6, r2, #31
 8024e34:	d527      	bpl.n	8024e86 <__sflush_r+0xb2>
 8024e36:	2200      	movs	r2, #0
 8024e38:	6062      	str	r2, [r4, #4]
 8024e3a:	04d9      	lsls	r1, r3, #19
 8024e3c:	6922      	ldr	r2, [r4, #16]
 8024e3e:	6022      	str	r2, [r4, #0]
 8024e40:	d504      	bpl.n	8024e4c <__sflush_r+0x78>
 8024e42:	1c42      	adds	r2, r0, #1
 8024e44:	d101      	bne.n	8024e4a <__sflush_r+0x76>
 8024e46:	682b      	ldr	r3, [r5, #0]
 8024e48:	b903      	cbnz	r3, 8024e4c <__sflush_r+0x78>
 8024e4a:	6560      	str	r0, [r4, #84]	@ 0x54
 8024e4c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8024e4e:	602f      	str	r7, [r5, #0]
 8024e50:	b1b9      	cbz	r1, 8024e82 <__sflush_r+0xae>
 8024e52:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8024e56:	4299      	cmp	r1, r3
 8024e58:	d002      	beq.n	8024e60 <__sflush_r+0x8c>
 8024e5a:	4628      	mov	r0, r5
 8024e5c:	f7ff fca2 	bl	80247a4 <_free_r>
 8024e60:	2300      	movs	r3, #0
 8024e62:	6363      	str	r3, [r4, #52]	@ 0x34
 8024e64:	e00d      	b.n	8024e82 <__sflush_r+0xae>
 8024e66:	2301      	movs	r3, #1
 8024e68:	4628      	mov	r0, r5
 8024e6a:	47b0      	blx	r6
 8024e6c:	4602      	mov	r2, r0
 8024e6e:	1c50      	adds	r0, r2, #1
 8024e70:	d1c9      	bne.n	8024e06 <__sflush_r+0x32>
 8024e72:	682b      	ldr	r3, [r5, #0]
 8024e74:	2b00      	cmp	r3, #0
 8024e76:	d0c6      	beq.n	8024e06 <__sflush_r+0x32>
 8024e78:	2b1d      	cmp	r3, #29
 8024e7a:	d001      	beq.n	8024e80 <__sflush_r+0xac>
 8024e7c:	2b16      	cmp	r3, #22
 8024e7e:	d11e      	bne.n	8024ebe <__sflush_r+0xea>
 8024e80:	602f      	str	r7, [r5, #0]
 8024e82:	2000      	movs	r0, #0
 8024e84:	e022      	b.n	8024ecc <__sflush_r+0xf8>
 8024e86:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8024e8a:	b21b      	sxth	r3, r3
 8024e8c:	e01b      	b.n	8024ec6 <__sflush_r+0xf2>
 8024e8e:	690f      	ldr	r7, [r1, #16]
 8024e90:	2f00      	cmp	r7, #0
 8024e92:	d0f6      	beq.n	8024e82 <__sflush_r+0xae>
 8024e94:	0793      	lsls	r3, r2, #30
 8024e96:	680e      	ldr	r6, [r1, #0]
 8024e98:	bf08      	it	eq
 8024e9a:	694b      	ldreq	r3, [r1, #20]
 8024e9c:	600f      	str	r7, [r1, #0]
 8024e9e:	bf18      	it	ne
 8024ea0:	2300      	movne	r3, #0
 8024ea2:	eba6 0807 	sub.w	r8, r6, r7
 8024ea6:	608b      	str	r3, [r1, #8]
 8024ea8:	f1b8 0f00 	cmp.w	r8, #0
 8024eac:	dde9      	ble.n	8024e82 <__sflush_r+0xae>
 8024eae:	6a21      	ldr	r1, [r4, #32]
 8024eb0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8024eb2:	4643      	mov	r3, r8
 8024eb4:	463a      	mov	r2, r7
 8024eb6:	4628      	mov	r0, r5
 8024eb8:	47b0      	blx	r6
 8024eba:	2800      	cmp	r0, #0
 8024ebc:	dc08      	bgt.n	8024ed0 <__sflush_r+0xfc>
 8024ebe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8024ec2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8024ec6:	81a3      	strh	r3, [r4, #12]
 8024ec8:	f04f 30ff 	mov.w	r0, #4294967295
 8024ecc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8024ed0:	4407      	add	r7, r0
 8024ed2:	eba8 0800 	sub.w	r8, r8, r0
 8024ed6:	e7e7      	b.n	8024ea8 <__sflush_r+0xd4>
 8024ed8:	20400001 	.word	0x20400001

08024edc <_fflush_r>:
 8024edc:	b538      	push	{r3, r4, r5, lr}
 8024ede:	690b      	ldr	r3, [r1, #16]
 8024ee0:	4605      	mov	r5, r0
 8024ee2:	460c      	mov	r4, r1
 8024ee4:	b913      	cbnz	r3, 8024eec <_fflush_r+0x10>
 8024ee6:	2500      	movs	r5, #0
 8024ee8:	4628      	mov	r0, r5
 8024eea:	bd38      	pop	{r3, r4, r5, pc}
 8024eec:	b118      	cbz	r0, 8024ef6 <_fflush_r+0x1a>
 8024eee:	6a03      	ldr	r3, [r0, #32]
 8024ef0:	b90b      	cbnz	r3, 8024ef6 <_fflush_r+0x1a>
 8024ef2:	f7ff f909 	bl	8024108 <__sinit>
 8024ef6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8024efa:	2b00      	cmp	r3, #0
 8024efc:	d0f3      	beq.n	8024ee6 <_fflush_r+0xa>
 8024efe:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8024f00:	07d0      	lsls	r0, r2, #31
 8024f02:	d404      	bmi.n	8024f0e <_fflush_r+0x32>
 8024f04:	0599      	lsls	r1, r3, #22
 8024f06:	d402      	bmi.n	8024f0e <_fflush_r+0x32>
 8024f08:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8024f0a:	f7ff fc32 	bl	8024772 <__retarget_lock_acquire_recursive>
 8024f0e:	4628      	mov	r0, r5
 8024f10:	4621      	mov	r1, r4
 8024f12:	f7ff ff5f 	bl	8024dd4 <__sflush_r>
 8024f16:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8024f18:	07da      	lsls	r2, r3, #31
 8024f1a:	4605      	mov	r5, r0
 8024f1c:	d4e4      	bmi.n	8024ee8 <_fflush_r+0xc>
 8024f1e:	89a3      	ldrh	r3, [r4, #12]
 8024f20:	059b      	lsls	r3, r3, #22
 8024f22:	d4e1      	bmi.n	8024ee8 <_fflush_r+0xc>
 8024f24:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8024f26:	f7ff fc25 	bl	8024774 <__retarget_lock_release_recursive>
 8024f2a:	e7dd      	b.n	8024ee8 <_fflush_r+0xc>

08024f2c <__swhatbuf_r>:
 8024f2c:	b570      	push	{r4, r5, r6, lr}
 8024f2e:	460c      	mov	r4, r1
 8024f30:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8024f34:	2900      	cmp	r1, #0
 8024f36:	b096      	sub	sp, #88	@ 0x58
 8024f38:	4615      	mov	r5, r2
 8024f3a:	461e      	mov	r6, r3
 8024f3c:	da0d      	bge.n	8024f5a <__swhatbuf_r+0x2e>
 8024f3e:	89a3      	ldrh	r3, [r4, #12]
 8024f40:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8024f44:	f04f 0100 	mov.w	r1, #0
 8024f48:	bf14      	ite	ne
 8024f4a:	2340      	movne	r3, #64	@ 0x40
 8024f4c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8024f50:	2000      	movs	r0, #0
 8024f52:	6031      	str	r1, [r6, #0]
 8024f54:	602b      	str	r3, [r5, #0]
 8024f56:	b016      	add	sp, #88	@ 0x58
 8024f58:	bd70      	pop	{r4, r5, r6, pc}
 8024f5a:	466a      	mov	r2, sp
 8024f5c:	f000 f87c 	bl	8025058 <_fstat_r>
 8024f60:	2800      	cmp	r0, #0
 8024f62:	dbec      	blt.n	8024f3e <__swhatbuf_r+0x12>
 8024f64:	9901      	ldr	r1, [sp, #4]
 8024f66:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8024f6a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8024f6e:	4259      	negs	r1, r3
 8024f70:	4159      	adcs	r1, r3
 8024f72:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8024f76:	e7eb      	b.n	8024f50 <__swhatbuf_r+0x24>

08024f78 <__smakebuf_r>:
 8024f78:	898b      	ldrh	r3, [r1, #12]
 8024f7a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8024f7c:	079d      	lsls	r5, r3, #30
 8024f7e:	4606      	mov	r6, r0
 8024f80:	460c      	mov	r4, r1
 8024f82:	d507      	bpl.n	8024f94 <__smakebuf_r+0x1c>
 8024f84:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8024f88:	6023      	str	r3, [r4, #0]
 8024f8a:	6123      	str	r3, [r4, #16]
 8024f8c:	2301      	movs	r3, #1
 8024f8e:	6163      	str	r3, [r4, #20]
 8024f90:	b003      	add	sp, #12
 8024f92:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8024f94:	ab01      	add	r3, sp, #4
 8024f96:	466a      	mov	r2, sp
 8024f98:	f7ff ffc8 	bl	8024f2c <__swhatbuf_r>
 8024f9c:	9f00      	ldr	r7, [sp, #0]
 8024f9e:	4605      	mov	r5, r0
 8024fa0:	4639      	mov	r1, r7
 8024fa2:	4630      	mov	r0, r6
 8024fa4:	f7fe fee6 	bl	8023d74 <_malloc_r>
 8024fa8:	b948      	cbnz	r0, 8024fbe <__smakebuf_r+0x46>
 8024faa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8024fae:	059a      	lsls	r2, r3, #22
 8024fb0:	d4ee      	bmi.n	8024f90 <__smakebuf_r+0x18>
 8024fb2:	f023 0303 	bic.w	r3, r3, #3
 8024fb6:	f043 0302 	orr.w	r3, r3, #2
 8024fba:	81a3      	strh	r3, [r4, #12]
 8024fbc:	e7e2      	b.n	8024f84 <__smakebuf_r+0xc>
 8024fbe:	89a3      	ldrh	r3, [r4, #12]
 8024fc0:	6020      	str	r0, [r4, #0]
 8024fc2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8024fc6:	81a3      	strh	r3, [r4, #12]
 8024fc8:	9b01      	ldr	r3, [sp, #4]
 8024fca:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8024fce:	b15b      	cbz	r3, 8024fe8 <__smakebuf_r+0x70>
 8024fd0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8024fd4:	4630      	mov	r0, r6
 8024fd6:	f000 f851 	bl	802507c <_isatty_r>
 8024fda:	b128      	cbz	r0, 8024fe8 <__smakebuf_r+0x70>
 8024fdc:	89a3      	ldrh	r3, [r4, #12]
 8024fde:	f023 0303 	bic.w	r3, r3, #3
 8024fe2:	f043 0301 	orr.w	r3, r3, #1
 8024fe6:	81a3      	strh	r3, [r4, #12]
 8024fe8:	89a3      	ldrh	r3, [r4, #12]
 8024fea:	431d      	orrs	r5, r3
 8024fec:	81a5      	strh	r5, [r4, #12]
 8024fee:	e7cf      	b.n	8024f90 <__smakebuf_r+0x18>

08024ff0 <_putc_r>:
 8024ff0:	b570      	push	{r4, r5, r6, lr}
 8024ff2:	460d      	mov	r5, r1
 8024ff4:	4614      	mov	r4, r2
 8024ff6:	4606      	mov	r6, r0
 8024ff8:	b118      	cbz	r0, 8025002 <_putc_r+0x12>
 8024ffa:	6a03      	ldr	r3, [r0, #32]
 8024ffc:	b90b      	cbnz	r3, 8025002 <_putc_r+0x12>
 8024ffe:	f7ff f883 	bl	8024108 <__sinit>
 8025002:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8025004:	07d8      	lsls	r0, r3, #31
 8025006:	d405      	bmi.n	8025014 <_putc_r+0x24>
 8025008:	89a3      	ldrh	r3, [r4, #12]
 802500a:	0599      	lsls	r1, r3, #22
 802500c:	d402      	bmi.n	8025014 <_putc_r+0x24>
 802500e:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8025010:	f7ff fbaf 	bl	8024772 <__retarget_lock_acquire_recursive>
 8025014:	68a3      	ldr	r3, [r4, #8]
 8025016:	3b01      	subs	r3, #1
 8025018:	2b00      	cmp	r3, #0
 802501a:	60a3      	str	r3, [r4, #8]
 802501c:	da05      	bge.n	802502a <_putc_r+0x3a>
 802501e:	69a2      	ldr	r2, [r4, #24]
 8025020:	4293      	cmp	r3, r2
 8025022:	db12      	blt.n	802504a <_putc_r+0x5a>
 8025024:	b2eb      	uxtb	r3, r5
 8025026:	2b0a      	cmp	r3, #10
 8025028:	d00f      	beq.n	802504a <_putc_r+0x5a>
 802502a:	6823      	ldr	r3, [r4, #0]
 802502c:	1c5a      	adds	r2, r3, #1
 802502e:	6022      	str	r2, [r4, #0]
 8025030:	701d      	strb	r5, [r3, #0]
 8025032:	b2ed      	uxtb	r5, r5
 8025034:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8025036:	07da      	lsls	r2, r3, #31
 8025038:	d405      	bmi.n	8025046 <_putc_r+0x56>
 802503a:	89a3      	ldrh	r3, [r4, #12]
 802503c:	059b      	lsls	r3, r3, #22
 802503e:	d402      	bmi.n	8025046 <_putc_r+0x56>
 8025040:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8025042:	f7ff fb97 	bl	8024774 <__retarget_lock_release_recursive>
 8025046:	4628      	mov	r0, r5
 8025048:	bd70      	pop	{r4, r5, r6, pc}
 802504a:	4629      	mov	r1, r5
 802504c:	4622      	mov	r2, r4
 802504e:	4630      	mov	r0, r6
 8025050:	f7ff f95d 	bl	802430e <__swbuf_r>
 8025054:	4605      	mov	r5, r0
 8025056:	e7ed      	b.n	8025034 <_putc_r+0x44>

08025058 <_fstat_r>:
 8025058:	b538      	push	{r3, r4, r5, lr}
 802505a:	4d07      	ldr	r5, [pc, #28]	@ (8025078 <_fstat_r+0x20>)
 802505c:	2300      	movs	r3, #0
 802505e:	4604      	mov	r4, r0
 8025060:	4608      	mov	r0, r1
 8025062:	4611      	mov	r1, r2
 8025064:	602b      	str	r3, [r5, #0]
 8025066:	f7db ffbd 	bl	8000fe4 <_fstat>
 802506a:	1c43      	adds	r3, r0, #1
 802506c:	d102      	bne.n	8025074 <_fstat_r+0x1c>
 802506e:	682b      	ldr	r3, [r5, #0]
 8025070:	b103      	cbz	r3, 8025074 <_fstat_r+0x1c>
 8025072:	6023      	str	r3, [r4, #0]
 8025074:	bd38      	pop	{r3, r4, r5, pc}
 8025076:	bf00      	nop
 8025078:	20014da4 	.word	0x20014da4

0802507c <_isatty_r>:
 802507c:	b538      	push	{r3, r4, r5, lr}
 802507e:	4d06      	ldr	r5, [pc, #24]	@ (8025098 <_isatty_r+0x1c>)
 8025080:	2300      	movs	r3, #0
 8025082:	4604      	mov	r4, r0
 8025084:	4608      	mov	r0, r1
 8025086:	602b      	str	r3, [r5, #0]
 8025088:	f7db ffbc 	bl	8001004 <_isatty>
 802508c:	1c43      	adds	r3, r0, #1
 802508e:	d102      	bne.n	8025096 <_isatty_r+0x1a>
 8025090:	682b      	ldr	r3, [r5, #0]
 8025092:	b103      	cbz	r3, 8025096 <_isatty_r+0x1a>
 8025094:	6023      	str	r3, [r4, #0]
 8025096:	bd38      	pop	{r3, r4, r5, pc}
 8025098:	20014da4 	.word	0x20014da4

0802509c <_init>:
 802509c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802509e:	bf00      	nop
 80250a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80250a2:	bc08      	pop	{r3}
 80250a4:	469e      	mov	lr, r3
 80250a6:	4770      	bx	lr

080250a8 <_fini>:
 80250a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80250aa:	bf00      	nop
 80250ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80250ae:	bc08      	pop	{r3}
 80250b0:	469e      	mov	lr, r3
 80250b2:	4770      	bx	lr
